
fota-f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  0801e000  0801e000  0000e000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081d8  0801e1e4  0801e1e4  0000e1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b2c  080263bc  080263bc  000163bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026ee8  08026ee8  00020268  2**0
                  CONTENTS
  4 .ARM          00000000  08026ee8  08026ee8  00020268  2**0
                  CONTENTS
  5 .preinit_array 00000000  08026ee8  08026ee8  00020268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026ee8  08026ee8  00016ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08026eec  08026eec  00016eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  08026ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006188  20000268  08027158  00020268  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200063f0  08027158  000263f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c7e5  00000000  00000000  00020291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e5b  00000000  00000000  0003ca76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a80  00000000  00000000  000418d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001970  00000000  00000000  00043358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001da45  00000000  00000000  00044cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f16b  00000000  00000000  0006270d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a14f3  00000000  00000000  00081878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00122d6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d38  00000000  00000000  00122dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0801e1e4 <__do_global_dtors_aux>:
 801e1e4:	b510      	push	{r4, lr}
 801e1e6:	4c05      	ldr	r4, [pc, #20]	; (801e1fc <__do_global_dtors_aux+0x18>)
 801e1e8:	7823      	ldrb	r3, [r4, #0]
 801e1ea:	b933      	cbnz	r3, 801e1fa <__do_global_dtors_aux+0x16>
 801e1ec:	4b04      	ldr	r3, [pc, #16]	; (801e200 <__do_global_dtors_aux+0x1c>)
 801e1ee:	b113      	cbz	r3, 801e1f6 <__do_global_dtors_aux+0x12>
 801e1f0:	4804      	ldr	r0, [pc, #16]	; (801e204 <__do_global_dtors_aux+0x20>)
 801e1f2:	f3af 8000 	nop.w
 801e1f6:	2301      	movs	r3, #1
 801e1f8:	7023      	strb	r3, [r4, #0]
 801e1fa:	bd10      	pop	{r4, pc}
 801e1fc:	20000268 	.word	0x20000268
 801e200:	00000000 	.word	0x00000000
 801e204:	080263a4 	.word	0x080263a4

0801e208 <frame_dummy>:
 801e208:	b508      	push	{r3, lr}
 801e20a:	4b03      	ldr	r3, [pc, #12]	; (801e218 <frame_dummy+0x10>)
 801e20c:	b11b      	cbz	r3, 801e216 <frame_dummy+0xe>
 801e20e:	4903      	ldr	r1, [pc, #12]	; (801e21c <frame_dummy+0x14>)
 801e210:	4803      	ldr	r0, [pc, #12]	; (801e220 <frame_dummy+0x18>)
 801e212:	f3af 8000 	nop.w
 801e216:	bd08      	pop	{r3, pc}
 801e218:	00000000 	.word	0x00000000
 801e21c:	2000026c 	.word	0x2000026c
 801e220:	080263a4 	.word	0x080263a4

0801e224 <strlen>:
 801e224:	4603      	mov	r3, r0
 801e226:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e22a:	2a00      	cmp	r2, #0
 801e22c:	d1fb      	bne.n	801e226 <strlen+0x2>
 801e22e:	1a18      	subs	r0, r3, r0
 801e230:	3801      	subs	r0, #1
 801e232:	4770      	bx	lr

0801e234 <MC25LC512_CS>:
unsigned char MC25LC512_ReleaseDeepPowerDownMode(void);



void MC25LC512_CS(uint8_t CS_Status)
{
 801e234:	b580      	push	{r7, lr}
 801e236:	b082      	sub	sp, #8
 801e238:	af00      	add	r7, sp, #0
 801e23a:	4603      	mov	r3, r0
 801e23c:	71fb      	strb	r3, [r7, #7]
	// For Cs of the EEprom
	if(CS_Status == EEPROM_CS_PIN_RESET)
 801e23e:	79fb      	ldrb	r3, [r7, #7]
 801e240:	2b00      	cmp	r3, #0
 801e242:	d102      	bne.n	801e24a <MC25LC512_CS+0x16>
	{
		ResetChipSelect();
 801e244:	f000 fe92 	bl	801ef6c <ResetChipSelect>
	{
		SetChipSelect();

	}

}
 801e248:	e001      	b.n	801e24e <MC25LC512_CS+0x1a>
		SetChipSelect();
 801e24a:	f000 fe9b 	bl	801ef84 <SetChipSelect>
}
 801e24e:	bf00      	nop
 801e250:	3708      	adds	r7, #8
 801e252:	46bd      	mov	sp, r7
 801e254:	bd80      	pop	{r7, pc}
	...

0801e258 <MC25LC512_WriteEnableOrDisable>:
void MC25LC512_WriteEnableOrDisable(uint8_t EnableOrDisable)
{
 801e258:	b580      	push	{r7, lr}
 801e25a:	b084      	sub	sp, #16
 801e25c:	af00      	add	r7, sp, #0
 801e25e:	4603      	mov	r3, r0
 801e260:	71fb      	strb	r3, [r7, #7]
	uint8_t SendOneByte = 0;
 801e262:	2300      	movs	r3, #0
 801e264:	72fb      	strb	r3, [r7, #11]
	MC25LC512_CS(EEPROM_CS_PIN_RESET);// Reset The spi Chip //Reset means Enable
 801e266:	2000      	movs	r0, #0
 801e268:	f7ff ffe4 	bl	801e234 <MC25LC512_CS>
	for(uint16_t i = 0; i < 10; i ++);
 801e26c:	2300      	movs	r3, #0
 801e26e:	81fb      	strh	r3, [r7, #14]
 801e270:	e002      	b.n	801e278 <MC25LC512_WriteEnableOrDisable+0x20>
 801e272:	89fb      	ldrh	r3, [r7, #14]
 801e274:	3301      	adds	r3, #1
 801e276:	81fb      	strh	r3, [r7, #14]
 801e278:	89fb      	ldrh	r3, [r7, #14]
 801e27a:	2b09      	cmp	r3, #9
 801e27c:	d9f9      	bls.n	801e272 <MC25LC512_WriteEnableOrDisable+0x1a>
	if(EnableOrDisable==EEPROM_Enable)
 801e27e:	79fb      	ldrb	r3, [r7, #7]
 801e280:	2b01      	cmp	r3, #1
 801e282:	d102      	bne.n	801e28a <MC25LC512_WriteEnableOrDisable+0x32>
	{
			SendOneByte = MC25LCxxx_SPI_WREN;
 801e284:	2306      	movs	r3, #6
 801e286:	72fb      	strb	r3, [r7, #11]
 801e288:	e001      	b.n	801e28e <MC25LC512_WriteEnableOrDisable+0x36>
	}
	else
	{
			SendOneByte = MC25LCxxx_SPI_WRDI;
 801e28a:	2304      	movs	r3, #4
 801e28c:	72fb      	strb	r3, [r7, #11]
	}
	HAL_SPI_Transmit(&Spi2Handle , &SendOneByte, 1, 200) ;
 801e28e:	f107 010b 	add.w	r1, r7, #11
 801e292:	23c8      	movs	r3, #200	; 0xc8
 801e294:	2201      	movs	r2, #1
 801e296:	4809      	ldr	r0, [pc, #36]	; (801e2bc <MC25LC512_WriteEnableOrDisable+0x64>)
 801e298:	f006 fa52 	bl	8024740 <HAL_SPI_Transmit>
	for(uint16_t i = 0; i < 10; i ++);
 801e29c:	2300      	movs	r3, #0
 801e29e:	81bb      	strh	r3, [r7, #12]
 801e2a0:	e002      	b.n	801e2a8 <MC25LC512_WriteEnableOrDisable+0x50>
 801e2a2:	89bb      	ldrh	r3, [r7, #12]
 801e2a4:	3301      	adds	r3, #1
 801e2a6:	81bb      	strh	r3, [r7, #12]
 801e2a8:	89bb      	ldrh	r3, [r7, #12]
 801e2aa:	2b09      	cmp	r3, #9
 801e2ac:	d9f9      	bls.n	801e2a2 <MC25LC512_WriteEnableOrDisable+0x4a>
	MC25LC512_CS(EEPROM_CS_PIN_SET);// Set The spi Chip //Set means Disable
 801e2ae:	2001      	movs	r0, #1
 801e2b0:	f7ff ffc0 	bl	801e234 <MC25LC512_CS>
}
 801e2b4:	bf00      	nop
 801e2b6:	3710      	adds	r7, #16
 801e2b8:	46bd      	mov	sp, r7
 801e2ba:	bd80      	pop	{r7, pc}
 801e2bc:	200013d4 	.word	0x200013d4

0801e2c0 <MC25LC512_Initialize>:
	return RecieveByteOfReleaseDeepPowerMode;

}

void MC25LC512_Initialize(void)
{
 801e2c0:	b580      	push	{r7, lr}
 801e2c2:	af00      	add	r7, sp, #0
	MC25LC512_CS(EEPROM_CS_PIN_SET);// Reset The spi Chip //Reset means Enable
 801e2c4:	2001      	movs	r0, #1
 801e2c6:	f7ff ffb5 	bl	801e234 <MC25LC512_CS>
	MC25LC512_WriteEnableOrDisable(EEPROM_Enable);
 801e2ca:	2001      	movs	r0, #1
 801e2cc:	f7ff ffc4 	bl	801e258 <MC25LC512_WriteEnableOrDisable>

}
 801e2d0:	bf00      	nop
 801e2d2:	bd80      	pop	{r7, pc}

0801e2d4 <FaBoLCD_PCF8574>:
	HAL_I2C_Master_Transmit(&I2cHandle, (uint16_t)66, (uint8_t *) initData, 1, 0xffff);
	HAL_Delay(100);
}

void FaBoLCD_PCF8574(uint8_t addr)
{
 801e2d4:	b580      	push	{r7, lr}
 801e2d6:	b086      	sub	sp, #24
 801e2d8:	af02      	add	r7, sp, #8
 801e2da:	4603      	mov	r3, r0
 801e2dc:	71fb      	strb	r3, [r7, #7]
  _i2caddr = addr;
 801e2de:	4a10      	ldr	r2, [pc, #64]	; (801e320 <FaBoLCD_PCF8574+0x4c>)
 801e2e0:	79fb      	ldrb	r3, [r7, #7]
 801e2e2:	7013      	strb	r3, [r2, #0]
  _backlight = BL;
 801e2e4:	4b0f      	ldr	r3, [pc, #60]	; (801e324 <FaBoLCD_PCF8574+0x50>)
 801e2e6:	2280      	movs	r2, #128	; 0x80
 801e2e8:	701a      	strb	r2, [r3, #0]
  uint8_t initData[1] = {0x80};
 801e2ea:	2380      	movs	r3, #128	; 0x80
 801e2ec:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit(&I2cHandle, (uint16_t)0x42, (uint8_t *) initData, 1, 0xffff);
 801e2ee:	f107 020c 	add.w	r2, r7, #12
 801e2f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e2f6:	9300      	str	r3, [sp, #0]
 801e2f8:	2301      	movs	r3, #1
 801e2fa:	2142      	movs	r1, #66	; 0x42
 801e2fc:	480a      	ldr	r0, [pc, #40]	; (801e328 <FaBoLCD_PCF8574+0x54>)
 801e2fe:	f004 fef7 	bl	80230f0 <HAL_I2C_Master_Transmit>
  HAL_Delay(100);
 801e302:	2064      	movs	r0, #100	; 0x64
 801e304:	f004 f81c 	bl	8022340 <HAL_Delay>
  init();
 801e308:	f000 f810 	bl	801e32c <init>
  begin(LCD_COLUMN, LCD_LINE, LCD_5x8DOTS);
 801e30c:	2200      	movs	r2, #0
 801e30e:	2102      	movs	r1, #2
 801e310:	2010      	movs	r0, #16
 801e312:	f000 f817 	bl	801e344 <begin>
}
 801e316:	bf00      	nop
 801e318:	3710      	adds	r7, #16
 801e31a:	46bd      	mov	sp, r7
 801e31c:	bd80      	pop	{r7, pc}
 801e31e:	bf00      	nop
 801e320:	2000134b 	.word	0x2000134b
 801e324:	20001348 	.word	0x20001348
 801e328:	20001380 	.word	0x20001380

0801e32c <init>:

/**
 @brief init
*/
void init()
{
 801e32c:	b480      	push	{r7}
 801e32e:	af00      	add	r7, sp, #0
  _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 801e330:	4b03      	ldr	r3, [pc, #12]	; (801e340 <init+0x14>)
 801e332:	2200      	movs	r2, #0
 801e334:	701a      	strb	r2, [r3, #0]
}
 801e336:	bf00      	nop
 801e338:	46bd      	mov	sp, r7
 801e33a:	bc80      	pop	{r7}
 801e33c:	4770      	bx	lr
 801e33e:	bf00      	nop
 801e340:	2000134d 	.word	0x2000134d

0801e344 <begin>:

/**
 @brief brgin
*/
void begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
 801e344:	b580      	push	{r7, lr}
 801e346:	b082      	sub	sp, #8
 801e348:	af00      	add	r7, sp, #0
 801e34a:	4603      	mov	r3, r0
 801e34c:	71fb      	strb	r3, [r7, #7]
 801e34e:	460b      	mov	r3, r1
 801e350:	71bb      	strb	r3, [r7, #6]
 801e352:	4613      	mov	r3, r2
 801e354:	717b      	strb	r3, [r7, #5]
  if (lines > 1) {
 801e356:	79bb      	ldrb	r3, [r7, #6]
 801e358:	2b01      	cmp	r3, #1
 801e35a:	d906      	bls.n	801e36a <begin+0x26>
	_displayfunction |= LCD_2LINE;
 801e35c:	4b2b      	ldr	r3, [pc, #172]	; (801e40c <begin+0xc8>)
 801e35e:	781b      	ldrb	r3, [r3, #0]
 801e360:	f043 0308 	orr.w	r3, r3, #8
 801e364:	b2da      	uxtb	r2, r3
 801e366:	4b29      	ldr	r3, [pc, #164]	; (801e40c <begin+0xc8>)
 801e368:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 801e36a:	4a29      	ldr	r2, [pc, #164]	; (801e410 <begin+0xcc>)
 801e36c:	79bb      	ldrb	r3, [r7, #6]
 801e36e:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 801e370:	79fa      	ldrb	r2, [r7, #7]
 801e372:	79fb      	ldrb	r3, [r7, #7]
 801e374:	3340      	adds	r3, #64	; 0x40
 801e376:	2140      	movs	r1, #64	; 0x40
 801e378:	2000      	movs	r0, #0
 801e37a:	f000 f84f 	bl	801e41c <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 801e37e:	797b      	ldrb	r3, [r7, #5]
 801e380:	2b00      	cmp	r3, #0
 801e382:	d009      	beq.n	801e398 <begin+0x54>
 801e384:	79bb      	ldrb	r3, [r7, #6]
 801e386:	2b01      	cmp	r3, #1
 801e388:	d106      	bne.n	801e398 <begin+0x54>
	_displayfunction |= LCD_5x10DOTS;
 801e38a:	4b20      	ldr	r3, [pc, #128]	; (801e40c <begin+0xc8>)
 801e38c:	781b      	ldrb	r3, [r3, #0]
 801e38e:	f043 0304 	orr.w	r3, r3, #4
 801e392:	b2da      	uxtb	r2, r3
 801e394:	4b1d      	ldr	r3, [pc, #116]	; (801e40c <begin+0xc8>)
 801e396:	701a      	strb	r2, [r3, #0]
  }

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way before 4.5V so we'll wait 50
  HAL_Delay(50);
 801e398:	2032      	movs	r0, #50	; 0x32
 801e39a:	f003 ffd1 	bl	8022340 <HAL_Delay>
  // Now we pull both RS and R/W low to begin commands
  writeI2c(0x00);
 801e39e:	2000      	movs	r0, #0
 801e3a0:	f000 f922 	bl	801e5e8 <writeI2c>

  // this is according to the hitachi HD44780 datasheet
  // figure 24, pg 46

  // we start in 8bit mode, try to set 4 bit mode
  write4bits(DB4|DB5);
 801e3a4:	2003      	movs	r0, #3
 801e3a6:	f000 f90e 	bl	801e5c6 <write4bits>
  HAL_Delay(5); // wait min 4.1ms
 801e3aa:	2005      	movs	r0, #5
 801e3ac:	f003 ffc8 	bl	8022340 <HAL_Delay>

  // second try
  write4bits(DB4|DB5);
 801e3b0:	2003      	movs	r0, #3
 801e3b2:	f000 f908 	bl	801e5c6 <write4bits>
  HAL_Delay(5); // wait min 4.1ms
 801e3b6:	2005      	movs	r0, #5
 801e3b8:	f003 ffc2 	bl	8022340 <HAL_Delay>

  // third go!
  write4bits(DB4|DB5);
 801e3bc:	2003      	movs	r0, #3
 801e3be:	f000 f902 	bl	801e5c6 <write4bits>
  HAL_Delay(2);
 801e3c2:	2002      	movs	r0, #2
 801e3c4:	f003 ffbc 	bl	8022340 <HAL_Delay>

  // finally, set to 4-bit interface
  write4bits(DB5);
 801e3c8:	2002      	movs	r0, #2
 801e3ca:	f000 f8fc 	bl	801e5c6 <write4bits>

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 801e3ce:	4b0f      	ldr	r3, [pc, #60]	; (801e40c <begin+0xc8>)
 801e3d0:	781b      	ldrb	r3, [r3, #0]
 801e3d2:	f043 0320 	orr.w	r3, r3, #32
 801e3d6:	b2db      	uxtb	r3, r3
 801e3d8:	4618      	mov	r0, r3
 801e3da:	f000 f88f 	bl	801e4fc <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 801e3de:	4b0d      	ldr	r3, [pc, #52]	; (801e414 <begin+0xd0>)
 801e3e0:	2204      	movs	r2, #4
 801e3e2:	701a      	strb	r2, [r3, #0]
  display();
 801e3e4:	f000 f874 	bl	801e4d0 <display>

  // clear it off
  clear();
 801e3e8:	f000 f836 	bl	801e458 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 801e3ec:	4b0a      	ldr	r3, [pc, #40]	; (801e418 <begin+0xd4>)
 801e3ee:	2202      	movs	r2, #2
 801e3f0:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 801e3f2:	4b09      	ldr	r3, [pc, #36]	; (801e418 <begin+0xd4>)
 801e3f4:	781b      	ldrb	r3, [r3, #0]
 801e3f6:	f043 0304 	orr.w	r3, r3, #4
 801e3fa:	b2db      	uxtb	r3, r3
 801e3fc:	4618      	mov	r0, r3
 801e3fe:	f000 f87d 	bl	801e4fc <command>

}
 801e402:	bf00      	nop
 801e404:	3708      	adds	r7, #8
 801e406:	46bd      	mov	sp, r7
 801e408:	bd80      	pop	{r7, pc}
 801e40a:	bf00      	nop
 801e40c:	2000134d 	.word	0x2000134d
 801e410:	2000134a 	.word	0x2000134a
 801e414:	20001349 	.word	0x20001349
 801e418:	2000134c 	.word	0x2000134c

0801e41c <setRowOffsets>:

/**
 @brief setRowOffsets
*/
void setRowOffsets(int row0, int row1, int row2, int row3)
{
 801e41c:	b480      	push	{r7}
 801e41e:	b085      	sub	sp, #20
 801e420:	af00      	add	r7, sp, #0
 801e422:	60f8      	str	r0, [r7, #12]
 801e424:	60b9      	str	r1, [r7, #8]
 801e426:	607a      	str	r2, [r7, #4]
 801e428:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 801e42a:	68fb      	ldr	r3, [r7, #12]
 801e42c:	b2da      	uxtb	r2, r3
 801e42e:	4b09      	ldr	r3, [pc, #36]	; (801e454 <setRowOffsets+0x38>)
 801e430:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 801e432:	68bb      	ldr	r3, [r7, #8]
 801e434:	b2da      	uxtb	r2, r3
 801e436:	4b07      	ldr	r3, [pc, #28]	; (801e454 <setRowOffsets+0x38>)
 801e438:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 801e43a:	687b      	ldr	r3, [r7, #4]
 801e43c:	b2da      	uxtb	r2, r3
 801e43e:	4b05      	ldr	r3, [pc, #20]	; (801e454 <setRowOffsets+0x38>)
 801e440:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 801e442:	683b      	ldr	r3, [r7, #0]
 801e444:	b2da      	uxtb	r2, r3
 801e446:	4b03      	ldr	r3, [pc, #12]	; (801e454 <setRowOffsets+0x38>)
 801e448:	70da      	strb	r2, [r3, #3]
}
 801e44a:	bf00      	nop
 801e44c:	3714      	adds	r7, #20
 801e44e:	46bd      	mov	sp, r7
 801e450:	bc80      	pop	{r7}
 801e452:	4770      	bx	lr
 801e454:	20001344 	.word	0x20001344

0801e458 <clear>:

/**
 @brief clear
*/
void clear()
{
 801e458:	b580      	push	{r7, lr}
 801e45a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 801e45c:	2001      	movs	r0, #1
 801e45e:	f000 f84d 	bl	801e4fc <command>
  HAL_Delay(2);  // this command takes a long time!
 801e462:	2002      	movs	r0, #2
 801e464:	f003 ff6c 	bl	8022340 <HAL_Delay>
}
 801e468:	bf00      	nop
 801e46a:	bd80      	pop	{r7, pc}

0801e46c <setCursor>:

/**
 @brief setCursor
*/
void setCursor(uint8_t col, uint8_t row)
{
 801e46c:	b580      	push	{r7, lr}
 801e46e:	b084      	sub	sp, #16
 801e470:	af00      	add	r7, sp, #0
 801e472:	4603      	mov	r3, r0
 801e474:	460a      	mov	r2, r1
 801e476:	71fb      	strb	r3, [r7, #7]
 801e478:	4613      	mov	r3, r2
 801e47a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 801e47c:	2304      	movs	r3, #4
 801e47e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 801e480:	79bb      	ldrb	r3, [r7, #6]
 801e482:	68fa      	ldr	r2, [r7, #12]
 801e484:	429a      	cmp	r2, r3
 801e486:	d803      	bhi.n	801e490 <setCursor+0x24>
	row = max_lines - 1;    // we count rows starting w/0
 801e488:	68fb      	ldr	r3, [r7, #12]
 801e48a:	b2db      	uxtb	r3, r3
 801e48c:	3b01      	subs	r3, #1
 801e48e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 801e490:	4b0d      	ldr	r3, [pc, #52]	; (801e4c8 <setCursor+0x5c>)
 801e492:	781b      	ldrb	r3, [r3, #0]
 801e494:	79ba      	ldrb	r2, [r7, #6]
 801e496:	429a      	cmp	r2, r3
 801e498:	d303      	bcc.n	801e4a2 <setCursor+0x36>
	row = _numlines - 1;    // we count rows starting w/0
 801e49a:	4b0b      	ldr	r3, [pc, #44]	; (801e4c8 <setCursor+0x5c>)
 801e49c:	781b      	ldrb	r3, [r3, #0]
 801e49e:	3b01      	subs	r3, #1
 801e4a0:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 801e4a2:	79bb      	ldrb	r3, [r7, #6]
 801e4a4:	4a09      	ldr	r2, [pc, #36]	; (801e4cc <setCursor+0x60>)
 801e4a6:	5cd2      	ldrb	r2, [r2, r3]
 801e4a8:	79fb      	ldrb	r3, [r7, #7]
 801e4aa:	4413      	add	r3, r2
 801e4ac:	b2db      	uxtb	r3, r3
 801e4ae:	b25b      	sxtb	r3, r3
 801e4b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801e4b4:	b25b      	sxtb	r3, r3
 801e4b6:	b2db      	uxtb	r3, r3
 801e4b8:	4618      	mov	r0, r3
 801e4ba:	f000 f81f 	bl	801e4fc <command>
}
 801e4be:	bf00      	nop
 801e4c0:	3710      	adds	r7, #16
 801e4c2:	46bd      	mov	sp, r7
 801e4c4:	bd80      	pop	{r7, pc}
 801e4c6:	bf00      	nop
 801e4c8:	2000134a 	.word	0x2000134a
 801e4cc:	20001344 	.word	0x20001344

0801e4d0 <display>:
}

/**
 @brief Turn the display on (quickly)
*/
void display() {
 801e4d0:	b580      	push	{r7, lr}
 801e4d2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 801e4d4:	4b08      	ldr	r3, [pc, #32]	; (801e4f8 <display+0x28>)
 801e4d6:	781b      	ldrb	r3, [r3, #0]
 801e4d8:	f043 0304 	orr.w	r3, r3, #4
 801e4dc:	b2da      	uxtb	r2, r3
 801e4de:	4b06      	ldr	r3, [pc, #24]	; (801e4f8 <display+0x28>)
 801e4e0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 801e4e2:	4b05      	ldr	r3, [pc, #20]	; (801e4f8 <display+0x28>)
 801e4e4:	781b      	ldrb	r3, [r3, #0]
 801e4e6:	f043 0308 	orr.w	r3, r3, #8
 801e4ea:	b2db      	uxtb	r3, r3
 801e4ec:	4618      	mov	r0, r3
 801e4ee:	f000 f805 	bl	801e4fc <command>
}
 801e4f2:	bf00      	nop
 801e4f4:	bd80      	pop	{r7, pc}
 801e4f6:	bf00      	nop
 801e4f8:	20001349 	.word	0x20001349

0801e4fc <command>:
/*********** mid level commands, for sending data/cmds */

/**
 @brief command
*/
inline void command(uint8_t value) {
 801e4fc:	b580      	push	{r7, lr}
 801e4fe:	b082      	sub	sp, #8
 801e500:	af00      	add	r7, sp, #0
 801e502:	4603      	mov	r3, r0
 801e504:	71fb      	strb	r3, [r7, #7]
  send(value, 0);
 801e506:	79fb      	ldrb	r3, [r7, #7]
 801e508:	2100      	movs	r1, #0
 801e50a:	4618      	mov	r0, r3
 801e50c:	f000 f813 	bl	801e536 <send>
}
 801e510:	bf00      	nop
 801e512:	3708      	adds	r7, #8
 801e514:	46bd      	mov	sp, r7
 801e516:	bd80      	pop	{r7, pc}

0801e518 <write>:

/**
 @brief write
*/
inline uint8_t write(uint8_t value) {
 801e518:	b580      	push	{r7, lr}
 801e51a:	b082      	sub	sp, #8
 801e51c:	af00      	add	r7, sp, #0
 801e51e:	4603      	mov	r3, r0
 801e520:	71fb      	strb	r3, [r7, #7]
  send(value, RS);
 801e522:	79fb      	ldrb	r3, [r7, #7]
 801e524:	2140      	movs	r1, #64	; 0x40
 801e526:	4618      	mov	r0, r3
 801e528:	f000 f805 	bl	801e536 <send>
  return 1; // assume sucess
 801e52c:	2301      	movs	r3, #1
}
 801e52e:	4618      	mov	r0, r3
 801e530:	3708      	adds	r7, #8
 801e532:	46bd      	mov	sp, r7
 801e534:	bd80      	pop	{r7, pc}

0801e536 <send>:
/************ low level data pushing commands **********/

/**
 @brief write either command or data, 4-bit
*/
void send(uint8_t value, uint8_t mode) {
 801e536:	b580      	push	{r7, lr}
 801e538:	b084      	sub	sp, #16
 801e53a:	af00      	add	r7, sp, #0
 801e53c:	4603      	mov	r3, r0
 801e53e:	460a      	mov	r2, r1
 801e540:	71fb      	strb	r3, [r7, #7]
 801e542:	4613      	mov	r3, r2
 801e544:	71bb      	strb	r3, [r7, #6]
  uint8_t Hbit = (value >> 4) & 0x0F;
 801e546:	79fb      	ldrb	r3, [r7, #7]
 801e548:	091b      	lsrs	r3, r3, #4
 801e54a:	73fb      	strb	r3, [r7, #15]
  uint8_t Lbit = value & 0x0F;
 801e54c:	79fb      	ldrb	r3, [r7, #7]
 801e54e:	f003 030f 	and.w	r3, r3, #15
 801e552:	73bb      	strb	r3, [r7, #14]
  write4bits(Hbit|mode);
 801e554:	7bfa      	ldrb	r2, [r7, #15]
 801e556:	79bb      	ldrb	r3, [r7, #6]
 801e558:	4313      	orrs	r3, r2
 801e55a:	b2db      	uxtb	r3, r3
 801e55c:	4618      	mov	r0, r3
 801e55e:	f000 f832 	bl	801e5c6 <write4bits>
  write4bits(Lbit|mode);
 801e562:	7bba      	ldrb	r2, [r7, #14]
 801e564:	79bb      	ldrb	r3, [r7, #6]
 801e566:	4313      	orrs	r3, r2
 801e568:	b2db      	uxtb	r3, r3
 801e56a:	4618      	mov	r0, r3
 801e56c:	f000 f82b 	bl	801e5c6 <write4bits>
}
 801e570:	bf00      	nop
 801e572:	3710      	adds	r7, #16
 801e574:	46bd      	mov	sp, r7
 801e576:	bd80      	pop	{r7, pc}

0801e578 <pulseEnable>:

/**
 @brief pulseEnable
*/
void pulseEnable(uint8_t value) {
 801e578:	b580      	push	{r7, lr}
 801e57a:	b082      	sub	sp, #8
 801e57c:	af00      	add	r7, sp, #0
 801e57e:	4603      	mov	r3, r0
 801e580:	71fb      	strb	r3, [r7, #7]
  writeI2c(value & ~EN); // EN LOW
 801e582:	79fb      	ldrb	r3, [r7, #7]
 801e584:	f023 0310 	bic.w	r3, r3, #16
 801e588:	b2db      	uxtb	r3, r3
 801e58a:	4618      	mov	r0, r3
 801e58c:	f000 f82c 	bl	801e5e8 <writeI2c>
  HAL_Delay(1);
 801e590:	2001      	movs	r0, #1
 801e592:	f003 fed5 	bl	8022340 <HAL_Delay>
  writeI2c(value|EN);    // EN HIGH
 801e596:	79fb      	ldrb	r3, [r7, #7]
 801e598:	f043 0310 	orr.w	r3, r3, #16
 801e59c:	b2db      	uxtb	r3, r3
 801e59e:	4618      	mov	r0, r3
 801e5a0:	f000 f822 	bl	801e5e8 <writeI2c>
  HAL_Delay(1);  // enable pulse must be >450ns
 801e5a4:	2001      	movs	r0, #1
 801e5a6:	f003 fecb 	bl	8022340 <HAL_Delay>
  writeI2c(value & ~EN); // EN LOW
 801e5aa:	79fb      	ldrb	r3, [r7, #7]
 801e5ac:	f023 0310 	bic.w	r3, r3, #16
 801e5b0:	b2db      	uxtb	r3, r3
 801e5b2:	4618      	mov	r0, r3
 801e5b4:	f000 f818 	bl	801e5e8 <writeI2c>
  HAL_Delay(1); // commands need > 37us to settle
 801e5b8:	2001      	movs	r0, #1
 801e5ba:	f003 fec1 	bl	8022340 <HAL_Delay>
}
 801e5be:	bf00      	nop
 801e5c0:	3708      	adds	r7, #8
 801e5c2:	46bd      	mov	sp, r7
 801e5c4:	bd80      	pop	{r7, pc}

0801e5c6 <write4bits>:

/**
 @brief write4bits
*/
void write4bits(uint8_t value) {
 801e5c6:	b580      	push	{r7, lr}
 801e5c8:	b082      	sub	sp, #8
 801e5ca:	af00      	add	r7, sp, #0
 801e5cc:	4603      	mov	r3, r0
 801e5ce:	71fb      	strb	r3, [r7, #7]
  writeI2c(value);
 801e5d0:	79fb      	ldrb	r3, [r7, #7]
 801e5d2:	4618      	mov	r0, r3
 801e5d4:	f000 f808 	bl	801e5e8 <writeI2c>
  pulseEnable(value);
 801e5d8:	79fb      	ldrb	r3, [r7, #7]
 801e5da:	4618      	mov	r0, r3
 801e5dc:	f7ff ffcc 	bl	801e578 <pulseEnable>
}
 801e5e0:	bf00      	nop
 801e5e2:	3708      	adds	r7, #8
 801e5e4:	46bd      	mov	sp, r7
 801e5e6:	bd80      	pop	{r7, pc}

0801e5e8 <writeI2c>:

/**
 @brief writeI2c
*/
void writeI2c(uint8_t data) {
 801e5e8:	b580      	push	{r7, lr}
 801e5ea:	b086      	sub	sp, #24
 801e5ec:	af02      	add	r7, sp, #8
 801e5ee:	4603      	mov	r3, r0
 801e5f0:	71fb      	strb	r3, [r7, #7]
  uint8_t data_t[1];
  data_t[0] = data|_backlight;
 801e5f2:	4b0b      	ldr	r3, [pc, #44]	; (801e620 <writeI2c+0x38>)
 801e5f4:	781a      	ldrb	r2, [r3, #0]
 801e5f6:	79fb      	ldrb	r3, [r7, #7]
 801e5f8:	4313      	orrs	r3, r2
 801e5fa:	b2db      	uxtb	r3, r3
 801e5fc:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit (&I2cHandle, (uint16_t)_i2caddr,(uint8_t *) data_t, 1, 0xFFFF);
 801e5fe:	4b09      	ldr	r3, [pc, #36]	; (801e624 <writeI2c+0x3c>)
 801e600:	781b      	ldrb	r3, [r3, #0]
 801e602:	b299      	uxth	r1, r3
 801e604:	f107 020c 	add.w	r2, r7, #12
 801e608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e60c:	9300      	str	r3, [sp, #0]
 801e60e:	2301      	movs	r3, #1
 801e610:	4805      	ldr	r0, [pc, #20]	; (801e628 <writeI2c+0x40>)
 801e612:	f004 fd6d 	bl	80230f0 <HAL_I2C_Master_Transmit>
}
 801e616:	bf00      	nop
 801e618:	3710      	adds	r7, #16
 801e61a:	46bd      	mov	sp, r7
 801e61c:	bd80      	pop	{r7, pc}
 801e61e:	bf00      	nop
 801e620:	20001348 	.word	0x20001348
 801e624:	2000134b 	.word	0x2000134b
 801e628:	20001380 	.word	0x20001380

0801e62c <Lcd_Initialization>:
  * @brief 	Initialize LCD function.
  * @param 	None
  * @retval None
  */
void Lcd_Initialization (void)
{
 801e62c:	b580      	push	{r7, lr}
 801e62e:	af00      	add	r7, sp, #0
	FaBoLCD_PCF8574(SLAVE_ADDRESS_LCD);
 801e630:	2042      	movs	r0, #66	; 0x42
 801e632:	f7ff fe4f 	bl	801e2d4 <FaBoLCD_PCF8574>
}
 801e636:	bf00      	nop
 801e638:	bd80      	pop	{r7, pc}

0801e63a <Lcd_Send_Cmd>:

/**
  * @brief 	Send command to lcd.
  */
void Lcd_Send_Cmd (char cmd)
{
 801e63a:	b580      	push	{r7, lr}
 801e63c:	b082      	sub	sp, #8
 801e63e:	af00      	add	r7, sp, #0
 801e640:	4603      	mov	r3, r0
 801e642:	71fb      	strb	r3, [r7, #7]
	command(cmd);
 801e644:	79fb      	ldrb	r3, [r7, #7]
 801e646:	4618      	mov	r0, r3
 801e648:	f7ff ff58 	bl	801e4fc <command>
}
 801e64c:	bf00      	nop
 801e64e:	3708      	adds	r7, #8
 801e650:	46bd      	mov	sp, r7
 801e652:	bd80      	pop	{r7, pc}

0801e654 <Lcd_Send_Data>:
  * @brief 	Write received characters on lcd at the current cursor position.
  * @param 	data: character to write
  * @retval None
  */
void Lcd_Send_Data (char data)
{
 801e654:	b580      	push	{r7, lr}
 801e656:	b082      	sub	sp, #8
 801e658:	af00      	add	r7, sp, #0
 801e65a:	4603      	mov	r3, r0
 801e65c:	71fb      	strb	r3, [r7, #7]
	write(data);
 801e65e:	79fb      	ldrb	r3, [r7, #7]
 801e660:	4618      	mov	r0, r3
 801e662:	f7ff ff59 	bl	801e518 <write>
}
 801e666:	bf00      	nop
 801e668:	3708      	adds	r7, #8
 801e66a:	46bd      	mov	sp, r7
 801e66c:	bd80      	pop	{r7, pc}

0801e66e <Lcd_Send_String>:
  * @brief 	Give the string to write on lcd.
  * @param 	str: pointer string of characters
  * @retval None
  */
void Lcd_Send_String (char *str)
{
 801e66e:	b580      	push	{r7, lr}
 801e670:	b082      	sub	sp, #8
 801e672:	af00      	add	r7, sp, #0
 801e674:	6078      	str	r0, [r7, #4]
	while (*str) Lcd_Send_Data (*str++);
 801e676:	e006      	b.n	801e686 <Lcd_Send_String+0x18>
 801e678:	687b      	ldr	r3, [r7, #4]
 801e67a:	1c5a      	adds	r2, r3, #1
 801e67c:	607a      	str	r2, [r7, #4]
 801e67e:	781b      	ldrb	r3, [r3, #0]
 801e680:	4618      	mov	r0, r3
 801e682:	f7ff ffe7 	bl	801e654 <Lcd_Send_Data>
 801e686:	687b      	ldr	r3, [r7, #4]
 801e688:	781b      	ldrb	r3, [r3, #0]
 801e68a:	2b00      	cmp	r3, #0
 801e68c:	d1f4      	bne.n	801e678 <Lcd_Send_String+0xa>
}
 801e68e:	bf00      	nop
 801e690:	bf00      	nop
 801e692:	3708      	adds	r7, #8
 801e694:	46bd      	mov	sp, r7
 801e696:	bd80      	pop	{r7, pc}

0801e698 <Lcd_Clear_Display>:
  * @brief 	Clear the lcd screen
  * @param 	None
  * @retval None
  */
void Lcd_Clear_Display (void)
{
 801e698:	b580      	push	{r7, lr}
 801e69a:	af00      	add	r7, sp, #0
	Lcd_Send_Cmd (0x01); //clear display
 801e69c:	2001      	movs	r0, #1
 801e69e:	f7ff ffcc 	bl	801e63a <Lcd_Send_Cmd>
}
 801e6a2:	bf00      	nop
 801e6a4:	bd80      	pop	{r7, pc}

0801e6a6 <Lcd_Goto_XY>:
  * @param 	row: index on row, from 0 to 15
  * @param  col: index on column, from 0 to 1
  * @retval None
  */
void Lcd_Goto_XY (int row, int col)
{
 801e6a6:	b580      	push	{r7, lr}
 801e6a8:	b082      	sub	sp, #8
 801e6aa:	af00      	add	r7, sp, #0
 801e6ac:	6078      	str	r0, [r7, #4]
 801e6ae:	6039      	str	r1, [r7, #0]
	setCursor(col, row);
 801e6b0:	683b      	ldr	r3, [r7, #0]
 801e6b2:	b2db      	uxtb	r3, r3
 801e6b4:	687a      	ldr	r2, [r7, #4]
 801e6b6:	b2d2      	uxtb	r2, r2
 801e6b8:	4611      	mov	r1, r2
 801e6ba:	4618      	mov	r0, r3
 801e6bc:	f7ff fed6 	bl	801e46c <setCursor>
}
 801e6c0:	bf00      	nop
 801e6c2:	3708      	adds	r7, #8
 801e6c4:	46bd      	mov	sp, r7
 801e6c6:	bd80      	pop	{r7, pc}

0801e6c8 <Lcd_Show_String>:
  * @brief 	Print the string on LCD, from the coordinates (row, col).
  * @param 	row: index on row to start
  * @param  col: index on column to start
  * @retval None
  */
void Lcd_Show_String(char *str, int row, int col){
 801e6c8:	b580      	push	{r7, lr}
 801e6ca:	b084      	sub	sp, #16
 801e6cc:	af00      	add	r7, sp, #0
 801e6ce:	60f8      	str	r0, [r7, #12]
 801e6d0:	60b9      	str	r1, [r7, #8]
 801e6d2:	607a      	str	r2, [r7, #4]
	Lcd_Goto_XY(row, col);
 801e6d4:	6879      	ldr	r1, [r7, #4]
 801e6d6:	68b8      	ldr	r0, [r7, #8]
 801e6d8:	f7ff ffe5 	bl	801e6a6 <Lcd_Goto_XY>
//	Lcd_Send_String("                ");	// clear the row
	Lcd_Send_String(str);
 801e6dc:	68f8      	ldr	r0, [r7, #12]
 801e6de:	f7ff ffc6 	bl	801e66e <Lcd_Send_String>
}
 801e6e2:	bf00      	nop
 801e6e4:	3710      	adds	r7, #16
 801e6e6:	46bd      	mov	sp, r7
 801e6e8:	bd80      	pop	{r7, pc}
	...

0801e6ec <PCF_Init>:
void Set_Input_PCF_Pins(void);




void PCF_Init(void){
 801e6ec:	b580      	push	{r7, lr}
 801e6ee:	b082      	sub	sp, #8
 801e6f0:	af00      	add	r7, sp, #0
	Set_Input_PCF_Pins();
 801e6f2:	f000 f8e3 	bl	801e8bc <Set_Input_PCF_Pins>
	for(uint8_t i = 0; i < 4; i++){
 801e6f6:	2300      	movs	r3, #0
 801e6f8:	71fb      	strb	r3, [r7, #7]
 801e6fa:	e007      	b.n	801e70c <PCF_Init+0x20>
		PCF_read();
 801e6fc:	f000 f85e 	bl	801e7bc <PCF_read>
		HAL_Delay(100);
 801e700:	2064      	movs	r0, #100	; 0x64
 801e702:	f003 fe1d 	bl	8022340 <HAL_Delay>
	for(uint8_t i = 0; i < 4; i++){
 801e706:	79fb      	ldrb	r3, [r7, #7]
 801e708:	3301      	adds	r3, #1
 801e70a:	71fb      	strb	r3, [r7, #7]
 801e70c:	79fb      	ldrb	r3, [r7, #7]
 801e70e:	2b03      	cmp	r3, #3
 801e710:	d9f4      	bls.n	801e6fc <PCF_Init+0x10>
	}

	sprintf((char*) strpcf, "boxID = %d\r\n", (int) Get_Box_ID());
 801e712:	f000 f811 	bl	801e738 <Get_Box_ID>
 801e716:	4603      	mov	r3, r0
 801e718:	461a      	mov	r2, r3
 801e71a:	4905      	ldr	r1, [pc, #20]	; (801e730 <PCF_Init+0x44>)
 801e71c:	4805      	ldr	r0, [pc, #20]	; (801e734 <PCF_Init+0x48>)
 801e71e:	f007 fa0d 	bl	8025b3c <siprintf>
	UART_DEBUG_Transmit((uint8_t *)strpcf);
 801e722:	4804      	ldr	r0, [pc, #16]	; (801e734 <PCF_Init+0x48>)
 801e724:	f000 fd8e 	bl	801f244 <UART_DEBUG_Transmit>
}
 801e728:	bf00      	nop
 801e72a:	3708      	adds	r7, #8
 801e72c:	46bd      	mov	sp, r7
 801e72e:	bd80      	pop	{r7, pc}
 801e730:	080263bc 	.word	0x080263bc
 801e734:	20000000 	.word	0x20000000

0801e738 <Get_Box_ID>:

uint32_t Get_All_Relay_Fuse_Statuses(void){
	return pcfData.Relay_and_Fuse_Statuses;
}

uint16_t Get_Box_ID(void){
 801e738:	b480      	push	{r7}
 801e73a:	b083      	sub	sp, #12
 801e73c:	af00      	add	r7, sp, #0
	uint8_t tempHi = pcfData.bytePCFData[2] & 0xf0;
 801e73e:	4b1e      	ldr	r3, [pc, #120]	; (801e7b8 <Get_Box_ID+0x80>)
 801e740:	789b      	ldrb	r3, [r3, #2]
 801e742:	f023 030f 	bic.w	r3, r3, #15
 801e746:	717b      	strb	r3, [r7, #5]
	uint8_t tempHiReversed = 0, temp;
 801e748:	2300      	movs	r3, #0
 801e74a:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 801e74c:	2300      	movs	r3, #0
 801e74e:	71bb      	strb	r3, [r7, #6]
 801e750:	e01b      	b.n	801e78a <Get_Box_ID+0x52>
	{
		temp = (tempHi & (1 << i));
 801e752:	79bb      	ldrb	r3, [r7, #6]
 801e754:	2201      	movs	r2, #1
 801e756:	fa02 f303 	lsl.w	r3, r2, r3
 801e75a:	b25a      	sxtb	r2, r3
 801e75c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801e760:	4013      	ands	r3, r2
 801e762:	b25b      	sxtb	r3, r3
 801e764:	713b      	strb	r3, [r7, #4]
		if(temp)
 801e766:	793b      	ldrb	r3, [r7, #4]
 801e768:	2b00      	cmp	r3, #0
 801e76a:	d00b      	beq.n	801e784 <Get_Box_ID+0x4c>
			tempHiReversed |= (1 << ((8 - 1) - i));
 801e76c:	79bb      	ldrb	r3, [r7, #6]
 801e76e:	f1c3 0307 	rsb	r3, r3, #7
 801e772:	2201      	movs	r2, #1
 801e774:	fa02 f303 	lsl.w	r3, r2, r3
 801e778:	b25a      	sxtb	r2, r3
 801e77a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e77e:	4313      	orrs	r3, r2
 801e780:	b25b      	sxtb	r3, r3
 801e782:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 801e784:	79bb      	ldrb	r3, [r7, #6]
 801e786:	3301      	adds	r3, #1
 801e788:	71bb      	strb	r3, [r7, #6]
 801e78a:	79bb      	ldrb	r3, [r7, #6]
 801e78c:	2b07      	cmp	r3, #7
 801e78e:	d9e0      	bls.n	801e752 <Get_Box_ID+0x1a>
	}

	return (uint16_t)((tempHiReversed & 0x0f) << 8) | pcfData.bytePCFData[3];
 801e790:	79fb      	ldrb	r3, [r7, #7]
 801e792:	b29b      	uxth	r3, r3
 801e794:	021b      	lsls	r3, r3, #8
 801e796:	b29b      	uxth	r3, r3
 801e798:	b21b      	sxth	r3, r3
 801e79a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801e79e:	b21a      	sxth	r2, r3
 801e7a0:	4b05      	ldr	r3, [pc, #20]	; (801e7b8 <Get_Box_ID+0x80>)
 801e7a2:	78db      	ldrb	r3, [r3, #3]
 801e7a4:	b21b      	sxth	r3, r3
 801e7a6:	4313      	orrs	r3, r2
 801e7a8:	b21b      	sxth	r3, r3
 801e7aa:	b29b      	uxth	r3, r3
}
 801e7ac:	4618      	mov	r0, r3
 801e7ae:	370c      	adds	r7, #12
 801e7b0:	46bd      	mov	sp, r7
 801e7b2:	bc80      	pop	{r7}
 801e7b4:	4770      	bx	lr
 801e7b6:	bf00      	nop
 801e7b8:	20001354 	.word	0x20001354

0801e7bc <PCF_read>:

void PCF_read(void){
 801e7bc:	b580      	push	{r7, lr}
 801e7be:	b082      	sub	sp, #8
 801e7c0:	af02      	add	r7, sp, #8
	static uint8_t pcfReadState = 0;
	switch(pcfReadState){
 801e7c2:	4b38      	ldr	r3, [pc, #224]	; (801e8a4 <PCF_read+0xe8>)
 801e7c4:	781b      	ldrb	r3, [r3, #0]
 801e7c6:	2b03      	cmp	r3, #3
 801e7c8:	d864      	bhi.n	801e894 <PCF_read+0xd8>
 801e7ca:	a201      	add	r2, pc, #4	; (adr r2, 801e7d0 <PCF_read+0x14>)
 801e7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e7d0:	0801e7e1 	.word	0x0801e7e1
 801e7d4:	0801e809 	.word	0x0801e809
 801e7d8:	0801e831 	.word	0x0801e831
 801e7dc:	0801e859 	.word	0x0801e859
	case 0:
		HAL_I2C_Master_Receive(&I2cHandle, PCF_READ_ADDRESS_1, (uint8_t*) I2CReceiveBuffer, 2, 0xffff);
 801e7e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e7e4:	9300      	str	r3, [sp, #0]
 801e7e6:	2302      	movs	r3, #2
 801e7e8:	4a2f      	ldr	r2, [pc, #188]	; (801e8a8 <PCF_read+0xec>)
 801e7ea:	2141      	movs	r1, #65	; 0x41
 801e7ec:	482f      	ldr	r0, [pc, #188]	; (801e8ac <PCF_read+0xf0>)
 801e7ee:	f004 fd7d 	bl	80232ec <HAL_I2C_Master_Receive>
		pcfData.bytePCFData[pcfReadState] = I2CReceiveBuffer[0];
 801e7f2:	4b2c      	ldr	r3, [pc, #176]	; (801e8a4 <PCF_read+0xe8>)
 801e7f4:	781b      	ldrb	r3, [r3, #0]
 801e7f6:	461a      	mov	r2, r3
 801e7f8:	4b2b      	ldr	r3, [pc, #172]	; (801e8a8 <PCF_read+0xec>)
 801e7fa:	7819      	ldrb	r1, [r3, #0]
 801e7fc:	4b2c      	ldr	r3, [pc, #176]	; (801e8b0 <PCF_read+0xf4>)
 801e7fe:	5499      	strb	r1, [r3, r2]
		pcfReadState = 1;
 801e800:	4b28      	ldr	r3, [pc, #160]	; (801e8a4 <PCF_read+0xe8>)
 801e802:	2201      	movs	r2, #1
 801e804:	701a      	strb	r2, [r3, #0]
		break;
 801e806:	e049      	b.n	801e89c <PCF_read+0xe0>
	case 1:
		HAL_I2C_Master_Receive(&I2cHandle, PCF_READ_ADDRESS_2, (uint8_t*) I2CReceiveBuffer, 2, 0xffff);
 801e808:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e80c:	9300      	str	r3, [sp, #0]
 801e80e:	2302      	movs	r3, #2
 801e810:	4a25      	ldr	r2, [pc, #148]	; (801e8a8 <PCF_read+0xec>)
 801e812:	2149      	movs	r1, #73	; 0x49
 801e814:	4825      	ldr	r0, [pc, #148]	; (801e8ac <PCF_read+0xf0>)
 801e816:	f004 fd69 	bl	80232ec <HAL_I2C_Master_Receive>
		pcfData.bytePCFData[pcfReadState] = I2CReceiveBuffer[0];
 801e81a:	4b22      	ldr	r3, [pc, #136]	; (801e8a4 <PCF_read+0xe8>)
 801e81c:	781b      	ldrb	r3, [r3, #0]
 801e81e:	461a      	mov	r2, r3
 801e820:	4b21      	ldr	r3, [pc, #132]	; (801e8a8 <PCF_read+0xec>)
 801e822:	7819      	ldrb	r1, [r3, #0]
 801e824:	4b22      	ldr	r3, [pc, #136]	; (801e8b0 <PCF_read+0xf4>)
 801e826:	5499      	strb	r1, [r3, r2]
		pcfReadState = 2;
 801e828:	4b1e      	ldr	r3, [pc, #120]	; (801e8a4 <PCF_read+0xe8>)
 801e82a:	2202      	movs	r2, #2
 801e82c:	701a      	strb	r2, [r3, #0]
		break;
 801e82e:	e035      	b.n	801e89c <PCF_read+0xe0>
	case 2:
		HAL_I2C_Master_Receive(&I2cHandle, PCF_READ_ADDRESS_3, (uint8_t*) I2CReceiveBuffer, 2, 0xffff);
 801e830:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e834:	9300      	str	r3, [sp, #0]
 801e836:	2302      	movs	r3, #2
 801e838:	4a1b      	ldr	r2, [pc, #108]	; (801e8a8 <PCF_read+0xec>)
 801e83a:	214d      	movs	r1, #77	; 0x4d
 801e83c:	481b      	ldr	r0, [pc, #108]	; (801e8ac <PCF_read+0xf0>)
 801e83e:	f004 fd55 	bl	80232ec <HAL_I2C_Master_Receive>
		pcfData.bytePCFData[pcfReadState] = I2CReceiveBuffer[0];
 801e842:	4b18      	ldr	r3, [pc, #96]	; (801e8a4 <PCF_read+0xe8>)
 801e844:	781b      	ldrb	r3, [r3, #0]
 801e846:	461a      	mov	r2, r3
 801e848:	4b17      	ldr	r3, [pc, #92]	; (801e8a8 <PCF_read+0xec>)
 801e84a:	7819      	ldrb	r1, [r3, #0]
 801e84c:	4b18      	ldr	r3, [pc, #96]	; (801e8b0 <PCF_read+0xf4>)
 801e84e:	5499      	strb	r1, [r3, r2]
		pcfReadState = 3;
 801e850:	4b14      	ldr	r3, [pc, #80]	; (801e8a4 <PCF_read+0xe8>)
 801e852:	2203      	movs	r2, #3
 801e854:	701a      	strb	r2, [r3, #0]
		break;
 801e856:	e021      	b.n	801e89c <PCF_read+0xe0>
	case 3:
		HAL_I2C_Master_Receive(&I2cHandle, PCF_READ_ADDRESS_4, (uint8_t*) I2CReceiveBuffer, 2, 0xffff);
 801e858:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e85c:	9300      	str	r3, [sp, #0]
 801e85e:	2302      	movs	r3, #2
 801e860:	4a11      	ldr	r2, [pc, #68]	; (801e8a8 <PCF_read+0xec>)
 801e862:	214f      	movs	r1, #79	; 0x4f
 801e864:	4811      	ldr	r0, [pc, #68]	; (801e8ac <PCF_read+0xf0>)
 801e866:	f004 fd41 	bl	80232ec <HAL_I2C_Master_Receive>
		pcfData.bytePCFData[pcfReadState] = I2CReceiveBuffer[0];
 801e86a:	4b0e      	ldr	r3, [pc, #56]	; (801e8a4 <PCF_read+0xe8>)
 801e86c:	781b      	ldrb	r3, [r3, #0]
 801e86e:	461a      	mov	r2, r3
 801e870:	4b0d      	ldr	r3, [pc, #52]	; (801e8a8 <PCF_read+0xec>)
 801e872:	7819      	ldrb	r1, [r3, #0]
 801e874:	4b0e      	ldr	r3, [pc, #56]	; (801e8b0 <PCF_read+0xf4>)
 801e876:	5499      	strb	r1, [r3, r2]
		pcfReadState = 0;
 801e878:	4b0a      	ldr	r3, [pc, #40]	; (801e8a4 <PCF_read+0xe8>)
 801e87a:	2200      	movs	r2, #0
 801e87c:	701a      	strb	r2, [r3, #0]
		sprintf((char*) strpcf, "%08X\r\n", (int) pcfData.Relay_and_Fuse_Statuses);
 801e87e:	4b0c      	ldr	r3, [pc, #48]	; (801e8b0 <PCF_read+0xf4>)
 801e880:	681b      	ldr	r3, [r3, #0]
 801e882:	461a      	mov	r2, r3
 801e884:	490b      	ldr	r1, [pc, #44]	; (801e8b4 <PCF_read+0xf8>)
 801e886:	480c      	ldr	r0, [pc, #48]	; (801e8b8 <PCF_read+0xfc>)
 801e888:	f007 f958 	bl	8025b3c <siprintf>
		UART_DEBUG_Transmit((uint8_t *)strpcf);
 801e88c:	480a      	ldr	r0, [pc, #40]	; (801e8b8 <PCF_read+0xfc>)
 801e88e:	f000 fcd9 	bl	801f244 <UART_DEBUG_Transmit>
		break;
 801e892:	e003      	b.n	801e89c <PCF_read+0xe0>
	default:
		pcfReadState = 0;
 801e894:	4b03      	ldr	r3, [pc, #12]	; (801e8a4 <PCF_read+0xe8>)
 801e896:	2200      	movs	r2, #0
 801e898:	701a      	strb	r2, [r3, #0]
		break;
 801e89a:	bf00      	nop
	}


}
 801e89c:	bf00      	nop
 801e89e:	46bd      	mov	sp, r7
 801e8a0:	bd80      	pop	{r7, pc}
 801e8a2:	bf00      	nop
 801e8a4:	20000284 	.word	0x20000284
 801e8a8:	20001350 	.word	0x20001350
 801e8ac:	20001380 	.word	0x20001380
 801e8b0:	20001354 	.word	0x20001354
 801e8b4:	080263cc 	.word	0x080263cc
 801e8b8:	20000000 	.word	0x20000000

0801e8bc <Set_Input_PCF_Pins>:
			return (0x03 & (I2CReceiveBuffer[0] >> ((address - 8) * 2)));
		}
		return 0;
}

void Set_Input_PCF_Pins(void){
 801e8bc:	b580      	push	{r7, lr}
 801e8be:	b084      	sub	sp, #16
 801e8c0:	af02      	add	r7, sp, #8
	uint8_t initData[1] = {0xff};
 801e8c2:	23ff      	movs	r3, #255	; 0xff
 801e8c4:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&I2cHandle, (uint16_t)PCF_WRITE_ADDRESS_1, (uint8_t *) initData, 1, 0xffff);
 801e8c6:	1d3a      	adds	r2, r7, #4
 801e8c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e8cc:	9300      	str	r3, [sp, #0]
 801e8ce:	2301      	movs	r3, #1
 801e8d0:	2140      	movs	r1, #64	; 0x40
 801e8d2:	4817      	ldr	r0, [pc, #92]	; (801e930 <Set_Input_PCF_Pins+0x74>)
 801e8d4:	f004 fc0c 	bl	80230f0 <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 801e8d8:	2064      	movs	r0, #100	; 0x64
 801e8da:	f003 fd31 	bl	8022340 <HAL_Delay>
	HAL_I2C_Master_Transmit(&I2cHandle, (uint16_t)PCF_WRITE_ADDRESS_2, (uint8_t *) initData, 1, 0xffff);
 801e8de:	1d3a      	adds	r2, r7, #4
 801e8e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e8e4:	9300      	str	r3, [sp, #0]
 801e8e6:	2301      	movs	r3, #1
 801e8e8:	2148      	movs	r1, #72	; 0x48
 801e8ea:	4811      	ldr	r0, [pc, #68]	; (801e930 <Set_Input_PCF_Pins+0x74>)
 801e8ec:	f004 fc00 	bl	80230f0 <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 801e8f0:	2064      	movs	r0, #100	; 0x64
 801e8f2:	f003 fd25 	bl	8022340 <HAL_Delay>
	HAL_I2C_Master_Transmit(&I2cHandle, (uint16_t)PCF_WRITE_ADDRESS_3, (uint8_t *) initData, 1, 0xffff);
 801e8f6:	1d3a      	adds	r2, r7, #4
 801e8f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e8fc:	9300      	str	r3, [sp, #0]
 801e8fe:	2301      	movs	r3, #1
 801e900:	214c      	movs	r1, #76	; 0x4c
 801e902:	480b      	ldr	r0, [pc, #44]	; (801e930 <Set_Input_PCF_Pins+0x74>)
 801e904:	f004 fbf4 	bl	80230f0 <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 801e908:	2064      	movs	r0, #100	; 0x64
 801e90a:	f003 fd19 	bl	8022340 <HAL_Delay>
	HAL_I2C_Master_Transmit(&I2cHandle, (uint16_t)PCF_WRITE_ADDRESS_4, (uint8_t *) initData, 1, 0xffff);
 801e90e:	1d3a      	adds	r2, r7, #4
 801e910:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e914:	9300      	str	r3, [sp, #0]
 801e916:	2301      	movs	r3, #1
 801e918:	214e      	movs	r1, #78	; 0x4e
 801e91a:	4805      	ldr	r0, [pc, #20]	; (801e930 <Set_Input_PCF_Pins+0x74>)
 801e91c:	f004 fbe8 	bl	80230f0 <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 801e920:	2064      	movs	r0, #100	; 0x64
 801e922:	f003 fd0d 	bl	8022340 <HAL_Delay>

}
 801e926:	bf00      	nop
 801e928:	3708      	adds	r7, #8
 801e92a:	46bd      	mov	sp, r7
 801e92c:	bd80      	pop	{r7, pc}
 801e92e:	bf00      	nop
 801e930:	20001380 	.word	0x20001380

0801e934 <is_Sim7600_TimeOutFlag>:
 * is_Sim7600_TimeOutFlag()
 * @param None.
 * @retval Flagstatus: SET or RESET
 * @brief This function return sim7600_timeout_flag.
 */
FlagStatus is_Sim7600_TimeOutFlag(){
 801e934:	b480      	push	{r7}
 801e936:	af00      	add	r7, sp, #0
	return sim7600_timeout_flag;
 801e938:	4b02      	ldr	r3, [pc, #8]	; (801e944 <is_Sim7600_TimeOutFlag+0x10>)
 801e93a:	781b      	ldrb	r3, [r3, #0]
}
 801e93c:	4618      	mov	r0, r3
 801e93e:	46bd      	mov	sp, r7
 801e940:	bc80      	pop	{r7}
 801e942:	4770      	bx	lr
 801e944:	20000286 	.word	0x20000286

0801e948 <Set_Sim7600_Timeout_Flag>:
 * Set_Sim7600_Timeout_Flag()
 * @param None.
 * @retval None
 * @brief This function set sim7600_timeout_flag to SET.
 */
void Set_Sim7600_Timeout_Flag(void){
 801e948:	b480      	push	{r7}
 801e94a:	af00      	add	r7, sp, #0
	sim7600_timeout_flag = SET;
 801e94c:	4b03      	ldr	r3, [pc, #12]	; (801e95c <Set_Sim7600_Timeout_Flag+0x14>)
 801e94e:	2201      	movs	r2, #1
 801e950:	701a      	strb	r2, [r3, #0]
}
 801e952:	bf00      	nop
 801e954:	46bd      	mov	sp, r7
 801e956:	bc80      	pop	{r7}
 801e958:	4770      	bx	lr
 801e95a:	bf00      	nop
 801e95c:	20000286 	.word	0x20000286

0801e960 <Clear_Sim7600_Timeout_Flag>:
 * Clear_Sim7600_Timeout_Flag()
 * @param None.
 * @retval None
 * @brief This function set sim7600_timeout_flag to RESET.
 */
void Clear_Sim7600_Timeout_Flag(void){
 801e960:	b480      	push	{r7}
 801e962:	af00      	add	r7, sp, #0
	sim7600_timeout_flag = RESET;
 801e964:	4b03      	ldr	r3, [pc, #12]	; (801e974 <Clear_Sim7600_Timeout_Flag+0x14>)
 801e966:	2200      	movs	r2, #0
 801e968:	701a      	strb	r2, [r3, #0]
}
 801e96a:	bf00      	nop
 801e96c:	46bd      	mov	sp, r7
 801e96e:	bc80      	pop	{r7}
 801e970:	4770      	bx	lr
 801e972:	bf00      	nop
 801e974:	20000286 	.word	0x20000286

0801e978 <Sim7600_State_Display>:

/**
 * Sim7600_State_Display()
 * @brief This is function for display state of State Machine. It only show State when having a state changation.
 */
void Sim7600_State_Display(void){
 801e978:	b580      	push	{r7, lr}
 801e97a:	af00      	add	r7, sp, #0
	if(sim7600_state!=prev_sim7600_state){
 801e97c:	4b2a      	ldr	r3, [pc, #168]	; (801ea28 <Sim7600_State_Display+0xb0>)
 801e97e:	781a      	ldrb	r2, [r3, #0]
 801e980:	4b2a      	ldr	r3, [pc, #168]	; (801ea2c <Sim7600_State_Display+0xb4>)
 801e982:	781b      	ldrb	r3, [r3, #0]
 801e984:	429a      	cmp	r2, r3
 801e986:	d049      	beq.n	801ea1c <Sim7600_State_Display+0xa4>
		switch(sim7600_state){
 801e988:	4b27      	ldr	r3, [pc, #156]	; (801ea28 <Sim7600_State_Display+0xb0>)
 801e98a:	781b      	ldrb	r3, [r3, #0]
 801e98c:	2b0a      	cmp	r3, #10
 801e98e:	d847      	bhi.n	801ea20 <Sim7600_State_Display+0xa8>
 801e990:	a201      	add	r2, pc, #4	; (adr r2, 801e998 <Sim7600_State_Display+0x20>)
 801e992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e996:	bf00      	nop
 801e998:	0801e9c5 	.word	0x0801e9c5
 801e99c:	0801e9cd 	.word	0x0801e9cd
 801e9a0:	0801e9d5 	.word	0x0801e9d5
 801e9a4:	0801e9dd 	.word	0x0801e9dd
 801e9a8:	0801e9e5 	.word	0x0801e9e5
 801e9ac:	0801e9ed 	.word	0x0801e9ed
 801e9b0:	0801e9f5 	.word	0x0801e9f5
 801e9b4:	0801e9fd 	.word	0x0801e9fd
 801e9b8:	0801ea05 	.word	0x0801ea05
 801e9bc:	0801ea0d 	.word	0x0801ea0d
 801e9c0:	0801ea15 	.word	0x0801ea15
		case SIM7600_POWER_ON:
			LOG("\r\nSIM7600 POWER ON\r\n");
 801e9c4:	481a      	ldr	r0, [pc, #104]	; (801ea30 <Sim7600_State_Display+0xb8>)
 801e9c6:	f000 fc3d 	bl	801f244 <UART_DEBUG_Transmit>
			break;
 801e9ca:	e02a      	b.n	801ea22 <Sim7600_State_Display+0xaa>
		case SIM7600_WAIT_FOR_POWER_ON_RESPONE:
			LOG((uint8_t*)"\r\nSIM7600 WAIT FOR POWER ON RESPONE\r\n");
 801e9cc:	4819      	ldr	r0, [pc, #100]	; (801ea34 <Sim7600_State_Display+0xbc>)
 801e9ce:	f000 fc39 	bl	801f244 <UART_DEBUG_Transmit>
			break;
 801e9d2:	e026      	b.n	801ea22 <Sim7600_State_Display+0xaa>
		case SIM7600_RESET:
			LOG((uint8_t*)"\r\nSIM7600 RESET\r\n");
 801e9d4:	4818      	ldr	r0, [pc, #96]	; (801ea38 <Sim7600_State_Display+0xc0>)
 801e9d6:	f000 fc35 	bl	801f244 <UART_DEBUG_Transmit>
			break;
 801e9da:	e022      	b.n	801ea22 <Sim7600_State_Display+0xaa>
		case SIM7600_WAIT_FOR_RESET_RESPONE:
			LOG((uint8_t*)"\r\nSIM7600 WAIT FOR RESET RESPONE\r\n");
 801e9dc:	4817      	ldr	r0, [pc, #92]	; (801ea3c <Sim7600_State_Display+0xc4>)
 801e9de:	f000 fc31 	bl	801f244 <UART_DEBUG_Transmit>
			break;
 801e9e2:	e01e      	b.n	801ea22 <Sim7600_State_Display+0xaa>
		case SIM7600_START_UP:
			LOG((uint8_t*)"\r\nSIM7600 START UP\r\n");
 801e9e4:	4816      	ldr	r0, [pc, #88]	; (801ea40 <Sim7600_State_Display+0xc8>)
 801e9e6:	f000 fc2d 	bl	801f244 <UART_DEBUG_Transmit>
			break;
 801e9ea:	e01a      	b.n	801ea22 <Sim7600_State_Display+0xaa>
		case SIM7600_WAIT_FOR_START_UP_RESPONE:
			LOG((uint8_t*)"\r\nSIM7600 WAIT FOR START UP RESPONE\r\n");
 801e9ec:	4815      	ldr	r0, [pc, #84]	; (801ea44 <Sim7600_State_Display+0xcc>)
 801e9ee:	f000 fc29 	bl	801f244 <UART_DEBUG_Transmit>
			break;
 801e9f2:	e016      	b.n	801ea22 <Sim7600_State_Display+0xaa>
		case SIM7600_SETTING:
			LOG((uint8_t*)"\r\nSIM7600 SETTING\r\n");
 801e9f4:	4814      	ldr	r0, [pc, #80]	; (801ea48 <Sim7600_State_Display+0xd0>)
 801e9f6:	f000 fc25 	bl	801f244 <UART_DEBUG_Transmit>
			break;
 801e9fa:	e012      	b.n	801ea22 <Sim7600_State_Display+0xaa>
		case SIM7600_WAIT_FOR_SETTING_RESPONE:
			LOG((uint8_t*)"\r\nSIM7600 WAIT FOR SETTING RESPONE\r\n");
 801e9fc:	4813      	ldr	r0, [pc, #76]	; (801ea4c <Sim7600_State_Display+0xd4>)
 801e9fe:	f000 fc21 	bl	801f244 <UART_DEBUG_Transmit>
			break;
 801ea02:	e00e      	b.n	801ea22 <Sim7600_State_Display+0xaa>
		case SIM7600_GET_IMEI:
			LOG((uint8_t*)"\r\nSIM7600 GET IMEI\r\n");
 801ea04:	4812      	ldr	r0, [pc, #72]	; (801ea50 <Sim7600_State_Display+0xd8>)
 801ea06:	f000 fc1d 	bl	801f244 <UART_DEBUG_Transmit>
			break;
 801ea0a:	e00a      	b.n	801ea22 <Sim7600_State_Display+0xaa>
		case SIM7600_WAIT_FOR_GET_IMEI_RESPONE:
			LOG((uint8_t*)"\r\nSIM7600 WAIT FOR GET IMEI RESPONE\r\n");
 801ea0c:	4811      	ldr	r0, [pc, #68]	; (801ea54 <Sim7600_State_Display+0xdc>)
 801ea0e:	f000 fc19 	bl	801f244 <UART_DEBUG_Transmit>
			break;
 801ea12:	e006      	b.n	801ea22 <Sim7600_State_Display+0xaa>
		case SIM7600_MAX_STATE:
			LOG((uint8_t*)"\r\nSIM7600 MAX STATE\r\n");
 801ea14:	4810      	ldr	r0, [pc, #64]	; (801ea58 <Sim7600_State_Display+0xe0>)
 801ea16:	f000 fc15 	bl	801f244 <UART_DEBUG_Transmit>
			break;
 801ea1a:	e002      	b.n	801ea22 <Sim7600_State_Display+0xaa>
		default:
			break;
		}
	}
 801ea1c:	bf00      	nop
 801ea1e:	e000      	b.n	801ea22 <Sim7600_State_Display+0xaa>
			break;
 801ea20:	bf00      	nop
}
 801ea22:	bf00      	nop
 801ea24:	bd80      	pop	{r7, pc}
 801ea26:	bf00      	nop
 801ea28:	2000001c 	.word	0x2000001c
 801ea2c:	2000136e 	.word	0x2000136e
 801ea30:	08026478 	.word	0x08026478
 801ea34:	08026490 	.word	0x08026490
 801ea38:	080264b8 	.word	0x080264b8
 801ea3c:	080264cc 	.word	0x080264cc
 801ea40:	080264f0 	.word	0x080264f0
 801ea44:	08026508 	.word	0x08026508
 801ea48:	08026530 	.word	0x08026530
 801ea4c:	08026544 	.word	0x08026544
 801ea50:	0802656c 	.word	0x0802656c
 801ea54:	08026584 	.word	0x08026584
 801ea58:	080265ac 	.word	0x080265ac

0801ea5c <Sim7600_Run>:
 * Sim7600_Run()
 * @param None
 * @retval 0 if state < SIM7600_MAX_STATE else return 1
 * @brief This is function can be called from external file. It run follow state machine method. Not have param.
 */
uint8_t Sim7600_Run(void){
 801ea5c:	b580      	push	{r7, lr}
 801ea5e:	af00      	add	r7, sp, #0
	Sim7600_State_Display();
 801ea60:	f7ff ff8a 	bl	801e978 <Sim7600_State_Display>
	prev_sim7600_state = sim7600_state;
 801ea64:	4b09      	ldr	r3, [pc, #36]	; (801ea8c <Sim7600_Run+0x30>)
 801ea66:	781a      	ldrb	r2, [r3, #0]
 801ea68:	4b09      	ldr	r3, [pc, #36]	; (801ea90 <Sim7600_Run+0x34>)
 801ea6a:	701a      	strb	r2, [r3, #0]
	if(sim7600_state < SIM7600_MAX_STATE){
 801ea6c:	4b07      	ldr	r3, [pc, #28]	; (801ea8c <Sim7600_Run+0x30>)
 801ea6e:	781b      	ldrb	r3, [r3, #0]
 801ea70:	2b09      	cmp	r3, #9
 801ea72:	d808      	bhi.n	801ea86 <Sim7600_Run+0x2a>
		(*Sim7600_State_Machine[sim7600_state].func)();
 801ea74:	4b05      	ldr	r3, [pc, #20]	; (801ea8c <Sim7600_Run+0x30>)
 801ea76:	781b      	ldrb	r3, [r3, #0]
 801ea78:	4a06      	ldr	r2, [pc, #24]	; (801ea94 <Sim7600_Run+0x38>)
 801ea7a:	00db      	lsls	r3, r3, #3
 801ea7c:	4413      	add	r3, r2
 801ea7e:	685b      	ldr	r3, [r3, #4]
 801ea80:	4798      	blx	r3
		return 0;
 801ea82:	2300      	movs	r3, #0
 801ea84:	e000      	b.n	801ea88 <Sim7600_Run+0x2c>
	} else {
		return 1;
 801ea86:	2301      	movs	r3, #1
	}
}
 801ea88:	4618      	mov	r0, r3
 801ea8a:	bd80      	pop	{r7, pc}
 801ea8c:	2000001c 	.word	0x2000001c
 801ea90:	2000136e 	.word	0x2000136e
 801ea94:	20000044 	.word	0x20000044

0801ea98 <Power_Signal_Low>:
 * Power_Signal_Low()
 * @param None
 * @retval None
 * @brief This is function set Power Signal to RESET
 */
void Power_Signal_Low(void){
 801ea98:	b580      	push	{r7, lr}
 801ea9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIM7600_4G_PWRON_PORT, SIM7600_4G_PWRON, GPIO_PIN_RESET);
 801ea9c:	2200      	movs	r2, #0
 801ea9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 801eaa2:	4802      	ldr	r0, [pc, #8]	; (801eaac <Power_Signal_Low+0x14>)
 801eaa4:	f004 f9c8 	bl	8022e38 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(SIM7600_4G_PWRON_PORT, SIM7600_4G_PWRON, GPIO_PIN_SET);
}
 801eaa8:	bf00      	nop
 801eaaa:	bd80      	pop	{r7, pc}
 801eaac:	40011000 	.word	0x40011000

0801eab0 <Power_Signal_High>:
 * Power_Signal_High()
 * @param None
 * @retval None
 * @brief This is function set Power Signal to SET
 */
void Power_Signal_High(void){
 801eab0:	b580      	push	{r7, lr}
 801eab2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIM7600_4G_PWRON_PORT, SIM7600_4G_PWRON, GPIO_PIN_SET);
 801eab4:	2201      	movs	r2, #1
 801eab6:	f44f 7180 	mov.w	r1, #256	; 0x100
 801eaba:	4802      	ldr	r0, [pc, #8]	; (801eac4 <Power_Signal_High+0x14>)
 801eabc:	f004 f9bc 	bl	8022e38 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(SIM7600_4G_PWRON_PORT, SIM7600_4G_PWRON, GPIO_PIN_RESET);
}
 801eac0:	bf00      	nop
 801eac2:	bd80      	pop	{r7, pc}
 801eac4:	40011000 	.word	0x40011000

0801eac8 <Reset_Signal_Low>:
 * Reset_Signal_Low()
 * @param None
 * @retval None
 * @brief This is function set Reset Signal to RESET
 */
void Reset_Signal_Low(void){
 801eac8:	b580      	push	{r7, lr}
 801eaca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIM7600_4G_PERST_PORT, SIM7600_4G_PERST, GPIO_PIN_RESET);
 801eacc:	2200      	movs	r2, #0
 801eace:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ead2:	4802      	ldr	r0, [pc, #8]	; (801eadc <Reset_Signal_Low+0x14>)
 801ead4:	f004 f9b0 	bl	8022e38 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(SIM7600_4G_PERST_PORT, SIM7600_4G_PERST, GPIO_PIN_SET);
}
 801ead8:	bf00      	nop
 801eada:	bd80      	pop	{r7, pc}
 801eadc:	40011000 	.word	0x40011000

0801eae0 <Reset_Signal_High>:
 * Reset_Signal_High()
 * @param None
 * @retval None
 * @brief This is function set Reset Signal to SET
 */
void Reset_Signal_High(void){
 801eae0:	b580      	push	{r7, lr}
 801eae2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIM7600_4G_PERST_PORT, SIM7600_4G_PERST, GPIO_PIN_SET);
 801eae4:	2201      	movs	r2, #1
 801eae6:	f44f 7100 	mov.w	r1, #512	; 0x200
 801eaea:	4802      	ldr	r0, [pc, #8]	; (801eaf4 <Reset_Signal_High+0x14>)
 801eaec:	f004 f9a4 	bl	8022e38 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(SIM7600_4G_PERST_PORT, SIM7600_4G_PERST, GPIO_PIN_RESET);

}
 801eaf0:	bf00      	nop
 801eaf2:	bd80      	pop	{r7, pc}
 801eaf4:	40011000 	.word	0x40011000

0801eaf8 <Sim7600_Power_On>:
 * Sim7600_Power_On()
 * @param None
 * @retval None
 * @brief This is function for control POWER_ON signal in Simcom7600 module
 */
void Sim7600_Power_On(void){
 801eaf8:	b580      	push	{r7, lr}
 801eafa:	af00      	add	r7, sp, #0
	SCH_Add_Task(Power_Signal_Low, 0, 0);
 801eafc:	2200      	movs	r2, #0
 801eafe:	2100      	movs	r1, #0
 801eb00:	4809      	ldr	r0, [pc, #36]	; (801eb28 <Sim7600_Power_On+0x30>)
 801eb02:	f002 fca1 	bl	8021448 <SCH_Add_Task>
	SCH_Add_Task(Power_Signal_High, TIMER_TO_POWER_ON_SIM7600, 0);
 801eb06:	2200      	movs	r2, #0
 801eb08:	21c8      	movs	r1, #200	; 0xc8
 801eb0a:	4808      	ldr	r0, [pc, #32]	; (801eb2c <Sim7600_Power_On+0x34>)
 801eb0c:	f002 fc9c 	bl	8021448 <SCH_Add_Task>
	Clear_Sim7600_Timeout_Flag();
 801eb10:	f7ff ff26 	bl	801e960 <Clear_Sim7600_Timeout_Flag>
	SCH_Add_Task(Set_Sim7600_Timeout_Flag, TIMER_TO_POWER_ON_SIM7600_TIMEOUT, 0);
 801eb14:	2200      	movs	r2, #0
 801eb16:	21c8      	movs	r1, #200	; 0xc8
 801eb18:	4805      	ldr	r0, [pc, #20]	; (801eb30 <Sim7600_Power_On+0x38>)
 801eb1a:	f002 fc95 	bl	8021448 <SCH_Add_Task>
	sim7600_state = SIM7600_WAIT_FOR_POWER_ON_RESPONE;
 801eb1e:	4b05      	ldr	r3, [pc, #20]	; (801eb34 <Sim7600_Power_On+0x3c>)
 801eb20:	2201      	movs	r2, #1
 801eb22:	701a      	strb	r2, [r3, #0]
}
 801eb24:	bf00      	nop
 801eb26:	bd80      	pop	{r7, pc}
 801eb28:	0801ea99 	.word	0x0801ea99
 801eb2c:	0801eab1 	.word	0x0801eab1
 801eb30:	0801e949 	.word	0x0801e949
 801eb34:	2000001c 	.word	0x2000001c

0801eb38 <Sim7600_Wait_For_Power_On_Respone>:
 * Sim7600_Wait_For_Power_On_Respone()
 * @param None
 * @retval None
 * @brief This is function for waiting POWER_ON State respone, after timeout TIMER_TO_POWER_ON_SIM7600_TIMEOUT
 */
void Sim7600_Wait_For_Power_On_Respone(void){
 801eb38:	b580      	push	{r7, lr}
 801eb3a:	af00      	add	r7, sp, #0
	if(is_Sim7600_TimeOutFlag()){
 801eb3c:	f7ff fefa 	bl	801e934 <is_Sim7600_TimeOutFlag>
 801eb40:	4603      	mov	r3, r0
 801eb42:	2b00      	cmp	r3, #0
 801eb44:	d002      	beq.n	801eb4c <Sim7600_Wait_For_Power_On_Respone+0x14>
		sim7600_state = SIM7600_START_UP;
 801eb46:	4b02      	ldr	r3, [pc, #8]	; (801eb50 <Sim7600_Wait_For_Power_On_Respone+0x18>)
 801eb48:	2204      	movs	r2, #4
 801eb4a:	701a      	strb	r2, [r3, #0]
	}
}
 801eb4c:	bf00      	nop
 801eb4e:	bd80      	pop	{r7, pc}
 801eb50:	2000001c 	.word	0x2000001c

0801eb54 <Sim7600_Reset>:
 * @param None
 * @retval None
 * @brief This is function for control RESET signal in Simcom7600 module
 * @brief Keep RESET signal LOW during TIMER_TO_RESET_SIM7600
 */
void Sim7600_Reset(void){
 801eb54:	b580      	push	{r7, lr}
 801eb56:	af00      	add	r7, sp, #0
	SCH_Add_Task(Reset_Signal_High, 0, 0);
 801eb58:	2200      	movs	r2, #0
 801eb5a:	2100      	movs	r1, #0
 801eb5c:	480a      	ldr	r0, [pc, #40]	; (801eb88 <Sim7600_Reset+0x34>)
 801eb5e:	f002 fc73 	bl	8021448 <SCH_Add_Task>
	SCH_Add_Task(Reset_Signal_Low, TIMER_TO_RESET_SIM7600, 0);
 801eb62:	2200      	movs	r2, #0
 801eb64:	21c8      	movs	r1, #200	; 0xc8
 801eb66:	4809      	ldr	r0, [pc, #36]	; (801eb8c <Sim7600_Reset+0x38>)
 801eb68:	f002 fc6e 	bl	8021448 <SCH_Add_Task>
	Clear_Sim7600_Timeout_Flag();
 801eb6c:	f7ff fef8 	bl	801e960 <Clear_Sim7600_Timeout_Flag>
	SCH_Add_Task(Set_Sim7600_Timeout_Flag, TIMER_TO_RESET_SIM7600_TIMEOUT, 0);
 801eb70:	2200      	movs	r2, #0
 801eb72:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801eb76:	4806      	ldr	r0, [pc, #24]	; (801eb90 <Sim7600_Reset+0x3c>)
 801eb78:	f002 fc66 	bl	8021448 <SCH_Add_Task>
	sim7600_state = SIM7600_WAIT_FOR_RESET_RESPONE;
 801eb7c:	4b05      	ldr	r3, [pc, #20]	; (801eb94 <Sim7600_Reset+0x40>)
 801eb7e:	2203      	movs	r2, #3
 801eb80:	701a      	strb	r2, [r3, #0]
}
 801eb82:	bf00      	nop
 801eb84:	bd80      	pop	{r7, pc}
 801eb86:	bf00      	nop
 801eb88:	0801eae1 	.word	0x0801eae1
 801eb8c:	0801eac9 	.word	0x0801eac9
 801eb90:	0801e949 	.word	0x0801e949
 801eb94:	2000001c 	.word	0x2000001c

0801eb98 <Sim7600_Wait_For_Reset_Respone>:
 * Sim7600_Wait_For_Reset_Respone()
 * @param None
 * @retval None
 * @brief This is function for waiting simcom7600_timeout_flag is SET
 */
void Sim7600_Wait_For_Reset_Respone(void){
 801eb98:	b580      	push	{r7, lr}
 801eb9a:	af00      	add	r7, sp, #0
	if(is_Sim7600_TimeOutFlag()){
 801eb9c:	f7ff feca 	bl	801e934 <is_Sim7600_TimeOutFlag>
 801eba0:	4603      	mov	r3, r0
 801eba2:	2b00      	cmp	r3, #0
 801eba4:	d002      	beq.n	801ebac <Sim7600_Wait_For_Reset_Respone+0x14>
		sim7600_state = SIM7600_POWER_ON;
 801eba6:	4b02      	ldr	r3, [pc, #8]	; (801ebb0 <Sim7600_Wait_For_Reset_Respone+0x18>)
 801eba8:	2200      	movs	r2, #0
 801ebaa:	701a      	strb	r2, [r3, #0]
	}
}
 801ebac:	bf00      	nop
 801ebae:	bd80      	pop	{r7, pc}
 801ebb0:	2000001c 	.word	0x2000001c

0801ebb4 <Sim7600_Start_Up>:
 * Sim7600_Start_Up()
 * @param None
 * @retval None
 * @brief This is function for start up Simcom7600 module. Timeout is TIMEOUT_STARTUP_RESET.
 */
void Sim7600_Start_Up(void){
 801ebb4:	b580      	push	{r7, lr}
 801ebb6:	af00      	add	r7, sp, #0
	sim7600_state = SIM7600_WAIT_FOR_START_UP_RESPONE;
 801ebb8:	4b06      	ldr	r3, [pc, #24]	; (801ebd4 <Sim7600_Start_Up+0x20>)
 801ebba:	2205      	movs	r2, #5
 801ebbc:	701a      	strb	r2, [r3, #0]
	Clear_Sim7600_Timeout_Flag();
 801ebbe:	f7ff fecf 	bl	801e960 <Clear_Sim7600_Timeout_Flag>
	SCH_Add_Task(Set_Sim7600_Timeout_Flag, TIMEOUT_STARTUP_RESET, 0);
 801ebc2:	2200      	movs	r2, #0
 801ebc4:	f644 6120 	movw	r1, #20000	; 0x4e20
 801ebc8:	4803      	ldr	r0, [pc, #12]	; (801ebd8 <Sim7600_Start_Up+0x24>)
 801ebca:	f002 fc3d 	bl	8021448 <SCH_Add_Task>
}
 801ebce:	bf00      	nop
 801ebd0:	bd80      	pop	{r7, pc}
 801ebd2:	bf00      	nop
 801ebd4:	2000001c 	.word	0x2000001c
 801ebd8:	0801e949 	.word	0x0801e949

0801ebdc <Sim7600_Wait_For_Start_Up_Respone>:
 * @param None
 * @retval None
 * @brief This is function for waiting start up respond.
 * @brief If Timeout so Reset Simcom7600 else AT_Result = AT_PB_DONE switch to SIM7600_GET_IMEI
 */
void Sim7600_Wait_For_Start_Up_Respone(void){
 801ebdc:	b580      	push	{r7, lr}
 801ebde:	af00      	add	r7, sp, #0
	// Time out if too long time cannot receive PB_DONE
	if(is_Sim7600_TimeOutFlag()){
 801ebe0:	f7ff fea8 	bl	801e934 <is_Sim7600_TimeOutFlag>
 801ebe4:	4603      	mov	r3, r0
 801ebe6:	2b00      	cmp	r3, #0
 801ebe8:	d002      	beq.n	801ebf0 <Sim7600_Wait_For_Start_Up_Respone+0x14>
		sim7600_state = SIM7600_RESET;
 801ebea:	4b0a      	ldr	r3, [pc, #40]	; (801ec14 <Sim7600_Wait_For_Start_Up_Respone+0x38>)
 801ebec:	2202      	movs	r2, #2
 801ebee:	701a      	strb	r2, [r3, #0]
	}
//	Wait_For_Respone(AT_PB_DONE);
	switch (Get_AT_Result()){
 801ebf0:	f002 fbd4 	bl	802139c <Get_AT_Result>
 801ebf4:	4603      	mov	r3, r0
 801ebf6:	2b03      	cmp	r3, #3
 801ebf8:	d107      	bne.n	801ec0a <Sim7600_Wait_For_Start_Up_Respone+0x2e>
		case AT_PB_DONE:
			Clear_AT_Result();
 801ebfa:	f002 fbd9 	bl	80213b0 <Clear_AT_Result>
			Set_Sim7600_Timeout_Flag();
 801ebfe:	f7ff fea3 	bl	801e948 <Set_Sim7600_Timeout_Flag>
			sim7600_state = SIM7600_SETTING;//SIM7600_GET_IMEI;
 801ec02:	4b04      	ldr	r3, [pc, #16]	; (801ec14 <Sim7600_Wait_For_Start_Up_Respone+0x38>)
 801ec04:	2206      	movs	r2, #6
 801ec06:	701a      	strb	r2, [r3, #0]
			break;
 801ec08:	e002      	b.n	801ec10 <Sim7600_Wait_For_Start_Up_Respone+0x34>
		default:
			Clear_AT_Result();
 801ec0a:	f002 fbd1 	bl	80213b0 <Clear_AT_Result>
			break;
 801ec0e:	bf00      	nop
	}
}
 801ec10:	bf00      	nop
 801ec12:	bd80      	pop	{r7, pc}
 801ec14:	2000001c 	.word	0x2000001c

0801ec18 <Sim7600_Setting>:
 * Sim7600_Get_Imei()
 * @param None
 * @retval None
 * @brief This is function for Get IMEI from Simcomo7600 to set LockerID.
 */
void Sim7600_Setting(void){
 801ec18:	b580      	push	{r7, lr}
 801ec1a:	af00      	add	r7, sp, #0
	// Clear_Reiceive_Buffer();
	UART_SIM7600_Transmit(setting_command[setting_index]);
 801ec1c:	4b06      	ldr	r3, [pc, #24]	; (801ec38 <Sim7600_Setting+0x20>)
 801ec1e:	781b      	ldrb	r3, [r3, #0]
 801ec20:	461a      	mov	r2, r3
 801ec22:	4b06      	ldr	r3, [pc, #24]	; (801ec3c <Sim7600_Setting+0x24>)
 801ec24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ec28:	4618      	mov	r0, r3
 801ec2a:	f000 fa71 	bl	801f110 <UART_SIM7600_Transmit>
	sim7600_state = SIM7600_WAIT_FOR_SETTING_RESPONE;
 801ec2e:	4b04      	ldr	r3, [pc, #16]	; (801ec40 <Sim7600_Setting+0x28>)
 801ec30:	2207      	movs	r2, #7
 801ec32:	701a      	strb	r2, [r3, #0]
}
 801ec34:	bf00      	nop
 801ec36:	bd80      	pop	{r7, pc}
 801ec38:	20000287 	.word	0x20000287
 801ec3c:	20000020 	.word	0x20000020
 801ec40:	2000001c 	.word	0x2000001c

0801ec44 <Sim7600_Wait_For_Setting_Respone>:
 * Sim7600_Wait_For_Get_Imei_Respone()
 * @param None
 * @retval None
 * @brief This is function for waiting respone from GET IMEI State.
 */
void Sim7600_Wait_For_Setting_Respone(void){
 801ec44:	b580      	push	{r7, lr}
 801ec46:	af00      	add	r7, sp, #0
	if(is_Sim7600_TimeOutFlag()){
 801ec48:	f7ff fe74 	bl	801e934 <is_Sim7600_TimeOutFlag>
 801ec4c:	4603      	mov	r3, r0
 801ec4e:	2b00      	cmp	r3, #0
 801ec50:	d030      	beq.n	801ecb4 <Sim7600_Wait_For_Setting_Respone+0x70>
		switch (Get_AT_Result()){
 801ec52:	f002 fba3 	bl	802139c <Get_AT_Result>
 801ec56:	4603      	mov	r3, r0
 801ec58:	2b00      	cmp	r3, #0
 801ec5a:	d002      	beq.n	801ec62 <Sim7600_Wait_For_Setting_Respone+0x1e>
 801ec5c:	2b01      	cmp	r3, #1
 801ec5e:	d023      	beq.n	801eca8 <Sim7600_Wait_For_Setting_Respone+0x64>
			case AT_ERROR:
				Clear_AT_Result();
				sim7600_state = SIM7600_MAX_STATE;
				break;
			default:
				break;
 801ec60:	e02b      	b.n	801ecba <Sim7600_Wait_For_Setting_Respone+0x76>
				Clear_AT_Result();
 801ec62:	f002 fba5 	bl	80213b0 <Clear_AT_Result>
				if(setting_index >= (NO_SETTING_COMMAND - 1) ){
 801ec66:	4b16      	ldr	r3, [pc, #88]	; (801ecc0 <Sim7600_Wait_For_Setting_Respone+0x7c>)
 801ec68:	781b      	ldrb	r3, [r3, #0]
 801ec6a:	2b07      	cmp	r3, #7
 801ec6c:	d906      	bls.n	801ec7c <Sim7600_Wait_For_Setting_Respone+0x38>
					setting_index = 0;
 801ec6e:	4b14      	ldr	r3, [pc, #80]	; (801ecc0 <Sim7600_Wait_For_Setting_Respone+0x7c>)
 801ec70:	2200      	movs	r2, #0
 801ec72:	701a      	strb	r2, [r3, #0]
					sim7600_state = SIM7600_GET_IMEI;
 801ec74:	4b13      	ldr	r3, [pc, #76]	; (801ecc4 <Sim7600_Wait_For_Setting_Respone+0x80>)
 801ec76:	2208      	movs	r2, #8
 801ec78:	701a      	strb	r2, [r3, #0]
 801ec7a:	e008      	b.n	801ec8e <Sim7600_Wait_For_Setting_Respone+0x4a>
					setting_index ++;
 801ec7c:	4b10      	ldr	r3, [pc, #64]	; (801ecc0 <Sim7600_Wait_For_Setting_Respone+0x7c>)
 801ec7e:	781b      	ldrb	r3, [r3, #0]
 801ec80:	3301      	adds	r3, #1
 801ec82:	b2da      	uxtb	r2, r3
 801ec84:	4b0e      	ldr	r3, [pc, #56]	; (801ecc0 <Sim7600_Wait_For_Setting_Respone+0x7c>)
 801ec86:	701a      	strb	r2, [r3, #0]
					sim7600_state = SIM7600_SETTING;
 801ec88:	4b0e      	ldr	r3, [pc, #56]	; (801ecc4 <Sim7600_Wait_For_Setting_Respone+0x80>)
 801ec8a:	2206      	movs	r2, #6
 801ec8c:	701a      	strb	r2, [r3, #0]
				if(setting_index == 6){
 801ec8e:	4b0c      	ldr	r3, [pc, #48]	; (801ecc0 <Sim7600_Wait_For_Setting_Respone+0x7c>)
 801ec90:	781b      	ldrb	r3, [r3, #0]
 801ec92:	2b06      	cmp	r3, #6
 801ec94:	d110      	bne.n	801ecb8 <Sim7600_Wait_For_Setting_Respone+0x74>
					Clear_Sim7600_Timeout_Flag();
 801ec96:	f7ff fe63 	bl	801e960 <Clear_Sim7600_Timeout_Flag>
					SCH_Add_Task(Set_Sim7600_Timeout_Flag, 500, 0);
 801ec9a:	2200      	movs	r2, #0
 801ec9c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801eca0:	4809      	ldr	r0, [pc, #36]	; (801ecc8 <Sim7600_Wait_For_Setting_Respone+0x84>)
 801eca2:	f002 fbd1 	bl	8021448 <SCH_Add_Task>
				break;
 801eca6:	e007      	b.n	801ecb8 <Sim7600_Wait_For_Setting_Respone+0x74>
				Clear_AT_Result();
 801eca8:	f002 fb82 	bl	80213b0 <Clear_AT_Result>
				sim7600_state = SIM7600_MAX_STATE;
 801ecac:	4b05      	ldr	r3, [pc, #20]	; (801ecc4 <Sim7600_Wait_For_Setting_Respone+0x80>)
 801ecae:	220a      	movs	r2, #10
 801ecb0:	701a      	strb	r2, [r3, #0]
				break;
 801ecb2:	e002      	b.n	801ecba <Sim7600_Wait_For_Setting_Respone+0x76>
		}
	}
 801ecb4:	bf00      	nop
 801ecb6:	e000      	b.n	801ecba <Sim7600_Wait_For_Setting_Respone+0x76>
				break;
 801ecb8:	bf00      	nop
}
 801ecba:	bf00      	nop
 801ecbc:	bd80      	pop	{r7, pc}
 801ecbe:	bf00      	nop
 801ecc0:	20000287 	.word	0x20000287
 801ecc4:	2000001c 	.word	0x2000001c
 801ecc8:	0801e949 	.word	0x0801e949

0801eccc <Sim7600_Get_Imei>:
 * Sim7600_Get_Imei()
 * @param None
 * @retval None
 * @brief This is function for Get IMEI from Simcomo7600 to set LockerID.
 */
void Sim7600_Get_Imei(void){
 801eccc:	b580      	push	{r7, lr}
 801ecce:	af00      	add	r7, sp, #0
	// Clear_Reiceive_Buffer();
	UART_SIM7600_Transmit((uint8_t*)"AT+SIMEI?\r\n");
 801ecd0:	4803      	ldr	r0, [pc, #12]	; (801ece0 <Sim7600_Get_Imei+0x14>)
 801ecd2:	f000 fa1d 	bl	801f110 <UART_SIM7600_Transmit>
	sim7600_state = SIM7600_WAIT_FOR_GET_IMEI_RESPONE;
 801ecd6:	4b03      	ldr	r3, [pc, #12]	; (801ece4 <Sim7600_Get_Imei+0x18>)
 801ecd8:	2209      	movs	r2, #9
 801ecda:	701a      	strb	r2, [r3, #0]
}
 801ecdc:	bf00      	nop
 801ecde:	bd80      	pop	{r7, pc}
 801ece0:	080265c4 	.word	0x080265c4
 801ece4:	2000001c 	.word	0x2000001c

0801ece8 <Sim7600_Wait_For_Get_Imei_Respone>:
 * Sim7600_Wait_For_Get_Imei_Respone()
 * @param None
 * @retval None
 * @brief This is function for waiting respone from GET IMEI State.
 */
void Sim7600_Wait_For_Get_Imei_Respone(void){
 801ece8:	b580      	push	{r7, lr}
 801ecea:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_IMEI);
	switch (Get_AT_Result()){
 801ecec:	f002 fb56 	bl	802139c <Get_AT_Result>
 801ecf0:	4603      	mov	r3, r0
 801ecf2:	2b01      	cmp	r3, #1
 801ecf4:	d010      	beq.n	801ed18 <Sim7600_Wait_For_Get_Imei_Respone+0x30>
 801ecf6:	2b06      	cmp	r3, #6
 801ecf8:	d113      	bne.n	801ed22 <Sim7600_Wait_For_Get_Imei_Respone+0x3a>
		case AT_IMEI:
			if(Get_Imei()){
 801ecfa:	f000 f82b 	bl	801ed54 <Get_Imei>
 801ecfe:	4603      	mov	r3, r0
 801ed00:	2b00      	cmp	r3, #0
 801ed02:	d010      	beq.n	801ed26 <Sim7600_Wait_For_Get_Imei_Respone+0x3e>
				Clear_AT_Result();
 801ed04:	f002 fb54 	bl	80213b0 <Clear_AT_Result>
				sim7600_state = SIM7600_MAX_STATE;
 801ed08:	4b08      	ldr	r3, [pc, #32]	; (801ed2c <Sim7600_Wait_For_Get_Imei_Respone+0x44>)
 801ed0a:	220a      	movs	r2, #10
 801ed0c:	701a      	strb	r2, [r3, #0]
				UART_DEBUG_Transmit_Size(imei_buffer, IMEI_LENGTH);
 801ed0e:	210f      	movs	r1, #15
 801ed10:	4807      	ldr	r0, [pc, #28]	; (801ed30 <Sim7600_Wait_For_Get_Imei_Respone+0x48>)
 801ed12:	f000 fab5 	bl	801f280 <UART_DEBUG_Transmit_Size>
			}
			break;
 801ed16:	e006      	b.n	801ed26 <Sim7600_Wait_For_Get_Imei_Respone+0x3e>
		case AT_ERROR:
			Clear_AT_Result();
 801ed18:	f002 fb4a 	bl	80213b0 <Clear_AT_Result>
			sim7600_state = SIM7600_MAX_STATE;
 801ed1c:	4b03      	ldr	r3, [pc, #12]	; (801ed2c <Sim7600_Wait_For_Get_Imei_Respone+0x44>)
 801ed1e:	220a      	movs	r2, #10
 801ed20:	701a      	strb	r2, [r3, #0]
		default:
			break;
 801ed22:	bf00      	nop
 801ed24:	e000      	b.n	801ed28 <Sim7600_Wait_For_Get_Imei_Respone+0x40>
			break;
 801ed26:	bf00      	nop
	}
}
 801ed28:	bf00      	nop
 801ed2a:	bd80      	pop	{r7, pc}
 801ed2c:	2000001c 	.word	0x2000001c
 801ed30:	20001370 	.word	0x20001370

0801ed34 <SIM7600_Set_State>:
 * SIM7600_Set_State()
 * @param sim7600_state
 * @retval None
 * @brief This function set mqtt_state.
 */
void SIM7600_Set_State(Sim7600_State newState){
 801ed34:	b480      	push	{r7}
 801ed36:	b083      	sub	sp, #12
 801ed38:	af00      	add	r7, sp, #0
 801ed3a:	4603      	mov	r3, r0
 801ed3c:	71fb      	strb	r3, [r7, #7]
	sim7600_state = newState;
 801ed3e:	4a04      	ldr	r2, [pc, #16]	; (801ed50 <SIM7600_Set_State+0x1c>)
 801ed40:	79fb      	ldrb	r3, [r7, #7]
 801ed42:	7013      	strb	r3, [r2, #0]
}
 801ed44:	bf00      	nop
 801ed46:	370c      	adds	r7, #12
 801ed48:	46bd      	mov	sp, r7
 801ed4a:	bc80      	pop	{r7}
 801ed4c:	4770      	bx	lr
 801ed4e:	bf00      	nop
 801ed50:	2000001c 	.word	0x2000001c

0801ed54 <Get_Imei>:





FlagStatus Get_Imei(){
 801ed54:	b598      	push	{r3, r4, r7, lr}
 801ed56:	af00      	add	r7, sp, #0
	if(imei_count == IMEI_LENGTH){
 801ed58:	4b0e      	ldr	r3, [pc, #56]	; (801ed94 <Get_Imei+0x40>)
 801ed5a:	781b      	ldrb	r3, [r3, #0]
 801ed5c:	2b0f      	cmp	r3, #15
 801ed5e:	d104      	bne.n	801ed6a <Get_Imei+0x16>
		imei_count = 0;
 801ed60:	4b0c      	ldr	r3, [pc, #48]	; (801ed94 <Get_Imei+0x40>)
 801ed62:	2200      	movs	r2, #0
 801ed64:	701a      	strb	r2, [r3, #0]
		return SET;
 801ed66:	2301      	movs	r3, #1
 801ed68:	e012      	b.n	801ed90 <Get_Imei+0x3c>
	}
	if(UART_SIM7600_Received_Buffer_Available()){
 801ed6a:	f000 f9fd 	bl	801f168 <UART_SIM7600_Received_Buffer_Available>
 801ed6e:	4603      	mov	r3, r0
 801ed70:	2b00      	cmp	r3, #0
 801ed72:	d00c      	beq.n	801ed8e <Get_Imei+0x3a>
		imei_buffer[imei_count++] = UART_SIM7600_Read_Received_Buffer();
 801ed74:	4b07      	ldr	r3, [pc, #28]	; (801ed94 <Get_Imei+0x40>)
 801ed76:	781b      	ldrb	r3, [r3, #0]
 801ed78:	1c5a      	adds	r2, r3, #1
 801ed7a:	b2d1      	uxtb	r1, r2
 801ed7c:	4a05      	ldr	r2, [pc, #20]	; (801ed94 <Get_Imei+0x40>)
 801ed7e:	7011      	strb	r1, [r2, #0]
 801ed80:	461c      	mov	r4, r3
 801ed82:	f000 fa07 	bl	801f194 <UART_SIM7600_Read_Received_Buffer>
 801ed86:	4603      	mov	r3, r0
 801ed88:	461a      	mov	r2, r3
 801ed8a:	4b03      	ldr	r3, [pc, #12]	; (801ed98 <Get_Imei+0x44>)
 801ed8c:	551a      	strb	r2, [r3, r4]
	}
	return RESET;
 801ed8e:	2300      	movs	r3, #0
}
 801ed90:	4618      	mov	r0, r3
 801ed92:	bd98      	pop	{r3, r4, r7, pc}
 801ed94:	20000285 	.word	0x20000285
 801ed98:	20001370 	.word	0x20001370

0801ed9c <Reset_SimConfiguration_State>:

void Reset_SimConfiguration_State(){
 801ed9c:	b580      	push	{r7, lr}
 801ed9e:	af00      	add	r7, sp, #0
	SIM7600_Set_State(SIM7600_RESET);
 801eda0:	2002      	movs	r0, #2
 801eda2:	f7ff ffc7 	bl	801ed34 <SIM7600_Set_State>
}
 801eda6:	bf00      	nop
 801eda8:	bd80      	pop	{r7, pc}
	...

0801edac <GPIO_Init>:
  * @brief 	GPIO Initialization Function: 74HC245, LED, Buzzer, SPI_CS, SwitchID, SIM7600_GPIO
  * @param 	None
  * @retval None
  */
void GPIO_Init(void)
{
 801edac:	b580      	push	{r7, lr}
 801edae:	b084      	sub	sp, #16
 801edb0:	af00      	add	r7, sp, #0
//	GPIO_InitTypeDef GPIO_InitStruct = {0};

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801edb2:	4b1b      	ldr	r3, [pc, #108]	; (801ee20 <GPIO_Init+0x74>)
 801edb4:	699b      	ldr	r3, [r3, #24]
 801edb6:	4a1a      	ldr	r2, [pc, #104]	; (801ee20 <GPIO_Init+0x74>)
 801edb8:	f043 0310 	orr.w	r3, r3, #16
 801edbc:	6193      	str	r3, [r2, #24]
 801edbe:	4b18      	ldr	r3, [pc, #96]	; (801ee20 <GPIO_Init+0x74>)
 801edc0:	699b      	ldr	r3, [r3, #24]
 801edc2:	f003 0310 	and.w	r3, r3, #16
 801edc6:	60fb      	str	r3, [r7, #12]
 801edc8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 801edca:	4b15      	ldr	r3, [pc, #84]	; (801ee20 <GPIO_Init+0x74>)
 801edcc:	699b      	ldr	r3, [r3, #24]
 801edce:	4a14      	ldr	r2, [pc, #80]	; (801ee20 <GPIO_Init+0x74>)
 801edd0:	f043 0320 	orr.w	r3, r3, #32
 801edd4:	6193      	str	r3, [r2, #24]
 801edd6:	4b12      	ldr	r3, [pc, #72]	; (801ee20 <GPIO_Init+0x74>)
 801edd8:	699b      	ldr	r3, [r3, #24]
 801edda:	f003 0320 	and.w	r3, r3, #32
 801edde:	60bb      	str	r3, [r7, #8]
 801ede0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801ede2:	4b0f      	ldr	r3, [pc, #60]	; (801ee20 <GPIO_Init+0x74>)
 801ede4:	699b      	ldr	r3, [r3, #24]
 801ede6:	4a0e      	ldr	r2, [pc, #56]	; (801ee20 <GPIO_Init+0x74>)
 801ede8:	f043 0304 	orr.w	r3, r3, #4
 801edec:	6193      	str	r3, [r2, #24]
 801edee:	4b0c      	ldr	r3, [pc, #48]	; (801ee20 <GPIO_Init+0x74>)
 801edf0:	699b      	ldr	r3, [r3, #24]
 801edf2:	f003 0304 	and.w	r3, r3, #4
 801edf6:	607b      	str	r3, [r7, #4]
 801edf8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801edfa:	4b09      	ldr	r3, [pc, #36]	; (801ee20 <GPIO_Init+0x74>)
 801edfc:	699b      	ldr	r3, [r3, #24]
 801edfe:	4a08      	ldr	r2, [pc, #32]	; (801ee20 <GPIO_Init+0x74>)
 801ee00:	f043 0308 	orr.w	r3, r3, #8
 801ee04:	6193      	str	r3, [r2, #24]
 801ee06:	4b06      	ldr	r3, [pc, #24]	; (801ee20 <GPIO_Init+0x74>)
 801ee08:	699b      	ldr	r3, [r3, #24]
 801ee0a:	f003 0308 	and.w	r3, r3, #8
 801ee0e:	603b      	str	r3, [r7, #0]
 801ee10:	683b      	ldr	r3, [r7, #0]
//	urgent_init();
//	LED_Init();
//	Buzzer_Init();
//	SPI_CS_Init();
//	Switch_Init();
	Sim7600_GPIO_Init();
 801ee12:	f000 f807 	bl	801ee24 <Sim7600_GPIO_Init>
//	Read_BoardID();
}
 801ee16:	bf00      	nop
 801ee18:	3710      	adds	r7, #16
 801ee1a:	46bd      	mov	sp, r7
 801ee1c:	bd80      	pop	{r7, pc}
 801ee1e:	bf00      	nop
 801ee20:	40021000 	.word	0x40021000

0801ee24 <Sim7600_GPIO_Init>:

	GPIO_InitStruct.Pin = BUZZER_PIN;
	HAL_GPIO_Init(BUZZER_PORT, &GPIO_InitStruct);
}

void Sim7600_GPIO_Init(void){
 801ee24:	b580      	push	{r7, lr}
 801ee26:	b084      	sub	sp, #16
 801ee28:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 801ee2a:	463b      	mov	r3, r7
 801ee2c:	2200      	movs	r2, #0
 801ee2e:	601a      	str	r2, [r3, #0]
 801ee30:	605a      	str	r2, [r3, #4]
 801ee32:	609a      	str	r2, [r3, #8]
 801ee34:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 801ee36:	2301      	movs	r3, #1
 801ee38:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull  = GPIO_PULLUP;
 801ee3a:	2301      	movs	r3, #1
 801ee3c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801ee3e:	2303      	movs	r3, #3
 801ee40:	60fb      	str	r3, [r7, #12]

	GPIO_InitStruct.Pin = SIM7600_4G_PWRON;
 801ee42:	f44f 7380 	mov.w	r3, #256	; 0x100
 801ee46:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(SIM7600_4G_PWRON_PORT, &GPIO_InitStruct);
 801ee48:	463b      	mov	r3, r7
 801ee4a:	4619      	mov	r1, r3
 801ee4c:	480d      	ldr	r0, [pc, #52]	; (801ee84 <Sim7600_GPIO_Init+0x60>)
 801ee4e:	f003 fe5f 	bl	8022b10 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SIM7600_4G_PERST;
 801ee52:	f44f 7300 	mov.w	r3, #512	; 0x200
 801ee56:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(SIM7600_4G_PERST_PORT, &GPIO_InitStruct);
 801ee58:	463b      	mov	r3, r7
 801ee5a:	4619      	mov	r1, r3
 801ee5c:	4809      	ldr	r0, [pc, #36]	; (801ee84 <Sim7600_GPIO_Init+0x60>)
 801ee5e:	f003 fe57 	bl	8022b10 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(SIM7600_4G_PWRON_PORT, SIM7600_4G_PWRON, SET);
 801ee62:	2201      	movs	r2, #1
 801ee64:	f44f 7180 	mov.w	r1, #256	; 0x100
 801ee68:	4806      	ldr	r0, [pc, #24]	; (801ee84 <Sim7600_GPIO_Init+0x60>)
 801ee6a:	f003 ffe5 	bl	8022e38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SIM7600_4G_PERST_PORT, SIM7600_4G_PERST, SET);
 801ee6e:	2201      	movs	r2, #1
 801ee70:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ee74:	4803      	ldr	r0, [pc, #12]	; (801ee84 <Sim7600_GPIO_Init+0x60>)
 801ee76:	f003 ffdf 	bl	8022e38 <HAL_GPIO_WritePin>
}
 801ee7a:	bf00      	nop
 801ee7c:	3710      	adds	r7, #16
 801ee7e:	46bd      	mov	sp, r7
 801ee80:	bd80      	pop	{r7, pc}
 801ee82:	bf00      	nop
 801ee84:	40011000 	.word	0x40011000

0801ee88 <I2C_Init>:
/**
  * @brief 	I2C peripheral initialization
  * @param 	None
  * @retval None
  */
HAL_StatusTypeDef I2C_Init(void){
 801ee88:	b580      	push	{r7, lr}
 801ee8a:	af00      	add	r7, sp, #0
	/*##-1- Configure the I2C peripheral ######################################*/
	  I2cHandle.Instance             = I2C1;
 801ee8c:	4b13      	ldr	r3, [pc, #76]	; (801eedc <I2C_Init+0x54>)
 801ee8e:	4a14      	ldr	r2, [pc, #80]	; (801eee0 <I2C_Init+0x58>)
 801ee90:	601a      	str	r2, [r3, #0]
	  I2cHandle.Init.ClockSpeed      = I2C_SPEEDCLOCK;
 801ee92:	4b12      	ldr	r3, [pc, #72]	; (801eedc <I2C_Init+0x54>)
 801ee94:	4a13      	ldr	r2, [pc, #76]	; (801eee4 <I2C_Init+0x5c>)
 801ee96:	605a      	str	r2, [r3, #4]
	  I2cHandle.Init.DutyCycle       = I2C_DUTYCYCLE;
 801ee98:	4b10      	ldr	r3, [pc, #64]	; (801eedc <I2C_Init+0x54>)
 801ee9a:	2200      	movs	r2, #0
 801ee9c:	609a      	str	r2, [r3, #8]
	  I2cHandle.Init.OwnAddress1     = 0;//I2C_ADDRESS;
 801ee9e:	4b0f      	ldr	r3, [pc, #60]	; (801eedc <I2C_Init+0x54>)
 801eea0:	2200      	movs	r2, #0
 801eea2:	60da      	str	r2, [r3, #12]
	  I2cHandle.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 801eea4:	4b0d      	ldr	r3, [pc, #52]	; (801eedc <I2C_Init+0x54>)
 801eea6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801eeaa:	611a      	str	r2, [r3, #16]
	  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801eeac:	4b0b      	ldr	r3, [pc, #44]	; (801eedc <I2C_Init+0x54>)
 801eeae:	2200      	movs	r2, #0
 801eeb0:	615a      	str	r2, [r3, #20]
	  I2cHandle.Init.OwnAddress2     = 0;//0xFF;
 801eeb2:	4b0a      	ldr	r3, [pc, #40]	; (801eedc <I2C_Init+0x54>)
 801eeb4:	2200      	movs	r2, #0
 801eeb6:	619a      	str	r2, [r3, #24]
	  I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801eeb8:	4b08      	ldr	r3, [pc, #32]	; (801eedc <I2C_Init+0x54>)
 801eeba:	2200      	movs	r2, #0
 801eebc:	61da      	str	r2, [r3, #28]
	  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 801eebe:	4b07      	ldr	r3, [pc, #28]	; (801eedc <I2C_Init+0x54>)
 801eec0:	2200      	movs	r2, #0
 801eec2:	621a      	str	r2, [r3, #32]

	  if(HAL_I2C_Init(&I2cHandle) != HAL_OK)
 801eec4:	4805      	ldr	r0, [pc, #20]	; (801eedc <I2C_Init+0x54>)
 801eec6:	f003 ffcf 	bl	8022e68 <HAL_I2C_Init>
 801eeca:	4603      	mov	r3, r0
 801eecc:	2b00      	cmp	r3, #0
 801eece:	d001      	beq.n	801eed4 <I2C_Init+0x4c>
	  {
	    /* Initialization Error */
		  return HAL_ERROR;
 801eed0:	2301      	movs	r3, #1
 801eed2:	e000      	b.n	801eed6 <I2C_Init+0x4e>
	    Error_Handler();
	  }
	  return HAL_OK;
 801eed4:	2300      	movs	r3, #0
}
 801eed6:	4618      	mov	r0, r3
 801eed8:	bd80      	pop	{r7, pc}
 801eeda:	bf00      	nop
 801eedc:	20001380 	.word	0x20001380
 801eee0:	40005400 	.word	0x40005400
 801eee4:	00061a80 	.word	0x00061a80

0801eee8 <SPI2_Init>:





HAL_StatusTypeDef SPI2_Init(void){
 801eee8:	b580      	push	{r7, lr}
 801eeea:	af00      	add	r7, sp, #0
	/*##-1- Configure the SPI peripheral #######################################*/
		  /* Set the SPI parameters */
		  Spi2Handle.Instance               = SPI2;
 801eeec:	4b1d      	ldr	r3, [pc, #116]	; (801ef64 <SPI2_Init+0x7c>)
 801eeee:	4a1e      	ldr	r2, [pc, #120]	; (801ef68 <SPI2_Init+0x80>)
 801eef0:	601a      	str	r2, [r3, #0]
		  Spi2Handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 801eef2:	4b1c      	ldr	r3, [pc, #112]	; (801ef64 <SPI2_Init+0x7c>)
 801eef4:	2228      	movs	r2, #40	; 0x28
 801eef6:	61da      	str	r2, [r3, #28]
		  Spi2Handle.Init.Direction         = SPI_DIRECTION_2LINES;
 801eef8:	4b1a      	ldr	r3, [pc, #104]	; (801ef64 <SPI2_Init+0x7c>)
 801eefa:	2200      	movs	r2, #0
 801eefc:	609a      	str	r2, [r3, #8]
		  Spi2Handle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 801eefe:	4b19      	ldr	r3, [pc, #100]	; (801ef64 <SPI2_Init+0x7c>)
 801ef00:	2200      	movs	r2, #0
 801ef02:	615a      	str	r2, [r3, #20]
		  Spi2Handle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 801ef04:	4b17      	ldr	r3, [pc, #92]	; (801ef64 <SPI2_Init+0x7c>)
 801ef06:	2200      	movs	r2, #0
 801ef08:	611a      	str	r2, [r3, #16]
		  Spi2Handle.Init.DataSize          = SPI_DATASIZE_8BIT;
 801ef0a:	4b16      	ldr	r3, [pc, #88]	; (801ef64 <SPI2_Init+0x7c>)
 801ef0c:	2200      	movs	r2, #0
 801ef0e:	60da      	str	r2, [r3, #12]
		  Spi2Handle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 801ef10:	4b14      	ldr	r3, [pc, #80]	; (801ef64 <SPI2_Init+0x7c>)
 801ef12:	2200      	movs	r2, #0
 801ef14:	621a      	str	r2, [r3, #32]
		  Spi2Handle.Init.TIMode            = SPI_TIMODE_DISABLE;
 801ef16:	4b13      	ldr	r3, [pc, #76]	; (801ef64 <SPI2_Init+0x7c>)
 801ef18:	2200      	movs	r2, #0
 801ef1a:	625a      	str	r2, [r3, #36]	; 0x24
		  Spi2Handle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 801ef1c:	4b11      	ldr	r3, [pc, #68]	; (801ef64 <SPI2_Init+0x7c>)
 801ef1e:	2200      	movs	r2, #0
 801ef20:	629a      	str	r2, [r3, #40]	; 0x28
		  Spi2Handle.Init.CRCPolynomial     = 7;
 801ef22:	4b10      	ldr	r3, [pc, #64]	; (801ef64 <SPI2_Init+0x7c>)
 801ef24:	2207      	movs	r2, #7
 801ef26:	62da      	str	r2, [r3, #44]	; 0x2c
//		  Spi2Handle.Init.NSS               = SPI_NSS_SOFT;
		  Spi2Handle.Init.NSS               = SPI_NSS_HARD_OUTPUT;
 801ef28:	4b0e      	ldr	r3, [pc, #56]	; (801ef64 <SPI2_Init+0x7c>)
 801ef2a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801ef2e:	619a      	str	r2, [r3, #24]
		  Spi2Handle.Init.Mode = SPI_MODE_MASTER;
 801ef30:	4b0c      	ldr	r3, [pc, #48]	; (801ef64 <SPI2_Init+0x7c>)
 801ef32:	f44f 7282 	mov.w	r2, #260	; 0x104
 801ef36:	605a      	str	r2, [r3, #4]

		  if(HAL_SPI_Init(&Spi2Handle) != HAL_OK)
 801ef38:	480a      	ldr	r0, [pc, #40]	; (801ef64 <SPI2_Init+0x7c>)
 801ef3a:	f005 fb7d 	bl	8024638 <HAL_SPI_Init>
 801ef3e:	4603      	mov	r3, r0
 801ef40:	2b00      	cmp	r3, #0
 801ef42:	d003      	beq.n	801ef4c <SPI2_Init+0x64>
		  {
		    /* Initialization Error */
		    Error_Handler();
 801ef44:	f002 ff88 	bl	8021e58 <Error_Handler>
		    return HAL_ERROR;
 801ef48:	2301      	movs	r3, #1
 801ef4a:	e008      	b.n	801ef5e <SPI2_Init+0x76>
		  }
		  /* SPI block is enabled prior calling SPI transmit/receive functions, in order to get CLK signal properly pulled down.
		     Otherwise, SPI CLK signal is not clean on this board and leads to errors during transfer */
		  __HAL_SPI_ENABLE(&Spi2Handle);
 801ef4c:	4b05      	ldr	r3, [pc, #20]	; (801ef64 <SPI2_Init+0x7c>)
 801ef4e:	681b      	ldr	r3, [r3, #0]
 801ef50:	681a      	ldr	r2, [r3, #0]
 801ef52:	4b04      	ldr	r3, [pc, #16]	; (801ef64 <SPI2_Init+0x7c>)
 801ef54:	681b      	ldr	r3, [r3, #0]
 801ef56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801ef5a:	601a      	str	r2, [r3, #0]
		  return HAL_OK;
 801ef5c:	2300      	movs	r3, #0
}
 801ef5e:	4618      	mov	r0, r3
 801ef60:	bd80      	pop	{r7, pc}
 801ef62:	bf00      	nop
 801ef64:	200013d4 	.word	0x200013d4
 801ef68:	40003800 	.word	0x40003800

0801ef6c <ResetChipSelect>:

void ResetChipSelect(void){
 801ef6c:	b580      	push	{r7, lr}
 801ef6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_PORT,SPI2_NSS_PIN, GPIO_PIN_RESET);
 801ef70:	2200      	movs	r2, #0
 801ef72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801ef76:	4802      	ldr	r0, [pc, #8]	; (801ef80 <ResetChipSelect+0x14>)
 801ef78:	f003 ff5e 	bl	8022e38 <HAL_GPIO_WritePin>
}
 801ef7c:	bf00      	nop
 801ef7e:	bd80      	pop	{r7, pc}
 801ef80:	40010c00 	.word	0x40010c00

0801ef84 <SetChipSelect>:

void SetChipSelect(void){
 801ef84:	b580      	push	{r7, lr}
 801ef86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_PORT,SPI2_NSS_PIN, GPIO_PIN_SET);
 801ef88:	2201      	movs	r2, #1
 801ef8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801ef8e:	4802      	ldr	r0, [pc, #8]	; (801ef98 <SetChipSelect+0x14>)
 801ef90:	f003 ff52 	bl	8022e38 <HAL_GPIO_WritePin>
}
 801ef94:	bf00      	nop
 801ef96:	bd80      	pop	{r7, pc}
 801ef98:	40010c00 	.word	0x40010c00

0801ef9c <SystemClock_Config>:
 * @author thodo
 */
#include <Peripheral/app_system_clock_config.h>

HAL_StatusTypeDef SystemClock_Config(void)
{
 801ef9c:	b580      	push	{r7, lr}
 801ef9e:	b090      	sub	sp, #64	; 0x40
 801efa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801efa2:	f107 0318 	add.w	r3, r7, #24
 801efa6:	2228      	movs	r2, #40	; 0x28
 801efa8:	2100      	movs	r1, #0
 801efaa:	4618      	mov	r0, r3
 801efac:	f006 fdbe 	bl	8025b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801efb0:	1d3b      	adds	r3, r7, #4
 801efb2:	2200      	movs	r2, #0
 801efb4:	601a      	str	r2, [r3, #0]
 801efb6:	605a      	str	r2, [r3, #4]
 801efb8:	609a      	str	r2, [r3, #8]
 801efba:	60da      	str	r2, [r3, #12]
 801efbc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 801efbe:	230a      	movs	r3, #10
 801efc0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801efc2:	2301      	movs	r3, #1
 801efc4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 801efc6:	2310      	movs	r3, #16
 801efc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 801efca:	2301      	movs	r3, #1
 801efcc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801efce:	2302      	movs	r3, #2
 801efd0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 801efd2:	2300      	movs	r3, #0
 801efd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 801efd6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 801efda:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801efdc:	f107 0318 	add.w	r3, r7, #24
 801efe0:	4618      	mov	r0, r3
 801efe2:	f004 ff0f 	bl	8023e04 <HAL_RCC_OscConfig>
 801efe6:	4603      	mov	r3, r0
 801efe8:	2b00      	cmp	r3, #0
 801efea:	d001      	beq.n	801eff0 <SystemClock_Config+0x54>
  {
	  return HAL_ERROR;
 801efec:	2301      	movs	r3, #1
 801efee:	e017      	b.n	801f020 <SystemClock_Config+0x84>
	  Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801eff0:	230f      	movs	r3, #15
 801eff2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801eff4:	2302      	movs	r3, #2
 801eff6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801eff8:	2300      	movs	r3, #0
 801effa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 801effc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f000:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801f002:	2300      	movs	r3, #0
 801f004:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 801f006:	1d3b      	adds	r3, r7, #4
 801f008:	2102      	movs	r1, #2
 801f00a:	4618      	mov	r0, r3
 801f00c:	f005 f97a 	bl	8024304 <HAL_RCC_ClockConfig>
 801f010:	4603      	mov	r3, r0
 801f012:	2b00      	cmp	r3, #0
 801f014:	d003      	beq.n	801f01e <SystemClock_Config+0x82>
  {
    Error_Handler();
 801f016:	f002 ff1f 	bl	8021e58 <Error_Handler>
    return HAL_ERROR;
 801f01a:	2301      	movs	r3, #1
 801f01c:	e000      	b.n	801f020 <SystemClock_Config+0x84>
  }
  return HAL_OK;
 801f01e:	2300      	movs	r3, #0
}
 801f020:	4618      	mov	r0, r3
 801f022:	3740      	adds	r7, #64	; 0x40
 801f024:	46bd      	mov	sp, r7
 801f026:	bd80      	pop	{r7, pc}

0801f028 <Timer_Init>:

/* Prescaler declaration */
uint32_t uwPrescalerValue = 0;


HAL_StatusTypeDef Timer_Init(void){
 801f028:	b580      	push	{r7, lr}
 801f02a:	af00      	add	r7, sp, #0
	      2) by calling HAL API function HAL_RCC_GetSysClockFreq()
	      3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
	  ----------------------------------------------------------------------- */

	  /* Compute the prescaler value to have TIMx counter clock equal to 10000 Hz */
	  uwPrescalerValue = (uint32_t)(SystemCoreClock / 10000) - 1;
 801f02c:	4b18      	ldr	r3, [pc, #96]	; (801f090 <Timer_Init+0x68>)
 801f02e:	681b      	ldr	r3, [r3, #0]
 801f030:	4a18      	ldr	r2, [pc, #96]	; (801f094 <Timer_Init+0x6c>)
 801f032:	fba2 2303 	umull	r2, r3, r2, r3
 801f036:	0b5b      	lsrs	r3, r3, #13
 801f038:	3b01      	subs	r3, #1
 801f03a:	4a17      	ldr	r2, [pc, #92]	; (801f098 <Timer_Init+0x70>)
 801f03c:	6013      	str	r3, [r2, #0]

	  /* Set TIMx instance */
	  htim3.Instance = TIM3;
 801f03e:	4b17      	ldr	r3, [pc, #92]	; (801f09c <Timer_Init+0x74>)
 801f040:	4a17      	ldr	r2, [pc, #92]	; (801f0a0 <Timer_Init+0x78>)
 801f042:	601a      	str	r2, [r3, #0]
	       + Period = 10000 - 1
	       + Prescaler = (SystemCoreClock/10000) - 1
	       + ClockDivision = 0
	       + Counter direction = Up
	  */
	  htim3.Init.Period            = TIMER_CYCLE*10-1;
 801f044:	4b15      	ldr	r3, [pc, #84]	; (801f09c <Timer_Init+0x74>)
 801f046:	2263      	movs	r2, #99	; 0x63
 801f048:	60da      	str	r2, [r3, #12]
	  htim3.Init.Prescaler         = uwPrescalerValue;
 801f04a:	4b13      	ldr	r3, [pc, #76]	; (801f098 <Timer_Init+0x70>)
 801f04c:	681b      	ldr	r3, [r3, #0]
 801f04e:	4a13      	ldr	r2, [pc, #76]	; (801f09c <Timer_Init+0x74>)
 801f050:	6053      	str	r3, [r2, #4]
	  htim3.Init.ClockDivision     = 0;
 801f052:	4b12      	ldr	r3, [pc, #72]	; (801f09c <Timer_Init+0x74>)
 801f054:	2200      	movs	r2, #0
 801f056:	611a      	str	r2, [r3, #16]
	  htim3.Init.CounterMode       = TIM_COUNTERMODE_UP;
 801f058:	4b10      	ldr	r3, [pc, #64]	; (801f09c <Timer_Init+0x74>)
 801f05a:	2200      	movs	r2, #0
 801f05c:	609a      	str	r2, [r3, #8]
	  htim3.Init.RepetitionCounter = 0;
 801f05e:	4b0f      	ldr	r3, [pc, #60]	; (801f09c <Timer_Init+0x74>)
 801f060:	2200      	movs	r2, #0
 801f062:	615a      	str	r2, [r3, #20]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801f064:	4b0d      	ldr	r3, [pc, #52]	; (801f09c <Timer_Init+0x74>)
 801f066:	2200      	movs	r2, #0
 801f068:	619a      	str	r2, [r3, #24]

	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 801f06a:	480c      	ldr	r0, [pc, #48]	; (801f09c <Timer_Init+0x74>)
 801f06c:	f005 fd4a 	bl	8024b04 <HAL_TIM_Base_Init>
 801f070:	4603      	mov	r3, r0
 801f072:	2b00      	cmp	r3, #0
 801f074:	d001      	beq.n	801f07a <Timer_Init+0x52>
	  {
	    /* Initialization Error */
		  return HAL_ERROR;
 801f076:	2301      	movs	r3, #1
 801f078:	e008      	b.n	801f08c <Timer_Init+0x64>
	    Error_Handler();
	  }

	  /*##-2- Start the TIM Base generation in interrupt mode ####################*/
	  /* Start Channel1 */
	  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 801f07a:	4808      	ldr	r0, [pc, #32]	; (801f09c <Timer_Init+0x74>)
 801f07c:	f005 fd92 	bl	8024ba4 <HAL_TIM_Base_Start_IT>
 801f080:	4603      	mov	r3, r0
 801f082:	2b00      	cmp	r3, #0
 801f084:	d001      	beq.n	801f08a <Timer_Init+0x62>
	  {
	    /* Starting Error */
		  return HAL_ERROR;
 801f086:	2301      	movs	r3, #1
 801f088:	e000      	b.n	801f08c <Timer_Init+0x64>
	    Error_Handler();
	  }
	  return HAL_OK;
 801f08a:	2300      	movs	r3, #0
}
 801f08c:	4618      	mov	r0, r3
 801f08e:	bd80      	pop	{r7, pc}
 801f090:	200001f8 	.word	0x200001f8
 801f094:	d1b71759 	.word	0xd1b71759
 801f098:	20000288 	.word	0x20000288
 801f09c:	20001438 	.word	0x20001438
 801f0a0:	40000400 	.word	0x40000400

0801f0a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801f0a4:	b580      	push	{r7, lr}
 801f0a6:	b082      	sub	sp, #8
 801f0a8:	af00      	add	r7, sp, #0
 801f0aa:	6078      	str	r0, [r7, #4]
	SCH_Update();
 801f0ac:	f002 f9a4 	bl	80213f8 <SCH_Update>
}
 801f0b0:	bf00      	nop
 801f0b2:	3708      	adds	r7, #8
 801f0b4:	46bd      	mov	sp, r7
 801f0b6:	bd80      	pop	{r7, pc}

0801f0b8 <UART_SIM7600_Init>:
  * @brief USART SIMCOM7600 Initialization Function
  * @param None
  * @retval None
  */
HAL_StatusTypeDef UART_SIM7600_Init(void)
{
 801f0b8:	b580      	push	{r7, lr}
 801f0ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 801f0bc:	4b12      	ldr	r3, [pc, #72]	; (801f108 <UART_SIM7600_Init+0x50>)
 801f0be:	4a13      	ldr	r2, [pc, #76]	; (801f10c <UART_SIM7600_Init+0x54>)
 801f0c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 801f0c2:	4b11      	ldr	r3, [pc, #68]	; (801f108 <UART_SIM7600_Init+0x50>)
 801f0c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801f0c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801f0ca:	4b0f      	ldr	r3, [pc, #60]	; (801f108 <UART_SIM7600_Init+0x50>)
 801f0cc:	2200      	movs	r2, #0
 801f0ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 801f0d0:	4b0d      	ldr	r3, [pc, #52]	; (801f108 <UART_SIM7600_Init+0x50>)
 801f0d2:	2200      	movs	r2, #0
 801f0d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801f0d6:	4b0c      	ldr	r3, [pc, #48]	; (801f108 <UART_SIM7600_Init+0x50>)
 801f0d8:	2200      	movs	r2, #0
 801f0da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 801f0dc:	4b0a      	ldr	r3, [pc, #40]	; (801f108 <UART_SIM7600_Init+0x50>)
 801f0de:	220c      	movs	r2, #12
 801f0e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801f0e2:	4b09      	ldr	r3, [pc, #36]	; (801f108 <UART_SIM7600_Init+0x50>)
 801f0e4:	2200      	movs	r2, #0
 801f0e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801f0e8:	4b07      	ldr	r3, [pc, #28]	; (801f108 <UART_SIM7600_Init+0x50>)
 801f0ea:	2200      	movs	r2, #0
 801f0ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801f0ee:	4806      	ldr	r0, [pc, #24]	; (801f108 <UART_SIM7600_Init+0x50>)
 801f0f0:	f005 ff70 	bl	8024fd4 <HAL_UART_Init>
 801f0f4:	4603      	mov	r3, r0
 801f0f6:	2b00      	cmp	r3, #0
 801f0f8:	d001      	beq.n	801f0fe <UART_SIM7600_Init+0x46>
  {
	  return HAL_ERROR;
 801f0fa:	2301      	movs	r3, #1
 801f0fc:	e002      	b.n	801f104 <UART_SIM7600_Init+0x4c>
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */
  Start_Receive_IT();
 801f0fe:	f000 f8d7 	bl	801f2b0 <Start_Receive_IT>
  /* USER CODE END USART1_Init 2 */
  return HAL_OK;
 801f102:	2300      	movs	r3, #0
}
 801f104:	4618      	mov	r0, r3
 801f106:	bd80      	pop	{r7, pc}
 801f108:	200024c8 	.word	0x200024c8
 801f10c:	40013800 	.word	0x40013800

0801f110 <UART_SIM7600_Transmit>:
/**
  * @brief UART_SIM7600_Transmit Initialization Function
  * @param None
  * @retval None
  */
void UART_SIM7600_Transmit(uint8_t *buffer){
 801f110:	b580      	push	{r7, lr}
 801f112:	b084      	sub	sp, #16
 801f114:	af00      	add	r7, sp, #0
 801f116:	6078      	str	r0, [r7, #4]
	uint16_t tmpLen = strlen((char*)buffer);
 801f118:	6878      	ldr	r0, [r7, #4]
 801f11a:	f7ff f883 	bl	801e224 <strlen>
 801f11e:	4603      	mov	r3, r0
 801f120:	81fb      	strh	r3, [r7, #14]
	if(tmpLen == 0) {
 801f122:	89fb      	ldrh	r3, [r7, #14]
 801f124:	2b00      	cmp	r3, #0
 801f126:	d017      	beq.n	801f158 <UART_SIM7600_Transmit+0x48>
		return;
	} else {
#ifdef DEBUG
		LOG(buffer);
 801f128:	6878      	ldr	r0, [r7, #4]
 801f12a:	f000 f88b 	bl	801f244 <UART_DEBUG_Transmit>
//		if (DEBUG){
////			while(!UartTransmitReady);
//			UART_DEBUG_Transmit(buffer);
//		}
		//TODO: never do while in state machine
		while(!UartTransmitReady);
 801f12e:	bf00      	nop
 801f130:	4b0b      	ldr	r3, [pc, #44]	; (801f160 <UART_SIM7600_Transmit+0x50>)
 801f132:	781b      	ldrb	r3, [r3, #0]
 801f134:	b2db      	uxtb	r3, r3
 801f136:	2b00      	cmp	r3, #0
 801f138:	d0fa      	beq.n	801f130 <UART_SIM7600_Transmit+0x20>
		if(HAL_UART_Transmit_IT(&huart1, buffer, tmpLen)!= HAL_OK){
 801f13a:	89fb      	ldrh	r3, [r7, #14]
 801f13c:	461a      	mov	r2, r3
 801f13e:	6879      	ldr	r1, [r7, #4]
 801f140:	4808      	ldr	r0, [pc, #32]	; (801f164 <UART_SIM7600_Transmit+0x54>)
 801f142:	f006 f826 	bl	8025192 <HAL_UART_Transmit_IT>
 801f146:	4603      	mov	r3, r0
 801f148:	2b00      	cmp	r3, #0
 801f14a:	d001      	beq.n	801f150 <UART_SIM7600_Transmit+0x40>
			Error_Handler();
 801f14c:	f002 fe84 	bl	8021e58 <Error_Handler>
		}
		UartTransmitReady = RESET;
 801f150:	4b03      	ldr	r3, [pc, #12]	; (801f160 <UART_SIM7600_Transmit+0x50>)
 801f152:	2200      	movs	r2, #0
 801f154:	701a      	strb	r2, [r3, #0]
	}
	return;
 801f156:	e000      	b.n	801f15a <UART_SIM7600_Transmit+0x4a>
		return;
 801f158:	bf00      	nop
}
 801f15a:	3710      	adds	r7, #16
 801f15c:	46bd      	mov	sp, r7
 801f15e:	bd80      	pop	{r7, pc}
 801f160:	20000094 	.word	0x20000094
 801f164:	200024c8 	.word	0x200024c8

0801f168 <UART_SIM7600_Received_Buffer_Available>:
  * @brief UART_SIM7600_Received_Buffer_Available Initialization Function
  * @param None
  * @param None
  * @retval None
  */
uint8_t UART_SIM7600_Received_Buffer_Available(void){
 801f168:	b480      	push	{r7}
 801f16a:	af00      	add	r7, sp, #0
	if(receiveBufferIndexTail != receiveBufferIndexHead){
 801f16c:	4b07      	ldr	r3, [pc, #28]	; (801f18c <UART_SIM7600_Received_Buffer_Available+0x24>)
 801f16e:	881b      	ldrh	r3, [r3, #0]
 801f170:	b29a      	uxth	r2, r3
 801f172:	4b07      	ldr	r3, [pc, #28]	; (801f190 <UART_SIM7600_Received_Buffer_Available+0x28>)
 801f174:	881b      	ldrh	r3, [r3, #0]
 801f176:	b29b      	uxth	r3, r3
 801f178:	429a      	cmp	r2, r3
 801f17a:	d001      	beq.n	801f180 <UART_SIM7600_Received_Buffer_Available+0x18>
		return 1;
 801f17c:	2301      	movs	r3, #1
 801f17e:	e000      	b.n	801f182 <UART_SIM7600_Received_Buffer_Available+0x1a>
	} else {
		return 0;
 801f180:	2300      	movs	r3, #0
	}
}
 801f182:	4618      	mov	r0, r3
 801f184:	46bd      	mov	sp, r7
 801f186:	bc80      	pop	{r7}
 801f188:	4770      	bx	lr
 801f18a:	bf00      	nop
 801f18c:	2000028e 	.word	0x2000028e
 801f190:	2000028c 	.word	0x2000028c

0801f194 <UART_SIM7600_Read_Received_Buffer>:
  * @param None
  * @param None
  * @retval ch character at Tail index of buffer and Tail will increase 1
  */
char log[10];
uint8_t UART_SIM7600_Read_Received_Buffer(void){
 801f194:	b480      	push	{r7}
 801f196:	b083      	sub	sp, #12
 801f198:	af00      	add	r7, sp, #0
	if(receiveBufferIndexTail == receiveBufferIndexHead) return 0xff;
 801f19a:	4b12      	ldr	r3, [pc, #72]	; (801f1e4 <UART_SIM7600_Read_Received_Buffer+0x50>)
 801f19c:	881b      	ldrh	r3, [r3, #0]
 801f19e:	b29a      	uxth	r2, r3
 801f1a0:	4b11      	ldr	r3, [pc, #68]	; (801f1e8 <UART_SIM7600_Read_Received_Buffer+0x54>)
 801f1a2:	881b      	ldrh	r3, [r3, #0]
 801f1a4:	b29b      	uxth	r3, r3
 801f1a6:	429a      	cmp	r2, r3
 801f1a8:	d101      	bne.n	801f1ae <UART_SIM7600_Read_Received_Buffer+0x1a>
 801f1aa:	23ff      	movs	r3, #255	; 0xff
 801f1ac:	e015      	b.n	801f1da <UART_SIM7600_Read_Received_Buffer+0x46>
	uint8_t ch = aUART_RxBuffer[receiveBufferIndexTail];
 801f1ae:	4b0d      	ldr	r3, [pc, #52]	; (801f1e4 <UART_SIM7600_Read_Received_Buffer+0x50>)
 801f1b0:	881b      	ldrh	r3, [r3, #0]
 801f1b2:	b29b      	uxth	r3, r3
 801f1b4:	461a      	mov	r2, r3
 801f1b6:	4b0d      	ldr	r3, [pc, #52]	; (801f1ec <UART_SIM7600_Read_Received_Buffer+0x58>)
 801f1b8:	5c9b      	ldrb	r3, [r3, r2]
 801f1ba:	71fb      	strb	r3, [r7, #7]
	receiveBufferIndexTail = (receiveBufferIndexTail + 1) % UART_RX_BUFFERSIZE;
 801f1bc:	4b09      	ldr	r3, [pc, #36]	; (801f1e4 <UART_SIM7600_Read_Received_Buffer+0x50>)
 801f1be:	881b      	ldrh	r3, [r3, #0]
 801f1c0:	b29b      	uxth	r3, r3
 801f1c2:	3301      	adds	r3, #1
 801f1c4:	425a      	negs	r2, r3
 801f1c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801f1ca:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801f1ce:	bf58      	it	pl
 801f1d0:	4253      	negpl	r3, r2
 801f1d2:	b29a      	uxth	r2, r3
 801f1d4:	4b03      	ldr	r3, [pc, #12]	; (801f1e4 <UART_SIM7600_Read_Received_Buffer+0x50>)
 801f1d6:	801a      	strh	r2, [r3, #0]
//	sprintf(log,"%d\r\n",receiveBufferIndexTail,receiveBufferIndexHead);
//	LOG("1111");
	return ch;
 801f1d8:	79fb      	ldrb	r3, [r7, #7]
}
 801f1da:	4618      	mov	r0, r3
 801f1dc:	370c      	adds	r7, #12
 801f1de:	46bd      	mov	sp, r7
 801f1e0:	bc80      	pop	{r7}
 801f1e2:	4770      	bx	lr
 801f1e4:	2000028e 	.word	0x2000028e
 801f1e8:	2000028c 	.word	0x2000028c
 801f1ec:	200014c8 	.word	0x200014c8

0801f1f0 <UART_DEBUG_Init>:
  * @brief UART_DEBUG_Init Initialization Function
  * @param None
  * @retval None
  */
HAL_StatusTypeDef UART_DEBUG_Init(void)
{
 801f1f0:	b580      	push	{r7, lr}
 801f1f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 801f1f4:	4b11      	ldr	r3, [pc, #68]	; (801f23c <UART_DEBUG_Init+0x4c>)
 801f1f6:	4a12      	ldr	r2, [pc, #72]	; (801f240 <UART_DEBUG_Init+0x50>)
 801f1f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 801f1fa:	4b10      	ldr	r3, [pc, #64]	; (801f23c <UART_DEBUG_Init+0x4c>)
 801f1fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801f200:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 801f202:	4b0e      	ldr	r3, [pc, #56]	; (801f23c <UART_DEBUG_Init+0x4c>)
 801f204:	2200      	movs	r2, #0
 801f206:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 801f208:	4b0c      	ldr	r3, [pc, #48]	; (801f23c <UART_DEBUG_Init+0x4c>)
 801f20a:	2200      	movs	r2, #0
 801f20c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 801f20e:	4b0b      	ldr	r3, [pc, #44]	; (801f23c <UART_DEBUG_Init+0x4c>)
 801f210:	2200      	movs	r2, #0
 801f212:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 801f214:	4b09      	ldr	r3, [pc, #36]	; (801f23c <UART_DEBUG_Init+0x4c>)
 801f216:	220c      	movs	r2, #12
 801f218:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801f21a:	4b08      	ldr	r3, [pc, #32]	; (801f23c <UART_DEBUG_Init+0x4c>)
 801f21c:	2200      	movs	r2, #0
 801f21e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 801f220:	4b06      	ldr	r3, [pc, #24]	; (801f23c <UART_DEBUG_Init+0x4c>)
 801f222:	2200      	movs	r2, #0
 801f224:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 801f226:	4805      	ldr	r0, [pc, #20]	; (801f23c <UART_DEBUG_Init+0x4c>)
 801f228:	f005 fed4 	bl	8024fd4 <HAL_UART_Init>
 801f22c:	4603      	mov	r3, r0
 801f22e:	2b00      	cmp	r3, #0
 801f230:	d001      	beq.n	801f236 <UART_DEBUG_Init+0x46>
  {
	  return HAL_ERROR;
 801f232:	2301      	movs	r3, #1
 801f234:	e000      	b.n	801f238 <UART_DEBUG_Init+0x48>
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
  return HAL_OK;
 801f236:	2300      	movs	r3, #0
}
 801f238:	4618      	mov	r0, r3
 801f23a:	bd80      	pop	{r7, pc}
 801f23c:	20001480 	.word	0x20001480
 801f240:	40004800 	.word	0x40004800

0801f244 <UART_DEBUG_Transmit>:
/**
  * @brief USART Transmit Initialization Function
  * @param buffer buffer to transmit via UART DEBUG without known size, it will use strlen(buffer) to get size.
  * @retval None
  */
void UART_DEBUG_Transmit(uint8_t *buffer){
 801f244:	b580      	push	{r7, lr}
 801f246:	b084      	sub	sp, #16
 801f248:	af00      	add	r7, sp, #0
 801f24a:	6078      	str	r0, [r7, #4]
	uint16_t tmpLen = strlen((char*)buffer);
 801f24c:	6878      	ldr	r0, [r7, #4]
 801f24e:	f7fe ffe9 	bl	801e224 <strlen>
 801f252:	4603      	mov	r3, r0
 801f254:	81fb      	strh	r3, [r7, #14]
	if(tmpLen == 0){
 801f256:	89fb      	ldrh	r3, [r7, #14]
 801f258:	2b00      	cmp	r3, #0
 801f25a:	d00b      	beq.n	801f274 <UART_DEBUG_Transmit+0x30>
		return;
	}
	if(HAL_UART_Transmit(&huart3, (uint8_t*)buffer, tmpLen ,0xFF)!= HAL_OK){
 801f25c:	89fa      	ldrh	r2, [r7, #14]
 801f25e:	23ff      	movs	r3, #255	; 0xff
 801f260:	6879      	ldr	r1, [r7, #4]
 801f262:	4806      	ldr	r0, [pc, #24]	; (801f27c <UART_DEBUG_Transmit+0x38>)
 801f264:	f005 ff03 	bl	802506e <HAL_UART_Transmit>
 801f268:	4603      	mov	r3, r0
 801f26a:	2b00      	cmp	r3, #0
 801f26c:	d003      	beq.n	801f276 <UART_DEBUG_Transmit+0x32>
		Error_Handler();
 801f26e:	f002 fdf3 	bl	8021e58 <Error_Handler>
 801f272:	e000      	b.n	801f276 <UART_DEBUG_Transmit+0x32>
		return;
 801f274:	bf00      	nop
	}
//	UartTransmitReady = RESET;
}
 801f276:	3710      	adds	r7, #16
 801f278:	46bd      	mov	sp, r7
 801f27a:	bd80      	pop	{r7, pc}
 801f27c:	20001480 	.word	0x20001480

0801f280 <UART_DEBUG_Transmit_Size>:
  * @brief UART_DEBUG_Transmit_Size Initialization Function
  * @param buffer: buffer contain data for transmit
  * @param buffer_size: size of data to transmit
  * @retval None
  */
void UART_DEBUG_Transmit_Size(uint8_t *buffer ,uint16_t buffer_size){
 801f280:	b580      	push	{r7, lr}
 801f282:	b082      	sub	sp, #8
 801f284:	af00      	add	r7, sp, #0
 801f286:	6078      	str	r0, [r7, #4]
 801f288:	460b      	mov	r3, r1
 801f28a:	807b      	strh	r3, [r7, #2]
	if(HAL_UART_Transmit(&huart3, (uint8_t*)buffer, buffer_size,200)!= HAL_OK){
 801f28c:	887a      	ldrh	r2, [r7, #2]
 801f28e:	23c8      	movs	r3, #200	; 0xc8
 801f290:	6879      	ldr	r1, [r7, #4]
 801f292:	4806      	ldr	r0, [pc, #24]	; (801f2ac <UART_DEBUG_Transmit_Size+0x2c>)
 801f294:	f005 feeb 	bl	802506e <HAL_UART_Transmit>
 801f298:	4603      	mov	r3, r0
 801f29a:	2b00      	cmp	r3, #0
 801f29c:	d001      	beq.n	801f2a2 <UART_DEBUG_Transmit_Size+0x22>
		Error_Handler();
 801f29e:	f002 fddb 	bl	8021e58 <Error_Handler>
	}
//	UartTransmitReady = RESET;
}
 801f2a2:	bf00      	nop
 801f2a4:	3708      	adds	r7, #8
 801f2a6:	46bd      	mov	sp, r7
 801f2a8:	bd80      	pop	{r7, pc}
 801f2aa:	bf00      	nop
 801f2ac:	20001480 	.word	0x20001480

0801f2b0 <Start_Receive_IT>:
  * @brief Setup_Receive_IT Initialization Function
  * It will receive 1 bytes.
  * @param None
  * @retval None
  */
void Start_Receive_IT(void){
 801f2b0:	b580      	push	{r7, lr}
 801f2b2:	af00      	add	r7, sp, #0
	if(HAL_UART_Receive_IT(&huart1, &temp, 1)!= HAL_OK){
 801f2b4:	2201      	movs	r2, #1
 801f2b6:	4905      	ldr	r1, [pc, #20]	; (801f2cc <Start_Receive_IT+0x1c>)
 801f2b8:	4805      	ldr	r0, [pc, #20]	; (801f2d0 <Start_Receive_IT+0x20>)
 801f2ba:	f005 ffae 	bl	802521a <HAL_UART_Receive_IT>
 801f2be:	4603      	mov	r3, r0
 801f2c0:	2b00      	cmp	r3, #0
 801f2c2:	d001      	beq.n	801f2c8 <Start_Receive_IT+0x18>
		Error_Handler();
 801f2c4:	f002 fdc8 	bl	8021e58 <Error_Handler>
	}
}
 801f2c8:	bf00      	nop
 801f2ca:	bd80      	pop	{r7, pc}
 801f2cc:	200014c4 	.word	0x200014c4
 801f2d0:	200024c8 	.word	0x200024c8

0801f2d4 <HAL_UART_RxCpltCallback>:
  * When Simcom7600 transmit data to UART, so HAL_UART_RxCpltCallback will be called.
  * HAL_UART_RxCpltCallback will recalled HAL_UART_Receive_IT to continous UART Interrupt Service.
  * @param huart UART_HandleTypeDef be handled in Callback
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 801f2d4:	b580      	push	{r7, lr}
 801f2d6:	b082      	sub	sp, #8
 801f2d8:	af00      	add	r7, sp, #0
 801f2da:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 801f2dc:	687b      	ldr	r3, [r7, #4]
 801f2de:	681b      	ldr	r3, [r3, #0]
 801f2e0:	4a10      	ldr	r2, [pc, #64]	; (801f324 <HAL_UART_RxCpltCallback+0x50>)
 801f2e2:	4293      	cmp	r3, r2
 801f2e4:	d11a      	bne.n	801f31c <HAL_UART_RxCpltCallback+0x48>
		aUART_RxBuffer[receiveBufferIndexHead] = temp;
 801f2e6:	4b10      	ldr	r3, [pc, #64]	; (801f328 <HAL_UART_RxCpltCallback+0x54>)
 801f2e8:	881b      	ldrh	r3, [r3, #0]
 801f2ea:	b29b      	uxth	r3, r3
 801f2ec:	461a      	mov	r2, r3
 801f2ee:	4b0f      	ldr	r3, [pc, #60]	; (801f32c <HAL_UART_RxCpltCallback+0x58>)
 801f2f0:	7819      	ldrb	r1, [r3, #0]
 801f2f2:	4b0f      	ldr	r3, [pc, #60]	; (801f330 <HAL_UART_RxCpltCallback+0x5c>)
 801f2f4:	5499      	strb	r1, [r3, r2]
		receiveBufferIndexHead = (receiveBufferIndexHead + 1) % UART_RX_BUFFERSIZE;
 801f2f6:	4b0c      	ldr	r3, [pc, #48]	; (801f328 <HAL_UART_RxCpltCallback+0x54>)
 801f2f8:	881b      	ldrh	r3, [r3, #0]
 801f2fa:	b29b      	uxth	r3, r3
 801f2fc:	3301      	adds	r3, #1
 801f2fe:	425a      	negs	r2, r3
 801f300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801f304:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801f308:	bf58      	it	pl
 801f30a:	4253      	negpl	r3, r2
 801f30c:	b29a      	uxth	r2, r3
 801f30e:	4b06      	ldr	r3, [pc, #24]	; (801f328 <HAL_UART_RxCpltCallback+0x54>)
 801f310:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(huart, &temp, 1);
 801f312:	2201      	movs	r2, #1
 801f314:	4905      	ldr	r1, [pc, #20]	; (801f32c <HAL_UART_RxCpltCallback+0x58>)
 801f316:	6878      	ldr	r0, [r7, #4]
 801f318:	f005 ff7f 	bl	802521a <HAL_UART_Receive_IT>
	}
}
 801f31c:	bf00      	nop
 801f31e:	3708      	adds	r7, #8
 801f320:	46bd      	mov	sp, r7
 801f322:	bd80      	pop	{r7, pc}
 801f324:	40013800 	.word	0x40013800
 801f328:	2000028c 	.word	0x2000028c
 801f32c:	200014c4 	.word	0x200014c4
 801f330:	200014c8 	.word	0x200014c8

0801f334 <HAL_UART_TxCpltCallback>:
/**
  * @brief HAL_UART_TxCpltCallback Initialization Function
  * @param UartHandle UART_HandleTypeDef be handled in Callback
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 801f334:	b480      	push	{r7}
 801f336:	b083      	sub	sp, #12
 801f338:	af00      	add	r7, sp, #0
 801f33a:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartTransmitReady = SET;
 801f33c:	4b03      	ldr	r3, [pc, #12]	; (801f34c <HAL_UART_TxCpltCallback+0x18>)
 801f33e:	2201      	movs	r2, #1
 801f340:	701a      	strb	r2, [r3, #0]
}
 801f342:	bf00      	nop
 801f344:	370c      	adds	r7, #12
 801f346:	46bd      	mov	sp, r7
 801f348:	bc80      	pop	{r7}
 801f34a:	4770      	bx	lr
 801f34c:	20000094 	.word	0x20000094

0801f350 <Clear_Reiceive_Buffer>:
  * @brief Clear_Reiceive_Buffer Initialization Function
  * Clear all data in RX buffer.
  * @param None
  * @retval None
  */
void Clear_Reiceive_Buffer(void){
 801f350:	b580      	push	{r7, lr}
 801f352:	af00      	add	r7, sp, #0
	memset(aUART_RxBuffer,0,UART_RX_BUFFERSIZE);
 801f354:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801f358:	2100      	movs	r1, #0
 801f35a:	4805      	ldr	r0, [pc, #20]	; (801f370 <Clear_Reiceive_Buffer+0x20>)
 801f35c:	f006 fbe6 	bl	8025b2c <memset>
	receiveBufferIndexHead = 0;
 801f360:	4b04      	ldr	r3, [pc, #16]	; (801f374 <Clear_Reiceive_Buffer+0x24>)
 801f362:	2200      	movs	r2, #0
 801f364:	801a      	strh	r2, [r3, #0]
	receiveBufferIndexTail = 0;
 801f366:	4b04      	ldr	r3, [pc, #16]	; (801f378 <Clear_Reiceive_Buffer+0x28>)
 801f368:	2200      	movs	r2, #0
 801f36a:	801a      	strh	r2, [r3, #0]
}
 801f36c:	bf00      	nop
 801f36e:	bd80      	pop	{r7, pc}
 801f370:	200014c8 	.word	0x200014c8
 801f374:	2000028c 	.word	0x2000028c
 801f378:	2000028e 	.word	0x2000028e

0801f37c <HTTP_Display_State>:

/**
 * HTTP_Display_State()
 * @brief This is function for display state of State Machine. It only show State when having a state changation.
 */
void HTTP_Display_State(void){
 801f37c:	b580      	push	{r7, lr}
 801f37e:	af00      	add	r7, sp, #0
	if(prev_http_state!=http_state){
 801f380:	4b2c      	ldr	r3, [pc, #176]	; (801f434 <HTTP_Display_State+0xb8>)
 801f382:	781a      	ldrb	r2, [r3, #0]
 801f384:	4b2c      	ldr	r3, [pc, #176]	; (801f438 <HTTP_Display_State+0xbc>)
 801f386:	781b      	ldrb	r3, [r3, #0]
 801f388:	429a      	cmp	r2, r3
 801f38a:	d04d      	beq.n	801f428 <HTTP_Display_State+0xac>
		prev_http_state = http_state;
 801f38c:	4b2a      	ldr	r3, [pc, #168]	; (801f438 <HTTP_Display_State+0xbc>)
 801f38e:	781a      	ldrb	r2, [r3, #0]
 801f390:	4b28      	ldr	r3, [pc, #160]	; (801f434 <HTTP_Display_State+0xb8>)
 801f392:	701a      	strb	r2, [r3, #0]
		switch (http_state) {
 801f394:	4b28      	ldr	r3, [pc, #160]	; (801f438 <HTTP_Display_State+0xbc>)
 801f396:	781b      	ldrb	r3, [r3, #0]
 801f398:	2b0a      	cmp	r3, #10
 801f39a:	d847      	bhi.n	801f42c <HTTP_Display_State+0xb0>
 801f39c:	a201      	add	r2, pc, #4	; (adr r2, 801f3a4 <HTTP_Display_State+0x28>)
 801f39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f3a2:	bf00      	nop
 801f3a4:	0801f3d1 	.word	0x0801f3d1
 801f3a8:	0801f3d9 	.word	0x0801f3d9
 801f3ac:	0801f3e1 	.word	0x0801f3e1
 801f3b0:	0801f3e9 	.word	0x0801f3e9
 801f3b4:	0801f3f1 	.word	0x0801f3f1
 801f3b8:	0801f3f9 	.word	0x0801f3f9
 801f3bc:	0801f401 	.word	0x0801f401
 801f3c0:	0801f409 	.word	0x0801f409
 801f3c4:	0801f411 	.word	0x0801f411
 801f3c8:	0801f419 	.word	0x0801f419
 801f3cc:	0801f421 	.word	0x0801f421
			case HTTP_INIT:
				LOG("\r\nHTTP INIT\r\n");
 801f3d0:	481a      	ldr	r0, [pc, #104]	; (801f43c <HTTP_Display_State+0xc0>)
 801f3d2:	f7ff ff37 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 801f3d6:	e02a      	b.n	801f42e <HTTP_Display_State+0xb2>
			case HTTP_WAIT_FOR_INIT:
				LOG("\r\nHTTP WAIT FOR INIT\r\n");
 801f3d8:	4819      	ldr	r0, [pc, #100]	; (801f440 <HTTP_Display_State+0xc4>)
 801f3da:	f7ff ff33 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 801f3de:	e026      	b.n	801f42e <HTTP_Display_State+0xb2>
			case HTTP_PARA:
				LOG("\r\nHTTP PARA\r\n");
 801f3e0:	4818      	ldr	r0, [pc, #96]	; (801f444 <HTTP_Display_State+0xc8>)
 801f3e2:	f7ff ff2f 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 801f3e6:	e022      	b.n	801f42e <HTTP_Display_State+0xb2>
			case HTTP_WAIT_FOR_PARA:
				LOG("\r\nHTTP WAIT FOR PARA\r\n");
 801f3e8:	4817      	ldr	r0, [pc, #92]	; (801f448 <HTTP_Display_State+0xcc>)
 801f3ea:	f7ff ff2b 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 801f3ee:	e01e      	b.n	801f42e <HTTP_Display_State+0xb2>
			case HTTP_ACTION:
				LOG("\r\nHTTP ACTION\r\n");
 801f3f0:	4816      	ldr	r0, [pc, #88]	; (801f44c <HTTP_Display_State+0xd0>)
 801f3f2:	f7ff ff27 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 801f3f6:	e01a      	b.n	801f42e <HTTP_Display_State+0xb2>
			case HTTP_WAIT_FOR_ACTION:
				LOG("\r\nHTTP WAIT FOR ACTION\r\n");
 801f3f8:	4815      	ldr	r0, [pc, #84]	; (801f450 <HTTP_Display_State+0xd4>)
 801f3fa:	f7ff ff23 	bl	801f244 <UART_DEBUG_Transmit>
				//TODO recheck, break or not ?
				break;
 801f3fe:	e016      	b.n	801f42e <HTTP_Display_State+0xb2>
			case HTTP_READ:
				LOG("\r\nHTTP READ\r\n");
 801f400:	4814      	ldr	r0, [pc, #80]	; (801f454 <HTTP_Display_State+0xd8>)
 801f402:	f7ff ff1f 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 801f406:	e012      	b.n	801f42e <HTTP_Display_State+0xb2>
			case HTTP_WAIT_FOR_READ:
				LOG("\r\nHTTP WAIT FOR READ\r\n");
 801f408:	4813      	ldr	r0, [pc, #76]	; (801f458 <HTTP_Display_State+0xdc>)
 801f40a:	f7ff ff1b 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 801f40e:	e00e      	b.n	801f42e <HTTP_Display_State+0xb2>
			case HTTP_TERM:
				LOG("\r\nHTTP TERM\r\n");
 801f410:	4812      	ldr	r0, [pc, #72]	; (801f45c <HTTP_Display_State+0xe0>)
 801f412:	f7ff ff17 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 801f416:	e00a      	b.n	801f42e <HTTP_Display_State+0xb2>
			case HTTP_WAIT_FOR_TERM:
				LOG("\r\nHTTP WAIT FOR TERM\r\n");
 801f418:	4811      	ldr	r0, [pc, #68]	; (801f460 <HTTP_Display_State+0xe4>)
 801f41a:	f7ff ff13 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 801f41e:	e006      	b.n	801f42e <HTTP_Display_State+0xb2>
			case HTTP_DONE:
				LOG("\r\nHTTP DONE\r\n");
 801f420:	4810      	ldr	r0, [pc, #64]	; (801f464 <HTTP_Display_State+0xe8>)
 801f422:	f7ff ff0f 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 801f426:	e002      	b.n	801f42e <HTTP_Display_State+0xb2>
			default:
				break;
		}
	}
 801f428:	bf00      	nop
 801f42a:	e000      	b.n	801f42e <HTTP_Display_State+0xb2>
				break;
 801f42c:	bf00      	nop

}
 801f42e:	bf00      	nop
 801f430:	bd80      	pop	{r7, pc}
 801f432:	bf00      	nop
 801f434:	2000029a 	.word	0x2000029a
 801f438:	2000029b 	.word	0x2000029b
 801f43c:	080265e0 	.word	0x080265e0
 801f440:	080265f0 	.word	0x080265f0
 801f444:	08026608 	.word	0x08026608
 801f448:	08026618 	.word	0x08026618
 801f44c:	08026630 	.word	0x08026630
 801f450:	08026640 	.word	0x08026640
 801f454:	0802665c 	.word	0x0802665c
 801f458:	0802666c 	.word	0x0802666c
 801f45c:	08026684 	.word	0x08026684
 801f460:	08026694 	.word	0x08026694
 801f464:	080266ac 	.word	0x080266ac

0801f468 <HTTP_Run>:

/**
 * HTTP_Run()
 * @brief This is function can be called from external file. It run follow state machine method. Not have param.
 */
uint8_t HTTP_Run(){
 801f468:	b580      	push	{r7, lr}
 801f46a:	af00      	add	r7, sp, #0
	HTTP_Display_State();
 801f46c:	f7ff ff86 	bl	801f37c <HTTP_Display_State>
	if(http_state < HTTP_DONE){
 801f470:	4b0c      	ldr	r3, [pc, #48]	; (801f4a4 <HTTP_Run+0x3c>)
 801f472:	781b      	ldrb	r3, [r3, #0]
 801f474:	2b09      	cmp	r3, #9
 801f476:	d808      	bhi.n	801f48a <HTTP_Run+0x22>
		(*http_state_machine[http_state].func)();
 801f478:	4b0a      	ldr	r3, [pc, #40]	; (801f4a4 <HTTP_Run+0x3c>)
 801f47a:	781b      	ldrb	r3, [r3, #0]
 801f47c:	4a0a      	ldr	r2, [pc, #40]	; (801f4a8 <HTTP_Run+0x40>)
 801f47e:	00db      	lsls	r3, r3, #3
 801f480:	4413      	add	r3, r2
 801f482:	685b      	ldr	r3, [r3, #4]
 801f484:	4798      	blx	r3
		return 0;
 801f486:	2300      	movs	r3, #0
 801f488:	e009      	b.n	801f49e <HTTP_Run+0x36>
	}
	else if(http_state == HTTP_DONE){
 801f48a:	4b06      	ldr	r3, [pc, #24]	; (801f4a4 <HTTP_Run+0x3c>)
 801f48c:	781b      	ldrb	r3, [r3, #0]
 801f48e:	2b0a      	cmp	r3, #10
 801f490:	d104      	bne.n	801f49c <HTTP_Run+0x34>
		LOG("Get into HTTP DONE");
 801f492:	4806      	ldr	r0, [pc, #24]	; (801f4ac <HTTP_Run+0x44>)
 801f494:	f7ff fed6 	bl	801f244 <UART_DEBUG_Transmit>
		return 1;
 801f498:	2301      	movs	r3, #1
 801f49a:	e000      	b.n	801f49e <HTTP_Run+0x36>
	}
	else{
		//HTTP Error
		return 2;
 801f49c:	2302      	movs	r3, #2
	}
}
 801f49e:	4618      	mov	r0, r3
 801f4a0:	bd80      	pop	{r7, pc}
 801f4a2:	bf00      	nop
 801f4a4:	2000029b 	.word	0x2000029b
 801f4a8:	200000a0 	.word	0x200000a0
 801f4ac:	080266bc 	.word	0x080266bc

0801f4b0 <HTTP_Init>:

/**
 * HTTP_Init()
 * @brief This is function for initiating Http service
 */
void HTTP_Init(){
 801f4b0:	b580      	push	{r7, lr}
 801f4b2:	af00      	add	r7, sp, #0
	content_length = 0;
 801f4b4:	4b0b      	ldr	r3, [pc, #44]	; (801f4e4 <HTTP_Init+0x34>)
 801f4b6:	2200      	movs	r2, #0
 801f4b8:	601a      	str	r2, [r3, #0]
	Clear_Reiceive_Buffer();
 801f4ba:	f7ff ff49 	bl	801f350 <Clear_Reiceive_Buffer>
	if(default_atcommand){
 801f4be:	4b0a      	ldr	r3, [pc, #40]	; (801f4e8 <HTTP_Init+0x38>)
 801f4c0:	781b      	ldrb	r3, [r3, #0]
 801f4c2:	2b00      	cmp	r3, #0
 801f4c4:	d003      	beq.n	801f4ce <HTTP_Init+0x1e>
		sprintf(http_at_command,"AT+HTTPINIT\r\n");
 801f4c6:	4909      	ldr	r1, [pc, #36]	; (801f4ec <HTTP_Init+0x3c>)
 801f4c8:	4809      	ldr	r0, [pc, #36]	; (801f4f0 <HTTP_Init+0x40>)
 801f4ca:	f006 fb37 	bl	8025b3c <siprintf>
	}
	UART_SIM7600_Transmit((uint8_t *)http_at_command);
 801f4ce:	4808      	ldr	r0, [pc, #32]	; (801f4f0 <HTTP_Init+0x40>)
 801f4d0:	f7ff fe1e 	bl	801f110 <UART_SIM7600_Transmit>
	Clear_Http_Command();
 801f4d4:	f000 ffa8 	bl	8020428 <Clear_Http_Command>
	http_state = HTTP_WAIT_FOR_INIT;
 801f4d8:	4b06      	ldr	r3, [pc, #24]	; (801f4f4 <HTTP_Init+0x44>)
 801f4da:	2201      	movs	r2, #1
 801f4dc:	701a      	strb	r2, [r3, #0]
}
 801f4de:	bf00      	nop
 801f4e0:	bd80      	pop	{r7, pc}
 801f4e2:	bf00      	nop
 801f4e4:	20000294 	.word	0x20000294
 801f4e8:	20000096 	.word	0x20000096
 801f4ec:	080266d0 	.word	0x080266d0
 801f4f0:	20003694 	.word	0x20003694
 801f4f4:	2000029b 	.word	0x2000029b

0801f4f8 <HTTP_Wait_For_Init>:

/**
 * HTTP_Wait_For_Init()
 * @brief This is function for waiting respond from initiating Http service
 */
void HTTP_Wait_For_Init(){
 801f4f8:	b580      	push	{r7, lr}
 801f4fa:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_OK);
	switch (Get_AT_Result()){
 801f4fc:	f001 ff4e 	bl	802139c <Get_AT_Result>
 801f500:	4603      	mov	r3, r0
 801f502:	2b00      	cmp	r3, #0
 801f504:	d002      	beq.n	801f50c <HTTP_Wait_For_Init+0x14>
 801f506:	2b01      	cmp	r3, #1
 801f508:	d006      	beq.n	801f518 <HTTP_Wait_For_Init+0x20>
		case AT_ERROR:
			Clear_AT_Result();
			http_state=HTTP_MAX_STATE;
			break;
		default:
			break;
 801f50a:	e00b      	b.n	801f524 <HTTP_Wait_For_Init+0x2c>
			Clear_AT_Result();
 801f50c:	f001 ff50 	bl	80213b0 <Clear_AT_Result>
			http_state=HTTP_PARA;
 801f510:	4b05      	ldr	r3, [pc, #20]	; (801f528 <HTTP_Wait_For_Init+0x30>)
 801f512:	2202      	movs	r2, #2
 801f514:	701a      	strb	r2, [r3, #0]
			break;
 801f516:	e005      	b.n	801f524 <HTTP_Wait_For_Init+0x2c>
			Clear_AT_Result();
 801f518:	f001 ff4a 	bl	80213b0 <Clear_AT_Result>
			http_state=HTTP_MAX_STATE;
 801f51c:	4b02      	ldr	r3, [pc, #8]	; (801f528 <HTTP_Wait_For_Init+0x30>)
 801f51e:	220b      	movs	r2, #11
 801f520:	701a      	strb	r2, [r3, #0]
			break;
 801f522:	bf00      	nop
	}
}
 801f524:	bf00      	nop
 801f526:	bd80      	pop	{r7, pc}
 801f528:	2000029b 	.word	0x2000029b

0801f52c <HTTP_Para>:

/**
 * HTTP_Para()
 * @brief This is function for passing parameter to HTTP Request
 */
void HTTP_Para(){
 801f52c:	b580      	push	{r7, lr}
 801f52e:	af00      	add	r7, sp, #0
	if (default_atcommand) {
 801f530:	4b0d      	ldr	r3, [pc, #52]	; (801f568 <HTTP_Para+0x3c>)
 801f532:	781b      	ldrb	r3, [r3, #0]
 801f534:	2b00      	cmp	r3, #0
 801f536:	d00d      	beq.n	801f554 <HTTP_Para+0x28>
		if(fota_check_version){
 801f538:	4b0c      	ldr	r3, [pc, #48]	; (801f56c <HTTP_Para+0x40>)
 801f53a:	781b      	ldrb	r3, [r3, #0]
 801f53c:	2b00      	cmp	r3, #0
 801f53e:	d004      	beq.n	801f54a <HTTP_Para+0x1e>
			sprintf(http_at_command,"AT+HTTPPARA=\"URL\",\"http://ota.chipfc.com/ebox_firmware/version.txt\"\r\n");
 801f540:	490b      	ldr	r1, [pc, #44]	; (801f570 <HTTP_Para+0x44>)
 801f542:	480c      	ldr	r0, [pc, #48]	; (801f574 <HTTP_Para+0x48>)
 801f544:	f006 fafa 	bl	8025b3c <siprintf>
 801f548:	e004      	b.n	801f554 <HTTP_Para+0x28>
		}
		else{
			sprintf(http_at_command,"AT+HTTPPARA=\"URL\",\"http://ota.chipfc.com/ebox_firmware/%s/eBoxK2.hex\"\r\n",version);
 801f54a:	4a0b      	ldr	r2, [pc, #44]	; (801f578 <HTTP_Para+0x4c>)
 801f54c:	490b      	ldr	r1, [pc, #44]	; (801f57c <HTTP_Para+0x50>)
 801f54e:	4809      	ldr	r0, [pc, #36]	; (801f574 <HTTP_Para+0x48>)
 801f550:	f006 faf4 	bl	8025b3c <siprintf>
		}
	}
	UART_SIM7600_Transmit((uint8_t*)http_at_command);
 801f554:	4807      	ldr	r0, [pc, #28]	; (801f574 <HTTP_Para+0x48>)
 801f556:	f7ff fddb 	bl	801f110 <UART_SIM7600_Transmit>
	Clear_Http_Command();
 801f55a:	f000 ff65 	bl	8020428 <Clear_Http_Command>
	http_state = HTTP_WAIT_FOR_PARA;
 801f55e:	4b08      	ldr	r3, [pc, #32]	; (801f580 <HTTP_Para+0x54>)
 801f560:	2203      	movs	r2, #3
 801f562:	701a      	strb	r2, [r3, #0]
}
 801f564:	bf00      	nop
 801f566:	bd80      	pop	{r7, pc}
 801f568:	20000096 	.word	0x20000096
 801f56c:	20000097 	.word	0x20000097
 801f570:	080266e0 	.word	0x080266e0
 801f574:	20003694 	.word	0x20003694
 801f578:	20002670 	.word	0x20002670
 801f57c:	08026728 	.word	0x08026728
 801f580:	2000029b 	.word	0x2000029b

0801f584 <HTTP_Wait_For_Para>:
/**
 * HTTP_Wait_For_Para()
 * @brief This is function for waiting respone from  HTTP_PARA state
 * If AT_Result is AT_OK so switch to HTTP_ACTION else it's AT_ERROR so switch to HTTP_MAX_STATE
 */
void HTTP_Wait_For_Para(){
 801f584:	b580      	push	{r7, lr}
 801f586:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_OK);
	switch (Get_AT_Result()){
 801f588:	f001 ff08 	bl	802139c <Get_AT_Result>
 801f58c:	4603      	mov	r3, r0
 801f58e:	2b00      	cmp	r3, #0
 801f590:	d002      	beq.n	801f598 <HTTP_Wait_For_Para+0x14>
 801f592:	2b01      	cmp	r3, #1
 801f594:	d006      	beq.n	801f5a4 <HTTP_Wait_For_Para+0x20>
		case AT_ERROR:
			Clear_AT_Result();
			http_state=HTTP_MAX_STATE;
			break;
		default:
			break;
 801f596:	e00b      	b.n	801f5b0 <HTTP_Wait_For_Para+0x2c>
			Clear_AT_Result();
 801f598:	f001 ff0a 	bl	80213b0 <Clear_AT_Result>
			http_state=HTTP_ACTION;
 801f59c:	4b05      	ldr	r3, [pc, #20]	; (801f5b4 <HTTP_Wait_For_Para+0x30>)
 801f59e:	2204      	movs	r2, #4
 801f5a0:	701a      	strb	r2, [r3, #0]
			break;
 801f5a2:	e005      	b.n	801f5b0 <HTTP_Wait_For_Para+0x2c>
			Clear_AT_Result();
 801f5a4:	f001 ff04 	bl	80213b0 <Clear_AT_Result>
			http_state=HTTP_MAX_STATE;
 801f5a8:	4b02      	ldr	r3, [pc, #8]	; (801f5b4 <HTTP_Wait_For_Para+0x30>)
 801f5aa:	220b      	movs	r2, #11
 801f5ac:	701a      	strb	r2, [r3, #0]
			break;
 801f5ae:	bf00      	nop
	}
}
 801f5b0:	bf00      	nop
 801f5b2:	bd80      	pop	{r7, pc}
 801f5b4:	2000029b 	.word	0x2000029b

0801f5b8 <HTTP_Action>:
/**
 * HTTP_Action()
 * @brief This is function for create request with method : GET,POST,PUT
 * Passing 0 :GET ,1:POST ,...
 */
void HTTP_Action(){
 801f5b8:	b580      	push	{r7, lr}
 801f5ba:	af00      	add	r7, sp, #0
//	Clear_Reiceive_Buffer();
	if (default_atcommand) {
 801f5bc:	4b0c      	ldr	r3, [pc, #48]	; (801f5f0 <HTTP_Action+0x38>)
 801f5be:	781b      	ldrb	r3, [r3, #0]
 801f5c0:	2b00      	cmp	r3, #0
 801f5c2:	d003      	beq.n	801f5cc <HTTP_Action+0x14>
		sprintf(http_at_command,"AT+HTTPACTION=0\r\n");
 801f5c4:	490b      	ldr	r1, [pc, #44]	; (801f5f4 <HTTP_Action+0x3c>)
 801f5c6:	480c      	ldr	r0, [pc, #48]	; (801f5f8 <HTTP_Action+0x40>)
 801f5c8:	f006 fab8 	bl	8025b3c <siprintf>
	}
	UART_SIM7600_Transmit((uint8_t*)http_at_command);
 801f5cc:	480a      	ldr	r0, [pc, #40]	; (801f5f8 <HTTP_Action+0x40>)
 801f5ce:	f7ff fd9f 	bl	801f110 <UART_SIM7600_Transmit>
	Clear_Http_Command();
 801f5d2:	f000 ff29 	bl	8020428 <Clear_Http_Command>
	Clear_Http_Timeout_Flag();
 801f5d6:	f000 f9f1 	bl	801f9bc <Clear_Http_Timeout_Flag>
	SCH_Add_Task(Set_Http_Timeout_Flag, ACTION_TIMEOUT, 0);
 801f5da:	2200      	movs	r2, #0
 801f5dc:	21c8      	movs	r1, #200	; 0xc8
 801f5de:	4807      	ldr	r0, [pc, #28]	; (801f5fc <HTTP_Action+0x44>)
 801f5e0:	f001 ff32 	bl	8021448 <SCH_Add_Task>
	http_state = HTTP_WAIT_FOR_ACTION;
 801f5e4:	4b06      	ldr	r3, [pc, #24]	; (801f600 <HTTP_Action+0x48>)
 801f5e6:	2205      	movs	r2, #5
 801f5e8:	701a      	strb	r2, [r3, #0]
}
 801f5ea:	bf00      	nop
 801f5ec:	bd80      	pop	{r7, pc}
 801f5ee:	bf00      	nop
 801f5f0:	20000096 	.word	0x20000096
 801f5f4:	08026770 	.word	0x08026770
 801f5f8:	20003694 	.word	0x20003694
 801f5fc:	0801f9a5 	.word	0x0801f9a5
 801f600:	2000029b 	.word	0x2000029b

0801f604 <HTTP_Wait_For_Action>:
 * HTTP_Wait_For_Action()
 * @brief This is function for waiting HTTP_ACTION respone
 * If AT_Result is AT_OK so switch to HTTP_READ to read HTTP Respone body
 * else AT_ERROR so switch to HTTP_MAX_STATE to reset Simcom7600
 */
void HTTP_Wait_For_Action(){
 801f604:	b580      	push	{r7, lr}
 801f606:	af00      	add	r7, sp, #0
	if(is_Http_TimeOutFlag()){
 801f608:	f000 f9c2 	bl	801f990 <is_Http_TimeOutFlag>
 801f60c:	4603      	mov	r3, r0
 801f60e:	2b00      	cmp	r3, #0
 801f610:	d035      	beq.n	801f67e <HTTP_Wait_For_Action+0x7a>
//		Wait_For_Respone(AT_OK);
		switch (Get_AT_Result()){
 801f612:	f001 fec3 	bl	802139c <Get_AT_Result>
 801f616:	4603      	mov	r3, r0
 801f618:	2b05      	cmp	r3, #5
 801f61a:	d009      	beq.n	801f630 <HTTP_Wait_For_Action+0x2c>
 801f61c:	2b05      	cmp	r3, #5
 801f61e:	dc30      	bgt.n	801f682 <HTTP_Wait_For_Action+0x7e>
 801f620:	2b00      	cmp	r3, #0
 801f622:	d002      	beq.n	801f62a <HTTP_Wait_For_Action+0x26>
 801f624:	2b01      	cmp	r3, #1
 801f626:	d024      	beq.n	801f672 <HTTP_Wait_For_Action+0x6e>
			case AT_ERROR:
				Clear_AT_Result();
				http_state = HTTP_MAX_STATE;
				break;
			default:
				break;
 801f628:	e02b      	b.n	801f682 <HTTP_Wait_For_Action+0x7e>
				Clear_AT_Result();
 801f62a:	f001 fec1 	bl	80213b0 <Clear_AT_Result>
				break;
 801f62e:	e02b      	b.n	801f688 <HTTP_Wait_For_Action+0x84>
				if(HTTP_Get_Content_Length()){
 801f630:	f000 fea6 	bl	8020380 <HTTP_Get_Content_Length>
 801f634:	4603      	mov	r3, r0
 801f636:	2b00      	cmp	r3, #0
 801f638:	d025      	beq.n	801f686 <HTTP_Wait_For_Action+0x82>
					http_response_remain = HTTP_Return_Content_Length();
 801f63a:	f000 ff01 	bl	8020440 <HTTP_Return_Content_Length>
 801f63e:	4603      	mov	r3, r0
 801f640:	4a12      	ldr	r2, [pc, #72]	; (801f68c <HTTP_Wait_For_Action+0x88>)
 801f642:	6013      	str	r3, [r2, #0]
					firmware_size = http_response_remain;
 801f644:	4b11      	ldr	r3, [pc, #68]	; (801f68c <HTTP_Wait_For_Action+0x88>)
 801f646:	681b      	ldr	r3, [r3, #0]
 801f648:	4a11      	ldr	r2, [pc, #68]	; (801f690 <HTTP_Wait_For_Action+0x8c>)
 801f64a:	6013      	str	r3, [r2, #0]
					content_length = 0;
 801f64c:	4b11      	ldr	r3, [pc, #68]	; (801f694 <HTTP_Wait_For_Action+0x90>)
 801f64e:	2200      	movs	r2, #0
 801f650:	601a      	str	r2, [r3, #0]
					sprintf(logMsg,"\r\n%d\r\n",http_response_remain);
 801f652:	4b0e      	ldr	r3, [pc, #56]	; (801f68c <HTTP_Wait_For_Action+0x88>)
 801f654:	681b      	ldr	r3, [r3, #0]
 801f656:	461a      	mov	r2, r3
 801f658:	490f      	ldr	r1, [pc, #60]	; (801f698 <HTTP_Wait_For_Action+0x94>)
 801f65a:	4810      	ldr	r0, [pc, #64]	; (801f69c <HTTP_Wait_For_Action+0x98>)
 801f65c:	f006 fa6e 	bl	8025b3c <siprintf>
					LOG(logMsg);
 801f660:	480e      	ldr	r0, [pc, #56]	; (801f69c <HTTP_Wait_For_Action+0x98>)
 801f662:	f7ff fdef 	bl	801f244 <UART_DEBUG_Transmit>
					Clear_AT_Result();
 801f666:	f001 fea3 	bl	80213b0 <Clear_AT_Result>
					http_state = HTTP_READ;
 801f66a:	4b0d      	ldr	r3, [pc, #52]	; (801f6a0 <HTTP_Wait_For_Action+0x9c>)
 801f66c:	2206      	movs	r2, #6
 801f66e:	701a      	strb	r2, [r3, #0]
				break;
 801f670:	e009      	b.n	801f686 <HTTP_Wait_For_Action+0x82>
				Clear_AT_Result();
 801f672:	f001 fe9d 	bl	80213b0 <Clear_AT_Result>
				http_state = HTTP_MAX_STATE;
 801f676:	4b0a      	ldr	r3, [pc, #40]	; (801f6a0 <HTTP_Wait_For_Action+0x9c>)
 801f678:	220b      	movs	r2, #11
 801f67a:	701a      	strb	r2, [r3, #0]
				break;
 801f67c:	e004      	b.n	801f688 <HTTP_Wait_For_Action+0x84>
		}
	}
 801f67e:	bf00      	nop
 801f680:	e002      	b.n	801f688 <HTTP_Wait_For_Action+0x84>
				break;
 801f682:	bf00      	nop
 801f684:	e000      	b.n	801f688 <HTTP_Wait_For_Action+0x84>
				break;
 801f686:	bf00      	nop
}
 801f688:	bf00      	nop
 801f68a:	bd80      	pop	{r7, pc}
 801f68c:	200002a0 	.word	0x200002a0
 801f690:	200002ac 	.word	0x200002ac
 801f694:	20000294 	.word	0x20000294
 801f698:	08026784 	.word	0x08026784
 801f69c:	200040c0 	.word	0x200040c0
 801f6a0:	2000029b 	.word	0x2000029b

0801f6a4 <HTTP_Read>:

/**
 * HTTP_Read()
 * @brief This is function for read HTTP respone body, passing for AT number of read data. Default is MAX_HTTP_BODY = 400
 */
void HTTP_Read(){
 801f6a4:	b580      	push	{r7, lr}
 801f6a6:	b082      	sub	sp, #8
 801f6a8:	af00      	add	r7, sp, #0
	uint32_t read_size;
	if(fota_check_version){
 801f6aa:	4b4d      	ldr	r3, [pc, #308]	; (801f7e0 <HTTP_Read+0x13c>)
 801f6ac:	781b      	ldrb	r3, [r3, #0]
 801f6ae:	2b00      	cmp	r3, #0
 801f6b0:	d003      	beq.n	801f6ba <HTTP_Read+0x16>
		read_size = http_response_remain;
 801f6b2:	4b4c      	ldr	r3, [pc, #304]	; (801f7e4 <HTTP_Read+0x140>)
 801f6b4:	681b      	ldr	r3, [r3, #0]
 801f6b6:	607b      	str	r3, [r7, #4]
 801f6b8:	e05e      	b.n	801f778 <HTTP_Read+0xd4>
	}
	else{
		static uint8_t num_show_lcd = 0;
		if(http_response_remain == 0){
 801f6ba:	4b4a      	ldr	r3, [pc, #296]	; (801f7e4 <HTTP_Read+0x140>)
 801f6bc:	681b      	ldr	r3, [r3, #0]
 801f6be:	2b00      	cmp	r3, #0
 801f6c0:	d10b      	bne.n	801f6da <HTTP_Read+0x36>
			sprintf(logMsg,"Complete 100%");
 801f6c2:	4949      	ldr	r1, [pc, #292]	; (801f7e8 <HTTP_Read+0x144>)
 801f6c4:	4849      	ldr	r0, [pc, #292]	; (801f7ec <HTTP_Read+0x148>)
 801f6c6:	f006 fa39 	bl	8025b3c <siprintf>
			Lcd_Clear_Display();
 801f6ca:	f7fe ffe5 	bl	801e698 <Lcd_Clear_Display>
			Lcd_Show_String(logMsg, 0, 0);
 801f6ce:	2200      	movs	r2, #0
 801f6d0:	2100      	movs	r1, #0
 801f6d2:	4846      	ldr	r0, [pc, #280]	; (801f7ec <HTTP_Read+0x148>)
 801f6d4:	f7fe fff8 	bl	801e6c8 <Lcd_Show_String>
 801f6d8:	e030      	b.n	801f73c <HTTP_Read+0x98>
		}
		else if((firmware_size - http_response_remain) > 10240 * num_show_lcd){
 801f6da:	4b45      	ldr	r3, [pc, #276]	; (801f7f0 <HTTP_Read+0x14c>)
 801f6dc:	681a      	ldr	r2, [r3, #0]
 801f6de:	4b41      	ldr	r3, [pc, #260]	; (801f7e4 <HTTP_Read+0x140>)
 801f6e0:	681b      	ldr	r3, [r3, #0]
 801f6e2:	1ad2      	subs	r2, r2, r3
 801f6e4:	4b43      	ldr	r3, [pc, #268]	; (801f7f4 <HTTP_Read+0x150>)
 801f6e6:	781b      	ldrb	r3, [r3, #0]
 801f6e8:	4619      	mov	r1, r3
 801f6ea:	460b      	mov	r3, r1
 801f6ec:	009b      	lsls	r3, r3, #2
 801f6ee:	440b      	add	r3, r1
 801f6f0:	02db      	lsls	r3, r3, #11
 801f6f2:	429a      	cmp	r2, r3
 801f6f4:	d922      	bls.n	801f73c <HTTP_Read+0x98>
			complete_percent = (firmware_size- http_response_remain) * 100 / firmware_size;
 801f6f6:	4b3e      	ldr	r3, [pc, #248]	; (801f7f0 <HTTP_Read+0x14c>)
 801f6f8:	681a      	ldr	r2, [r3, #0]
 801f6fa:	4b3a      	ldr	r3, [pc, #232]	; (801f7e4 <HTTP_Read+0x140>)
 801f6fc:	681b      	ldr	r3, [r3, #0]
 801f6fe:	1ad3      	subs	r3, r2, r3
 801f700:	2264      	movs	r2, #100	; 0x64
 801f702:	fb02 f203 	mul.w	r2, r2, r3
 801f706:	4b3a      	ldr	r3, [pc, #232]	; (801f7f0 <HTTP_Read+0x14c>)
 801f708:	681b      	ldr	r3, [r3, #0]
 801f70a:	fbb2 f3f3 	udiv	r3, r2, r3
 801f70e:	b2da      	uxtb	r2, r3
 801f710:	4b39      	ldr	r3, [pc, #228]	; (801f7f8 <HTTP_Read+0x154>)
 801f712:	701a      	strb	r2, [r3, #0]
			sprintf(logMsg,"Complete %ld%", complete_percent);
 801f714:	4b38      	ldr	r3, [pc, #224]	; (801f7f8 <HTTP_Read+0x154>)
 801f716:	781b      	ldrb	r3, [r3, #0]
 801f718:	461a      	mov	r2, r3
 801f71a:	4938      	ldr	r1, [pc, #224]	; (801f7fc <HTTP_Read+0x158>)
 801f71c:	4833      	ldr	r0, [pc, #204]	; (801f7ec <HTTP_Read+0x148>)
 801f71e:	f006 fa0d 	bl	8025b3c <siprintf>
			Lcd_Clear_Display();
 801f722:	f7fe ffb9 	bl	801e698 <Lcd_Clear_Display>
			Lcd_Show_String(logMsg, 0, 0);
 801f726:	2200      	movs	r2, #0
 801f728:	2100      	movs	r1, #0
 801f72a:	4830      	ldr	r0, [pc, #192]	; (801f7ec <HTTP_Read+0x148>)
 801f72c:	f7fe ffcc 	bl	801e6c8 <Lcd_Show_String>
			num_show_lcd ++;
 801f730:	4b30      	ldr	r3, [pc, #192]	; (801f7f4 <HTTP_Read+0x150>)
 801f732:	781b      	ldrb	r3, [r3, #0]
 801f734:	3301      	adds	r3, #1
 801f736:	b2da      	uxtb	r2, r3
 801f738:	4b2e      	ldr	r3, [pc, #184]	; (801f7f4 <HTTP_Read+0x150>)
 801f73a:	701a      	strb	r2, [r3, #0]
		}
		if(http_response_remain > (FIRMWARE_READ_SIZE_PER_TIME)){
 801f73c:	4b29      	ldr	r3, [pc, #164]	; (801f7e4 <HTTP_Read+0x140>)
 801f73e:	681b      	ldr	r3, [r3, #0]
 801f740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f744:	d909      	bls.n	801f75a <HTTP_Read+0xb6>
			read_size = FIRMWARE_READ_SIZE_PER_TIME;
 801f746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f74a:	607b      	str	r3, [r7, #4]
			http_response_remain = http_response_remain -  (FIRMWARE_READ_SIZE_PER_TIME);
 801f74c:	4b25      	ldr	r3, [pc, #148]	; (801f7e4 <HTTP_Read+0x140>)
 801f74e:	681b      	ldr	r3, [r3, #0]
 801f750:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801f754:	4a23      	ldr	r2, [pc, #140]	; (801f7e4 <HTTP_Read+0x140>)
 801f756:	6013      	str	r3, [r2, #0]
 801f758:	e00e      	b.n	801f778 <HTTP_Read+0xd4>
		}
		else if (http_response_remain > 0 && http_response_remain < (FIRMWARE_READ_SIZE_PER_TIME)){
 801f75a:	4b22      	ldr	r3, [pc, #136]	; (801f7e4 <HTTP_Read+0x140>)
 801f75c:	681b      	ldr	r3, [r3, #0]
 801f75e:	2b00      	cmp	r3, #0
 801f760:	d00a      	beq.n	801f778 <HTTP_Read+0xd4>
 801f762:	4b20      	ldr	r3, [pc, #128]	; (801f7e4 <HTTP_Read+0x140>)
 801f764:	681b      	ldr	r3, [r3, #0]
 801f766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f76a:	d205      	bcs.n	801f778 <HTTP_Read+0xd4>
			read_size = http_response_remain;
 801f76c:	4b1d      	ldr	r3, [pc, #116]	; (801f7e4 <HTTP_Read+0x140>)
 801f76e:	681b      	ldr	r3, [r3, #0]
 801f770:	607b      	str	r3, [r7, #4]
			http_response_remain = 0;
 801f772:	4b1c      	ldr	r3, [pc, #112]	; (801f7e4 <HTTP_Read+0x140>)
 801f774:	2200      	movs	r2, #0
 801f776:	601a      	str	r2, [r3, #0]
		}
	}
	if (default_atcommand) {
 801f778:	4b21      	ldr	r3, [pc, #132]	; (801f800 <HTTP_Read+0x15c>)
 801f77a:	781b      	ldrb	r3, [r3, #0]
 801f77c:	2b00      	cmp	r3, #0
 801f77e:	d004      	beq.n	801f78a <HTTP_Read+0xe6>
		sprintf(http_at_command,"AT+HTTPREAD=0,%d\r\n",read_size);
 801f780:	687a      	ldr	r2, [r7, #4]
 801f782:	4920      	ldr	r1, [pc, #128]	; (801f804 <HTTP_Read+0x160>)
 801f784:	4820      	ldr	r0, [pc, #128]	; (801f808 <HTTP_Read+0x164>)
 801f786:	f006 f9d9 	bl	8025b3c <siprintf>
	}

	sprintf(logMsg,"http_response_remain: %ld\r\n",http_response_remain);
 801f78a:	4b16      	ldr	r3, [pc, #88]	; (801f7e4 <HTTP_Read+0x140>)
 801f78c:	681b      	ldr	r3, [r3, #0]
 801f78e:	461a      	mov	r2, r3
 801f790:	491e      	ldr	r1, [pc, #120]	; (801f80c <HTTP_Read+0x168>)
 801f792:	4816      	ldr	r0, [pc, #88]	; (801f7ec <HTTP_Read+0x148>)
 801f794:	f006 f9d2 	bl	8025b3c <siprintf>
	LOG(logMsg);
 801f798:	4814      	ldr	r0, [pc, #80]	; (801f7ec <HTTP_Read+0x148>)
 801f79a:	f7ff fd53 	bl	801f244 <UART_DEBUG_Transmit>
	sprintf(logMsg,"firmware_index: %ld\r\n",firmware_index);
 801f79e:	4b1c      	ldr	r3, [pc, #112]	; (801f810 <HTTP_Read+0x16c>)
 801f7a0:	881b      	ldrh	r3, [r3, #0]
 801f7a2:	461a      	mov	r2, r3
 801f7a4:	491b      	ldr	r1, [pc, #108]	; (801f814 <HTTP_Read+0x170>)
 801f7a6:	4811      	ldr	r0, [pc, #68]	; (801f7ec <HTTP_Read+0x148>)
 801f7a8:	f006 f9c8 	bl	8025b3c <siprintf>
	LOG(logMsg);
 801f7ac:	480f      	ldr	r0, [pc, #60]	; (801f7ec <HTTP_Read+0x148>)
 801f7ae:	f7ff fd49 	bl	801f244 <UART_DEBUG_Transmit>
	UART_SIM7600_Transmit((uint8_t *)http_at_command);
 801f7b2:	4815      	ldr	r0, [pc, #84]	; (801f808 <HTTP_Read+0x164>)
 801f7b4:	f7ff fcac 	bl	801f110 <UART_SIM7600_Transmit>
	Clear_Http_Timeout_Flag();
 801f7b8:	f000 f900 	bl	801f9bc <Clear_Http_Timeout_Flag>
	SCH_Add_Task(Set_Http_Timeout_Flag, 100, 0);
 801f7bc:	2200      	movs	r2, #0
 801f7be:	2164      	movs	r1, #100	; 0x64
 801f7c0:	4815      	ldr	r0, [pc, #84]	; (801f818 <HTTP_Read+0x174>)
 801f7c2:	f001 fe41 	bl	8021448 <SCH_Add_Task>
	Clear_Http_Command();
 801f7c6:	f000 fe2f 	bl	8020428 <Clear_Http_Command>
	HAL_Delay(100);
 801f7ca:	2064      	movs	r0, #100	; 0x64
 801f7cc:	f002 fdb8 	bl	8022340 <HAL_Delay>
	http_state = HTTP_WAIT_FOR_READ;
 801f7d0:	4b12      	ldr	r3, [pc, #72]	; (801f81c <HTTP_Read+0x178>)
 801f7d2:	2207      	movs	r2, #7
 801f7d4:	701a      	strb	r2, [r3, #0]
}
 801f7d6:	bf00      	nop
 801f7d8:	3708      	adds	r7, #8
 801f7da:	46bd      	mov	sp, r7
 801f7dc:	bd80      	pop	{r7, pc}
 801f7de:	bf00      	nop
 801f7e0:	20000097 	.word	0x20000097
 801f7e4:	200002a0 	.word	0x200002a0
 801f7e8:	0802678c 	.word	0x0802678c
 801f7ec:	200040c0 	.word	0x200040c0
 801f7f0:	200002ac 	.word	0x200002ac
 801f7f4:	200002ba 	.word	0x200002ba
 801f7f8:	20005bb5 	.word	0x20005bb5
 801f7fc:	0802679c 	.word	0x0802679c
 801f800:	20000096 	.word	0x20000096
 801f804:	080267ac 	.word	0x080267ac
 801f808:	20003694 	.word	0x20003694
 801f80c:	080267c0 	.word	0x080267c0
 801f810:	200002aa 	.word	0x200002aa
 801f814:	080267dc 	.word	0x080267dc
 801f818:	0801f9a5 	.word	0x0801f9a5
 801f81c:	2000029b 	.word	0x2000029b

0801f820 <HTTP_Wait_For_Read>:
 * else if AT_Result = AT_ERROR switch to HTTP_MAX_STATE to reset Simcom7600
 */
char log[50];
uint32_t firmware_index_end;
extern Firmware_Data_State firmware_state;
void HTTP_Wait_For_Read(){
 801f820:	b580      	push	{r7, lr}
 801f822:	b082      	sub	sp, #8
 801f824:	af00      	add	r7, sp, #0
	if(fota_check_version){
 801f826:	4b34      	ldr	r3, [pc, #208]	; (801f8f8 <HTTP_Wait_For_Read+0xd8>)
 801f828:	781b      	ldrb	r3, [r3, #0]
 801f82a:	2b00      	cmp	r3, #0
 801f82c:	d014      	beq.n	801f858 <HTTP_Wait_For_Read+0x38>
		FlagStatus flag_ret;
		switch (Get_AT_Result()) {
 801f82e:	f001 fdb5 	bl	802139c <Get_AT_Result>
 801f832:	4603      	mov	r3, r0
 801f834:	2b00      	cmp	r3, #0
 801f836:	d156      	bne.n	801f8e6 <HTTP_Wait_For_Read+0xc6>
			case AT_OK:
				flag_ret = HTTP_Firmware_Version();
 801f838:	f000 f8cc 	bl	801f9d4 <HTTP_Firmware_Version>
 801f83c:	4603      	mov	r3, r0
 801f83e:	71fb      	strb	r3, [r7, #7]
				if(flag_ret){
 801f840:	79fb      	ldrb	r3, [r7, #7]
 801f842:	2b00      	cmp	r3, #0
 801f844:	d051      	beq.n	801f8ea <HTTP_Wait_For_Read+0xca>
					fota_check_version = RESET;
 801f846:	4b2c      	ldr	r3, [pc, #176]	; (801f8f8 <HTTP_Wait_For_Read+0xd8>)
 801f848:	2200      	movs	r2, #0
 801f84a:	701a      	strb	r2, [r3, #0]
					Clear_AT_Result();
 801f84c:	f001 fdb0 	bl	80213b0 <Clear_AT_Result>
					http_state = HTTP_PARA;
 801f850:	4b2a      	ldr	r3, [pc, #168]	; (801f8fc <HTTP_Wait_For_Read+0xdc>)
 801f852:	2202      	movs	r2, #2
 801f854:	701a      	strb	r2, [r3, #0]
					return;
 801f856:	e04c      	b.n	801f8f2 <HTTP_Wait_For_Read+0xd2>
			default:
				break;
		}
	}
	else{
		switch (Get_AT_Result()) {
 801f858:	f001 fda0 	bl	802139c <Get_AT_Result>
 801f85c:	4603      	mov	r3, r0
 801f85e:	2b00      	cmp	r3, #0
 801f860:	d145      	bne.n	801f8ee <HTTP_Wait_For_Read+0xce>
			case AT_OK:
				firmware_state = HTTP_Firmware_Data();
 801f862:	f000 f997 	bl	801fb94 <HTTP_Firmware_Data>
 801f866:	4603      	mov	r3, r0
 801f868:	461a      	mov	r2, r3
 801f86a:	4b25      	ldr	r3, [pc, #148]	; (801f900 <HTTP_Wait_For_Read+0xe0>)
 801f86c:	701a      	strb	r2, [r3, #0]
				switch (firmware_state) {
 801f86e:	4b24      	ldr	r3, [pc, #144]	; (801f900 <HTTP_Wait_For_Read+0xe0>)
 801f870:	781b      	ldrb	r3, [r3, #0]
 801f872:	2b03      	cmp	r3, #3
 801f874:	d835      	bhi.n	801f8e2 <HTTP_Wait_For_Read+0xc2>
 801f876:	a201      	add	r2, pc, #4	; (adr r2, 801f87c <HTTP_Wait_For_Read+0x5c>)
 801f878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f87c:	0801f88d 	.word	0x0801f88d
 801f880:	0801f8e3 	.word	0x0801f8e3
 801f884:	0801f8b3 	.word	0x0801f8b3
 801f888:	0801f8cb 	.word	0x0801f8cb
					case DONE:
						if(http_response_remain == 0){
 801f88c:	4b1d      	ldr	r3, [pc, #116]	; (801f904 <HTTP_Wait_For_Read+0xe4>)
 801f88e:	681b      	ldr	r3, [r3, #0]
 801f890:	2b00      	cmp	r3, #0
 801f892:	d108      	bne.n	801f8a6 <HTTP_Wait_For_Read+0x86>
							LOG("\r\nJump To Current Firmware\r\n");
 801f894:	481c      	ldr	r0, [pc, #112]	; (801f908 <HTTP_Wait_For_Read+0xe8>)
 801f896:	f7ff fcd5 	bl	801f244 <UART_DEBUG_Transmit>
							Update_Firmware_Success();
 801f89a:	f002 f885 	bl	80219a8 <Update_Firmware_Success>
							http_state = HTTP_DONE;
 801f89e:	4b17      	ldr	r3, [pc, #92]	; (801f8fc <HTTP_Wait_For_Read+0xdc>)
 801f8a0:	220a      	movs	r2, #10
 801f8a2:	701a      	strb	r2, [r3, #0]
						}
						else{
							Clear_AT_Result();
							http_state = HTTP_READ;
						}
						break;
 801f8a4:	e01e      	b.n	801f8e4 <HTTP_Wait_For_Read+0xc4>
							Clear_AT_Result();
 801f8a6:	f001 fd83 	bl	80213b0 <Clear_AT_Result>
							http_state = HTTP_READ;
 801f8aa:	4b14      	ldr	r3, [pc, #80]	; (801f8fc <HTTP_Wait_For_Read+0xdc>)
 801f8ac:	2206      	movs	r2, #6
 801f8ae:	701a      	strb	r2, [r3, #0]
						break;
 801f8b0:	e018      	b.n	801f8e4 <HTTP_Wait_For_Read+0xc4>
					case PROCESSING:
						/*Continuous Firmware Process*/
						break;
					case ERR_CHECKSUM:
						LOG("\r\nChecksum Error\r\n");
 801f8b2:	4816      	ldr	r0, [pc, #88]	; (801f90c <HTTP_Wait_For_Read+0xec>)
 801f8b4:	f7ff fcc6 	bl	801f244 <UART_DEBUG_Transmit>
						LOG("\r\nJump To Factory Firmware\r\n");
 801f8b8:	4815      	ldr	r0, [pc, #84]	; (801f910 <HTTP_Wait_For_Read+0xf0>)
 801f8ba:	f7ff fcc3 	bl	801f244 <UART_DEBUG_Transmit>
//						Jump_To_Factory_Firmware();
						Update_Firmware_Failed();
 801f8be:	f002 f867 	bl	8021990 <Update_Firmware_Failed>
						http_state = HTTP_DONE;
 801f8c2:	4b0e      	ldr	r3, [pc, #56]	; (801f8fc <HTTP_Wait_For_Read+0xdc>)
 801f8c4:	220a      	movs	r2, #10
 801f8c6:	701a      	strb	r2, [r3, #0]
						break;
 801f8c8:	e00c      	b.n	801f8e4 <HTTP_Wait_For_Read+0xc4>

					case ERR_CURRENT_FIRMWARE_ADDRESS_WRONG:
						LOG("\r\nCURRENT FIRMWARE ADDRESS WRONG\r\n");
 801f8ca:	4812      	ldr	r0, [pc, #72]	; (801f914 <HTTP_Wait_For_Read+0xf4>)
 801f8cc:	f7ff fcba 	bl	801f244 <UART_DEBUG_Transmit>
						LOG("\r\nJump To Current Firmware\r\n");
 801f8d0:	480d      	ldr	r0, [pc, #52]	; (801f908 <HTTP_Wait_For_Read+0xe8>)
 801f8d2:	f7ff fcb7 	bl	801f244 <UART_DEBUG_Transmit>
//						Jump_To_Current_Firmware();
						Update_Firmware_Failed();
 801f8d6:	f002 f85b 	bl	8021990 <Update_Firmware_Failed>
						http_state = HTTP_DONE;
 801f8da:	4b08      	ldr	r3, [pc, #32]	; (801f8fc <HTTP_Wait_For_Read+0xdc>)
 801f8dc:	220a      	movs	r2, #10
 801f8de:	701a      	strb	r2, [r3, #0]
						break;
 801f8e0:	e000      	b.n	801f8e4 <HTTP_Wait_For_Read+0xc4>
					default:
						break;
 801f8e2:	bf00      	nop
//						Jump_To_Factory_Firmware();
//					}
//					Clear_AT_Result();
//					http_state = HTTP_READ;
//				}
				break;
 801f8e4:	e004      	b.n	801f8f0 <HTTP_Wait_For_Read+0xd0>
				break;
 801f8e6:	bf00      	nop
 801f8e8:	e002      	b.n	801f8f0 <HTTP_Wait_For_Read+0xd0>
				break;
 801f8ea:	bf00      	nop
 801f8ec:	e000      	b.n	801f8f0 <HTTP_Wait_For_Read+0xd0>
			default:
				break;
 801f8ee:	bf00      	nop
		}
	}
	return;
 801f8f0:	bf00      	nop
}
 801f8f2:	3708      	adds	r7, #8
 801f8f4:	46bd      	mov	sp, r7
 801f8f6:	bd80      	pop	{r7, pc}
 801f8f8:	20000097 	.word	0x20000097
 801f8fc:	2000029b 	.word	0x2000029b
 801f900:	20005bb4 	.word	0x20005bb4
 801f904:	200002a0 	.word	0x200002a0
 801f908:	080267f4 	.word	0x080267f4
 801f90c:	08026814 	.word	0x08026814
 801f910:	08026828 	.word	0x08026828
 801f914:	08026848 	.word	0x08026848

0801f918 <HTTP_Term>:

/**
 * HTTP_Term()
 * @brief This is function for terminaring HTTP Service
 */
void HTTP_Term(){
 801f918:	b580      	push	{r7, lr}
 801f91a:	af00      	add	r7, sp, #0
//	Clear_Reiceive_Buffer();
	if (default_atcommand) {
 801f91c:	4b08      	ldr	r3, [pc, #32]	; (801f940 <HTTP_Term+0x28>)
 801f91e:	781b      	ldrb	r3, [r3, #0]
 801f920:	2b00      	cmp	r3, #0
 801f922:	d003      	beq.n	801f92c <HTTP_Term+0x14>
		sprintf(http_at_command,"AT+HTTPTERM\r\n");
 801f924:	4907      	ldr	r1, [pc, #28]	; (801f944 <HTTP_Term+0x2c>)
 801f926:	4808      	ldr	r0, [pc, #32]	; (801f948 <HTTP_Term+0x30>)
 801f928:	f006 f908 	bl	8025b3c <siprintf>
	}
	UART_SIM7600_Transmit((uint8_t*)http_at_command);
 801f92c:	4806      	ldr	r0, [pc, #24]	; (801f948 <HTTP_Term+0x30>)
 801f92e:	f7ff fbef 	bl	801f110 <UART_SIM7600_Transmit>
	Clear_Http_Command();
 801f932:	f000 fd79 	bl	8020428 <Clear_Http_Command>
	http_state = HTTP_WAIT_FOR_TERM;
 801f936:	4b05      	ldr	r3, [pc, #20]	; (801f94c <HTTP_Term+0x34>)
 801f938:	2209      	movs	r2, #9
 801f93a:	701a      	strb	r2, [r3, #0]
}
 801f93c:	bf00      	nop
 801f93e:	bd80      	pop	{r7, pc}
 801f940:	20000096 	.word	0x20000096
 801f944:	0802686c 	.word	0x0802686c
 801f948:	20003694 	.word	0x20003694
 801f94c:	2000029b 	.word	0x2000029b

0801f950 <HTTP_Wait_For_Term>:
 * HTTP_Wait_For_Term()
 * @brief This is function for waiting HTTP_TERM state respone
 * If AT_Result is AT_OK so switch to HTTP_DONE
 * else switch to HTTP_MAX_STATE and reset Simcom7600
 */
void HTTP_Wait_For_Term(){
 801f950:	b580      	push	{r7, lr}
 801f952:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_OK);
	switch (Get_AT_Result()){
 801f954:	f001 fd22 	bl	802139c <Get_AT_Result>
 801f958:	4603      	mov	r3, r0
 801f95a:	2b00      	cmp	r3, #0
 801f95c:	d002      	beq.n	801f964 <HTTP_Wait_For_Term+0x14>
 801f95e:	2b01      	cmp	r3, #1
 801f960:	d006      	beq.n	801f970 <HTTP_Wait_For_Term+0x20>
		case AT_ERROR:
			Clear_AT_Result();
			http_state=HTTP_MAX_STATE;
			break;
		default:
			break;
 801f962:	e00b      	b.n	801f97c <HTTP_Wait_For_Term+0x2c>
			Clear_AT_Result();
 801f964:	f001 fd24 	bl	80213b0 <Clear_AT_Result>
			http_state=HTTP_INIT;
 801f968:	4b05      	ldr	r3, [pc, #20]	; (801f980 <HTTP_Wait_For_Term+0x30>)
 801f96a:	2200      	movs	r2, #0
 801f96c:	701a      	strb	r2, [r3, #0]
			break;
 801f96e:	e005      	b.n	801f97c <HTTP_Wait_For_Term+0x2c>
			Clear_AT_Result();
 801f970:	f001 fd1e 	bl	80213b0 <Clear_AT_Result>
			http_state=HTTP_MAX_STATE;
 801f974:	4b02      	ldr	r3, [pc, #8]	; (801f980 <HTTP_Wait_For_Term+0x30>)
 801f976:	220b      	movs	r2, #11
 801f978:	701a      	strb	r2, [r3, #0]
			break;
 801f97a:	bf00      	nop
	}
}
 801f97c:	bf00      	nop
 801f97e:	bd80      	pop	{r7, pc}
 801f980:	2000029b 	.word	0x2000029b

0801f984 <HTTP_Done>:

/**
 * HTTP_Done()
 * @brief This is function for waiting FSM get out of HTTP Operation
 */
void HTTP_Done(){
 801f984:	b480      	push	{r7}
 801f986:	af00      	add	r7, sp, #0
	return;
 801f988:	bf00      	nop
}
 801f98a:	46bd      	mov	sp, r7
 801f98c:	bc80      	pop	{r7}
 801f98e:	4770      	bx	lr

0801f990 <is_Http_TimeOutFlag>:
/**
 * is_Http_TimeOutFlag()
 * @brief Get http_timeout_flag
 * @return http_timeout_flag
 */
FlagStatus is_Http_TimeOutFlag(void){
 801f990:	b480      	push	{r7}
 801f992:	af00      	add	r7, sp, #0
	return http_timeout_flag;
 801f994:	4b02      	ldr	r3, [pc, #8]	; (801f9a0 <is_Http_TimeOutFlag+0x10>)
 801f996:	781b      	ldrb	r3, [r3, #0]
}
 801f998:	4618      	mov	r0, r3
 801f99a:	46bd      	mov	sp, r7
 801f99c:	bc80      	pop	{r7}
 801f99e:	4770      	bx	lr
 801f9a0:	20000095 	.word	0x20000095

0801f9a4 <Set_Http_Timeout_Flag>:

/**
 * Set_Http_Timeout_Flag()
 * @brief Set http_timeout_flag to SET
 */
void Set_Http_Timeout_Flag(void){
 801f9a4:	b480      	push	{r7}
 801f9a6:	af00      	add	r7, sp, #0
	http_timeout_flag = SET;
 801f9a8:	4b03      	ldr	r3, [pc, #12]	; (801f9b8 <Set_Http_Timeout_Flag+0x14>)
 801f9aa:	2201      	movs	r2, #1
 801f9ac:	701a      	strb	r2, [r3, #0]
}
 801f9ae:	bf00      	nop
 801f9b0:	46bd      	mov	sp, r7
 801f9b2:	bc80      	pop	{r7}
 801f9b4:	4770      	bx	lr
 801f9b6:	bf00      	nop
 801f9b8:	20000095 	.word	0x20000095

0801f9bc <Clear_Http_Timeout_Flag>:

/**
 * Clear_Http_Timeout_Flag()
 * @brief Clear http_timeout_flag to RESET
 */
void Clear_Http_Timeout_Flag(void){
 801f9bc:	b480      	push	{r7}
 801f9be:	af00      	add	r7, sp, #0
	http_timeout_flag = RESET;
 801f9c0:	4b03      	ldr	r3, [pc, #12]	; (801f9d0 <Clear_Http_Timeout_Flag+0x14>)
 801f9c2:	2200      	movs	r2, #0
 801f9c4:	701a      	strb	r2, [r3, #0]
}
 801f9c6:	bf00      	nop
 801f9c8:	46bd      	mov	sp, r7
 801f9ca:	bc80      	pop	{r7}
 801f9cc:	4770      	bx	lr
 801f9ce:	bf00      	nop
 801f9d0:	20000095 	.word	0x20000095

0801f9d4 <HTTP_Firmware_Version>:

uint8_t temp_version_name_buffer[TEMP_VERSION_BUFFER_LENGTH];
uint8_t temp_version_name_index = 0;
FlagStatus prepare_record_version_name = RESET;
FlagStatus start_record_version_name = RESET;
FlagStatus HTTP_Firmware_Version(){
 801f9d4:	b598      	push	{r3, r4, r7, lr}
 801f9d6:	af00      	add	r7, sp, #0
	if(UART_SIM7600_Received_Buffer_Available()){
 801f9d8:	f7ff fbc6 	bl	801f168 <UART_SIM7600_Received_Buffer_Available>
 801f9dc:	4603      	mov	r3, r0
 801f9de:	2b00      	cmp	r3, #0
 801f9e0:	d059      	beq.n	801fa96 <HTTP_Firmware_Version+0xc2>
		temp_version_name_buffer[temp_version_name_index] = UART_SIM7600_Read_Received_Buffer();
 801f9e2:	4b2e      	ldr	r3, [pc, #184]	; (801fa9c <HTTP_Firmware_Version+0xc8>)
 801f9e4:	781b      	ldrb	r3, [r3, #0]
 801f9e6:	461c      	mov	r4, r3
 801f9e8:	f7ff fbd4 	bl	801f194 <UART_SIM7600_Read_Received_Buffer>
 801f9ec:	4603      	mov	r3, r0
 801f9ee:	461a      	mov	r2, r3
 801f9f0:	4b2b      	ldr	r3, [pc, #172]	; (801faa0 <HTTP_Firmware_Version+0xcc>)
 801f9f2:	551a      	strb	r2, [r3, r4]
//		UART_DEBUG_Transmit_Size(temp_version_name_buffer + temp_version_name_index, 1);
		if(isReceiveData_New(temp_version_name_buffer, temp_version_name_index + 1, TEMP_VERSION_BUFFER_LENGTH, "+HTTPREAD: DATA")){
 801f9f4:	4b29      	ldr	r3, [pc, #164]	; (801fa9c <HTTP_Firmware_Version+0xc8>)
 801f9f6:	781b      	ldrb	r3, [r3, #0]
 801f9f8:	1c59      	adds	r1, r3, #1
 801f9fa:	4b2a      	ldr	r3, [pc, #168]	; (801faa4 <HTTP_Firmware_Version+0xd0>)
 801f9fc:	2264      	movs	r2, #100	; 0x64
 801f9fe:	4828      	ldr	r0, [pc, #160]	; (801faa0 <HTTP_Firmware_Version+0xcc>)
 801fa00:	f001 fb2e 	bl	8021060 <isReceiveData_New>
 801fa04:	4603      	mov	r3, r0
 801fa06:	2b00      	cmp	r3, #0
 801fa08:	d002      	beq.n	801fa10 <HTTP_Firmware_Version+0x3c>
			prepare_record_version_name = SET;
 801fa0a:	4b27      	ldr	r3, [pc, #156]	; (801faa8 <HTTP_Firmware_Version+0xd4>)
 801fa0c:	2201      	movs	r2, #1
 801fa0e:	701a      	strb	r2, [r3, #0]
		}
		if(prepare_record_version_name){
 801fa10:	4b25      	ldr	r3, [pc, #148]	; (801faa8 <HTTP_Firmware_Version+0xd4>)
 801fa12:	781b      	ldrb	r3, [r3, #0]
 801fa14:	2b00      	cmp	r3, #0
 801fa16:	d02e      	beq.n	801fa76 <HTTP_Firmware_Version+0xa2>
			if(start_record_version_name){
 801fa18:	4b24      	ldr	r3, [pc, #144]	; (801faac <HTTP_Firmware_Version+0xd8>)
 801fa1a:	781b      	ldrb	r3, [r3, #0]
 801fa1c:	2b00      	cmp	r3, #0
 801fa1e:	d01c      	beq.n	801fa5a <HTTP_Firmware_Version+0x86>
				//Check whether stop record version name
				if(temp_version_name_buffer[temp_version_name_index]=='\r'){
 801fa20:	4b1e      	ldr	r3, [pc, #120]	; (801fa9c <HTTP_Firmware_Version+0xc8>)
 801fa22:	781b      	ldrb	r3, [r3, #0]
 801fa24:	461a      	mov	r2, r3
 801fa26:	4b1e      	ldr	r3, [pc, #120]	; (801faa0 <HTTP_Firmware_Version+0xcc>)
 801fa28:	5c9b      	ldrb	r3, [r3, r2]
 801fa2a:	2b0d      	cmp	r3, #13
 801fa2c:	d107      	bne.n	801fa3e <HTTP_Firmware_Version+0x6a>
					start_record_version_name = RESET;
 801fa2e:	4b1f      	ldr	r3, [pc, #124]	; (801faac <HTTP_Firmware_Version+0xd8>)
 801fa30:	2200      	movs	r2, #0
 801fa32:	701a      	strb	r2, [r3, #0]
					prepare_record_version_name = RESET;
 801fa34:	4b1c      	ldr	r3, [pc, #112]	; (801faa8 <HTTP_Firmware_Version+0xd4>)
 801fa36:	2200      	movs	r2, #0
 801fa38:	701a      	strb	r2, [r3, #0]
					return SET;
 801fa3a:	2301      	movs	r3, #1
 801fa3c:	e02c      	b.n	801fa98 <HTTP_Firmware_Version+0xc4>
				}
				else{
					version[version_index++] = temp_version_name_buffer[temp_version_name_index];
 801fa3e:	4b17      	ldr	r3, [pc, #92]	; (801fa9c <HTTP_Firmware_Version+0xc8>)
 801fa40:	781b      	ldrb	r3, [r3, #0]
 801fa42:	4619      	mov	r1, r3
 801fa44:	4b1a      	ldr	r3, [pc, #104]	; (801fab0 <HTTP_Firmware_Version+0xdc>)
 801fa46:	781b      	ldrb	r3, [r3, #0]
 801fa48:	1c5a      	adds	r2, r3, #1
 801fa4a:	b2d0      	uxtb	r0, r2
 801fa4c:	4a18      	ldr	r2, [pc, #96]	; (801fab0 <HTTP_Firmware_Version+0xdc>)
 801fa4e:	7010      	strb	r0, [r2, #0]
 801fa50:	461a      	mov	r2, r3
 801fa52:	4b13      	ldr	r3, [pc, #76]	; (801faa0 <HTTP_Firmware_Version+0xcc>)
 801fa54:	5c59      	ldrb	r1, [r3, r1]
 801fa56:	4b17      	ldr	r3, [pc, #92]	; (801fab4 <HTTP_Firmware_Version+0xe0>)
 801fa58:	5499      	strb	r1, [r3, r2]
				}
			}
			if(isReceiveData_New(temp_version_name_buffer, temp_version_name_index + 1, TEMP_VERSION_BUFFER_LENGTH, "\r\n")){
 801fa5a:	4b10      	ldr	r3, [pc, #64]	; (801fa9c <HTTP_Firmware_Version+0xc8>)
 801fa5c:	781b      	ldrb	r3, [r3, #0]
 801fa5e:	1c59      	adds	r1, r3, #1
 801fa60:	4b15      	ldr	r3, [pc, #84]	; (801fab8 <HTTP_Firmware_Version+0xe4>)
 801fa62:	2264      	movs	r2, #100	; 0x64
 801fa64:	480e      	ldr	r0, [pc, #56]	; (801faa0 <HTTP_Firmware_Version+0xcc>)
 801fa66:	f001 fafb 	bl	8021060 <isReceiveData_New>
 801fa6a:	4603      	mov	r3, r0
 801fa6c:	2b00      	cmp	r3, #0
 801fa6e:	d002      	beq.n	801fa76 <HTTP_Firmware_Version+0xa2>
				start_record_version_name = SET;
 801fa70:	4b0e      	ldr	r3, [pc, #56]	; (801faac <HTTP_Firmware_Version+0xd8>)
 801fa72:	2201      	movs	r2, #1
 801fa74:	701a      	strb	r2, [r3, #0]
			}

		}
		temp_version_name_index = (temp_version_name_index + 1)% TEMP_VERSION_BUFFER_LENGTH;
 801fa76:	4b09      	ldr	r3, [pc, #36]	; (801fa9c <HTTP_Firmware_Version+0xc8>)
 801fa78:	781b      	ldrb	r3, [r3, #0]
 801fa7a:	3301      	adds	r3, #1
 801fa7c:	4a0f      	ldr	r2, [pc, #60]	; (801fabc <HTTP_Firmware_Version+0xe8>)
 801fa7e:	fb82 1203 	smull	r1, r2, r2, r3
 801fa82:	1151      	asrs	r1, r2, #5
 801fa84:	17da      	asrs	r2, r3, #31
 801fa86:	1a8a      	subs	r2, r1, r2
 801fa88:	2164      	movs	r1, #100	; 0x64
 801fa8a:	fb01 f202 	mul.w	r2, r1, r2
 801fa8e:	1a9a      	subs	r2, r3, r2
 801fa90:	b2d2      	uxtb	r2, r2
 801fa92:	4b02      	ldr	r3, [pc, #8]	; (801fa9c <HTTP_Firmware_Version+0xc8>)
 801fa94:	701a      	strb	r2, [r3, #0]
	}
	return RESET;
 801fa96:	2300      	movs	r3, #0
}
 801fa98:	4618      	mov	r0, r3
 801fa9a:	bd98      	pop	{r3, r4, r7, pc}
 801fa9c:	200002b0 	.word	0x200002b0
 801faa0:	2000405c 	.word	0x2000405c
 801faa4:	08026890 	.word	0x08026890
 801faa8:	200002b1 	.word	0x200002b1
 801faac:	200002b2 	.word	0x200002b2
 801fab0:	20000290 	.word	0x20000290
 801fab4:	20002670 	.word	0x20002670
 801fab8:	080268a0 	.word	0x080268a0
 801fabc:	51eb851f 	.word	0x51eb851f

0801fac0 <is_Firmware_Line_Data_Correct>:

/*
 * Line is: ":0101010101010 and checksum :01, last is "\r\n""
 * We ignore ':' character and calculate checksum from 01....010 and ignore checksum value
 */
FlagStatus is_Firmware_Line_Data_Correct(uint8_t *buffer, uint16_t buffer_len){
 801fac0:	b590      	push	{r4, r7, lr}
 801fac2:	b085      	sub	sp, #20
 801fac4:	af00      	add	r7, sp, #0
 801fac6:	6078      	str	r0, [r7, #4]
 801fac8:	460b      	mov	r3, r1
 801faca:	807b      	strh	r3, [r7, #2]
	static FlagStatus ret;
	checksum = 0;
 801facc:	4b2f      	ldr	r3, [pc, #188]	; (801fb8c <is_Firmware_Line_Data_Correct+0xcc>)
 801face:	2200      	movs	r2, #0
 801fad0:	701a      	strb	r2, [r3, #0]

	for (uint16_t var = 0; var < buffer_len - 3 - 2; var=var+2) {
 801fad2:	2300      	movs	r3, #0
 801fad4:	81fb      	strh	r3, [r7, #14]
 801fad6:	e01f      	b.n	801fb18 <is_Firmware_Line_Data_Correct+0x58>
//		sprintf(log,"%c-%c\r\n",buffer[var],buffer[var+1]);
//		LOG(log);
		checksum = checksum + (Char2Hex(buffer[var]) << 4) + Char2Hex(buffer[var+1]);
 801fad8:	89fb      	ldrh	r3, [r7, #14]
 801fada:	687a      	ldr	r2, [r7, #4]
 801fadc:	4413      	add	r3, r2
 801fade:	781b      	ldrb	r3, [r3, #0]
 801fae0:	4618      	mov	r0, r3
 801fae2:	f001 fb05 	bl	80210f0 <Char2Hex>
 801fae6:	4603      	mov	r3, r0
 801fae8:	b2db      	uxtb	r3, r3
 801faea:	011b      	lsls	r3, r3, #4
 801faec:	b2da      	uxtb	r2, r3
 801faee:	4b27      	ldr	r3, [pc, #156]	; (801fb8c <is_Firmware_Line_Data_Correct+0xcc>)
 801faf0:	781b      	ldrb	r3, [r3, #0]
 801faf2:	4413      	add	r3, r2
 801faf4:	b2dc      	uxtb	r4, r3
 801faf6:	89fb      	ldrh	r3, [r7, #14]
 801faf8:	3301      	adds	r3, #1
 801fafa:	687a      	ldr	r2, [r7, #4]
 801fafc:	4413      	add	r3, r2
 801fafe:	781b      	ldrb	r3, [r3, #0]
 801fb00:	4618      	mov	r0, r3
 801fb02:	f001 faf5 	bl	80210f0 <Char2Hex>
 801fb06:	4603      	mov	r3, r0
 801fb08:	b2db      	uxtb	r3, r3
 801fb0a:	4423      	add	r3, r4
 801fb0c:	b2da      	uxtb	r2, r3
 801fb0e:	4b1f      	ldr	r3, [pc, #124]	; (801fb8c <is_Firmware_Line_Data_Correct+0xcc>)
 801fb10:	701a      	strb	r2, [r3, #0]
	for (uint16_t var = 0; var < buffer_len - 3 - 2; var=var+2) {
 801fb12:	89fb      	ldrh	r3, [r7, #14]
 801fb14:	3302      	adds	r3, #2
 801fb16:	81fb      	strh	r3, [r7, #14]
 801fb18:	89fa      	ldrh	r2, [r7, #14]
 801fb1a:	887b      	ldrh	r3, [r7, #2]
 801fb1c:	3b05      	subs	r3, #5
 801fb1e:	429a      	cmp	r2, r3
 801fb20:	dbda      	blt.n	801fad8 <is_Firmware_Line_Data_Correct+0x18>
	}
	checksum =~checksum;
 801fb22:	4b1a      	ldr	r3, [pc, #104]	; (801fb8c <is_Firmware_Line_Data_Correct+0xcc>)
 801fb24:	781b      	ldrb	r3, [r3, #0]
 801fb26:	43db      	mvns	r3, r3
 801fb28:	b2da      	uxtb	r2, r3
 801fb2a:	4b18      	ldr	r3, [pc, #96]	; (801fb8c <is_Firmware_Line_Data_Correct+0xcc>)
 801fb2c:	701a      	strb	r2, [r3, #0]
	checksum += 1;
 801fb2e:	4b17      	ldr	r3, [pc, #92]	; (801fb8c <is_Firmware_Line_Data_Correct+0xcc>)
 801fb30:	781b      	ldrb	r3, [r3, #0]
 801fb32:	3301      	adds	r3, #1
 801fb34:	b2da      	uxtb	r2, r3
 801fb36:	4b15      	ldr	r3, [pc, #84]	; (801fb8c <is_Firmware_Line_Data_Correct+0xcc>)
 801fb38:	701a      	strb	r2, [r3, #0]
	uint8_t checksum_inline = (Char2Hex(buffer[buffer_len - 3 -2 ]) << 4) + Char2Hex(buffer[buffer_len -3-2 +1 ]);
 801fb3a:	887b      	ldrh	r3, [r7, #2]
 801fb3c:	3b05      	subs	r3, #5
 801fb3e:	687a      	ldr	r2, [r7, #4]
 801fb40:	4413      	add	r3, r2
 801fb42:	781b      	ldrb	r3, [r3, #0]
 801fb44:	4618      	mov	r0, r3
 801fb46:	f001 fad3 	bl	80210f0 <Char2Hex>
 801fb4a:	4603      	mov	r3, r0
 801fb4c:	b2db      	uxtb	r3, r3
 801fb4e:	011b      	lsls	r3, r3, #4
 801fb50:	b2dc      	uxtb	r4, r3
 801fb52:	887b      	ldrh	r3, [r7, #2]
 801fb54:	3b04      	subs	r3, #4
 801fb56:	687a      	ldr	r2, [r7, #4]
 801fb58:	4413      	add	r3, r2
 801fb5a:	781b      	ldrb	r3, [r3, #0]
 801fb5c:	4618      	mov	r0, r3
 801fb5e:	f001 fac7 	bl	80210f0 <Char2Hex>
 801fb62:	4603      	mov	r3, r0
 801fb64:	b2db      	uxtb	r3, r3
 801fb66:	4423      	add	r3, r4
 801fb68:	737b      	strb	r3, [r7, #13]
//	sprintf(log,"Check sum %x\r\n",checksum);
//	LOG(log);
//	sprintf(log,"Calculated Check sum %x\r\n",checksum_inline);
//	LOG(log);
	ret = (checksum == checksum_inline);
 801fb6a:	4b08      	ldr	r3, [pc, #32]	; (801fb8c <is_Firmware_Line_Data_Correct+0xcc>)
 801fb6c:	781b      	ldrb	r3, [r3, #0]
 801fb6e:	7b7a      	ldrb	r2, [r7, #13]
 801fb70:	429a      	cmp	r2, r3
 801fb72:	bf0c      	ite	eq
 801fb74:	2301      	moveq	r3, #1
 801fb76:	2300      	movne	r3, #0
 801fb78:	b2db      	uxtb	r3, r3
 801fb7a:	461a      	mov	r2, r3
 801fb7c:	4b04      	ldr	r3, [pc, #16]	; (801fb90 <is_Firmware_Line_Data_Correct+0xd0>)
 801fb7e:	701a      	strb	r2, [r3, #0]
	return ret;
 801fb80:	4b03      	ldr	r3, [pc, #12]	; (801fb90 <is_Firmware_Line_Data_Correct+0xd0>)
 801fb82:	781b      	ldrb	r3, [r3, #0]
}
 801fb84:	4618      	mov	r0, r3
 801fb86:	3714      	adds	r7, #20
 801fb88:	46bd      	mov	sp, r7
 801fb8a:	bd90      	pop	{r4, r7, pc}
 801fb8c:	2000029c 	.word	0x2000029c
 801fb90:	200002bb 	.word	0x200002bb

0801fb94 <HTTP_Firmware_Data>:
uint8_t temp_char;
char new_log[10];
FlagStatus first_http_read = SET;
uint32_t firmware_address_of_hexfile;
static FlagStatus get_2bytes_firmware_address = SET;
Firmware_Data_State HTTP_Firmware_Data(){
 801fb94:	b590      	push	{r4, r7, lr}
 801fb96:	b085      	sub	sp, #20
 801fb98:	af00      	add	r7, sp, #0
	 *  	"data": "0ABCDGEGGASD...
	 *  			ASDB12312512412...
	 *  			01231291512925192"
	 *  So We need seperate "new_version" and "checksum" field out of "data"
	 */
	if(UART_SIM7600_Received_Buffer_Available()){
 801fb9a:	f7ff fae5 	bl	801f168 <UART_SIM7600_Received_Buffer_Available>
 801fb9e:	4603      	mov	r3, r0
 801fba0:	2b00      	cmp	r3, #0
 801fba2:	f000 83c4 	beq.w	802032e <HTTP_Firmware_Data+0x79a>
		temp_at_response_buffer[temp_at_response_index] = UART_SIM7600_Read_Received_Buffer();
 801fba6:	4b8b      	ldr	r3, [pc, #556]	; (801fdd4 <HTTP_Firmware_Data+0x240>)
 801fba8:	881b      	ldrh	r3, [r3, #0]
 801fbaa:	461c      	mov	r4, r3
 801fbac:	f7ff faf2 	bl	801f194 <UART_SIM7600_Read_Received_Buffer>
 801fbb0:	4603      	mov	r3, r0
 801fbb2:	461a      	mov	r2, r3
 801fbb4:	4b88      	ldr	r3, [pc, #544]	; (801fdd8 <HTTP_Firmware_Data+0x244>)
 801fbb6:	551a      	strb	r2, [r3, r4]
//		UART_DEBUG_Transmit_Size(temp_at_response_buffer + temp_at_response_index, 1);
		//Check if end of SIM respond
		if(isReceiveData_New(temp_at_response_buffer, temp_at_response_index+1, LINE_BUFFER_LENGTH, "\r\n+HTTPREAD: 0")||
 801fbb8:	4b86      	ldr	r3, [pc, #536]	; (801fdd4 <HTTP_Firmware_Data+0x240>)
 801fbba:	881b      	ldrh	r3, [r3, #0]
 801fbbc:	1c59      	adds	r1, r3, #1
 801fbbe:	4b87      	ldr	r3, [pc, #540]	; (801fddc <HTTP_Firmware_Data+0x248>)
 801fbc0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801fbc4:	4884      	ldr	r0, [pc, #528]	; (801fdd8 <HTTP_Firmware_Data+0x244>)
 801fbc6:	f001 fa4b 	bl	8021060 <isReceiveData_New>
 801fbca:	4603      	mov	r3, r0
 801fbcc:	2b00      	cmp	r3, #0
 801fbce:	d10b      	bne.n	801fbe8 <HTTP_Firmware_Data+0x54>
				isReceiveData_New(temp_at_response_buffer, temp_at_response_index+1, LINE_BUFFER_LENGTH, "\r\n+HTTPREAD:0")){
 801fbd0:	4b80      	ldr	r3, [pc, #512]	; (801fdd4 <HTTP_Firmware_Data+0x240>)
 801fbd2:	881b      	ldrh	r3, [r3, #0]
 801fbd4:	1c59      	adds	r1, r3, #1
 801fbd6:	4b82      	ldr	r3, [pc, #520]	; (801fde0 <HTTP_Firmware_Data+0x24c>)
 801fbd8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801fbdc:	487e      	ldr	r0, [pc, #504]	; (801fdd8 <HTTP_Firmware_Data+0x244>)
 801fbde:	f001 fa3f 	bl	8021060 <isReceiveData_New>
 801fbe2:	4603      	mov	r3, r0
		if(isReceiveData_New(temp_at_response_buffer, temp_at_response_index+1, LINE_BUFFER_LENGTH, "\r\n+HTTPREAD: 0")||
 801fbe4:	2b00      	cmp	r3, #0
 801fbe6:	d073      	beq.n	801fcd0 <HTTP_Firmware_Data+0x13c>
//			LOG("1");
			if(firmware_index >= PAGESIZE){
 801fbe8:	4b7e      	ldr	r3, [pc, #504]	; (801fde4 <HTTP_Firmware_Data+0x250>)
 801fbea:	881b      	ldrh	r3, [r3, #0]
 801fbec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801fbf0:	d331      	bcc.n	801fc56 <HTTP_Firmware_Data+0xc2>
				Flash_Erase(firmware_address, 1);
 801fbf2:	4b7d      	ldr	r3, [pc, #500]	; (801fde8 <HTTP_Firmware_Data+0x254>)
 801fbf4:	681b      	ldr	r3, [r3, #0]
 801fbf6:	2101      	movs	r1, #1
 801fbf8:	4618      	mov	r0, r3
 801fbfa:	f001 fef7 	bl	80219ec <Flash_Erase>
				Flash_Write_Char(firmware_address, firmware_data, PAGESIZE);
 801fbfe:	4b7a      	ldr	r3, [pc, #488]	; (801fde8 <HTTP_Firmware_Data+0x254>)
 801fc00:	681b      	ldr	r3, [r3, #0]
 801fc02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801fc06:	4979      	ldr	r1, [pc, #484]	; (801fdec <HTTP_Firmware_Data+0x258>)
 801fc08:	4618      	mov	r0, r3
 801fc0a:	f001 ff41 	bl	8021a90 <Flash_Write_Char>
//				LOG("3");
				firmware_address+= PAGESIZE;
 801fc0e:	4b76      	ldr	r3, [pc, #472]	; (801fde8 <HTTP_Firmware_Data+0x254>)
 801fc10:	681b      	ldr	r3, [r3, #0]
 801fc12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801fc16:	4a74      	ldr	r2, [pc, #464]	; (801fde8 <HTTP_Firmware_Data+0x254>)
 801fc18:	6013      	str	r3, [r2, #0]
//				memcpy(firmware_data,firmware_data+PAGESIZE,firmware_index-PAGESIZE);
				for (int var = PAGESIZE; var < firmware_index; ++var) {
 801fc1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801fc1e:	60fb      	str	r3, [r7, #12]
 801fc20:	e00b      	b.n	801fc3a <HTTP_Firmware_Data+0xa6>
					firmware_data[var-PAGESIZE] = firmware_data[var];
 801fc22:	68fb      	ldr	r3, [r7, #12]
 801fc24:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801fc28:	4970      	ldr	r1, [pc, #448]	; (801fdec <HTTP_Firmware_Data+0x258>)
 801fc2a:	68fa      	ldr	r2, [r7, #12]
 801fc2c:	440a      	add	r2, r1
 801fc2e:	7811      	ldrb	r1, [r2, #0]
 801fc30:	4a6e      	ldr	r2, [pc, #440]	; (801fdec <HTTP_Firmware_Data+0x258>)
 801fc32:	54d1      	strb	r1, [r2, r3]
				for (int var = PAGESIZE; var < firmware_index; ++var) {
 801fc34:	68fb      	ldr	r3, [r7, #12]
 801fc36:	3301      	adds	r3, #1
 801fc38:	60fb      	str	r3, [r7, #12]
 801fc3a:	4b6a      	ldr	r3, [pc, #424]	; (801fde4 <HTTP_Firmware_Data+0x250>)
 801fc3c:	881b      	ldrh	r3, [r3, #0]
 801fc3e:	461a      	mov	r2, r3
 801fc40:	68fb      	ldr	r3, [r7, #12]
 801fc42:	4293      	cmp	r3, r2
 801fc44:	dbed      	blt.n	801fc22 <HTTP_Firmware_Data+0x8e>
				}
				firmware_index = firmware_index - PAGESIZE;
 801fc46:	4b67      	ldr	r3, [pc, #412]	; (801fde4 <HTTP_Firmware_Data+0x250>)
 801fc48:	881b      	ldrh	r3, [r3, #0]
 801fc4a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801fc4e:	b29a      	uxth	r2, r3
 801fc50:	4b64      	ldr	r3, [pc, #400]	; (801fde4 <HTTP_Firmware_Data+0x250>)
 801fc52:	801a      	strh	r2, [r3, #0]
 801fc54:	e01e      	b.n	801fc94 <HTTP_Firmware_Data+0x100>
			}
			else if(http_response_remain == 0){
 801fc56:	4b66      	ldr	r3, [pc, #408]	; (801fdf0 <HTTP_Firmware_Data+0x25c>)
 801fc58:	681b      	ldr	r3, [r3, #0]
 801fc5a:	2b00      	cmp	r3, #0
 801fc5c:	d11a      	bne.n	801fc94 <HTTP_Firmware_Data+0x100>
				Flash_Erase(firmware_address, firmware_index);
 801fc5e:	4b62      	ldr	r3, [pc, #392]	; (801fde8 <HTTP_Firmware_Data+0x254>)
 801fc60:	681b      	ldr	r3, [r3, #0]
 801fc62:	4a60      	ldr	r2, [pc, #384]	; (801fde4 <HTTP_Firmware_Data+0x250>)
 801fc64:	8812      	ldrh	r2, [r2, #0]
 801fc66:	4611      	mov	r1, r2
 801fc68:	4618      	mov	r0, r3
 801fc6a:	f001 febf 	bl	80219ec <Flash_Erase>
				Flash_Write_Char(firmware_address, firmware_data, firmware_index);
 801fc6e:	4b5e      	ldr	r3, [pc, #376]	; (801fde8 <HTTP_Firmware_Data+0x254>)
 801fc70:	681b      	ldr	r3, [r3, #0]
 801fc72:	4a5c      	ldr	r2, [pc, #368]	; (801fde4 <HTTP_Firmware_Data+0x250>)
 801fc74:	8812      	ldrh	r2, [r2, #0]
 801fc76:	495d      	ldr	r1, [pc, #372]	; (801fdec <HTTP_Firmware_Data+0x258>)
 801fc78:	4618      	mov	r0, r3
 801fc7a:	f001 ff09 	bl	8021a90 <Flash_Write_Char>
				firmware_address+= firmware_index;
 801fc7e:	4b59      	ldr	r3, [pc, #356]	; (801fde4 <HTTP_Firmware_Data+0x250>)
 801fc80:	881b      	ldrh	r3, [r3, #0]
 801fc82:	461a      	mov	r2, r3
 801fc84:	4b58      	ldr	r3, [pc, #352]	; (801fde8 <HTTP_Firmware_Data+0x254>)
 801fc86:	681b      	ldr	r3, [r3, #0]
 801fc88:	4413      	add	r3, r2
 801fc8a:	4a57      	ldr	r2, [pc, #348]	; (801fde8 <HTTP_Firmware_Data+0x254>)
 801fc8c:	6013      	str	r3, [r2, #0]
				firmware_index = 0;
 801fc8e:	4b55      	ldr	r3, [pc, #340]	; (801fde4 <HTTP_Firmware_Data+0x250>)
 801fc90:	2200      	movs	r2, #0
 801fc92:	801a      	strh	r2, [r3, #0]
			}
			if(isReceiveData_New(temp_at_response_buffer, temp_at_response_index+1, LINE_BUFFER_LENGTH, "\r\n+HTTPREAD: 0")){
 801fc94:	4b4f      	ldr	r3, [pc, #316]	; (801fdd4 <HTTP_Firmware_Data+0x240>)
 801fc96:	881b      	ldrh	r3, [r3, #0]
 801fc98:	1c59      	adds	r1, r3, #1
 801fc9a:	4b50      	ldr	r3, [pc, #320]	; (801fddc <HTTP_Firmware_Data+0x248>)
 801fc9c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801fca0:	484d      	ldr	r0, [pc, #308]	; (801fdd8 <HTTP_Firmware_Data+0x244>)
 801fca2:	f001 f9dd 	bl	8021060 <isReceiveData_New>
 801fca6:	4603      	mov	r3, r0
 801fca8:	2b00      	cmp	r3, #0
 801fcaa:	d006      	beq.n	801fcba <HTTP_Firmware_Data+0x126>
				line_buffer_index = line_buffer_index - strlen("\r\n+HTTPREAD: 0") + 1;
 801fcac:	4b51      	ldr	r3, [pc, #324]	; (801fdf4 <HTTP_Firmware_Data+0x260>)
 801fcae:	881b      	ldrh	r3, [r3, #0]
 801fcb0:	3b0d      	subs	r3, #13
 801fcb2:	b29a      	uxth	r2, r3
 801fcb4:	4b4f      	ldr	r3, [pc, #316]	; (801fdf4 <HTTP_Firmware_Data+0x260>)
 801fcb6:	801a      	strh	r2, [r3, #0]
 801fcb8:	e005      	b.n	801fcc6 <HTTP_Firmware_Data+0x132>
			}
			else{
				line_buffer_index = line_buffer_index - strlen("\r\n+HTTPREAD:0") + 1;
 801fcba:	4b4e      	ldr	r3, [pc, #312]	; (801fdf4 <HTTP_Firmware_Data+0x260>)
 801fcbc:	881b      	ldrh	r3, [r3, #0]
 801fcbe:	3b0c      	subs	r3, #12
 801fcc0:	b29a      	uxth	r2, r3
 801fcc2:	4b4c      	ldr	r3, [pc, #304]	; (801fdf4 <HTTP_Firmware_Data+0x260>)
 801fcc4:	801a      	strh	r2, [r3, #0]
			}
			start_record_firmware_data = RESET;
 801fcc6:	4b4c      	ldr	r3, [pc, #304]	; (801fdf8 <HTTP_Firmware_Data+0x264>)
 801fcc8:	2200      	movs	r2, #0
 801fcca:	701a      	strb	r2, [r3, #0]
			return DONE;
 801fccc:	2300      	movs	r3, #0
 801fcce:	e32f      	b.n	8020330 <HTTP_Firmware_Data+0x79c>
		}
		// Check whether start of SIM Respond
		else if(isReceiveData_New(temp_at_response_buffer, temp_at_response_index+1, LINE_BUFFER_LENGTH, "HTTPREAD: DATA")){
 801fcd0:	4b40      	ldr	r3, [pc, #256]	; (801fdd4 <HTTP_Firmware_Data+0x240>)
 801fcd2:	881b      	ldrh	r3, [r3, #0]
 801fcd4:	1c59      	adds	r1, r3, #1
 801fcd6:	4b49      	ldr	r3, [pc, #292]	; (801fdfc <HTTP_Firmware_Data+0x268>)
 801fcd8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801fcdc:	483e      	ldr	r0, [pc, #248]	; (801fdd8 <HTTP_Firmware_Data+0x244>)
 801fcde:	f001 f9bf 	bl	8021060 <isReceiveData_New>
 801fce2:	4603      	mov	r3, r0
 801fce4:	2b00      	cmp	r3, #0
 801fce6:	d004      	beq.n	801fcf2 <HTTP_Firmware_Data+0x15e>
//			LOG("2");
			prepare_record_firmware_data = SET;
 801fce8:	4b45      	ldr	r3, [pc, #276]	; (801fe00 <HTTP_Firmware_Data+0x26c>)
 801fcea:	2201      	movs	r2, #1
 801fcec:	701a      	strb	r2, [r3, #0]
			return PROCESSING;
 801fcee:	2301      	movs	r3, #1
 801fcf0:	e31e      	b.n	8020330 <HTTP_Firmware_Data+0x79c>
		}
		else if(prepare_record_firmware_data){
 801fcf2:	4b43      	ldr	r3, [pc, #268]	; (801fe00 <HTTP_Firmware_Data+0x26c>)
 801fcf4:	781b      	ldrb	r3, [r3, #0]
 801fcf6:	2b00      	cmp	r3, #0
 801fcf8:	d014      	beq.n	801fd24 <HTTP_Firmware_Data+0x190>
//			LOG("3");
			if(isReceiveData_New(temp_at_response_buffer, temp_at_response_index+1, LINE_BUFFER_LENGTH, "\r\n")){
 801fcfa:	4b36      	ldr	r3, [pc, #216]	; (801fdd4 <HTTP_Firmware_Data+0x240>)
 801fcfc:	881b      	ldrh	r3, [r3, #0]
 801fcfe:	1c59      	adds	r1, r3, #1
 801fd00:	4b40      	ldr	r3, [pc, #256]	; (801fe04 <HTTP_Firmware_Data+0x270>)
 801fd02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801fd06:	4834      	ldr	r0, [pc, #208]	; (801fdd8 <HTTP_Firmware_Data+0x244>)
 801fd08:	f001 f9aa 	bl	8021060 <isReceiveData_New>
 801fd0c:	4603      	mov	r3, r0
 801fd0e:	2b00      	cmp	r3, #0
 801fd10:	f000 82fc 	beq.w	802030c <HTTP_Firmware_Data+0x778>
				start_record_firmware_data = SET;
 801fd14:	4b38      	ldr	r3, [pc, #224]	; (801fdf8 <HTTP_Firmware_Data+0x264>)
 801fd16:	2201      	movs	r2, #1
 801fd18:	701a      	strb	r2, [r3, #0]
				prepare_record_firmware_data = RESET;
 801fd1a:	4b39      	ldr	r3, [pc, #228]	; (801fe00 <HTTP_Firmware_Data+0x26c>)
 801fd1c:	2200      	movs	r2, #0
 801fd1e:	701a      	strb	r2, [r3, #0]
				// reset line_index
				return PROCESSING;
 801fd20:	2301      	movs	r3, #1
 801fd22:	e305      	b.n	8020330 <HTTP_Firmware_Data+0x79c>
			}
		}
		else if(start_record_firmware_data){
 801fd24:	4b34      	ldr	r3, [pc, #208]	; (801fdf8 <HTTP_Firmware_Data+0x264>)
 801fd26:	781b      	ldrb	r3, [r3, #0]
 801fd28:	2b00      	cmp	r3, #0
 801fd2a:	f000 82ef 	beq.w	802030c <HTTP_Firmware_Data+0x778>
//			LOG("4");
			// Check whether that data is not end of HTTP READ
			line_buffer[line_buffer_index] = temp_at_response_buffer[temp_at_response_index];
 801fd2e:	4b29      	ldr	r3, [pc, #164]	; (801fdd4 <HTTP_Firmware_Data+0x240>)
 801fd30:	881b      	ldrh	r3, [r3, #0]
 801fd32:	4619      	mov	r1, r3
 801fd34:	4b2f      	ldr	r3, [pc, #188]	; (801fdf4 <HTTP_Firmware_Data+0x260>)
 801fd36:	881b      	ldrh	r3, [r3, #0]
 801fd38:	461a      	mov	r2, r3
 801fd3a:	4b27      	ldr	r3, [pc, #156]	; (801fdd8 <HTTP_Firmware_Data+0x244>)
 801fd3c:	5c59      	ldrb	r1, [r3, r1]
 801fd3e:	4b32      	ldr	r3, [pc, #200]	; (801fe08 <HTTP_Firmware_Data+0x274>)
 801fd40:	5499      	strb	r1, [r3, r2]
			line_buffer_index = (line_buffer_index +1)%LINE_BUFFER_LENGTH;
 801fd42:	4b2c      	ldr	r3, [pc, #176]	; (801fdf4 <HTTP_Firmware_Data+0x260>)
 801fd44:	881b      	ldrh	r3, [r3, #0]
 801fd46:	3301      	adds	r3, #1
 801fd48:	4a30      	ldr	r2, [pc, #192]	; (801fe0c <HTTP_Firmware_Data+0x278>)
 801fd4a:	fb82 1203 	smull	r1, r2, r2, r3
 801fd4e:	1151      	asrs	r1, r2, #5
 801fd50:	17da      	asrs	r2, r3, #31
 801fd52:	1a8a      	subs	r2, r1, r2
 801fd54:	f44f 7196 	mov.w	r1, #300	; 0x12c
 801fd58:	fb01 f202 	mul.w	r2, r1, r2
 801fd5c:	1a9a      	subs	r2, r3, r2
 801fd5e:	b292      	uxth	r2, r2
 801fd60:	4b24      	ldr	r3, [pc, #144]	; (801fdf4 <HTTP_Firmware_Data+0x260>)
 801fd62:	801a      	strh	r2, [r3, #0]
			if(http_response_remain == 0){
 801fd64:	4b22      	ldr	r3, [pc, #136]	; (801fdf0 <HTTP_Firmware_Data+0x25c>)
 801fd66:	681b      	ldr	r3, [r3, #0]
 801fd68:	2b00      	cmp	r3, #0
 801fd6a:	f040 8171 	bne.w	8020050 <HTTP_Firmware_Data+0x4bc>
				if(isReceiveData_New(line_buffer, line_buffer_index, LINE_BUFFER_LENGTH, "\r\n+")|| isReceiveData_New(line_buffer, line_buffer_index, LINE_BUFFER_LENGTH, "\r\n:")){
 801fd6e:	4b21      	ldr	r3, [pc, #132]	; (801fdf4 <HTTP_Firmware_Data+0x260>)
 801fd70:	881b      	ldrh	r3, [r3, #0]
 801fd72:	4619      	mov	r1, r3
 801fd74:	4b26      	ldr	r3, [pc, #152]	; (801fe10 <HTTP_Firmware_Data+0x27c>)
 801fd76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801fd7a:	4823      	ldr	r0, [pc, #140]	; (801fe08 <HTTP_Firmware_Data+0x274>)
 801fd7c:	f001 f970 	bl	8021060 <isReceiveData_New>
 801fd80:	4603      	mov	r3, r0
 801fd82:	2b00      	cmp	r3, #0
 801fd84:	d10c      	bne.n	801fda0 <HTTP_Firmware_Data+0x20c>
 801fd86:	4b1b      	ldr	r3, [pc, #108]	; (801fdf4 <HTTP_Firmware_Data+0x260>)
 801fd88:	881b      	ldrh	r3, [r3, #0]
 801fd8a:	4619      	mov	r1, r3
 801fd8c:	4b21      	ldr	r3, [pc, #132]	; (801fe14 <HTTP_Firmware_Data+0x280>)
 801fd8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801fd92:	481d      	ldr	r0, [pc, #116]	; (801fe08 <HTTP_Firmware_Data+0x274>)
 801fd94:	f001 f964 	bl	8021060 <isReceiveData_New>
 801fd98:	4603      	mov	r3, r0
 801fd9a:	2b00      	cmp	r3, #0
 801fd9c:	f000 82b6 	beq.w	802030c <HTTP_Firmware_Data+0x778>
					if(isReceiveData_New(line_buffer, line_buffer_index, LINE_BUFFER_LENGTH, "\r\n+")){
 801fda0:	4b14      	ldr	r3, [pc, #80]	; (801fdf4 <HTTP_Firmware_Data+0x260>)
 801fda2:	881b      	ldrh	r3, [r3, #0]
 801fda4:	4619      	mov	r1, r3
 801fda6:	4b1a      	ldr	r3, [pc, #104]	; (801fe10 <HTTP_Firmware_Data+0x27c>)
 801fda8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801fdac:	4816      	ldr	r0, [pc, #88]	; (801fe08 <HTTP_Firmware_Data+0x274>)
 801fdae:	f001 f957 	bl	8021060 <isReceiveData_New>
 801fdb2:	4603      	mov	r3, r0
 801fdb4:	2b00      	cmp	r3, #0
 801fdb6:	d005      	beq.n	801fdc4 <HTTP_Firmware_Data+0x230>
						line_buffer_index-=2;
 801fdb8:	4b0e      	ldr	r3, [pc, #56]	; (801fdf4 <HTTP_Firmware_Data+0x260>)
 801fdba:	881b      	ldrh	r3, [r3, #0]
 801fdbc:	3b02      	subs	r3, #2
 801fdbe:	b29a      	uxth	r2, r3
 801fdc0:	4b0c      	ldr	r3, [pc, #48]	; (801fdf4 <HTTP_Firmware_Data+0x260>)
 801fdc2:	801a      	strh	r2, [r3, #0]
//					sprintf(log,"\r\ntemp_at_response_index: %ld\r\n",temp_at_response_index);
//					LOG(log);
//					sprintf(log,"\r\nline_buffer_index: %ld\r\n",line_buffer_index);
//					LOG(log);
					// Calculator checksum
					if(first_http_read){
 801fdc4:	4b14      	ldr	r3, [pc, #80]	; (801fe18 <HTTP_Firmware_Data+0x284>)
 801fdc6:	781b      	ldrb	r3, [r3, #0]
 801fdc8:	2b00      	cmp	r3, #0
 801fdca:	d03f      	beq.n	801fe4c <HTTP_Firmware_Data+0x2b8>
						for (uint16_t var = 0; var < line_buffer_index; ++var) {
 801fdcc:	2300      	movs	r3, #0
 801fdce:	817b      	strh	r3, [r7, #10]
 801fdd0:	e02e      	b.n	801fe30 <HTTP_Firmware_Data+0x29c>
 801fdd2:	bf00      	nop
 801fdd4:	200002b8 	.word	0x200002b8
 801fdd8:	20002540 	.word	0x20002540
 801fddc:	080268a4 	.word	0x080268a4
 801fde0:	080268b4 	.word	0x080268b4
 801fde4:	200002aa 	.word	0x200002aa
 801fde8:	2000009c 	.word	0x2000009c
 801fdec:	2000268c 	.word	0x2000268c
 801fdf0:	200002a0 	.word	0x200002a0
 801fdf4:	200002b6 	.word	0x200002b6
 801fdf8:	200002b4 	.word	0x200002b4
 801fdfc:	080268c4 	.word	0x080268c4
 801fe00:	200002b3 	.word	0x200002b3
 801fe04:	080268a0 	.word	0x080268a0
 801fe08:	20003730 	.word	0x20003730
 801fe0c:	1b4e81b5 	.word	0x1b4e81b5
 801fe10:	080268d4 	.word	0x080268d4
 801fe14:	080268d8 	.word	0x080268d8
 801fe18:	200000f8 	.word	0x200000f8
							line_buffer[var] = line_buffer[var+1];
 801fe1c:	897b      	ldrh	r3, [r7, #10]
 801fe1e:	1c5a      	adds	r2, r3, #1
 801fe20:	897b      	ldrh	r3, [r7, #10]
 801fe22:	4995      	ldr	r1, [pc, #596]	; (8020078 <HTTP_Firmware_Data+0x4e4>)
 801fe24:	5c89      	ldrb	r1, [r1, r2]
 801fe26:	4a94      	ldr	r2, [pc, #592]	; (8020078 <HTTP_Firmware_Data+0x4e4>)
 801fe28:	54d1      	strb	r1, [r2, r3]
						for (uint16_t var = 0; var < line_buffer_index; ++var) {
 801fe2a:	897b      	ldrh	r3, [r7, #10]
 801fe2c:	3301      	adds	r3, #1
 801fe2e:	817b      	strh	r3, [r7, #10]
 801fe30:	4b92      	ldr	r3, [pc, #584]	; (802007c <HTTP_Firmware_Data+0x4e8>)
 801fe32:	881b      	ldrh	r3, [r3, #0]
 801fe34:	897a      	ldrh	r2, [r7, #10]
 801fe36:	429a      	cmp	r2, r3
 801fe38:	d3f0      	bcc.n	801fe1c <HTTP_Firmware_Data+0x288>
						}
						line_buffer_index --;
 801fe3a:	4b90      	ldr	r3, [pc, #576]	; (802007c <HTTP_Firmware_Data+0x4e8>)
 801fe3c:	881b      	ldrh	r3, [r3, #0]
 801fe3e:	3b01      	subs	r3, #1
 801fe40:	b29a      	uxth	r2, r3
 801fe42:	4b8e      	ldr	r3, [pc, #568]	; (802007c <HTTP_Firmware_Data+0x4e8>)
 801fe44:	801a      	strh	r2, [r3, #0]
						first_http_read = RESET;
 801fe46:	4b8e      	ldr	r3, [pc, #568]	; (8020080 <HTTP_Firmware_Data+0x4ec>)
 801fe48:	2200      	movs	r2, #0
 801fe4a:	701a      	strb	r2, [r3, #0]
					}
					if(is_Firmware_Line_Data_Correct(line_buffer, line_buffer_index)){
 801fe4c:	4b8b      	ldr	r3, [pc, #556]	; (802007c <HTTP_Firmware_Data+0x4e8>)
 801fe4e:	881b      	ldrh	r3, [r3, #0]
 801fe50:	4619      	mov	r1, r3
 801fe52:	4889      	ldr	r0, [pc, #548]	; (8020078 <HTTP_Firmware_Data+0x4e4>)
 801fe54:	f7ff fe34 	bl	801fac0 <is_Firmware_Line_Data_Correct>
 801fe58:	4603      	mov	r3, r0
 801fe5a:	2b00      	cmp	r3, #0
 801fe5c:	f000 80f3 	beq.w	8020046 <HTTP_Firmware_Data+0x4b2>
						// Check whether that line is the firmware data or not
						if(Char2Hex(line_buffer[7])==0){
 801fe60:	4b85      	ldr	r3, [pc, #532]	; (8020078 <HTTP_Firmware_Data+0x4e4>)
 801fe62:	79db      	ldrb	r3, [r3, #7]
 801fe64:	4618      	mov	r0, r3
 801fe66:	f001 f943 	bl	80210f0 <Char2Hex>
 801fe6a:	4603      	mov	r3, r0
 801fe6c:	2b00      	cmp	r3, #0
 801fe6e:	f040 80b9 	bne.w	801ffe4 <HTTP_Firmware_Data+0x450>
							firmware_address_curr_offet = ((uint16_t)(Char2Hex(line_buffer[2]))<<12) +((uint16_t)(Char2Hex(line_buffer[3]))<<8) +((uint16_t)(Char2Hex(line_buffer[4]))<<4)+(uint16_t)(Char2Hex(line_buffer[5]));
 801fe72:	4b81      	ldr	r3, [pc, #516]	; (8020078 <HTTP_Firmware_Data+0x4e4>)
 801fe74:	789b      	ldrb	r3, [r3, #2]
 801fe76:	4618      	mov	r0, r3
 801fe78:	f001 f93a 	bl	80210f0 <Char2Hex>
 801fe7c:	4603      	mov	r3, r0
 801fe7e:	b29b      	uxth	r3, r3
 801fe80:	031b      	lsls	r3, r3, #12
 801fe82:	b29c      	uxth	r4, r3
 801fe84:	4b7c      	ldr	r3, [pc, #496]	; (8020078 <HTTP_Firmware_Data+0x4e4>)
 801fe86:	78db      	ldrb	r3, [r3, #3]
 801fe88:	4618      	mov	r0, r3
 801fe8a:	f001 f931 	bl	80210f0 <Char2Hex>
 801fe8e:	4603      	mov	r3, r0
 801fe90:	b29b      	uxth	r3, r3
 801fe92:	021b      	lsls	r3, r3, #8
 801fe94:	b29b      	uxth	r3, r3
 801fe96:	4423      	add	r3, r4
 801fe98:	b29c      	uxth	r4, r3
 801fe9a:	4b77      	ldr	r3, [pc, #476]	; (8020078 <HTTP_Firmware_Data+0x4e4>)
 801fe9c:	791b      	ldrb	r3, [r3, #4]
 801fe9e:	4618      	mov	r0, r3
 801fea0:	f001 f926 	bl	80210f0 <Char2Hex>
 801fea4:	4603      	mov	r3, r0
 801fea6:	b29b      	uxth	r3, r3
 801fea8:	011b      	lsls	r3, r3, #4
 801feaa:	b29b      	uxth	r3, r3
 801feac:	4423      	add	r3, r4
 801feae:	b29c      	uxth	r4, r3
 801feb0:	4b71      	ldr	r3, [pc, #452]	; (8020078 <HTTP_Firmware_Data+0x4e4>)
 801feb2:	795b      	ldrb	r3, [r3, #5]
 801feb4:	4618      	mov	r0, r3
 801feb6:	f001 f91b 	bl	80210f0 <Char2Hex>
 801feba:	4603      	mov	r3, r0
 801febc:	b29b      	uxth	r3, r3
 801febe:	4423      	add	r3, r4
 801fec0:	b29a      	uxth	r2, r3
 801fec2:	4b70      	ldr	r3, [pc, #448]	; (8020084 <HTTP_Firmware_Data+0x4f0>)
 801fec4:	801a      	strh	r2, [r3, #0]
							if(get_2bytes_firmware_address){
 801fec6:	4b70      	ldr	r3, [pc, #448]	; (8020088 <HTTP_Firmware_Data+0x4f4>)
 801fec8:	781b      	ldrb	r3, [r3, #0]
 801feca:	2b00      	cmp	r3, #0
 801fecc:	d011      	beq.n	801fef2 <HTTP_Firmware_Data+0x35e>
								get_2bytes_firmware_address = RESET;
 801fece:	4b6e      	ldr	r3, [pc, #440]	; (8020088 <HTTP_Firmware_Data+0x4f4>)
 801fed0:	2200      	movs	r2, #0
 801fed2:	701a      	strb	r2, [r3, #0]
								firmware_address_of_hexfile = (firmware_address_of_hexfile<<16) | (uint32_t)firmware_address_curr_offet;
 801fed4:	4b6d      	ldr	r3, [pc, #436]	; (802008c <HTTP_Firmware_Data+0x4f8>)
 801fed6:	681b      	ldr	r3, [r3, #0]
 801fed8:	041b      	lsls	r3, r3, #16
 801feda:	4a6a      	ldr	r2, [pc, #424]	; (8020084 <HTTP_Firmware_Data+0x4f0>)
 801fedc:	8812      	ldrh	r2, [r2, #0]
 801fede:	4313      	orrs	r3, r2
 801fee0:	4a6a      	ldr	r2, [pc, #424]	; (802008c <HTTP_Firmware_Data+0x4f8>)
 801fee2:	6013      	str	r3, [r2, #0]
								if(firmware_address_of_hexfile != CURRENT_FIRMWARE_ADDR){
 801fee4:	4b69      	ldr	r3, [pc, #420]	; (802008c <HTTP_Firmware_Data+0x4f8>)
 801fee6:	681b      	ldr	r3, [r3, #0]
 801fee8:	4a69      	ldr	r2, [pc, #420]	; (8020090 <HTTP_Firmware_Data+0x4fc>)
 801feea:	4293      	cmp	r3, r2
 801feec:	d001      	beq.n	801fef2 <HTTP_Firmware_Data+0x35e>
									return ERR_CURRENT_FIRMWARE_ADDRESS_WRONG;
 801feee:	2303      	movs	r3, #3
 801fef0:	e21e      	b.n	8020330 <HTTP_Firmware_Data+0x79c>
								}
							}
							if(firmware_address_prev_offet >= 0xFFF0){
 801fef2:	4b68      	ldr	r3, [pc, #416]	; (8020094 <HTTP_Firmware_Data+0x500>)
 801fef4:	881b      	ldrh	r3, [r3, #0]
 801fef6:	f64f 72ef 	movw	r2, #65519	; 0xffef
 801fefa:	4293      	cmp	r3, r2
 801fefc:	d90d      	bls.n	801ff1a <HTTP_Firmware_Data+0x386>
								num_byte_FF_add_to_end_buffer = 0xFFFF - firmware_address_prev_offet + 1 + firmware_address_curr_offet -  (uint16_t)prev_num_byte;
 801fefe:	4b61      	ldr	r3, [pc, #388]	; (8020084 <HTTP_Firmware_Data+0x4f0>)
 801ff00:	881a      	ldrh	r2, [r3, #0]
 801ff02:	4b64      	ldr	r3, [pc, #400]	; (8020094 <HTTP_Firmware_Data+0x500>)
 801ff04:	881b      	ldrh	r3, [r3, #0]
 801ff06:	1ad3      	subs	r3, r2, r3
 801ff08:	b29a      	uxth	r2, r3
 801ff0a:	4b63      	ldr	r3, [pc, #396]	; (8020098 <HTTP_Firmware_Data+0x504>)
 801ff0c:	781b      	ldrb	r3, [r3, #0]
 801ff0e:	b29b      	uxth	r3, r3
 801ff10:	1ad3      	subs	r3, r2, r3
 801ff12:	b29a      	uxth	r2, r3
 801ff14:	4b61      	ldr	r3, [pc, #388]	; (802009c <HTTP_Firmware_Data+0x508>)
 801ff16:	801a      	strh	r2, [r3, #0]
 801ff18:	e00c      	b.n	801ff34 <HTTP_Firmware_Data+0x3a0>
							}
							else{
								num_byte_FF_add_to_end_buffer = firmware_address_curr_offet - firmware_address_prev_offet - prev_num_byte;
 801ff1a:	4b5a      	ldr	r3, [pc, #360]	; (8020084 <HTTP_Firmware_Data+0x4f0>)
 801ff1c:	881a      	ldrh	r2, [r3, #0]
 801ff1e:	4b5d      	ldr	r3, [pc, #372]	; (8020094 <HTTP_Firmware_Data+0x500>)
 801ff20:	881b      	ldrh	r3, [r3, #0]
 801ff22:	1ad3      	subs	r3, r2, r3
 801ff24:	b29a      	uxth	r2, r3
 801ff26:	4b5c      	ldr	r3, [pc, #368]	; (8020098 <HTTP_Firmware_Data+0x504>)
 801ff28:	781b      	ldrb	r3, [r3, #0]
 801ff2a:	b29b      	uxth	r3, r3
 801ff2c:	1ad3      	subs	r3, r2, r3
 801ff2e:	b29a      	uxth	r2, r3
 801ff30:	4b5a      	ldr	r3, [pc, #360]	; (802009c <HTTP_Firmware_Data+0x508>)
 801ff32:	801a      	strh	r2, [r3, #0]
							}
							for (uint16_t var = 0; var < num_byte_FF_add_to_end_buffer; var++) {
 801ff34:	2300      	movs	r3, #0
 801ff36:	813b      	strh	r3, [r7, #8]
 801ff38:	e00c      	b.n	801ff54 <HTTP_Firmware_Data+0x3c0>
								firmware_data[firmware_index++] = 0xFF;
 801ff3a:	4b59      	ldr	r3, [pc, #356]	; (80200a0 <HTTP_Firmware_Data+0x50c>)
 801ff3c:	881b      	ldrh	r3, [r3, #0]
 801ff3e:	1c5a      	adds	r2, r3, #1
 801ff40:	b291      	uxth	r1, r2
 801ff42:	4a57      	ldr	r2, [pc, #348]	; (80200a0 <HTTP_Firmware_Data+0x50c>)
 801ff44:	8011      	strh	r1, [r2, #0]
 801ff46:	461a      	mov	r2, r3
 801ff48:	4b56      	ldr	r3, [pc, #344]	; (80200a4 <HTTP_Firmware_Data+0x510>)
 801ff4a:	21ff      	movs	r1, #255	; 0xff
 801ff4c:	5499      	strb	r1, [r3, r2]
							for (uint16_t var = 0; var < num_byte_FF_add_to_end_buffer; var++) {
 801ff4e:	893b      	ldrh	r3, [r7, #8]
 801ff50:	3301      	adds	r3, #1
 801ff52:	813b      	strh	r3, [r7, #8]
 801ff54:	4b51      	ldr	r3, [pc, #324]	; (802009c <HTTP_Firmware_Data+0x508>)
 801ff56:	881b      	ldrh	r3, [r3, #0]
 801ff58:	893a      	ldrh	r2, [r7, #8]
 801ff5a:	429a      	cmp	r2, r3
 801ff5c:	d3ed      	bcc.n	801ff3a <HTTP_Firmware_Data+0x3a6>
							}
							prev_num_byte = (Char2Hex(line_buffer[0])<<4) + Char2Hex(line_buffer[1]);
 801ff5e:	4b46      	ldr	r3, [pc, #280]	; (8020078 <HTTP_Firmware_Data+0x4e4>)
 801ff60:	781b      	ldrb	r3, [r3, #0]
 801ff62:	4618      	mov	r0, r3
 801ff64:	f001 f8c4 	bl	80210f0 <Char2Hex>
 801ff68:	4603      	mov	r3, r0
 801ff6a:	b2db      	uxtb	r3, r3
 801ff6c:	011b      	lsls	r3, r3, #4
 801ff6e:	b2dc      	uxtb	r4, r3
 801ff70:	4b41      	ldr	r3, [pc, #260]	; (8020078 <HTTP_Firmware_Data+0x4e4>)
 801ff72:	785b      	ldrb	r3, [r3, #1]
 801ff74:	4618      	mov	r0, r3
 801ff76:	f001 f8bb 	bl	80210f0 <Char2Hex>
 801ff7a:	4603      	mov	r3, r0
 801ff7c:	b2db      	uxtb	r3, r3
 801ff7e:	4423      	add	r3, r4
 801ff80:	b2da      	uxtb	r2, r3
 801ff82:	4b45      	ldr	r3, [pc, #276]	; (8020098 <HTTP_Firmware_Data+0x504>)
 801ff84:	701a      	strb	r2, [r3, #0]
							firmware_address_prev_offet = firmware_address_curr_offet;
 801ff86:	4b3f      	ldr	r3, [pc, #252]	; (8020084 <HTTP_Firmware_Data+0x4f0>)
 801ff88:	881a      	ldrh	r2, [r3, #0]
 801ff8a:	4b42      	ldr	r3, [pc, #264]	; (8020094 <HTTP_Firmware_Data+0x500>)
 801ff8c:	801a      	strh	r2, [r3, #0]


							for (uint16_t var = 8; var < line_buffer_index - 3 -2; var=var+2) {
 801ff8e:	2308      	movs	r3, #8
 801ff90:	80fb      	strh	r3, [r7, #6]
 801ff92:	e020      	b.n	801ffd6 <HTTP_Firmware_Data+0x442>
								//Save line to firmware data
								firmware_data[firmware_index++] = (Char2Hex(line_buffer[var])<<4)+ Char2Hex(line_buffer[var+1]);
 801ff94:	88fb      	ldrh	r3, [r7, #6]
 801ff96:	4a38      	ldr	r2, [pc, #224]	; (8020078 <HTTP_Firmware_Data+0x4e4>)
 801ff98:	5cd3      	ldrb	r3, [r2, r3]
 801ff9a:	4618      	mov	r0, r3
 801ff9c:	f001 f8a8 	bl	80210f0 <Char2Hex>
 801ffa0:	4603      	mov	r3, r0
 801ffa2:	b2db      	uxtb	r3, r3
 801ffa4:	011b      	lsls	r3, r3, #4
 801ffa6:	b2dc      	uxtb	r4, r3
 801ffa8:	88fb      	ldrh	r3, [r7, #6]
 801ffaa:	3301      	adds	r3, #1
 801ffac:	4a32      	ldr	r2, [pc, #200]	; (8020078 <HTTP_Firmware_Data+0x4e4>)
 801ffae:	5cd3      	ldrb	r3, [r2, r3]
 801ffb0:	4618      	mov	r0, r3
 801ffb2:	f001 f89d 	bl	80210f0 <Char2Hex>
 801ffb6:	4603      	mov	r3, r0
 801ffb8:	b2da      	uxtb	r2, r3
 801ffba:	4b39      	ldr	r3, [pc, #228]	; (80200a0 <HTTP_Firmware_Data+0x50c>)
 801ffbc:	881b      	ldrh	r3, [r3, #0]
 801ffbe:	1c59      	adds	r1, r3, #1
 801ffc0:	b288      	uxth	r0, r1
 801ffc2:	4937      	ldr	r1, [pc, #220]	; (80200a0 <HTTP_Firmware_Data+0x50c>)
 801ffc4:	8008      	strh	r0, [r1, #0]
 801ffc6:	4619      	mov	r1, r3
 801ffc8:	18a3      	adds	r3, r4, r2
 801ffca:	b2da      	uxtb	r2, r3
 801ffcc:	4b35      	ldr	r3, [pc, #212]	; (80200a4 <HTTP_Firmware_Data+0x510>)
 801ffce:	545a      	strb	r2, [r3, r1]
							for (uint16_t var = 8; var < line_buffer_index - 3 -2; var=var+2) {
 801ffd0:	88fb      	ldrh	r3, [r7, #6]
 801ffd2:	3302      	adds	r3, #2
 801ffd4:	80fb      	strh	r3, [r7, #6]
 801ffd6:	88fa      	ldrh	r2, [r7, #6]
 801ffd8:	4b28      	ldr	r3, [pc, #160]	; (802007c <HTTP_Firmware_Data+0x4e8>)
 801ffda:	881b      	ldrh	r3, [r3, #0]
 801ffdc:	3b05      	subs	r3, #5
 801ffde:	429a      	cmp	r2, r3
 801ffe0:	dbd8      	blt.n	801ff94 <HTTP_Firmware_Data+0x400>
 801ffe2:	e02c      	b.n	802003e <HTTP_Firmware_Data+0x4aa>
							}
						}
						else if(Char2Hex(line_buffer[7])==4){
 801ffe4:	4b24      	ldr	r3, [pc, #144]	; (8020078 <HTTP_Firmware_Data+0x4e4>)
 801ffe6:	79db      	ldrb	r3, [r3, #7]
 801ffe8:	4618      	mov	r0, r3
 801ffea:	f001 f881 	bl	80210f0 <Char2Hex>
 801ffee:	4603      	mov	r3, r0
 801fff0:	2b04      	cmp	r3, #4
 801fff2:	d124      	bne.n	802003e <HTTP_Firmware_Data+0x4aa>
							firmware_address_of_hexfile = ((uint16_t)(Char2Hex(line_buffer[8]))<<12) +((uint16_t)(Char2Hex(line_buffer[9]))<<8) + ((uint16_t)(Char2Hex(line_buffer[10]))<<4)+(uint16_t)(Char2Hex(line_buffer[11]));
 801fff4:	4b20      	ldr	r3, [pc, #128]	; (8020078 <HTTP_Firmware_Data+0x4e4>)
 801fff6:	7a1b      	ldrb	r3, [r3, #8]
 801fff8:	4618      	mov	r0, r3
 801fffa:	f001 f879 	bl	80210f0 <Char2Hex>
 801fffe:	4603      	mov	r3, r0
 8020000:	b29b      	uxth	r3, r3
 8020002:	031c      	lsls	r4, r3, #12
 8020004:	4b1c      	ldr	r3, [pc, #112]	; (8020078 <HTTP_Firmware_Data+0x4e4>)
 8020006:	7a5b      	ldrb	r3, [r3, #9]
 8020008:	4618      	mov	r0, r3
 802000a:	f001 f871 	bl	80210f0 <Char2Hex>
 802000e:	4603      	mov	r3, r0
 8020010:	b29b      	uxth	r3, r3
 8020012:	021b      	lsls	r3, r3, #8
 8020014:	441c      	add	r4, r3
 8020016:	4b18      	ldr	r3, [pc, #96]	; (8020078 <HTTP_Firmware_Data+0x4e4>)
 8020018:	7a9b      	ldrb	r3, [r3, #10]
 802001a:	4618      	mov	r0, r3
 802001c:	f001 f868 	bl	80210f0 <Char2Hex>
 8020020:	4603      	mov	r3, r0
 8020022:	b29b      	uxth	r3, r3
 8020024:	011b      	lsls	r3, r3, #4
 8020026:	441c      	add	r4, r3
 8020028:	4b13      	ldr	r3, [pc, #76]	; (8020078 <HTTP_Firmware_Data+0x4e4>)
 802002a:	7adb      	ldrb	r3, [r3, #11]
 802002c:	4618      	mov	r0, r3
 802002e:	f001 f85f 	bl	80210f0 <Char2Hex>
 8020032:	4603      	mov	r3, r0
 8020034:	b29b      	uxth	r3, r3
 8020036:	4423      	add	r3, r4
 8020038:	461a      	mov	r2, r3
 802003a:	4b14      	ldr	r3, [pc, #80]	; (802008c <HTTP_Firmware_Data+0x4f8>)
 802003c:	601a      	str	r2, [r3, #0]
						}
						line_buffer_index = 0;
 802003e:	4b0f      	ldr	r3, [pc, #60]	; (802007c <HTTP_Firmware_Data+0x4e8>)
 8020040:	2200      	movs	r2, #0
 8020042:	801a      	strh	r2, [r3, #0]
 8020044:	e162      	b.n	802030c <HTTP_Firmware_Data+0x778>
					}
					else{
						checksum_correct = RESET;
 8020046:	4b18      	ldr	r3, [pc, #96]	; (80200a8 <HTTP_Firmware_Data+0x514>)
 8020048:	2200      	movs	r2, #0
 802004a:	701a      	strb	r2, [r3, #0]
						return ERR_CHECKSUM;
 802004c:	2302      	movs	r3, #2
 802004e:	e16f      	b.n	8020330 <HTTP_Firmware_Data+0x79c>
					}
				}
			}
			else{
				if(isReceiveData_New(line_buffer, line_buffer_index, LINE_BUFFER_LENGTH, "\r\n:")){
 8020050:	4b0a      	ldr	r3, [pc, #40]	; (802007c <HTTP_Firmware_Data+0x4e8>)
 8020052:	881b      	ldrh	r3, [r3, #0]
 8020054:	4619      	mov	r1, r3
 8020056:	4b15      	ldr	r3, [pc, #84]	; (80200ac <HTTP_Firmware_Data+0x518>)
 8020058:	f44f 7296 	mov.w	r2, #300	; 0x12c
 802005c:	4806      	ldr	r0, [pc, #24]	; (8020078 <HTTP_Firmware_Data+0x4e4>)
 802005e:	f000 ffff 	bl	8021060 <isReceiveData_New>
 8020062:	4603      	mov	r3, r0
 8020064:	2b00      	cmp	r3, #0
 8020066:	f000 8151 	beq.w	802030c <HTTP_Firmware_Data+0x778>
//					LOG(log);
//					sprintf(log,"\r\n line_buffer_index: %ld\r\n",line_buffer_index);
//					LOG(log);
					// Calculator checksum
//						LOG("7");
					if(first_http_read){
 802006a:	4b05      	ldr	r3, [pc, #20]	; (8020080 <HTTP_Firmware_Data+0x4ec>)
 802006c:	781b      	ldrb	r3, [r3, #0]
 802006e:	2b00      	cmp	r3, #0
 8020070:	d036      	beq.n	80200e0 <HTTP_Firmware_Data+0x54c>
						for (uint16_t var = 0; var < line_buffer_index; ++var) {
 8020072:	2300      	movs	r3, #0
 8020074:	80bb      	strh	r3, [r7, #4]
 8020076:	e025      	b.n	80200c4 <HTTP_Firmware_Data+0x530>
 8020078:	20003730 	.word	0x20003730
 802007c:	200002b6 	.word	0x200002b6
 8020080:	200000f8 	.word	0x200000f8
 8020084:	200002a6 	.word	0x200002a6
 8020088:	200000f9 	.word	0x200000f9
 802008c:	20003690 	.word	0x20003690
 8020090:	08040000 	.word	0x08040000
 8020094:	200002a4 	.word	0x200002a4
 8020098:	200002a8 	.word	0x200002a8
 802009c:	20000298 	.word	0x20000298
 80200a0:	200002aa 	.word	0x200002aa
 80200a4:	2000268c 	.word	0x2000268c
 80200a8:	20000098 	.word	0x20000098
 80200ac:	080268d8 	.word	0x080268d8
							line_buffer[var] = line_buffer[var+1];
 80200b0:	88bb      	ldrh	r3, [r7, #4]
 80200b2:	1c5a      	adds	r2, r3, #1
 80200b4:	88bb      	ldrh	r3, [r7, #4]
 80200b6:	49a0      	ldr	r1, [pc, #640]	; (8020338 <HTTP_Firmware_Data+0x7a4>)
 80200b8:	5c89      	ldrb	r1, [r1, r2]
 80200ba:	4a9f      	ldr	r2, [pc, #636]	; (8020338 <HTTP_Firmware_Data+0x7a4>)
 80200bc:	54d1      	strb	r1, [r2, r3]
						for (uint16_t var = 0; var < line_buffer_index; ++var) {
 80200be:	88bb      	ldrh	r3, [r7, #4]
 80200c0:	3301      	adds	r3, #1
 80200c2:	80bb      	strh	r3, [r7, #4]
 80200c4:	4b9d      	ldr	r3, [pc, #628]	; (802033c <HTTP_Firmware_Data+0x7a8>)
 80200c6:	881b      	ldrh	r3, [r3, #0]
 80200c8:	88ba      	ldrh	r2, [r7, #4]
 80200ca:	429a      	cmp	r2, r3
 80200cc:	d3f0      	bcc.n	80200b0 <HTTP_Firmware_Data+0x51c>
						}
						line_buffer_index --;
 80200ce:	4b9b      	ldr	r3, [pc, #620]	; (802033c <HTTP_Firmware_Data+0x7a8>)
 80200d0:	881b      	ldrh	r3, [r3, #0]
 80200d2:	3b01      	subs	r3, #1
 80200d4:	b29a      	uxth	r2, r3
 80200d6:	4b99      	ldr	r3, [pc, #612]	; (802033c <HTTP_Firmware_Data+0x7a8>)
 80200d8:	801a      	strh	r2, [r3, #0]
						first_http_read = RESET;
 80200da:	4b99      	ldr	r3, [pc, #612]	; (8020340 <HTTP_Firmware_Data+0x7ac>)
 80200dc:	2200      	movs	r2, #0
 80200de:	701a      	strb	r2, [r3, #0]
					}
					if(is_Firmware_Line_Data_Correct(line_buffer, line_buffer_index)){
 80200e0:	4b96      	ldr	r3, [pc, #600]	; (802033c <HTTP_Firmware_Data+0x7a8>)
 80200e2:	881b      	ldrh	r3, [r3, #0]
 80200e4:	4619      	mov	r1, r3
 80200e6:	4894      	ldr	r0, [pc, #592]	; (8020338 <HTTP_Firmware_Data+0x7a4>)
 80200e8:	f7ff fcea 	bl	801fac0 <is_Firmware_Line_Data_Correct>
 80200ec:	4603      	mov	r3, r0
 80200ee:	2b00      	cmp	r3, #0
 80200f0:	f000 8107 	beq.w	8020302 <HTTP_Firmware_Data+0x76e>
						// Check whether that line is the firmware data or not
//							LOG("8");
						if(Char2Hex(line_buffer[7])==0){
 80200f4:	4b90      	ldr	r3, [pc, #576]	; (8020338 <HTTP_Firmware_Data+0x7a4>)
 80200f6:	79db      	ldrb	r3, [r3, #7]
 80200f8:	4618      	mov	r0, r3
 80200fa:	f000 fff9 	bl	80210f0 <Char2Hex>
 80200fe:	4603      	mov	r3, r0
 8020100:	2b00      	cmp	r3, #0
 8020102:	f040 80c3 	bne.w	802028c <HTTP_Firmware_Data+0x6f8>
//								LOG("9");
							firmware_address_curr_offet = ((uint16_t)(Char2Hex(line_buffer[2]))<<12) +((uint16_t)(Char2Hex(line_buffer[3]))<<8) + ((uint16_t)(Char2Hex(line_buffer[4]))<<4)+(uint16_t)(Char2Hex(line_buffer[5]));
 8020106:	4b8c      	ldr	r3, [pc, #560]	; (8020338 <HTTP_Firmware_Data+0x7a4>)
 8020108:	789b      	ldrb	r3, [r3, #2]
 802010a:	4618      	mov	r0, r3
 802010c:	f000 fff0 	bl	80210f0 <Char2Hex>
 8020110:	4603      	mov	r3, r0
 8020112:	b29b      	uxth	r3, r3
 8020114:	031b      	lsls	r3, r3, #12
 8020116:	b29c      	uxth	r4, r3
 8020118:	4b87      	ldr	r3, [pc, #540]	; (8020338 <HTTP_Firmware_Data+0x7a4>)
 802011a:	78db      	ldrb	r3, [r3, #3]
 802011c:	4618      	mov	r0, r3
 802011e:	f000 ffe7 	bl	80210f0 <Char2Hex>
 8020122:	4603      	mov	r3, r0
 8020124:	b29b      	uxth	r3, r3
 8020126:	021b      	lsls	r3, r3, #8
 8020128:	b29b      	uxth	r3, r3
 802012a:	4423      	add	r3, r4
 802012c:	b29c      	uxth	r4, r3
 802012e:	4b82      	ldr	r3, [pc, #520]	; (8020338 <HTTP_Firmware_Data+0x7a4>)
 8020130:	791b      	ldrb	r3, [r3, #4]
 8020132:	4618      	mov	r0, r3
 8020134:	f000 ffdc 	bl	80210f0 <Char2Hex>
 8020138:	4603      	mov	r3, r0
 802013a:	b29b      	uxth	r3, r3
 802013c:	011b      	lsls	r3, r3, #4
 802013e:	b29b      	uxth	r3, r3
 8020140:	4423      	add	r3, r4
 8020142:	b29c      	uxth	r4, r3
 8020144:	4b7c      	ldr	r3, [pc, #496]	; (8020338 <HTTP_Firmware_Data+0x7a4>)
 8020146:	795b      	ldrb	r3, [r3, #5]
 8020148:	4618      	mov	r0, r3
 802014a:	f000 ffd1 	bl	80210f0 <Char2Hex>
 802014e:	4603      	mov	r3, r0
 8020150:	b29b      	uxth	r3, r3
 8020152:	4423      	add	r3, r4
 8020154:	b29a      	uxth	r2, r3
 8020156:	4b7b      	ldr	r3, [pc, #492]	; (8020344 <HTTP_Firmware_Data+0x7b0>)
 8020158:	801a      	strh	r2, [r3, #0]
							if(get_2bytes_firmware_address){
 802015a:	4b7b      	ldr	r3, [pc, #492]	; (8020348 <HTTP_Firmware_Data+0x7b4>)
 802015c:	781b      	ldrb	r3, [r3, #0]
 802015e:	2b00      	cmp	r3, #0
 8020160:	d01b      	beq.n	802019a <HTTP_Firmware_Data+0x606>
								get_2bytes_firmware_address = RESET;
 8020162:	4b79      	ldr	r3, [pc, #484]	; (8020348 <HTTP_Firmware_Data+0x7b4>)
 8020164:	2200      	movs	r2, #0
 8020166:	701a      	strb	r2, [r3, #0]
								firmware_address_of_hexfile = (firmware_address_of_hexfile<<16) | (uint32_t)firmware_address_curr_offet;
 8020168:	4b78      	ldr	r3, [pc, #480]	; (802034c <HTTP_Firmware_Data+0x7b8>)
 802016a:	681b      	ldr	r3, [r3, #0]
 802016c:	041b      	lsls	r3, r3, #16
 802016e:	4a75      	ldr	r2, [pc, #468]	; (8020344 <HTTP_Firmware_Data+0x7b0>)
 8020170:	8812      	ldrh	r2, [r2, #0]
 8020172:	4313      	orrs	r3, r2
 8020174:	4a75      	ldr	r2, [pc, #468]	; (802034c <HTTP_Firmware_Data+0x7b8>)
 8020176:	6013      	str	r3, [r2, #0]
								sprintf(log,"\r\n2 byte total :%x\r\n",firmware_address_of_hexfile);
 8020178:	4b74      	ldr	r3, [pc, #464]	; (802034c <HTTP_Firmware_Data+0x7b8>)
 802017a:	681b      	ldr	r3, [r3, #0]
 802017c:	461a      	mov	r2, r3
 802017e:	4974      	ldr	r1, [pc, #464]	; (8020350 <HTTP_Firmware_Data+0x7bc>)
 8020180:	4874      	ldr	r0, [pc, #464]	; (8020354 <HTTP_Firmware_Data+0x7c0>)
 8020182:	f005 fcdb 	bl	8025b3c <siprintf>
								LOG(log);
 8020186:	4873      	ldr	r0, [pc, #460]	; (8020354 <HTTP_Firmware_Data+0x7c0>)
 8020188:	f7ff f85c 	bl	801f244 <UART_DEBUG_Transmit>
								if(firmware_address_of_hexfile != CURRENT_FIRMWARE_ADDR){
 802018c:	4b6f      	ldr	r3, [pc, #444]	; (802034c <HTTP_Firmware_Data+0x7b8>)
 802018e:	681b      	ldr	r3, [r3, #0]
 8020190:	4a71      	ldr	r2, [pc, #452]	; (8020358 <HTTP_Firmware_Data+0x7c4>)
 8020192:	4293      	cmp	r3, r2
 8020194:	d001      	beq.n	802019a <HTTP_Firmware_Data+0x606>
									return ERR_CURRENT_FIRMWARE_ADDRESS_WRONG;
 8020196:	2303      	movs	r3, #3
 8020198:	e0ca      	b.n	8020330 <HTTP_Firmware_Data+0x79c>
								}
							}
							if(firmware_address_prev_offet >= 0xFFF0){
 802019a:	4b70      	ldr	r3, [pc, #448]	; (802035c <HTTP_Firmware_Data+0x7c8>)
 802019c:	881b      	ldrh	r3, [r3, #0]
 802019e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80201a2:	4293      	cmp	r3, r2
 80201a4:	d90d      	bls.n	80201c2 <HTTP_Firmware_Data+0x62e>
								num_byte_FF_add_to_end_buffer = 0xFFFF - firmware_address_prev_offet + 1 + firmware_address_curr_offet - prev_num_byte;
 80201a6:	4b67      	ldr	r3, [pc, #412]	; (8020344 <HTTP_Firmware_Data+0x7b0>)
 80201a8:	881a      	ldrh	r2, [r3, #0]
 80201aa:	4b6c      	ldr	r3, [pc, #432]	; (802035c <HTTP_Firmware_Data+0x7c8>)
 80201ac:	881b      	ldrh	r3, [r3, #0]
 80201ae:	1ad3      	subs	r3, r2, r3
 80201b0:	b29a      	uxth	r2, r3
 80201b2:	4b6b      	ldr	r3, [pc, #428]	; (8020360 <HTTP_Firmware_Data+0x7cc>)
 80201b4:	781b      	ldrb	r3, [r3, #0]
 80201b6:	b29b      	uxth	r3, r3
 80201b8:	1ad3      	subs	r3, r2, r3
 80201ba:	b29a      	uxth	r2, r3
 80201bc:	4b69      	ldr	r3, [pc, #420]	; (8020364 <HTTP_Firmware_Data+0x7d0>)
 80201be:	801a      	strh	r2, [r3, #0]
 80201c0:	e00c      	b.n	80201dc <HTTP_Firmware_Data+0x648>
							}
							else{
								num_byte_FF_add_to_end_buffer = firmware_address_curr_offet - firmware_address_prev_offet - prev_num_byte;
 80201c2:	4b60      	ldr	r3, [pc, #384]	; (8020344 <HTTP_Firmware_Data+0x7b0>)
 80201c4:	881a      	ldrh	r2, [r3, #0]
 80201c6:	4b65      	ldr	r3, [pc, #404]	; (802035c <HTTP_Firmware_Data+0x7c8>)
 80201c8:	881b      	ldrh	r3, [r3, #0]
 80201ca:	1ad3      	subs	r3, r2, r3
 80201cc:	b29a      	uxth	r2, r3
 80201ce:	4b64      	ldr	r3, [pc, #400]	; (8020360 <HTTP_Firmware_Data+0x7cc>)
 80201d0:	781b      	ldrb	r3, [r3, #0]
 80201d2:	b29b      	uxth	r3, r3
 80201d4:	1ad3      	subs	r3, r2, r3
 80201d6:	b29a      	uxth	r2, r3
 80201d8:	4b62      	ldr	r3, [pc, #392]	; (8020364 <HTTP_Firmware_Data+0x7d0>)
 80201da:	801a      	strh	r2, [r3, #0]
							}
//								LOG("10");
							for (uint16_t var = 0; var < num_byte_FF_add_to_end_buffer; var++) {
 80201dc:	2300      	movs	r3, #0
 80201de:	807b      	strh	r3, [r7, #2]
 80201e0:	e00c      	b.n	80201fc <HTTP_Firmware_Data+0x668>
								firmware_data[firmware_index++] = 0xFF;
 80201e2:	4b61      	ldr	r3, [pc, #388]	; (8020368 <HTTP_Firmware_Data+0x7d4>)
 80201e4:	881b      	ldrh	r3, [r3, #0]
 80201e6:	1c5a      	adds	r2, r3, #1
 80201e8:	b291      	uxth	r1, r2
 80201ea:	4a5f      	ldr	r2, [pc, #380]	; (8020368 <HTTP_Firmware_Data+0x7d4>)
 80201ec:	8011      	strh	r1, [r2, #0]
 80201ee:	461a      	mov	r2, r3
 80201f0:	4b5e      	ldr	r3, [pc, #376]	; (802036c <HTTP_Firmware_Data+0x7d8>)
 80201f2:	21ff      	movs	r1, #255	; 0xff
 80201f4:	5499      	strb	r1, [r3, r2]
							for (uint16_t var = 0; var < num_byte_FF_add_to_end_buffer; var++) {
 80201f6:	887b      	ldrh	r3, [r7, #2]
 80201f8:	3301      	adds	r3, #1
 80201fa:	807b      	strh	r3, [r7, #2]
 80201fc:	4b59      	ldr	r3, [pc, #356]	; (8020364 <HTTP_Firmware_Data+0x7d0>)
 80201fe:	881b      	ldrh	r3, [r3, #0]
 8020200:	887a      	ldrh	r2, [r7, #2]
 8020202:	429a      	cmp	r2, r3
 8020204:	d3ed      	bcc.n	80201e2 <HTTP_Firmware_Data+0x64e>
							}
//								LOG("11");
							prev_num_byte = (Char2Hex(line_buffer[0])<<4) + Char2Hex(line_buffer[1]);
 8020206:	4b4c      	ldr	r3, [pc, #304]	; (8020338 <HTTP_Firmware_Data+0x7a4>)
 8020208:	781b      	ldrb	r3, [r3, #0]
 802020a:	4618      	mov	r0, r3
 802020c:	f000 ff70 	bl	80210f0 <Char2Hex>
 8020210:	4603      	mov	r3, r0
 8020212:	b2db      	uxtb	r3, r3
 8020214:	011b      	lsls	r3, r3, #4
 8020216:	b2dc      	uxtb	r4, r3
 8020218:	4b47      	ldr	r3, [pc, #284]	; (8020338 <HTTP_Firmware_Data+0x7a4>)
 802021a:	785b      	ldrb	r3, [r3, #1]
 802021c:	4618      	mov	r0, r3
 802021e:	f000 ff67 	bl	80210f0 <Char2Hex>
 8020222:	4603      	mov	r3, r0
 8020224:	b2db      	uxtb	r3, r3
 8020226:	4423      	add	r3, r4
 8020228:	b2da      	uxtb	r2, r3
 802022a:	4b4d      	ldr	r3, [pc, #308]	; (8020360 <HTTP_Firmware_Data+0x7cc>)
 802022c:	701a      	strb	r2, [r3, #0]
							firmware_address_prev_offet = firmware_address_curr_offet;
 802022e:	4b45      	ldr	r3, [pc, #276]	; (8020344 <HTTP_Firmware_Data+0x7b0>)
 8020230:	881a      	ldrh	r2, [r3, #0]
 8020232:	4b4a      	ldr	r3, [pc, #296]	; (802035c <HTTP_Firmware_Data+0x7c8>)
 8020234:	801a      	strh	r2, [r3, #0]
//								LOG("12");
							for (uint16_t var = 8; var < line_buffer_index - 3 -2; var=var+2) {
 8020236:	2308      	movs	r3, #8
 8020238:	803b      	strh	r3, [r7, #0]
 802023a:	e020      	b.n	802027e <HTTP_Firmware_Data+0x6ea>
								//Save line to firmware data
								firmware_data[firmware_index++] = (Char2Hex(line_buffer[var])<<4)+ Char2Hex(line_buffer[var+1]);
 802023c:	883b      	ldrh	r3, [r7, #0]
 802023e:	4a3e      	ldr	r2, [pc, #248]	; (8020338 <HTTP_Firmware_Data+0x7a4>)
 8020240:	5cd3      	ldrb	r3, [r2, r3]
 8020242:	4618      	mov	r0, r3
 8020244:	f000 ff54 	bl	80210f0 <Char2Hex>
 8020248:	4603      	mov	r3, r0
 802024a:	b2db      	uxtb	r3, r3
 802024c:	011b      	lsls	r3, r3, #4
 802024e:	b2dc      	uxtb	r4, r3
 8020250:	883b      	ldrh	r3, [r7, #0]
 8020252:	3301      	adds	r3, #1
 8020254:	4a38      	ldr	r2, [pc, #224]	; (8020338 <HTTP_Firmware_Data+0x7a4>)
 8020256:	5cd3      	ldrb	r3, [r2, r3]
 8020258:	4618      	mov	r0, r3
 802025a:	f000 ff49 	bl	80210f0 <Char2Hex>
 802025e:	4603      	mov	r3, r0
 8020260:	b2da      	uxtb	r2, r3
 8020262:	4b41      	ldr	r3, [pc, #260]	; (8020368 <HTTP_Firmware_Data+0x7d4>)
 8020264:	881b      	ldrh	r3, [r3, #0]
 8020266:	1c59      	adds	r1, r3, #1
 8020268:	b288      	uxth	r0, r1
 802026a:	493f      	ldr	r1, [pc, #252]	; (8020368 <HTTP_Firmware_Data+0x7d4>)
 802026c:	8008      	strh	r0, [r1, #0]
 802026e:	4619      	mov	r1, r3
 8020270:	18a3      	adds	r3, r4, r2
 8020272:	b2da      	uxtb	r2, r3
 8020274:	4b3d      	ldr	r3, [pc, #244]	; (802036c <HTTP_Firmware_Data+0x7d8>)
 8020276:	545a      	strb	r2, [r3, r1]
							for (uint16_t var = 8; var < line_buffer_index - 3 -2; var=var+2) {
 8020278:	883b      	ldrh	r3, [r7, #0]
 802027a:	3302      	adds	r3, #2
 802027c:	803b      	strh	r3, [r7, #0]
 802027e:	883a      	ldrh	r2, [r7, #0]
 8020280:	4b2e      	ldr	r3, [pc, #184]	; (802033c <HTTP_Firmware_Data+0x7a8>)
 8020282:	881b      	ldrh	r3, [r3, #0]
 8020284:	3b05      	subs	r3, #5
 8020286:	429a      	cmp	r2, r3
 8020288:	dbd8      	blt.n	802023c <HTTP_Firmware_Data+0x6a8>
 802028a:	e036      	b.n	80202fa <HTTP_Firmware_Data+0x766>
							}
//								LOG("13");
						}
						else if(Char2Hex(line_buffer[7])==4){
 802028c:	4b2a      	ldr	r3, [pc, #168]	; (8020338 <HTTP_Firmware_Data+0x7a4>)
 802028e:	79db      	ldrb	r3, [r3, #7]
 8020290:	4618      	mov	r0, r3
 8020292:	f000 ff2d 	bl	80210f0 <Char2Hex>
 8020296:	4603      	mov	r3, r0
 8020298:	2b04      	cmp	r3, #4
 802029a:	d12e      	bne.n	80202fa <HTTP_Firmware_Data+0x766>
							firmware_address_of_hexfile = ((uint16_t)(Char2Hex(line_buffer[8]))<<12) +((uint16_t)(Char2Hex(line_buffer[9]))<<8) + ((uint16_t)(Char2Hex(line_buffer[10]))<<4)+(uint16_t)(Char2Hex(line_buffer[11]));
 802029c:	4b26      	ldr	r3, [pc, #152]	; (8020338 <HTTP_Firmware_Data+0x7a4>)
 802029e:	7a1b      	ldrb	r3, [r3, #8]
 80202a0:	4618      	mov	r0, r3
 80202a2:	f000 ff25 	bl	80210f0 <Char2Hex>
 80202a6:	4603      	mov	r3, r0
 80202a8:	b29b      	uxth	r3, r3
 80202aa:	031c      	lsls	r4, r3, #12
 80202ac:	4b22      	ldr	r3, [pc, #136]	; (8020338 <HTTP_Firmware_Data+0x7a4>)
 80202ae:	7a5b      	ldrb	r3, [r3, #9]
 80202b0:	4618      	mov	r0, r3
 80202b2:	f000 ff1d 	bl	80210f0 <Char2Hex>
 80202b6:	4603      	mov	r3, r0
 80202b8:	b29b      	uxth	r3, r3
 80202ba:	021b      	lsls	r3, r3, #8
 80202bc:	441c      	add	r4, r3
 80202be:	4b1e      	ldr	r3, [pc, #120]	; (8020338 <HTTP_Firmware_Data+0x7a4>)
 80202c0:	7a9b      	ldrb	r3, [r3, #10]
 80202c2:	4618      	mov	r0, r3
 80202c4:	f000 ff14 	bl	80210f0 <Char2Hex>
 80202c8:	4603      	mov	r3, r0
 80202ca:	b29b      	uxth	r3, r3
 80202cc:	011b      	lsls	r3, r3, #4
 80202ce:	441c      	add	r4, r3
 80202d0:	4b19      	ldr	r3, [pc, #100]	; (8020338 <HTTP_Firmware_Data+0x7a4>)
 80202d2:	7adb      	ldrb	r3, [r3, #11]
 80202d4:	4618      	mov	r0, r3
 80202d6:	f000 ff0b 	bl	80210f0 <Char2Hex>
 80202da:	4603      	mov	r3, r0
 80202dc:	b29b      	uxth	r3, r3
 80202de:	4423      	add	r3, r4
 80202e0:	461a      	mov	r2, r3
 80202e2:	4b1a      	ldr	r3, [pc, #104]	; (802034c <HTTP_Firmware_Data+0x7b8>)
 80202e4:	601a      	str	r2, [r3, #0]
							sprintf(log,"\r\n2 byte low :%x\r\n",firmware_address_of_hexfile);
 80202e6:	4b19      	ldr	r3, [pc, #100]	; (802034c <HTTP_Firmware_Data+0x7b8>)
 80202e8:	681b      	ldr	r3, [r3, #0]
 80202ea:	461a      	mov	r2, r3
 80202ec:	4920      	ldr	r1, [pc, #128]	; (8020370 <HTTP_Firmware_Data+0x7dc>)
 80202ee:	4819      	ldr	r0, [pc, #100]	; (8020354 <HTTP_Firmware_Data+0x7c0>)
 80202f0:	f005 fc24 	bl	8025b3c <siprintf>
							LOG(log);
 80202f4:	4817      	ldr	r0, [pc, #92]	; (8020354 <HTTP_Firmware_Data+0x7c0>)
 80202f6:	f7fe ffa5 	bl	801f244 <UART_DEBUG_Transmit>
						}
						line_buffer_index = 0;
 80202fa:	4b10      	ldr	r3, [pc, #64]	; (802033c <HTTP_Firmware_Data+0x7a8>)
 80202fc:	2200      	movs	r2, #0
 80202fe:	801a      	strh	r2, [r3, #0]
 8020300:	e004      	b.n	802030c <HTTP_Firmware_Data+0x778>
//							LOG("14");
					}
					else{
						checksum_correct = RESET;
 8020302:	4b1c      	ldr	r3, [pc, #112]	; (8020374 <HTTP_Firmware_Data+0x7e0>)
 8020304:	2200      	movs	r2, #0
 8020306:	701a      	strb	r2, [r3, #0]
						return ERR_CHECKSUM;
 8020308:	2302      	movs	r3, #2
 802030a:	e011      	b.n	8020330 <HTTP_Firmware_Data+0x79c>
					}
				}
			}
		}
		temp_at_response_index = (temp_at_response_index +1)%LINE_BUFFER_LENGTH;
 802030c:	4b1a      	ldr	r3, [pc, #104]	; (8020378 <HTTP_Firmware_Data+0x7e4>)
 802030e:	881b      	ldrh	r3, [r3, #0]
 8020310:	3301      	adds	r3, #1
 8020312:	4a1a      	ldr	r2, [pc, #104]	; (802037c <HTTP_Firmware_Data+0x7e8>)
 8020314:	fb82 1203 	smull	r1, r2, r2, r3
 8020318:	1151      	asrs	r1, r2, #5
 802031a:	17da      	asrs	r2, r3, #31
 802031c:	1a8a      	subs	r2, r1, r2
 802031e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8020322:	fb01 f202 	mul.w	r2, r1, r2
 8020326:	1a9a      	subs	r2, r3, r2
 8020328:	b292      	uxth	r2, r2
 802032a:	4b13      	ldr	r3, [pc, #76]	; (8020378 <HTTP_Firmware_Data+0x7e4>)
 802032c:	801a      	strh	r2, [r3, #0]
	}
	return PROCESSING;
 802032e:	2301      	movs	r3, #1
}
 8020330:	4618      	mov	r0, r3
 8020332:	3714      	adds	r7, #20
 8020334:	46bd      	mov	sp, r7
 8020336:	bd90      	pop	{r4, r7, pc}
 8020338:	20003730 	.word	0x20003730
 802033c:	200002b6 	.word	0x200002b6
 8020340:	200000f8 	.word	0x200000f8
 8020344:	200002a6 	.word	0x200002a6
 8020348:	200000f9 	.word	0x200000f9
 802034c:	20003690 	.word	0x20003690
 8020350:	080268dc 	.word	0x080268dc
 8020354:	2000250c 	.word	0x2000250c
 8020358:	08040000 	.word	0x08040000
 802035c:	200002a4 	.word	0x200002a4
 8020360:	200002a8 	.word	0x200002a8
 8020364:	20000298 	.word	0x20000298
 8020368:	200002aa 	.word	0x200002aa
 802036c:	2000268c 	.word	0x2000268c
 8020370:	080268f4 	.word	0x080268f4
 8020374:	20000098 	.word	0x20000098
 8020378:	200002b8 	.word	0x200002b8
 802037c:	1b4e81b5 	.word	0x1b4e81b5

08020380 <HTTP_Get_Content_Length>:



FlagStatus HTTP_Get_Content_Length(){
 8020380:	b580      	push	{r7, lr}
 8020382:	af00      	add	r7, sp, #0
	if(UART_SIM7600_Received_Buffer_Available()){
 8020384:	f7fe fef0 	bl	801f168 <UART_SIM7600_Received_Buffer_Available>
 8020388:	4603      	mov	r3, r0
 802038a:	2b00      	cmp	r3, #0
 802038c:	d029      	beq.n	80203e2 <HTTP_Get_Content_Length+0x62>
		temp = UART_SIM7600_Read_Received_Buffer();
 802038e:	f7fe ff01 	bl	801f194 <UART_SIM7600_Read_Received_Buffer>
 8020392:	4603      	mov	r3, r0
 8020394:	461a      	mov	r2, r3
 8020396:	4b14      	ldr	r3, [pc, #80]	; (80203e8 <HTTP_Get_Content_Length+0x68>)
 8020398:	701a      	strb	r2, [r3, #0]
		if(temp == '\r'){
 802039a:	4b13      	ldr	r3, [pc, #76]	; (80203e8 <HTTP_Get_Content_Length+0x68>)
 802039c:	781b      	ldrb	r3, [r3, #0]
 802039e:	2b0d      	cmp	r3, #13
 80203a0:	d104      	bne.n	80203ac <HTTP_Get_Content_Length+0x2c>
			http_num_ignore = 0;
 80203a2:	4b12      	ldr	r3, [pc, #72]	; (80203ec <HTTP_Get_Content_Length+0x6c>)
 80203a4:	2200      	movs	r2, #0
 80203a6:	701a      	strb	r2, [r3, #0]
			return SET;
 80203a8:	2301      	movs	r3, #1
 80203aa:	e01b      	b.n	80203e4 <HTTP_Get_Content_Length+0x64>
		}
		if(http_num_ignore==2){
 80203ac:	4b0f      	ldr	r3, [pc, #60]	; (80203ec <HTTP_Get_Content_Length+0x6c>)
 80203ae:	781b      	ldrb	r3, [r3, #0]
 80203b0:	2b02      	cmp	r3, #2
 80203b2:	d10c      	bne.n	80203ce <HTTP_Get_Content_Length+0x4e>
			content_length = content_length*10 + (uint32_t)temp - (uint32_t)48;
 80203b4:	4b0e      	ldr	r3, [pc, #56]	; (80203f0 <HTTP_Get_Content_Length+0x70>)
 80203b6:	681a      	ldr	r2, [r3, #0]
 80203b8:	4613      	mov	r3, r2
 80203ba:	009b      	lsls	r3, r3, #2
 80203bc:	4413      	add	r3, r2
 80203be:	005b      	lsls	r3, r3, #1
 80203c0:	461a      	mov	r2, r3
 80203c2:	4b09      	ldr	r3, [pc, #36]	; (80203e8 <HTTP_Get_Content_Length+0x68>)
 80203c4:	781b      	ldrb	r3, [r3, #0]
 80203c6:	4413      	add	r3, r2
 80203c8:	3b30      	subs	r3, #48	; 0x30
 80203ca:	4a09      	ldr	r2, [pc, #36]	; (80203f0 <HTTP_Get_Content_Length+0x70>)
 80203cc:	6013      	str	r3, [r2, #0]
		}
		if(temp == ','){
 80203ce:	4b06      	ldr	r3, [pc, #24]	; (80203e8 <HTTP_Get_Content_Length+0x68>)
 80203d0:	781b      	ldrb	r3, [r3, #0]
 80203d2:	2b2c      	cmp	r3, #44	; 0x2c
 80203d4:	d105      	bne.n	80203e2 <HTTP_Get_Content_Length+0x62>
			http_num_ignore ++;
 80203d6:	4b05      	ldr	r3, [pc, #20]	; (80203ec <HTTP_Get_Content_Length+0x6c>)
 80203d8:	781b      	ldrb	r3, [r3, #0]
 80203da:	3301      	adds	r3, #1
 80203dc:	b2da      	uxtb	r2, r3
 80203de:	4b03      	ldr	r3, [pc, #12]	; (80203ec <HTTP_Get_Content_Length+0x6c>)
 80203e0:	701a      	strb	r2, [r3, #0]
		}
	}
	return RESET;
 80203e2:	2300      	movs	r3, #0
}
 80203e4:	4618      	mov	r0, r3
 80203e6:	bd80      	pop	{r7, pc}
 80203e8:	200014c4 	.word	0x200014c4
 80203ec:	20000291 	.word	0x20000291
 80203f0:	20000294 	.word	0x20000294

080203f4 <HTTP_Get_State>:
/**
 * HTTP_Get_State()
 * @brief Get state of HTTP State Machine
 * @return http_state
 */
HTTP_State HTTP_Get_State(){
 80203f4:	b480      	push	{r7}
 80203f6:	af00      	add	r7, sp, #0
	return http_state;
 80203f8:	4b02      	ldr	r3, [pc, #8]	; (8020404 <HTTP_Get_State+0x10>)
 80203fa:	781b      	ldrb	r3, [r3, #0]
}
 80203fc:	4618      	mov	r0, r3
 80203fe:	46bd      	mov	sp, r7
 8020400:	bc80      	pop	{r7}
 8020402:	4770      	bx	lr
 8020404:	2000029b 	.word	0x2000029b

08020408 <HTTP_Set_State>:

/**
 * HTTP_Set_State()
 * @brief This is function for setting state to HTTP State Machine
 */
void HTTP_Set_State(HTTP_State _http_state){
 8020408:	b480      	push	{r7}
 802040a:	b083      	sub	sp, #12
 802040c:	af00      	add	r7, sp, #0
 802040e:	4603      	mov	r3, r0
 8020410:	71fb      	strb	r3, [r7, #7]
	http_state = _http_state;
 8020412:	4a04      	ldr	r2, [pc, #16]	; (8020424 <HTTP_Set_State+0x1c>)
 8020414:	79fb      	ldrb	r3, [r7, #7]
 8020416:	7013      	strb	r3, [r2, #0]
}
 8020418:	bf00      	nop
 802041a:	370c      	adds	r7, #12
 802041c:	46bd      	mov	sp, r7
 802041e:	bc80      	pop	{r7}
 8020420:	4770      	bx	lr
 8020422:	bf00      	nop
 8020424:	2000029b 	.word	0x2000029b

08020428 <Clear_Http_Command>:
void Reset_HttpConfiguration_State(){
	Reset_No_Board();
	HTTP_Set_State(HTTP_INIT);
}

void Clear_Http_Command(){
 8020428:	b480      	push	{r7}
 802042a:	af00      	add	r7, sp, #0
	default_atcommand = SET;
 802042c:	4b03      	ldr	r3, [pc, #12]	; (802043c <Clear_Http_Command+0x14>)
 802042e:	2201      	movs	r2, #1
 8020430:	701a      	strb	r2, [r3, #0]
}
 8020432:	bf00      	nop
 8020434:	46bd      	mov	sp, r7
 8020436:	bc80      	pop	{r7}
 8020438:	4770      	bx	lr
 802043a:	bf00      	nop
 802043c:	20000096 	.word	0x20000096

08020440 <HTTP_Return_Content_Length>:
void Set_Http_Command(char * atcommand){
	sprintf(http_at_command,"%s",atcommand);
	default_atcommand = RESET;
}

uint32_t HTTP_Return_Content_Length(){
 8020440:	b480      	push	{r7}
 8020442:	af00      	add	r7, sp, #0
	return content_length;
 8020444:	4b02      	ldr	r3, [pc, #8]	; (8020450 <HTTP_Return_Content_Length+0x10>)
 8020446:	681b      	ldr	r3, [r3, #0]
}
 8020448:	4618      	mov	r0, r3
 802044a:	46bd      	mov	sp, r7
 802044c:	bc80      	pop	{r7}
 802044e:	4770      	bx	lr
 8020450:	20000294 	.word	0x20000294

08020454 <MQTT_Display_State>:

/**
 * MQTT_Display_State()
 * @brief This is function for display state of State Machine. It only show State when having a state changation.
 */
void MQTT_Display_State(void){
 8020454:	b580      	push	{r7, lr}
 8020456:	af00      	add	r7, sp, #0
	if(prev_mqtt_state!=mqtt_state){
 8020458:	4b40      	ldr	r3, [pc, #256]	; (802055c <MQTT_Display_State+0x108>)
 802045a:	781a      	ldrb	r2, [r3, #0]
 802045c:	4b40      	ldr	r3, [pc, #256]	; (8020560 <MQTT_Display_State+0x10c>)
 802045e:	781b      	ldrb	r3, [r3, #0]
 8020460:	429a      	cmp	r2, r3
 8020462:	d076      	beq.n	8020552 <MQTT_Display_State+0xfe>
		prev_mqtt_state = mqtt_state;
 8020464:	4b3e      	ldr	r3, [pc, #248]	; (8020560 <MQTT_Display_State+0x10c>)
 8020466:	781a      	ldrb	r2, [r3, #0]
 8020468:	4b3c      	ldr	r3, [pc, #240]	; (802055c <MQTT_Display_State+0x108>)
 802046a:	701a      	strb	r2, [r3, #0]
		switch (mqtt_state) {
 802046c:	4b3c      	ldr	r3, [pc, #240]	; (8020560 <MQTT_Display_State+0x10c>)
 802046e:	781b      	ldrb	r3, [r3, #0]
 8020470:	2b11      	cmp	r3, #17
 8020472:	d870      	bhi.n	8020556 <MQTT_Display_State+0x102>
 8020474:	a201      	add	r2, pc, #4	; (adr r2, 802047c <MQTT_Display_State+0x28>)
 8020476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802047a:	bf00      	nop
 802047c:	080204c5 	.word	0x080204c5
 8020480:	080204cd 	.word	0x080204cd
 8020484:	080204d5 	.word	0x080204d5
 8020488:	080204dd 	.word	0x080204dd
 802048c:	080204e5 	.word	0x080204e5
 8020490:	080204ed 	.word	0x080204ed
 8020494:	080204f5 	.word	0x080204f5
 8020498:	080204fd 	.word	0x080204fd
 802049c:	08020505 	.word	0x08020505
 80204a0:	0802050b 	.word	0x0802050b
 80204a4:	08020513 	.word	0x08020513
 80204a8:	0802051b 	.word	0x0802051b
 80204ac:	08020523 	.word	0x08020523
 80204b0:	0802052b 	.word	0x0802052b
 80204b4:	08020533 	.word	0x08020533
 80204b8:	0802053b 	.word	0x0802053b
 80204bc:	08020543 	.word	0x08020543
 80204c0:	0802054b 	.word	0x0802054b
			case MQTT_INIT:
				LOG("\r\nMQTT INIT\r\n");
 80204c4:	4827      	ldr	r0, [pc, #156]	; (8020564 <MQTT_Display_State+0x110>)
 80204c6:	f7fe febd 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 80204ca:	e045      	b.n	8020558 <MQTT_Display_State+0x104>
			case MQTT_START:
				LOG("\r\nMQTT START\r\n");
 80204cc:	4826      	ldr	r0, [pc, #152]	; (8020568 <MQTT_Display_State+0x114>)
 80204ce:	f7fe feb9 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 80204d2:	e041      	b.n	8020558 <MQTT_Display_State+0x104>
			case MQTT_WAIT_FOR_START:
				LOG("\r\nMQTT WAIT FOR START\r\n");
 80204d4:	4825      	ldr	r0, [pc, #148]	; (802056c <MQTT_Display_State+0x118>)
 80204d6:	f7fe feb5 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 80204da:	e03d      	b.n	8020558 <MQTT_Display_State+0x104>
			case MQTT_ACCQUIRE_CLIENT:
				LOG("\r\nMQTT ACCQUIRE CLIENT\r\n");
 80204dc:	4824      	ldr	r0, [pc, #144]	; (8020570 <MQTT_Display_State+0x11c>)
 80204de:	f7fe feb1 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 80204e2:	e039      	b.n	8020558 <MQTT_Display_State+0x104>
			case MQTT_WAIT_FOR_ACCQUIRE_CLIENT:
				LOG("\r\nMQTT WAIT FOR ACCQUIRE CLIENT\r\n");
 80204e4:	4823      	ldr	r0, [pc, #140]	; (8020574 <MQTT_Display_State+0x120>)
 80204e6:	f7fe fead 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 80204ea:	e035      	b.n	8020558 <MQTT_Display_State+0x104>
			case MQTT_CONNECT:
				LOG("\r\nMQTT CONNECT\r\n");
 80204ec:	4822      	ldr	r0, [pc, #136]	; (8020578 <MQTT_Display_State+0x124>)
 80204ee:	f7fe fea9 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 80204f2:	e031      	b.n	8020558 <MQTT_Display_State+0x104>
			case MQTT_WAIT_FOR_CONNECT:
				LOG("\r\nMQTT WAIT FOR CONNECT\r\n");
 80204f4:	4821      	ldr	r0, [pc, #132]	; (802057c <MQTT_Display_State+0x128>)
 80204f6:	f7fe fea5 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 80204fa:	e02d      	b.n	8020558 <MQTT_Display_State+0x104>
			case MQTT_TOPIC:
				LOG("\r\nMQTT TOPIC\r\n");
 80204fc:	4820      	ldr	r0, [pc, #128]	; (8020580 <MQTT_Display_State+0x12c>)
 80204fe:	f7fe fea1 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 8020502:	e029      	b.n	8020558 <MQTT_Display_State+0x104>
			case MQTT_WAIT_FOR_TOPIC:
				LOG("\r\nMQTT WAIT FOR TOPIC\r\n");
 8020504:	481f      	ldr	r0, [pc, #124]	; (8020584 <MQTT_Display_State+0x130>)
 8020506:	f7fe fe9d 	bl	801f244 <UART_DEBUG_Transmit>
			case MQTT_INPUT_TOPIC:
				LOG("\r\nMQTT INPUT TOPIC\r\n");
 802050a:	481f      	ldr	r0, [pc, #124]	; (8020588 <MQTT_Display_State+0x134>)
 802050c:	f7fe fe9a 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 8020510:	e022      	b.n	8020558 <MQTT_Display_State+0x104>
			case MQTT_WAIT_FOR_INPUT_TOPIC:
				LOG("\r\nMQTT WAIT FOR INPUT TOPIC\r\n");
 8020512:	481e      	ldr	r0, [pc, #120]	; (802058c <MQTT_Display_State+0x138>)
 8020514:	f7fe fe96 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 8020518:	e01e      	b.n	8020558 <MQTT_Display_State+0x104>
			case MQTT_PAYLOAD:
				LOG("\r\nMQTT PAYLOAD\r\n");
 802051a:	481d      	ldr	r0, [pc, #116]	; (8020590 <MQTT_Display_State+0x13c>)
 802051c:	f7fe fe92 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 8020520:	e01a      	b.n	8020558 <MQTT_Display_State+0x104>
			case MQTT_WAIT_FOR_PAYLOAD:
				LOG("\r\nMQTT WAIT FOR PAYLOAD\r\n");
 8020522:	481c      	ldr	r0, [pc, #112]	; (8020594 <MQTT_Display_State+0x140>)
 8020524:	f7fe fe8e 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 8020528:	e016      	b.n	8020558 <MQTT_Display_State+0x104>
			case MQTT_INPUT_PAYLOAD:
				LOG("\r\nMQTT INPUT PAYLOAD\r\n");
 802052a:	481b      	ldr	r0, [pc, #108]	; (8020598 <MQTT_Display_State+0x144>)
 802052c:	f7fe fe8a 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 8020530:	e012      	b.n	8020558 <MQTT_Display_State+0x104>
			case MQTT_WAIT_FOR_INPUT_PAYLOAD:
				LOG("\r\nMQTT WAIT FOR INPUT PAYLOAD\r\n");
 8020532:	481a      	ldr	r0, [pc, #104]	; (802059c <MQTT_Display_State+0x148>)
 8020534:	f7fe fe86 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 8020538:	e00e      	b.n	8020558 <MQTT_Display_State+0x104>

			case MQTT_PUBLISH:
				LOG("\r\nMQTT PUBLISH\r\n");
 802053a:	4819      	ldr	r0, [pc, #100]	; (80205a0 <MQTT_Display_State+0x14c>)
 802053c:	f7fe fe82 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 8020540:	e00a      	b.n	8020558 <MQTT_Display_State+0x104>
			case MQTT_WAIT_FOR_PUBLISH:
				LOG("\r\nMQTT WAIT FOR PUBLISH\r\n");
 8020542:	4818      	ldr	r0, [pc, #96]	; (80205a4 <MQTT_Display_State+0x150>)
 8020544:	f7fe fe7e 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 8020548:	e006      	b.n	8020558 <MQTT_Display_State+0x104>
			case MQTT_WAIT_NEXT_COMMAND:
				LOG("\r\nMQTT WAIT NEW COMMAND\r\n");
 802054a:	4817      	ldr	r0, [pc, #92]	; (80205a8 <MQTT_Display_State+0x154>)
 802054c:	f7fe fe7a 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 8020550:	e002      	b.n	8020558 <MQTT_Display_State+0x104>
			default:
				break;
		}
	}
 8020552:	bf00      	nop
 8020554:	e000      	b.n	8020558 <MQTT_Display_State+0x104>
				break;
 8020556:	bf00      	nop
}
 8020558:	bf00      	nop
 802055a:	bd80      	pop	{r7, pc}
 802055c:	200002bc 	.word	0x200002bc
 8020560:	200002bd 	.word	0x200002bd
 8020564:	08026940 	.word	0x08026940
 8020568:	08026950 	.word	0x08026950
 802056c:	08026960 	.word	0x08026960
 8020570:	08026978 	.word	0x08026978
 8020574:	08026994 	.word	0x08026994
 8020578:	080269b8 	.word	0x080269b8
 802057c:	080269cc 	.word	0x080269cc
 8020580:	080269e8 	.word	0x080269e8
 8020584:	080269f8 	.word	0x080269f8
 8020588:	08026a10 	.word	0x08026a10
 802058c:	08026a28 	.word	0x08026a28
 8020590:	08026a48 	.word	0x08026a48
 8020594:	08026a5c 	.word	0x08026a5c
 8020598:	08026a78 	.word	0x08026a78
 802059c:	08026a90 	.word	0x08026a90
 80205a0:	08026ab0 	.word	0x08026ab0
 80205a4:	08026ac4 	.word	0x08026ac4
 80205a8:	08026ae0 	.word	0x08026ae0

080205ac <MQTT_Run>:
 * MQTT_Run()
 * @param None
 * @retval 0 if state < SIM7600_MAX_STATE else return 1
 * @brief This is function can be called from external file. It run follow state machine method. Not have param.
 */
uint8_t MQTT_Run(void){
 80205ac:	b580      	push	{r7, lr}
 80205ae:	af00      	add	r7, sp, #0
	MQTT_Display_State();
 80205b0:	f7ff ff50 	bl	8020454 <MQTT_Display_State>
	if(mqtt_state == MQTT_WAIT_NEXT_COMMAND){
 80205b4:	4b0a      	ldr	r3, [pc, #40]	; (80205e0 <MQTT_Run+0x34>)
 80205b6:	781b      	ldrb	r3, [r3, #0]
 80205b8:	2b11      	cmp	r3, #17
 80205ba:	d101      	bne.n	80205c0 <MQTT_Run+0x14>
		return 1;
 80205bc:	2301      	movs	r3, #1
 80205be:	e00d      	b.n	80205dc <MQTT_Run+0x30>
	}
	else if(mqtt_state == MQTT_MAX_STATE){
 80205c0:	4b07      	ldr	r3, [pc, #28]	; (80205e0 <MQTT_Run+0x34>)
 80205c2:	781b      	ldrb	r3, [r3, #0]
 80205c4:	2b12      	cmp	r3, #18
 80205c6:	d101      	bne.n	80205cc <MQTT_Run+0x20>
		//Get error, need to break out LockerConfiguration and Update to Server
		return 2;
 80205c8:	2302      	movs	r3, #2
 80205ca:	e007      	b.n	80205dc <MQTT_Run+0x30>
	}
	else{
		(*mqtt_state_machine[mqtt_state].func)();
 80205cc:	4b04      	ldr	r3, [pc, #16]	; (80205e0 <MQTT_Run+0x34>)
 80205ce:	781b      	ldrb	r3, [r3, #0]
 80205d0:	4a04      	ldr	r2, [pc, #16]	; (80205e4 <MQTT_Run+0x38>)
 80205d2:	00db      	lsls	r3, r3, #3
 80205d4:	4413      	add	r3, r2
 80205d6:	685b      	ldr	r3, [r3, #4]
 80205d8:	4798      	blx	r3
		return 0;
 80205da:	2300      	movs	r3, #0
	}
}
 80205dc:	4618      	mov	r0, r3
 80205de:	bd80      	pop	{r7, pc}
 80205e0:	200002bd 	.word	0x200002bd
 80205e4:	20000140 	.word	0x20000140

080205e8 <MQTT_Init>:
 * MQTT_Init()
 * @param None
 * @retval None
 * @brief This function for initiating some variables and buffer in run time
 */
void MQTT_Init(){
 80205e8:	b480      	push	{r7}
 80205ea:	af00      	add	r7, sp, #0
	mqtt_state = MQTT_START;
 80205ec:	4b03      	ldr	r3, [pc, #12]	; (80205fc <MQTT_Init+0x14>)
 80205ee:	2201      	movs	r2, #1
 80205f0:	701a      	strb	r2, [r3, #0]
}
 80205f2:	bf00      	nop
 80205f4:	46bd      	mov	sp, r7
 80205f6:	bc80      	pop	{r7}
 80205f8:	4770      	bx	lr
 80205fa:	bf00      	nop
 80205fc:	200002bd 	.word	0x200002bd

08020600 <MQTT_Start>:
 * MQTT_Start()
 * @param None
 * @retval None
 * @brief This function for starting MQTT Service
 */
void MQTT_Start(){
 8020600:	b580      	push	{r7, lr}
 8020602:	af00      	add	r7, sp, #0
	Clear_Reiceive_Buffer();
 8020604:	f7fe fea4 	bl	801f350 <Clear_Reiceive_Buffer>
	//Clear_Reiceive_Buffer();
	sprintf(mqtt_client.clientid,"\"%d\"",Get_Box_ID());
 8020608:	f7fe f896 	bl	801e738 <Get_Box_ID>
 802060c:	4603      	mov	r3, r0
 802060e:	461a      	mov	r2, r3
 8020610:	4908      	ldr	r1, [pc, #32]	; (8020634 <MQTT_Start+0x34>)
 8020612:	4809      	ldr	r0, [pc, #36]	; (8020638 <MQTT_Start+0x38>)
 8020614:	f005 fa92 	bl	8025b3c <siprintf>
	sprintf((char*)atcommand,"AT+CMQTTSTART\r\n");
 8020618:	4908      	ldr	r1, [pc, #32]	; (802063c <MQTT_Start+0x3c>)
 802061a:	4809      	ldr	r0, [pc, #36]	; (8020640 <MQTT_Start+0x40>)
 802061c:	f005 fa8e 	bl	8025b3c <siprintf>
	UART_SIM7600_Transmit(atcommand);
 8020620:	4807      	ldr	r0, [pc, #28]	; (8020640 <MQTT_Start+0x40>)
 8020622:	f7fe fd75 	bl	801f110 <UART_SIM7600_Transmit>
	Clear_Mqtt_Command();
 8020626:	f000 fc39 	bl	8020e9c <Clear_Mqtt_Command>
	mqtt_state = MQTT_WAIT_FOR_START;
 802062a:	4b06      	ldr	r3, [pc, #24]	; (8020644 <MQTT_Start+0x44>)
 802062c:	2202      	movs	r2, #2
 802062e:	701a      	strb	r2, [r3, #0]
}
 8020630:	bf00      	nop
 8020632:	bd80      	pop	{r7, pc}
 8020634:	08026b10 	.word	0x08026b10
 8020638:	200000fd 	.word	0x200000fd
 802063c:	08026b18 	.word	0x08026b18
 8020640:	20004294 	.word	0x20004294
 8020644:	200002bd 	.word	0x200002bd

08020648 <MQTT_Wait_For_Start>:
 * @retval None
 * @brief This function for waiting to start MQTT service respond.
 * @brief If AT_Result = AT_OK so switch to MQTT_ACCQUIRE_CLIENT
 * @brief else It is AT_ERROR so switch to MQTT_MAX_STATE for reset Simcom7600 after.
 */
void MQTT_Wait_For_Start(){
 8020648:	b580      	push	{r7, lr}
 802064a:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_OK);
	switch (Get_AT_Result()){
 802064c:	f000 fea6 	bl	802139c <Get_AT_Result>
 8020650:	4603      	mov	r3, r0
 8020652:	2b00      	cmp	r3, #0
 8020654:	d002      	beq.n	802065c <MQTT_Wait_For_Start+0x14>
 8020656:	2b01      	cmp	r3, #1
 8020658:	d006      	beq.n	8020668 <MQTT_Wait_For_Start+0x20>
 802065a:	e017      	b.n	802068c <MQTT_Wait_For_Start+0x44>
		case AT_OK:
			Clear_AT_Result();
 802065c:	f000 fea8 	bl	80213b0 <Clear_AT_Result>
			mqtt_state=MQTT_ACCQUIRE_CLIENT;
 8020660:	4b0d      	ldr	r3, [pc, #52]	; (8020698 <MQTT_Wait_For_Start+0x50>)
 8020662:	2203      	movs	r2, #3
 8020664:	701a      	strb	r2, [r3, #0]
			break;
 8020666:	e014      	b.n	8020692 <MQTT_Wait_For_Start+0x4a>
		case AT_ERROR:
			Clear_AT_Result();
 8020668:	f000 fea2 	bl	80213b0 <Clear_AT_Result>
			Lcd_Clear_Display();
 802066c:	f7fe f814 	bl	801e698 <Lcd_Clear_Display>
			Lcd_Show_String("MQTT Config: Fail", 0, 0);
 8020670:	2200      	movs	r2, #0
 8020672:	2100      	movs	r1, #0
 8020674:	4809      	ldr	r0, [pc, #36]	; (802069c <MQTT_Wait_For_Start+0x54>)
 8020676:	f7fe f827 	bl	801e6c8 <Lcd_Show_String>
			Lcd_Show_String("START", 1, 0);
 802067a:	2200      	movs	r2, #0
 802067c:	2101      	movs	r1, #1
 802067e:	4808      	ldr	r0, [pc, #32]	; (80206a0 <MQTT_Wait_For_Start+0x58>)
 8020680:	f7fe f822 	bl	801e6c8 <Lcd_Show_String>
			mqtt_state = MQTT_MAX_STATE;
 8020684:	4b04      	ldr	r3, [pc, #16]	; (8020698 <MQTT_Wait_For_Start+0x50>)
 8020686:	2212      	movs	r2, #18
 8020688:	701a      	strb	r2, [r3, #0]
			break;
 802068a:	e002      	b.n	8020692 <MQTT_Wait_For_Start+0x4a>
		default:
			Clear_AT_Result();
 802068c:	f000 fe90 	bl	80213b0 <Clear_AT_Result>
			break;
 8020690:	bf00      	nop
	}
}
 8020692:	bf00      	nop
 8020694:	bd80      	pop	{r7, pc}
 8020696:	bf00      	nop
 8020698:	200002bd 	.word	0x200002bd
 802069c:	08026b28 	.word	0x08026b28
 80206a0:	08026b3c 	.word	0x08026b3c

080206a4 <MQTT_Accquire_Client>:
 * MQTT_Accquire_Client()
 * @param None
 * @retval None
 * @brief This function for waiting to accquire a MQTT Client
 */
void MQTT_Accquire_Client(){
 80206a4:	b580      	push	{r7, lr}
 80206a6:	b082      	sub	sp, #8
 80206a8:	af02      	add	r7, sp, #8
	// SSL Server
	sprintf((char*)atcommand,"AT+CMQTTACCQ=%d,%s,%d\r\n",mqtt_client.client_index,mqtt_client.clientid,SERVER_TYPE);
 80206aa:	4b0a      	ldr	r3, [pc, #40]	; (80206d4 <MQTT_Accquire_Client+0x30>)
 80206ac:	781b      	ldrb	r3, [r3, #0]
 80206ae:	461a      	mov	r2, r3
 80206b0:	2300      	movs	r3, #0
 80206b2:	9300      	str	r3, [sp, #0]
 80206b4:	4b08      	ldr	r3, [pc, #32]	; (80206d8 <MQTT_Accquire_Client+0x34>)
 80206b6:	4909      	ldr	r1, [pc, #36]	; (80206dc <MQTT_Accquire_Client+0x38>)
 80206b8:	4809      	ldr	r0, [pc, #36]	; (80206e0 <MQTT_Accquire_Client+0x3c>)
 80206ba:	f005 fa3f 	bl	8025b3c <siprintf>
	//Clear_Reiceive_Buffer();
	UART_SIM7600_Transmit(atcommand);
 80206be:	4808      	ldr	r0, [pc, #32]	; (80206e0 <MQTT_Accquire_Client+0x3c>)
 80206c0:	f7fe fd26 	bl	801f110 <UART_SIM7600_Transmit>
	Clear_Mqtt_Command();
 80206c4:	f000 fbea 	bl	8020e9c <Clear_Mqtt_Command>
	mqtt_state = MQTT_WAIT_FOR_ACCQUIRE_CLIENT;
 80206c8:	4b06      	ldr	r3, [pc, #24]	; (80206e4 <MQTT_Accquire_Client+0x40>)
 80206ca:	2204      	movs	r2, #4
 80206cc:	701a      	strb	r2, [r3, #0]
}
 80206ce:	bf00      	nop
 80206d0:	46bd      	mov	sp, r7
 80206d2:	bd80      	pop	{r7, pc}
 80206d4:	200000fc 	.word	0x200000fc
 80206d8:	200000fd 	.word	0x200000fd
 80206dc:	08026b44 	.word	0x08026b44
 80206e0:	20004294 	.word	0x20004294
 80206e4:	200002bd 	.word	0x200002bd

080206e8 <MQTT_Wait_For_Accquire_Client>:
 * @retval None
 * @brief This function for waiting to accquire MQTT client respond.
 * @brief If AT_Result = AT_OK so switch to MQTT_SSL_CFG
 * @brief else It is AT_ERROR so switch to MQTT_MAX_STATE for reset Simcom7600 after.
 */
void MQTT_Wait_For_Accquire_Client(){
 80206e8:	b580      	push	{r7, lr}
 80206ea:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_OK);
	switch (Get_AT_Result()) {
 80206ec:	f000 fe56 	bl	802139c <Get_AT_Result>
 80206f0:	4603      	mov	r3, r0
 80206f2:	2b00      	cmp	r3, #0
 80206f4:	d002      	beq.n	80206fc <MQTT_Wait_For_Accquire_Client+0x14>
 80206f6:	2b01      	cmp	r3, #1
 80206f8:	d006      	beq.n	8020708 <MQTT_Wait_For_Accquire_Client+0x20>
 80206fa:	e017      	b.n	802072c <MQTT_Wait_For_Accquire_Client+0x44>
		case AT_OK:
			Clear_AT_Result();
 80206fc:	f000 fe58 	bl	80213b0 <Clear_AT_Result>
			mqtt_state=MQTT_CONNECT;
 8020700:	4b0d      	ldr	r3, [pc, #52]	; (8020738 <MQTT_Wait_For_Accquire_Client+0x50>)
 8020702:	2205      	movs	r2, #5
 8020704:	701a      	strb	r2, [r3, #0]
			break;
 8020706:	e014      	b.n	8020732 <MQTT_Wait_For_Accquire_Client+0x4a>
		case AT_ERROR:
			Clear_AT_Result();
 8020708:	f000 fe52 	bl	80213b0 <Clear_AT_Result>
			Lcd_Clear_Display();
 802070c:	f7fd ffc4 	bl	801e698 <Lcd_Clear_Display>
			Lcd_Show_String("MQTT Config: Fail", 0, 0);
 8020710:	2200      	movs	r2, #0
 8020712:	2100      	movs	r1, #0
 8020714:	4809      	ldr	r0, [pc, #36]	; (802073c <MQTT_Wait_For_Accquire_Client+0x54>)
 8020716:	f7fd ffd7 	bl	801e6c8 <Lcd_Show_String>
			Lcd_Show_String("ACCQUIRE_CLIENT", 1, 0);
 802071a:	2200      	movs	r2, #0
 802071c:	2101      	movs	r1, #1
 802071e:	4808      	ldr	r0, [pc, #32]	; (8020740 <MQTT_Wait_For_Accquire_Client+0x58>)
 8020720:	f7fd ffd2 	bl	801e6c8 <Lcd_Show_String>
			mqtt_state = MQTT_MAX_STATE;
 8020724:	4b04      	ldr	r3, [pc, #16]	; (8020738 <MQTT_Wait_For_Accquire_Client+0x50>)
 8020726:	2212      	movs	r2, #18
 8020728:	701a      	strb	r2, [r3, #0]
			break;
 802072a:	e002      	b.n	8020732 <MQTT_Wait_For_Accquire_Client+0x4a>
		default:
			Clear_AT_Result();
 802072c:	f000 fe40 	bl	80213b0 <Clear_AT_Result>
			break;
 8020730:	bf00      	nop
	}
}
 8020732:	bf00      	nop
 8020734:	bd80      	pop	{r7, pc}
 8020736:	bf00      	nop
 8020738:	200002bd 	.word	0x200002bd
 802073c:	08026b28 	.word	0x08026b28
 8020740:	08026b5c 	.word	0x08026b5c

08020744 <MQTT_Connect>:
 * MQTT_Connect()
 * @param None
 * @retval None
 * @brief This function for connecting MQTT Client to MQTT Broker.
 */
void MQTT_Connect(){
 8020744:	b5b0      	push	{r4, r5, r7, lr}
 8020746:	b084      	sub	sp, #16
 8020748:	af04      	add	r7, sp, #16
	sprintf((char*)atcommand,"AT+CMQTTCONNECT=%d,%s,%d,%d,%s,%s\r\n",mqtt_client.client_index,mqtt_client.server_address,
 802074a:	4b18      	ldr	r3, [pc, #96]	; (80207ac <MQTT_Connect+0x68>)
 802074c:	781b      	ldrb	r3, [r3, #0]
 802074e:	461d      	mov	r5, r3
 8020750:	4b16      	ldr	r3, [pc, #88]	; (80207ac <MQTT_Connect+0x68>)
 8020752:	6b59      	ldr	r1, [r3, #52]	; 0x34
			mqtt_client.keepAlive,mqtt_client.clean_session,mqtt_client.user,mqtt_client.pass);
 8020754:	4b15      	ldr	r3, [pc, #84]	; (80207ac <MQTT_Connect+0x68>)
 8020756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
	sprintf((char*)atcommand,"AT+CMQTTCONNECT=%d,%s,%d,%d,%s,%s\r\n",mqtt_client.client_index,mqtt_client.server_address,
 802075a:	4618      	mov	r0, r3
			mqtt_client.keepAlive,mqtt_client.clean_session,mqtt_client.user,mqtt_client.pass);
 802075c:	4b13      	ldr	r3, [pc, #76]	; (80207ac <MQTT_Connect+0x68>)
 802075e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
	sprintf((char*)atcommand,"AT+CMQTTCONNECT=%d,%s,%d,%d,%s,%s\r\n",mqtt_client.client_index,mqtt_client.server_address,
 8020762:	461c      	mov	r4, r3
 8020764:	4b11      	ldr	r3, [pc, #68]	; (80207ac <MQTT_Connect+0x68>)
 8020766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020768:	4a10      	ldr	r2, [pc, #64]	; (80207ac <MQTT_Connect+0x68>)
 802076a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 802076c:	9203      	str	r2, [sp, #12]
 802076e:	9302      	str	r3, [sp, #8]
 8020770:	9401      	str	r4, [sp, #4]
 8020772:	9000      	str	r0, [sp, #0]
 8020774:	460b      	mov	r3, r1
 8020776:	462a      	mov	r2, r5
 8020778:	490d      	ldr	r1, [pc, #52]	; (80207b0 <MQTT_Connect+0x6c>)
 802077a:	480e      	ldr	r0, [pc, #56]	; (80207b4 <MQTT_Connect+0x70>)
 802077c:	f005 f9de 	bl	8025b3c <siprintf>
	//Clear_Reiceive_Buffer();
	UART_SIM7600_Transmit(atcommand);
 8020780:	480c      	ldr	r0, [pc, #48]	; (80207b4 <MQTT_Connect+0x70>)
 8020782:	f7fe fcc5 	bl	801f110 <UART_SIM7600_Transmit>
	Clear_Mqtt_Command();
 8020786:	f000 fb89 	bl	8020e9c <Clear_Mqtt_Command>
	Clear_Mqtt_Timeout_Flag();
 802078a:	f000 fb7b 	bl	8020e84 <Clear_Mqtt_Timeout_Flag>
	task_MQTT_Timeout_ID= SCH_Add_Task(Set_Mqtt_Timeout_Flag, CONNECT_TIMEOUT, 0);
 802078e:	2200      	movs	r2, #0
 8020790:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8020794:	4808      	ldr	r0, [pc, #32]	; (80207b8 <MQTT_Connect+0x74>)
 8020796:	f000 fe57 	bl	8021448 <SCH_Add_Task>
 802079a:	4603      	mov	r3, r0
 802079c:	4a07      	ldr	r2, [pc, #28]	; (80207bc <MQTT_Connect+0x78>)
 802079e:	6013      	str	r3, [r2, #0]
	mqtt_state = MQTT_WAIT_FOR_CONNECT;
 80207a0:	4b07      	ldr	r3, [pc, #28]	; (80207c0 <MQTT_Connect+0x7c>)
 80207a2:	2206      	movs	r2, #6
 80207a4:	701a      	strb	r2, [r3, #0]
}
 80207a6:	bf00      	nop
 80207a8:	46bd      	mov	sp, r7
 80207aa:	bdb0      	pop	{r4, r5, r7, pc}
 80207ac:	200000fc 	.word	0x200000fc
 80207b0:	08026b6c 	.word	0x08026b6c
 80207b4:	20004294 	.word	0x20004294
 80207b8:	08020e6d 	.word	0x08020e6d
 80207bc:	2000428c 	.word	0x2000428c
 80207c0:	200002bd 	.word	0x200002bd

080207c4 <MQTT_Wait_For_Connect>:
 * @retval None
 * @brief This function for waiting to connect MQTT Client to MQTT Broker respond.
 * @brief If AT_Result = AT_OK so switch to MQTT_SUBCRIBE_TOPIC.
 * @brief else It is AT_ERROR so switch to MQTT_MAX_STATE for reset Simcom7600 after.
 */
void MQTT_Wait_For_Connect(){
 80207c4:	b580      	push	{r7, lr}
 80207c6:	af00      	add	r7, sp, #0
	if(is_Mqtt_TimeOutFlag()){
 80207c8:	f000 fb46 	bl	8020e58 <is_Mqtt_TimeOutFlag>
 80207cc:	4603      	mov	r3, r0
 80207ce:	2b00      	cmp	r3, #0
 80207d0:	d02c      	beq.n	802082c <MQTT_Wait_For_Connect+0x68>
//		Wait_For_Respone(AT_OK);
		switch (Get_AT_Result()) {
 80207d2:	f000 fde3 	bl	802139c <Get_AT_Result>
 80207d6:	4603      	mov	r3, r0
 80207d8:	2b00      	cmp	r3, #0
 80207da:	d002      	beq.n	80207e2 <MQTT_Wait_For_Connect+0x1e>
 80207dc:	2b01      	cmp	r3, #1
 80207de:	d00b      	beq.n	80207f8 <MQTT_Wait_For_Connect+0x34>
 80207e0:	e021      	b.n	8020826 <MQTT_Wait_For_Connect+0x62>
			case AT_OK:
				Clear_AT_Result();
 80207e2:	f000 fde5 	bl	80213b0 <Clear_AT_Result>
				mqtt_state=MQTT_WAIT_NEXT_COMMAND;
 80207e6:	4b13      	ldr	r3, [pc, #76]	; (8020834 <MQTT_Wait_For_Connect+0x70>)
 80207e8:	2211      	movs	r2, #17
 80207ea:	701a      	strb	r2, [r3, #0]
				SCH_Delete_Task(task_MQTT_Timeout_ID);
 80207ec:	4b12      	ldr	r3, [pc, #72]	; (8020838 <MQTT_Wait_For_Connect+0x74>)
 80207ee:	681b      	ldr	r3, [r3, #0]
 80207f0:	4618      	mov	r0, r3
 80207f2:	f000 ff7f 	bl	80216f4 <SCH_Delete_Task>
				break;
 80207f6:	e01a      	b.n	802082e <MQTT_Wait_For_Connect+0x6a>
			case AT_ERROR:
				Clear_AT_Result();
 80207f8:	f000 fdda 	bl	80213b0 <Clear_AT_Result>
				Lcd_Clear_Display();
 80207fc:	f7fd ff4c 	bl	801e698 <Lcd_Clear_Display>
				Lcd_Show_String("MQTT Config: Fail", 0, 0);
 8020800:	2200      	movs	r2, #0
 8020802:	2100      	movs	r1, #0
 8020804:	480d      	ldr	r0, [pc, #52]	; (802083c <MQTT_Wait_For_Connect+0x78>)
 8020806:	f7fd ff5f 	bl	801e6c8 <Lcd_Show_String>
				Lcd_Show_String("CONNECT", 1, 0);
 802080a:	2200      	movs	r2, #0
 802080c:	2101      	movs	r1, #1
 802080e:	480c      	ldr	r0, [pc, #48]	; (8020840 <MQTT_Wait_For_Connect+0x7c>)
 8020810:	f7fd ff5a 	bl	801e6c8 <Lcd_Show_String>
				mqtt_state = MQTT_MAX_STATE;
 8020814:	4b07      	ldr	r3, [pc, #28]	; (8020834 <MQTT_Wait_For_Connect+0x70>)
 8020816:	2212      	movs	r2, #18
 8020818:	701a      	strb	r2, [r3, #0]
				SCH_Delete_Task(task_MQTT_Timeout_ID);
 802081a:	4b07      	ldr	r3, [pc, #28]	; (8020838 <MQTT_Wait_For_Connect+0x74>)
 802081c:	681b      	ldr	r3, [r3, #0]
 802081e:	4618      	mov	r0, r3
 8020820:	f000 ff68 	bl	80216f4 <SCH_Delete_Task>
				break;
 8020824:	e003      	b.n	802082e <MQTT_Wait_For_Connect+0x6a>
			default:
				Clear_AT_Result();
 8020826:	f000 fdc3 	bl	80213b0 <Clear_AT_Result>
				break;
 802082a:	e000      	b.n	802082e <MQTT_Wait_For_Connect+0x6a>
		}
	}
 802082c:	bf00      	nop
}
 802082e:	bf00      	nop
 8020830:	bd80      	pop	{r7, pc}
 8020832:	bf00      	nop
 8020834:	200002bd 	.word	0x200002bd
 8020838:	2000428c 	.word	0x2000428c
 802083c:	08026b28 	.word	0x08026b28
 8020840:	08026b90 	.word	0x08026b90

08020844 <MQTT_Topic>:
 * MQTT_Topic()
 * @param None
 * @retval None
 * @brief This function for send ATcommand contains client_index and topic length for publish.
 */
void MQTT_Topic(){
 8020844:	b598      	push	{r3, r4, r7, lr}
 8020846:	af00      	add	r7, sp, #0
	Clear_AT_Result();
 8020848:	f000 fdb2 	bl	80213b0 <Clear_AT_Result>
	sprintf((char*)atcommand,"AT+CMQTTTOPIC=%d,%d\r\n",mqtt_client.client_index,strlen(publish_message.topic));
 802084c:	4b10      	ldr	r3, [pc, #64]	; (8020890 <MQTT_Topic+0x4c>)
 802084e:	781b      	ldrb	r3, [r3, #0]
 8020850:	461c      	mov	r4, r3
 8020852:	4810      	ldr	r0, [pc, #64]	; (8020894 <MQTT_Topic+0x50>)
 8020854:	f7fd fce6 	bl	801e224 <strlen>
 8020858:	4603      	mov	r3, r0
 802085a:	4622      	mov	r2, r4
 802085c:	490e      	ldr	r1, [pc, #56]	; (8020898 <MQTT_Topic+0x54>)
 802085e:	480f      	ldr	r0, [pc, #60]	; (802089c <MQTT_Topic+0x58>)
 8020860:	f005 f96c 	bl	8025b3c <siprintf>
	// Clear_Reiceive_Buffer();
	Clear_Mqtt_Timeout_Flag();
 8020864:	f000 fb0e 	bl	8020e84 <Clear_Mqtt_Timeout_Flag>
	task_MQTT_Timeout_ID = SCH_Add_Task(Set_Mqtt_Timeout_Flag, ATCOMMAND_TIMEOUT, 0);
 8020868:	2200      	movs	r2, #0
 802086a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 802086e:	480c      	ldr	r0, [pc, #48]	; (80208a0 <MQTT_Topic+0x5c>)
 8020870:	f000 fdea 	bl	8021448 <SCH_Add_Task>
 8020874:	4603      	mov	r3, r0
 8020876:	4a0b      	ldr	r2, [pc, #44]	; (80208a4 <MQTT_Topic+0x60>)
 8020878:	6013      	str	r3, [r2, #0]
	UART_SIM7600_Transmit(atcommand);
 802087a:	4808      	ldr	r0, [pc, #32]	; (802089c <MQTT_Topic+0x58>)
 802087c:	f7fe fc48 	bl	801f110 <UART_SIM7600_Transmit>
	Clear_Mqtt_Command();
 8020880:	f000 fb0c 	bl	8020e9c <Clear_Mqtt_Command>
	mqtt_state = MQTT_WAIT_FOR_TOPIC;
 8020884:	4b08      	ldr	r3, [pc, #32]	; (80208a8 <MQTT_Topic+0x64>)
 8020886:	2208      	movs	r2, #8
 8020888:	701a      	strb	r2, [r3, #0]
}
 802088a:	bf00      	nop
 802088c:	bd98      	pop	{r3, r4, r7, pc}
 802088e:	bf00      	nop
 8020890:	200000fc 	.word	0x200000fc
 8020894:	2000418c 	.word	0x2000418c
 8020898:	08026b98 	.word	0x08026b98
 802089c:	20004294 	.word	0x20004294
 80208a0:	08020e6d 	.word	0x08020e6d
 80208a4:	2000428c 	.word	0x2000428c
 80208a8:	200002bd 	.word	0x200002bd

080208ac <MQTT_Wait_For_Topic>:
 * @retval None
 * @brief This function for waiting atcommand Topic respond.
 * @brief If AT_Result = AT_OK so switch to MQTT_INPUT_TOPIC to input a Topic content.
 * @brief else It is AT_ERROR so switch to MQTT_MAX_STATE for reset Simcom7600 after.
 */
void MQTT_Wait_For_Topic(){
 80208ac:	b580      	push	{r7, lr}
 80208ae:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_INPUT);
	if(is_Mqtt_TimeOutFlag()){
 80208b0:	f000 fad2 	bl	8020e58 <is_Mqtt_TimeOutFlag>
 80208b4:	4603      	mov	r3, r0
 80208b6:	2b00      	cmp	r3, #0
 80208b8:	d008      	beq.n	80208cc <MQTT_Wait_For_Topic+0x20>
		LOG("TIME OUT\r\n");
 80208ba:	4827      	ldr	r0, [pc, #156]	; (8020958 <MQTT_Wait_For_Topic+0xac>)
 80208bc:	f7fe fcc2 	bl	801f244 <UART_DEBUG_Transmit>
		Clear_AT_Result();
 80208c0:	f000 fd76 	bl	80213b0 <Clear_AT_Result>
		mqtt_state = MQTT_MAX_STATE;
 80208c4:	4b25      	ldr	r3, [pc, #148]	; (802095c <MQTT_Wait_For_Topic+0xb0>)
 80208c6:	2212      	movs	r2, #18
 80208c8:	701a      	strb	r2, [r3, #0]
			default:
				Clear_AT_Result();
				break;
		}
	}
}
 80208ca:	e042      	b.n	8020952 <MQTT_Wait_For_Topic+0xa6>
		switch (Get_AT_Result()) {
 80208cc:	f000 fd66 	bl	802139c <Get_AT_Result>
 80208d0:	4603      	mov	r3, r0
 80208d2:	3b01      	subs	r3, #1
 80208d4:	2b03      	cmp	r3, #3
 80208d6:	d838      	bhi.n	802094a <MQTT_Wait_For_Topic+0x9e>
 80208d8:	a201      	add	r2, pc, #4	; (adr r2, 80208e0 <MQTT_Wait_For_Topic+0x34>)
 80208da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80208de:	bf00      	nop
 80208e0:	08020907 	.word	0x08020907
 80208e4:	080208f1 	.word	0x080208f1
 80208e8:	08020935 	.word	0x08020935
 80208ec:	08020951 	.word	0x08020951
				Clear_AT_Result();
 80208f0:	f000 fd5e 	bl	80213b0 <Clear_AT_Result>
				mqtt_state=MQTT_INPUT_TOPIC;
 80208f4:	4b19      	ldr	r3, [pc, #100]	; (802095c <MQTT_Wait_For_Topic+0xb0>)
 80208f6:	2209      	movs	r2, #9
 80208f8:	701a      	strb	r2, [r3, #0]
				SCH_Delete_Task(task_MQTT_Timeout_ID);
 80208fa:	4b19      	ldr	r3, [pc, #100]	; (8020960 <MQTT_Wait_For_Topic+0xb4>)
 80208fc:	681b      	ldr	r3, [r3, #0]
 80208fe:	4618      	mov	r0, r3
 8020900:	f000 fef8 	bl	80216f4 <SCH_Delete_Task>
				break;
 8020904:	e025      	b.n	8020952 <MQTT_Wait_For_Topic+0xa6>
				Clear_AT_Result();
 8020906:	f000 fd53 	bl	80213b0 <Clear_AT_Result>
				Lcd_Clear_Display();
 802090a:	f7fd fec5 	bl	801e698 <Lcd_Clear_Display>
				Lcd_Show_String("MQTT Config: Fail", 0, 0);
 802090e:	2200      	movs	r2, #0
 8020910:	2100      	movs	r1, #0
 8020912:	4814      	ldr	r0, [pc, #80]	; (8020964 <MQTT_Wait_For_Topic+0xb8>)
 8020914:	f7fd fed8 	bl	801e6c8 <Lcd_Show_String>
				Lcd_Show_String("TOPIC", 1, 0);
 8020918:	2200      	movs	r2, #0
 802091a:	2101      	movs	r1, #1
 802091c:	4812      	ldr	r0, [pc, #72]	; (8020968 <MQTT_Wait_For_Topic+0xbc>)
 802091e:	f7fd fed3 	bl	801e6c8 <Lcd_Show_String>
				mqtt_state = MQTT_MAX_STATE;
 8020922:	4b0e      	ldr	r3, [pc, #56]	; (802095c <MQTT_Wait_For_Topic+0xb0>)
 8020924:	2212      	movs	r2, #18
 8020926:	701a      	strb	r2, [r3, #0]
				SCH_Delete_Task(task_MQTT_Timeout_ID);
 8020928:	4b0d      	ldr	r3, [pc, #52]	; (8020960 <MQTT_Wait_For_Topic+0xb4>)
 802092a:	681b      	ldr	r3, [r3, #0]
 802092c:	4618      	mov	r0, r3
 802092e:	f000 fee1 	bl	80216f4 <SCH_Delete_Task>
				break;
 8020932:	e00e      	b.n	8020952 <MQTT_Wait_For_Topic+0xa6>
				Clear_AT_Result();
 8020934:	f000 fd3c 	bl	80213b0 <Clear_AT_Result>
				mqtt_state = MQTT_MAX_STATE;
 8020938:	4b08      	ldr	r3, [pc, #32]	; (802095c <MQTT_Wait_For_Topic+0xb0>)
 802093a:	2212      	movs	r2, #18
 802093c:	701a      	strb	r2, [r3, #0]
				SCH_Delete_Task(task_MQTT_Timeout_ID);
 802093e:	4b08      	ldr	r3, [pc, #32]	; (8020960 <MQTT_Wait_For_Topic+0xb4>)
 8020940:	681b      	ldr	r3, [r3, #0]
 8020942:	4618      	mov	r0, r3
 8020944:	f000 fed6 	bl	80216f4 <SCH_Delete_Task>
				break;
 8020948:	e003      	b.n	8020952 <MQTT_Wait_For_Topic+0xa6>
				Clear_AT_Result();
 802094a:	f000 fd31 	bl	80213b0 <Clear_AT_Result>
				break;
 802094e:	e000      	b.n	8020952 <MQTT_Wait_For_Topic+0xa6>
				break;
 8020950:	bf00      	nop
}
 8020952:	bf00      	nop
 8020954:	bd80      	pop	{r7, pc}
 8020956:	bf00      	nop
 8020958:	08026bb0 	.word	0x08026bb0
 802095c:	200002bd 	.word	0x200002bd
 8020960:	2000428c 	.word	0x2000428c
 8020964:	08026b28 	.word	0x08026b28
 8020968:	08026bbc 	.word	0x08026bbc

0802096c <MQTT_Input_Topic>:
 * MQTT_Input_Topic()
 * @param None
 * @retval None
 * @brief This function for input topic content.
 */
void MQTT_Input_Topic(){
 802096c:	b580      	push	{r7, lr}
 802096e:	af00      	add	r7, sp, #0
//	Clear_Reiceive_Buffer();
	Clear_AT_Result();
 8020970:	f000 fd1e 	bl	80213b0 <Clear_AT_Result>
	sprintf((char*)atcommand, "%s", publish_message.topic);
 8020974:	4a0c      	ldr	r2, [pc, #48]	; (80209a8 <MQTT_Input_Topic+0x3c>)
 8020976:	490d      	ldr	r1, [pc, #52]	; (80209ac <MQTT_Input_Topic+0x40>)
 8020978:	480d      	ldr	r0, [pc, #52]	; (80209b0 <MQTT_Input_Topic+0x44>)
 802097a:	f005 f8df 	bl	8025b3c <siprintf>
	Clear_Mqtt_Timeout_Flag();
 802097e:	f000 fa81 	bl	8020e84 <Clear_Mqtt_Timeout_Flag>
	task_MQTT_Timeout_ID = SCH_Add_Task(Set_Mqtt_Timeout_Flag, ATCOMMAND_TIMEOUT, 0);
 8020982:	2200      	movs	r2, #0
 8020984:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8020988:	480a      	ldr	r0, [pc, #40]	; (80209b4 <MQTT_Input_Topic+0x48>)
 802098a:	f000 fd5d 	bl	8021448 <SCH_Add_Task>
 802098e:	4603      	mov	r3, r0
 8020990:	4a09      	ldr	r2, [pc, #36]	; (80209b8 <MQTT_Input_Topic+0x4c>)
 8020992:	6013      	str	r3, [r2, #0]
	UART_SIM7600_Transmit(atcommand);
 8020994:	4806      	ldr	r0, [pc, #24]	; (80209b0 <MQTT_Input_Topic+0x44>)
 8020996:	f7fe fbbb 	bl	801f110 <UART_SIM7600_Transmit>
	Clear_Mqtt_Command();
 802099a:	f000 fa7f 	bl	8020e9c <Clear_Mqtt_Command>
	mqtt_state = MQTT_WAIT_FOR_INPUT_TOPIC;
 802099e:	4b07      	ldr	r3, [pc, #28]	; (80209bc <MQTT_Input_Topic+0x50>)
 80209a0:	220a      	movs	r2, #10
 80209a2:	701a      	strb	r2, [r3, #0]
}
 80209a4:	bf00      	nop
 80209a6:	bd80      	pop	{r7, pc}
 80209a8:	2000418c 	.word	0x2000418c
 80209ac:	08026bc4 	.word	0x08026bc4
 80209b0:	20004294 	.word	0x20004294
 80209b4:	08020e6d 	.word	0x08020e6d
 80209b8:	2000428c 	.word	0x2000428c
 80209bc:	200002bd 	.word	0x200002bd

080209c0 <MQTT_Wait_For_Input_Topic>:
 * @retval None
 * @brief This function for waiting to input topic content.
 * @brief If AT_Result = AT_OK so switch to MQTT_PAYLOAD to input a payload content.
 * @brief else It is AT_ERROR so switch to MQTT_MAX_STATE for reset Simcom7600 after.
 */
void MQTT_Wait_For_Input_Topic(){
 80209c0:	b580      	push	{r7, lr}
 80209c2:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_OK);
	if(is_Mqtt_TimeOutFlag()){
 80209c4:	f000 fa48 	bl	8020e58 <is_Mqtt_TimeOutFlag>
 80209c8:	4603      	mov	r3, r0
 80209ca:	2b00      	cmp	r3, #0
 80209cc:	d008      	beq.n	80209e0 <MQTT_Wait_For_Input_Topic+0x20>
		LOG("TIME OUT\r\n");
 80209ce:	4827      	ldr	r0, [pc, #156]	; (8020a6c <MQTT_Wait_For_Input_Topic+0xac>)
 80209d0:	f7fe fc38 	bl	801f244 <UART_DEBUG_Transmit>
		Clear_AT_Result();
 80209d4:	f000 fcec 	bl	80213b0 <Clear_AT_Result>
		mqtt_state = MQTT_MAX_STATE;
 80209d8:	4b25      	ldr	r3, [pc, #148]	; (8020a70 <MQTT_Wait_For_Input_Topic+0xb0>)
 80209da:	2212      	movs	r2, #18
 80209dc:	701a      	strb	r2, [r3, #0]
			default:
				Clear_AT_Result();
				break;
		}
	}
}
 80209de:	e042      	b.n	8020a66 <MQTT_Wait_For_Input_Topic+0xa6>
		switch (Get_AT_Result()) {
 80209e0:	f000 fcdc 	bl	802139c <Get_AT_Result>
 80209e4:	4603      	mov	r3, r0
 80209e6:	2b04      	cmp	r3, #4
 80209e8:	d839      	bhi.n	8020a5e <MQTT_Wait_For_Input_Topic+0x9e>
 80209ea:	a201      	add	r2, pc, #4	; (adr r2, 80209f0 <MQTT_Wait_For_Input_Topic+0x30>)
 80209ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80209f0:	08020a05 	.word	0x08020a05
 80209f4:	08020a1b 	.word	0x08020a1b
 80209f8:	08020a5f 	.word	0x08020a5f
 80209fc:	08020a49 	.word	0x08020a49
 8020a00:	08020a65 	.word	0x08020a65
				Clear_AT_Result();
 8020a04:	f000 fcd4 	bl	80213b0 <Clear_AT_Result>
				mqtt_state=MQTT_PAYLOAD;
 8020a08:	4b19      	ldr	r3, [pc, #100]	; (8020a70 <MQTT_Wait_For_Input_Topic+0xb0>)
 8020a0a:	220b      	movs	r2, #11
 8020a0c:	701a      	strb	r2, [r3, #0]
				SCH_Delete_Task(task_MQTT_Timeout_ID);
 8020a0e:	4b19      	ldr	r3, [pc, #100]	; (8020a74 <MQTT_Wait_For_Input_Topic+0xb4>)
 8020a10:	681b      	ldr	r3, [r3, #0]
 8020a12:	4618      	mov	r0, r3
 8020a14:	f000 fe6e 	bl	80216f4 <SCH_Delete_Task>
				break;
 8020a18:	e025      	b.n	8020a66 <MQTT_Wait_For_Input_Topic+0xa6>
				Clear_AT_Result();
 8020a1a:	f000 fcc9 	bl	80213b0 <Clear_AT_Result>
				Lcd_Clear_Display();
 8020a1e:	f7fd fe3b 	bl	801e698 <Lcd_Clear_Display>
				Lcd_Show_String("MQTT Config: Fail", 0, 0);
 8020a22:	2200      	movs	r2, #0
 8020a24:	2100      	movs	r1, #0
 8020a26:	4814      	ldr	r0, [pc, #80]	; (8020a78 <MQTT_Wait_For_Input_Topic+0xb8>)
 8020a28:	f7fd fe4e 	bl	801e6c8 <Lcd_Show_String>
				Lcd_Show_String("INPUT_TOPIC", 1, 0);
 8020a2c:	2200      	movs	r2, #0
 8020a2e:	2101      	movs	r1, #1
 8020a30:	4812      	ldr	r0, [pc, #72]	; (8020a7c <MQTT_Wait_For_Input_Topic+0xbc>)
 8020a32:	f7fd fe49 	bl	801e6c8 <Lcd_Show_String>
				mqtt_state = MQTT_MAX_STATE;
 8020a36:	4b0e      	ldr	r3, [pc, #56]	; (8020a70 <MQTT_Wait_For_Input_Topic+0xb0>)
 8020a38:	2212      	movs	r2, #18
 8020a3a:	701a      	strb	r2, [r3, #0]
				SCH_Delete_Task(task_MQTT_Timeout_ID);
 8020a3c:	4b0d      	ldr	r3, [pc, #52]	; (8020a74 <MQTT_Wait_For_Input_Topic+0xb4>)
 8020a3e:	681b      	ldr	r3, [r3, #0]
 8020a40:	4618      	mov	r0, r3
 8020a42:	f000 fe57 	bl	80216f4 <SCH_Delete_Task>
				break;
 8020a46:	e00e      	b.n	8020a66 <MQTT_Wait_For_Input_Topic+0xa6>
				Clear_AT_Result();
 8020a48:	f000 fcb2 	bl	80213b0 <Clear_AT_Result>
				mqtt_state = MQTT_MAX_STATE;
 8020a4c:	4b08      	ldr	r3, [pc, #32]	; (8020a70 <MQTT_Wait_For_Input_Topic+0xb0>)
 8020a4e:	2212      	movs	r2, #18
 8020a50:	701a      	strb	r2, [r3, #0]
				SCH_Delete_Task(task_MQTT_Timeout_ID);
 8020a52:	4b08      	ldr	r3, [pc, #32]	; (8020a74 <MQTT_Wait_For_Input_Topic+0xb4>)
 8020a54:	681b      	ldr	r3, [r3, #0]
 8020a56:	4618      	mov	r0, r3
 8020a58:	f000 fe4c 	bl	80216f4 <SCH_Delete_Task>
				break;
 8020a5c:	e003      	b.n	8020a66 <MQTT_Wait_For_Input_Topic+0xa6>
				Clear_AT_Result();
 8020a5e:	f000 fca7 	bl	80213b0 <Clear_AT_Result>
				break;
 8020a62:	e000      	b.n	8020a66 <MQTT_Wait_For_Input_Topic+0xa6>
				break;
 8020a64:	bf00      	nop
}
 8020a66:	bf00      	nop
 8020a68:	bd80      	pop	{r7, pc}
 8020a6a:	bf00      	nop
 8020a6c:	08026bb0 	.word	0x08026bb0
 8020a70:	200002bd 	.word	0x200002bd
 8020a74:	2000428c 	.word	0x2000428c
 8020a78:	08026b28 	.word	0x08026b28
 8020a7c:	08026bc8 	.word	0x08026bc8

08020a80 <MQTT_Payload>:
 * MQTT_Payload()
 * @param None
 * @retval None
 * @brief This function for send ATcommand contains client_index and payload length for publish.
 */
void MQTT_Payload(){
 8020a80:	b598      	push	{r3, r4, r7, lr}
 8020a82:	af00      	add	r7, sp, #0
//	Clear_AT_Result();
	sprintf((char*)atcommand,"AT+CMQTTPAYLOAD=%d,%d\r\n",mqtt_client.client_index,strlen(publish_message.payload));
 8020a84:	4b10      	ldr	r3, [pc, #64]	; (8020ac8 <MQTT_Payload+0x48>)
 8020a86:	781b      	ldrb	r3, [r3, #0]
 8020a88:	461c      	mov	r4, r3
 8020a8a:	4810      	ldr	r0, [pc, #64]	; (8020acc <MQTT_Payload+0x4c>)
 8020a8c:	f7fd fbca 	bl	801e224 <strlen>
 8020a90:	4603      	mov	r3, r0
 8020a92:	4622      	mov	r2, r4
 8020a94:	490e      	ldr	r1, [pc, #56]	; (8020ad0 <MQTT_Payload+0x50>)
 8020a96:	480f      	ldr	r0, [pc, #60]	; (8020ad4 <MQTT_Payload+0x54>)
 8020a98:	f005 f850 	bl	8025b3c <siprintf>
//	Clear_Reiceive_Buffer();
	Clear_Mqtt_Timeout_Flag();
 8020a9c:	f000 f9f2 	bl	8020e84 <Clear_Mqtt_Timeout_Flag>
	task_MQTT_Timeout_ID = SCH_Add_Task(Set_Mqtt_Timeout_Flag, ATCOMMAND_TIMEOUT, 0);
 8020aa0:	2200      	movs	r2, #0
 8020aa2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8020aa6:	480c      	ldr	r0, [pc, #48]	; (8020ad8 <MQTT_Payload+0x58>)
 8020aa8:	f000 fcce 	bl	8021448 <SCH_Add_Task>
 8020aac:	4603      	mov	r3, r0
 8020aae:	4a0b      	ldr	r2, [pc, #44]	; (8020adc <MQTT_Payload+0x5c>)
 8020ab0:	6013      	str	r3, [r2, #0]
	UART_SIM7600_Transmit(atcommand);
 8020ab2:	4808      	ldr	r0, [pc, #32]	; (8020ad4 <MQTT_Payload+0x54>)
 8020ab4:	f7fe fb2c 	bl	801f110 <UART_SIM7600_Transmit>
	Clear_Mqtt_Command();
 8020ab8:	f000 f9f0 	bl	8020e9c <Clear_Mqtt_Command>
	mqtt_state = MQTT_WAIT_FOR_PAYLOAD;
 8020abc:	4b08      	ldr	r3, [pc, #32]	; (8020ae0 <MQTT_Payload+0x60>)
 8020abe:	220c      	movs	r2, #12
 8020ac0:	701a      	strb	r2, [r3, #0]
}
 8020ac2:	bf00      	nop
 8020ac4:	bd98      	pop	{r3, r4, r7, pc}
 8020ac6:	bf00      	nop
 8020ac8:	200000fc 	.word	0x200000fc
 8020acc:	200041be 	.word	0x200041be
 8020ad0:	08026bd4 	.word	0x08026bd4
 8020ad4:	20004294 	.word	0x20004294
 8020ad8:	08020e6d 	.word	0x08020e6d
 8020adc:	2000428c 	.word	0x2000428c
 8020ae0:	200002bd 	.word	0x200002bd

08020ae4 <MQTT_Wait_For_Payload>:
 * @retval None
 * @brief This function for waiting atcommand payload respond.
 * @brief If AT_Result = AT_OK so switch to MQTT_INPUT_PAYLOAD to input a Topic content.
 * @brief else It is AT_ERROR so switch to MQTT_MAX_STATE for reset Simcom7600 after.
 */
void MQTT_Wait_For_Payload(){
 8020ae4:	b580      	push	{r7, lr}
 8020ae6:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_INPUT);
	if(is_Mqtt_TimeOutFlag()){
 8020ae8:	f000 f9b6 	bl	8020e58 <is_Mqtt_TimeOutFlag>
 8020aec:	4603      	mov	r3, r0
 8020aee:	2b00      	cmp	r3, #0
 8020af0:	d008      	beq.n	8020b04 <MQTT_Wait_For_Payload+0x20>
		LOG("TIME OUT\r\n");
 8020af2:	4827      	ldr	r0, [pc, #156]	; (8020b90 <MQTT_Wait_For_Payload+0xac>)
 8020af4:	f7fe fba6 	bl	801f244 <UART_DEBUG_Transmit>
		Clear_AT_Result();
 8020af8:	f000 fc5a 	bl	80213b0 <Clear_AT_Result>
		mqtt_state = MQTT_MAX_STATE;
 8020afc:	4b25      	ldr	r3, [pc, #148]	; (8020b94 <MQTT_Wait_For_Payload+0xb0>)
 8020afe:	2212      	movs	r2, #18
 8020b00:	701a      	strb	r2, [r3, #0]
			default:
				Clear_AT_Result();
				break;
		}
	}
}
 8020b02:	e042      	b.n	8020b8a <MQTT_Wait_For_Payload+0xa6>
		switch (Get_AT_Result()) {
 8020b04:	f000 fc4a 	bl	802139c <Get_AT_Result>
 8020b08:	4603      	mov	r3, r0
 8020b0a:	3b01      	subs	r3, #1
 8020b0c:	2b03      	cmp	r3, #3
 8020b0e:	d838      	bhi.n	8020b82 <MQTT_Wait_For_Payload+0x9e>
 8020b10:	a201      	add	r2, pc, #4	; (adr r2, 8020b18 <MQTT_Wait_For_Payload+0x34>)
 8020b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020b16:	bf00      	nop
 8020b18:	08020b3f 	.word	0x08020b3f
 8020b1c:	08020b29 	.word	0x08020b29
 8020b20:	08020b6d 	.word	0x08020b6d
 8020b24:	08020b89 	.word	0x08020b89
				Clear_AT_Result();
 8020b28:	f000 fc42 	bl	80213b0 <Clear_AT_Result>
				mqtt_state = MQTT_INPUT_PAYLOAD;
 8020b2c:	4b19      	ldr	r3, [pc, #100]	; (8020b94 <MQTT_Wait_For_Payload+0xb0>)
 8020b2e:	220d      	movs	r2, #13
 8020b30:	701a      	strb	r2, [r3, #0]
				SCH_Delete_Task(task_MQTT_Timeout_ID);
 8020b32:	4b19      	ldr	r3, [pc, #100]	; (8020b98 <MQTT_Wait_For_Payload+0xb4>)
 8020b34:	681b      	ldr	r3, [r3, #0]
 8020b36:	4618      	mov	r0, r3
 8020b38:	f000 fddc 	bl	80216f4 <SCH_Delete_Task>
				break;
 8020b3c:	e025      	b.n	8020b8a <MQTT_Wait_For_Payload+0xa6>
				Clear_AT_Result();
 8020b3e:	f000 fc37 	bl	80213b0 <Clear_AT_Result>
				Lcd_Clear_Display();
 8020b42:	f7fd fda9 	bl	801e698 <Lcd_Clear_Display>
				Lcd_Show_String("MQTT Config: Fail", 0, 0);
 8020b46:	2200      	movs	r2, #0
 8020b48:	2100      	movs	r1, #0
 8020b4a:	4814      	ldr	r0, [pc, #80]	; (8020b9c <MQTT_Wait_For_Payload+0xb8>)
 8020b4c:	f7fd fdbc 	bl	801e6c8 <Lcd_Show_String>
				Lcd_Show_String("PAYLOAD", 1, 0);
 8020b50:	2200      	movs	r2, #0
 8020b52:	2101      	movs	r1, #1
 8020b54:	4812      	ldr	r0, [pc, #72]	; (8020ba0 <MQTT_Wait_For_Payload+0xbc>)
 8020b56:	f7fd fdb7 	bl	801e6c8 <Lcd_Show_String>
				mqtt_state = MQTT_MAX_STATE;
 8020b5a:	4b0e      	ldr	r3, [pc, #56]	; (8020b94 <MQTT_Wait_For_Payload+0xb0>)
 8020b5c:	2212      	movs	r2, #18
 8020b5e:	701a      	strb	r2, [r3, #0]
				SCH_Delete_Task(task_MQTT_Timeout_ID);
 8020b60:	4b0d      	ldr	r3, [pc, #52]	; (8020b98 <MQTT_Wait_For_Payload+0xb4>)
 8020b62:	681b      	ldr	r3, [r3, #0]
 8020b64:	4618      	mov	r0, r3
 8020b66:	f000 fdc5 	bl	80216f4 <SCH_Delete_Task>
				break;
 8020b6a:	e00e      	b.n	8020b8a <MQTT_Wait_For_Payload+0xa6>
				Clear_AT_Result();
 8020b6c:	f000 fc20 	bl	80213b0 <Clear_AT_Result>
				mqtt_state = MQTT_MAX_STATE;
 8020b70:	4b08      	ldr	r3, [pc, #32]	; (8020b94 <MQTT_Wait_For_Payload+0xb0>)
 8020b72:	2212      	movs	r2, #18
 8020b74:	701a      	strb	r2, [r3, #0]
				SCH_Delete_Task(task_MQTT_Timeout_ID);
 8020b76:	4b08      	ldr	r3, [pc, #32]	; (8020b98 <MQTT_Wait_For_Payload+0xb4>)
 8020b78:	681b      	ldr	r3, [r3, #0]
 8020b7a:	4618      	mov	r0, r3
 8020b7c:	f000 fdba 	bl	80216f4 <SCH_Delete_Task>
				break;
 8020b80:	e003      	b.n	8020b8a <MQTT_Wait_For_Payload+0xa6>
				Clear_AT_Result();
 8020b82:	f000 fc15 	bl	80213b0 <Clear_AT_Result>
				break;
 8020b86:	e000      	b.n	8020b8a <MQTT_Wait_For_Payload+0xa6>
				break;
 8020b88:	bf00      	nop
}
 8020b8a:	bf00      	nop
 8020b8c:	bd80      	pop	{r7, pc}
 8020b8e:	bf00      	nop
 8020b90:	08026bb0 	.word	0x08026bb0
 8020b94:	200002bd 	.word	0x200002bd
 8020b98:	2000428c 	.word	0x2000428c
 8020b9c:	08026b28 	.word	0x08026b28
 8020ba0:	08026bec 	.word	0x08026bec

08020ba4 <MQTT_Input_Payload>:
 * MQTT_Input_Payload()
 * @param None
 * @retval None
 * @brief This function for input payload content.
 */
void MQTT_Input_Payload(){
 8020ba4:	b580      	push	{r7, lr}
 8020ba6:	af00      	add	r7, sp, #0
//	Clear_AT_Result();
//	Clear_Reiceive_Buffer();
	sprintf((char*)atcommand,"%s",publish_message.payload);
 8020ba8:	4a0c      	ldr	r2, [pc, #48]	; (8020bdc <MQTT_Input_Payload+0x38>)
 8020baa:	490d      	ldr	r1, [pc, #52]	; (8020be0 <MQTT_Input_Payload+0x3c>)
 8020bac:	480d      	ldr	r0, [pc, #52]	; (8020be4 <MQTT_Input_Payload+0x40>)
 8020bae:	f004 ffc5 	bl	8025b3c <siprintf>
	Clear_Mqtt_Timeout_Flag();
 8020bb2:	f000 f967 	bl	8020e84 <Clear_Mqtt_Timeout_Flag>
	task_MQTT_Timeout_ID = SCH_Add_Task(Set_Mqtt_Timeout_Flag, ATCOMMAND_TIMEOUT, 0);
 8020bb6:	2200      	movs	r2, #0
 8020bb8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8020bbc:	480a      	ldr	r0, [pc, #40]	; (8020be8 <MQTT_Input_Payload+0x44>)
 8020bbe:	f000 fc43 	bl	8021448 <SCH_Add_Task>
 8020bc2:	4603      	mov	r3, r0
 8020bc4:	4a09      	ldr	r2, [pc, #36]	; (8020bec <MQTT_Input_Payload+0x48>)
 8020bc6:	6013      	str	r3, [r2, #0]
	UART_SIM7600_Transmit(atcommand);
 8020bc8:	4806      	ldr	r0, [pc, #24]	; (8020be4 <MQTT_Input_Payload+0x40>)
 8020bca:	f7fe faa1 	bl	801f110 <UART_SIM7600_Transmit>
	Clear_Mqtt_Command();
 8020bce:	f000 f965 	bl	8020e9c <Clear_Mqtt_Command>
	mqtt_state = MQTT_WAIT_FOR_INPUT_PAYLOAD;
 8020bd2:	4b07      	ldr	r3, [pc, #28]	; (8020bf0 <MQTT_Input_Payload+0x4c>)
 8020bd4:	220e      	movs	r2, #14
 8020bd6:	701a      	strb	r2, [r3, #0]
}
 8020bd8:	bf00      	nop
 8020bda:	bd80      	pop	{r7, pc}
 8020bdc:	200041be 	.word	0x200041be
 8020be0:	08026bc4 	.word	0x08026bc4
 8020be4:	20004294 	.word	0x20004294
 8020be8:	08020e6d 	.word	0x08020e6d
 8020bec:	2000428c 	.word	0x2000428c
 8020bf0:	200002bd 	.word	0x200002bd

08020bf4 <MQTT_Wait_For_Input_Payload>:
 * @retval None
 * @brief This function for waiting to input payload content.
 * @brief If AT_Result = AT_OK so switch to MQTT_PUBLISH to publish a message.
 * @brief else It is AT_ERROR so switch to MQTT_MAX_STATE for reset Simcom7600 after.
 */
void MQTT_Wait_For_Input_Payload(){
 8020bf4:	b580      	push	{r7, lr}
 8020bf6:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_OK);
	if(is_Mqtt_TimeOutFlag()){
 8020bf8:	f000 f92e 	bl	8020e58 <is_Mqtt_TimeOutFlag>
 8020bfc:	4603      	mov	r3, r0
 8020bfe:	2b00      	cmp	r3, #0
 8020c00:	d008      	beq.n	8020c14 <MQTT_Wait_For_Input_Payload+0x20>
		LOG("TIME OUT\r\n");
 8020c02:	4827      	ldr	r0, [pc, #156]	; (8020ca0 <MQTT_Wait_For_Input_Payload+0xac>)
 8020c04:	f7fe fb1e 	bl	801f244 <UART_DEBUG_Transmit>
		Clear_AT_Result();
 8020c08:	f000 fbd2 	bl	80213b0 <Clear_AT_Result>
		mqtt_state = MQTT_MAX_STATE;
 8020c0c:	4b25      	ldr	r3, [pc, #148]	; (8020ca4 <MQTT_Wait_For_Input_Payload+0xb0>)
 8020c0e:	2212      	movs	r2, #18
 8020c10:	701a      	strb	r2, [r3, #0]
			default:
				Clear_AT_Result();
				break;
		}
	}
}
 8020c12:	e042      	b.n	8020c9a <MQTT_Wait_For_Input_Payload+0xa6>
		switch (Get_AT_Result()) {
 8020c14:	f000 fbc2 	bl	802139c <Get_AT_Result>
 8020c18:	4603      	mov	r3, r0
 8020c1a:	2b04      	cmp	r3, #4
 8020c1c:	d839      	bhi.n	8020c92 <MQTT_Wait_For_Input_Payload+0x9e>
 8020c1e:	a201      	add	r2, pc, #4	; (adr r2, 8020c24 <MQTT_Wait_For_Input_Payload+0x30>)
 8020c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020c24:	08020c39 	.word	0x08020c39
 8020c28:	08020c4f 	.word	0x08020c4f
 8020c2c:	08020c93 	.word	0x08020c93
 8020c30:	08020c7d 	.word	0x08020c7d
 8020c34:	08020c99 	.word	0x08020c99
				Clear_AT_Result();
 8020c38:	f000 fbba 	bl	80213b0 <Clear_AT_Result>
				mqtt_state = MQTT_PUBLISH;
 8020c3c:	4b19      	ldr	r3, [pc, #100]	; (8020ca4 <MQTT_Wait_For_Input_Payload+0xb0>)
 8020c3e:	220f      	movs	r2, #15
 8020c40:	701a      	strb	r2, [r3, #0]
				SCH_Delete_Task(task_MQTT_Timeout_ID);
 8020c42:	4b19      	ldr	r3, [pc, #100]	; (8020ca8 <MQTT_Wait_For_Input_Payload+0xb4>)
 8020c44:	681b      	ldr	r3, [r3, #0]
 8020c46:	4618      	mov	r0, r3
 8020c48:	f000 fd54 	bl	80216f4 <SCH_Delete_Task>
				break;
 8020c4c:	e025      	b.n	8020c9a <MQTT_Wait_For_Input_Payload+0xa6>
				Lcd_Clear_Display();
 8020c4e:	f7fd fd23 	bl	801e698 <Lcd_Clear_Display>
				Lcd_Show_String("MQTT Config: Fail", 0, 0);
 8020c52:	2200      	movs	r2, #0
 8020c54:	2100      	movs	r1, #0
 8020c56:	4815      	ldr	r0, [pc, #84]	; (8020cac <MQTT_Wait_For_Input_Payload+0xb8>)
 8020c58:	f7fd fd36 	bl	801e6c8 <Lcd_Show_String>
				Lcd_Show_String("IN_PAYLOAD", 1, 0);
 8020c5c:	2200      	movs	r2, #0
 8020c5e:	2101      	movs	r1, #1
 8020c60:	4813      	ldr	r0, [pc, #76]	; (8020cb0 <MQTT_Wait_For_Input_Payload+0xbc>)
 8020c62:	f7fd fd31 	bl	801e6c8 <Lcd_Show_String>
				mqtt_state = MQTT_MAX_STATE;
 8020c66:	4b0f      	ldr	r3, [pc, #60]	; (8020ca4 <MQTT_Wait_For_Input_Payload+0xb0>)
 8020c68:	2212      	movs	r2, #18
 8020c6a:	701a      	strb	r2, [r3, #0]
				SCH_Delete_Task(task_MQTT_Timeout_ID);
 8020c6c:	4b0e      	ldr	r3, [pc, #56]	; (8020ca8 <MQTT_Wait_For_Input_Payload+0xb4>)
 8020c6e:	681b      	ldr	r3, [r3, #0]
 8020c70:	4618      	mov	r0, r3
 8020c72:	f000 fd3f 	bl	80216f4 <SCH_Delete_Task>
				Clear_AT_Result();
 8020c76:	f000 fb9b 	bl	80213b0 <Clear_AT_Result>
				break;
 8020c7a:	e00e      	b.n	8020c9a <MQTT_Wait_For_Input_Payload+0xa6>
				Clear_AT_Result();
 8020c7c:	f000 fb98 	bl	80213b0 <Clear_AT_Result>
				mqtt_state = MQTT_MAX_STATE;
 8020c80:	4b08      	ldr	r3, [pc, #32]	; (8020ca4 <MQTT_Wait_For_Input_Payload+0xb0>)
 8020c82:	2212      	movs	r2, #18
 8020c84:	701a      	strb	r2, [r3, #0]
				SCH_Delete_Task(task_MQTT_Timeout_ID);
 8020c86:	4b08      	ldr	r3, [pc, #32]	; (8020ca8 <MQTT_Wait_For_Input_Payload+0xb4>)
 8020c88:	681b      	ldr	r3, [r3, #0]
 8020c8a:	4618      	mov	r0, r3
 8020c8c:	f000 fd32 	bl	80216f4 <SCH_Delete_Task>
				break;
 8020c90:	e003      	b.n	8020c9a <MQTT_Wait_For_Input_Payload+0xa6>
				Clear_AT_Result();
 8020c92:	f000 fb8d 	bl	80213b0 <Clear_AT_Result>
				break;
 8020c96:	e000      	b.n	8020c9a <MQTT_Wait_For_Input_Payload+0xa6>
				break;
 8020c98:	bf00      	nop
}
 8020c9a:	bf00      	nop
 8020c9c:	bd80      	pop	{r7, pc}
 8020c9e:	bf00      	nop
 8020ca0:	08026bb0 	.word	0x08026bb0
 8020ca4:	200002bd 	.word	0x200002bd
 8020ca8:	2000428c 	.word	0x2000428c
 8020cac:	08026b28 	.word	0x08026b28
 8020cb0:	08026bf4 	.word	0x08026bf4

08020cb4 <MQTT_Publish>:
 * MQTT_Publish()
 * @param None
 * @retval None
 * @brief This function for publish message.
 */
void MQTT_Publish(){
 8020cb4:	b590      	push	{r4, r7, lr}
 8020cb6:	b085      	sub	sp, #20
 8020cb8:	af04      	add	r7, sp, #16
//	Clear_AT_Result();
	sprintf((char*)atcommand,"AT+CMQTTPUB=%d,%d,%d,%d,%d\r\n",mqtt_client.client_index,publish_message.qos,
 8020cba:	4b19      	ldr	r3, [pc, #100]	; (8020d20 <MQTT_Publish+0x6c>)
 8020cbc:	781b      	ldrb	r3, [r3, #0]
 8020cbe:	4618      	mov	r0, r3
 8020cc0:	4b18      	ldr	r3, [pc, #96]	; (8020d24 <MQTT_Publish+0x70>)
 8020cc2:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8020cc6:	461c      	mov	r4, r3
			publish_message.pub_timeout, publish_message.retain, publish_message.dup);
 8020cc8:	4b16      	ldr	r3, [pc, #88]	; (8020d24 <MQTT_Publish+0x70>)
 8020cca:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
	sprintf((char*)atcommand,"AT+CMQTTPUB=%d,%d,%d,%d,%d\r\n",mqtt_client.client_index,publish_message.qos,
 8020cce:	461a      	mov	r2, r3
			publish_message.pub_timeout, publish_message.retain, publish_message.dup);
 8020cd0:	4b14      	ldr	r3, [pc, #80]	; (8020d24 <MQTT_Publish+0x70>)
 8020cd2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
	sprintf((char*)atcommand,"AT+CMQTTPUB=%d,%d,%d,%d,%d\r\n",mqtt_client.client_index,publish_message.qos,
 8020cd6:	4619      	mov	r1, r3
			publish_message.pub_timeout, publish_message.retain, publish_message.dup);
 8020cd8:	4b12      	ldr	r3, [pc, #72]	; (8020d24 <MQTT_Publish+0x70>)
 8020cda:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
	sprintf((char*)atcommand,"AT+CMQTTPUB=%d,%d,%d,%d,%d\r\n",mqtt_client.client_index,publish_message.qos,
 8020cde:	9302      	str	r3, [sp, #8]
 8020ce0:	9101      	str	r1, [sp, #4]
 8020ce2:	9200      	str	r2, [sp, #0]
 8020ce4:	4623      	mov	r3, r4
 8020ce6:	4602      	mov	r2, r0
 8020ce8:	490f      	ldr	r1, [pc, #60]	; (8020d28 <MQTT_Publish+0x74>)
 8020cea:	4810      	ldr	r0, [pc, #64]	; (8020d2c <MQTT_Publish+0x78>)
 8020cec:	f004 ff26 	bl	8025b3c <siprintf>
//	Clear_Reiceive_Buffer();
	Clear_Mqtt_Timeout_Flag();
 8020cf0:	f000 f8c8 	bl	8020e84 <Clear_Mqtt_Timeout_Flag>
	task_MQTT_Timeout_ID = SCH_Add_Task(Set_Mqtt_Timeout_Flag, ATCOMMAND_TIMEOUT, 0);
 8020cf4:	2200      	movs	r2, #0
 8020cf6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8020cfa:	480d      	ldr	r0, [pc, #52]	; (8020d30 <MQTT_Publish+0x7c>)
 8020cfc:	f000 fba4 	bl	8021448 <SCH_Add_Task>
 8020d00:	4603      	mov	r3, r0
 8020d02:	4a0c      	ldr	r2, [pc, #48]	; (8020d34 <MQTT_Publish+0x80>)
 8020d04:	6013      	str	r3, [r2, #0]
	UART_SIM7600_Transmit(atcommand);
 8020d06:	4809      	ldr	r0, [pc, #36]	; (8020d2c <MQTT_Publish+0x78>)
 8020d08:	f7fe fa02 	bl	801f110 <UART_SIM7600_Transmit>
	Clear_Mqtt_Command();
 8020d0c:	f000 f8c6 	bl	8020e9c <Clear_Mqtt_Command>
	mqtt_state = MQTT_WAIT_FOR_PUBLISH;
 8020d10:	4b09      	ldr	r3, [pc, #36]	; (8020d38 <MQTT_Publish+0x84>)
 8020d12:	2210      	movs	r2, #16
 8020d14:	701a      	strb	r2, [r3, #0]
}
 8020d16:	bf00      	nop
 8020d18:	3704      	adds	r7, #4
 8020d1a:	46bd      	mov	sp, r7
 8020d1c:	bd90      	pop	{r4, r7, pc}
 8020d1e:	bf00      	nop
 8020d20:	200000fc 	.word	0x200000fc
 8020d24:	2000418c 	.word	0x2000418c
 8020d28:	08026c00 	.word	0x08026c00
 8020d2c:	20004294 	.word	0x20004294
 8020d30:	08020e6d 	.word	0x08020e6d
 8020d34:	2000428c 	.word	0x2000428c
 8020d38:	200002bd 	.word	0x200002bd

08020d3c <MQTT_Wait_For_Publish>:
 * @retval None
 * @brief This function for waiting to publish message.
 * @brief If AT_Result = AT_OK so switch to MQTT_WAIT_NEXT_COMMAND to publish an other message.
 * @brief else It is AT_ERROR so switch to MQTT_WAIT_NEXT_COMMAND for retry.
 */
void MQTT_Wait_For_Publish(){
 8020d3c:	b580      	push	{r7, lr}
 8020d3e:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_OK);
	if(is_Mqtt_TimeOutFlag()){
 8020d40:	f000 f88a 	bl	8020e58 <is_Mqtt_TimeOutFlag>
 8020d44:	4603      	mov	r3, r0
 8020d46:	2b00      	cmp	r3, #0
 8020d48:	d008      	beq.n	8020d5c <MQTT_Wait_For_Publish+0x20>
		LOG("TIME OUT\r\n");
 8020d4a:	482c      	ldr	r0, [pc, #176]	; (8020dfc <MQTT_Wait_For_Publish+0xc0>)
 8020d4c:	f7fe fa7a 	bl	801f244 <UART_DEBUG_Transmit>
		Clear_AT_Result();
 8020d50:	f000 fb2e 	bl	80213b0 <Clear_AT_Result>
		mqtt_state = MQTT_MAX_STATE;
 8020d54:	4b2a      	ldr	r3, [pc, #168]	; (8020e00 <MQTT_Wait_For_Publish+0xc4>)
 8020d56:	2212      	movs	r2, #18
 8020d58:	701a      	strb	r2, [r3, #0]
			default:
				Clear_AT_Result();
				break;
		}
	}
}
 8020d5a:	e04d      	b.n	8020df8 <MQTT_Wait_For_Publish+0xbc>
		switch (Get_AT_Result()){
 8020d5c:	f000 fb1e 	bl	802139c <Get_AT_Result>
 8020d60:	4603      	mov	r3, r0
 8020d62:	2b04      	cmp	r3, #4
 8020d64:	d844      	bhi.n	8020df0 <MQTT_Wait_For_Publish+0xb4>
 8020d66:	a201      	add	r2, pc, #4	; (adr r2, 8020d6c <MQTT_Wait_For_Publish+0x30>)
 8020d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020d6c:	08020d81 	.word	0x08020d81
 8020d70:	08020dad 	.word	0x08020dad
 8020d74:	08020df1 	.word	0x08020df1
 8020d78:	08020ddb 	.word	0x08020ddb
 8020d7c:	08020df7 	.word	0x08020df7
				Clear_AT_Result();
 8020d80:	f000 fb16 	bl	80213b0 <Clear_AT_Result>
				mqtt_state=MQTT_WAIT_NEXT_COMMAND;
 8020d84:	4b1e      	ldr	r3, [pc, #120]	; (8020e00 <MQTT_Wait_For_Publish+0xc4>)
 8020d86:	2211      	movs	r2, #17
 8020d88:	701a      	strb	r2, [r3, #0]
				sprintf(log,"%d\r\n",HAL_GetTick());
 8020d8a:	f001 facf 	bl	802232c <HAL_GetTick>
 8020d8e:	4603      	mov	r3, r0
 8020d90:	461a      	mov	r2, r3
 8020d92:	491c      	ldr	r1, [pc, #112]	; (8020e04 <MQTT_Wait_For_Publish+0xc8>)
 8020d94:	481c      	ldr	r0, [pc, #112]	; (8020e08 <MQTT_Wait_For_Publish+0xcc>)
 8020d96:	f004 fed1 	bl	8025b3c <siprintf>
				LOG(log);
 8020d9a:	481b      	ldr	r0, [pc, #108]	; (8020e08 <MQTT_Wait_For_Publish+0xcc>)
 8020d9c:	f7fe fa52 	bl	801f244 <UART_DEBUG_Transmit>
				SCH_Delete_Task(task_MQTT_Timeout_ID);
 8020da0:	4b1a      	ldr	r3, [pc, #104]	; (8020e0c <MQTT_Wait_For_Publish+0xd0>)
 8020da2:	681b      	ldr	r3, [r3, #0]
 8020da4:	4618      	mov	r0, r3
 8020da6:	f000 fca5 	bl	80216f4 <SCH_Delete_Task>
				break;
 8020daa:	e025      	b.n	8020df8 <MQTT_Wait_For_Publish+0xbc>
				Clear_AT_Result();
 8020dac:	f000 fb00 	bl	80213b0 <Clear_AT_Result>
				Lcd_Clear_Display();
 8020db0:	f7fd fc72 	bl	801e698 <Lcd_Clear_Display>
				Lcd_Show_String("MQTT Config: Fail", 0, 0);
 8020db4:	2200      	movs	r2, #0
 8020db6:	2100      	movs	r1, #0
 8020db8:	4815      	ldr	r0, [pc, #84]	; (8020e10 <MQTT_Wait_For_Publish+0xd4>)
 8020dba:	f7fd fc85 	bl	801e6c8 <Lcd_Show_String>
				Lcd_Show_String("PUBLISH", 1, 0);
 8020dbe:	2200      	movs	r2, #0
 8020dc0:	2101      	movs	r1, #1
 8020dc2:	4814      	ldr	r0, [pc, #80]	; (8020e14 <MQTT_Wait_For_Publish+0xd8>)
 8020dc4:	f7fd fc80 	bl	801e6c8 <Lcd_Show_String>
				mqtt_state = MQTT_MAX_STATE;
 8020dc8:	4b0d      	ldr	r3, [pc, #52]	; (8020e00 <MQTT_Wait_For_Publish+0xc4>)
 8020dca:	2212      	movs	r2, #18
 8020dcc:	701a      	strb	r2, [r3, #0]
				SCH_Delete_Task(task_MQTT_Timeout_ID);
 8020dce:	4b0f      	ldr	r3, [pc, #60]	; (8020e0c <MQTT_Wait_For_Publish+0xd0>)
 8020dd0:	681b      	ldr	r3, [r3, #0]
 8020dd2:	4618      	mov	r0, r3
 8020dd4:	f000 fc8e 	bl	80216f4 <SCH_Delete_Task>
				break;
 8020dd8:	e00e      	b.n	8020df8 <MQTT_Wait_For_Publish+0xbc>
				Clear_AT_Result();
 8020dda:	f000 fae9 	bl	80213b0 <Clear_AT_Result>
				mqtt_state = MQTT_MAX_STATE;
 8020dde:	4b08      	ldr	r3, [pc, #32]	; (8020e00 <MQTT_Wait_For_Publish+0xc4>)
 8020de0:	2212      	movs	r2, #18
 8020de2:	701a      	strb	r2, [r3, #0]
				SCH_Delete_Task(task_MQTT_Timeout_ID);
 8020de4:	4b09      	ldr	r3, [pc, #36]	; (8020e0c <MQTT_Wait_For_Publish+0xd0>)
 8020de6:	681b      	ldr	r3, [r3, #0]
 8020de8:	4618      	mov	r0, r3
 8020dea:	f000 fc83 	bl	80216f4 <SCH_Delete_Task>
				break;
 8020dee:	e003      	b.n	8020df8 <MQTT_Wait_For_Publish+0xbc>
				Clear_AT_Result();
 8020df0:	f000 fade 	bl	80213b0 <Clear_AT_Result>
				break;
 8020df4:	e000      	b.n	8020df8 <MQTT_Wait_For_Publish+0xbc>
				break;
 8020df6:	bf00      	nop
}
 8020df8:	bf00      	nop
 8020dfa:	bd80      	pop	{r7, pc}
 8020dfc:	08026bb0 	.word	0x08026bb0
 8020e00:	200002bd 	.word	0x200002bd
 8020e04:	08026c20 	.word	0x08026c20
 8020e08:	2000250c 	.word	0x2000250c
 8020e0c:	2000428c 	.word	0x2000428c
 8020e10:	08026b28 	.word	0x08026b28
 8020e14:	08026c28 	.word	0x08026c28

08020e18 <MQTT_Wait_Next_Command>:
 * MQTT_Wait_Next_Command()
 * @param None
 * @retval None
 * @brief This function do not anything. It wait to external function set other mqtt_state then get out of here.
 */
void MQTT_Wait_Next_Command(){
 8020e18:	b480      	push	{r7}
 8020e1a:	af00      	add	r7, sp, #0
	return;
 8020e1c:	bf00      	nop
}
 8020e1e:	46bd      	mov	sp, r7
 8020e20:	bc80      	pop	{r7}
 8020e22:	4770      	bx	lr

08020e24 <MQTT_Get_State>:
 * MQTT_Get_State()
 * @param None
 * @retval mqtt_state
 * @brief This function get mqtt_state.
 */
MQTT_State MQTT_Get_State(){
 8020e24:	b480      	push	{r7}
 8020e26:	af00      	add	r7, sp, #0
	return mqtt_state;
 8020e28:	4b02      	ldr	r3, [pc, #8]	; (8020e34 <MQTT_Get_State+0x10>)
 8020e2a:	781b      	ldrb	r3, [r3, #0]
}
 8020e2c:	4618      	mov	r0, r3
 8020e2e:	46bd      	mov	sp, r7
 8020e30:	bc80      	pop	{r7}
 8020e32:	4770      	bx	lr
 8020e34:	200002bd 	.word	0x200002bd

08020e38 <MQTT_Set_State>:
 * MQTT_Set_State()
 * @param _mqtt_state
 * @retval None
 * @brief This function allow external function can set mqtt_state.
 */
void MQTT_Set_State(MQTT_State _mqtt_state){
 8020e38:	b480      	push	{r7}
 8020e3a:	b083      	sub	sp, #12
 8020e3c:	af00      	add	r7, sp, #0
 8020e3e:	4603      	mov	r3, r0
 8020e40:	71fb      	strb	r3, [r7, #7]
	mqtt_state = _mqtt_state;
 8020e42:	4a04      	ldr	r2, [pc, #16]	; (8020e54 <MQTT_Set_State+0x1c>)
 8020e44:	79fb      	ldrb	r3, [r7, #7]
 8020e46:	7013      	strb	r3, [r2, #0]
}
 8020e48:	bf00      	nop
 8020e4a:	370c      	adds	r7, #12
 8020e4c:	46bd      	mov	sp, r7
 8020e4e:	bc80      	pop	{r7}
 8020e50:	4770      	bx	lr
 8020e52:	bf00      	nop
 8020e54:	200002bd 	.word	0x200002bd

08020e58 <is_Mqtt_TimeOutFlag>:
 * is_Mqtt_TimeOutFlag()
 * @param None.
 * @retval Flagstatus: SET or RESET
 * @brief This function return mqtt_timeout_flag.
 */
FlagStatus is_Mqtt_TimeOutFlag(){
 8020e58:	b480      	push	{r7}
 8020e5a:	af00      	add	r7, sp, #0
	return mqtt_timeout_flag;
 8020e5c:	4b02      	ldr	r3, [pc, #8]	; (8020e68 <is_Mqtt_TimeOutFlag+0x10>)
 8020e5e:	781b      	ldrb	r3, [r3, #0]
}
 8020e60:	4618      	mov	r0, r3
 8020e62:	46bd      	mov	sp, r7
 8020e64:	bc80      	pop	{r7}
 8020e66:	4770      	bx	lr
 8020e68:	200000fb 	.word	0x200000fb

08020e6c <Set_Mqtt_Timeout_Flag>:
 * Set_Mqtt_Timeout_Flag()
 * @param None.
 * @retval None
 * @brief This function set mqtt_timeout_flag to SET.
 */
void Set_Mqtt_Timeout_Flag(void){
 8020e6c:	b480      	push	{r7}
 8020e6e:	af00      	add	r7, sp, #0
	mqtt_timeout_flag = SET;
 8020e70:	4b03      	ldr	r3, [pc, #12]	; (8020e80 <Set_Mqtt_Timeout_Flag+0x14>)
 8020e72:	2201      	movs	r2, #1
 8020e74:	701a      	strb	r2, [r3, #0]
}
 8020e76:	bf00      	nop
 8020e78:	46bd      	mov	sp, r7
 8020e7a:	bc80      	pop	{r7}
 8020e7c:	4770      	bx	lr
 8020e7e:	bf00      	nop
 8020e80:	200000fb 	.word	0x200000fb

08020e84 <Clear_Mqtt_Timeout_Flag>:
 * Clear_Mqtt_Timeout_Flag()
 * @param None.
 * @retval None
 * @brief This function set mqtt_timeout_flag to RESET.
 */
void Clear_Mqtt_Timeout_Flag(void){
 8020e84:	b480      	push	{r7}
 8020e86:	af00      	add	r7, sp, #0
	mqtt_timeout_flag = RESET;
 8020e88:	4b03      	ldr	r3, [pc, #12]	; (8020e98 <Clear_Mqtt_Timeout_Flag+0x14>)
 8020e8a:	2200      	movs	r2, #0
 8020e8c:	701a      	strb	r2, [r3, #0]
}
 8020e8e:	bf00      	nop
 8020e90:	46bd      	mov	sp, r7
 8020e92:	bc80      	pop	{r7}
 8020e94:	4770      	bx	lr
 8020e96:	bf00      	nop
 8020e98:	200000fb 	.word	0x200000fb

08020e9c <Clear_Mqtt_Command>:
void Set_Mqtt_Command(char * mqtt_command){
	sprintf((char*)atcommand, "%s", mqtt_command);
	default_command = RESET;
}

void Clear_Mqtt_Command(){
 8020e9c:	b480      	push	{r7}
 8020e9e:	af00      	add	r7, sp, #0
	default_command = SET;
 8020ea0:	4b03      	ldr	r3, [pc, #12]	; (8020eb0 <Clear_Mqtt_Command+0x14>)
 8020ea2:	2201      	movs	r2, #1
 8020ea4:	701a      	strb	r2, [r3, #0]
}
 8020ea6:	bf00      	nop
 8020ea8:	46bd      	mov	sp, r7
 8020eaa:	bc80      	pop	{r7}
 8020eac:	4770      	bx	lr
 8020eae:	bf00      	nop
 8020eb0:	200000fa 	.word	0x200000fa

08020eb4 <MQTT_Add_Message>:
FlagStatus MQTT_Available(){
	return mqtt_state == MQTT_WAIT_NEXT_COMMAND;
}


void MQTT_Add_Message(char *topic,char *payload){
 8020eb4:	b580      	push	{r7, lr}
 8020eb6:	b0c2      	sub	sp, #264	; 0x108
 8020eb8:	af00      	add	r7, sp, #0
 8020eba:	1d3b      	adds	r3, r7, #4
 8020ebc:	6018      	str	r0, [r3, #0]
 8020ebe:	463b      	mov	r3, r7
 8020ec0:	6019      	str	r1, [r3, #0]
	MESSAGE_TypeDef temp_message;
	strcpy(temp_message.topic,topic);
 8020ec2:	1d3b      	adds	r3, r7, #4
 8020ec4:	f107 0208 	add.w	r2, r7, #8
 8020ec8:	6819      	ldr	r1, [r3, #0]
 8020eca:	4610      	mov	r0, r2
 8020ecc:	f004 fe56 	bl	8025b7c <strcpy>
	strcpy(temp_message.payload,payload);
 8020ed0:	463b      	mov	r3, r7
 8020ed2:	f107 0208 	add.w	r2, r7, #8
 8020ed6:	3232      	adds	r2, #50	; 0x32
 8020ed8:	6819      	ldr	r1, [r3, #0]
 8020eda:	4610      	mov	r0, r2
 8020edc:	f004 fe4e 	bl	8025b7c <strcpy>
	temp_message.qos =1;
 8020ee0:	f107 0308 	add.w	r3, r7, #8
 8020ee4:	2201      	movs	r2, #1
 8020ee6:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
	temp_message.retain =0;
 8020eea:	f107 0308 	add.w	r3, r7, #8
 8020eee:	2200      	movs	r2, #0
 8020ef0:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
	temp_message.dup =0;
 8020ef4:	f107 0308 	add.w	r3, r7, #8
 8020ef8:	2200      	movs	r2, #0
 8020efa:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
	temp_message.pub_timeout = 120;
 8020efe:	f107 0308 	add.w	r3, r7, #8
 8020f02:	2278      	movs	r2, #120	; 0x78
 8020f04:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
	message_buffer[message_head] = temp_message;
 8020f08:	4b13      	ldr	r3, [pc, #76]	; (8020f58 <MQTT_Add_Message+0xa4>)
 8020f0a:	781b      	ldrb	r3, [r3, #0]
 8020f0c:	4619      	mov	r1, r3
 8020f0e:	4a13      	ldr	r2, [pc, #76]	; (8020f5c <MQTT_Add_Message+0xa8>)
 8020f10:	460b      	mov	r3, r1
 8020f12:	01db      	lsls	r3, r3, #7
 8020f14:	1a5b      	subs	r3, r3, r1
 8020f16:	005b      	lsls	r3, r3, #1
 8020f18:	441a      	add	r2, r3
 8020f1a:	f107 0308 	add.w	r3, r7, #8
 8020f1e:	4610      	mov	r0, r2
 8020f20:	4619      	mov	r1, r3
 8020f22:	23fe      	movs	r3, #254	; 0xfe
 8020f24:	461a      	mov	r2, r3
 8020f26:	f004 fdf3 	bl	8025b10 <memcpy>
	message_head = (message_head+1)%MQTT_MESSAGE_BUFFER_SIZE;
 8020f2a:	4b0b      	ldr	r3, [pc, #44]	; (8020f58 <MQTT_Add_Message+0xa4>)
 8020f2c:	781b      	ldrb	r3, [r3, #0]
 8020f2e:	1c5a      	adds	r2, r3, #1
 8020f30:	4b0b      	ldr	r3, [pc, #44]	; (8020f60 <MQTT_Add_Message+0xac>)
 8020f32:	fb83 1302 	smull	r1, r3, r3, r2
 8020f36:	10d9      	asrs	r1, r3, #3
 8020f38:	17d3      	asrs	r3, r2, #31
 8020f3a:	1ac9      	subs	r1, r1, r3
 8020f3c:	460b      	mov	r3, r1
 8020f3e:	009b      	lsls	r3, r3, #2
 8020f40:	440b      	add	r3, r1
 8020f42:	009b      	lsls	r3, r3, #2
 8020f44:	1ad1      	subs	r1, r2, r3
 8020f46:	b2ca      	uxtb	r2, r1
 8020f48:	4b03      	ldr	r3, [pc, #12]	; (8020f58 <MQTT_Add_Message+0xa4>)
 8020f4a:	701a      	strb	r2, [r3, #0]
	return;
 8020f4c:	bf00      	nop
}
 8020f4e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8020f52:	46bd      	mov	sp, r7
 8020f54:	bd80      	pop	{r7, pc}
 8020f56:	bf00      	nop
 8020f58:	200002be 	.word	0x200002be
 8020f5c:	20004460 	.word	0x20004460
 8020f60:	66666667 	.word	0x66666667

08020f64 <MQTT_Dispatch_Message>:

void MQTT_Dispatch_Message(){
 8020f64:	b580      	push	{r7, lr}
 8020f66:	af00      	add	r7, sp, #0
	publish_message = message_buffer[message_tail];
 8020f68:	4b12      	ldr	r3, [pc, #72]	; (8020fb4 <MQTT_Dispatch_Message+0x50>)
 8020f6a:	781b      	ldrb	r3, [r3, #0]
 8020f6c:	4619      	mov	r1, r3
 8020f6e:	4812      	ldr	r0, [pc, #72]	; (8020fb8 <MQTT_Dispatch_Message+0x54>)
 8020f70:	4a12      	ldr	r2, [pc, #72]	; (8020fbc <MQTT_Dispatch_Message+0x58>)
 8020f72:	460b      	mov	r3, r1
 8020f74:	01db      	lsls	r3, r3, #7
 8020f76:	1a5b      	subs	r3, r3, r1
 8020f78:	005b      	lsls	r3, r3, #1
 8020f7a:	4413      	add	r3, r2
 8020f7c:	4619      	mov	r1, r3
 8020f7e:	23fe      	movs	r3, #254	; 0xfe
 8020f80:	461a      	mov	r2, r3
 8020f82:	f004 fdc5 	bl	8025b10 <memcpy>
	message_tail = (message_tail+1)%MQTT_MESSAGE_BUFFER_SIZE;
 8020f86:	4b0b      	ldr	r3, [pc, #44]	; (8020fb4 <MQTT_Dispatch_Message+0x50>)
 8020f88:	781b      	ldrb	r3, [r3, #0]
 8020f8a:	1c5a      	adds	r2, r3, #1
 8020f8c:	4b0c      	ldr	r3, [pc, #48]	; (8020fc0 <MQTT_Dispatch_Message+0x5c>)
 8020f8e:	fb83 1302 	smull	r1, r3, r3, r2
 8020f92:	10d9      	asrs	r1, r3, #3
 8020f94:	17d3      	asrs	r3, r2, #31
 8020f96:	1ac9      	subs	r1, r1, r3
 8020f98:	460b      	mov	r3, r1
 8020f9a:	009b      	lsls	r3, r3, #2
 8020f9c:	440b      	add	r3, r1
 8020f9e:	009b      	lsls	r3, r3, #2
 8020fa0:	1ad1      	subs	r1, r2, r3
 8020fa2:	b2ca      	uxtb	r2, r1
 8020fa4:	4b03      	ldr	r3, [pc, #12]	; (8020fb4 <MQTT_Dispatch_Message+0x50>)
 8020fa6:	701a      	strb	r2, [r3, #0]
	mqtt_state = MQTT_TOPIC;
 8020fa8:	4b06      	ldr	r3, [pc, #24]	; (8020fc4 <MQTT_Dispatch_Message+0x60>)
 8020faa:	2207      	movs	r2, #7
 8020fac:	701a      	strb	r2, [r3, #0]
}
 8020fae:	bf00      	nop
 8020fb0:	bd80      	pop	{r7, pc}
 8020fb2:	bf00      	nop
 8020fb4:	200002bf 	.word	0x200002bf
 8020fb8:	2000418c 	.word	0x2000418c
 8020fbc:	20004460 	.word	0x20004460
 8020fc0:	66666667 	.word	0x66666667
 8020fc4:	200002bd 	.word	0x200002bd

08020fc8 <is_Has_Message_Available>:
	MESSAGE_TypeDef temp_message;
	temp_message = message_buffer[message_tail];
	return temp_message;
}

FlagStatus is_Has_Message_Available(){
 8020fc8:	b480      	push	{r7}
 8020fca:	af00      	add	r7, sp, #0
	return message_head != message_tail;
 8020fcc:	4b06      	ldr	r3, [pc, #24]	; (8020fe8 <is_Has_Message_Available+0x20>)
 8020fce:	781a      	ldrb	r2, [r3, #0]
 8020fd0:	4b06      	ldr	r3, [pc, #24]	; (8020fec <is_Has_Message_Available+0x24>)
 8020fd2:	781b      	ldrb	r3, [r3, #0]
 8020fd4:	429a      	cmp	r2, r3
 8020fd6:	bf14      	ite	ne
 8020fd8:	2301      	movne	r3, #1
 8020fda:	2300      	moveq	r3, #0
 8020fdc:	b2db      	uxtb	r3, r3
}
 8020fde:	4618      	mov	r0, r3
 8020fe0:	46bd      	mov	sp, r7
 8020fe2:	bc80      	pop	{r7}
 8020fe4:	4770      	bx	lr
 8020fe6:	bf00      	nop
 8020fe8:	200002be 	.word	0x200002be
 8020fec:	200002bf 	.word	0x200002bf

08020ff0 <isReceiveData>:
 * 			buffer_len = 6 => It just point to "I love"
 * 			data = "love"
 *
 * 			=> return SET ~ True
 */
FlagStatus isReceiveData(char *buffer , uint16_t buffer_len , const char * data){
 8020ff0:	b580      	push	{r7, lr}
 8020ff2:	b086      	sub	sp, #24
 8020ff4:	af00      	add	r7, sp, #0
 8020ff6:	60f8      	str	r0, [r7, #12]
 8020ff8:	460b      	mov	r3, r1
 8020ffa:	607a      	str	r2, [r7, #4]
 8020ffc:	817b      	strh	r3, [r7, #10]
	uint8_t tmpLen = strlen((char*)data);
 8020ffe:	6878      	ldr	r0, [r7, #4]
 8021000:	f7fd f910 	bl	801e224 <strlen>
 8021004:	4603      	mov	r3, r0
 8021006:	75bb      	strb	r3, [r7, #22]
	if(buffer_len < tmpLen ){
 8021008:	7dbb      	ldrb	r3, [r7, #22]
 802100a:	b29b      	uxth	r3, r3
 802100c:	897a      	ldrh	r2, [r7, #10]
 802100e:	429a      	cmp	r2, r3
 8021010:	d201      	bcs.n	8021016 <isReceiveData+0x26>
		return RESET;
 8021012:	2300      	movs	r3, #0
 8021014:	e020      	b.n	8021058 <isReceiveData+0x68>
	}
	else{
		uint8_t tmpLen = strlen((char*)data);
 8021016:	6878      	ldr	r0, [r7, #4]
 8021018:	f7fd f904 	bl	801e224 <strlen>
 802101c:	4603      	mov	r3, r0
 802101e:	757b      	strb	r3, [r7, #21]
		for (uint8_t index = 0; index < tmpLen; index++) {
 8021020:	2300      	movs	r3, #0
 8021022:	75fb      	strb	r3, [r7, #23]
 8021024:	e013      	b.n	802104e <isReceiveData+0x5e>
			if(buffer[buffer_len -tmpLen + index] != data[index]){
 8021026:	897a      	ldrh	r2, [r7, #10]
 8021028:	7d7b      	ldrb	r3, [r7, #21]
 802102a:	1ad2      	subs	r2, r2, r3
 802102c:	7dfb      	ldrb	r3, [r7, #23]
 802102e:	4413      	add	r3, r2
 8021030:	461a      	mov	r2, r3
 8021032:	68fb      	ldr	r3, [r7, #12]
 8021034:	4413      	add	r3, r2
 8021036:	781a      	ldrb	r2, [r3, #0]
 8021038:	7dfb      	ldrb	r3, [r7, #23]
 802103a:	6879      	ldr	r1, [r7, #4]
 802103c:	440b      	add	r3, r1
 802103e:	781b      	ldrb	r3, [r3, #0]
 8021040:	429a      	cmp	r2, r3
 8021042:	d001      	beq.n	8021048 <isReceiveData+0x58>
				return RESET;
 8021044:	2300      	movs	r3, #0
 8021046:	e007      	b.n	8021058 <isReceiveData+0x68>
		for (uint8_t index = 0; index < tmpLen; index++) {
 8021048:	7dfb      	ldrb	r3, [r7, #23]
 802104a:	3301      	adds	r3, #1
 802104c:	75fb      	strb	r3, [r7, #23]
 802104e:	7dfa      	ldrb	r2, [r7, #23]
 8021050:	7d7b      	ldrb	r3, [r7, #21]
 8021052:	429a      	cmp	r2, r3
 8021054:	d3e7      	bcc.n	8021026 <isReceiveData+0x36>
			}
		}
	}
	return SET;
 8021056:	2301      	movs	r3, #1
}
 8021058:	4618      	mov	r0, r3
 802105a:	3718      	adds	r7, #24
 802105c:	46bd      	mov	sp, r7
 802105e:	bd80      	pop	{r7, pc}

08021060 <isReceiveData_New>:


FlagStatus isReceiveData_New(char *buffer , uint16_t buffer_len , uint16_t buffer_size , const char * data){
 8021060:	b580      	push	{r7, lr}
 8021062:	b086      	sub	sp, #24
 8021064:	af00      	add	r7, sp, #0
 8021066:	60f8      	str	r0, [r7, #12]
 8021068:	607b      	str	r3, [r7, #4]
 802106a:	460b      	mov	r3, r1
 802106c:	817b      	strh	r3, [r7, #10]
 802106e:	4613      	mov	r3, r2
 8021070:	813b      	strh	r3, [r7, #8]
	uint16_t tmpLen = strlen((char*)data);
 8021072:	6878      	ldr	r0, [r7, #4]
 8021074:	f7fd f8d6 	bl	801e224 <strlen>
 8021078:	4603      	mov	r3, r0
 802107a:	82bb      	strh	r3, [r7, #20]
	for (uint16_t index = 0; index < tmpLen; index++) {
 802107c:	2300      	movs	r3, #0
 802107e:	82fb      	strh	r3, [r7, #22]
 8021080:	e02d      	b.n	80210de <isReceiveData_New+0x7e>
		if(buffer[buffer_len -tmpLen <0 ? (buffer_size + buffer_len - tmpLen + index)%buffer_size :(buffer_len - tmpLen + index)%buffer_size ] != data[index]){
 8021082:	897a      	ldrh	r2, [r7, #10]
 8021084:	8abb      	ldrh	r3, [r7, #20]
 8021086:	1ad3      	subs	r3, r2, r3
 8021088:	2b00      	cmp	r3, #0
 802108a:	da0e      	bge.n	80210aa <isReceiveData_New+0x4a>
 802108c:	893a      	ldrh	r2, [r7, #8]
 802108e:	897b      	ldrh	r3, [r7, #10]
 8021090:	441a      	add	r2, r3
 8021092:	8abb      	ldrh	r3, [r7, #20]
 8021094:	1ad2      	subs	r2, r2, r3
 8021096:	8afb      	ldrh	r3, [r7, #22]
 8021098:	4413      	add	r3, r2
 802109a:	893a      	ldrh	r2, [r7, #8]
 802109c:	fb93 f1f2 	sdiv	r1, r3, r2
 80210a0:	fb02 f201 	mul.w	r2, r2, r1
 80210a4:	1a9b      	subs	r3, r3, r2
 80210a6:	461a      	mov	r2, r3
 80210a8:	e00b      	b.n	80210c2 <isReceiveData_New+0x62>
 80210aa:	897a      	ldrh	r2, [r7, #10]
 80210ac:	8abb      	ldrh	r3, [r7, #20]
 80210ae:	1ad2      	subs	r2, r2, r3
 80210b0:	8afb      	ldrh	r3, [r7, #22]
 80210b2:	4413      	add	r3, r2
 80210b4:	893a      	ldrh	r2, [r7, #8]
 80210b6:	fb93 f1f2 	sdiv	r1, r3, r2
 80210ba:	fb02 f201 	mul.w	r2, r2, r1
 80210be:	1a9b      	subs	r3, r3, r2
 80210c0:	461a      	mov	r2, r3
 80210c2:	68fb      	ldr	r3, [r7, #12]
 80210c4:	4413      	add	r3, r2
 80210c6:	781a      	ldrb	r2, [r3, #0]
 80210c8:	8afb      	ldrh	r3, [r7, #22]
 80210ca:	6879      	ldr	r1, [r7, #4]
 80210cc:	440b      	add	r3, r1
 80210ce:	781b      	ldrb	r3, [r3, #0]
 80210d0:	429a      	cmp	r2, r3
 80210d2:	d001      	beq.n	80210d8 <isReceiveData_New+0x78>
			return RESET;
 80210d4:	2300      	movs	r3, #0
 80210d6:	e007      	b.n	80210e8 <isReceiveData_New+0x88>
	for (uint16_t index = 0; index < tmpLen; index++) {
 80210d8:	8afb      	ldrh	r3, [r7, #22]
 80210da:	3301      	adds	r3, #1
 80210dc:	82fb      	strh	r3, [r7, #22]
 80210de:	8afa      	ldrh	r2, [r7, #22]
 80210e0:	8abb      	ldrh	r3, [r7, #20]
 80210e2:	429a      	cmp	r2, r3
 80210e4:	d3cd      	bcc.n	8021082 <isReceiveData_New+0x22>
		}
	}
	return SET;
 80210e6:	2301      	movs	r3, #1
}
 80210e8:	4618      	mov	r0, r3
 80210ea:	3718      	adds	r7, #24
 80210ec:	46bd      	mov	sp, r7
 80210ee:	bd80      	pop	{r7, pc}

080210f0 <Char2Hex>:
	}
	return result;
}


uint8_t Char2Hex(char character){
 80210f0:	b480      	push	{r7}
 80210f2:	b085      	sub	sp, #20
 80210f4:	af00      	add	r7, sp, #0
 80210f6:	4603      	mov	r3, r0
 80210f8:	71fb      	strb	r3, [r7, #7]
	uint8_t result;
	if( character >='0' && character <= '9'){
 80210fa:	79fb      	ldrb	r3, [r7, #7]
 80210fc:	2b2f      	cmp	r3, #47	; 0x2f
 80210fe:	d906      	bls.n	802110e <Char2Hex+0x1e>
 8021100:	79fb      	ldrb	r3, [r7, #7]
 8021102:	2b39      	cmp	r3, #57	; 0x39
 8021104:	d803      	bhi.n	802110e <Char2Hex+0x1e>
		result = character - (uint8_t)('0') ;
 8021106:	79fb      	ldrb	r3, [r7, #7]
 8021108:	3b30      	subs	r3, #48	; 0x30
 802110a:	73fb      	strb	r3, [r7, #15]
 802110c:	e008      	b.n	8021120 <Char2Hex+0x30>
	}
	else if(character >='A' && character <= 'F'){
 802110e:	79fb      	ldrb	r3, [r7, #7]
 8021110:	2b40      	cmp	r3, #64	; 0x40
 8021112:	d905      	bls.n	8021120 <Char2Hex+0x30>
 8021114:	79fb      	ldrb	r3, [r7, #7]
 8021116:	2b46      	cmp	r3, #70	; 0x46
 8021118:	d802      	bhi.n	8021120 <Char2Hex+0x30>
		result = character - (uint8_t)('A') + 10;
 802111a:	79fb      	ldrb	r3, [r7, #7]
 802111c:	3b37      	subs	r3, #55	; 0x37
 802111e:	73fb      	strb	r3, [r7, #15]
	}
	return result;
 8021120:	7bfb      	ldrb	r3, [r7, #15]
}
 8021122:	4618      	mov	r0, r3
 8021124:	3714      	adds	r7, #20
 8021126:	46bd      	mov	sp, r7
 8021128:	bc80      	pop	{r7}
 802112a:	4770      	bx	lr

0802112c <AT_Processing>:
  * If Available It will Read 1 byte and add to temp buffer.
  * Then Temp buffer will be compared to pattern being passed in isReceiveData function.
  * @param None
  * @retval None
  */
void AT_Processing(){
 802112c:	b580      	push	{r7, lr}
 802112e:	af00      	add	r7, sp, #0
	if(at_result != AT_NONE){
 8021130:	4b84      	ldr	r3, [pc, #528]	; (8021344 <AT_Processing+0x218>)
 8021132:	781b      	ldrb	r3, [r3, #0]
 8021134:	2b0a      	cmp	r3, #10
 8021136:	f040 8100 	bne.w	802133a <AT_Processing+0x20e>
		return;
	}
	else if(UART_SIM7600_Received_Buffer_Available()){
 802113a:	f7fe f815 	bl	801f168 <UART_SIM7600_Received_Buffer_Available>
 802113e:	4603      	mov	r3, r0
 8021140:	2b00      	cmp	r3, #0
 8021142:	f000 80fc 	beq.w	802133e <AT_Processing+0x212>
		data_respone[data_respone_index]=UART_SIM7600_Read_Received_Buffer();
 8021146:	f7fe f825 	bl	801f194 <UART_SIM7600_Read_Received_Buffer>
 802114a:	4601      	mov	r1, r0
 802114c:	4b7e      	ldr	r3, [pc, #504]	; (8021348 <AT_Processing+0x21c>)
 802114e:	781b      	ldrb	r3, [r3, #0]
 8021150:	461a      	mov	r2, r3
 8021152:	b2c9      	uxtb	r1, r1
 8021154:	4b7d      	ldr	r3, [pc, #500]	; (802134c <AT_Processing+0x220>)
 8021156:	5499      	strb	r1, [r3, r2]
		UART_DEBUG_Transmit_Size(data_respone + data_respone_index, 1);
 8021158:	4b7b      	ldr	r3, [pc, #492]	; (8021348 <AT_Processing+0x21c>)
 802115a:	781b      	ldrb	r3, [r3, #0]
 802115c:	461a      	mov	r2, r3
 802115e:	4b7b      	ldr	r3, [pc, #492]	; (802134c <AT_Processing+0x220>)
 8021160:	4413      	add	r3, r2
 8021162:	2101      	movs	r1, #1
 8021164:	4618      	mov	r0, r3
 8021166:	f7fe f88b 	bl	801f280 <UART_DEBUG_Transmit_Size>
//		LOG("1");
		data_respone_index++;
 802116a:	4b77      	ldr	r3, [pc, #476]	; (8021348 <AT_Processing+0x21c>)
 802116c:	781b      	ldrb	r3, [r3, #0]
 802116e:	3301      	adds	r3, #1
 8021170:	b2da      	uxtb	r2, r3
 8021172:	4b75      	ldr	r3, [pc, #468]	; (8021348 <AT_Processing+0x21c>)
 8021174:	701a      	strb	r2, [r3, #0]

		if(isReceiveData((char*)data_respone, (uint16_t)data_respone_index, OK)){
 8021176:	4b74      	ldr	r3, [pc, #464]	; (8021348 <AT_Processing+0x21c>)
 8021178:	781b      	ldrb	r3, [r3, #0]
 802117a:	b29b      	uxth	r3, r3
 802117c:	4a74      	ldr	r2, [pc, #464]	; (8021350 <AT_Processing+0x224>)
 802117e:	6812      	ldr	r2, [r2, #0]
 8021180:	4619      	mov	r1, r3
 8021182:	4872      	ldr	r0, [pc, #456]	; (802134c <AT_Processing+0x220>)
 8021184:	f7ff ff34 	bl	8020ff0 <isReceiveData>
 8021188:	4603      	mov	r3, r0
 802118a:	2b00      	cmp	r3, #0
 802118c:	d00d      	beq.n	80211aa <AT_Processing+0x7e>
			LOG("\r\nOK\r\n");
 802118e:	4871      	ldr	r0, [pc, #452]	; (8021354 <AT_Processing+0x228>)
 8021190:	f7fe f858 	bl	801f244 <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 8021194:	4b6c      	ldr	r3, [pc, #432]	; (8021348 <AT_Processing+0x21c>)
 8021196:	781a      	ldrb	r2, [r3, #0]
 8021198:	4b6f      	ldr	r3, [pc, #444]	; (8021358 <AT_Processing+0x22c>)
 802119a:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 802119c:	4b6a      	ldr	r3, [pc, #424]	; (8021348 <AT_Processing+0x21c>)
 802119e:	2200      	movs	r2, #0
 80211a0:	701a      	strb	r2, [r3, #0]
			at_result = AT_OK;
 80211a2:	4b68      	ldr	r3, [pc, #416]	; (8021344 <AT_Processing+0x218>)
 80211a4:	2200      	movs	r2, #0
 80211a6:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
			at_result = AT_INPUT;
		}
	}
//	UART_DEBUG_Transmit_Size(aUART_RxBuffer, RXBUFFERSIZE);
	return;
 80211a8:	e0c9      	b.n	802133e <AT_Processing+0x212>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)ERROR_1/*ERROR_1*/)){
 80211aa:	4b67      	ldr	r3, [pc, #412]	; (8021348 <AT_Processing+0x21c>)
 80211ac:	781b      	ldrb	r3, [r3, #0]
 80211ae:	b29b      	uxth	r3, r3
 80211b0:	4a6a      	ldr	r2, [pc, #424]	; (802135c <AT_Processing+0x230>)
 80211b2:	4619      	mov	r1, r3
 80211b4:	4865      	ldr	r0, [pc, #404]	; (802134c <AT_Processing+0x220>)
 80211b6:	f7ff ff1b 	bl	8020ff0 <isReceiveData>
 80211ba:	4603      	mov	r3, r0
 80211bc:	2b00      	cmp	r3, #0
 80211be:	d00d      	beq.n	80211dc <AT_Processing+0xb0>
			LOG("\r\nERROR\r\n");
 80211c0:	4867      	ldr	r0, [pc, #412]	; (8021360 <AT_Processing+0x234>)
 80211c2:	f7fe f83f 	bl	801f244 <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 80211c6:	4b60      	ldr	r3, [pc, #384]	; (8021348 <AT_Processing+0x21c>)
 80211c8:	781a      	ldrb	r2, [r3, #0]
 80211ca:	4b63      	ldr	r3, [pc, #396]	; (8021358 <AT_Processing+0x22c>)
 80211cc:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 80211ce:	4b5e      	ldr	r3, [pc, #376]	; (8021348 <AT_Processing+0x21c>)
 80211d0:	2200      	movs	r2, #0
 80211d2:	701a      	strb	r2, [r3, #0]
			at_result = AT_ERROR;
 80211d4:	4b5b      	ldr	r3, [pc, #364]	; (8021344 <AT_Processing+0x218>)
 80211d6:	2201      	movs	r2, #1
 80211d8:	701a      	strb	r2, [r3, #0]
	return;
 80211da:	e0b0      	b.n	802133e <AT_Processing+0x212>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)PB_DONE /*PB_DONE*/)){
 80211dc:	4b5a      	ldr	r3, [pc, #360]	; (8021348 <AT_Processing+0x21c>)
 80211de:	781b      	ldrb	r3, [r3, #0]
 80211e0:	b29b      	uxth	r3, r3
 80211e2:	4a60      	ldr	r2, [pc, #384]	; (8021364 <AT_Processing+0x238>)
 80211e4:	4619      	mov	r1, r3
 80211e6:	4859      	ldr	r0, [pc, #356]	; (802134c <AT_Processing+0x220>)
 80211e8:	f7ff ff02 	bl	8020ff0 <isReceiveData>
 80211ec:	4603      	mov	r3, r0
 80211ee:	2b00      	cmp	r3, #0
 80211f0:	d00d      	beq.n	802120e <AT_Processing+0xe2>
			LOG("\r\nPB DONE\r\n");
 80211f2:	485d      	ldr	r0, [pc, #372]	; (8021368 <AT_Processing+0x23c>)
 80211f4:	f7fe f826 	bl	801f244 <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 80211f8:	4b53      	ldr	r3, [pc, #332]	; (8021348 <AT_Processing+0x21c>)
 80211fa:	781a      	ldrb	r2, [r3, #0]
 80211fc:	4b56      	ldr	r3, [pc, #344]	; (8021358 <AT_Processing+0x22c>)
 80211fe:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 8021200:	4b51      	ldr	r3, [pc, #324]	; (8021348 <AT_Processing+0x21c>)
 8021202:	2200      	movs	r2, #0
 8021204:	701a      	strb	r2, [r3, #0]
			at_result = AT_PB_DONE;
 8021206:	4b4f      	ldr	r3, [pc, #316]	; (8021344 <AT_Processing+0x218>)
 8021208:	2203      	movs	r2, #3
 802120a:	701a      	strb	r2, [r3, #0]
	return;
 802120c:	e097      	b.n	802133e <AT_Processing+0x212>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)IMEI_CHECK)){
 802120e:	4b4e      	ldr	r3, [pc, #312]	; (8021348 <AT_Processing+0x21c>)
 8021210:	781b      	ldrb	r3, [r3, #0]
 8021212:	b29b      	uxth	r3, r3
 8021214:	4a55      	ldr	r2, [pc, #340]	; (802136c <AT_Processing+0x240>)
 8021216:	4619      	mov	r1, r3
 8021218:	484c      	ldr	r0, [pc, #304]	; (802134c <AT_Processing+0x220>)
 802121a:	f7ff fee9 	bl	8020ff0 <isReceiveData>
 802121e:	4603      	mov	r3, r0
 8021220:	2b00      	cmp	r3, #0
 8021222:	d00d      	beq.n	8021240 <AT_Processing+0x114>
			LOG("\r\nRECEIVE IMEI\r\n");
 8021224:	4852      	ldr	r0, [pc, #328]	; (8021370 <AT_Processing+0x244>)
 8021226:	f7fe f80d 	bl	801f244 <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 802122a:	4b47      	ldr	r3, [pc, #284]	; (8021348 <AT_Processing+0x21c>)
 802122c:	781a      	ldrb	r2, [r3, #0]
 802122e:	4b4a      	ldr	r3, [pc, #296]	; (8021358 <AT_Processing+0x22c>)
 8021230:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 8021232:	4b45      	ldr	r3, [pc, #276]	; (8021348 <AT_Processing+0x21c>)
 8021234:	2200      	movs	r2, #0
 8021236:	701a      	strb	r2, [r3, #0]
			at_result = AT_IMEI;
 8021238:	4b42      	ldr	r3, [pc, #264]	; (8021344 <AT_Processing+0x218>)
 802123a:	2206      	movs	r2, #6
 802123c:	701a      	strb	r2, [r3, #0]
	return;
 802123e:	e07e      	b.n	802133e <AT_Processing+0x212>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)RECEIVE_RESPONSE)){
 8021240:	4b41      	ldr	r3, [pc, #260]	; (8021348 <AT_Processing+0x21c>)
 8021242:	781b      	ldrb	r3, [r3, #0]
 8021244:	b29b      	uxth	r3, r3
 8021246:	4a4b      	ldr	r2, [pc, #300]	; (8021374 <AT_Processing+0x248>)
 8021248:	4619      	mov	r1, r3
 802124a:	4840      	ldr	r0, [pc, #256]	; (802134c <AT_Processing+0x220>)
 802124c:	f7ff fed0 	bl	8020ff0 <isReceiveData>
 8021250:	4603      	mov	r3, r0
 8021252:	2b00      	cmp	r3, #0
 8021254:	d00d      	beq.n	8021272 <AT_Processing+0x146>
			LOG("\r\nRECEIVE HTTP RESPONSE\r\n");
 8021256:	4848      	ldr	r0, [pc, #288]	; (8021378 <AT_Processing+0x24c>)
 8021258:	f7fd fff4 	bl	801f244 <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 802125c:	4b3a      	ldr	r3, [pc, #232]	; (8021348 <AT_Processing+0x21c>)
 802125e:	781a      	ldrb	r2, [r3, #0]
 8021260:	4b3d      	ldr	r3, [pc, #244]	; (8021358 <AT_Processing+0x22c>)
 8021262:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 8021264:	4b38      	ldr	r3, [pc, #224]	; (8021348 <AT_Processing+0x21c>)
 8021266:	2200      	movs	r2, #0
 8021268:	701a      	strb	r2, [r3, #0]
			at_result = AT_HTTP_RESPONSE;
 802126a:	4b36      	ldr	r3, [pc, #216]	; (8021344 <AT_Processing+0x218>)
 802126c:	2205      	movs	r2, #5
 802126e:	701a      	strb	r2, [r3, #0]
	return;
 8021270:	e065      	b.n	802133e <AT_Processing+0x212>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)FIRMWARE_VERSION)){
 8021272:	4b35      	ldr	r3, [pc, #212]	; (8021348 <AT_Processing+0x21c>)
 8021274:	781b      	ldrb	r3, [r3, #0]
 8021276:	b29b      	uxth	r3, r3
 8021278:	4a40      	ldr	r2, [pc, #256]	; (802137c <AT_Processing+0x250>)
 802127a:	4619      	mov	r1, r3
 802127c:	4833      	ldr	r0, [pc, #204]	; (802134c <AT_Processing+0x220>)
 802127e:	f7ff feb7 	bl	8020ff0 <isReceiveData>
 8021282:	4603      	mov	r3, r0
 8021284:	2b00      	cmp	r3, #0
 8021286:	d00d      	beq.n	80212a4 <AT_Processing+0x178>
			LOG("\r\nRECEIVE VERSION RESPONSE\r\n");
 8021288:	483d      	ldr	r0, [pc, #244]	; (8021380 <AT_Processing+0x254>)
 802128a:	f7fd ffdb 	bl	801f244 <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 802128e:	4b2e      	ldr	r3, [pc, #184]	; (8021348 <AT_Processing+0x21c>)
 8021290:	781a      	ldrb	r2, [r3, #0]
 8021292:	4b31      	ldr	r3, [pc, #196]	; (8021358 <AT_Processing+0x22c>)
 8021294:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 8021296:	4b2c      	ldr	r3, [pc, #176]	; (8021348 <AT_Processing+0x21c>)
 8021298:	2200      	movs	r2, #0
 802129a:	701a      	strb	r2, [r3, #0]
			at_result = AT_FIRMWARE_VERSION;
 802129c:	4b29      	ldr	r3, [pc, #164]	; (8021344 <AT_Processing+0x218>)
 802129e:	2207      	movs	r2, #7
 80212a0:	701a      	strb	r2, [r3, #0]
	return;
 80212a2:	e04c      	b.n	802133e <AT_Processing+0x212>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)FIRMWARE_DATA)){
 80212a4:	4b28      	ldr	r3, [pc, #160]	; (8021348 <AT_Processing+0x21c>)
 80212a6:	781b      	ldrb	r3, [r3, #0]
 80212a8:	b29b      	uxth	r3, r3
 80212aa:	4a36      	ldr	r2, [pc, #216]	; (8021384 <AT_Processing+0x258>)
 80212ac:	4619      	mov	r1, r3
 80212ae:	4827      	ldr	r0, [pc, #156]	; (802134c <AT_Processing+0x220>)
 80212b0:	f7ff fe9e 	bl	8020ff0 <isReceiveData>
 80212b4:	4603      	mov	r3, r0
 80212b6:	2b00      	cmp	r3, #0
 80212b8:	d00d      	beq.n	80212d6 <AT_Processing+0x1aa>
			LOG("\r\nRECEIVE FIRMWARE DATA\r\n");
 80212ba:	4833      	ldr	r0, [pc, #204]	; (8021388 <AT_Processing+0x25c>)
 80212bc:	f7fd ffc2 	bl	801f244 <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 80212c0:	4b21      	ldr	r3, [pc, #132]	; (8021348 <AT_Processing+0x21c>)
 80212c2:	781a      	ldrb	r2, [r3, #0]
 80212c4:	4b24      	ldr	r3, [pc, #144]	; (8021358 <AT_Processing+0x22c>)
 80212c6:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 80212c8:	4b1f      	ldr	r3, [pc, #124]	; (8021348 <AT_Processing+0x21c>)
 80212ca:	2200      	movs	r2, #0
 80212cc:	701a      	strb	r2, [r3, #0]
			at_result = AT_FIRMWARE_DATA;
 80212ce:	4b1d      	ldr	r3, [pc, #116]	; (8021344 <AT_Processing+0x218>)
 80212d0:	2208      	movs	r2, #8
 80212d2:	701a      	strb	r2, [r3, #0]
	return;
 80212d4:	e033      	b.n	802133e <AT_Processing+0x212>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)FIRMWARE_CHECKSUM)){
 80212d6:	4b1c      	ldr	r3, [pc, #112]	; (8021348 <AT_Processing+0x21c>)
 80212d8:	781b      	ldrb	r3, [r3, #0]
 80212da:	b29b      	uxth	r3, r3
 80212dc:	4a2b      	ldr	r2, [pc, #172]	; (802138c <AT_Processing+0x260>)
 80212de:	4619      	mov	r1, r3
 80212e0:	481a      	ldr	r0, [pc, #104]	; (802134c <AT_Processing+0x220>)
 80212e2:	f7ff fe85 	bl	8020ff0 <isReceiveData>
 80212e6:	4603      	mov	r3, r0
 80212e8:	2b00      	cmp	r3, #0
 80212ea:	d00d      	beq.n	8021308 <AT_Processing+0x1dc>
			LOG("\r\nRECEIVE FIRMWARE CHECKSUM\r\n");
 80212ec:	4828      	ldr	r0, [pc, #160]	; (8021390 <AT_Processing+0x264>)
 80212ee:	f7fd ffa9 	bl	801f244 <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 80212f2:	4b15      	ldr	r3, [pc, #84]	; (8021348 <AT_Processing+0x21c>)
 80212f4:	781a      	ldrb	r2, [r3, #0]
 80212f6:	4b18      	ldr	r3, [pc, #96]	; (8021358 <AT_Processing+0x22c>)
 80212f8:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 80212fa:	4b13      	ldr	r3, [pc, #76]	; (8021348 <AT_Processing+0x21c>)
 80212fc:	2200      	movs	r2, #0
 80212fe:	701a      	strb	r2, [r3, #0]
			at_result = AT_FIRMWARE_CHECKSUM;
 8021300:	4b10      	ldr	r3, [pc, #64]	; (8021344 <AT_Processing+0x218>)
 8021302:	2209      	movs	r2, #9
 8021304:	701a      	strb	r2, [r3, #0]
	return;
 8021306:	e01a      	b.n	802133e <AT_Processing+0x212>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)INPUT)){
 8021308:	4b0f      	ldr	r3, [pc, #60]	; (8021348 <AT_Processing+0x21c>)
 802130a:	781b      	ldrb	r3, [r3, #0]
 802130c:	b29b      	uxth	r3, r3
 802130e:	4a21      	ldr	r2, [pc, #132]	; (8021394 <AT_Processing+0x268>)
 8021310:	4619      	mov	r1, r3
 8021312:	480e      	ldr	r0, [pc, #56]	; (802134c <AT_Processing+0x220>)
 8021314:	f7ff fe6c 	bl	8020ff0 <isReceiveData>
 8021318:	4603      	mov	r3, r0
 802131a:	2b00      	cmp	r3, #0
 802131c:	d00f      	beq.n	802133e <AT_Processing+0x212>
			LOG("\r\nINPUT\r\n");
 802131e:	481e      	ldr	r0, [pc, #120]	; (8021398 <AT_Processing+0x26c>)
 8021320:	f7fd ff90 	bl	801f244 <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 8021324:	4b08      	ldr	r3, [pc, #32]	; (8021348 <AT_Processing+0x21c>)
 8021326:	781a      	ldrb	r2, [r3, #0]
 8021328:	4b0b      	ldr	r3, [pc, #44]	; (8021358 <AT_Processing+0x22c>)
 802132a:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 802132c:	4b06      	ldr	r3, [pc, #24]	; (8021348 <AT_Processing+0x21c>)
 802132e:	2200      	movs	r2, #0
 8021330:	701a      	strb	r2, [r3, #0]
			at_result = AT_INPUT;
 8021332:	4b04      	ldr	r3, [pc, #16]	; (8021344 <AT_Processing+0x218>)
 8021334:	2202      	movs	r2, #2
 8021336:	701a      	strb	r2, [r3, #0]
	return;
 8021338:	e001      	b.n	802133e <AT_Processing+0x212>
		return;
 802133a:	bf00      	nop
 802133c:	e000      	b.n	8021340 <AT_Processing+0x214>
	return;
 802133e:	bf00      	nop
}
 8021340:	bd80      	pop	{r7, pc}
 8021342:	bf00      	nop
 8021344:	200001d0 	.word	0x200001d0
 8021348:	200012c1 	.word	0x200012c1
 802134c:	200002c0 	.word	0x200002c0
 8021350:	200001d4 	.word	0x200001d4
 8021354:	08026c44 	.word	0x08026c44
 8021358:	200012c0 	.word	0x200012c0
 802135c:	08026e54 	.word	0x08026e54
 8021360:	08026c4c 	.word	0x08026c4c
 8021364:	08026e4c 	.word	0x08026e4c
 8021368:	08026c58 	.word	0x08026c58
 802136c:	08026e60 	.word	0x08026e60
 8021370:	08026c64 	.word	0x08026c64
 8021374:	08026e6c 	.word	0x08026e6c
 8021378:	08026c78 	.word	0x08026c78
 802137c:	08026e7c 	.word	0x08026e7c
 8021380:	08026c94 	.word	0x08026c94
 8021384:	08026e94 	.word	0x08026e94
 8021388:	08026cb4 	.word	0x08026cb4
 802138c:	08026e88 	.word	0x08026e88
 8021390:	08026cd0 	.word	0x08026cd0
 8021394:	08026e5c 	.word	0x08026e5c
 8021398:	08026cf0 	.word	0x08026cf0

0802139c <Get_AT_Result>:
/**
  * @brief Get_AT_Result Initialization Function
  * @param None
  * @retval at_result
  */
AT_Result Get_AT_Result(){
 802139c:	b480      	push	{r7}
 802139e:	af00      	add	r7, sp, #0
	return at_result;
 80213a0:	4b02      	ldr	r3, [pc, #8]	; (80213ac <Get_AT_Result+0x10>)
 80213a2:	781b      	ldrb	r3, [r3, #0]
}
 80213a4:	4618      	mov	r0, r3
 80213a6:	46bd      	mov	sp, r7
 80213a8:	bc80      	pop	{r7}
 80213aa:	4770      	bx	lr
 80213ac:	200001d0 	.word	0x200001d0

080213b0 <Clear_AT_Result>:
/**
  * @brief Clear_AT_Result Initialization Function
  * @param None
  * @retval None
  */
void Clear_AT_Result(){
 80213b0:	b480      	push	{r7}
 80213b2:	af00      	add	r7, sp, #0
	at_result = AT_NONE;
 80213b4:	4b03      	ldr	r3, [pc, #12]	; (80213c4 <Clear_AT_Result+0x14>)
 80213b6:	220a      	movs	r2, #10
 80213b8:	701a      	strb	r2, [r3, #0]
}
 80213ba:	bf00      	nop
 80213bc:	46bd      	mov	sp, r7
 80213be:	bc80      	pop	{r7}
 80213c0:	4770      	bx	lr
 80213c2:	bf00      	nop
 80213c4:	200001d0 	.word	0x200001d0

080213c8 <Get_New_Task_ID>:

uint32_t count_SCH_Update = 0;
uint8_t testFlag = 0;
uint8_t strScheduler[] = "                                                                    ";

uint32_t Get_New_Task_ID(void){
 80213c8:	b480      	push	{r7}
 80213ca:	af00      	add	r7, sp, #0
	newTaskID++;
 80213cc:	4b09      	ldr	r3, [pc, #36]	; (80213f4 <Get_New_Task_ID+0x2c>)
 80213ce:	681b      	ldr	r3, [r3, #0]
 80213d0:	3301      	adds	r3, #1
 80213d2:	4a08      	ldr	r2, [pc, #32]	; (80213f4 <Get_New_Task_ID+0x2c>)
 80213d4:	6013      	str	r3, [r2, #0]
	if(newTaskID == NO_TASK_ID){
 80213d6:	4b07      	ldr	r3, [pc, #28]	; (80213f4 <Get_New_Task_ID+0x2c>)
 80213d8:	681b      	ldr	r3, [r3, #0]
 80213da:	2b00      	cmp	r3, #0
 80213dc:	d104      	bne.n	80213e8 <Get_New_Task_ID+0x20>
		newTaskID++;
 80213de:	4b05      	ldr	r3, [pc, #20]	; (80213f4 <Get_New_Task_ID+0x2c>)
 80213e0:	681b      	ldr	r3, [r3, #0]
 80213e2:	3301      	adds	r3, #1
 80213e4:	4a03      	ldr	r2, [pc, #12]	; (80213f4 <Get_New_Task_ID+0x2c>)
 80213e6:	6013      	str	r3, [r2, #0]
	}
	return newTaskID;
 80213e8:	4b02      	ldr	r3, [pc, #8]	; (80213f4 <Get_New_Task_ID+0x2c>)
 80213ea:	681b      	ldr	r3, [r3, #0]
}
 80213ec:	4618      	mov	r0, r3
 80213ee:	46bd      	mov	sp, r7
 80213f0:	bc80      	pop	{r7}
 80213f2:	4770      	bx	lr
 80213f4:	200012c4 	.word	0x200012c4

080213f8 <SCH_Update>:


void SCH_Update(void){
 80213f8:	b480      	push	{r7}
 80213fa:	af00      	add	r7, sp, #0
	// Check if there is a task at this location
	count_SCH_Update ++;
 80213fc:	4b10      	ldr	r3, [pc, #64]	; (8021440 <SCH_Update+0x48>)
 80213fe:	681b      	ldr	r3, [r3, #0]
 8021400:	3301      	adds	r3, #1
 8021402:	4a0f      	ldr	r2, [pc, #60]	; (8021440 <SCH_Update+0x48>)
 8021404:	6013      	str	r3, [r2, #0]
	if (SCH_tasks_G[0].pTask && SCH_tasks_G[0].RunMe == 0) {
 8021406:	4b0f      	ldr	r3, [pc, #60]	; (8021444 <SCH_Update+0x4c>)
 8021408:	681b      	ldr	r3, [r3, #0]
 802140a:	2b00      	cmp	r3, #0
 802140c:	d013      	beq.n	8021436 <SCH_Update+0x3e>
 802140e:	4b0d      	ldr	r3, [pc, #52]	; (8021444 <SCH_Update+0x4c>)
 8021410:	7b1b      	ldrb	r3, [r3, #12]
 8021412:	2b00      	cmp	r3, #0
 8021414:	d10f      	bne.n	8021436 <SCH_Update+0x3e>
		if(SCH_tasks_G[0].Delay > 0){
 8021416:	4b0b      	ldr	r3, [pc, #44]	; (8021444 <SCH_Update+0x4c>)
 8021418:	685b      	ldr	r3, [r3, #4]
 802141a:	2b00      	cmp	r3, #0
 802141c:	d004      	beq.n	8021428 <SCH_Update+0x30>
			SCH_tasks_G[0].Delay = SCH_tasks_G[0].Delay - 1;
 802141e:	4b09      	ldr	r3, [pc, #36]	; (8021444 <SCH_Update+0x4c>)
 8021420:	685b      	ldr	r3, [r3, #4]
 8021422:	3b01      	subs	r3, #1
 8021424:	4a07      	ldr	r2, [pc, #28]	; (8021444 <SCH_Update+0x4c>)
 8021426:	6053      	str	r3, [r2, #4]
		}
		if (SCH_tasks_G[0].Delay == 0) {
 8021428:	4b06      	ldr	r3, [pc, #24]	; (8021444 <SCH_Update+0x4c>)
 802142a:	685b      	ldr	r3, [r3, #4]
 802142c:	2b00      	cmp	r3, #0
 802142e:	d102      	bne.n	8021436 <SCH_Update+0x3e>
			SCH_tasks_G[0].RunMe = 1;
 8021430:	4b04      	ldr	r3, [pc, #16]	; (8021444 <SCH_Update+0x4c>)
 8021432:	2201      	movs	r2, #1
 8021434:	731a      	strb	r2, [r3, #12]
		}
	}
}
 8021436:	bf00      	nop
 8021438:	46bd      	mov	sp, r7
 802143a:	bc80      	pop	{r7}
 802143c:	4770      	bx	lr
 802143e:	bf00      	nop
 8021440:	200012c8 	.word	0x200012c8
 8021444:	20005894 	.word	0x20005894

08021448 <SCH_Add_Task>:
uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8021448:	b590      	push	{r4, r7, lr}
 802144a:	b089      	sub	sp, #36	; 0x24
 802144c:	af00      	add	r7, sp, #0
 802144e:	60f8      	str	r0, [r7, #12]
 8021450:	60b9      	str	r1, [r7, #8]
 8021452:	607a      	str	r2, [r7, #4]
	uint8_t newTaskIndex = 0;
 8021454:	2300      	movs	r3, #0
 8021456:	77fb      	strb	r3, [r7, #31]
	uint32_t sumDelay = 0;
 8021458:	2300      	movs	r3, #0
 802145a:	61bb      	str	r3, [r7, #24]
	uint32_t newDelay = 0;
 802145c:	2300      	movs	r3, #0
 802145e:	613b      	str	r3, [r7, #16]

	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 8021460:	2300      	movs	r3, #0
 8021462:	77fb      	strb	r3, [r7, #31]
 8021464:	e133      	b.n	80216ce <SCH_Add_Task+0x286>
		sumDelay = sumDelay + SCH_tasks_G[newTaskIndex].Delay;
 8021466:	7ffa      	ldrb	r2, [r7, #31]
 8021468:	49a1      	ldr	r1, [pc, #644]	; (80216f0 <SCH_Add_Task+0x2a8>)
 802146a:	4613      	mov	r3, r2
 802146c:	009b      	lsls	r3, r3, #2
 802146e:	4413      	add	r3, r2
 8021470:	009b      	lsls	r3, r3, #2
 8021472:	440b      	add	r3, r1
 8021474:	3304      	adds	r3, #4
 8021476:	681b      	ldr	r3, [r3, #0]
 8021478:	69ba      	ldr	r2, [r7, #24]
 802147a:	4413      	add	r3, r2
 802147c:	61bb      	str	r3, [r7, #24]
		if(sumDelay > DELAY){
 802147e:	69ba      	ldr	r2, [r7, #24]
 8021480:	68bb      	ldr	r3, [r7, #8]
 8021482:	429a      	cmp	r2, r3
 8021484:	f240 80c1 	bls.w	802160a <SCH_Add_Task+0x1c2>
			newDelay = DELAY - (sumDelay - SCH_tasks_G[newTaskIndex].Delay);
 8021488:	7ffa      	ldrb	r2, [r7, #31]
 802148a:	4999      	ldr	r1, [pc, #612]	; (80216f0 <SCH_Add_Task+0x2a8>)
 802148c:	4613      	mov	r3, r2
 802148e:	009b      	lsls	r3, r3, #2
 8021490:	4413      	add	r3, r2
 8021492:	009b      	lsls	r3, r3, #2
 8021494:	440b      	add	r3, r1
 8021496:	3304      	adds	r3, #4
 8021498:	681a      	ldr	r2, [r3, #0]
 802149a:	69bb      	ldr	r3, [r7, #24]
 802149c:	1ad3      	subs	r3, r2, r3
 802149e:	68ba      	ldr	r2, [r7, #8]
 80214a0:	4413      	add	r3, r2
 80214a2:	613b      	str	r3, [r7, #16]
			SCH_tasks_G[newTaskIndex].Delay = sumDelay - DELAY;
 80214a4:	7ffa      	ldrb	r2, [r7, #31]
 80214a6:	69b9      	ldr	r1, [r7, #24]
 80214a8:	68bb      	ldr	r3, [r7, #8]
 80214aa:	1ac9      	subs	r1, r1, r3
 80214ac:	4890      	ldr	r0, [pc, #576]	; (80216f0 <SCH_Add_Task+0x2a8>)
 80214ae:	4613      	mov	r3, r2
 80214b0:	009b      	lsls	r3, r3, #2
 80214b2:	4413      	add	r3, r2
 80214b4:	009b      	lsls	r3, r3, #2
 80214b6:	4403      	add	r3, r0
 80214b8:	3304      	adds	r3, #4
 80214ba:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 80214bc:	2327      	movs	r3, #39	; 0x27
 80214be:	75fb      	strb	r3, [r7, #23]
 80214c0:	e04c      	b.n	802155c <SCH_Add_Task+0x114>
//				if(SCH_tasks_G[i - 1].pTask != 0)
				{
					SCH_tasks_G[i].pTask = SCH_tasks_G[i - 1].pTask;
 80214c2:	7dfb      	ldrb	r3, [r7, #23]
 80214c4:	1e59      	subs	r1, r3, #1
 80214c6:	7dfa      	ldrb	r2, [r7, #23]
 80214c8:	4889      	ldr	r0, [pc, #548]	; (80216f0 <SCH_Add_Task+0x2a8>)
 80214ca:	460b      	mov	r3, r1
 80214cc:	009b      	lsls	r3, r3, #2
 80214ce:	440b      	add	r3, r1
 80214d0:	009b      	lsls	r3, r3, #2
 80214d2:	4403      	add	r3, r0
 80214d4:	6819      	ldr	r1, [r3, #0]
 80214d6:	4886      	ldr	r0, [pc, #536]	; (80216f0 <SCH_Add_Task+0x2a8>)
 80214d8:	4613      	mov	r3, r2
 80214da:	009b      	lsls	r3, r3, #2
 80214dc:	4413      	add	r3, r2
 80214de:	009b      	lsls	r3, r3, #2
 80214e0:	4403      	add	r3, r0
 80214e2:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].Period = SCH_tasks_G[i - 1].Period;
 80214e4:	7dfb      	ldrb	r3, [r7, #23]
 80214e6:	1e59      	subs	r1, r3, #1
 80214e8:	7dfa      	ldrb	r2, [r7, #23]
 80214ea:	4881      	ldr	r0, [pc, #516]	; (80216f0 <SCH_Add_Task+0x2a8>)
 80214ec:	460b      	mov	r3, r1
 80214ee:	009b      	lsls	r3, r3, #2
 80214f0:	440b      	add	r3, r1
 80214f2:	009b      	lsls	r3, r3, #2
 80214f4:	4403      	add	r3, r0
 80214f6:	3308      	adds	r3, #8
 80214f8:	6819      	ldr	r1, [r3, #0]
 80214fa:	487d      	ldr	r0, [pc, #500]	; (80216f0 <SCH_Add_Task+0x2a8>)
 80214fc:	4613      	mov	r3, r2
 80214fe:	009b      	lsls	r3, r3, #2
 8021500:	4413      	add	r3, r2
 8021502:	009b      	lsls	r3, r3, #2
 8021504:	4403      	add	r3, r0
 8021506:	3308      	adds	r3, #8
 8021508:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].Delay = SCH_tasks_G[i - 1].Delay;
 802150a:	7dfb      	ldrb	r3, [r7, #23]
 802150c:	1e59      	subs	r1, r3, #1
 802150e:	7dfa      	ldrb	r2, [r7, #23]
 8021510:	4877      	ldr	r0, [pc, #476]	; (80216f0 <SCH_Add_Task+0x2a8>)
 8021512:	460b      	mov	r3, r1
 8021514:	009b      	lsls	r3, r3, #2
 8021516:	440b      	add	r3, r1
 8021518:	009b      	lsls	r3, r3, #2
 802151a:	4403      	add	r3, r0
 802151c:	3304      	adds	r3, #4
 802151e:	6819      	ldr	r1, [r3, #0]
 8021520:	4873      	ldr	r0, [pc, #460]	; (80216f0 <SCH_Add_Task+0x2a8>)
 8021522:	4613      	mov	r3, r2
 8021524:	009b      	lsls	r3, r3, #2
 8021526:	4413      	add	r3, r2
 8021528:	009b      	lsls	r3, r3, #2
 802152a:	4403      	add	r3, r0
 802152c:	3304      	adds	r3, #4
 802152e:	6019      	str	r1, [r3, #0]
//					SCH_tasks_G[i].RunMe = SCH_tasks_G[i - 1].RunMe;
					SCH_tasks_G[i].TaskID = SCH_tasks_G[i - 1].TaskID;
 8021530:	7dfb      	ldrb	r3, [r7, #23]
 8021532:	1e59      	subs	r1, r3, #1
 8021534:	7dfa      	ldrb	r2, [r7, #23]
 8021536:	486e      	ldr	r0, [pc, #440]	; (80216f0 <SCH_Add_Task+0x2a8>)
 8021538:	460b      	mov	r3, r1
 802153a:	009b      	lsls	r3, r3, #2
 802153c:	440b      	add	r3, r1
 802153e:	009b      	lsls	r3, r3, #2
 8021540:	4403      	add	r3, r0
 8021542:	3310      	adds	r3, #16
 8021544:	6819      	ldr	r1, [r3, #0]
 8021546:	486a      	ldr	r0, [pc, #424]	; (80216f0 <SCH_Add_Task+0x2a8>)
 8021548:	4613      	mov	r3, r2
 802154a:	009b      	lsls	r3, r3, #2
 802154c:	4413      	add	r3, r2
 802154e:	009b      	lsls	r3, r3, #2
 8021550:	4403      	add	r3, r0
 8021552:	3310      	adds	r3, #16
 8021554:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 8021556:	7dfb      	ldrb	r3, [r7, #23]
 8021558:	3b01      	subs	r3, #1
 802155a:	75fb      	strb	r3, [r7, #23]
 802155c:	7dfa      	ldrb	r2, [r7, #23]
 802155e:	7ffb      	ldrb	r3, [r7, #31]
 8021560:	429a      	cmp	r2, r3
 8021562:	d8ae      	bhi.n	80214c2 <SCH_Add_Task+0x7a>
				}
			}
			SCH_tasks_G[newTaskIndex].pTask = pFunction;
 8021564:	7ffa      	ldrb	r2, [r7, #31]
 8021566:	4962      	ldr	r1, [pc, #392]	; (80216f0 <SCH_Add_Task+0x2a8>)
 8021568:	4613      	mov	r3, r2
 802156a:	009b      	lsls	r3, r3, #2
 802156c:	4413      	add	r3, r2
 802156e:	009b      	lsls	r3, r3, #2
 8021570:	440b      	add	r3, r1
 8021572:	68fa      	ldr	r2, [r7, #12]
 8021574:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Delay = newDelay;
 8021576:	7ffa      	ldrb	r2, [r7, #31]
 8021578:	495d      	ldr	r1, [pc, #372]	; (80216f0 <SCH_Add_Task+0x2a8>)
 802157a:	4613      	mov	r3, r2
 802157c:	009b      	lsls	r3, r3, #2
 802157e:	4413      	add	r3, r2
 8021580:	009b      	lsls	r3, r3, #2
 8021582:	440b      	add	r3, r1
 8021584:	3304      	adds	r3, #4
 8021586:	693a      	ldr	r2, [r7, #16]
 8021588:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Period = PERIOD;
 802158a:	7ffa      	ldrb	r2, [r7, #31]
 802158c:	4958      	ldr	r1, [pc, #352]	; (80216f0 <SCH_Add_Task+0x2a8>)
 802158e:	4613      	mov	r3, r2
 8021590:	009b      	lsls	r3, r3, #2
 8021592:	4413      	add	r3, r2
 8021594:	009b      	lsls	r3, r3, #2
 8021596:	440b      	add	r3, r1
 8021598:	3308      	adds	r3, #8
 802159a:	687a      	ldr	r2, [r7, #4]
 802159c:	601a      	str	r2, [r3, #0]
			if(SCH_tasks_G[newTaskIndex].Delay == 0){
 802159e:	7ffa      	ldrb	r2, [r7, #31]
 80215a0:	4953      	ldr	r1, [pc, #332]	; (80216f0 <SCH_Add_Task+0x2a8>)
 80215a2:	4613      	mov	r3, r2
 80215a4:	009b      	lsls	r3, r3, #2
 80215a6:	4413      	add	r3, r2
 80215a8:	009b      	lsls	r3, r3, #2
 80215aa:	440b      	add	r3, r1
 80215ac:	3304      	adds	r3, #4
 80215ae:	681b      	ldr	r3, [r3, #0]
 80215b0:	2b00      	cmp	r3, #0
 80215b2:	d10a      	bne.n	80215ca <SCH_Add_Task+0x182>
				SCH_tasks_G[newTaskIndex].RunMe = 1;
 80215b4:	7ffa      	ldrb	r2, [r7, #31]
 80215b6:	494e      	ldr	r1, [pc, #312]	; (80216f0 <SCH_Add_Task+0x2a8>)
 80215b8:	4613      	mov	r3, r2
 80215ba:	009b      	lsls	r3, r3, #2
 80215bc:	4413      	add	r3, r2
 80215be:	009b      	lsls	r3, r3, #2
 80215c0:	440b      	add	r3, r1
 80215c2:	330c      	adds	r3, #12
 80215c4:	2201      	movs	r2, #1
 80215c6:	701a      	strb	r2, [r3, #0]
 80215c8:	e009      	b.n	80215de <SCH_Add_Task+0x196>
			} else {
				SCH_tasks_G[newTaskIndex].RunMe = 0;
 80215ca:	7ffa      	ldrb	r2, [r7, #31]
 80215cc:	4948      	ldr	r1, [pc, #288]	; (80216f0 <SCH_Add_Task+0x2a8>)
 80215ce:	4613      	mov	r3, r2
 80215d0:	009b      	lsls	r3, r3, #2
 80215d2:	4413      	add	r3, r2
 80215d4:	009b      	lsls	r3, r3, #2
 80215d6:	440b      	add	r3, r1
 80215d8:	330c      	adds	r3, #12
 80215da:	2200      	movs	r2, #0
 80215dc:	701a      	strb	r2, [r3, #0]
			}
			SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 80215de:	7ffc      	ldrb	r4, [r7, #31]
 80215e0:	f7ff fef2 	bl	80213c8 <Get_New_Task_ID>
 80215e4:	4602      	mov	r2, r0
 80215e6:	4942      	ldr	r1, [pc, #264]	; (80216f0 <SCH_Add_Task+0x2a8>)
 80215e8:	4623      	mov	r3, r4
 80215ea:	009b      	lsls	r3, r3, #2
 80215ec:	4423      	add	r3, r4
 80215ee:	009b      	lsls	r3, r3, #2
 80215f0:	440b      	add	r3, r1
 80215f2:	3310      	adds	r3, #16
 80215f4:	601a      	str	r2, [r3, #0]
			return SCH_tasks_G[newTaskIndex].TaskID;
 80215f6:	7ffa      	ldrb	r2, [r7, #31]
 80215f8:	493d      	ldr	r1, [pc, #244]	; (80216f0 <SCH_Add_Task+0x2a8>)
 80215fa:	4613      	mov	r3, r2
 80215fc:	009b      	lsls	r3, r3, #2
 80215fe:	4413      	add	r3, r2
 8021600:	009b      	lsls	r3, r3, #2
 8021602:	440b      	add	r3, r1
 8021604:	3310      	adds	r3, #16
 8021606:	681b      	ldr	r3, [r3, #0]
 8021608:	e06e      	b.n	80216e8 <SCH_Add_Task+0x2a0>
		} else {
			if(SCH_tasks_G[newTaskIndex].pTask == 0x0000){
 802160a:	7ffa      	ldrb	r2, [r7, #31]
 802160c:	4938      	ldr	r1, [pc, #224]	; (80216f0 <SCH_Add_Task+0x2a8>)
 802160e:	4613      	mov	r3, r2
 8021610:	009b      	lsls	r3, r3, #2
 8021612:	4413      	add	r3, r2
 8021614:	009b      	lsls	r3, r3, #2
 8021616:	440b      	add	r3, r1
 8021618:	681b      	ldr	r3, [r3, #0]
 802161a:	2b00      	cmp	r3, #0
 802161c:	d154      	bne.n	80216c8 <SCH_Add_Task+0x280>
				SCH_tasks_G[newTaskIndex].pTask = pFunction;
 802161e:	7ffa      	ldrb	r2, [r7, #31]
 8021620:	4933      	ldr	r1, [pc, #204]	; (80216f0 <SCH_Add_Task+0x2a8>)
 8021622:	4613      	mov	r3, r2
 8021624:	009b      	lsls	r3, r3, #2
 8021626:	4413      	add	r3, r2
 8021628:	009b      	lsls	r3, r3, #2
 802162a:	440b      	add	r3, r1
 802162c:	68fa      	ldr	r2, [r7, #12]
 802162e:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[newTaskIndex].Delay = DELAY - sumDelay;
 8021630:	7ffa      	ldrb	r2, [r7, #31]
 8021632:	68b9      	ldr	r1, [r7, #8]
 8021634:	69bb      	ldr	r3, [r7, #24]
 8021636:	1ac9      	subs	r1, r1, r3
 8021638:	482d      	ldr	r0, [pc, #180]	; (80216f0 <SCH_Add_Task+0x2a8>)
 802163a:	4613      	mov	r3, r2
 802163c:	009b      	lsls	r3, r3, #2
 802163e:	4413      	add	r3, r2
 8021640:	009b      	lsls	r3, r3, #2
 8021642:	4403      	add	r3, r0
 8021644:	3304      	adds	r3, #4
 8021646:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[newTaskIndex].Period = PERIOD;
 8021648:	7ffa      	ldrb	r2, [r7, #31]
 802164a:	4929      	ldr	r1, [pc, #164]	; (80216f0 <SCH_Add_Task+0x2a8>)
 802164c:	4613      	mov	r3, r2
 802164e:	009b      	lsls	r3, r3, #2
 8021650:	4413      	add	r3, r2
 8021652:	009b      	lsls	r3, r3, #2
 8021654:	440b      	add	r3, r1
 8021656:	3308      	adds	r3, #8
 8021658:	687a      	ldr	r2, [r7, #4]
 802165a:	601a      	str	r2, [r3, #0]
				if(SCH_tasks_G[newTaskIndex].Delay == 0){
 802165c:	7ffa      	ldrb	r2, [r7, #31]
 802165e:	4924      	ldr	r1, [pc, #144]	; (80216f0 <SCH_Add_Task+0x2a8>)
 8021660:	4613      	mov	r3, r2
 8021662:	009b      	lsls	r3, r3, #2
 8021664:	4413      	add	r3, r2
 8021666:	009b      	lsls	r3, r3, #2
 8021668:	440b      	add	r3, r1
 802166a:	3304      	adds	r3, #4
 802166c:	681b      	ldr	r3, [r3, #0]
 802166e:	2b00      	cmp	r3, #0
 8021670:	d10a      	bne.n	8021688 <SCH_Add_Task+0x240>
					SCH_tasks_G[newTaskIndex].RunMe = 1;
 8021672:	7ffa      	ldrb	r2, [r7, #31]
 8021674:	491e      	ldr	r1, [pc, #120]	; (80216f0 <SCH_Add_Task+0x2a8>)
 8021676:	4613      	mov	r3, r2
 8021678:	009b      	lsls	r3, r3, #2
 802167a:	4413      	add	r3, r2
 802167c:	009b      	lsls	r3, r3, #2
 802167e:	440b      	add	r3, r1
 8021680:	330c      	adds	r3, #12
 8021682:	2201      	movs	r2, #1
 8021684:	701a      	strb	r2, [r3, #0]
 8021686:	e009      	b.n	802169c <SCH_Add_Task+0x254>
				} else {
					SCH_tasks_G[newTaskIndex].RunMe = 0;
 8021688:	7ffa      	ldrb	r2, [r7, #31]
 802168a:	4919      	ldr	r1, [pc, #100]	; (80216f0 <SCH_Add_Task+0x2a8>)
 802168c:	4613      	mov	r3, r2
 802168e:	009b      	lsls	r3, r3, #2
 8021690:	4413      	add	r3, r2
 8021692:	009b      	lsls	r3, r3, #2
 8021694:	440b      	add	r3, r1
 8021696:	330c      	adds	r3, #12
 8021698:	2200      	movs	r2, #0
 802169a:	701a      	strb	r2, [r3, #0]
				}
				SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 802169c:	7ffc      	ldrb	r4, [r7, #31]
 802169e:	f7ff fe93 	bl	80213c8 <Get_New_Task_ID>
 80216a2:	4602      	mov	r2, r0
 80216a4:	4912      	ldr	r1, [pc, #72]	; (80216f0 <SCH_Add_Task+0x2a8>)
 80216a6:	4623      	mov	r3, r4
 80216a8:	009b      	lsls	r3, r3, #2
 80216aa:	4423      	add	r3, r4
 80216ac:	009b      	lsls	r3, r3, #2
 80216ae:	440b      	add	r3, r1
 80216b0:	3310      	adds	r3, #16
 80216b2:	601a      	str	r2, [r3, #0]
				return SCH_tasks_G[newTaskIndex].TaskID;
 80216b4:	7ffa      	ldrb	r2, [r7, #31]
 80216b6:	490e      	ldr	r1, [pc, #56]	; (80216f0 <SCH_Add_Task+0x2a8>)
 80216b8:	4613      	mov	r3, r2
 80216ba:	009b      	lsls	r3, r3, #2
 80216bc:	4413      	add	r3, r2
 80216be:	009b      	lsls	r3, r3, #2
 80216c0:	440b      	add	r3, r1
 80216c2:	3310      	adds	r3, #16
 80216c4:	681b      	ldr	r3, [r3, #0]
 80216c6:	e00f      	b.n	80216e8 <SCH_Add_Task+0x2a0>
	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 80216c8:	7ffb      	ldrb	r3, [r7, #31]
 80216ca:	3301      	adds	r3, #1
 80216cc:	77fb      	strb	r3, [r7, #31]
 80216ce:	7ffb      	ldrb	r3, [r7, #31]
 80216d0:	2b27      	cmp	r3, #39	; 0x27
 80216d2:	f67f aec8 	bls.w	8021466 <SCH_Add_Task+0x1e>
			}
		}
	}
	return SCH_tasks_G[newTaskIndex].TaskID;
 80216d6:	7ffa      	ldrb	r2, [r7, #31]
 80216d8:	4905      	ldr	r1, [pc, #20]	; (80216f0 <SCH_Add_Task+0x2a8>)
 80216da:	4613      	mov	r3, r2
 80216dc:	009b      	lsls	r3, r3, #2
 80216de:	4413      	add	r3, r2
 80216e0:	009b      	lsls	r3, r3, #2
 80216e2:	440b      	add	r3, r1
 80216e4:	3310      	adds	r3, #16
 80216e6:	681b      	ldr	r3, [r3, #0]
}
 80216e8:	4618      	mov	r0, r3
 80216ea:	3724      	adds	r7, #36	; 0x24
 80216ec:	46bd      	mov	sp, r7
 80216ee:	bd90      	pop	{r4, r7, pc}
 80216f0:	20005894 	.word	0x20005894

080216f4 <SCH_Delete_Task>:


uint8_t SCH_Delete_Task(uint32_t taskID){
 80216f4:	b480      	push	{r7}
 80216f6:	b085      	sub	sp, #20
 80216f8:	af00      	add	r7, sp, #0
 80216fa:	6078      	str	r0, [r7, #4]
	uint8_t Return_code  = 0;
 80216fc:	2300      	movs	r3, #0
 80216fe:	737b      	strb	r3, [r7, #13]
	uint8_t taskIndex;
	uint8_t j;
	if(taskID != NO_TASK_ID){
 8021700:	687b      	ldr	r3, [r7, #4]
 8021702:	2b00      	cmp	r3, #0
 8021704:	f000 80e2 	beq.w	80218cc <SCH_Delete_Task+0x1d8>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 8021708:	2300      	movs	r3, #0
 802170a:	73fb      	strb	r3, [r7, #15]
 802170c:	e0da      	b.n	80218c4 <SCH_Delete_Task+0x1d0>
			if(SCH_tasks_G[taskIndex].TaskID == taskID){
 802170e:	7bfa      	ldrb	r2, [r7, #15]
 8021710:	4971      	ldr	r1, [pc, #452]	; (80218d8 <SCH_Delete_Task+0x1e4>)
 8021712:	4613      	mov	r3, r2
 8021714:	009b      	lsls	r3, r3, #2
 8021716:	4413      	add	r3, r2
 8021718:	009b      	lsls	r3, r3, #2
 802171a:	440b      	add	r3, r1
 802171c:	3310      	adds	r3, #16
 802171e:	681b      	ldr	r3, [r3, #0]
 8021720:	687a      	ldr	r2, [r7, #4]
 8021722:	429a      	cmp	r2, r3
 8021724:	f040 80cb 	bne.w	80218be <SCH_Delete_Task+0x1ca>
				Return_code = 1;
 8021728:	2301      	movs	r3, #1
 802172a:	737b      	strb	r3, [r7, #13]
				if(taskIndex != 0 && taskIndex < SCH_MAX_TASKS - 1){
 802172c:	7bfb      	ldrb	r3, [r7, #15]
 802172e:	2b00      	cmp	r3, #0
 8021730:	d02b      	beq.n	802178a <SCH_Delete_Task+0x96>
 8021732:	7bfb      	ldrb	r3, [r7, #15]
 8021734:	2b26      	cmp	r3, #38	; 0x26
 8021736:	d828      	bhi.n	802178a <SCH_Delete_Task+0x96>
					if(SCH_tasks_G[taskIndex+1].pTask != 0x0000){
 8021738:	7bfb      	ldrb	r3, [r7, #15]
 802173a:	1c5a      	adds	r2, r3, #1
 802173c:	4966      	ldr	r1, [pc, #408]	; (80218d8 <SCH_Delete_Task+0x1e4>)
 802173e:	4613      	mov	r3, r2
 8021740:	009b      	lsls	r3, r3, #2
 8021742:	4413      	add	r3, r2
 8021744:	009b      	lsls	r3, r3, #2
 8021746:	440b      	add	r3, r1
 8021748:	681b      	ldr	r3, [r3, #0]
 802174a:	2b00      	cmp	r3, #0
 802174c:	d01d      	beq.n	802178a <SCH_Delete_Task+0x96>
						SCH_tasks_G[taskIndex+1].Delay += SCH_tasks_G[taskIndex].Delay;
 802174e:	7bfb      	ldrb	r3, [r7, #15]
 8021750:	1c5a      	adds	r2, r3, #1
 8021752:	4961      	ldr	r1, [pc, #388]	; (80218d8 <SCH_Delete_Task+0x1e4>)
 8021754:	4613      	mov	r3, r2
 8021756:	009b      	lsls	r3, r3, #2
 8021758:	4413      	add	r3, r2
 802175a:	009b      	lsls	r3, r3, #2
 802175c:	440b      	add	r3, r1
 802175e:	3304      	adds	r3, #4
 8021760:	6819      	ldr	r1, [r3, #0]
 8021762:	7bfa      	ldrb	r2, [r7, #15]
 8021764:	485c      	ldr	r0, [pc, #368]	; (80218d8 <SCH_Delete_Task+0x1e4>)
 8021766:	4613      	mov	r3, r2
 8021768:	009b      	lsls	r3, r3, #2
 802176a:	4413      	add	r3, r2
 802176c:	009b      	lsls	r3, r3, #2
 802176e:	4403      	add	r3, r0
 8021770:	3304      	adds	r3, #4
 8021772:	681b      	ldr	r3, [r3, #0]
 8021774:	7bfa      	ldrb	r2, [r7, #15]
 8021776:	3201      	adds	r2, #1
 8021778:	4419      	add	r1, r3
 802177a:	4857      	ldr	r0, [pc, #348]	; (80218d8 <SCH_Delete_Task+0x1e4>)
 802177c:	4613      	mov	r3, r2
 802177e:	009b      	lsls	r3, r3, #2
 8021780:	4413      	add	r3, r2
 8021782:	009b      	lsls	r3, r3, #2
 8021784:	4403      	add	r3, r0
 8021786:	3304      	adds	r3, #4
 8021788:	6019      	str	r1, [r3, #0]
					}
				}

				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 802178a:	7bfb      	ldrb	r3, [r7, #15]
 802178c:	73bb      	strb	r3, [r7, #14]
 802178e:	e060      	b.n	8021852 <SCH_Delete_Task+0x15e>
					SCH_tasks_G[j].pTask = SCH_tasks_G[j+1].pTask;
 8021790:	7bbb      	ldrb	r3, [r7, #14]
 8021792:	1c59      	adds	r1, r3, #1
 8021794:	7bba      	ldrb	r2, [r7, #14]
 8021796:	4850      	ldr	r0, [pc, #320]	; (80218d8 <SCH_Delete_Task+0x1e4>)
 8021798:	460b      	mov	r3, r1
 802179a:	009b      	lsls	r3, r3, #2
 802179c:	440b      	add	r3, r1
 802179e:	009b      	lsls	r3, r3, #2
 80217a0:	4403      	add	r3, r0
 80217a2:	6819      	ldr	r1, [r3, #0]
 80217a4:	484c      	ldr	r0, [pc, #304]	; (80218d8 <SCH_Delete_Task+0x1e4>)
 80217a6:	4613      	mov	r3, r2
 80217a8:	009b      	lsls	r3, r3, #2
 80217aa:	4413      	add	r3, r2
 80217ac:	009b      	lsls	r3, r3, #2
 80217ae:	4403      	add	r3, r0
 80217b0:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Period = SCH_tasks_G[j+1].Period;
 80217b2:	7bbb      	ldrb	r3, [r7, #14]
 80217b4:	1c59      	adds	r1, r3, #1
 80217b6:	7bba      	ldrb	r2, [r7, #14]
 80217b8:	4847      	ldr	r0, [pc, #284]	; (80218d8 <SCH_Delete_Task+0x1e4>)
 80217ba:	460b      	mov	r3, r1
 80217bc:	009b      	lsls	r3, r3, #2
 80217be:	440b      	add	r3, r1
 80217c0:	009b      	lsls	r3, r3, #2
 80217c2:	4403      	add	r3, r0
 80217c4:	3308      	adds	r3, #8
 80217c6:	6819      	ldr	r1, [r3, #0]
 80217c8:	4843      	ldr	r0, [pc, #268]	; (80218d8 <SCH_Delete_Task+0x1e4>)
 80217ca:	4613      	mov	r3, r2
 80217cc:	009b      	lsls	r3, r3, #2
 80217ce:	4413      	add	r3, r2
 80217d0:	009b      	lsls	r3, r3, #2
 80217d2:	4403      	add	r3, r0
 80217d4:	3308      	adds	r3, #8
 80217d6:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Delay = SCH_tasks_G[j+1].Delay;
 80217d8:	7bbb      	ldrb	r3, [r7, #14]
 80217da:	1c59      	adds	r1, r3, #1
 80217dc:	7bba      	ldrb	r2, [r7, #14]
 80217de:	483e      	ldr	r0, [pc, #248]	; (80218d8 <SCH_Delete_Task+0x1e4>)
 80217e0:	460b      	mov	r3, r1
 80217e2:	009b      	lsls	r3, r3, #2
 80217e4:	440b      	add	r3, r1
 80217e6:	009b      	lsls	r3, r3, #2
 80217e8:	4403      	add	r3, r0
 80217ea:	3304      	adds	r3, #4
 80217ec:	6819      	ldr	r1, [r3, #0]
 80217ee:	483a      	ldr	r0, [pc, #232]	; (80218d8 <SCH_Delete_Task+0x1e4>)
 80217f0:	4613      	mov	r3, r2
 80217f2:	009b      	lsls	r3, r3, #2
 80217f4:	4413      	add	r3, r2
 80217f6:	009b      	lsls	r3, r3, #2
 80217f8:	4403      	add	r3, r0
 80217fa:	3304      	adds	r3, #4
 80217fc:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].RunMe = SCH_tasks_G[j+1].RunMe;
 80217fe:	7bbb      	ldrb	r3, [r7, #14]
 8021800:	1c59      	adds	r1, r3, #1
 8021802:	7bba      	ldrb	r2, [r7, #14]
 8021804:	4834      	ldr	r0, [pc, #208]	; (80218d8 <SCH_Delete_Task+0x1e4>)
 8021806:	460b      	mov	r3, r1
 8021808:	009b      	lsls	r3, r3, #2
 802180a:	440b      	add	r3, r1
 802180c:	009b      	lsls	r3, r3, #2
 802180e:	4403      	add	r3, r0
 8021810:	330c      	adds	r3, #12
 8021812:	7818      	ldrb	r0, [r3, #0]
 8021814:	4930      	ldr	r1, [pc, #192]	; (80218d8 <SCH_Delete_Task+0x1e4>)
 8021816:	4613      	mov	r3, r2
 8021818:	009b      	lsls	r3, r3, #2
 802181a:	4413      	add	r3, r2
 802181c:	009b      	lsls	r3, r3, #2
 802181e:	440b      	add	r3, r1
 8021820:	330c      	adds	r3, #12
 8021822:	4602      	mov	r2, r0
 8021824:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[j].TaskID = SCH_tasks_G[j+1].TaskID;
 8021826:	7bbb      	ldrb	r3, [r7, #14]
 8021828:	1c59      	adds	r1, r3, #1
 802182a:	7bba      	ldrb	r2, [r7, #14]
 802182c:	482a      	ldr	r0, [pc, #168]	; (80218d8 <SCH_Delete_Task+0x1e4>)
 802182e:	460b      	mov	r3, r1
 8021830:	009b      	lsls	r3, r3, #2
 8021832:	440b      	add	r3, r1
 8021834:	009b      	lsls	r3, r3, #2
 8021836:	4403      	add	r3, r0
 8021838:	3310      	adds	r3, #16
 802183a:	6819      	ldr	r1, [r3, #0]
 802183c:	4826      	ldr	r0, [pc, #152]	; (80218d8 <SCH_Delete_Task+0x1e4>)
 802183e:	4613      	mov	r3, r2
 8021840:	009b      	lsls	r3, r3, #2
 8021842:	4413      	add	r3, r2
 8021844:	009b      	lsls	r3, r3, #2
 8021846:	4403      	add	r3, r0
 8021848:	3310      	adds	r3, #16
 802184a:	6019      	str	r1, [r3, #0]
				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 802184c:	7bbb      	ldrb	r3, [r7, #14]
 802184e:	3301      	adds	r3, #1
 8021850:	73bb      	strb	r3, [r7, #14]
 8021852:	7bbb      	ldrb	r3, [r7, #14]
 8021854:	2b26      	cmp	r3, #38	; 0x26
 8021856:	d99b      	bls.n	8021790 <SCH_Delete_Task+0x9c>
				}
				SCH_tasks_G[j].pTask = 0;
 8021858:	7bba      	ldrb	r2, [r7, #14]
 802185a:	491f      	ldr	r1, [pc, #124]	; (80218d8 <SCH_Delete_Task+0x1e4>)
 802185c:	4613      	mov	r3, r2
 802185e:	009b      	lsls	r3, r3, #2
 8021860:	4413      	add	r3, r2
 8021862:	009b      	lsls	r3, r3, #2
 8021864:	440b      	add	r3, r1
 8021866:	2200      	movs	r2, #0
 8021868:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Period = 0;
 802186a:	7bba      	ldrb	r2, [r7, #14]
 802186c:	491a      	ldr	r1, [pc, #104]	; (80218d8 <SCH_Delete_Task+0x1e4>)
 802186e:	4613      	mov	r3, r2
 8021870:	009b      	lsls	r3, r3, #2
 8021872:	4413      	add	r3, r2
 8021874:	009b      	lsls	r3, r3, #2
 8021876:	440b      	add	r3, r1
 8021878:	3308      	adds	r3, #8
 802187a:	2200      	movs	r2, #0
 802187c:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Delay = 0;
 802187e:	7bba      	ldrb	r2, [r7, #14]
 8021880:	4915      	ldr	r1, [pc, #84]	; (80218d8 <SCH_Delete_Task+0x1e4>)
 8021882:	4613      	mov	r3, r2
 8021884:	009b      	lsls	r3, r3, #2
 8021886:	4413      	add	r3, r2
 8021888:	009b      	lsls	r3, r3, #2
 802188a:	440b      	add	r3, r1
 802188c:	3304      	adds	r3, #4
 802188e:	2200      	movs	r2, #0
 8021890:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].RunMe = 0;
 8021892:	7bba      	ldrb	r2, [r7, #14]
 8021894:	4910      	ldr	r1, [pc, #64]	; (80218d8 <SCH_Delete_Task+0x1e4>)
 8021896:	4613      	mov	r3, r2
 8021898:	009b      	lsls	r3, r3, #2
 802189a:	4413      	add	r3, r2
 802189c:	009b      	lsls	r3, r3, #2
 802189e:	440b      	add	r3, r1
 80218a0:	330c      	adds	r3, #12
 80218a2:	2200      	movs	r2, #0
 80218a4:	701a      	strb	r2, [r3, #0]
				SCH_tasks_G[j].TaskID = 0;
 80218a6:	7bba      	ldrb	r2, [r7, #14]
 80218a8:	490b      	ldr	r1, [pc, #44]	; (80218d8 <SCH_Delete_Task+0x1e4>)
 80218aa:	4613      	mov	r3, r2
 80218ac:	009b      	lsls	r3, r3, #2
 80218ae:	4413      	add	r3, r2
 80218b0:	009b      	lsls	r3, r3, #2
 80218b2:	440b      	add	r3, r1
 80218b4:	3310      	adds	r3, #16
 80218b6:	2200      	movs	r2, #0
 80218b8:	601a      	str	r2, [r3, #0]
				return Return_code;
 80218ba:	7b7b      	ldrb	r3, [r7, #13]
 80218bc:	e007      	b.n	80218ce <SCH_Delete_Task+0x1da>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 80218be:	7bfb      	ldrb	r3, [r7, #15]
 80218c0:	3301      	adds	r3, #1
 80218c2:	73fb      	strb	r3, [r7, #15]
 80218c4:	7bfb      	ldrb	r3, [r7, #15]
 80218c6:	2b27      	cmp	r3, #39	; 0x27
 80218c8:	f67f af21 	bls.w	802170e <SCH_Delete_Task+0x1a>
			}
		}
	}
	return Return_code; // return status
 80218cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80218ce:	4618      	mov	r0, r3
 80218d0:	3714      	adds	r7, #20
 80218d2:	46bd      	mov	sp, r7
 80218d4:	bc80      	pop	{r7}
 80218d6:	4770      	bx	lr
 80218d8:	20005894 	.word	0x20005894

080218dc <SCH_Dispatch_Tasks>:



void SCH_Dispatch_Tasks(void){
 80218dc:	b5b0      	push	{r4, r5, r7, lr}
 80218de:	b086      	sub	sp, #24
 80218e0:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].RunMe > 0) {
 80218e2:	4b11      	ldr	r3, [pc, #68]	; (8021928 <SCH_Dispatch_Tasks+0x4c>)
 80218e4:	7b1b      	ldrb	r3, [r3, #12]
 80218e6:	2b00      	cmp	r3, #0
 80218e8:	d019      	beq.n	802191e <SCH_Dispatch_Tasks+0x42>
//		sprintf((char*) strScheduler, "count=%d\r\n", (int) count_SCH_Update);
//		UART3_SendToHost((uint8_t *)strScheduler);
		(*SCH_tasks_G[0].pTask)(); // Run the task
 80218ea:	4b0f      	ldr	r3, [pc, #60]	; (8021928 <SCH_Dispatch_Tasks+0x4c>)
 80218ec:	681b      	ldr	r3, [r3, #0]
 80218ee:	4798      	blx	r3
		SCH_tasks_G[0].RunMe = 0; // Reset / reduce RunMe flag
 80218f0:	4b0d      	ldr	r3, [pc, #52]	; (8021928 <SCH_Dispatch_Tasks+0x4c>)
 80218f2:	2200      	movs	r2, #0
 80218f4:	731a      	strb	r2, [r3, #12]
		sTask temtask = SCH_tasks_G[0];
 80218f6:	4b0c      	ldr	r3, [pc, #48]	; (8021928 <SCH_Dispatch_Tasks+0x4c>)
 80218f8:	1d3c      	adds	r4, r7, #4
 80218fa:	461d      	mov	r5, r3
 80218fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80218fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8021900:	682b      	ldr	r3, [r5, #0]
 8021902:	6023      	str	r3, [r4, #0]
		SCH_Delete_Task(temtask.TaskID);
 8021904:	697b      	ldr	r3, [r7, #20]
 8021906:	4618      	mov	r0, r3
 8021908:	f7ff fef4 	bl	80216f4 <SCH_Delete_Task>
		if (temtask.Period != 0) {
 802190c:	68fb      	ldr	r3, [r7, #12]
 802190e:	2b00      	cmp	r3, #0
 8021910:	d005      	beq.n	802191e <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(temtask.pTask, temtask.Period, temtask.Period);
 8021912:	687b      	ldr	r3, [r7, #4]
 8021914:	68f9      	ldr	r1, [r7, #12]
 8021916:	68fa      	ldr	r2, [r7, #12]
 8021918:	4618      	mov	r0, r3
 802191a:	f7ff fd95 	bl	8021448 <SCH_Add_Task>
		}
	}
}
 802191e:	bf00      	nop
 8021920:	3718      	adds	r7, #24
 8021922:	46bd      	mov	sp, r7
 8021924:	bdb0      	pop	{r4, r5, r7, pc}
 8021926:	bf00      	nop
 8021928:	20005894 	.word	0x20005894

0802192c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 802192c:	b480      	push	{r7}
 802192e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8021930:	f3bf 8f4f 	dsb	sy
}
 8021934:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8021936:	4b06      	ldr	r3, [pc, #24]	; (8021950 <__NVIC_SystemReset+0x24>)
 8021938:	68db      	ldr	r3, [r3, #12]
 802193a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 802193e:	4904      	ldr	r1, [pc, #16]	; (8021950 <__NVIC_SystemReset+0x24>)
 8021940:	4b04      	ldr	r3, [pc, #16]	; (8021954 <__NVIC_SystemReset+0x28>)
 8021942:	4313      	orrs	r3, r2
 8021944:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8021946:	f3bf 8f4f 	dsb	sy
}
 802194a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 802194c:	bf00      	nop
 802194e:	e7fd      	b.n	802194c <__NVIC_SystemReset+0x20>
 8021950:	e000ed00 	.word	0xe000ed00
 8021954:	05fa0004 	.word	0x05fa0004

08021958 <Jump_To_Current_Firmware>:
	Flash_Erase(CURRENT_VERSION_ADDR,1);
	Flash_Write_Char(CURRENT_VERSION_ADDR, version,strlen(VERSION));
}


void Jump_To_Current_Firmware(){
 8021958:	b580      	push	{r7, lr}
 802195a:	af00      	add	r7, sp, #0
	Flash_Erase(FIRMWARE_CHOOSEN,1);
 802195c:	2101      	movs	r1, #1
 802195e:	4804      	ldr	r0, [pc, #16]	; (8021970 <Jump_To_Current_Firmware+0x18>)
 8021960:	f000 f844 	bl	80219ec <Flash_Erase>
    Flash_Write_Int(FIRMWARE_CHOOSEN, CURRENT_FIRMWARE_CHOOSEN);
 8021964:	2102      	movs	r1, #2
 8021966:	4802      	ldr	r0, [pc, #8]	; (8021970 <Jump_To_Current_Firmware+0x18>)
 8021968:	f000 f864 	bl	8021a34 <Flash_Write_Int>
//	void (*app_reset_handler)(void) = (void*)(*(volatile uint32_t*) (CURRENT_FIRMWARE_ADDR + 4));
//	app_reset_handler();
	NVIC_SystemReset();
 802196c:	f7ff ffde 	bl	802192c <__NVIC_SystemReset>
 8021970:	08060000 	.word	0x08060000

08021974 <Jump_To_Factory_Firmware>:
}

void Jump_To_Factory_Firmware(){
 8021974:	b580      	push	{r7, lr}
 8021976:	af00      	add	r7, sp, #0
	Flash_Erase(FIRMWARE_CHOOSEN,1);
 8021978:	2101      	movs	r1, #1
 802197a:	4804      	ldr	r0, [pc, #16]	; (802198c <Jump_To_Factory_Firmware+0x18>)
 802197c:	f000 f836 	bl	80219ec <Flash_Erase>
    Flash_Write_Int(FIRMWARE_CHOOSEN, FACTORY_FIRMWARE_CHOOSEN);
 8021980:	2101      	movs	r1, #1
 8021982:	4802      	ldr	r0, [pc, #8]	; (802198c <Jump_To_Factory_Firmware+0x18>)
 8021984:	f000 f856 	bl	8021a34 <Flash_Write_Int>
//	void (*app_reset_handler)(void) = (void*)(*(volatile uint32_t*) (FOTA_FIRMWARE_ADDR + 4));
//	app_reset_handler();
	NVIC_SystemReset();
 8021988:	f7ff ffd0 	bl	802192c <__NVIC_SystemReset>
 802198c:	08060000 	.word	0x08060000

08021990 <Update_Firmware_Failed>:
//	void (*app_reset_handler)(void) = (void*)(*(volatile uint32_t*) (FOTA_FIRMWARE_ADDR + 4));
//	app_reset_handler();
	NVIC_SystemReset();
}

void Update_Firmware_Failed(){
 8021990:	b480      	push	{r7}
 8021992:	af00      	add	r7, sp, #0
	update_status = UPDATE_FAILED;
 8021994:	4b03      	ldr	r3, [pc, #12]	; (80219a4 <Update_Firmware_Failed+0x14>)
 8021996:	2201      	movs	r2, #1
 8021998:	701a      	strb	r2, [r3, #0]
}
 802199a:	bf00      	nop
 802199c:	46bd      	mov	sp, r7
 802199e:	bc80      	pop	{r7}
 80219a0:	4770      	bx	lr
 80219a2:	bf00      	nop
 80219a4:	2000266c 	.word	0x2000266c

080219a8 <Update_Firmware_Success>:
void Update_Firmware_Success(){
 80219a8:	b480      	push	{r7}
 80219aa:	af00      	add	r7, sp, #0
	update_status = UPDATE_SUCCESS;
 80219ac:	4b03      	ldr	r3, [pc, #12]	; (80219bc <Update_Firmware_Success+0x14>)
 80219ae:	2200      	movs	r2, #0
 80219b0:	701a      	strb	r2, [r3, #0]
}
 80219b2:	bf00      	nop
 80219b4:	46bd      	mov	sp, r7
 80219b6:	bc80      	pop	{r7}
 80219b8:	4770      	bx	lr
 80219ba:	bf00      	nop
 80219bc:	2000266c 	.word	0x2000266c

080219c0 <Get_Update_Firmware_Status>:

uint8_t Get_Update_Firmware_Status(){
 80219c0:	b480      	push	{r7}
 80219c2:	af00      	add	r7, sp, #0
	return update_status;
 80219c4:	4b02      	ldr	r3, [pc, #8]	; (80219d0 <Get_Update_Firmware_Status+0x10>)
 80219c6:	781b      	ldrb	r3, [r3, #0]
}
 80219c8:	4618      	mov	r0, r3
 80219ca:	46bd      	mov	sp, r7
 80219cc:	bc80      	pop	{r7}
 80219ce:	4770      	bx	lr
 80219d0:	2000266c 	.word	0x2000266c

080219d4 <Flash_Lock>:
		data[i] = 0;
	}
}

void Flash_Lock()
{
 80219d4:	b580      	push	{r7, lr}
 80219d6:	af00      	add	r7, sp, #0
	HAL_FLASH_Lock();
 80219d8:	f000 ff4c 	bl	8022874 <HAL_FLASH_Lock>
}
 80219dc:	bf00      	nop
 80219de:	bd80      	pop	{r7, pc}

080219e0 <Flash_Unlock>:

void Flash_Unlock()
{
 80219e0:	b580      	push	{r7, lr}
 80219e2:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80219e4:	f000 ff20 	bl	8022828 <HAL_FLASH_Unlock>
}
 80219e8:	bf00      	nop
 80219ea:	bd80      	pop	{r7, pc}

080219ec <Flash_Erase>:

void Flash_Erase(uint32_t addr,uint32_t num_bytes)
{
 80219ec:	b580      	push	{r7, lr}
 80219ee:	b088      	sub	sp, #32
 80219f0:	af00      	add	r7, sp, #0
 80219f2:	6078      	str	r0, [r7, #4]
 80219f4:	6039      	str	r1, [r7, #0]
	uint32_t num_page = (uint32_t)(num_bytes/FLASH_PAGE_SIZE)+1;
 80219f6:	683b      	ldr	r3, [r7, #0]
 80219f8:	0adb      	lsrs	r3, r3, #11
 80219fa:	3301      	adds	r3, #1
 80219fc:	61fb      	str	r3, [r7, #28]
	uint32_t page_error;
	Flash_Unlock();
 80219fe:	f7ff ffef 	bl	80219e0 <Flash_Unlock>
	FLASH_EraseInitTypeDef erase_instance;
	erase_instance.TypeErase = FLASH_TYPEERASE_PAGES;
 8021a02:	2300      	movs	r3, #0
 8021a04:	60bb      	str	r3, [r7, #8]
	erase_instance.NbPages = num_page;
 8021a06:	69fb      	ldr	r3, [r7, #28]
 8021a08:	617b      	str	r3, [r7, #20]
	erase_instance.PageAddress = addr;
 8021a0a:	687b      	ldr	r3, [r7, #4]
 8021a0c:	613b      	str	r3, [r7, #16]
	HAL_FLASHEx_Erase(&erase_instance, &page_error);
 8021a0e:	f107 0218 	add.w	r2, r7, #24
 8021a12:	f107 0308 	add.w	r3, r7, #8
 8021a16:	4611      	mov	r1, r2
 8021a18:	4618      	mov	r0, r3
 8021a1a:	f000 ffd1 	bl	80229c0 <HAL_FLASHEx_Erase>
	Flash_Lock();
 8021a1e:	f7ff ffd9 	bl	80219d4 <Flash_Lock>
	LOG("Erase done\r\n");
 8021a22:	4803      	ldr	r0, [pc, #12]	; (8021a30 <Flash_Erase+0x44>)
 8021a24:	f7fd fc0e 	bl	801f244 <UART_DEBUG_Transmit>
}
 8021a28:	bf00      	nop
 8021a2a:	3720      	adds	r7, #32
 8021a2c:	46bd      	mov	sp, r7
 8021a2e:	bd80      	pop	{r7, pc}
 8021a30:	08026cfc 	.word	0x08026cfc

08021a34 <Flash_Write_Int>:

void Flash_Write_Int(uint32_t addr, int data)
{
 8021a34:	b580      	push	{r7, lr}
 8021a36:	b082      	sub	sp, #8
 8021a38:	af00      	add	r7, sp, #0
 8021a3a:	6078      	str	r0, [r7, #4]
 8021a3c:	6039      	str	r1, [r7, #0]
	Flash_Unlock();
 8021a3e:	f7ff ffcf 	bl	80219e0 <Flash_Unlock>
	FLASH->CR |= FLASH_CR_PG;				/*!< Programming */
 8021a42:	4b12      	ldr	r3, [pc, #72]	; (8021a8c <Flash_Write_Int+0x58>)
 8021a44:	691b      	ldr	r3, [r3, #16]
 8021a46:	4a11      	ldr	r2, [pc, #68]	; (8021a8c <Flash_Write_Int+0x58>)
 8021a48:	f043 0301 	orr.w	r3, r3, #1
 8021a4c:	6113      	str	r3, [r2, #16]
	while((FLASH->SR&FLASH_SR_BSY));
 8021a4e:	bf00      	nop
 8021a50:	4b0e      	ldr	r3, [pc, #56]	; (8021a8c <Flash_Write_Int+0x58>)
 8021a52:	68db      	ldr	r3, [r3, #12]
 8021a54:	f003 0301 	and.w	r3, r3, #1
 8021a58:	2b00      	cmp	r3, #0
 8021a5a:	d1f9      	bne.n	8021a50 <Flash_Write_Int+0x1c>
	*(__IO uint16_t*)addr = data;
 8021a5c:	687b      	ldr	r3, [r7, #4]
 8021a5e:	683a      	ldr	r2, [r7, #0]
 8021a60:	b292      	uxth	r2, r2
 8021a62:	801a      	strh	r2, [r3, #0]
	while((FLASH->SR&FLASH_SR_BSY));
 8021a64:	bf00      	nop
 8021a66:	4b09      	ldr	r3, [pc, #36]	; (8021a8c <Flash_Write_Int+0x58>)
 8021a68:	68db      	ldr	r3, [r3, #12]
 8021a6a:	f003 0301 	and.w	r3, r3, #1
 8021a6e:	2b00      	cmp	r3, #0
 8021a70:	d1f9      	bne.n	8021a66 <Flash_Write_Int+0x32>
	FLASH->CR &= ~FLASH_CR_PG;
 8021a72:	4b06      	ldr	r3, [pc, #24]	; (8021a8c <Flash_Write_Int+0x58>)
 8021a74:	691b      	ldr	r3, [r3, #16]
 8021a76:	4a05      	ldr	r2, [pc, #20]	; (8021a8c <Flash_Write_Int+0x58>)
 8021a78:	f023 0301 	bic.w	r3, r3, #1
 8021a7c:	6113      	str	r3, [r2, #16]
	Flash_Lock();
 8021a7e:	f7ff ffa9 	bl	80219d4 <Flash_Lock>
}
 8021a82:	bf00      	nop
 8021a84:	3708      	adds	r7, #8
 8021a86:	46bd      	mov	sp, r7
 8021a88:	bd80      	pop	{r7, pc}
 8021a8a:	bf00      	nop
 8021a8c:	40022000 	.word	0x40022000

08021a90 <Flash_Write_Char>:
	return *val;
}


void Flash_Write_Char(uint32_t addr, uint8_t* data ,uint32_t data_len)
{
 8021a90:	b580      	push	{r7, lr}
 8021a92:	b08a      	sub	sp, #40	; 0x28
 8021a94:	af00      	add	r7, sp, #0
 8021a96:	60f8      	str	r0, [r7, #12]
 8021a98:	60b9      	str	r1, [r7, #8]
 8021a9a:	607a      	str	r2, [r7, #4]
	char log[20];
	sprintf(log,"leng_char: %d\r\n",data_len);
 8021a9c:	f107 0310 	add.w	r3, r7, #16
 8021aa0:	687a      	ldr	r2, [r7, #4]
 8021aa2:	4920      	ldr	r1, [pc, #128]	; (8021b24 <Flash_Write_Char+0x94>)
 8021aa4:	4618      	mov	r0, r3
 8021aa6:	f004 f849 	bl	8025b3c <siprintf>
	LOG(log);
 8021aaa:	f107 0310 	add.w	r3, r7, #16
 8021aae:	4618      	mov	r0, r3
 8021ab0:	f7fd fbc8 	bl	801f244 <UART_DEBUG_Transmit>
	int i;
	uint16_t temp;
	Flash_Unlock();
 8021ab4:	f7ff ff94 	bl	80219e0 <Flash_Unlock>
	FLASH->CR |= FLASH_CR_PG;
 8021ab8:	4b1b      	ldr	r3, [pc, #108]	; (8021b28 <Flash_Write_Char+0x98>)
 8021aba:	691b      	ldr	r3, [r3, #16]
 8021abc:	4a1a      	ldr	r2, [pc, #104]	; (8021b28 <Flash_Write_Char+0x98>)
 8021abe:	f043 0301 	orr.w	r3, r3, #1
 8021ac2:	6113      	str	r3, [r2, #16]
	for(i=0; i<data_len; i+=2)
 8021ac4:	2300      	movs	r3, #0
 8021ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8021ac8:	e011      	b.n	8021aee <Flash_Write_Char+0x5e>
	{
	  while((FLASH->SR&FLASH_SR_BSY));
 8021aca:	bf00      	nop
 8021acc:	4b16      	ldr	r3, [pc, #88]	; (8021b28 <Flash_Write_Char+0x98>)
 8021ace:	68db      	ldr	r3, [r3, #12]
 8021ad0:	f003 0301 	and.w	r3, r3, #1
 8021ad4:	2b00      	cmp	r3, #0
 8021ad6:	d1f9      	bne.n	8021acc <Flash_Write_Char+0x3c>
	  *(__IO uint16_t*)(addr + i) = *(uint16_t*)(data+i);
 8021ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ada:	68ba      	ldr	r2, [r7, #8]
 8021adc:	4413      	add	r3, r2
 8021ade:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8021ae0:	68fa      	ldr	r2, [r7, #12]
 8021ae2:	440a      	add	r2, r1
 8021ae4:	881b      	ldrh	r3, [r3, #0]
 8021ae6:	8013      	strh	r3, [r2, #0]
	for(i=0; i<data_len; i+=2)
 8021ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021aea:	3302      	adds	r3, #2
 8021aec:	627b      	str	r3, [r7, #36]	; 0x24
 8021aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021af0:	687a      	ldr	r2, [r7, #4]
 8021af2:	429a      	cmp	r2, r3
 8021af4:	d8e9      	bhi.n	8021aca <Flash_Write_Char+0x3a>
	}
	while((FLASH->SR&FLASH_SR_BSY));
 8021af6:	bf00      	nop
 8021af8:	4b0b      	ldr	r3, [pc, #44]	; (8021b28 <Flash_Write_Char+0x98>)
 8021afa:	68db      	ldr	r3, [r3, #12]
 8021afc:	f003 0301 	and.w	r3, r3, #1
 8021b00:	2b00      	cmp	r3, #0
 8021b02:	d1f9      	bne.n	8021af8 <Flash_Write_Char+0x68>
	FLASH->CR &= ~FLASH_CR_PG;
 8021b04:	4b08      	ldr	r3, [pc, #32]	; (8021b28 <Flash_Write_Char+0x98>)
 8021b06:	691b      	ldr	r3, [r3, #16]
 8021b08:	4a07      	ldr	r2, [pc, #28]	; (8021b28 <Flash_Write_Char+0x98>)
 8021b0a:	f023 0301 	bic.w	r3, r3, #1
 8021b0e:	6113      	str	r3, [r2, #16]
	Flash_Lock();
 8021b10:	f7ff ff60 	bl	80219d4 <Flash_Lock>
	LOG("Write DOne");
 8021b14:	4805      	ldr	r0, [pc, #20]	; (8021b2c <Flash_Write_Char+0x9c>)
 8021b16:	f7fd fb95 	bl	801f244 <UART_DEBUG_Transmit>
}
 8021b1a:	bf00      	nop
 8021b1c:	3728      	adds	r7, #40	; 0x28
 8021b1e:	46bd      	mov	sp, r7
 8021b20:	bd80      	pop	{r7, pc}
 8021b22:	bf00      	nop
 8021b24:	08026d0c 	.word	0x08026d0c
 8021b28:	40022000 	.word	0x40022000
 8021b2c:	08026d1c 	.word	0x08026d1c

08021b30 <FSM_Display_State>:

/**
 * HTTP_Display_State()
 * @brief This is function for display state of State Machine. It only show State when having a state changation.
 */
void FSM_Display_State(void){
 8021b30:	b580      	push	{r7, lr}
 8021b32:	af00      	add	r7, sp, #0
	if(fsm_curr_state!=fsm_prev_state){
 8021b34:	4b17      	ldr	r3, [pc, #92]	; (8021b94 <FSM_Display_State+0x64>)
 8021b36:	781a      	ldrb	r2, [r3, #0]
 8021b38:	4b17      	ldr	r3, [pc, #92]	; (8021b98 <FSM_Display_State+0x68>)
 8021b3a:	781b      	ldrb	r3, [r3, #0]
 8021b3c:	429a      	cmp	r2, r3
 8021b3e:	d023      	beq.n	8021b88 <FSM_Display_State+0x58>
		fsm_prev_state = fsm_curr_state;
 8021b40:	4b14      	ldr	r3, [pc, #80]	; (8021b94 <FSM_Display_State+0x64>)
 8021b42:	781a      	ldrb	r2, [r3, #0]
 8021b44:	4b14      	ldr	r3, [pc, #80]	; (8021b98 <FSM_Display_State+0x68>)
 8021b46:	701a      	strb	r2, [r3, #0]
		switch (fsm_curr_state) {
 8021b48:	4b12      	ldr	r3, [pc, #72]	; (8021b94 <FSM_Display_State+0x64>)
 8021b4a:	781b      	ldrb	r3, [r3, #0]
 8021b4c:	2b03      	cmp	r3, #3
 8021b4e:	d81d      	bhi.n	8021b8c <FSM_Display_State+0x5c>
 8021b50:	a201      	add	r2, pc, #4	; (adr r2, 8021b58 <FSM_Display_State+0x28>)
 8021b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021b56:	bf00      	nop
 8021b58:	08021b69 	.word	0x08021b69
 8021b5c:	08021b71 	.word	0x08021b71
 8021b60:	08021b79 	.word	0x08021b79
 8021b64:	08021b81 	.word	0x08021b81
			case START_SIMCOM:
				LOG("\r\nSTART SIMCOM\r\n");
 8021b68:	480c      	ldr	r0, [pc, #48]	; (8021b9c <FSM_Display_State+0x6c>)
 8021b6a:	f7fd fb6b 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 8021b6e:	e00e      	b.n	8021b8e <FSM_Display_State+0x5e>
			case MQTT_CONFIGURATION:
				LOG("\r\nMQTT CONFIGURATION\r\n");
 8021b70:	480b      	ldr	r0, [pc, #44]	; (8021ba0 <FSM_Display_State+0x70>)
 8021b72:	f7fd fb67 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 8021b76:	e00a      	b.n	8021b8e <FSM_Display_State+0x5e>
			case HTTP_FIRMWARE_PROCESSING:
				LOG("\r\nVERSION CHECKING HTTP\r\n");
 8021b78:	480a      	ldr	r0, [pc, #40]	; (8021ba4 <FSM_Display_State+0x74>)
 8021b7a:	f7fd fb63 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 8021b7e:	e006      	b.n	8021b8e <FSM_Display_State+0x5e>
			case UPDATE_COMPLETE_PERCENT:
				LOG("\r\nUPDATE PERCENT COMPLETE\r\n");
 8021b80:	4809      	ldr	r0, [pc, #36]	; (8021ba8 <FSM_Display_State+0x78>)
 8021b82:	f7fd fb5f 	bl	801f244 <UART_DEBUG_Transmit>
				break;
 8021b86:	e002      	b.n	8021b8e <FSM_Display_State+0x5e>
			default:
				break;
		}
	}
 8021b88:	bf00      	nop
 8021b8a:	e000      	b.n	8021b8e <FSM_Display_State+0x5e>
				break;
 8021b8c:	bf00      	nop

}
 8021b8e:	bf00      	nop
 8021b90:	bd80      	pop	{r7, pc}
 8021b92:	bf00      	nop
 8021b94:	200012cc 	.word	0x200012cc
 8021b98:	200012cd 	.word	0x200012cd
 8021b9c:	08026d28 	.word	0x08026d28
 8021ba0:	08026d3c 	.word	0x08026d3c
 8021ba4:	08026d54 	.word	0x08026d54
 8021ba8:	08026d70 	.word	0x08026d70

08021bac <FSM_Run>:

/**
 * HTTP_Run()
 * @brief This is function can be called from external file. It run follow state machine method. Not have param.
 */
uint8_t FSM_Run(void){
 8021bac:	b580      	push	{r7, lr}
 8021bae:	af00      	add	r7, sp, #0
	FSM_Display_State();
 8021bb0:	f7ff ffbe 	bl	8021b30 <FSM_Display_State>
	if(fsm_curr_state < FSM_MAX_STATE){
 8021bb4:	4b07      	ldr	r3, [pc, #28]	; (8021bd4 <FSM_Run+0x28>)
 8021bb6:	781b      	ldrb	r3, [r3, #0]
 8021bb8:	2b03      	cmp	r3, #3
 8021bba:	d808      	bhi.n	8021bce <FSM_Run+0x22>
		(*fsm_state_machine[fsm_curr_state].func)();
 8021bbc:	4b05      	ldr	r3, [pc, #20]	; (8021bd4 <FSM_Run+0x28>)
 8021bbe:	781b      	ldrb	r3, [r3, #0]
 8021bc0:	4a05      	ldr	r2, [pc, #20]	; (8021bd8 <FSM_Run+0x2c>)
 8021bc2:	00db      	lsls	r3, r3, #3
 8021bc4:	4413      	add	r3, r2
 8021bc6:	685b      	ldr	r3, [r3, #4]
 8021bc8:	4798      	blx	r3
		return 0;
 8021bca:	2300      	movs	r3, #0
 8021bcc:	e000      	b.n	8021bd0 <FSM_Run+0x24>
	}
	else{
		return 1;
 8021bce:	2301      	movs	r3, #1
	}
}
 8021bd0:	4618      	mov	r0, r3
 8021bd2:	bd80      	pop	{r7, pc}
 8021bd4:	200012cc 	.word	0x200012cc
 8021bd8:	200001d8 	.word	0x200001d8

08021bdc <Start_Simcom>:


void Start_Simcom(){
 8021bdc:	b580      	push	{r7, lr}
 8021bde:	af00      	add	r7, sp, #0
	if(Sim7600_Run()){
 8021be0:	f7fc ff3c 	bl	801ea5c <Sim7600_Run>
 8021be4:	4603      	mov	r3, r0
 8021be6:	2b00      	cmp	r3, #0
 8021be8:	d002      	beq.n	8021bf0 <Start_Simcom+0x14>
		fsm_curr_state = MQTT_CONFIGURATION;
 8021bea:	4b02      	ldr	r3, [pc, #8]	; (8021bf4 <Start_Simcom+0x18>)
 8021bec:	2201      	movs	r2, #1
 8021bee:	701a      	strb	r2, [r3, #0]
	}
}
 8021bf0:	bf00      	nop
 8021bf2:	bd80      	pop	{r7, pc}
 8021bf4:	200012cc 	.word	0x200012cc

08021bf8 <Mqtt_Configuration>:

void Mqtt_Configuration(){
 8021bf8:	b580      	push	{r7, lr}
 8021bfa:	af00      	add	r7, sp, #0
	MQTT_Run();
 8021bfc:	f7fe fcd6 	bl	80205ac <MQTT_Run>
	if(MQTT_Get_State() == MQTT_WAIT_NEXT_COMMAND){
 8021c00:	f7ff f910 	bl	8020e24 <MQTT_Get_State>
 8021c04:	4603      	mov	r3, r0
 8021c06:	2b11      	cmp	r3, #17
 8021c08:	d103      	bne.n	8021c12 <Mqtt_Configuration+0x1a>
		fsm_curr_state = HTTP_FIRMWARE_PROCESSING;
 8021c0a:	4b0a      	ldr	r3, [pc, #40]	; (8021c34 <Mqtt_Configuration+0x3c>)
 8021c0c:	2202      	movs	r2, #2
 8021c0e:	701a      	strb	r2, [r3, #0]
	else if (MQTT_Get_State() == MQTT_MAX_STATE){
		SIM7600_Set_State(SIM7600_RESET);
		MQTT_Set_State(MQTT_INIT);
		fsm_curr_state = START_SIMCOM;
	}
}
 8021c10:	e00d      	b.n	8021c2e <Mqtt_Configuration+0x36>
	else if (MQTT_Get_State() == MQTT_MAX_STATE){
 8021c12:	f7ff f907 	bl	8020e24 <MQTT_Get_State>
 8021c16:	4603      	mov	r3, r0
 8021c18:	2b12      	cmp	r3, #18
 8021c1a:	d108      	bne.n	8021c2e <Mqtt_Configuration+0x36>
		SIM7600_Set_State(SIM7600_RESET);
 8021c1c:	2002      	movs	r0, #2
 8021c1e:	f7fd f889 	bl	801ed34 <SIM7600_Set_State>
		MQTT_Set_State(MQTT_INIT);
 8021c22:	2000      	movs	r0, #0
 8021c24:	f7ff f908 	bl	8020e38 <MQTT_Set_State>
		fsm_curr_state = START_SIMCOM;
 8021c28:	4b02      	ldr	r3, [pc, #8]	; (8021c34 <Mqtt_Configuration+0x3c>)
 8021c2a:	2200      	movs	r2, #0
 8021c2c:	701a      	strb	r2, [r3, #0]
}
 8021c2e:	bf00      	nop
 8021c30:	bd80      	pop	{r7, pc}
 8021c32:	bf00      	nop
 8021c34:	200012cc 	.word	0x200012cc

08021c38 <HTTP_Firmware_Processing>:

uint8_t complete_percent;
uint8_t pre_complete_percent;
Firmware_Data_State firmware_state;
void HTTP_Firmware_Processing(){
 8021c38:	b580      	push	{r7, lr}
 8021c3a:	af00      	add	r7, sp, #0
	HTTP_Run();
 8021c3c:	f7fd fc14 	bl	801f468 <HTTP_Run>
	switch (HTTP_Get_State()) {
 8021c40:	f7fe fbd8 	bl	80203f4 <HTTP_Get_State>
 8021c44:	4603      	mov	r3, r0
 8021c46:	2b0b      	cmp	r3, #11
 8021c48:	d059      	beq.n	8021cfe <HTTP_Firmware_Processing+0xc6>
 8021c4a:	2b0b      	cmp	r3, #11
 8021c4c:	dc60      	bgt.n	8021d10 <HTTP_Firmware_Processing+0xd8>
 8021c4e:	2b06      	cmp	r3, #6
 8021c50:	d034      	beq.n	8021cbc <HTTP_Firmware_Processing+0x84>
 8021c52:	2b0a      	cmp	r3, #10
 8021c54:	d15c      	bne.n	8021d10 <HTTP_Firmware_Processing+0xd8>
		case HTTP_DONE:
			if(Get_Update_Firmware_Status() == UPDATE_SUCCESS){
 8021c56:	f7ff feb3 	bl	80219c0 <Get_Update_Firmware_Status>
 8021c5a:	4603      	mov	r3, r0
 8021c5c:	2b00      	cmp	r3, #0
 8021c5e:	d10c      	bne.n	8021c7a <HTTP_Firmware_Processing+0x42>
				sprintf(UPDATE_PERCENT_COMPLETE_TOPIC,"FOTA_%d",Get_Box_ID());
 8021c60:	f7fc fd6a 	bl	801e738 <Get_Box_ID>
 8021c64:	4603      	mov	r3, r0
 8021c66:	461a      	mov	r2, r3
 8021c68:	492c      	ldr	r1, [pc, #176]	; (8021d1c <HTTP_Firmware_Processing+0xe4>)
 8021c6a:	482d      	ldr	r0, [pc, #180]	; (8021d20 <HTTP_Firmware_Processing+0xe8>)
 8021c6c:	f003 ff66 	bl	8025b3c <siprintf>
				sprintf(PAYLOAD,"Success");
 8021c70:	492c      	ldr	r1, [pc, #176]	; (8021d24 <HTTP_Firmware_Processing+0xec>)
 8021c72:	482d      	ldr	r0, [pc, #180]	; (8021d28 <HTTP_Firmware_Processing+0xf0>)
 8021c74:	f003 ff62 	bl	8025b3c <siprintf>
 8021c78:	e018      	b.n	8021cac <HTTP_Firmware_Processing+0x74>
			}
			else{
				sprintf(UPDATE_PERCENT_COMPLETE_TOPIC,"FOTA_%d",Get_Box_ID());
 8021c7a:	f7fc fd5d 	bl	801e738 <Get_Box_ID>
 8021c7e:	4603      	mov	r3, r0
 8021c80:	461a      	mov	r2, r3
 8021c82:	4926      	ldr	r1, [pc, #152]	; (8021d1c <HTTP_Firmware_Processing+0xe4>)
 8021c84:	4826      	ldr	r0, [pc, #152]	; (8021d20 <HTTP_Firmware_Processing+0xe8>)
 8021c86:	f003 ff59 	bl	8025b3c <siprintf>
				if(firmware_state == ERR_CHECKSUM){
 8021c8a:	4b28      	ldr	r3, [pc, #160]	; (8021d2c <HTTP_Firmware_Processing+0xf4>)
 8021c8c:	781b      	ldrb	r3, [r3, #0]
 8021c8e:	2b02      	cmp	r3, #2
 8021c90:	d104      	bne.n	8021c9c <HTTP_Firmware_Processing+0x64>
					sprintf(PAYLOAD,"ERR_CHECKSUM");
 8021c92:	4927      	ldr	r1, [pc, #156]	; (8021d30 <HTTP_Firmware_Processing+0xf8>)
 8021c94:	4824      	ldr	r0, [pc, #144]	; (8021d28 <HTTP_Firmware_Processing+0xf0>)
 8021c96:	f003 ff51 	bl	8025b3c <siprintf>
 8021c9a:	e007      	b.n	8021cac <HTTP_Firmware_Processing+0x74>
				}
				else if(firmware_state == ERR_CURRENT_FIRMWARE_ADDRESS_WRONG){
 8021c9c:	4b23      	ldr	r3, [pc, #140]	; (8021d2c <HTTP_Firmware_Processing+0xf4>)
 8021c9e:	781b      	ldrb	r3, [r3, #0]
 8021ca0:	2b03      	cmp	r3, #3
 8021ca2:	d103      	bne.n	8021cac <HTTP_Firmware_Processing+0x74>
					sprintf(PAYLOAD,"ERR_CURRENT_FIRMWARE_ADDRESS_WRONG");
 8021ca4:	4923      	ldr	r1, [pc, #140]	; (8021d34 <HTTP_Firmware_Processing+0xfc>)
 8021ca6:	4820      	ldr	r0, [pc, #128]	; (8021d28 <HTTP_Firmware_Processing+0xf0>)
 8021ca8:	f003 ff48 	bl	8025b3c <siprintf>
				}
			}
			MQTT_Add_Message(UPDATE_PERCENT_COMPLETE_TOPIC, PAYLOAD);
 8021cac:	491e      	ldr	r1, [pc, #120]	; (8021d28 <HTTP_Firmware_Processing+0xf0>)
 8021cae:	481c      	ldr	r0, [pc, #112]	; (8021d20 <HTTP_Firmware_Processing+0xe8>)
 8021cb0:	f7ff f900 	bl	8020eb4 <MQTT_Add_Message>
			fsm_curr_state = UPDATE_COMPLETE_PERCENT;
 8021cb4:	4b20      	ldr	r3, [pc, #128]	; (8021d38 <HTTP_Firmware_Processing+0x100>)
 8021cb6:	2203      	movs	r2, #3
 8021cb8:	701a      	strb	r2, [r3, #0]
			break;
 8021cba:	e02c      	b.n	8021d16 <HTTP_Firmware_Processing+0xde>
		case HTTP_READ:
			// If have new complete percent, It will publish to Server
			if(complete_percent != pre_complete_percent){
 8021cbc:	4b1f      	ldr	r3, [pc, #124]	; (8021d3c <HTTP_Firmware_Processing+0x104>)
 8021cbe:	781a      	ldrb	r2, [r3, #0]
 8021cc0:	4b1f      	ldr	r3, [pc, #124]	; (8021d40 <HTTP_Firmware_Processing+0x108>)
 8021cc2:	781b      	ldrb	r3, [r3, #0]
 8021cc4:	429a      	cmp	r2, r3
 8021cc6:	d025      	beq.n	8021d14 <HTTP_Firmware_Processing+0xdc>
				pre_complete_percent = complete_percent;
 8021cc8:	4b1c      	ldr	r3, [pc, #112]	; (8021d3c <HTTP_Firmware_Processing+0x104>)
 8021cca:	781a      	ldrb	r2, [r3, #0]
 8021ccc:	4b1c      	ldr	r3, [pc, #112]	; (8021d40 <HTTP_Firmware_Processing+0x108>)
 8021cce:	701a      	strb	r2, [r3, #0]
				sprintf(UPDATE_PERCENT_COMPLETE_TOPIC,"FOTA_%d",Get_Box_ID());
 8021cd0:	f7fc fd32 	bl	801e738 <Get_Box_ID>
 8021cd4:	4603      	mov	r3, r0
 8021cd6:	461a      	mov	r2, r3
 8021cd8:	4910      	ldr	r1, [pc, #64]	; (8021d1c <HTTP_Firmware_Processing+0xe4>)
 8021cda:	4811      	ldr	r0, [pc, #68]	; (8021d20 <HTTP_Firmware_Processing+0xe8>)
 8021cdc:	f003 ff2e 	bl	8025b3c <siprintf>
				sprintf(PAYLOAD,"%d",complete_percent);
 8021ce0:	4b16      	ldr	r3, [pc, #88]	; (8021d3c <HTTP_Firmware_Processing+0x104>)
 8021ce2:	781b      	ldrb	r3, [r3, #0]
 8021ce4:	461a      	mov	r2, r3
 8021ce6:	4917      	ldr	r1, [pc, #92]	; (8021d44 <HTTP_Firmware_Processing+0x10c>)
 8021ce8:	480f      	ldr	r0, [pc, #60]	; (8021d28 <HTTP_Firmware_Processing+0xf0>)
 8021cea:	f003 ff27 	bl	8025b3c <siprintf>
				MQTT_Add_Message(UPDATE_PERCENT_COMPLETE_TOPIC, PAYLOAD);
 8021cee:	490e      	ldr	r1, [pc, #56]	; (8021d28 <HTTP_Firmware_Processing+0xf0>)
 8021cf0:	480b      	ldr	r0, [pc, #44]	; (8021d20 <HTTP_Firmware_Processing+0xe8>)
 8021cf2:	f7ff f8df 	bl	8020eb4 <MQTT_Add_Message>
				fsm_curr_state = UPDATE_COMPLETE_PERCENT;
 8021cf6:	4b10      	ldr	r3, [pc, #64]	; (8021d38 <HTTP_Firmware_Processing+0x100>)
 8021cf8:	2203      	movs	r2, #3
 8021cfa:	701a      	strb	r2, [r3, #0]
			}
			break;
 8021cfc:	e00a      	b.n	8021d14 <HTTP_Firmware_Processing+0xdc>
		case HTTP_MAX_STATE:
			Reset_SimConfiguration_State();
 8021cfe:	f7fd f84d 	bl	801ed9c <Reset_SimConfiguration_State>
			HTTP_Set_State(HTTP_INIT);
 8021d02:	2000      	movs	r0, #0
 8021d04:	f7fe fb80 	bl	8020408 <HTTP_Set_State>
			fsm_curr_state = START_SIMCOM;
 8021d08:	4b0b      	ldr	r3, [pc, #44]	; (8021d38 <HTTP_Firmware_Processing+0x100>)
 8021d0a:	2200      	movs	r2, #0
 8021d0c:	701a      	strb	r2, [r3, #0]
			break;
 8021d0e:	e002      	b.n	8021d16 <HTTP_Firmware_Processing+0xde>
		default:
			break;
 8021d10:	bf00      	nop
 8021d12:	e000      	b.n	8021d16 <HTTP_Firmware_Processing+0xde>
			break;
 8021d14:	bf00      	nop
//	else if(ret == 2){
//		Reset_SimConfiguration_State();
//		HTTP_Set_State(HTTP_INIT);
//		fsm_curr_state = START_SIMCOM;
//	}
}
 8021d16:	bf00      	nop
 8021d18:	bd80      	pop	{r7, pc}
 8021d1a:	bf00      	nop
 8021d1c:	08026d8c 	.word	0x08026d8c
 8021d20:	200012d0 	.word	0x200012d0
 8021d24:	08026d94 	.word	0x08026d94
 8021d28:	20001304 	.word	0x20001304
 8021d2c:	20005bb4 	.word	0x20005bb4
 8021d30:	08026d9c 	.word	0x08026d9c
 8021d34:	08026dac 	.word	0x08026dac
 8021d38:	200012cc 	.word	0x200012cc
 8021d3c:	20005bb5 	.word	0x20005bb5
 8021d40:	20005bb6 	.word	0x20005bb6
 8021d44:	08026dd0 	.word	0x08026dd0

08021d48 <Update_Complete_Percent>:


void Update_Complete_Percent(){
 8021d48:	b580      	push	{r7, lr}
 8021d4a:	af00      	add	r7, sp, #0
	if(is_Has_Message_Available()){
 8021d4c:	f7ff f93c 	bl	8020fc8 <is_Has_Message_Available>
 8021d50:	4603      	mov	r3, r0
 8021d52:	2b00      	cmp	r3, #0
 8021d54:	d001      	beq.n	8021d5a <Update_Complete_Percent+0x12>
		MQTT_Dispatch_Message();
 8021d56:	f7ff f905 	bl	8020f64 <MQTT_Dispatch_Message>
	}
	MQTT_Run();
 8021d5a:	f7fe fc27 	bl	80205ac <MQTT_Run>
	switch (MQTT_Get_State()) {
 8021d5e:	f7ff f861 	bl	8020e24 <MQTT_Get_State>
 8021d62:	4603      	mov	r3, r0
 8021d64:	2b11      	cmp	r3, #17
 8021d66:	d002      	beq.n	8021d6e <Update_Complete_Percent+0x26>
 8021d68:	2b12      	cmp	r3, #18
 8021d6a:	d01f      	beq.n	8021dac <Update_Complete_Percent+0x64>
			HTTP_Set_State(HTTP_INIT);
			MQTT_Set_State(MQTT_INIT);
			fsm_curr_state = START_SIMCOM;
			break;
		default:
			break;
 8021d6c:	e02c      	b.n	8021dc8 <Update_Complete_Percent+0x80>
			if(HTTP_Get_State() == HTTP_DONE){
 8021d6e:	f7fe fb41 	bl	80203f4 <HTTP_Get_State>
 8021d72:	4603      	mov	r3, r0
 8021d74:	2b0a      	cmp	r3, #10
 8021d76:	d110      	bne.n	8021d9a <Update_Complete_Percent+0x52>
				if(Get_Update_Firmware_Status() == UPDATE_SUCCESS){
 8021d78:	f7ff fe22 	bl	80219c0 <Get_Update_Firmware_Status>
 8021d7c:	4603      	mov	r3, r0
 8021d7e:	2b00      	cmp	r3, #0
 8021d80:	d105      	bne.n	8021d8e <Update_Complete_Percent+0x46>
					LOG("\r\nJump_To_Current_Firmware\r\n");
 8021d82:	4812      	ldr	r0, [pc, #72]	; (8021dcc <Update_Complete_Percent+0x84>)
 8021d84:	f7fd fa5e 	bl	801f244 <UART_DEBUG_Transmit>
					Jump_To_Current_Firmware();
 8021d88:	f7ff fde6 	bl	8021958 <Jump_To_Current_Firmware>
			break;
 8021d8c:	e01b      	b.n	8021dc6 <Update_Complete_Percent+0x7e>
					LOG("\r\nJump_To_Factory_Firmware\r\n");
 8021d8e:	4810      	ldr	r0, [pc, #64]	; (8021dd0 <Update_Complete_Percent+0x88>)
 8021d90:	f7fd fa58 	bl	801f244 <UART_DEBUG_Transmit>
					Jump_To_Factory_Firmware();
 8021d94:	f7ff fdee 	bl	8021974 <Jump_To_Factory_Firmware>
			break;
 8021d98:	e015      	b.n	8021dc6 <Update_Complete_Percent+0x7e>
			else if (HTTP_Get_State()==HTTP_READ){
 8021d9a:	f7fe fb2b 	bl	80203f4 <HTTP_Get_State>
 8021d9e:	4603      	mov	r3, r0
 8021da0:	2b06      	cmp	r3, #6
 8021da2:	d110      	bne.n	8021dc6 <Update_Complete_Percent+0x7e>
				fsm_curr_state = HTTP_FIRMWARE_PROCESSING;
 8021da4:	4b0b      	ldr	r3, [pc, #44]	; (8021dd4 <Update_Complete_Percent+0x8c>)
 8021da6:	2202      	movs	r2, #2
 8021da8:	701a      	strb	r2, [r3, #0]
			break;
 8021daa:	e00c      	b.n	8021dc6 <Update_Complete_Percent+0x7e>
			SIM7600_Set_State(SIM7600_RESET);
 8021dac:	2002      	movs	r0, #2
 8021dae:	f7fc ffc1 	bl	801ed34 <SIM7600_Set_State>
			HTTP_Set_State(HTTP_INIT);
 8021db2:	2000      	movs	r0, #0
 8021db4:	f7fe fb28 	bl	8020408 <HTTP_Set_State>
			MQTT_Set_State(MQTT_INIT);
 8021db8:	2000      	movs	r0, #0
 8021dba:	f7ff f83d 	bl	8020e38 <MQTT_Set_State>
			fsm_curr_state = START_SIMCOM;
 8021dbe:	4b05      	ldr	r3, [pc, #20]	; (8021dd4 <Update_Complete_Percent+0x8c>)
 8021dc0:	2200      	movs	r2, #0
 8021dc2:	701a      	strb	r2, [r3, #0]
			break;
 8021dc4:	e000      	b.n	8021dc8 <Update_Complete_Percent+0x80>
			break;
 8021dc6:	bf00      	nop
	}
}
 8021dc8:	bf00      	nop
 8021dca:	bd80      	pop	{r7, pc}
 8021dcc:	08026dd4 	.word	0x08026dd4
 8021dd0:	08026df4 	.word	0x08026df4
 8021dd4:	200012cc 	.word	0x200012cc

08021dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8021dd8:	b580      	push	{r7, lr}
 8021dda:	b086      	sub	sp, #24
 8021ddc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8021dde:	f000 fa4d 	bl	802227c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8021de2:	f7fd f8db 	bl	801ef9c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  UART_SIM7600_Init();
 8021de6:	f7fd f967 	bl	801f0b8 <UART_SIM7600_Init>
  UART_DEBUG_Init();
 8021dea:	f7fd fa01 	bl	801f1f0 <UART_DEBUG_Init>
  I2C_Init();
 8021dee:	f7fd f84b 	bl	801ee88 <I2C_Init>
  Lcd_Initialization();
 8021df2:	f7fc fc1b 	bl	801e62c <Lcd_Initialization>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  GPIO_Init();
 8021df6:	f7fc ffd9 	bl	801edac <GPIO_Init>
  Timer_Init();
 8021dfa:	f7fd f915 	bl	801f028 <Timer_Init>
  SPI2_Init();
 8021dfe:	f7fd f873 	bl	801eee8 <SPI2_Init>
  MC25LC512_Initialize();
 8021e02:	f7fc fa5d 	bl	801e2c0 <MC25LC512_Initialize>
  I2C_Init();
 8021e06:	f7fd f83f 	bl	801ee88 <I2C_Init>
  PCF_Init();
 8021e0a:	f7fc fc6f 	bl	801e6ec <PCF_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  UART_DEBUG_Transmit("Fota Start\r\n");
 8021e0e:	480f      	ldr	r0, [pc, #60]	; (8021e4c <main+0x74>)
 8021e10:	f7fd fa18 	bl	801f244 <UART_DEBUG_Transmit>
  Lcd_Clear_Display();
 8021e14:	f7fc fc40 	bl	801e698 <Lcd_Clear_Display>
  Lcd_Show_String("FOTA START", 0, 0);
 8021e18:	2200      	movs	r2, #0
 8021e1a:	2100      	movs	r1, #0
 8021e1c:	480c      	ldr	r0, [pc, #48]	; (8021e50 <main+0x78>)
 8021e1e:	f7fc fc53 	bl	801e6c8 <Lcd_Show_String>
  char log[20];
  sprintf(log,"BoxID: %d",Get_Box_ID());
 8021e22:	f7fc fc89 	bl	801e738 <Get_Box_ID>
 8021e26:	4602      	mov	r2, r0
 8021e28:	1d3b      	adds	r3, r7, #4
 8021e2a:	490a      	ldr	r1, [pc, #40]	; (8021e54 <main+0x7c>)
 8021e2c:	4618      	mov	r0, r3
 8021e2e:	f003 fe85 	bl	8025b3c <siprintf>
  Lcd_Show_String(log, 1, 0);
 8021e32:	1d3b      	adds	r3, r7, #4
 8021e34:	2200      	movs	r2, #0
 8021e36:	2101      	movs	r1, #1
 8021e38:	4618      	mov	r0, r3
 8021e3a:	f7fc fc45 	bl	801e6c8 <Lcd_Show_String>
  while (1)
  {
    /* USER CODE END WHILE */
	  FSM_Run();
 8021e3e:	f7ff feb5 	bl	8021bac <FSM_Run>
	  SCH_Dispatch_Tasks();
 8021e42:	f7ff fd4b 	bl	80218dc <SCH_Dispatch_Tasks>
	  AT_Processing();
 8021e46:	f7ff f971 	bl	802112c <AT_Processing>
  {
 8021e4a:	e7f8      	b.n	8021e3e <main+0x66>
 8021e4c:	08026e14 	.word	0x08026e14
 8021e50:	08026e24 	.word	0x08026e24
 8021e54:	08026e30 	.word	0x08026e30

08021e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8021e58:	b480      	push	{r7}
 8021e5a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8021e5c:	b672      	cpsid	i
}
 8021e5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8021e60:	e7fe      	b.n	8021e60 <Error_Handler+0x8>
	...

08021e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8021e64:	b480      	push	{r7}
 8021e66:	b085      	sub	sp, #20
 8021e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8021e6a:	4b15      	ldr	r3, [pc, #84]	; (8021ec0 <HAL_MspInit+0x5c>)
 8021e6c:	699b      	ldr	r3, [r3, #24]
 8021e6e:	4a14      	ldr	r2, [pc, #80]	; (8021ec0 <HAL_MspInit+0x5c>)
 8021e70:	f043 0301 	orr.w	r3, r3, #1
 8021e74:	6193      	str	r3, [r2, #24]
 8021e76:	4b12      	ldr	r3, [pc, #72]	; (8021ec0 <HAL_MspInit+0x5c>)
 8021e78:	699b      	ldr	r3, [r3, #24]
 8021e7a:	f003 0301 	and.w	r3, r3, #1
 8021e7e:	60bb      	str	r3, [r7, #8]
 8021e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8021e82:	4b0f      	ldr	r3, [pc, #60]	; (8021ec0 <HAL_MspInit+0x5c>)
 8021e84:	69db      	ldr	r3, [r3, #28]
 8021e86:	4a0e      	ldr	r2, [pc, #56]	; (8021ec0 <HAL_MspInit+0x5c>)
 8021e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021e8c:	61d3      	str	r3, [r2, #28]
 8021e8e:	4b0c      	ldr	r3, [pc, #48]	; (8021ec0 <HAL_MspInit+0x5c>)
 8021e90:	69db      	ldr	r3, [r3, #28]
 8021e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021e96:	607b      	str	r3, [r7, #4]
 8021e98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8021e9a:	4b0a      	ldr	r3, [pc, #40]	; (8021ec4 <HAL_MspInit+0x60>)
 8021e9c:	685b      	ldr	r3, [r3, #4]
 8021e9e:	60fb      	str	r3, [r7, #12]
 8021ea0:	68fb      	ldr	r3, [r7, #12]
 8021ea2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8021ea6:	60fb      	str	r3, [r7, #12]
 8021ea8:	68fb      	ldr	r3, [r7, #12]
 8021eaa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8021eae:	60fb      	str	r3, [r7, #12]
 8021eb0:	4a04      	ldr	r2, [pc, #16]	; (8021ec4 <HAL_MspInit+0x60>)
 8021eb2:	68fb      	ldr	r3, [r7, #12]
 8021eb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8021eb6:	bf00      	nop
 8021eb8:	3714      	adds	r7, #20
 8021eba:	46bd      	mov	sp, r7
 8021ebc:	bc80      	pop	{r7}
 8021ebe:	4770      	bx	lr
 8021ec0:	40021000 	.word	0x40021000
 8021ec4:	40010000 	.word	0x40010000

08021ec8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8021ec8:	b580      	push	{r7, lr}
 8021eca:	b088      	sub	sp, #32
 8021ecc:	af00      	add	r7, sp, #0
 8021ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021ed0:	f107 0310 	add.w	r3, r7, #16
 8021ed4:	2200      	movs	r2, #0
 8021ed6:	601a      	str	r2, [r3, #0]
 8021ed8:	605a      	str	r2, [r3, #4]
 8021eda:	609a      	str	r2, [r3, #8]
 8021edc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8021ede:	687b      	ldr	r3, [r7, #4]
 8021ee0:	681b      	ldr	r3, [r3, #0]
 8021ee2:	4a15      	ldr	r2, [pc, #84]	; (8021f38 <HAL_I2C_MspInit+0x70>)
 8021ee4:	4293      	cmp	r3, r2
 8021ee6:	d123      	bne.n	8021f30 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8021ee8:	4b14      	ldr	r3, [pc, #80]	; (8021f3c <HAL_I2C_MspInit+0x74>)
 8021eea:	699b      	ldr	r3, [r3, #24]
 8021eec:	4a13      	ldr	r2, [pc, #76]	; (8021f3c <HAL_I2C_MspInit+0x74>)
 8021eee:	f043 0308 	orr.w	r3, r3, #8
 8021ef2:	6193      	str	r3, [r2, #24]
 8021ef4:	4b11      	ldr	r3, [pc, #68]	; (8021f3c <HAL_I2C_MspInit+0x74>)
 8021ef6:	699b      	ldr	r3, [r3, #24]
 8021ef8:	f003 0308 	and.w	r3, r3, #8
 8021efc:	60fb      	str	r3, [r7, #12]
 8021efe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8021f00:	23c0      	movs	r3, #192	; 0xc0
 8021f02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8021f04:	2312      	movs	r3, #18
 8021f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8021f08:	2303      	movs	r3, #3
 8021f0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021f0c:	f107 0310 	add.w	r3, r7, #16
 8021f10:	4619      	mov	r1, r3
 8021f12:	480b      	ldr	r0, [pc, #44]	; (8021f40 <HAL_I2C_MspInit+0x78>)
 8021f14:	f000 fdfc 	bl	8022b10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8021f18:	4b08      	ldr	r3, [pc, #32]	; (8021f3c <HAL_I2C_MspInit+0x74>)
 8021f1a:	69db      	ldr	r3, [r3, #28]
 8021f1c:	4a07      	ldr	r2, [pc, #28]	; (8021f3c <HAL_I2C_MspInit+0x74>)
 8021f1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8021f22:	61d3      	str	r3, [r2, #28]
 8021f24:	4b05      	ldr	r3, [pc, #20]	; (8021f3c <HAL_I2C_MspInit+0x74>)
 8021f26:	69db      	ldr	r3, [r3, #28]
 8021f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8021f2c:	60bb      	str	r3, [r7, #8]
 8021f2e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8021f30:	bf00      	nop
 8021f32:	3720      	adds	r7, #32
 8021f34:	46bd      	mov	sp, r7
 8021f36:	bd80      	pop	{r7, pc}
 8021f38:	40005400 	.word	0x40005400
 8021f3c:	40021000 	.word	0x40021000
 8021f40:	40010c00 	.word	0x40010c00

08021f44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8021f44:	b580      	push	{r7, lr}
 8021f46:	b088      	sub	sp, #32
 8021f48:	af00      	add	r7, sp, #0
 8021f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021f4c:	f107 0310 	add.w	r3, r7, #16
 8021f50:	2200      	movs	r2, #0
 8021f52:	601a      	str	r2, [r3, #0]
 8021f54:	605a      	str	r2, [r3, #4]
 8021f56:	609a      	str	r2, [r3, #8]
 8021f58:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8021f5a:	687b      	ldr	r3, [r7, #4]
 8021f5c:	681b      	ldr	r3, [r3, #0]
 8021f5e:	4a16      	ldr	r2, [pc, #88]	; (8021fb8 <HAL_SPI_MspInit+0x74>)
 8021f60:	4293      	cmp	r3, r2
 8021f62:	d124      	bne.n	8021fae <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8021f64:	4b15      	ldr	r3, [pc, #84]	; (8021fbc <HAL_SPI_MspInit+0x78>)
 8021f66:	69db      	ldr	r3, [r3, #28]
 8021f68:	4a14      	ldr	r2, [pc, #80]	; (8021fbc <HAL_SPI_MspInit+0x78>)
 8021f6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8021f6e:	61d3      	str	r3, [r2, #28]
 8021f70:	4b12      	ldr	r3, [pc, #72]	; (8021fbc <HAL_SPI_MspInit+0x78>)
 8021f72:	69db      	ldr	r3, [r3, #28]
 8021f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021f78:	60fb      	str	r3, [r7, #12]
 8021f7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8021f7c:	4b0f      	ldr	r3, [pc, #60]	; (8021fbc <HAL_SPI_MspInit+0x78>)
 8021f7e:	699b      	ldr	r3, [r3, #24]
 8021f80:	4a0e      	ldr	r2, [pc, #56]	; (8021fbc <HAL_SPI_MspInit+0x78>)
 8021f82:	f043 0308 	orr.w	r3, r3, #8
 8021f86:	6193      	str	r3, [r2, #24]
 8021f88:	4b0c      	ldr	r3, [pc, #48]	; (8021fbc <HAL_SPI_MspInit+0x78>)
 8021f8a:	699b      	ldr	r3, [r3, #24]
 8021f8c:	f003 0308 	and.w	r3, r3, #8
 8021f90:	60bb      	str	r3, [r7, #8]
 8021f92:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8021f94:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8021f98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021f9a:	2302      	movs	r3, #2
 8021f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8021f9e:	2303      	movs	r3, #3
 8021fa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021fa2:	f107 0310 	add.w	r3, r7, #16
 8021fa6:	4619      	mov	r1, r3
 8021fa8:	4805      	ldr	r0, [pc, #20]	; (8021fc0 <HAL_SPI_MspInit+0x7c>)
 8021faa:	f000 fdb1 	bl	8022b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8021fae:	bf00      	nop
 8021fb0:	3720      	adds	r7, #32
 8021fb2:	46bd      	mov	sp, r7
 8021fb4:	bd80      	pop	{r7, pc}
 8021fb6:	bf00      	nop
 8021fb8:	40003800 	.word	0x40003800
 8021fbc:	40021000 	.word	0x40021000
 8021fc0:	40010c00 	.word	0x40010c00

08021fc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8021fc4:	b580      	push	{r7, lr}
 8021fc6:	b084      	sub	sp, #16
 8021fc8:	af00      	add	r7, sp, #0
 8021fca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8021fcc:	687b      	ldr	r3, [r7, #4]
 8021fce:	681b      	ldr	r3, [r3, #0]
 8021fd0:	4a0d      	ldr	r2, [pc, #52]	; (8022008 <HAL_TIM_Base_MspInit+0x44>)
 8021fd2:	4293      	cmp	r3, r2
 8021fd4:	d113      	bne.n	8021ffe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8021fd6:	4b0d      	ldr	r3, [pc, #52]	; (802200c <HAL_TIM_Base_MspInit+0x48>)
 8021fd8:	69db      	ldr	r3, [r3, #28]
 8021fda:	4a0c      	ldr	r2, [pc, #48]	; (802200c <HAL_TIM_Base_MspInit+0x48>)
 8021fdc:	f043 0302 	orr.w	r3, r3, #2
 8021fe0:	61d3      	str	r3, [r2, #28]
 8021fe2:	4b0a      	ldr	r3, [pc, #40]	; (802200c <HAL_TIM_Base_MspInit+0x48>)
 8021fe4:	69db      	ldr	r3, [r3, #28]
 8021fe6:	f003 0302 	and.w	r3, r3, #2
 8021fea:	60fb      	str	r3, [r7, #12]
 8021fec:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8021fee:	2200      	movs	r2, #0
 8021ff0:	2100      	movs	r1, #0
 8021ff2:	201d      	movs	r0, #29
 8021ff4:	f000 fa9f 	bl	8022536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8021ff8:	201d      	movs	r0, #29
 8021ffa:	f000 fab8 	bl	802256e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8021ffe:	bf00      	nop
 8022000:	3710      	adds	r7, #16
 8022002:	46bd      	mov	sp, r7
 8022004:	bd80      	pop	{r7, pc}
 8022006:	bf00      	nop
 8022008:	40000400 	.word	0x40000400
 802200c:	40021000 	.word	0x40021000

08022010 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8022010:	b580      	push	{r7, lr}
 8022012:	b08a      	sub	sp, #40	; 0x28
 8022014:	af00      	add	r7, sp, #0
 8022016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8022018:	f107 0318 	add.w	r3, r7, #24
 802201c:	2200      	movs	r2, #0
 802201e:	601a      	str	r2, [r3, #0]
 8022020:	605a      	str	r2, [r3, #4]
 8022022:	609a      	str	r2, [r3, #8]
 8022024:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8022026:	687b      	ldr	r3, [r7, #4]
 8022028:	681b      	ldr	r3, [r3, #0]
 802202a:	4a3c      	ldr	r2, [pc, #240]	; (802211c <HAL_UART_MspInit+0x10c>)
 802202c:	4293      	cmp	r3, r2
 802202e:	d13a      	bne.n	80220a6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8022030:	4b3b      	ldr	r3, [pc, #236]	; (8022120 <HAL_UART_MspInit+0x110>)
 8022032:	699b      	ldr	r3, [r3, #24]
 8022034:	4a3a      	ldr	r2, [pc, #232]	; (8022120 <HAL_UART_MspInit+0x110>)
 8022036:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802203a:	6193      	str	r3, [r2, #24]
 802203c:	4b38      	ldr	r3, [pc, #224]	; (8022120 <HAL_UART_MspInit+0x110>)
 802203e:	699b      	ldr	r3, [r3, #24]
 8022040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022044:	617b      	str	r3, [r7, #20]
 8022046:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8022048:	4b35      	ldr	r3, [pc, #212]	; (8022120 <HAL_UART_MspInit+0x110>)
 802204a:	699b      	ldr	r3, [r3, #24]
 802204c:	4a34      	ldr	r2, [pc, #208]	; (8022120 <HAL_UART_MspInit+0x110>)
 802204e:	f043 0304 	orr.w	r3, r3, #4
 8022052:	6193      	str	r3, [r2, #24]
 8022054:	4b32      	ldr	r3, [pc, #200]	; (8022120 <HAL_UART_MspInit+0x110>)
 8022056:	699b      	ldr	r3, [r3, #24]
 8022058:	f003 0304 	and.w	r3, r3, #4
 802205c:	613b      	str	r3, [r7, #16]
 802205e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8022060:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022066:	2302      	movs	r3, #2
 8022068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 802206a:	2303      	movs	r3, #3
 802206c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802206e:	f107 0318 	add.w	r3, r7, #24
 8022072:	4619      	mov	r1, r3
 8022074:	482b      	ldr	r0, [pc, #172]	; (8022124 <HAL_UART_MspInit+0x114>)
 8022076:	f000 fd4b 	bl	8022b10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 802207a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802207e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8022080:	2300      	movs	r3, #0
 8022082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022084:	2300      	movs	r3, #0
 8022086:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8022088:	f107 0318 	add.w	r3, r7, #24
 802208c:	4619      	mov	r1, r3
 802208e:	4825      	ldr	r0, [pc, #148]	; (8022124 <HAL_UART_MspInit+0x114>)
 8022090:	f000 fd3e 	bl	8022b10 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8022094:	2200      	movs	r2, #0
 8022096:	2100      	movs	r1, #0
 8022098:	2025      	movs	r0, #37	; 0x25
 802209a:	f000 fa4c 	bl	8022536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 802209e:	2025      	movs	r0, #37	; 0x25
 80220a0:	f000 fa65 	bl	802256e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80220a4:	e036      	b.n	8022114 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 80220a6:	687b      	ldr	r3, [r7, #4]
 80220a8:	681b      	ldr	r3, [r3, #0]
 80220aa:	4a1f      	ldr	r2, [pc, #124]	; (8022128 <HAL_UART_MspInit+0x118>)
 80220ac:	4293      	cmp	r3, r2
 80220ae:	d131      	bne.n	8022114 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 80220b0:	4b1b      	ldr	r3, [pc, #108]	; (8022120 <HAL_UART_MspInit+0x110>)
 80220b2:	69db      	ldr	r3, [r3, #28]
 80220b4:	4a1a      	ldr	r2, [pc, #104]	; (8022120 <HAL_UART_MspInit+0x110>)
 80220b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80220ba:	61d3      	str	r3, [r2, #28]
 80220bc:	4b18      	ldr	r3, [pc, #96]	; (8022120 <HAL_UART_MspInit+0x110>)
 80220be:	69db      	ldr	r3, [r3, #28]
 80220c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80220c4:	60fb      	str	r3, [r7, #12]
 80220c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80220c8:	4b15      	ldr	r3, [pc, #84]	; (8022120 <HAL_UART_MspInit+0x110>)
 80220ca:	699b      	ldr	r3, [r3, #24]
 80220cc:	4a14      	ldr	r2, [pc, #80]	; (8022120 <HAL_UART_MspInit+0x110>)
 80220ce:	f043 0308 	orr.w	r3, r3, #8
 80220d2:	6193      	str	r3, [r2, #24]
 80220d4:	4b12      	ldr	r3, [pc, #72]	; (8022120 <HAL_UART_MspInit+0x110>)
 80220d6:	699b      	ldr	r3, [r3, #24]
 80220d8:	f003 0308 	and.w	r3, r3, #8
 80220dc:	60bb      	str	r3, [r7, #8]
 80220de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80220e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80220e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80220e6:	2302      	movs	r3, #2
 80220e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80220ea:	2303      	movs	r3, #3
 80220ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80220ee:	f107 0318 	add.w	r3, r7, #24
 80220f2:	4619      	mov	r1, r3
 80220f4:	480d      	ldr	r0, [pc, #52]	; (802212c <HAL_UART_MspInit+0x11c>)
 80220f6:	f000 fd0b 	bl	8022b10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80220fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80220fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8022100:	2300      	movs	r3, #0
 8022102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022104:	2300      	movs	r3, #0
 8022106:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8022108:	f107 0318 	add.w	r3, r7, #24
 802210c:	4619      	mov	r1, r3
 802210e:	4807      	ldr	r0, [pc, #28]	; (802212c <HAL_UART_MspInit+0x11c>)
 8022110:	f000 fcfe 	bl	8022b10 <HAL_GPIO_Init>
}
 8022114:	bf00      	nop
 8022116:	3728      	adds	r7, #40	; 0x28
 8022118:	46bd      	mov	sp, r7
 802211a:	bd80      	pop	{r7, pc}
 802211c:	40013800 	.word	0x40013800
 8022120:	40021000 	.word	0x40021000
 8022124:	40010800 	.word	0x40010800
 8022128:	40004800 	.word	0x40004800
 802212c:	40010c00 	.word	0x40010c00

08022130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8022130:	b480      	push	{r7}
 8022132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8022134:	e7fe      	b.n	8022134 <NMI_Handler+0x4>

08022136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8022136:	b480      	push	{r7}
 8022138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 802213a:	e7fe      	b.n	802213a <HardFault_Handler+0x4>

0802213c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 802213c:	b480      	push	{r7}
 802213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8022140:	e7fe      	b.n	8022140 <MemManage_Handler+0x4>

08022142 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8022142:	b480      	push	{r7}
 8022144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8022146:	e7fe      	b.n	8022146 <BusFault_Handler+0x4>

08022148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8022148:	b480      	push	{r7}
 802214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 802214c:	e7fe      	b.n	802214c <UsageFault_Handler+0x4>

0802214e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 802214e:	b480      	push	{r7}
 8022150:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8022152:	bf00      	nop
 8022154:	46bd      	mov	sp, r7
 8022156:	bc80      	pop	{r7}
 8022158:	4770      	bx	lr

0802215a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 802215a:	b480      	push	{r7}
 802215c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 802215e:	bf00      	nop
 8022160:	46bd      	mov	sp, r7
 8022162:	bc80      	pop	{r7}
 8022164:	4770      	bx	lr

08022166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8022166:	b480      	push	{r7}
 8022168:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 802216a:	bf00      	nop
 802216c:	46bd      	mov	sp, r7
 802216e:	bc80      	pop	{r7}
 8022170:	4770      	bx	lr

08022172 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8022172:	b580      	push	{r7, lr}
 8022174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8022176:	f000 f8c7 	bl	8022308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 802217a:	bf00      	nop
 802217c:	bd80      	pop	{r7, pc}
	...

08022180 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8022180:	b580      	push	{r7, lr}
 8022182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8022184:	4802      	ldr	r0, [pc, #8]	; (8022190 <TIM3_IRQHandler+0x10>)
 8022186:	f002 fd6d 	bl	8024c64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 802218a:	bf00      	nop
 802218c:	bd80      	pop	{r7, pc}
 802218e:	bf00      	nop
 8022190:	20001438 	.word	0x20001438

08022194 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8022194:	b580      	push	{r7, lr}
 8022196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8022198:	4802      	ldr	r0, [pc, #8]	; (80221a4 <USART1_IRQHandler+0x10>)
 802219a:	f003 f86f 	bl	802527c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 802219e:	bf00      	nop
 80221a0:	bd80      	pop	{r7, pc}
 80221a2:	bf00      	nop
 80221a4:	200024c8 	.word	0x200024c8

080221a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80221a8:	b580      	push	{r7, lr}
 80221aa:	b086      	sub	sp, #24
 80221ac:	af00      	add	r7, sp, #0
 80221ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80221b0:	4a14      	ldr	r2, [pc, #80]	; (8022204 <_sbrk+0x5c>)
 80221b2:	4b15      	ldr	r3, [pc, #84]	; (8022208 <_sbrk+0x60>)
 80221b4:	1ad3      	subs	r3, r2, r3
 80221b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80221b8:	697b      	ldr	r3, [r7, #20]
 80221ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80221bc:	4b13      	ldr	r3, [pc, #76]	; (802220c <_sbrk+0x64>)
 80221be:	681b      	ldr	r3, [r3, #0]
 80221c0:	2b00      	cmp	r3, #0
 80221c2:	d102      	bne.n	80221ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80221c4:	4b11      	ldr	r3, [pc, #68]	; (802220c <_sbrk+0x64>)
 80221c6:	4a12      	ldr	r2, [pc, #72]	; (8022210 <_sbrk+0x68>)
 80221c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80221ca:	4b10      	ldr	r3, [pc, #64]	; (802220c <_sbrk+0x64>)
 80221cc:	681a      	ldr	r2, [r3, #0]
 80221ce:	687b      	ldr	r3, [r7, #4]
 80221d0:	4413      	add	r3, r2
 80221d2:	693a      	ldr	r2, [r7, #16]
 80221d4:	429a      	cmp	r2, r3
 80221d6:	d207      	bcs.n	80221e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80221d8:	f003 fc70 	bl	8025abc <__errno>
 80221dc:	4603      	mov	r3, r0
 80221de:	220c      	movs	r2, #12
 80221e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80221e2:	f04f 33ff 	mov.w	r3, #4294967295
 80221e6:	e009      	b.n	80221fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80221e8:	4b08      	ldr	r3, [pc, #32]	; (802220c <_sbrk+0x64>)
 80221ea:	681b      	ldr	r3, [r3, #0]
 80221ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80221ee:	4b07      	ldr	r3, [pc, #28]	; (802220c <_sbrk+0x64>)
 80221f0:	681a      	ldr	r2, [r3, #0]
 80221f2:	687b      	ldr	r3, [r7, #4]
 80221f4:	4413      	add	r3, r2
 80221f6:	4a05      	ldr	r2, [pc, #20]	; (802220c <_sbrk+0x64>)
 80221f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80221fa:	68fb      	ldr	r3, [r7, #12]
}
 80221fc:	4618      	mov	r0, r3
 80221fe:	3718      	adds	r7, #24
 8022200:	46bd      	mov	sp, r7
 8022202:	bd80      	pop	{r7, pc}
 8022204:	20010000 	.word	0x20010000
 8022208:	00000400 	.word	0x00000400
 802220c:	20001338 	.word	0x20001338
 8022210:	200063f0 	.word	0x200063f0

08022214 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8022214:	b480      	push	{r7}
 8022216:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8022218:	4b03      	ldr	r3, [pc, #12]	; (8022228 <SystemInit+0x14>)
 802221a:	4a04      	ldr	r2, [pc, #16]	; (802222c <SystemInit+0x18>)
 802221c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 802221e:	bf00      	nop
 8022220:	46bd      	mov	sp, r7
 8022222:	bc80      	pop	{r7}
 8022224:	4770      	bx	lr
 8022226:	bf00      	nop
 8022228:	e000ed00 	.word	0xe000ed00
 802222c:	0801e000 	.word	0x0801e000

08022230 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8022230:	480c      	ldr	r0, [pc, #48]	; (8022264 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8022232:	490d      	ldr	r1, [pc, #52]	; (8022268 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8022234:	4a0d      	ldr	r2, [pc, #52]	; (802226c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8022236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8022238:	e002      	b.n	8022240 <LoopCopyDataInit>

0802223a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 802223a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 802223c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 802223e:	3304      	adds	r3, #4

08022240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8022240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8022242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8022244:	d3f9      	bcc.n	802223a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8022246:	4a0a      	ldr	r2, [pc, #40]	; (8022270 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8022248:	4c0a      	ldr	r4, [pc, #40]	; (8022274 <LoopFillZerobss+0x22>)
  movs r3, #0
 802224a:	2300      	movs	r3, #0
  b LoopFillZerobss
 802224c:	e001      	b.n	8022252 <LoopFillZerobss>

0802224e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 802224e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8022250:	3204      	adds	r2, #4

08022252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8022252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8022254:	d3fb      	bcc.n	802224e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8022256:	f7ff ffdd 	bl	8022214 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 802225a:	f003 fc35 	bl	8025ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 802225e:	f7ff fdbb 	bl	8021dd8 <main>
  bx lr
 8022262:	4770      	bx	lr
  ldr r0, =_sdata
 8022264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8022268:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 802226c:	08026ef0 	.word	0x08026ef0
  ldr r2, =_sbss
 8022270:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 8022274:	200063f0 	.word	0x200063f0

08022278 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8022278:	e7fe      	b.n	8022278 <ADC1_2_IRQHandler>
	...

0802227c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802227c:	b580      	push	{r7, lr}
 802227e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8022280:	4b08      	ldr	r3, [pc, #32]	; (80222a4 <HAL_Init+0x28>)
 8022282:	681b      	ldr	r3, [r3, #0]
 8022284:	4a07      	ldr	r2, [pc, #28]	; (80222a4 <HAL_Init+0x28>)
 8022286:	f043 0310 	orr.w	r3, r3, #16
 802228a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802228c:	2003      	movs	r0, #3
 802228e:	f000 f947 	bl	8022520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8022292:	200f      	movs	r0, #15
 8022294:	f000 f808 	bl	80222a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8022298:	f7ff fde4 	bl	8021e64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802229c:	2300      	movs	r3, #0
}
 802229e:	4618      	mov	r0, r3
 80222a0:	bd80      	pop	{r7, pc}
 80222a2:	bf00      	nop
 80222a4:	40022000 	.word	0x40022000

080222a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80222a8:	b580      	push	{r7, lr}
 80222aa:	b082      	sub	sp, #8
 80222ac:	af00      	add	r7, sp, #0
 80222ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80222b0:	4b12      	ldr	r3, [pc, #72]	; (80222fc <HAL_InitTick+0x54>)
 80222b2:	681a      	ldr	r2, [r3, #0]
 80222b4:	4b12      	ldr	r3, [pc, #72]	; (8022300 <HAL_InitTick+0x58>)
 80222b6:	781b      	ldrb	r3, [r3, #0]
 80222b8:	4619      	mov	r1, r3
 80222ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80222be:	fbb3 f3f1 	udiv	r3, r3, r1
 80222c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80222c6:	4618      	mov	r0, r3
 80222c8:	f000 f95f 	bl	802258a <HAL_SYSTICK_Config>
 80222cc:	4603      	mov	r3, r0
 80222ce:	2b00      	cmp	r3, #0
 80222d0:	d001      	beq.n	80222d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80222d2:	2301      	movs	r3, #1
 80222d4:	e00e      	b.n	80222f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80222d6:	687b      	ldr	r3, [r7, #4]
 80222d8:	2b0f      	cmp	r3, #15
 80222da:	d80a      	bhi.n	80222f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80222dc:	2200      	movs	r2, #0
 80222de:	6879      	ldr	r1, [r7, #4]
 80222e0:	f04f 30ff 	mov.w	r0, #4294967295
 80222e4:	f000 f927 	bl	8022536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80222e8:	4a06      	ldr	r2, [pc, #24]	; (8022304 <HAL_InitTick+0x5c>)
 80222ea:	687b      	ldr	r3, [r7, #4]
 80222ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80222ee:	2300      	movs	r3, #0
 80222f0:	e000      	b.n	80222f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80222f2:	2301      	movs	r3, #1
}
 80222f4:	4618      	mov	r0, r3
 80222f6:	3708      	adds	r7, #8
 80222f8:	46bd      	mov	sp, r7
 80222fa:	bd80      	pop	{r7, pc}
 80222fc:	200001f8 	.word	0x200001f8
 8022300:	20000200 	.word	0x20000200
 8022304:	200001fc 	.word	0x200001fc

08022308 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8022308:	b480      	push	{r7}
 802230a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 802230c:	4b05      	ldr	r3, [pc, #20]	; (8022324 <HAL_IncTick+0x1c>)
 802230e:	781b      	ldrb	r3, [r3, #0]
 8022310:	461a      	mov	r2, r3
 8022312:	4b05      	ldr	r3, [pc, #20]	; (8022328 <HAL_IncTick+0x20>)
 8022314:	681b      	ldr	r3, [r3, #0]
 8022316:	4413      	add	r3, r2
 8022318:	4a03      	ldr	r2, [pc, #12]	; (8022328 <HAL_IncTick+0x20>)
 802231a:	6013      	str	r3, [r2, #0]
}
 802231c:	bf00      	nop
 802231e:	46bd      	mov	sp, r7
 8022320:	bc80      	pop	{r7}
 8022322:	4770      	bx	lr
 8022324:	20000200 	.word	0x20000200
 8022328:	200063b8 	.word	0x200063b8

0802232c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802232c:	b480      	push	{r7}
 802232e:	af00      	add	r7, sp, #0
  return uwTick;
 8022330:	4b02      	ldr	r3, [pc, #8]	; (802233c <HAL_GetTick+0x10>)
 8022332:	681b      	ldr	r3, [r3, #0]
}
 8022334:	4618      	mov	r0, r3
 8022336:	46bd      	mov	sp, r7
 8022338:	bc80      	pop	{r7}
 802233a:	4770      	bx	lr
 802233c:	200063b8 	.word	0x200063b8

08022340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8022340:	b580      	push	{r7, lr}
 8022342:	b084      	sub	sp, #16
 8022344:	af00      	add	r7, sp, #0
 8022346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8022348:	f7ff fff0 	bl	802232c <HAL_GetTick>
 802234c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802234e:	687b      	ldr	r3, [r7, #4]
 8022350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8022352:	68fb      	ldr	r3, [r7, #12]
 8022354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022358:	d005      	beq.n	8022366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802235a:	4b0a      	ldr	r3, [pc, #40]	; (8022384 <HAL_Delay+0x44>)
 802235c:	781b      	ldrb	r3, [r3, #0]
 802235e:	461a      	mov	r2, r3
 8022360:	68fb      	ldr	r3, [r7, #12]
 8022362:	4413      	add	r3, r2
 8022364:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8022366:	bf00      	nop
 8022368:	f7ff ffe0 	bl	802232c <HAL_GetTick>
 802236c:	4602      	mov	r2, r0
 802236e:	68bb      	ldr	r3, [r7, #8]
 8022370:	1ad3      	subs	r3, r2, r3
 8022372:	68fa      	ldr	r2, [r7, #12]
 8022374:	429a      	cmp	r2, r3
 8022376:	d8f7      	bhi.n	8022368 <HAL_Delay+0x28>
  {
  }
}
 8022378:	bf00      	nop
 802237a:	bf00      	nop
 802237c:	3710      	adds	r7, #16
 802237e:	46bd      	mov	sp, r7
 8022380:	bd80      	pop	{r7, pc}
 8022382:	bf00      	nop
 8022384:	20000200 	.word	0x20000200

08022388 <__NVIC_SetPriorityGrouping>:
{
 8022388:	b480      	push	{r7}
 802238a:	b085      	sub	sp, #20
 802238c:	af00      	add	r7, sp, #0
 802238e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8022390:	687b      	ldr	r3, [r7, #4]
 8022392:	f003 0307 	and.w	r3, r3, #7
 8022396:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8022398:	4b0c      	ldr	r3, [pc, #48]	; (80223cc <__NVIC_SetPriorityGrouping+0x44>)
 802239a:	68db      	ldr	r3, [r3, #12]
 802239c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802239e:	68ba      	ldr	r2, [r7, #8]
 80223a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80223a4:	4013      	ands	r3, r2
 80223a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80223a8:	68fb      	ldr	r3, [r7, #12]
 80223aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80223ac:	68bb      	ldr	r3, [r7, #8]
 80223ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80223b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80223b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80223b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80223ba:	4a04      	ldr	r2, [pc, #16]	; (80223cc <__NVIC_SetPriorityGrouping+0x44>)
 80223bc:	68bb      	ldr	r3, [r7, #8]
 80223be:	60d3      	str	r3, [r2, #12]
}
 80223c0:	bf00      	nop
 80223c2:	3714      	adds	r7, #20
 80223c4:	46bd      	mov	sp, r7
 80223c6:	bc80      	pop	{r7}
 80223c8:	4770      	bx	lr
 80223ca:	bf00      	nop
 80223cc:	e000ed00 	.word	0xe000ed00

080223d0 <__NVIC_GetPriorityGrouping>:
{
 80223d0:	b480      	push	{r7}
 80223d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80223d4:	4b04      	ldr	r3, [pc, #16]	; (80223e8 <__NVIC_GetPriorityGrouping+0x18>)
 80223d6:	68db      	ldr	r3, [r3, #12]
 80223d8:	0a1b      	lsrs	r3, r3, #8
 80223da:	f003 0307 	and.w	r3, r3, #7
}
 80223de:	4618      	mov	r0, r3
 80223e0:	46bd      	mov	sp, r7
 80223e2:	bc80      	pop	{r7}
 80223e4:	4770      	bx	lr
 80223e6:	bf00      	nop
 80223e8:	e000ed00 	.word	0xe000ed00

080223ec <__NVIC_EnableIRQ>:
{
 80223ec:	b480      	push	{r7}
 80223ee:	b083      	sub	sp, #12
 80223f0:	af00      	add	r7, sp, #0
 80223f2:	4603      	mov	r3, r0
 80223f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80223f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80223fa:	2b00      	cmp	r3, #0
 80223fc:	db0b      	blt.n	8022416 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80223fe:	79fb      	ldrb	r3, [r7, #7]
 8022400:	f003 021f 	and.w	r2, r3, #31
 8022404:	4906      	ldr	r1, [pc, #24]	; (8022420 <__NVIC_EnableIRQ+0x34>)
 8022406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802240a:	095b      	lsrs	r3, r3, #5
 802240c:	2001      	movs	r0, #1
 802240e:	fa00 f202 	lsl.w	r2, r0, r2
 8022412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8022416:	bf00      	nop
 8022418:	370c      	adds	r7, #12
 802241a:	46bd      	mov	sp, r7
 802241c:	bc80      	pop	{r7}
 802241e:	4770      	bx	lr
 8022420:	e000e100 	.word	0xe000e100

08022424 <__NVIC_SetPriority>:
{
 8022424:	b480      	push	{r7}
 8022426:	b083      	sub	sp, #12
 8022428:	af00      	add	r7, sp, #0
 802242a:	4603      	mov	r3, r0
 802242c:	6039      	str	r1, [r7, #0]
 802242e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8022430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022434:	2b00      	cmp	r3, #0
 8022436:	db0a      	blt.n	802244e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022438:	683b      	ldr	r3, [r7, #0]
 802243a:	b2da      	uxtb	r2, r3
 802243c:	490c      	ldr	r1, [pc, #48]	; (8022470 <__NVIC_SetPriority+0x4c>)
 802243e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022442:	0112      	lsls	r2, r2, #4
 8022444:	b2d2      	uxtb	r2, r2
 8022446:	440b      	add	r3, r1
 8022448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 802244c:	e00a      	b.n	8022464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802244e:	683b      	ldr	r3, [r7, #0]
 8022450:	b2da      	uxtb	r2, r3
 8022452:	4908      	ldr	r1, [pc, #32]	; (8022474 <__NVIC_SetPriority+0x50>)
 8022454:	79fb      	ldrb	r3, [r7, #7]
 8022456:	f003 030f 	and.w	r3, r3, #15
 802245a:	3b04      	subs	r3, #4
 802245c:	0112      	lsls	r2, r2, #4
 802245e:	b2d2      	uxtb	r2, r2
 8022460:	440b      	add	r3, r1
 8022462:	761a      	strb	r2, [r3, #24]
}
 8022464:	bf00      	nop
 8022466:	370c      	adds	r7, #12
 8022468:	46bd      	mov	sp, r7
 802246a:	bc80      	pop	{r7}
 802246c:	4770      	bx	lr
 802246e:	bf00      	nop
 8022470:	e000e100 	.word	0xe000e100
 8022474:	e000ed00 	.word	0xe000ed00

08022478 <NVIC_EncodePriority>:
{
 8022478:	b480      	push	{r7}
 802247a:	b089      	sub	sp, #36	; 0x24
 802247c:	af00      	add	r7, sp, #0
 802247e:	60f8      	str	r0, [r7, #12]
 8022480:	60b9      	str	r1, [r7, #8]
 8022482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8022484:	68fb      	ldr	r3, [r7, #12]
 8022486:	f003 0307 	and.w	r3, r3, #7
 802248a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802248c:	69fb      	ldr	r3, [r7, #28]
 802248e:	f1c3 0307 	rsb	r3, r3, #7
 8022492:	2b04      	cmp	r3, #4
 8022494:	bf28      	it	cs
 8022496:	2304      	movcs	r3, #4
 8022498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802249a:	69fb      	ldr	r3, [r7, #28]
 802249c:	3304      	adds	r3, #4
 802249e:	2b06      	cmp	r3, #6
 80224a0:	d902      	bls.n	80224a8 <NVIC_EncodePriority+0x30>
 80224a2:	69fb      	ldr	r3, [r7, #28]
 80224a4:	3b03      	subs	r3, #3
 80224a6:	e000      	b.n	80224aa <NVIC_EncodePriority+0x32>
 80224a8:	2300      	movs	r3, #0
 80224aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80224ac:	f04f 32ff 	mov.w	r2, #4294967295
 80224b0:	69bb      	ldr	r3, [r7, #24]
 80224b2:	fa02 f303 	lsl.w	r3, r2, r3
 80224b6:	43da      	mvns	r2, r3
 80224b8:	68bb      	ldr	r3, [r7, #8]
 80224ba:	401a      	ands	r2, r3
 80224bc:	697b      	ldr	r3, [r7, #20]
 80224be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80224c0:	f04f 31ff 	mov.w	r1, #4294967295
 80224c4:	697b      	ldr	r3, [r7, #20]
 80224c6:	fa01 f303 	lsl.w	r3, r1, r3
 80224ca:	43d9      	mvns	r1, r3
 80224cc:	687b      	ldr	r3, [r7, #4]
 80224ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80224d0:	4313      	orrs	r3, r2
}
 80224d2:	4618      	mov	r0, r3
 80224d4:	3724      	adds	r7, #36	; 0x24
 80224d6:	46bd      	mov	sp, r7
 80224d8:	bc80      	pop	{r7}
 80224da:	4770      	bx	lr

080224dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80224dc:	b580      	push	{r7, lr}
 80224de:	b082      	sub	sp, #8
 80224e0:	af00      	add	r7, sp, #0
 80224e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80224e4:	687b      	ldr	r3, [r7, #4]
 80224e6:	3b01      	subs	r3, #1
 80224e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80224ec:	d301      	bcc.n	80224f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80224ee:	2301      	movs	r3, #1
 80224f0:	e00f      	b.n	8022512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80224f2:	4a0a      	ldr	r2, [pc, #40]	; (802251c <SysTick_Config+0x40>)
 80224f4:	687b      	ldr	r3, [r7, #4]
 80224f6:	3b01      	subs	r3, #1
 80224f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80224fa:	210f      	movs	r1, #15
 80224fc:	f04f 30ff 	mov.w	r0, #4294967295
 8022500:	f7ff ff90 	bl	8022424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8022504:	4b05      	ldr	r3, [pc, #20]	; (802251c <SysTick_Config+0x40>)
 8022506:	2200      	movs	r2, #0
 8022508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802250a:	4b04      	ldr	r3, [pc, #16]	; (802251c <SysTick_Config+0x40>)
 802250c:	2207      	movs	r2, #7
 802250e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8022510:	2300      	movs	r3, #0
}
 8022512:	4618      	mov	r0, r3
 8022514:	3708      	adds	r7, #8
 8022516:	46bd      	mov	sp, r7
 8022518:	bd80      	pop	{r7, pc}
 802251a:	bf00      	nop
 802251c:	e000e010 	.word	0xe000e010

08022520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8022520:	b580      	push	{r7, lr}
 8022522:	b082      	sub	sp, #8
 8022524:	af00      	add	r7, sp, #0
 8022526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8022528:	6878      	ldr	r0, [r7, #4]
 802252a:	f7ff ff2d 	bl	8022388 <__NVIC_SetPriorityGrouping>
}
 802252e:	bf00      	nop
 8022530:	3708      	adds	r7, #8
 8022532:	46bd      	mov	sp, r7
 8022534:	bd80      	pop	{r7, pc}

08022536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8022536:	b580      	push	{r7, lr}
 8022538:	b086      	sub	sp, #24
 802253a:	af00      	add	r7, sp, #0
 802253c:	4603      	mov	r3, r0
 802253e:	60b9      	str	r1, [r7, #8]
 8022540:	607a      	str	r2, [r7, #4]
 8022542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8022544:	2300      	movs	r3, #0
 8022546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8022548:	f7ff ff42 	bl	80223d0 <__NVIC_GetPriorityGrouping>
 802254c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802254e:	687a      	ldr	r2, [r7, #4]
 8022550:	68b9      	ldr	r1, [r7, #8]
 8022552:	6978      	ldr	r0, [r7, #20]
 8022554:	f7ff ff90 	bl	8022478 <NVIC_EncodePriority>
 8022558:	4602      	mov	r2, r0
 802255a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802255e:	4611      	mov	r1, r2
 8022560:	4618      	mov	r0, r3
 8022562:	f7ff ff5f 	bl	8022424 <__NVIC_SetPriority>
}
 8022566:	bf00      	nop
 8022568:	3718      	adds	r7, #24
 802256a:	46bd      	mov	sp, r7
 802256c:	bd80      	pop	{r7, pc}

0802256e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802256e:	b580      	push	{r7, lr}
 8022570:	b082      	sub	sp, #8
 8022572:	af00      	add	r7, sp, #0
 8022574:	4603      	mov	r3, r0
 8022576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8022578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802257c:	4618      	mov	r0, r3
 802257e:	f7ff ff35 	bl	80223ec <__NVIC_EnableIRQ>
}
 8022582:	bf00      	nop
 8022584:	3708      	adds	r7, #8
 8022586:	46bd      	mov	sp, r7
 8022588:	bd80      	pop	{r7, pc}

0802258a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802258a:	b580      	push	{r7, lr}
 802258c:	b082      	sub	sp, #8
 802258e:	af00      	add	r7, sp, #0
 8022590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8022592:	6878      	ldr	r0, [r7, #4]
 8022594:	f7ff ffa2 	bl	80224dc <SysTick_Config>
 8022598:	4603      	mov	r3, r0
}
 802259a:	4618      	mov	r0, r3
 802259c:	3708      	adds	r7, #8
 802259e:	46bd      	mov	sp, r7
 80225a0:	bd80      	pop	{r7, pc}

080225a2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80225a2:	b480      	push	{r7}
 80225a4:	b085      	sub	sp, #20
 80225a6:	af00      	add	r7, sp, #0
 80225a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80225aa:	2300      	movs	r3, #0
 80225ac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80225ae:	687b      	ldr	r3, [r7, #4]
 80225b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80225b4:	2b02      	cmp	r3, #2
 80225b6:	d008      	beq.n	80225ca <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80225b8:	687b      	ldr	r3, [r7, #4]
 80225ba:	2204      	movs	r2, #4
 80225bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80225be:	687b      	ldr	r3, [r7, #4]
 80225c0:	2200      	movs	r2, #0
 80225c2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80225c6:	2301      	movs	r3, #1
 80225c8:	e020      	b.n	802260c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80225ca:	687b      	ldr	r3, [r7, #4]
 80225cc:	681b      	ldr	r3, [r3, #0]
 80225ce:	681a      	ldr	r2, [r3, #0]
 80225d0:	687b      	ldr	r3, [r7, #4]
 80225d2:	681b      	ldr	r3, [r3, #0]
 80225d4:	f022 020e 	bic.w	r2, r2, #14
 80225d8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80225da:	687b      	ldr	r3, [r7, #4]
 80225dc:	681b      	ldr	r3, [r3, #0]
 80225de:	681a      	ldr	r2, [r3, #0]
 80225e0:	687b      	ldr	r3, [r7, #4]
 80225e2:	681b      	ldr	r3, [r3, #0]
 80225e4:	f022 0201 	bic.w	r2, r2, #1
 80225e8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80225ea:	687b      	ldr	r3, [r7, #4]
 80225ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80225ee:	687b      	ldr	r3, [r7, #4]
 80225f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80225f2:	2101      	movs	r1, #1
 80225f4:	fa01 f202 	lsl.w	r2, r1, r2
 80225f8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80225fa:	687b      	ldr	r3, [r7, #4]
 80225fc:	2201      	movs	r2, #1
 80225fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8022602:	687b      	ldr	r3, [r7, #4]
 8022604:	2200      	movs	r2, #0
 8022606:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 802260a:	7bfb      	ldrb	r3, [r7, #15]
}
 802260c:	4618      	mov	r0, r3
 802260e:	3714      	adds	r7, #20
 8022610:	46bd      	mov	sp, r7
 8022612:	bc80      	pop	{r7}
 8022614:	4770      	bx	lr
	...

08022618 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8022618:	b580      	push	{r7, lr}
 802261a:	b084      	sub	sp, #16
 802261c:	af00      	add	r7, sp, #0
 802261e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8022620:	2300      	movs	r3, #0
 8022622:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8022624:	687b      	ldr	r3, [r7, #4]
 8022626:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 802262a:	2b02      	cmp	r3, #2
 802262c:	d005      	beq.n	802263a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802262e:	687b      	ldr	r3, [r7, #4]
 8022630:	2204      	movs	r2, #4
 8022632:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8022634:	2301      	movs	r3, #1
 8022636:	73fb      	strb	r3, [r7, #15]
 8022638:	e0d6      	b.n	80227e8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 802263a:	687b      	ldr	r3, [r7, #4]
 802263c:	681b      	ldr	r3, [r3, #0]
 802263e:	681a      	ldr	r2, [r3, #0]
 8022640:	687b      	ldr	r3, [r7, #4]
 8022642:	681b      	ldr	r3, [r3, #0]
 8022644:	f022 020e 	bic.w	r2, r2, #14
 8022648:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 802264a:	687b      	ldr	r3, [r7, #4]
 802264c:	681b      	ldr	r3, [r3, #0]
 802264e:	681a      	ldr	r2, [r3, #0]
 8022650:	687b      	ldr	r3, [r7, #4]
 8022652:	681b      	ldr	r3, [r3, #0]
 8022654:	f022 0201 	bic.w	r2, r2, #1
 8022658:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 802265a:	687b      	ldr	r3, [r7, #4]
 802265c:	681b      	ldr	r3, [r3, #0]
 802265e:	461a      	mov	r2, r3
 8022660:	4b64      	ldr	r3, [pc, #400]	; (80227f4 <HAL_DMA_Abort_IT+0x1dc>)
 8022662:	429a      	cmp	r2, r3
 8022664:	d958      	bls.n	8022718 <HAL_DMA_Abort_IT+0x100>
 8022666:	687b      	ldr	r3, [r7, #4]
 8022668:	681b      	ldr	r3, [r3, #0]
 802266a:	4a63      	ldr	r2, [pc, #396]	; (80227f8 <HAL_DMA_Abort_IT+0x1e0>)
 802266c:	4293      	cmp	r3, r2
 802266e:	d04f      	beq.n	8022710 <HAL_DMA_Abort_IT+0xf8>
 8022670:	687b      	ldr	r3, [r7, #4]
 8022672:	681b      	ldr	r3, [r3, #0]
 8022674:	4a61      	ldr	r2, [pc, #388]	; (80227fc <HAL_DMA_Abort_IT+0x1e4>)
 8022676:	4293      	cmp	r3, r2
 8022678:	d048      	beq.n	802270c <HAL_DMA_Abort_IT+0xf4>
 802267a:	687b      	ldr	r3, [r7, #4]
 802267c:	681b      	ldr	r3, [r3, #0]
 802267e:	4a60      	ldr	r2, [pc, #384]	; (8022800 <HAL_DMA_Abort_IT+0x1e8>)
 8022680:	4293      	cmp	r3, r2
 8022682:	d040      	beq.n	8022706 <HAL_DMA_Abort_IT+0xee>
 8022684:	687b      	ldr	r3, [r7, #4]
 8022686:	681b      	ldr	r3, [r3, #0]
 8022688:	4a5e      	ldr	r2, [pc, #376]	; (8022804 <HAL_DMA_Abort_IT+0x1ec>)
 802268a:	4293      	cmp	r3, r2
 802268c:	d038      	beq.n	8022700 <HAL_DMA_Abort_IT+0xe8>
 802268e:	687b      	ldr	r3, [r7, #4]
 8022690:	681b      	ldr	r3, [r3, #0]
 8022692:	4a5d      	ldr	r2, [pc, #372]	; (8022808 <HAL_DMA_Abort_IT+0x1f0>)
 8022694:	4293      	cmp	r3, r2
 8022696:	d030      	beq.n	80226fa <HAL_DMA_Abort_IT+0xe2>
 8022698:	687b      	ldr	r3, [r7, #4]
 802269a:	681b      	ldr	r3, [r3, #0]
 802269c:	4a5b      	ldr	r2, [pc, #364]	; (802280c <HAL_DMA_Abort_IT+0x1f4>)
 802269e:	4293      	cmp	r3, r2
 80226a0:	d028      	beq.n	80226f4 <HAL_DMA_Abort_IT+0xdc>
 80226a2:	687b      	ldr	r3, [r7, #4]
 80226a4:	681b      	ldr	r3, [r3, #0]
 80226a6:	4a53      	ldr	r2, [pc, #332]	; (80227f4 <HAL_DMA_Abort_IT+0x1dc>)
 80226a8:	4293      	cmp	r3, r2
 80226aa:	d020      	beq.n	80226ee <HAL_DMA_Abort_IT+0xd6>
 80226ac:	687b      	ldr	r3, [r7, #4]
 80226ae:	681b      	ldr	r3, [r3, #0]
 80226b0:	4a57      	ldr	r2, [pc, #348]	; (8022810 <HAL_DMA_Abort_IT+0x1f8>)
 80226b2:	4293      	cmp	r3, r2
 80226b4:	d019      	beq.n	80226ea <HAL_DMA_Abort_IT+0xd2>
 80226b6:	687b      	ldr	r3, [r7, #4]
 80226b8:	681b      	ldr	r3, [r3, #0]
 80226ba:	4a56      	ldr	r2, [pc, #344]	; (8022814 <HAL_DMA_Abort_IT+0x1fc>)
 80226bc:	4293      	cmp	r3, r2
 80226be:	d012      	beq.n	80226e6 <HAL_DMA_Abort_IT+0xce>
 80226c0:	687b      	ldr	r3, [r7, #4]
 80226c2:	681b      	ldr	r3, [r3, #0]
 80226c4:	4a54      	ldr	r2, [pc, #336]	; (8022818 <HAL_DMA_Abort_IT+0x200>)
 80226c6:	4293      	cmp	r3, r2
 80226c8:	d00a      	beq.n	80226e0 <HAL_DMA_Abort_IT+0xc8>
 80226ca:	687b      	ldr	r3, [r7, #4]
 80226cc:	681b      	ldr	r3, [r3, #0]
 80226ce:	4a53      	ldr	r2, [pc, #332]	; (802281c <HAL_DMA_Abort_IT+0x204>)
 80226d0:	4293      	cmp	r3, r2
 80226d2:	d102      	bne.n	80226da <HAL_DMA_Abort_IT+0xc2>
 80226d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80226d8:	e01b      	b.n	8022712 <HAL_DMA_Abort_IT+0xfa>
 80226da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80226de:	e018      	b.n	8022712 <HAL_DMA_Abort_IT+0xfa>
 80226e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80226e4:	e015      	b.n	8022712 <HAL_DMA_Abort_IT+0xfa>
 80226e6:	2310      	movs	r3, #16
 80226e8:	e013      	b.n	8022712 <HAL_DMA_Abort_IT+0xfa>
 80226ea:	2301      	movs	r3, #1
 80226ec:	e011      	b.n	8022712 <HAL_DMA_Abort_IT+0xfa>
 80226ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80226f2:	e00e      	b.n	8022712 <HAL_DMA_Abort_IT+0xfa>
 80226f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80226f8:	e00b      	b.n	8022712 <HAL_DMA_Abort_IT+0xfa>
 80226fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80226fe:	e008      	b.n	8022712 <HAL_DMA_Abort_IT+0xfa>
 8022700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022704:	e005      	b.n	8022712 <HAL_DMA_Abort_IT+0xfa>
 8022706:	f44f 7380 	mov.w	r3, #256	; 0x100
 802270a:	e002      	b.n	8022712 <HAL_DMA_Abort_IT+0xfa>
 802270c:	2310      	movs	r3, #16
 802270e:	e000      	b.n	8022712 <HAL_DMA_Abort_IT+0xfa>
 8022710:	2301      	movs	r3, #1
 8022712:	4a43      	ldr	r2, [pc, #268]	; (8022820 <HAL_DMA_Abort_IT+0x208>)
 8022714:	6053      	str	r3, [r2, #4]
 8022716:	e057      	b.n	80227c8 <HAL_DMA_Abort_IT+0x1b0>
 8022718:	687b      	ldr	r3, [r7, #4]
 802271a:	681b      	ldr	r3, [r3, #0]
 802271c:	4a36      	ldr	r2, [pc, #216]	; (80227f8 <HAL_DMA_Abort_IT+0x1e0>)
 802271e:	4293      	cmp	r3, r2
 8022720:	d04f      	beq.n	80227c2 <HAL_DMA_Abort_IT+0x1aa>
 8022722:	687b      	ldr	r3, [r7, #4]
 8022724:	681b      	ldr	r3, [r3, #0]
 8022726:	4a35      	ldr	r2, [pc, #212]	; (80227fc <HAL_DMA_Abort_IT+0x1e4>)
 8022728:	4293      	cmp	r3, r2
 802272a:	d048      	beq.n	80227be <HAL_DMA_Abort_IT+0x1a6>
 802272c:	687b      	ldr	r3, [r7, #4]
 802272e:	681b      	ldr	r3, [r3, #0]
 8022730:	4a33      	ldr	r2, [pc, #204]	; (8022800 <HAL_DMA_Abort_IT+0x1e8>)
 8022732:	4293      	cmp	r3, r2
 8022734:	d040      	beq.n	80227b8 <HAL_DMA_Abort_IT+0x1a0>
 8022736:	687b      	ldr	r3, [r7, #4]
 8022738:	681b      	ldr	r3, [r3, #0]
 802273a:	4a32      	ldr	r2, [pc, #200]	; (8022804 <HAL_DMA_Abort_IT+0x1ec>)
 802273c:	4293      	cmp	r3, r2
 802273e:	d038      	beq.n	80227b2 <HAL_DMA_Abort_IT+0x19a>
 8022740:	687b      	ldr	r3, [r7, #4]
 8022742:	681b      	ldr	r3, [r3, #0]
 8022744:	4a30      	ldr	r2, [pc, #192]	; (8022808 <HAL_DMA_Abort_IT+0x1f0>)
 8022746:	4293      	cmp	r3, r2
 8022748:	d030      	beq.n	80227ac <HAL_DMA_Abort_IT+0x194>
 802274a:	687b      	ldr	r3, [r7, #4]
 802274c:	681b      	ldr	r3, [r3, #0]
 802274e:	4a2f      	ldr	r2, [pc, #188]	; (802280c <HAL_DMA_Abort_IT+0x1f4>)
 8022750:	4293      	cmp	r3, r2
 8022752:	d028      	beq.n	80227a6 <HAL_DMA_Abort_IT+0x18e>
 8022754:	687b      	ldr	r3, [r7, #4]
 8022756:	681b      	ldr	r3, [r3, #0]
 8022758:	4a26      	ldr	r2, [pc, #152]	; (80227f4 <HAL_DMA_Abort_IT+0x1dc>)
 802275a:	4293      	cmp	r3, r2
 802275c:	d020      	beq.n	80227a0 <HAL_DMA_Abort_IT+0x188>
 802275e:	687b      	ldr	r3, [r7, #4]
 8022760:	681b      	ldr	r3, [r3, #0]
 8022762:	4a2b      	ldr	r2, [pc, #172]	; (8022810 <HAL_DMA_Abort_IT+0x1f8>)
 8022764:	4293      	cmp	r3, r2
 8022766:	d019      	beq.n	802279c <HAL_DMA_Abort_IT+0x184>
 8022768:	687b      	ldr	r3, [r7, #4]
 802276a:	681b      	ldr	r3, [r3, #0]
 802276c:	4a29      	ldr	r2, [pc, #164]	; (8022814 <HAL_DMA_Abort_IT+0x1fc>)
 802276e:	4293      	cmp	r3, r2
 8022770:	d012      	beq.n	8022798 <HAL_DMA_Abort_IT+0x180>
 8022772:	687b      	ldr	r3, [r7, #4]
 8022774:	681b      	ldr	r3, [r3, #0]
 8022776:	4a28      	ldr	r2, [pc, #160]	; (8022818 <HAL_DMA_Abort_IT+0x200>)
 8022778:	4293      	cmp	r3, r2
 802277a:	d00a      	beq.n	8022792 <HAL_DMA_Abort_IT+0x17a>
 802277c:	687b      	ldr	r3, [r7, #4]
 802277e:	681b      	ldr	r3, [r3, #0]
 8022780:	4a26      	ldr	r2, [pc, #152]	; (802281c <HAL_DMA_Abort_IT+0x204>)
 8022782:	4293      	cmp	r3, r2
 8022784:	d102      	bne.n	802278c <HAL_DMA_Abort_IT+0x174>
 8022786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802278a:	e01b      	b.n	80227c4 <HAL_DMA_Abort_IT+0x1ac>
 802278c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8022790:	e018      	b.n	80227c4 <HAL_DMA_Abort_IT+0x1ac>
 8022792:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022796:	e015      	b.n	80227c4 <HAL_DMA_Abort_IT+0x1ac>
 8022798:	2310      	movs	r3, #16
 802279a:	e013      	b.n	80227c4 <HAL_DMA_Abort_IT+0x1ac>
 802279c:	2301      	movs	r3, #1
 802279e:	e011      	b.n	80227c4 <HAL_DMA_Abort_IT+0x1ac>
 80227a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80227a4:	e00e      	b.n	80227c4 <HAL_DMA_Abort_IT+0x1ac>
 80227a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80227aa:	e00b      	b.n	80227c4 <HAL_DMA_Abort_IT+0x1ac>
 80227ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80227b0:	e008      	b.n	80227c4 <HAL_DMA_Abort_IT+0x1ac>
 80227b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80227b6:	e005      	b.n	80227c4 <HAL_DMA_Abort_IT+0x1ac>
 80227b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80227bc:	e002      	b.n	80227c4 <HAL_DMA_Abort_IT+0x1ac>
 80227be:	2310      	movs	r3, #16
 80227c0:	e000      	b.n	80227c4 <HAL_DMA_Abort_IT+0x1ac>
 80227c2:	2301      	movs	r3, #1
 80227c4:	4a17      	ldr	r2, [pc, #92]	; (8022824 <HAL_DMA_Abort_IT+0x20c>)
 80227c6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80227c8:	687b      	ldr	r3, [r7, #4]
 80227ca:	2201      	movs	r2, #1
 80227cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80227d0:	687b      	ldr	r3, [r7, #4]
 80227d2:	2200      	movs	r2, #0
 80227d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80227d8:	687b      	ldr	r3, [r7, #4]
 80227da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80227dc:	2b00      	cmp	r3, #0
 80227de:	d003      	beq.n	80227e8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80227e0:	687b      	ldr	r3, [r7, #4]
 80227e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80227e4:	6878      	ldr	r0, [r7, #4]
 80227e6:	4798      	blx	r3
    } 
  }
  return status;
 80227e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80227ea:	4618      	mov	r0, r3
 80227ec:	3710      	adds	r7, #16
 80227ee:	46bd      	mov	sp, r7
 80227f0:	bd80      	pop	{r7, pc}
 80227f2:	bf00      	nop
 80227f4:	40020080 	.word	0x40020080
 80227f8:	40020008 	.word	0x40020008
 80227fc:	4002001c 	.word	0x4002001c
 8022800:	40020030 	.word	0x40020030
 8022804:	40020044 	.word	0x40020044
 8022808:	40020058 	.word	0x40020058
 802280c:	4002006c 	.word	0x4002006c
 8022810:	40020408 	.word	0x40020408
 8022814:	4002041c 	.word	0x4002041c
 8022818:	40020430 	.word	0x40020430
 802281c:	40020444 	.word	0x40020444
 8022820:	40020400 	.word	0x40020400
 8022824:	40020000 	.word	0x40020000

08022828 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8022828:	b480      	push	{r7}
 802282a:	b083      	sub	sp, #12
 802282c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 802282e:	2300      	movs	r3, #0
 8022830:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8022832:	4b0d      	ldr	r3, [pc, #52]	; (8022868 <HAL_FLASH_Unlock+0x40>)
 8022834:	691b      	ldr	r3, [r3, #16]
 8022836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802283a:	2b00      	cmp	r3, #0
 802283c:	d00d      	beq.n	802285a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 802283e:	4b0a      	ldr	r3, [pc, #40]	; (8022868 <HAL_FLASH_Unlock+0x40>)
 8022840:	4a0a      	ldr	r2, [pc, #40]	; (802286c <HAL_FLASH_Unlock+0x44>)
 8022842:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8022844:	4b08      	ldr	r3, [pc, #32]	; (8022868 <HAL_FLASH_Unlock+0x40>)
 8022846:	4a0a      	ldr	r2, [pc, #40]	; (8022870 <HAL_FLASH_Unlock+0x48>)
 8022848:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 802284a:	4b07      	ldr	r3, [pc, #28]	; (8022868 <HAL_FLASH_Unlock+0x40>)
 802284c:	691b      	ldr	r3, [r3, #16]
 802284e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022852:	2b00      	cmp	r3, #0
 8022854:	d001      	beq.n	802285a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8022856:	2301      	movs	r3, #1
 8022858:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 802285a:	79fb      	ldrb	r3, [r7, #7]
}
 802285c:	4618      	mov	r0, r3
 802285e:	370c      	adds	r7, #12
 8022860:	46bd      	mov	sp, r7
 8022862:	bc80      	pop	{r7}
 8022864:	4770      	bx	lr
 8022866:	bf00      	nop
 8022868:	40022000 	.word	0x40022000
 802286c:	45670123 	.word	0x45670123
 8022870:	cdef89ab 	.word	0xcdef89ab

08022874 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8022874:	b480      	push	{r7}
 8022876:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8022878:	4b05      	ldr	r3, [pc, #20]	; (8022890 <HAL_FLASH_Lock+0x1c>)
 802287a:	691b      	ldr	r3, [r3, #16]
 802287c:	4a04      	ldr	r2, [pc, #16]	; (8022890 <HAL_FLASH_Lock+0x1c>)
 802287e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022882:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8022884:	2300      	movs	r3, #0
}
 8022886:	4618      	mov	r0, r3
 8022888:	46bd      	mov	sp, r7
 802288a:	bc80      	pop	{r7}
 802288c:	4770      	bx	lr
 802288e:	bf00      	nop
 8022890:	40022000 	.word	0x40022000

08022894 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8022894:	b580      	push	{r7, lr}
 8022896:	b084      	sub	sp, #16
 8022898:	af00      	add	r7, sp, #0
 802289a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 802289c:	f7ff fd46 	bl	802232c <HAL_GetTick>
 80228a0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80228a2:	e010      	b.n	80228c6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80228a4:	687b      	ldr	r3, [r7, #4]
 80228a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80228aa:	d00c      	beq.n	80228c6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80228ac:	687b      	ldr	r3, [r7, #4]
 80228ae:	2b00      	cmp	r3, #0
 80228b0:	d007      	beq.n	80228c2 <FLASH_WaitForLastOperation+0x2e>
 80228b2:	f7ff fd3b 	bl	802232c <HAL_GetTick>
 80228b6:	4602      	mov	r2, r0
 80228b8:	68fb      	ldr	r3, [r7, #12]
 80228ba:	1ad3      	subs	r3, r2, r3
 80228bc:	687a      	ldr	r2, [r7, #4]
 80228be:	429a      	cmp	r2, r3
 80228c0:	d201      	bcs.n	80228c6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80228c2:	2303      	movs	r3, #3
 80228c4:	e025      	b.n	8022912 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80228c6:	4b15      	ldr	r3, [pc, #84]	; (802291c <FLASH_WaitForLastOperation+0x88>)
 80228c8:	68db      	ldr	r3, [r3, #12]
 80228ca:	f003 0301 	and.w	r3, r3, #1
 80228ce:	2b00      	cmp	r3, #0
 80228d0:	d1e8      	bne.n	80228a4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80228d2:	4b12      	ldr	r3, [pc, #72]	; (802291c <FLASH_WaitForLastOperation+0x88>)
 80228d4:	68db      	ldr	r3, [r3, #12]
 80228d6:	f003 0320 	and.w	r3, r3, #32
 80228da:	2b00      	cmp	r3, #0
 80228dc:	d002      	beq.n	80228e4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80228de:	4b0f      	ldr	r3, [pc, #60]	; (802291c <FLASH_WaitForLastOperation+0x88>)
 80228e0:	2220      	movs	r2, #32
 80228e2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80228e4:	4b0d      	ldr	r3, [pc, #52]	; (802291c <FLASH_WaitForLastOperation+0x88>)
 80228e6:	68db      	ldr	r3, [r3, #12]
 80228e8:	f003 0310 	and.w	r3, r3, #16
 80228ec:	2b00      	cmp	r3, #0
 80228ee:	d10b      	bne.n	8022908 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80228f0:	4b0a      	ldr	r3, [pc, #40]	; (802291c <FLASH_WaitForLastOperation+0x88>)
 80228f2:	69db      	ldr	r3, [r3, #28]
 80228f4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80228f8:	2b00      	cmp	r3, #0
 80228fa:	d105      	bne.n	8022908 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80228fc:	4b07      	ldr	r3, [pc, #28]	; (802291c <FLASH_WaitForLastOperation+0x88>)
 80228fe:	68db      	ldr	r3, [r3, #12]
 8022900:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8022904:	2b00      	cmp	r3, #0
 8022906:	d003      	beq.n	8022910 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8022908:	f000 f80a 	bl	8022920 <FLASH_SetErrorCode>
    return HAL_ERROR;
 802290c:	2301      	movs	r3, #1
 802290e:	e000      	b.n	8022912 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8022910:	2300      	movs	r3, #0
}
 8022912:	4618      	mov	r0, r3
 8022914:	3710      	adds	r7, #16
 8022916:	46bd      	mov	sp, r7
 8022918:	bd80      	pop	{r7, pc}
 802291a:	bf00      	nop
 802291c:	40022000 	.word	0x40022000

08022920 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8022920:	b480      	push	{r7}
 8022922:	b083      	sub	sp, #12
 8022924:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8022926:	2300      	movs	r3, #0
 8022928:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 802292a:	4b23      	ldr	r3, [pc, #140]	; (80229b8 <FLASH_SetErrorCode+0x98>)
 802292c:	68db      	ldr	r3, [r3, #12]
 802292e:	f003 0310 	and.w	r3, r3, #16
 8022932:	2b00      	cmp	r3, #0
 8022934:	d009      	beq.n	802294a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8022936:	4b21      	ldr	r3, [pc, #132]	; (80229bc <FLASH_SetErrorCode+0x9c>)
 8022938:	69db      	ldr	r3, [r3, #28]
 802293a:	f043 0302 	orr.w	r3, r3, #2
 802293e:	4a1f      	ldr	r2, [pc, #124]	; (80229bc <FLASH_SetErrorCode+0x9c>)
 8022940:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8022942:	687b      	ldr	r3, [r7, #4]
 8022944:	f043 0310 	orr.w	r3, r3, #16
 8022948:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 802294a:	4b1b      	ldr	r3, [pc, #108]	; (80229b8 <FLASH_SetErrorCode+0x98>)
 802294c:	68db      	ldr	r3, [r3, #12]
 802294e:	f003 0304 	and.w	r3, r3, #4
 8022952:	2b00      	cmp	r3, #0
 8022954:	d009      	beq.n	802296a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8022956:	4b19      	ldr	r3, [pc, #100]	; (80229bc <FLASH_SetErrorCode+0x9c>)
 8022958:	69db      	ldr	r3, [r3, #28]
 802295a:	f043 0301 	orr.w	r3, r3, #1
 802295e:	4a17      	ldr	r2, [pc, #92]	; (80229bc <FLASH_SetErrorCode+0x9c>)
 8022960:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8022962:	687b      	ldr	r3, [r7, #4]
 8022964:	f043 0304 	orr.w	r3, r3, #4
 8022968:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 802296a:	4b13      	ldr	r3, [pc, #76]	; (80229b8 <FLASH_SetErrorCode+0x98>)
 802296c:	69db      	ldr	r3, [r3, #28]
 802296e:	f003 0301 	and.w	r3, r3, #1
 8022972:	2b00      	cmp	r3, #0
 8022974:	d00b      	beq.n	802298e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8022976:	4b11      	ldr	r3, [pc, #68]	; (80229bc <FLASH_SetErrorCode+0x9c>)
 8022978:	69db      	ldr	r3, [r3, #28]
 802297a:	f043 0304 	orr.w	r3, r3, #4
 802297e:	4a0f      	ldr	r2, [pc, #60]	; (80229bc <FLASH_SetErrorCode+0x9c>)
 8022980:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8022982:	4b0d      	ldr	r3, [pc, #52]	; (80229b8 <FLASH_SetErrorCode+0x98>)
 8022984:	69db      	ldr	r3, [r3, #28]
 8022986:	4a0c      	ldr	r2, [pc, #48]	; (80229b8 <FLASH_SetErrorCode+0x98>)
 8022988:	f023 0301 	bic.w	r3, r3, #1
 802298c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 802298e:	687b      	ldr	r3, [r7, #4]
 8022990:	f240 1201 	movw	r2, #257	; 0x101
 8022994:	4293      	cmp	r3, r2
 8022996:	d106      	bne.n	80229a6 <FLASH_SetErrorCode+0x86>
 8022998:	4b07      	ldr	r3, [pc, #28]	; (80229b8 <FLASH_SetErrorCode+0x98>)
 802299a:	69db      	ldr	r3, [r3, #28]
 802299c:	4a06      	ldr	r2, [pc, #24]	; (80229b8 <FLASH_SetErrorCode+0x98>)
 802299e:	f023 0301 	bic.w	r3, r3, #1
 80229a2:	61d3      	str	r3, [r2, #28]
}  
 80229a4:	e002      	b.n	80229ac <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80229a6:	4a04      	ldr	r2, [pc, #16]	; (80229b8 <FLASH_SetErrorCode+0x98>)
 80229a8:	687b      	ldr	r3, [r7, #4]
 80229aa:	60d3      	str	r3, [r2, #12]
}  
 80229ac:	bf00      	nop
 80229ae:	370c      	adds	r7, #12
 80229b0:	46bd      	mov	sp, r7
 80229b2:	bc80      	pop	{r7}
 80229b4:	4770      	bx	lr
 80229b6:	bf00      	nop
 80229b8:	40022000 	.word	0x40022000
 80229bc:	200063c0 	.word	0x200063c0

080229c0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80229c0:	b580      	push	{r7, lr}
 80229c2:	b084      	sub	sp, #16
 80229c4:	af00      	add	r7, sp, #0
 80229c6:	6078      	str	r0, [r7, #4]
 80229c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80229ca:	2301      	movs	r3, #1
 80229cc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80229ce:	2300      	movs	r3, #0
 80229d0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80229d2:	4b2f      	ldr	r3, [pc, #188]	; (8022a90 <HAL_FLASHEx_Erase+0xd0>)
 80229d4:	7e1b      	ldrb	r3, [r3, #24]
 80229d6:	2b01      	cmp	r3, #1
 80229d8:	d101      	bne.n	80229de <HAL_FLASHEx_Erase+0x1e>
 80229da:	2302      	movs	r3, #2
 80229dc:	e053      	b.n	8022a86 <HAL_FLASHEx_Erase+0xc6>
 80229de:	4b2c      	ldr	r3, [pc, #176]	; (8022a90 <HAL_FLASHEx_Erase+0xd0>)
 80229e0:	2201      	movs	r2, #1
 80229e2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80229e4:	687b      	ldr	r3, [r7, #4]
 80229e6:	681b      	ldr	r3, [r3, #0]
 80229e8:	2b02      	cmp	r3, #2
 80229ea:	d116      	bne.n	8022a1a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80229ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80229f0:	f7ff ff50 	bl	8022894 <FLASH_WaitForLastOperation>
 80229f4:	4603      	mov	r3, r0
 80229f6:	2b00      	cmp	r3, #0
 80229f8:	d141      	bne.n	8022a7e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80229fa:	2001      	movs	r0, #1
 80229fc:	f000 f84c 	bl	8022a98 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8022a00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8022a04:	f7ff ff46 	bl	8022894 <FLASH_WaitForLastOperation>
 8022a08:	4603      	mov	r3, r0
 8022a0a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8022a0c:	4b21      	ldr	r3, [pc, #132]	; (8022a94 <HAL_FLASHEx_Erase+0xd4>)
 8022a0e:	691b      	ldr	r3, [r3, #16]
 8022a10:	4a20      	ldr	r2, [pc, #128]	; (8022a94 <HAL_FLASHEx_Erase+0xd4>)
 8022a12:	f023 0304 	bic.w	r3, r3, #4
 8022a16:	6113      	str	r3, [r2, #16]
 8022a18:	e031      	b.n	8022a7e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8022a1a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8022a1e:	f7ff ff39 	bl	8022894 <FLASH_WaitForLastOperation>
 8022a22:	4603      	mov	r3, r0
 8022a24:	2b00      	cmp	r3, #0
 8022a26:	d12a      	bne.n	8022a7e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8022a28:	683b      	ldr	r3, [r7, #0]
 8022a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8022a2e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8022a30:	687b      	ldr	r3, [r7, #4]
 8022a32:	689b      	ldr	r3, [r3, #8]
 8022a34:	60bb      	str	r3, [r7, #8]
 8022a36:	e019      	b.n	8022a6c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8022a38:	68b8      	ldr	r0, [r7, #8]
 8022a3a:	f000 f849 	bl	8022ad0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8022a3e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8022a42:	f7ff ff27 	bl	8022894 <FLASH_WaitForLastOperation>
 8022a46:	4603      	mov	r3, r0
 8022a48:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8022a4a:	4b12      	ldr	r3, [pc, #72]	; (8022a94 <HAL_FLASHEx_Erase+0xd4>)
 8022a4c:	691b      	ldr	r3, [r3, #16]
 8022a4e:	4a11      	ldr	r2, [pc, #68]	; (8022a94 <HAL_FLASHEx_Erase+0xd4>)
 8022a50:	f023 0302 	bic.w	r3, r3, #2
 8022a54:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8022a56:	7bfb      	ldrb	r3, [r7, #15]
 8022a58:	2b00      	cmp	r3, #0
 8022a5a:	d003      	beq.n	8022a64 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8022a5c:	683b      	ldr	r3, [r7, #0]
 8022a5e:	68ba      	ldr	r2, [r7, #8]
 8022a60:	601a      	str	r2, [r3, #0]
            break;
 8022a62:	e00c      	b.n	8022a7e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8022a64:	68bb      	ldr	r3, [r7, #8]
 8022a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8022a6a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8022a6c:	687b      	ldr	r3, [r7, #4]
 8022a6e:	68db      	ldr	r3, [r3, #12]
 8022a70:	02da      	lsls	r2, r3, #11
 8022a72:	687b      	ldr	r3, [r7, #4]
 8022a74:	689b      	ldr	r3, [r3, #8]
 8022a76:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8022a78:	68ba      	ldr	r2, [r7, #8]
 8022a7a:	429a      	cmp	r2, r3
 8022a7c:	d3dc      	bcc.n	8022a38 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8022a7e:	4b04      	ldr	r3, [pc, #16]	; (8022a90 <HAL_FLASHEx_Erase+0xd0>)
 8022a80:	2200      	movs	r2, #0
 8022a82:	761a      	strb	r2, [r3, #24]

  return status;
 8022a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8022a86:	4618      	mov	r0, r3
 8022a88:	3710      	adds	r7, #16
 8022a8a:	46bd      	mov	sp, r7
 8022a8c:	bd80      	pop	{r7, pc}
 8022a8e:	bf00      	nop
 8022a90:	200063c0 	.word	0x200063c0
 8022a94:	40022000 	.word	0x40022000

08022a98 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8022a98:	b480      	push	{r7}
 8022a9a:	b083      	sub	sp, #12
 8022a9c:	af00      	add	r7, sp, #0
 8022a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8022aa0:	4b09      	ldr	r3, [pc, #36]	; (8022ac8 <FLASH_MassErase+0x30>)
 8022aa2:	2200      	movs	r2, #0
 8022aa4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8022aa6:	4b09      	ldr	r3, [pc, #36]	; (8022acc <FLASH_MassErase+0x34>)
 8022aa8:	691b      	ldr	r3, [r3, #16]
 8022aaa:	4a08      	ldr	r2, [pc, #32]	; (8022acc <FLASH_MassErase+0x34>)
 8022aac:	f043 0304 	orr.w	r3, r3, #4
 8022ab0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8022ab2:	4b06      	ldr	r3, [pc, #24]	; (8022acc <FLASH_MassErase+0x34>)
 8022ab4:	691b      	ldr	r3, [r3, #16]
 8022ab6:	4a05      	ldr	r2, [pc, #20]	; (8022acc <FLASH_MassErase+0x34>)
 8022ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022abc:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8022abe:	bf00      	nop
 8022ac0:	370c      	adds	r7, #12
 8022ac2:	46bd      	mov	sp, r7
 8022ac4:	bc80      	pop	{r7}
 8022ac6:	4770      	bx	lr
 8022ac8:	200063c0 	.word	0x200063c0
 8022acc:	40022000 	.word	0x40022000

08022ad0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8022ad0:	b480      	push	{r7}
 8022ad2:	b083      	sub	sp, #12
 8022ad4:	af00      	add	r7, sp, #0
 8022ad6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8022ad8:	4b0b      	ldr	r3, [pc, #44]	; (8022b08 <FLASH_PageErase+0x38>)
 8022ada:	2200      	movs	r2, #0
 8022adc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8022ade:	4b0b      	ldr	r3, [pc, #44]	; (8022b0c <FLASH_PageErase+0x3c>)
 8022ae0:	691b      	ldr	r3, [r3, #16]
 8022ae2:	4a0a      	ldr	r2, [pc, #40]	; (8022b0c <FLASH_PageErase+0x3c>)
 8022ae4:	f043 0302 	orr.w	r3, r3, #2
 8022ae8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8022aea:	4a08      	ldr	r2, [pc, #32]	; (8022b0c <FLASH_PageErase+0x3c>)
 8022aec:	687b      	ldr	r3, [r7, #4]
 8022aee:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8022af0:	4b06      	ldr	r3, [pc, #24]	; (8022b0c <FLASH_PageErase+0x3c>)
 8022af2:	691b      	ldr	r3, [r3, #16]
 8022af4:	4a05      	ldr	r2, [pc, #20]	; (8022b0c <FLASH_PageErase+0x3c>)
 8022af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022afa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8022afc:	bf00      	nop
 8022afe:	370c      	adds	r7, #12
 8022b00:	46bd      	mov	sp, r7
 8022b02:	bc80      	pop	{r7}
 8022b04:	4770      	bx	lr
 8022b06:	bf00      	nop
 8022b08:	200063c0 	.word	0x200063c0
 8022b0c:	40022000 	.word	0x40022000

08022b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8022b10:	b480      	push	{r7}
 8022b12:	b08b      	sub	sp, #44	; 0x2c
 8022b14:	af00      	add	r7, sp, #0
 8022b16:	6078      	str	r0, [r7, #4]
 8022b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8022b1a:	2300      	movs	r3, #0
 8022b1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8022b1e:	2300      	movs	r3, #0
 8022b20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8022b22:	e179      	b.n	8022e18 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8022b24:	2201      	movs	r2, #1
 8022b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022b28:	fa02 f303 	lsl.w	r3, r2, r3
 8022b2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8022b2e:	683b      	ldr	r3, [r7, #0]
 8022b30:	681b      	ldr	r3, [r3, #0]
 8022b32:	69fa      	ldr	r2, [r7, #28]
 8022b34:	4013      	ands	r3, r2
 8022b36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8022b38:	69ba      	ldr	r2, [r7, #24]
 8022b3a:	69fb      	ldr	r3, [r7, #28]
 8022b3c:	429a      	cmp	r2, r3
 8022b3e:	f040 8168 	bne.w	8022e12 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8022b42:	683b      	ldr	r3, [r7, #0]
 8022b44:	685b      	ldr	r3, [r3, #4]
 8022b46:	4aa0      	ldr	r2, [pc, #640]	; (8022dc8 <HAL_GPIO_Init+0x2b8>)
 8022b48:	4293      	cmp	r3, r2
 8022b4a:	d05e      	beq.n	8022c0a <HAL_GPIO_Init+0xfa>
 8022b4c:	4a9e      	ldr	r2, [pc, #632]	; (8022dc8 <HAL_GPIO_Init+0x2b8>)
 8022b4e:	4293      	cmp	r3, r2
 8022b50:	d875      	bhi.n	8022c3e <HAL_GPIO_Init+0x12e>
 8022b52:	4a9e      	ldr	r2, [pc, #632]	; (8022dcc <HAL_GPIO_Init+0x2bc>)
 8022b54:	4293      	cmp	r3, r2
 8022b56:	d058      	beq.n	8022c0a <HAL_GPIO_Init+0xfa>
 8022b58:	4a9c      	ldr	r2, [pc, #624]	; (8022dcc <HAL_GPIO_Init+0x2bc>)
 8022b5a:	4293      	cmp	r3, r2
 8022b5c:	d86f      	bhi.n	8022c3e <HAL_GPIO_Init+0x12e>
 8022b5e:	4a9c      	ldr	r2, [pc, #624]	; (8022dd0 <HAL_GPIO_Init+0x2c0>)
 8022b60:	4293      	cmp	r3, r2
 8022b62:	d052      	beq.n	8022c0a <HAL_GPIO_Init+0xfa>
 8022b64:	4a9a      	ldr	r2, [pc, #616]	; (8022dd0 <HAL_GPIO_Init+0x2c0>)
 8022b66:	4293      	cmp	r3, r2
 8022b68:	d869      	bhi.n	8022c3e <HAL_GPIO_Init+0x12e>
 8022b6a:	4a9a      	ldr	r2, [pc, #616]	; (8022dd4 <HAL_GPIO_Init+0x2c4>)
 8022b6c:	4293      	cmp	r3, r2
 8022b6e:	d04c      	beq.n	8022c0a <HAL_GPIO_Init+0xfa>
 8022b70:	4a98      	ldr	r2, [pc, #608]	; (8022dd4 <HAL_GPIO_Init+0x2c4>)
 8022b72:	4293      	cmp	r3, r2
 8022b74:	d863      	bhi.n	8022c3e <HAL_GPIO_Init+0x12e>
 8022b76:	4a98      	ldr	r2, [pc, #608]	; (8022dd8 <HAL_GPIO_Init+0x2c8>)
 8022b78:	4293      	cmp	r3, r2
 8022b7a:	d046      	beq.n	8022c0a <HAL_GPIO_Init+0xfa>
 8022b7c:	4a96      	ldr	r2, [pc, #600]	; (8022dd8 <HAL_GPIO_Init+0x2c8>)
 8022b7e:	4293      	cmp	r3, r2
 8022b80:	d85d      	bhi.n	8022c3e <HAL_GPIO_Init+0x12e>
 8022b82:	2b12      	cmp	r3, #18
 8022b84:	d82a      	bhi.n	8022bdc <HAL_GPIO_Init+0xcc>
 8022b86:	2b12      	cmp	r3, #18
 8022b88:	d859      	bhi.n	8022c3e <HAL_GPIO_Init+0x12e>
 8022b8a:	a201      	add	r2, pc, #4	; (adr r2, 8022b90 <HAL_GPIO_Init+0x80>)
 8022b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022b90:	08022c0b 	.word	0x08022c0b
 8022b94:	08022be5 	.word	0x08022be5
 8022b98:	08022bf7 	.word	0x08022bf7
 8022b9c:	08022c39 	.word	0x08022c39
 8022ba0:	08022c3f 	.word	0x08022c3f
 8022ba4:	08022c3f 	.word	0x08022c3f
 8022ba8:	08022c3f 	.word	0x08022c3f
 8022bac:	08022c3f 	.word	0x08022c3f
 8022bb0:	08022c3f 	.word	0x08022c3f
 8022bb4:	08022c3f 	.word	0x08022c3f
 8022bb8:	08022c3f 	.word	0x08022c3f
 8022bbc:	08022c3f 	.word	0x08022c3f
 8022bc0:	08022c3f 	.word	0x08022c3f
 8022bc4:	08022c3f 	.word	0x08022c3f
 8022bc8:	08022c3f 	.word	0x08022c3f
 8022bcc:	08022c3f 	.word	0x08022c3f
 8022bd0:	08022c3f 	.word	0x08022c3f
 8022bd4:	08022bed 	.word	0x08022bed
 8022bd8:	08022c01 	.word	0x08022c01
 8022bdc:	4a7f      	ldr	r2, [pc, #508]	; (8022ddc <HAL_GPIO_Init+0x2cc>)
 8022bde:	4293      	cmp	r3, r2
 8022be0:	d013      	beq.n	8022c0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8022be2:	e02c      	b.n	8022c3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8022be4:	683b      	ldr	r3, [r7, #0]
 8022be6:	68db      	ldr	r3, [r3, #12]
 8022be8:	623b      	str	r3, [r7, #32]
          break;
 8022bea:	e029      	b.n	8022c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8022bec:	683b      	ldr	r3, [r7, #0]
 8022bee:	68db      	ldr	r3, [r3, #12]
 8022bf0:	3304      	adds	r3, #4
 8022bf2:	623b      	str	r3, [r7, #32]
          break;
 8022bf4:	e024      	b.n	8022c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8022bf6:	683b      	ldr	r3, [r7, #0]
 8022bf8:	68db      	ldr	r3, [r3, #12]
 8022bfa:	3308      	adds	r3, #8
 8022bfc:	623b      	str	r3, [r7, #32]
          break;
 8022bfe:	e01f      	b.n	8022c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8022c00:	683b      	ldr	r3, [r7, #0]
 8022c02:	68db      	ldr	r3, [r3, #12]
 8022c04:	330c      	adds	r3, #12
 8022c06:	623b      	str	r3, [r7, #32]
          break;
 8022c08:	e01a      	b.n	8022c40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8022c0a:	683b      	ldr	r3, [r7, #0]
 8022c0c:	689b      	ldr	r3, [r3, #8]
 8022c0e:	2b00      	cmp	r3, #0
 8022c10:	d102      	bne.n	8022c18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8022c12:	2304      	movs	r3, #4
 8022c14:	623b      	str	r3, [r7, #32]
          break;
 8022c16:	e013      	b.n	8022c40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8022c18:	683b      	ldr	r3, [r7, #0]
 8022c1a:	689b      	ldr	r3, [r3, #8]
 8022c1c:	2b01      	cmp	r3, #1
 8022c1e:	d105      	bne.n	8022c2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8022c20:	2308      	movs	r3, #8
 8022c22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8022c24:	687b      	ldr	r3, [r7, #4]
 8022c26:	69fa      	ldr	r2, [r7, #28]
 8022c28:	611a      	str	r2, [r3, #16]
          break;
 8022c2a:	e009      	b.n	8022c40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8022c2c:	2308      	movs	r3, #8
 8022c2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8022c30:	687b      	ldr	r3, [r7, #4]
 8022c32:	69fa      	ldr	r2, [r7, #28]
 8022c34:	615a      	str	r2, [r3, #20]
          break;
 8022c36:	e003      	b.n	8022c40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8022c38:	2300      	movs	r3, #0
 8022c3a:	623b      	str	r3, [r7, #32]
          break;
 8022c3c:	e000      	b.n	8022c40 <HAL_GPIO_Init+0x130>
          break;
 8022c3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8022c40:	69bb      	ldr	r3, [r7, #24]
 8022c42:	2bff      	cmp	r3, #255	; 0xff
 8022c44:	d801      	bhi.n	8022c4a <HAL_GPIO_Init+0x13a>
 8022c46:	687b      	ldr	r3, [r7, #4]
 8022c48:	e001      	b.n	8022c4e <HAL_GPIO_Init+0x13e>
 8022c4a:	687b      	ldr	r3, [r7, #4]
 8022c4c:	3304      	adds	r3, #4
 8022c4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8022c50:	69bb      	ldr	r3, [r7, #24]
 8022c52:	2bff      	cmp	r3, #255	; 0xff
 8022c54:	d802      	bhi.n	8022c5c <HAL_GPIO_Init+0x14c>
 8022c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022c58:	009b      	lsls	r3, r3, #2
 8022c5a:	e002      	b.n	8022c62 <HAL_GPIO_Init+0x152>
 8022c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022c5e:	3b08      	subs	r3, #8
 8022c60:	009b      	lsls	r3, r3, #2
 8022c62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8022c64:	697b      	ldr	r3, [r7, #20]
 8022c66:	681a      	ldr	r2, [r3, #0]
 8022c68:	210f      	movs	r1, #15
 8022c6a:	693b      	ldr	r3, [r7, #16]
 8022c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8022c70:	43db      	mvns	r3, r3
 8022c72:	401a      	ands	r2, r3
 8022c74:	6a39      	ldr	r1, [r7, #32]
 8022c76:	693b      	ldr	r3, [r7, #16]
 8022c78:	fa01 f303 	lsl.w	r3, r1, r3
 8022c7c:	431a      	orrs	r2, r3
 8022c7e:	697b      	ldr	r3, [r7, #20]
 8022c80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8022c82:	683b      	ldr	r3, [r7, #0]
 8022c84:	685b      	ldr	r3, [r3, #4]
 8022c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022c8a:	2b00      	cmp	r3, #0
 8022c8c:	f000 80c1 	beq.w	8022e12 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8022c90:	4b53      	ldr	r3, [pc, #332]	; (8022de0 <HAL_GPIO_Init+0x2d0>)
 8022c92:	699b      	ldr	r3, [r3, #24]
 8022c94:	4a52      	ldr	r2, [pc, #328]	; (8022de0 <HAL_GPIO_Init+0x2d0>)
 8022c96:	f043 0301 	orr.w	r3, r3, #1
 8022c9a:	6193      	str	r3, [r2, #24]
 8022c9c:	4b50      	ldr	r3, [pc, #320]	; (8022de0 <HAL_GPIO_Init+0x2d0>)
 8022c9e:	699b      	ldr	r3, [r3, #24]
 8022ca0:	f003 0301 	and.w	r3, r3, #1
 8022ca4:	60bb      	str	r3, [r7, #8]
 8022ca6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8022ca8:	4a4e      	ldr	r2, [pc, #312]	; (8022de4 <HAL_GPIO_Init+0x2d4>)
 8022caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022cac:	089b      	lsrs	r3, r3, #2
 8022cae:	3302      	adds	r3, #2
 8022cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022cb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8022cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022cb8:	f003 0303 	and.w	r3, r3, #3
 8022cbc:	009b      	lsls	r3, r3, #2
 8022cbe:	220f      	movs	r2, #15
 8022cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8022cc4:	43db      	mvns	r3, r3
 8022cc6:	68fa      	ldr	r2, [r7, #12]
 8022cc8:	4013      	ands	r3, r2
 8022cca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8022ccc:	687b      	ldr	r3, [r7, #4]
 8022cce:	4a46      	ldr	r2, [pc, #280]	; (8022de8 <HAL_GPIO_Init+0x2d8>)
 8022cd0:	4293      	cmp	r3, r2
 8022cd2:	d01f      	beq.n	8022d14 <HAL_GPIO_Init+0x204>
 8022cd4:	687b      	ldr	r3, [r7, #4]
 8022cd6:	4a45      	ldr	r2, [pc, #276]	; (8022dec <HAL_GPIO_Init+0x2dc>)
 8022cd8:	4293      	cmp	r3, r2
 8022cda:	d019      	beq.n	8022d10 <HAL_GPIO_Init+0x200>
 8022cdc:	687b      	ldr	r3, [r7, #4]
 8022cde:	4a44      	ldr	r2, [pc, #272]	; (8022df0 <HAL_GPIO_Init+0x2e0>)
 8022ce0:	4293      	cmp	r3, r2
 8022ce2:	d013      	beq.n	8022d0c <HAL_GPIO_Init+0x1fc>
 8022ce4:	687b      	ldr	r3, [r7, #4]
 8022ce6:	4a43      	ldr	r2, [pc, #268]	; (8022df4 <HAL_GPIO_Init+0x2e4>)
 8022ce8:	4293      	cmp	r3, r2
 8022cea:	d00d      	beq.n	8022d08 <HAL_GPIO_Init+0x1f8>
 8022cec:	687b      	ldr	r3, [r7, #4]
 8022cee:	4a42      	ldr	r2, [pc, #264]	; (8022df8 <HAL_GPIO_Init+0x2e8>)
 8022cf0:	4293      	cmp	r3, r2
 8022cf2:	d007      	beq.n	8022d04 <HAL_GPIO_Init+0x1f4>
 8022cf4:	687b      	ldr	r3, [r7, #4]
 8022cf6:	4a41      	ldr	r2, [pc, #260]	; (8022dfc <HAL_GPIO_Init+0x2ec>)
 8022cf8:	4293      	cmp	r3, r2
 8022cfa:	d101      	bne.n	8022d00 <HAL_GPIO_Init+0x1f0>
 8022cfc:	2305      	movs	r3, #5
 8022cfe:	e00a      	b.n	8022d16 <HAL_GPIO_Init+0x206>
 8022d00:	2306      	movs	r3, #6
 8022d02:	e008      	b.n	8022d16 <HAL_GPIO_Init+0x206>
 8022d04:	2304      	movs	r3, #4
 8022d06:	e006      	b.n	8022d16 <HAL_GPIO_Init+0x206>
 8022d08:	2303      	movs	r3, #3
 8022d0a:	e004      	b.n	8022d16 <HAL_GPIO_Init+0x206>
 8022d0c:	2302      	movs	r3, #2
 8022d0e:	e002      	b.n	8022d16 <HAL_GPIO_Init+0x206>
 8022d10:	2301      	movs	r3, #1
 8022d12:	e000      	b.n	8022d16 <HAL_GPIO_Init+0x206>
 8022d14:	2300      	movs	r3, #0
 8022d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022d18:	f002 0203 	and.w	r2, r2, #3
 8022d1c:	0092      	lsls	r2, r2, #2
 8022d1e:	4093      	lsls	r3, r2
 8022d20:	68fa      	ldr	r2, [r7, #12]
 8022d22:	4313      	orrs	r3, r2
 8022d24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8022d26:	492f      	ldr	r1, [pc, #188]	; (8022de4 <HAL_GPIO_Init+0x2d4>)
 8022d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022d2a:	089b      	lsrs	r3, r3, #2
 8022d2c:	3302      	adds	r3, #2
 8022d2e:	68fa      	ldr	r2, [r7, #12]
 8022d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8022d34:	683b      	ldr	r3, [r7, #0]
 8022d36:	685b      	ldr	r3, [r3, #4]
 8022d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8022d3c:	2b00      	cmp	r3, #0
 8022d3e:	d006      	beq.n	8022d4e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8022d40:	4b2f      	ldr	r3, [pc, #188]	; (8022e00 <HAL_GPIO_Init+0x2f0>)
 8022d42:	681a      	ldr	r2, [r3, #0]
 8022d44:	492e      	ldr	r1, [pc, #184]	; (8022e00 <HAL_GPIO_Init+0x2f0>)
 8022d46:	69bb      	ldr	r3, [r7, #24]
 8022d48:	4313      	orrs	r3, r2
 8022d4a:	600b      	str	r3, [r1, #0]
 8022d4c:	e006      	b.n	8022d5c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8022d4e:	4b2c      	ldr	r3, [pc, #176]	; (8022e00 <HAL_GPIO_Init+0x2f0>)
 8022d50:	681a      	ldr	r2, [r3, #0]
 8022d52:	69bb      	ldr	r3, [r7, #24]
 8022d54:	43db      	mvns	r3, r3
 8022d56:	492a      	ldr	r1, [pc, #168]	; (8022e00 <HAL_GPIO_Init+0x2f0>)
 8022d58:	4013      	ands	r3, r2
 8022d5a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8022d5c:	683b      	ldr	r3, [r7, #0]
 8022d5e:	685b      	ldr	r3, [r3, #4]
 8022d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8022d64:	2b00      	cmp	r3, #0
 8022d66:	d006      	beq.n	8022d76 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8022d68:	4b25      	ldr	r3, [pc, #148]	; (8022e00 <HAL_GPIO_Init+0x2f0>)
 8022d6a:	685a      	ldr	r2, [r3, #4]
 8022d6c:	4924      	ldr	r1, [pc, #144]	; (8022e00 <HAL_GPIO_Init+0x2f0>)
 8022d6e:	69bb      	ldr	r3, [r7, #24]
 8022d70:	4313      	orrs	r3, r2
 8022d72:	604b      	str	r3, [r1, #4]
 8022d74:	e006      	b.n	8022d84 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8022d76:	4b22      	ldr	r3, [pc, #136]	; (8022e00 <HAL_GPIO_Init+0x2f0>)
 8022d78:	685a      	ldr	r2, [r3, #4]
 8022d7a:	69bb      	ldr	r3, [r7, #24]
 8022d7c:	43db      	mvns	r3, r3
 8022d7e:	4920      	ldr	r1, [pc, #128]	; (8022e00 <HAL_GPIO_Init+0x2f0>)
 8022d80:	4013      	ands	r3, r2
 8022d82:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8022d84:	683b      	ldr	r3, [r7, #0]
 8022d86:	685b      	ldr	r3, [r3, #4]
 8022d88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8022d8c:	2b00      	cmp	r3, #0
 8022d8e:	d006      	beq.n	8022d9e <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8022d90:	4b1b      	ldr	r3, [pc, #108]	; (8022e00 <HAL_GPIO_Init+0x2f0>)
 8022d92:	689a      	ldr	r2, [r3, #8]
 8022d94:	491a      	ldr	r1, [pc, #104]	; (8022e00 <HAL_GPIO_Init+0x2f0>)
 8022d96:	69bb      	ldr	r3, [r7, #24]
 8022d98:	4313      	orrs	r3, r2
 8022d9a:	608b      	str	r3, [r1, #8]
 8022d9c:	e006      	b.n	8022dac <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8022d9e:	4b18      	ldr	r3, [pc, #96]	; (8022e00 <HAL_GPIO_Init+0x2f0>)
 8022da0:	689a      	ldr	r2, [r3, #8]
 8022da2:	69bb      	ldr	r3, [r7, #24]
 8022da4:	43db      	mvns	r3, r3
 8022da6:	4916      	ldr	r1, [pc, #88]	; (8022e00 <HAL_GPIO_Init+0x2f0>)
 8022da8:	4013      	ands	r3, r2
 8022daa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8022dac:	683b      	ldr	r3, [r7, #0]
 8022dae:	685b      	ldr	r3, [r3, #4]
 8022db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8022db4:	2b00      	cmp	r3, #0
 8022db6:	d025      	beq.n	8022e04 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8022db8:	4b11      	ldr	r3, [pc, #68]	; (8022e00 <HAL_GPIO_Init+0x2f0>)
 8022dba:	68da      	ldr	r2, [r3, #12]
 8022dbc:	4910      	ldr	r1, [pc, #64]	; (8022e00 <HAL_GPIO_Init+0x2f0>)
 8022dbe:	69bb      	ldr	r3, [r7, #24]
 8022dc0:	4313      	orrs	r3, r2
 8022dc2:	60cb      	str	r3, [r1, #12]
 8022dc4:	e025      	b.n	8022e12 <HAL_GPIO_Init+0x302>
 8022dc6:	bf00      	nop
 8022dc8:	10320000 	.word	0x10320000
 8022dcc:	10310000 	.word	0x10310000
 8022dd0:	10220000 	.word	0x10220000
 8022dd4:	10210000 	.word	0x10210000
 8022dd8:	10120000 	.word	0x10120000
 8022ddc:	10110000 	.word	0x10110000
 8022de0:	40021000 	.word	0x40021000
 8022de4:	40010000 	.word	0x40010000
 8022de8:	40010800 	.word	0x40010800
 8022dec:	40010c00 	.word	0x40010c00
 8022df0:	40011000 	.word	0x40011000
 8022df4:	40011400 	.word	0x40011400
 8022df8:	40011800 	.word	0x40011800
 8022dfc:	40011c00 	.word	0x40011c00
 8022e00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8022e04:	4b0b      	ldr	r3, [pc, #44]	; (8022e34 <HAL_GPIO_Init+0x324>)
 8022e06:	68da      	ldr	r2, [r3, #12]
 8022e08:	69bb      	ldr	r3, [r7, #24]
 8022e0a:	43db      	mvns	r3, r3
 8022e0c:	4909      	ldr	r1, [pc, #36]	; (8022e34 <HAL_GPIO_Init+0x324>)
 8022e0e:	4013      	ands	r3, r2
 8022e10:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8022e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022e14:	3301      	adds	r3, #1
 8022e16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8022e18:	683b      	ldr	r3, [r7, #0]
 8022e1a:	681a      	ldr	r2, [r3, #0]
 8022e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8022e22:	2b00      	cmp	r3, #0
 8022e24:	f47f ae7e 	bne.w	8022b24 <HAL_GPIO_Init+0x14>
  }
}
 8022e28:	bf00      	nop
 8022e2a:	bf00      	nop
 8022e2c:	372c      	adds	r7, #44	; 0x2c
 8022e2e:	46bd      	mov	sp, r7
 8022e30:	bc80      	pop	{r7}
 8022e32:	4770      	bx	lr
 8022e34:	40010400 	.word	0x40010400

08022e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8022e38:	b480      	push	{r7}
 8022e3a:	b083      	sub	sp, #12
 8022e3c:	af00      	add	r7, sp, #0
 8022e3e:	6078      	str	r0, [r7, #4]
 8022e40:	460b      	mov	r3, r1
 8022e42:	807b      	strh	r3, [r7, #2]
 8022e44:	4613      	mov	r3, r2
 8022e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8022e48:	787b      	ldrb	r3, [r7, #1]
 8022e4a:	2b00      	cmp	r3, #0
 8022e4c:	d003      	beq.n	8022e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8022e4e:	887a      	ldrh	r2, [r7, #2]
 8022e50:	687b      	ldr	r3, [r7, #4]
 8022e52:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8022e54:	e003      	b.n	8022e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8022e56:	887b      	ldrh	r3, [r7, #2]
 8022e58:	041a      	lsls	r2, r3, #16
 8022e5a:	687b      	ldr	r3, [r7, #4]
 8022e5c:	611a      	str	r2, [r3, #16]
}
 8022e5e:	bf00      	nop
 8022e60:	370c      	adds	r7, #12
 8022e62:	46bd      	mov	sp, r7
 8022e64:	bc80      	pop	{r7}
 8022e66:	4770      	bx	lr

08022e68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8022e68:	b580      	push	{r7, lr}
 8022e6a:	b084      	sub	sp, #16
 8022e6c:	af00      	add	r7, sp, #0
 8022e6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8022e70:	687b      	ldr	r3, [r7, #4]
 8022e72:	2b00      	cmp	r3, #0
 8022e74:	d101      	bne.n	8022e7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8022e76:	2301      	movs	r3, #1
 8022e78:	e12b      	b.n	80230d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8022e7a:	687b      	ldr	r3, [r7, #4]
 8022e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8022e80:	b2db      	uxtb	r3, r3
 8022e82:	2b00      	cmp	r3, #0
 8022e84:	d106      	bne.n	8022e94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8022e86:	687b      	ldr	r3, [r7, #4]
 8022e88:	2200      	movs	r2, #0
 8022e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8022e8e:	6878      	ldr	r0, [r7, #4]
 8022e90:	f7ff f81a 	bl	8021ec8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8022e94:	687b      	ldr	r3, [r7, #4]
 8022e96:	2224      	movs	r2, #36	; 0x24
 8022e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8022e9c:	687b      	ldr	r3, [r7, #4]
 8022e9e:	681b      	ldr	r3, [r3, #0]
 8022ea0:	681a      	ldr	r2, [r3, #0]
 8022ea2:	687b      	ldr	r3, [r7, #4]
 8022ea4:	681b      	ldr	r3, [r3, #0]
 8022ea6:	f022 0201 	bic.w	r2, r2, #1
 8022eaa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8022eac:	687b      	ldr	r3, [r7, #4]
 8022eae:	681b      	ldr	r3, [r3, #0]
 8022eb0:	681a      	ldr	r2, [r3, #0]
 8022eb2:	687b      	ldr	r3, [r7, #4]
 8022eb4:	681b      	ldr	r3, [r3, #0]
 8022eb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8022eba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8022ebc:	687b      	ldr	r3, [r7, #4]
 8022ebe:	681b      	ldr	r3, [r3, #0]
 8022ec0:	681a      	ldr	r2, [r3, #0]
 8022ec2:	687b      	ldr	r3, [r7, #4]
 8022ec4:	681b      	ldr	r3, [r3, #0]
 8022ec6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8022eca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8022ecc:	f001 fb6e 	bl	80245ac <HAL_RCC_GetPCLK1Freq>
 8022ed0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8022ed2:	687b      	ldr	r3, [r7, #4]
 8022ed4:	685b      	ldr	r3, [r3, #4]
 8022ed6:	4a81      	ldr	r2, [pc, #516]	; (80230dc <HAL_I2C_Init+0x274>)
 8022ed8:	4293      	cmp	r3, r2
 8022eda:	d807      	bhi.n	8022eec <HAL_I2C_Init+0x84>
 8022edc:	68fb      	ldr	r3, [r7, #12]
 8022ede:	4a80      	ldr	r2, [pc, #512]	; (80230e0 <HAL_I2C_Init+0x278>)
 8022ee0:	4293      	cmp	r3, r2
 8022ee2:	bf94      	ite	ls
 8022ee4:	2301      	movls	r3, #1
 8022ee6:	2300      	movhi	r3, #0
 8022ee8:	b2db      	uxtb	r3, r3
 8022eea:	e006      	b.n	8022efa <HAL_I2C_Init+0x92>
 8022eec:	68fb      	ldr	r3, [r7, #12]
 8022eee:	4a7d      	ldr	r2, [pc, #500]	; (80230e4 <HAL_I2C_Init+0x27c>)
 8022ef0:	4293      	cmp	r3, r2
 8022ef2:	bf94      	ite	ls
 8022ef4:	2301      	movls	r3, #1
 8022ef6:	2300      	movhi	r3, #0
 8022ef8:	b2db      	uxtb	r3, r3
 8022efa:	2b00      	cmp	r3, #0
 8022efc:	d001      	beq.n	8022f02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8022efe:	2301      	movs	r3, #1
 8022f00:	e0e7      	b.n	80230d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8022f02:	68fb      	ldr	r3, [r7, #12]
 8022f04:	4a78      	ldr	r2, [pc, #480]	; (80230e8 <HAL_I2C_Init+0x280>)
 8022f06:	fba2 2303 	umull	r2, r3, r2, r3
 8022f0a:	0c9b      	lsrs	r3, r3, #18
 8022f0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8022f0e:	687b      	ldr	r3, [r7, #4]
 8022f10:	681b      	ldr	r3, [r3, #0]
 8022f12:	685b      	ldr	r3, [r3, #4]
 8022f14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8022f18:	687b      	ldr	r3, [r7, #4]
 8022f1a:	681b      	ldr	r3, [r3, #0]
 8022f1c:	68ba      	ldr	r2, [r7, #8]
 8022f1e:	430a      	orrs	r2, r1
 8022f20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8022f22:	687b      	ldr	r3, [r7, #4]
 8022f24:	681b      	ldr	r3, [r3, #0]
 8022f26:	6a1b      	ldr	r3, [r3, #32]
 8022f28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8022f2c:	687b      	ldr	r3, [r7, #4]
 8022f2e:	685b      	ldr	r3, [r3, #4]
 8022f30:	4a6a      	ldr	r2, [pc, #424]	; (80230dc <HAL_I2C_Init+0x274>)
 8022f32:	4293      	cmp	r3, r2
 8022f34:	d802      	bhi.n	8022f3c <HAL_I2C_Init+0xd4>
 8022f36:	68bb      	ldr	r3, [r7, #8]
 8022f38:	3301      	adds	r3, #1
 8022f3a:	e009      	b.n	8022f50 <HAL_I2C_Init+0xe8>
 8022f3c:	68bb      	ldr	r3, [r7, #8]
 8022f3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8022f42:	fb02 f303 	mul.w	r3, r2, r3
 8022f46:	4a69      	ldr	r2, [pc, #420]	; (80230ec <HAL_I2C_Init+0x284>)
 8022f48:	fba2 2303 	umull	r2, r3, r2, r3
 8022f4c:	099b      	lsrs	r3, r3, #6
 8022f4e:	3301      	adds	r3, #1
 8022f50:	687a      	ldr	r2, [r7, #4]
 8022f52:	6812      	ldr	r2, [r2, #0]
 8022f54:	430b      	orrs	r3, r1
 8022f56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8022f58:	687b      	ldr	r3, [r7, #4]
 8022f5a:	681b      	ldr	r3, [r3, #0]
 8022f5c:	69db      	ldr	r3, [r3, #28]
 8022f5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8022f62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8022f66:	687b      	ldr	r3, [r7, #4]
 8022f68:	685b      	ldr	r3, [r3, #4]
 8022f6a:	495c      	ldr	r1, [pc, #368]	; (80230dc <HAL_I2C_Init+0x274>)
 8022f6c:	428b      	cmp	r3, r1
 8022f6e:	d819      	bhi.n	8022fa4 <HAL_I2C_Init+0x13c>
 8022f70:	68fb      	ldr	r3, [r7, #12]
 8022f72:	1e59      	subs	r1, r3, #1
 8022f74:	687b      	ldr	r3, [r7, #4]
 8022f76:	685b      	ldr	r3, [r3, #4]
 8022f78:	005b      	lsls	r3, r3, #1
 8022f7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8022f7e:	1c59      	adds	r1, r3, #1
 8022f80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8022f84:	400b      	ands	r3, r1
 8022f86:	2b00      	cmp	r3, #0
 8022f88:	d00a      	beq.n	8022fa0 <HAL_I2C_Init+0x138>
 8022f8a:	68fb      	ldr	r3, [r7, #12]
 8022f8c:	1e59      	subs	r1, r3, #1
 8022f8e:	687b      	ldr	r3, [r7, #4]
 8022f90:	685b      	ldr	r3, [r3, #4]
 8022f92:	005b      	lsls	r3, r3, #1
 8022f94:	fbb1 f3f3 	udiv	r3, r1, r3
 8022f98:	3301      	adds	r3, #1
 8022f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022f9e:	e051      	b.n	8023044 <HAL_I2C_Init+0x1dc>
 8022fa0:	2304      	movs	r3, #4
 8022fa2:	e04f      	b.n	8023044 <HAL_I2C_Init+0x1dc>
 8022fa4:	687b      	ldr	r3, [r7, #4]
 8022fa6:	689b      	ldr	r3, [r3, #8]
 8022fa8:	2b00      	cmp	r3, #0
 8022faa:	d111      	bne.n	8022fd0 <HAL_I2C_Init+0x168>
 8022fac:	68fb      	ldr	r3, [r7, #12]
 8022fae:	1e58      	subs	r0, r3, #1
 8022fb0:	687b      	ldr	r3, [r7, #4]
 8022fb2:	6859      	ldr	r1, [r3, #4]
 8022fb4:	460b      	mov	r3, r1
 8022fb6:	005b      	lsls	r3, r3, #1
 8022fb8:	440b      	add	r3, r1
 8022fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8022fbe:	3301      	adds	r3, #1
 8022fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022fc4:	2b00      	cmp	r3, #0
 8022fc6:	bf0c      	ite	eq
 8022fc8:	2301      	moveq	r3, #1
 8022fca:	2300      	movne	r3, #0
 8022fcc:	b2db      	uxtb	r3, r3
 8022fce:	e012      	b.n	8022ff6 <HAL_I2C_Init+0x18e>
 8022fd0:	68fb      	ldr	r3, [r7, #12]
 8022fd2:	1e58      	subs	r0, r3, #1
 8022fd4:	687b      	ldr	r3, [r7, #4]
 8022fd6:	6859      	ldr	r1, [r3, #4]
 8022fd8:	460b      	mov	r3, r1
 8022fda:	009b      	lsls	r3, r3, #2
 8022fdc:	440b      	add	r3, r1
 8022fde:	0099      	lsls	r1, r3, #2
 8022fe0:	440b      	add	r3, r1
 8022fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8022fe6:	3301      	adds	r3, #1
 8022fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022fec:	2b00      	cmp	r3, #0
 8022fee:	bf0c      	ite	eq
 8022ff0:	2301      	moveq	r3, #1
 8022ff2:	2300      	movne	r3, #0
 8022ff4:	b2db      	uxtb	r3, r3
 8022ff6:	2b00      	cmp	r3, #0
 8022ff8:	d001      	beq.n	8022ffe <HAL_I2C_Init+0x196>
 8022ffa:	2301      	movs	r3, #1
 8022ffc:	e022      	b.n	8023044 <HAL_I2C_Init+0x1dc>
 8022ffe:	687b      	ldr	r3, [r7, #4]
 8023000:	689b      	ldr	r3, [r3, #8]
 8023002:	2b00      	cmp	r3, #0
 8023004:	d10e      	bne.n	8023024 <HAL_I2C_Init+0x1bc>
 8023006:	68fb      	ldr	r3, [r7, #12]
 8023008:	1e58      	subs	r0, r3, #1
 802300a:	687b      	ldr	r3, [r7, #4]
 802300c:	6859      	ldr	r1, [r3, #4]
 802300e:	460b      	mov	r3, r1
 8023010:	005b      	lsls	r3, r3, #1
 8023012:	440b      	add	r3, r1
 8023014:	fbb0 f3f3 	udiv	r3, r0, r3
 8023018:	3301      	adds	r3, #1
 802301a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802301e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8023022:	e00f      	b.n	8023044 <HAL_I2C_Init+0x1dc>
 8023024:	68fb      	ldr	r3, [r7, #12]
 8023026:	1e58      	subs	r0, r3, #1
 8023028:	687b      	ldr	r3, [r7, #4]
 802302a:	6859      	ldr	r1, [r3, #4]
 802302c:	460b      	mov	r3, r1
 802302e:	009b      	lsls	r3, r3, #2
 8023030:	440b      	add	r3, r1
 8023032:	0099      	lsls	r1, r3, #2
 8023034:	440b      	add	r3, r1
 8023036:	fbb0 f3f3 	udiv	r3, r0, r3
 802303a:	3301      	adds	r3, #1
 802303c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023040:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8023044:	6879      	ldr	r1, [r7, #4]
 8023046:	6809      	ldr	r1, [r1, #0]
 8023048:	4313      	orrs	r3, r2
 802304a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 802304c:	687b      	ldr	r3, [r7, #4]
 802304e:	681b      	ldr	r3, [r3, #0]
 8023050:	681b      	ldr	r3, [r3, #0]
 8023052:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8023056:	687b      	ldr	r3, [r7, #4]
 8023058:	69da      	ldr	r2, [r3, #28]
 802305a:	687b      	ldr	r3, [r7, #4]
 802305c:	6a1b      	ldr	r3, [r3, #32]
 802305e:	431a      	orrs	r2, r3
 8023060:	687b      	ldr	r3, [r7, #4]
 8023062:	681b      	ldr	r3, [r3, #0]
 8023064:	430a      	orrs	r2, r1
 8023066:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8023068:	687b      	ldr	r3, [r7, #4]
 802306a:	681b      	ldr	r3, [r3, #0]
 802306c:	689b      	ldr	r3, [r3, #8]
 802306e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8023072:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8023076:	687a      	ldr	r2, [r7, #4]
 8023078:	6911      	ldr	r1, [r2, #16]
 802307a:	687a      	ldr	r2, [r7, #4]
 802307c:	68d2      	ldr	r2, [r2, #12]
 802307e:	4311      	orrs	r1, r2
 8023080:	687a      	ldr	r2, [r7, #4]
 8023082:	6812      	ldr	r2, [r2, #0]
 8023084:	430b      	orrs	r3, r1
 8023086:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8023088:	687b      	ldr	r3, [r7, #4]
 802308a:	681b      	ldr	r3, [r3, #0]
 802308c:	68db      	ldr	r3, [r3, #12]
 802308e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8023092:	687b      	ldr	r3, [r7, #4]
 8023094:	695a      	ldr	r2, [r3, #20]
 8023096:	687b      	ldr	r3, [r7, #4]
 8023098:	699b      	ldr	r3, [r3, #24]
 802309a:	431a      	orrs	r2, r3
 802309c:	687b      	ldr	r3, [r7, #4]
 802309e:	681b      	ldr	r3, [r3, #0]
 80230a0:	430a      	orrs	r2, r1
 80230a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80230a4:	687b      	ldr	r3, [r7, #4]
 80230a6:	681b      	ldr	r3, [r3, #0]
 80230a8:	681a      	ldr	r2, [r3, #0]
 80230aa:	687b      	ldr	r3, [r7, #4]
 80230ac:	681b      	ldr	r3, [r3, #0]
 80230ae:	f042 0201 	orr.w	r2, r2, #1
 80230b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80230b4:	687b      	ldr	r3, [r7, #4]
 80230b6:	2200      	movs	r2, #0
 80230b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80230ba:	687b      	ldr	r3, [r7, #4]
 80230bc:	2220      	movs	r2, #32
 80230be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80230c2:	687b      	ldr	r3, [r7, #4]
 80230c4:	2200      	movs	r2, #0
 80230c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80230c8:	687b      	ldr	r3, [r7, #4]
 80230ca:	2200      	movs	r2, #0
 80230cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80230d0:	2300      	movs	r3, #0
}
 80230d2:	4618      	mov	r0, r3
 80230d4:	3710      	adds	r7, #16
 80230d6:	46bd      	mov	sp, r7
 80230d8:	bd80      	pop	{r7, pc}
 80230da:	bf00      	nop
 80230dc:	000186a0 	.word	0x000186a0
 80230e0:	001e847f 	.word	0x001e847f
 80230e4:	003d08ff 	.word	0x003d08ff
 80230e8:	431bde83 	.word	0x431bde83
 80230ec:	10624dd3 	.word	0x10624dd3

080230f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80230f0:	b580      	push	{r7, lr}
 80230f2:	b088      	sub	sp, #32
 80230f4:	af02      	add	r7, sp, #8
 80230f6:	60f8      	str	r0, [r7, #12]
 80230f8:	607a      	str	r2, [r7, #4]
 80230fa:	461a      	mov	r2, r3
 80230fc:	460b      	mov	r3, r1
 80230fe:	817b      	strh	r3, [r7, #10]
 8023100:	4613      	mov	r3, r2
 8023102:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8023104:	f7ff f912 	bl	802232c <HAL_GetTick>
 8023108:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 802310a:	68fb      	ldr	r3, [r7, #12]
 802310c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8023110:	b2db      	uxtb	r3, r3
 8023112:	2b20      	cmp	r3, #32
 8023114:	f040 80e0 	bne.w	80232d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8023118:	697b      	ldr	r3, [r7, #20]
 802311a:	9300      	str	r3, [sp, #0]
 802311c:	2319      	movs	r3, #25
 802311e:	2201      	movs	r2, #1
 8023120:	4970      	ldr	r1, [pc, #448]	; (80232e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8023122:	68f8      	ldr	r0, [r7, #12]
 8023124:	f000 fc92 	bl	8023a4c <I2C_WaitOnFlagUntilTimeout>
 8023128:	4603      	mov	r3, r0
 802312a:	2b00      	cmp	r3, #0
 802312c:	d001      	beq.n	8023132 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 802312e:	2302      	movs	r3, #2
 8023130:	e0d3      	b.n	80232da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8023132:	68fb      	ldr	r3, [r7, #12]
 8023134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8023138:	2b01      	cmp	r3, #1
 802313a:	d101      	bne.n	8023140 <HAL_I2C_Master_Transmit+0x50>
 802313c:	2302      	movs	r3, #2
 802313e:	e0cc      	b.n	80232da <HAL_I2C_Master_Transmit+0x1ea>
 8023140:	68fb      	ldr	r3, [r7, #12]
 8023142:	2201      	movs	r2, #1
 8023144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8023148:	68fb      	ldr	r3, [r7, #12]
 802314a:	681b      	ldr	r3, [r3, #0]
 802314c:	681b      	ldr	r3, [r3, #0]
 802314e:	f003 0301 	and.w	r3, r3, #1
 8023152:	2b01      	cmp	r3, #1
 8023154:	d007      	beq.n	8023166 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8023156:	68fb      	ldr	r3, [r7, #12]
 8023158:	681b      	ldr	r3, [r3, #0]
 802315a:	681a      	ldr	r2, [r3, #0]
 802315c:	68fb      	ldr	r3, [r7, #12]
 802315e:	681b      	ldr	r3, [r3, #0]
 8023160:	f042 0201 	orr.w	r2, r2, #1
 8023164:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8023166:	68fb      	ldr	r3, [r7, #12]
 8023168:	681b      	ldr	r3, [r3, #0]
 802316a:	681a      	ldr	r2, [r3, #0]
 802316c:	68fb      	ldr	r3, [r7, #12]
 802316e:	681b      	ldr	r3, [r3, #0]
 8023170:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8023174:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8023176:	68fb      	ldr	r3, [r7, #12]
 8023178:	2221      	movs	r2, #33	; 0x21
 802317a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 802317e:	68fb      	ldr	r3, [r7, #12]
 8023180:	2210      	movs	r2, #16
 8023182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8023186:	68fb      	ldr	r3, [r7, #12]
 8023188:	2200      	movs	r2, #0
 802318a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 802318c:	68fb      	ldr	r3, [r7, #12]
 802318e:	687a      	ldr	r2, [r7, #4]
 8023190:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8023192:	68fb      	ldr	r3, [r7, #12]
 8023194:	893a      	ldrh	r2, [r7, #8]
 8023196:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8023198:	68fb      	ldr	r3, [r7, #12]
 802319a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802319c:	b29a      	uxth	r2, r3
 802319e:	68fb      	ldr	r3, [r7, #12]
 80231a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80231a2:	68fb      	ldr	r3, [r7, #12]
 80231a4:	4a50      	ldr	r2, [pc, #320]	; (80232e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80231a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80231a8:	8979      	ldrh	r1, [r7, #10]
 80231aa:	697b      	ldr	r3, [r7, #20]
 80231ac:	6a3a      	ldr	r2, [r7, #32]
 80231ae:	68f8      	ldr	r0, [r7, #12]
 80231b0:	f000 fafc 	bl	80237ac <I2C_MasterRequestWrite>
 80231b4:	4603      	mov	r3, r0
 80231b6:	2b00      	cmp	r3, #0
 80231b8:	d001      	beq.n	80231be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80231ba:	2301      	movs	r3, #1
 80231bc:	e08d      	b.n	80232da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80231be:	2300      	movs	r3, #0
 80231c0:	613b      	str	r3, [r7, #16]
 80231c2:	68fb      	ldr	r3, [r7, #12]
 80231c4:	681b      	ldr	r3, [r3, #0]
 80231c6:	695b      	ldr	r3, [r3, #20]
 80231c8:	613b      	str	r3, [r7, #16]
 80231ca:	68fb      	ldr	r3, [r7, #12]
 80231cc:	681b      	ldr	r3, [r3, #0]
 80231ce:	699b      	ldr	r3, [r3, #24]
 80231d0:	613b      	str	r3, [r7, #16]
 80231d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80231d4:	e066      	b.n	80232a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80231d6:	697a      	ldr	r2, [r7, #20]
 80231d8:	6a39      	ldr	r1, [r7, #32]
 80231da:	68f8      	ldr	r0, [r7, #12]
 80231dc:	f000 fd0c 	bl	8023bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80231e0:	4603      	mov	r3, r0
 80231e2:	2b00      	cmp	r3, #0
 80231e4:	d00d      	beq.n	8023202 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80231e6:	68fb      	ldr	r3, [r7, #12]
 80231e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80231ea:	2b04      	cmp	r3, #4
 80231ec:	d107      	bne.n	80231fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80231ee:	68fb      	ldr	r3, [r7, #12]
 80231f0:	681b      	ldr	r3, [r3, #0]
 80231f2:	681a      	ldr	r2, [r3, #0]
 80231f4:	68fb      	ldr	r3, [r7, #12]
 80231f6:	681b      	ldr	r3, [r3, #0]
 80231f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80231fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80231fe:	2301      	movs	r3, #1
 8023200:	e06b      	b.n	80232da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8023202:	68fb      	ldr	r3, [r7, #12]
 8023204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023206:	781a      	ldrb	r2, [r3, #0]
 8023208:	68fb      	ldr	r3, [r7, #12]
 802320a:	681b      	ldr	r3, [r3, #0]
 802320c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802320e:	68fb      	ldr	r3, [r7, #12]
 8023210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023212:	1c5a      	adds	r2, r3, #1
 8023214:	68fb      	ldr	r3, [r7, #12]
 8023216:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8023218:	68fb      	ldr	r3, [r7, #12]
 802321a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802321c:	b29b      	uxth	r3, r3
 802321e:	3b01      	subs	r3, #1
 8023220:	b29a      	uxth	r2, r3
 8023222:	68fb      	ldr	r3, [r7, #12]
 8023224:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8023226:	68fb      	ldr	r3, [r7, #12]
 8023228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802322a:	3b01      	subs	r3, #1
 802322c:	b29a      	uxth	r2, r3
 802322e:	68fb      	ldr	r3, [r7, #12]
 8023230:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8023232:	68fb      	ldr	r3, [r7, #12]
 8023234:	681b      	ldr	r3, [r3, #0]
 8023236:	695b      	ldr	r3, [r3, #20]
 8023238:	f003 0304 	and.w	r3, r3, #4
 802323c:	2b04      	cmp	r3, #4
 802323e:	d11b      	bne.n	8023278 <HAL_I2C_Master_Transmit+0x188>
 8023240:	68fb      	ldr	r3, [r7, #12]
 8023242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023244:	2b00      	cmp	r3, #0
 8023246:	d017      	beq.n	8023278 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8023248:	68fb      	ldr	r3, [r7, #12]
 802324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802324c:	781a      	ldrb	r2, [r3, #0]
 802324e:	68fb      	ldr	r3, [r7, #12]
 8023250:	681b      	ldr	r3, [r3, #0]
 8023252:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8023254:	68fb      	ldr	r3, [r7, #12]
 8023256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023258:	1c5a      	adds	r2, r3, #1
 802325a:	68fb      	ldr	r3, [r7, #12]
 802325c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 802325e:	68fb      	ldr	r3, [r7, #12]
 8023260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023262:	b29b      	uxth	r3, r3
 8023264:	3b01      	subs	r3, #1
 8023266:	b29a      	uxth	r2, r3
 8023268:	68fb      	ldr	r3, [r7, #12]
 802326a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 802326c:	68fb      	ldr	r3, [r7, #12]
 802326e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023270:	3b01      	subs	r3, #1
 8023272:	b29a      	uxth	r2, r3
 8023274:	68fb      	ldr	r3, [r7, #12]
 8023276:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8023278:	697a      	ldr	r2, [r7, #20]
 802327a:	6a39      	ldr	r1, [r7, #32]
 802327c:	68f8      	ldr	r0, [r7, #12]
 802327e:	f000 fcfc 	bl	8023c7a <I2C_WaitOnBTFFlagUntilTimeout>
 8023282:	4603      	mov	r3, r0
 8023284:	2b00      	cmp	r3, #0
 8023286:	d00d      	beq.n	80232a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8023288:	68fb      	ldr	r3, [r7, #12]
 802328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802328c:	2b04      	cmp	r3, #4
 802328e:	d107      	bne.n	80232a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8023290:	68fb      	ldr	r3, [r7, #12]
 8023292:	681b      	ldr	r3, [r3, #0]
 8023294:	681a      	ldr	r2, [r3, #0]
 8023296:	68fb      	ldr	r3, [r7, #12]
 8023298:	681b      	ldr	r3, [r3, #0]
 802329a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802329e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80232a0:	2301      	movs	r3, #1
 80232a2:	e01a      	b.n	80232da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80232a4:	68fb      	ldr	r3, [r7, #12]
 80232a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80232a8:	2b00      	cmp	r3, #0
 80232aa:	d194      	bne.n	80231d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80232ac:	68fb      	ldr	r3, [r7, #12]
 80232ae:	681b      	ldr	r3, [r3, #0]
 80232b0:	681a      	ldr	r2, [r3, #0]
 80232b2:	68fb      	ldr	r3, [r7, #12]
 80232b4:	681b      	ldr	r3, [r3, #0]
 80232b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80232ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80232bc:	68fb      	ldr	r3, [r7, #12]
 80232be:	2220      	movs	r2, #32
 80232c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80232c4:	68fb      	ldr	r3, [r7, #12]
 80232c6:	2200      	movs	r2, #0
 80232c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80232cc:	68fb      	ldr	r3, [r7, #12]
 80232ce:	2200      	movs	r2, #0
 80232d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80232d4:	2300      	movs	r3, #0
 80232d6:	e000      	b.n	80232da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80232d8:	2302      	movs	r3, #2
  }
}
 80232da:	4618      	mov	r0, r3
 80232dc:	3718      	adds	r7, #24
 80232de:	46bd      	mov	sp, r7
 80232e0:	bd80      	pop	{r7, pc}
 80232e2:	bf00      	nop
 80232e4:	00100002 	.word	0x00100002
 80232e8:	ffff0000 	.word	0xffff0000

080232ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80232ec:	b580      	push	{r7, lr}
 80232ee:	b08c      	sub	sp, #48	; 0x30
 80232f0:	af02      	add	r7, sp, #8
 80232f2:	60f8      	str	r0, [r7, #12]
 80232f4:	607a      	str	r2, [r7, #4]
 80232f6:	461a      	mov	r2, r3
 80232f8:	460b      	mov	r3, r1
 80232fa:	817b      	strh	r3, [r7, #10]
 80232fc:	4613      	mov	r3, r2
 80232fe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8023300:	2300      	movs	r3, #0
 8023302:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8023304:	f7ff f812 	bl	802232c <HAL_GetTick>
 8023308:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 802330a:	68fb      	ldr	r3, [r7, #12]
 802330c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8023310:	b2db      	uxtb	r3, r3
 8023312:	2b20      	cmp	r3, #32
 8023314:	f040 823f 	bne.w	8023796 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8023318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802331a:	9300      	str	r3, [sp, #0]
 802331c:	2319      	movs	r3, #25
 802331e:	2201      	movs	r2, #1
 8023320:	497f      	ldr	r1, [pc, #508]	; (8023520 <HAL_I2C_Master_Receive+0x234>)
 8023322:	68f8      	ldr	r0, [r7, #12]
 8023324:	f000 fb92 	bl	8023a4c <I2C_WaitOnFlagUntilTimeout>
 8023328:	4603      	mov	r3, r0
 802332a:	2b00      	cmp	r3, #0
 802332c:	d001      	beq.n	8023332 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 802332e:	2302      	movs	r3, #2
 8023330:	e232      	b.n	8023798 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8023332:	68fb      	ldr	r3, [r7, #12]
 8023334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8023338:	2b01      	cmp	r3, #1
 802333a:	d101      	bne.n	8023340 <HAL_I2C_Master_Receive+0x54>
 802333c:	2302      	movs	r3, #2
 802333e:	e22b      	b.n	8023798 <HAL_I2C_Master_Receive+0x4ac>
 8023340:	68fb      	ldr	r3, [r7, #12]
 8023342:	2201      	movs	r2, #1
 8023344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8023348:	68fb      	ldr	r3, [r7, #12]
 802334a:	681b      	ldr	r3, [r3, #0]
 802334c:	681b      	ldr	r3, [r3, #0]
 802334e:	f003 0301 	and.w	r3, r3, #1
 8023352:	2b01      	cmp	r3, #1
 8023354:	d007      	beq.n	8023366 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8023356:	68fb      	ldr	r3, [r7, #12]
 8023358:	681b      	ldr	r3, [r3, #0]
 802335a:	681a      	ldr	r2, [r3, #0]
 802335c:	68fb      	ldr	r3, [r7, #12]
 802335e:	681b      	ldr	r3, [r3, #0]
 8023360:	f042 0201 	orr.w	r2, r2, #1
 8023364:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8023366:	68fb      	ldr	r3, [r7, #12]
 8023368:	681b      	ldr	r3, [r3, #0]
 802336a:	681a      	ldr	r2, [r3, #0]
 802336c:	68fb      	ldr	r3, [r7, #12]
 802336e:	681b      	ldr	r3, [r3, #0]
 8023370:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8023374:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8023376:	68fb      	ldr	r3, [r7, #12]
 8023378:	2222      	movs	r2, #34	; 0x22
 802337a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 802337e:	68fb      	ldr	r3, [r7, #12]
 8023380:	2210      	movs	r2, #16
 8023382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8023386:	68fb      	ldr	r3, [r7, #12]
 8023388:	2200      	movs	r2, #0
 802338a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 802338c:	68fb      	ldr	r3, [r7, #12]
 802338e:	687a      	ldr	r2, [r7, #4]
 8023390:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8023392:	68fb      	ldr	r3, [r7, #12]
 8023394:	893a      	ldrh	r2, [r7, #8]
 8023396:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8023398:	68fb      	ldr	r3, [r7, #12]
 802339a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802339c:	b29a      	uxth	r2, r3
 802339e:	68fb      	ldr	r3, [r7, #12]
 80233a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80233a2:	68fb      	ldr	r3, [r7, #12]
 80233a4:	4a5f      	ldr	r2, [pc, #380]	; (8023524 <HAL_I2C_Master_Receive+0x238>)
 80233a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80233a8:	8979      	ldrh	r1, [r7, #10]
 80233aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80233ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80233ae:	68f8      	ldr	r0, [r7, #12]
 80233b0:	f000 fa7e 	bl	80238b0 <I2C_MasterRequestRead>
 80233b4:	4603      	mov	r3, r0
 80233b6:	2b00      	cmp	r3, #0
 80233b8:	d001      	beq.n	80233be <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80233ba:	2301      	movs	r3, #1
 80233bc:	e1ec      	b.n	8023798 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80233be:	68fb      	ldr	r3, [r7, #12]
 80233c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80233c2:	2b00      	cmp	r3, #0
 80233c4:	d113      	bne.n	80233ee <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80233c6:	2300      	movs	r3, #0
 80233c8:	61fb      	str	r3, [r7, #28]
 80233ca:	68fb      	ldr	r3, [r7, #12]
 80233cc:	681b      	ldr	r3, [r3, #0]
 80233ce:	695b      	ldr	r3, [r3, #20]
 80233d0:	61fb      	str	r3, [r7, #28]
 80233d2:	68fb      	ldr	r3, [r7, #12]
 80233d4:	681b      	ldr	r3, [r3, #0]
 80233d6:	699b      	ldr	r3, [r3, #24]
 80233d8:	61fb      	str	r3, [r7, #28]
 80233da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80233dc:	68fb      	ldr	r3, [r7, #12]
 80233de:	681b      	ldr	r3, [r3, #0]
 80233e0:	681a      	ldr	r2, [r3, #0]
 80233e2:	68fb      	ldr	r3, [r7, #12]
 80233e4:	681b      	ldr	r3, [r3, #0]
 80233e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80233ea:	601a      	str	r2, [r3, #0]
 80233ec:	e1c0      	b.n	8023770 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80233ee:	68fb      	ldr	r3, [r7, #12]
 80233f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80233f2:	2b01      	cmp	r3, #1
 80233f4:	d11e      	bne.n	8023434 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80233f6:	68fb      	ldr	r3, [r7, #12]
 80233f8:	681b      	ldr	r3, [r3, #0]
 80233fa:	681a      	ldr	r2, [r3, #0]
 80233fc:	68fb      	ldr	r3, [r7, #12]
 80233fe:	681b      	ldr	r3, [r3, #0]
 8023400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8023404:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8023406:	b672      	cpsid	i
}
 8023408:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802340a:	2300      	movs	r3, #0
 802340c:	61bb      	str	r3, [r7, #24]
 802340e:	68fb      	ldr	r3, [r7, #12]
 8023410:	681b      	ldr	r3, [r3, #0]
 8023412:	695b      	ldr	r3, [r3, #20]
 8023414:	61bb      	str	r3, [r7, #24]
 8023416:	68fb      	ldr	r3, [r7, #12]
 8023418:	681b      	ldr	r3, [r3, #0]
 802341a:	699b      	ldr	r3, [r3, #24]
 802341c:	61bb      	str	r3, [r7, #24]
 802341e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8023420:	68fb      	ldr	r3, [r7, #12]
 8023422:	681b      	ldr	r3, [r3, #0]
 8023424:	681a      	ldr	r2, [r3, #0]
 8023426:	68fb      	ldr	r3, [r7, #12]
 8023428:	681b      	ldr	r3, [r3, #0]
 802342a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802342e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8023430:	b662      	cpsie	i
}
 8023432:	e035      	b.n	80234a0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8023434:	68fb      	ldr	r3, [r7, #12]
 8023436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023438:	2b02      	cmp	r3, #2
 802343a:	d11e      	bne.n	802347a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 802343c:	68fb      	ldr	r3, [r7, #12]
 802343e:	681b      	ldr	r3, [r3, #0]
 8023440:	681a      	ldr	r2, [r3, #0]
 8023442:	68fb      	ldr	r3, [r7, #12]
 8023444:	681b      	ldr	r3, [r3, #0]
 8023446:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802344a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 802344c:	b672      	cpsid	i
}
 802344e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8023450:	2300      	movs	r3, #0
 8023452:	617b      	str	r3, [r7, #20]
 8023454:	68fb      	ldr	r3, [r7, #12]
 8023456:	681b      	ldr	r3, [r3, #0]
 8023458:	695b      	ldr	r3, [r3, #20]
 802345a:	617b      	str	r3, [r7, #20]
 802345c:	68fb      	ldr	r3, [r7, #12]
 802345e:	681b      	ldr	r3, [r3, #0]
 8023460:	699b      	ldr	r3, [r3, #24]
 8023462:	617b      	str	r3, [r7, #20]
 8023464:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8023466:	68fb      	ldr	r3, [r7, #12]
 8023468:	681b      	ldr	r3, [r3, #0]
 802346a:	681a      	ldr	r2, [r3, #0]
 802346c:	68fb      	ldr	r3, [r7, #12]
 802346e:	681b      	ldr	r3, [r3, #0]
 8023470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8023474:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8023476:	b662      	cpsie	i
}
 8023478:	e012      	b.n	80234a0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802347a:	68fb      	ldr	r3, [r7, #12]
 802347c:	681b      	ldr	r3, [r3, #0]
 802347e:	681a      	ldr	r2, [r3, #0]
 8023480:	68fb      	ldr	r3, [r7, #12]
 8023482:	681b      	ldr	r3, [r3, #0]
 8023484:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8023488:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802348a:	2300      	movs	r3, #0
 802348c:	613b      	str	r3, [r7, #16]
 802348e:	68fb      	ldr	r3, [r7, #12]
 8023490:	681b      	ldr	r3, [r3, #0]
 8023492:	695b      	ldr	r3, [r3, #20]
 8023494:	613b      	str	r3, [r7, #16]
 8023496:	68fb      	ldr	r3, [r7, #12]
 8023498:	681b      	ldr	r3, [r3, #0]
 802349a:	699b      	ldr	r3, [r3, #24]
 802349c:	613b      	str	r3, [r7, #16]
 802349e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80234a0:	e166      	b.n	8023770 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 80234a2:	68fb      	ldr	r3, [r7, #12]
 80234a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80234a6:	2b03      	cmp	r3, #3
 80234a8:	f200 811f 	bhi.w	80236ea <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80234ac:	68fb      	ldr	r3, [r7, #12]
 80234ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80234b0:	2b01      	cmp	r3, #1
 80234b2:	d123      	bne.n	80234fc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80234b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80234b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80234b8:	68f8      	ldr	r0, [r7, #12]
 80234ba:	f000 fc1f 	bl	8023cfc <I2C_WaitOnRXNEFlagUntilTimeout>
 80234be:	4603      	mov	r3, r0
 80234c0:	2b00      	cmp	r3, #0
 80234c2:	d001      	beq.n	80234c8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80234c4:	2301      	movs	r3, #1
 80234c6:	e167      	b.n	8023798 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80234c8:	68fb      	ldr	r3, [r7, #12]
 80234ca:	681b      	ldr	r3, [r3, #0]
 80234cc:	691a      	ldr	r2, [r3, #16]
 80234ce:	68fb      	ldr	r3, [r7, #12]
 80234d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80234d2:	b2d2      	uxtb	r2, r2
 80234d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80234d6:	68fb      	ldr	r3, [r7, #12]
 80234d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80234da:	1c5a      	adds	r2, r3, #1
 80234dc:	68fb      	ldr	r3, [r7, #12]
 80234de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80234e0:	68fb      	ldr	r3, [r7, #12]
 80234e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80234e4:	3b01      	subs	r3, #1
 80234e6:	b29a      	uxth	r2, r3
 80234e8:	68fb      	ldr	r3, [r7, #12]
 80234ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80234ec:	68fb      	ldr	r3, [r7, #12]
 80234ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80234f0:	b29b      	uxth	r3, r3
 80234f2:	3b01      	subs	r3, #1
 80234f4:	b29a      	uxth	r2, r3
 80234f6:	68fb      	ldr	r3, [r7, #12]
 80234f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80234fa:	e139      	b.n	8023770 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80234fc:	68fb      	ldr	r3, [r7, #12]
 80234fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023500:	2b02      	cmp	r3, #2
 8023502:	d152      	bne.n	80235aa <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8023504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023506:	9300      	str	r3, [sp, #0]
 8023508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802350a:	2200      	movs	r2, #0
 802350c:	4906      	ldr	r1, [pc, #24]	; (8023528 <HAL_I2C_Master_Receive+0x23c>)
 802350e:	68f8      	ldr	r0, [r7, #12]
 8023510:	f000 fa9c 	bl	8023a4c <I2C_WaitOnFlagUntilTimeout>
 8023514:	4603      	mov	r3, r0
 8023516:	2b00      	cmp	r3, #0
 8023518:	d008      	beq.n	802352c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 802351a:	2301      	movs	r3, #1
 802351c:	e13c      	b.n	8023798 <HAL_I2C_Master_Receive+0x4ac>
 802351e:	bf00      	nop
 8023520:	00100002 	.word	0x00100002
 8023524:	ffff0000 	.word	0xffff0000
 8023528:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 802352c:	b672      	cpsid	i
}
 802352e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8023530:	68fb      	ldr	r3, [r7, #12]
 8023532:	681b      	ldr	r3, [r3, #0]
 8023534:	681a      	ldr	r2, [r3, #0]
 8023536:	68fb      	ldr	r3, [r7, #12]
 8023538:	681b      	ldr	r3, [r3, #0]
 802353a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802353e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8023540:	68fb      	ldr	r3, [r7, #12]
 8023542:	681b      	ldr	r3, [r3, #0]
 8023544:	691a      	ldr	r2, [r3, #16]
 8023546:	68fb      	ldr	r3, [r7, #12]
 8023548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802354a:	b2d2      	uxtb	r2, r2
 802354c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 802354e:	68fb      	ldr	r3, [r7, #12]
 8023550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023552:	1c5a      	adds	r2, r3, #1
 8023554:	68fb      	ldr	r3, [r7, #12]
 8023556:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8023558:	68fb      	ldr	r3, [r7, #12]
 802355a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802355c:	3b01      	subs	r3, #1
 802355e:	b29a      	uxth	r2, r3
 8023560:	68fb      	ldr	r3, [r7, #12]
 8023562:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8023564:	68fb      	ldr	r3, [r7, #12]
 8023566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023568:	b29b      	uxth	r3, r3
 802356a:	3b01      	subs	r3, #1
 802356c:	b29a      	uxth	r2, r3
 802356e:	68fb      	ldr	r3, [r7, #12]
 8023570:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8023572:	b662      	cpsie	i
}
 8023574:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8023576:	68fb      	ldr	r3, [r7, #12]
 8023578:	681b      	ldr	r3, [r3, #0]
 802357a:	691a      	ldr	r2, [r3, #16]
 802357c:	68fb      	ldr	r3, [r7, #12]
 802357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023580:	b2d2      	uxtb	r2, r2
 8023582:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8023584:	68fb      	ldr	r3, [r7, #12]
 8023586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023588:	1c5a      	adds	r2, r3, #1
 802358a:	68fb      	ldr	r3, [r7, #12]
 802358c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 802358e:	68fb      	ldr	r3, [r7, #12]
 8023590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023592:	3b01      	subs	r3, #1
 8023594:	b29a      	uxth	r2, r3
 8023596:	68fb      	ldr	r3, [r7, #12]
 8023598:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 802359a:	68fb      	ldr	r3, [r7, #12]
 802359c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802359e:	b29b      	uxth	r3, r3
 80235a0:	3b01      	subs	r3, #1
 80235a2:	b29a      	uxth	r2, r3
 80235a4:	68fb      	ldr	r3, [r7, #12]
 80235a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80235a8:	e0e2      	b.n	8023770 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80235aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80235ac:	9300      	str	r3, [sp, #0]
 80235ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80235b0:	2200      	movs	r2, #0
 80235b2:	497b      	ldr	r1, [pc, #492]	; (80237a0 <HAL_I2C_Master_Receive+0x4b4>)
 80235b4:	68f8      	ldr	r0, [r7, #12]
 80235b6:	f000 fa49 	bl	8023a4c <I2C_WaitOnFlagUntilTimeout>
 80235ba:	4603      	mov	r3, r0
 80235bc:	2b00      	cmp	r3, #0
 80235be:	d001      	beq.n	80235c4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80235c0:	2301      	movs	r3, #1
 80235c2:	e0e9      	b.n	8023798 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80235c4:	68fb      	ldr	r3, [r7, #12]
 80235c6:	681b      	ldr	r3, [r3, #0]
 80235c8:	681a      	ldr	r2, [r3, #0]
 80235ca:	68fb      	ldr	r3, [r7, #12]
 80235cc:	681b      	ldr	r3, [r3, #0]
 80235ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80235d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80235d4:	b672      	cpsid	i
}
 80235d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80235d8:	68fb      	ldr	r3, [r7, #12]
 80235da:	681b      	ldr	r3, [r3, #0]
 80235dc:	691a      	ldr	r2, [r3, #16]
 80235de:	68fb      	ldr	r3, [r7, #12]
 80235e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80235e2:	b2d2      	uxtb	r2, r2
 80235e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80235e6:	68fb      	ldr	r3, [r7, #12]
 80235e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80235ea:	1c5a      	adds	r2, r3, #1
 80235ec:	68fb      	ldr	r3, [r7, #12]
 80235ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80235f0:	68fb      	ldr	r3, [r7, #12]
 80235f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80235f4:	3b01      	subs	r3, #1
 80235f6:	b29a      	uxth	r2, r3
 80235f8:	68fb      	ldr	r3, [r7, #12]
 80235fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80235fc:	68fb      	ldr	r3, [r7, #12]
 80235fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023600:	b29b      	uxth	r3, r3
 8023602:	3b01      	subs	r3, #1
 8023604:	b29a      	uxth	r2, r3
 8023606:	68fb      	ldr	r3, [r7, #12]
 8023608:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 802360a:	4b66      	ldr	r3, [pc, #408]	; (80237a4 <HAL_I2C_Master_Receive+0x4b8>)
 802360c:	681b      	ldr	r3, [r3, #0]
 802360e:	08db      	lsrs	r3, r3, #3
 8023610:	4a65      	ldr	r2, [pc, #404]	; (80237a8 <HAL_I2C_Master_Receive+0x4bc>)
 8023612:	fba2 2303 	umull	r2, r3, r2, r3
 8023616:	0a1a      	lsrs	r2, r3, #8
 8023618:	4613      	mov	r3, r2
 802361a:	009b      	lsls	r3, r3, #2
 802361c:	4413      	add	r3, r2
 802361e:	00da      	lsls	r2, r3, #3
 8023620:	1ad3      	subs	r3, r2, r3
 8023622:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8023624:	6a3b      	ldr	r3, [r7, #32]
 8023626:	3b01      	subs	r3, #1
 8023628:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 802362a:	6a3b      	ldr	r3, [r7, #32]
 802362c:	2b00      	cmp	r3, #0
 802362e:	d118      	bne.n	8023662 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8023630:	68fb      	ldr	r3, [r7, #12]
 8023632:	2200      	movs	r2, #0
 8023634:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8023636:	68fb      	ldr	r3, [r7, #12]
 8023638:	2220      	movs	r2, #32
 802363a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 802363e:	68fb      	ldr	r3, [r7, #12]
 8023640:	2200      	movs	r2, #0
 8023642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8023646:	68fb      	ldr	r3, [r7, #12]
 8023648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802364a:	f043 0220 	orr.w	r2, r3, #32
 802364e:	68fb      	ldr	r3, [r7, #12]
 8023650:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8023652:	b662      	cpsie	i
}
 8023654:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8023656:	68fb      	ldr	r3, [r7, #12]
 8023658:	2200      	movs	r2, #0
 802365a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 802365e:	2301      	movs	r3, #1
 8023660:	e09a      	b.n	8023798 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8023662:	68fb      	ldr	r3, [r7, #12]
 8023664:	681b      	ldr	r3, [r3, #0]
 8023666:	695b      	ldr	r3, [r3, #20]
 8023668:	f003 0304 	and.w	r3, r3, #4
 802366c:	2b04      	cmp	r3, #4
 802366e:	d1d9      	bne.n	8023624 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8023670:	68fb      	ldr	r3, [r7, #12]
 8023672:	681b      	ldr	r3, [r3, #0]
 8023674:	681a      	ldr	r2, [r3, #0]
 8023676:	68fb      	ldr	r3, [r7, #12]
 8023678:	681b      	ldr	r3, [r3, #0]
 802367a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802367e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8023680:	68fb      	ldr	r3, [r7, #12]
 8023682:	681b      	ldr	r3, [r3, #0]
 8023684:	691a      	ldr	r2, [r3, #16]
 8023686:	68fb      	ldr	r3, [r7, #12]
 8023688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802368a:	b2d2      	uxtb	r2, r2
 802368c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 802368e:	68fb      	ldr	r3, [r7, #12]
 8023690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023692:	1c5a      	adds	r2, r3, #1
 8023694:	68fb      	ldr	r3, [r7, #12]
 8023696:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8023698:	68fb      	ldr	r3, [r7, #12]
 802369a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802369c:	3b01      	subs	r3, #1
 802369e:	b29a      	uxth	r2, r3
 80236a0:	68fb      	ldr	r3, [r7, #12]
 80236a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80236a4:	68fb      	ldr	r3, [r7, #12]
 80236a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80236a8:	b29b      	uxth	r3, r3
 80236aa:	3b01      	subs	r3, #1
 80236ac:	b29a      	uxth	r2, r3
 80236ae:	68fb      	ldr	r3, [r7, #12]
 80236b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80236b2:	b662      	cpsie	i
}
 80236b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80236b6:	68fb      	ldr	r3, [r7, #12]
 80236b8:	681b      	ldr	r3, [r3, #0]
 80236ba:	691a      	ldr	r2, [r3, #16]
 80236bc:	68fb      	ldr	r3, [r7, #12]
 80236be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80236c0:	b2d2      	uxtb	r2, r2
 80236c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80236c4:	68fb      	ldr	r3, [r7, #12]
 80236c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80236c8:	1c5a      	adds	r2, r3, #1
 80236ca:	68fb      	ldr	r3, [r7, #12]
 80236cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80236ce:	68fb      	ldr	r3, [r7, #12]
 80236d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80236d2:	3b01      	subs	r3, #1
 80236d4:	b29a      	uxth	r2, r3
 80236d6:	68fb      	ldr	r3, [r7, #12]
 80236d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80236da:	68fb      	ldr	r3, [r7, #12]
 80236dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80236de:	b29b      	uxth	r3, r3
 80236e0:	3b01      	subs	r3, #1
 80236e2:	b29a      	uxth	r2, r3
 80236e4:	68fb      	ldr	r3, [r7, #12]
 80236e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80236e8:	e042      	b.n	8023770 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80236ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80236ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80236ee:	68f8      	ldr	r0, [r7, #12]
 80236f0:	f000 fb04 	bl	8023cfc <I2C_WaitOnRXNEFlagUntilTimeout>
 80236f4:	4603      	mov	r3, r0
 80236f6:	2b00      	cmp	r3, #0
 80236f8:	d001      	beq.n	80236fe <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80236fa:	2301      	movs	r3, #1
 80236fc:	e04c      	b.n	8023798 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80236fe:	68fb      	ldr	r3, [r7, #12]
 8023700:	681b      	ldr	r3, [r3, #0]
 8023702:	691a      	ldr	r2, [r3, #16]
 8023704:	68fb      	ldr	r3, [r7, #12]
 8023706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023708:	b2d2      	uxtb	r2, r2
 802370a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 802370c:	68fb      	ldr	r3, [r7, #12]
 802370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023710:	1c5a      	adds	r2, r3, #1
 8023712:	68fb      	ldr	r3, [r7, #12]
 8023714:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8023716:	68fb      	ldr	r3, [r7, #12]
 8023718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802371a:	3b01      	subs	r3, #1
 802371c:	b29a      	uxth	r2, r3
 802371e:	68fb      	ldr	r3, [r7, #12]
 8023720:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8023722:	68fb      	ldr	r3, [r7, #12]
 8023724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023726:	b29b      	uxth	r3, r3
 8023728:	3b01      	subs	r3, #1
 802372a:	b29a      	uxth	r2, r3
 802372c:	68fb      	ldr	r3, [r7, #12]
 802372e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8023730:	68fb      	ldr	r3, [r7, #12]
 8023732:	681b      	ldr	r3, [r3, #0]
 8023734:	695b      	ldr	r3, [r3, #20]
 8023736:	f003 0304 	and.w	r3, r3, #4
 802373a:	2b04      	cmp	r3, #4
 802373c:	d118      	bne.n	8023770 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802373e:	68fb      	ldr	r3, [r7, #12]
 8023740:	681b      	ldr	r3, [r3, #0]
 8023742:	691a      	ldr	r2, [r3, #16]
 8023744:	68fb      	ldr	r3, [r7, #12]
 8023746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023748:	b2d2      	uxtb	r2, r2
 802374a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 802374c:	68fb      	ldr	r3, [r7, #12]
 802374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023750:	1c5a      	adds	r2, r3, #1
 8023752:	68fb      	ldr	r3, [r7, #12]
 8023754:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8023756:	68fb      	ldr	r3, [r7, #12]
 8023758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802375a:	3b01      	subs	r3, #1
 802375c:	b29a      	uxth	r2, r3
 802375e:	68fb      	ldr	r3, [r7, #12]
 8023760:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8023762:	68fb      	ldr	r3, [r7, #12]
 8023764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023766:	b29b      	uxth	r3, r3
 8023768:	3b01      	subs	r3, #1
 802376a:	b29a      	uxth	r2, r3
 802376c:	68fb      	ldr	r3, [r7, #12]
 802376e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8023770:	68fb      	ldr	r3, [r7, #12]
 8023772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023774:	2b00      	cmp	r3, #0
 8023776:	f47f ae94 	bne.w	80234a2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 802377a:	68fb      	ldr	r3, [r7, #12]
 802377c:	2220      	movs	r2, #32
 802377e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8023782:	68fb      	ldr	r3, [r7, #12]
 8023784:	2200      	movs	r2, #0
 8023786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802378a:	68fb      	ldr	r3, [r7, #12]
 802378c:	2200      	movs	r2, #0
 802378e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8023792:	2300      	movs	r3, #0
 8023794:	e000      	b.n	8023798 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8023796:	2302      	movs	r3, #2
  }
}
 8023798:	4618      	mov	r0, r3
 802379a:	3728      	adds	r7, #40	; 0x28
 802379c:	46bd      	mov	sp, r7
 802379e:	bd80      	pop	{r7, pc}
 80237a0:	00010004 	.word	0x00010004
 80237a4:	200001f8 	.word	0x200001f8
 80237a8:	14f8b589 	.word	0x14f8b589

080237ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80237ac:	b580      	push	{r7, lr}
 80237ae:	b088      	sub	sp, #32
 80237b0:	af02      	add	r7, sp, #8
 80237b2:	60f8      	str	r0, [r7, #12]
 80237b4:	607a      	str	r2, [r7, #4]
 80237b6:	603b      	str	r3, [r7, #0]
 80237b8:	460b      	mov	r3, r1
 80237ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80237bc:	68fb      	ldr	r3, [r7, #12]
 80237be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80237c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80237c2:	697b      	ldr	r3, [r7, #20]
 80237c4:	2b08      	cmp	r3, #8
 80237c6:	d006      	beq.n	80237d6 <I2C_MasterRequestWrite+0x2a>
 80237c8:	697b      	ldr	r3, [r7, #20]
 80237ca:	2b01      	cmp	r3, #1
 80237cc:	d003      	beq.n	80237d6 <I2C_MasterRequestWrite+0x2a>
 80237ce:	697b      	ldr	r3, [r7, #20]
 80237d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80237d4:	d108      	bne.n	80237e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80237d6:	68fb      	ldr	r3, [r7, #12]
 80237d8:	681b      	ldr	r3, [r3, #0]
 80237da:	681a      	ldr	r2, [r3, #0]
 80237dc:	68fb      	ldr	r3, [r7, #12]
 80237de:	681b      	ldr	r3, [r3, #0]
 80237e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80237e4:	601a      	str	r2, [r3, #0]
 80237e6:	e00b      	b.n	8023800 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80237e8:	68fb      	ldr	r3, [r7, #12]
 80237ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80237ec:	2b12      	cmp	r3, #18
 80237ee:	d107      	bne.n	8023800 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80237f0:	68fb      	ldr	r3, [r7, #12]
 80237f2:	681b      	ldr	r3, [r3, #0]
 80237f4:	681a      	ldr	r2, [r3, #0]
 80237f6:	68fb      	ldr	r3, [r7, #12]
 80237f8:	681b      	ldr	r3, [r3, #0]
 80237fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80237fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8023800:	683b      	ldr	r3, [r7, #0]
 8023802:	9300      	str	r3, [sp, #0]
 8023804:	687b      	ldr	r3, [r7, #4]
 8023806:	2200      	movs	r2, #0
 8023808:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 802380c:	68f8      	ldr	r0, [r7, #12]
 802380e:	f000 f91d 	bl	8023a4c <I2C_WaitOnFlagUntilTimeout>
 8023812:	4603      	mov	r3, r0
 8023814:	2b00      	cmp	r3, #0
 8023816:	d00d      	beq.n	8023834 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8023818:	68fb      	ldr	r3, [r7, #12]
 802381a:	681b      	ldr	r3, [r3, #0]
 802381c:	681b      	ldr	r3, [r3, #0]
 802381e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8023826:	d103      	bne.n	8023830 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8023828:	68fb      	ldr	r3, [r7, #12]
 802382a:	f44f 7200 	mov.w	r2, #512	; 0x200
 802382e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8023830:	2303      	movs	r3, #3
 8023832:	e035      	b.n	80238a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8023834:	68fb      	ldr	r3, [r7, #12]
 8023836:	691b      	ldr	r3, [r3, #16]
 8023838:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802383c:	d108      	bne.n	8023850 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 802383e:	897b      	ldrh	r3, [r7, #10]
 8023840:	b2db      	uxtb	r3, r3
 8023842:	461a      	mov	r2, r3
 8023844:	68fb      	ldr	r3, [r7, #12]
 8023846:	681b      	ldr	r3, [r3, #0]
 8023848:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 802384c:	611a      	str	r2, [r3, #16]
 802384e:	e01b      	b.n	8023888 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8023850:	897b      	ldrh	r3, [r7, #10]
 8023852:	11db      	asrs	r3, r3, #7
 8023854:	b2db      	uxtb	r3, r3
 8023856:	f003 0306 	and.w	r3, r3, #6
 802385a:	b2db      	uxtb	r3, r3
 802385c:	f063 030f 	orn	r3, r3, #15
 8023860:	b2da      	uxtb	r2, r3
 8023862:	68fb      	ldr	r3, [r7, #12]
 8023864:	681b      	ldr	r3, [r3, #0]
 8023866:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8023868:	683b      	ldr	r3, [r7, #0]
 802386a:	687a      	ldr	r2, [r7, #4]
 802386c:	490e      	ldr	r1, [pc, #56]	; (80238a8 <I2C_MasterRequestWrite+0xfc>)
 802386e:	68f8      	ldr	r0, [r7, #12]
 8023870:	f000 f943 	bl	8023afa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8023874:	4603      	mov	r3, r0
 8023876:	2b00      	cmp	r3, #0
 8023878:	d001      	beq.n	802387e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 802387a:	2301      	movs	r3, #1
 802387c:	e010      	b.n	80238a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 802387e:	897b      	ldrh	r3, [r7, #10]
 8023880:	b2da      	uxtb	r2, r3
 8023882:	68fb      	ldr	r3, [r7, #12]
 8023884:	681b      	ldr	r3, [r3, #0]
 8023886:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8023888:	683b      	ldr	r3, [r7, #0]
 802388a:	687a      	ldr	r2, [r7, #4]
 802388c:	4907      	ldr	r1, [pc, #28]	; (80238ac <I2C_MasterRequestWrite+0x100>)
 802388e:	68f8      	ldr	r0, [r7, #12]
 8023890:	f000 f933 	bl	8023afa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8023894:	4603      	mov	r3, r0
 8023896:	2b00      	cmp	r3, #0
 8023898:	d001      	beq.n	802389e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 802389a:	2301      	movs	r3, #1
 802389c:	e000      	b.n	80238a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 802389e:	2300      	movs	r3, #0
}
 80238a0:	4618      	mov	r0, r3
 80238a2:	3718      	adds	r7, #24
 80238a4:	46bd      	mov	sp, r7
 80238a6:	bd80      	pop	{r7, pc}
 80238a8:	00010008 	.word	0x00010008
 80238ac:	00010002 	.word	0x00010002

080238b0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80238b0:	b580      	push	{r7, lr}
 80238b2:	b088      	sub	sp, #32
 80238b4:	af02      	add	r7, sp, #8
 80238b6:	60f8      	str	r0, [r7, #12]
 80238b8:	607a      	str	r2, [r7, #4]
 80238ba:	603b      	str	r3, [r7, #0]
 80238bc:	460b      	mov	r3, r1
 80238be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80238c0:	68fb      	ldr	r3, [r7, #12]
 80238c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80238c4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80238c6:	68fb      	ldr	r3, [r7, #12]
 80238c8:	681b      	ldr	r3, [r3, #0]
 80238ca:	681a      	ldr	r2, [r3, #0]
 80238cc:	68fb      	ldr	r3, [r7, #12]
 80238ce:	681b      	ldr	r3, [r3, #0]
 80238d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80238d4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80238d6:	697b      	ldr	r3, [r7, #20]
 80238d8:	2b08      	cmp	r3, #8
 80238da:	d006      	beq.n	80238ea <I2C_MasterRequestRead+0x3a>
 80238dc:	697b      	ldr	r3, [r7, #20]
 80238de:	2b01      	cmp	r3, #1
 80238e0:	d003      	beq.n	80238ea <I2C_MasterRequestRead+0x3a>
 80238e2:	697b      	ldr	r3, [r7, #20]
 80238e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80238e8:	d108      	bne.n	80238fc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80238ea:	68fb      	ldr	r3, [r7, #12]
 80238ec:	681b      	ldr	r3, [r3, #0]
 80238ee:	681a      	ldr	r2, [r3, #0]
 80238f0:	68fb      	ldr	r3, [r7, #12]
 80238f2:	681b      	ldr	r3, [r3, #0]
 80238f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80238f8:	601a      	str	r2, [r3, #0]
 80238fa:	e00b      	b.n	8023914 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80238fc:	68fb      	ldr	r3, [r7, #12]
 80238fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023900:	2b11      	cmp	r3, #17
 8023902:	d107      	bne.n	8023914 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8023904:	68fb      	ldr	r3, [r7, #12]
 8023906:	681b      	ldr	r3, [r3, #0]
 8023908:	681a      	ldr	r2, [r3, #0]
 802390a:	68fb      	ldr	r3, [r7, #12]
 802390c:	681b      	ldr	r3, [r3, #0]
 802390e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8023912:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8023914:	683b      	ldr	r3, [r7, #0]
 8023916:	9300      	str	r3, [sp, #0]
 8023918:	687b      	ldr	r3, [r7, #4]
 802391a:	2200      	movs	r2, #0
 802391c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8023920:	68f8      	ldr	r0, [r7, #12]
 8023922:	f000 f893 	bl	8023a4c <I2C_WaitOnFlagUntilTimeout>
 8023926:	4603      	mov	r3, r0
 8023928:	2b00      	cmp	r3, #0
 802392a:	d00d      	beq.n	8023948 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 802392c:	68fb      	ldr	r3, [r7, #12]
 802392e:	681b      	ldr	r3, [r3, #0]
 8023930:	681b      	ldr	r3, [r3, #0]
 8023932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802393a:	d103      	bne.n	8023944 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 802393c:	68fb      	ldr	r3, [r7, #12]
 802393e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8023942:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8023944:	2303      	movs	r3, #3
 8023946:	e079      	b.n	8023a3c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8023948:	68fb      	ldr	r3, [r7, #12]
 802394a:	691b      	ldr	r3, [r3, #16]
 802394c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8023950:	d108      	bne.n	8023964 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8023952:	897b      	ldrh	r3, [r7, #10]
 8023954:	b2db      	uxtb	r3, r3
 8023956:	f043 0301 	orr.w	r3, r3, #1
 802395a:	b2da      	uxtb	r2, r3
 802395c:	68fb      	ldr	r3, [r7, #12]
 802395e:	681b      	ldr	r3, [r3, #0]
 8023960:	611a      	str	r2, [r3, #16]
 8023962:	e05f      	b.n	8023a24 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8023964:	897b      	ldrh	r3, [r7, #10]
 8023966:	11db      	asrs	r3, r3, #7
 8023968:	b2db      	uxtb	r3, r3
 802396a:	f003 0306 	and.w	r3, r3, #6
 802396e:	b2db      	uxtb	r3, r3
 8023970:	f063 030f 	orn	r3, r3, #15
 8023974:	b2da      	uxtb	r2, r3
 8023976:	68fb      	ldr	r3, [r7, #12]
 8023978:	681b      	ldr	r3, [r3, #0]
 802397a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 802397c:	683b      	ldr	r3, [r7, #0]
 802397e:	687a      	ldr	r2, [r7, #4]
 8023980:	4930      	ldr	r1, [pc, #192]	; (8023a44 <I2C_MasterRequestRead+0x194>)
 8023982:	68f8      	ldr	r0, [r7, #12]
 8023984:	f000 f8b9 	bl	8023afa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8023988:	4603      	mov	r3, r0
 802398a:	2b00      	cmp	r3, #0
 802398c:	d001      	beq.n	8023992 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 802398e:	2301      	movs	r3, #1
 8023990:	e054      	b.n	8023a3c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8023992:	897b      	ldrh	r3, [r7, #10]
 8023994:	b2da      	uxtb	r2, r3
 8023996:	68fb      	ldr	r3, [r7, #12]
 8023998:	681b      	ldr	r3, [r3, #0]
 802399a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 802399c:	683b      	ldr	r3, [r7, #0]
 802399e:	687a      	ldr	r2, [r7, #4]
 80239a0:	4929      	ldr	r1, [pc, #164]	; (8023a48 <I2C_MasterRequestRead+0x198>)
 80239a2:	68f8      	ldr	r0, [r7, #12]
 80239a4:	f000 f8a9 	bl	8023afa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80239a8:	4603      	mov	r3, r0
 80239aa:	2b00      	cmp	r3, #0
 80239ac:	d001      	beq.n	80239b2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80239ae:	2301      	movs	r3, #1
 80239b0:	e044      	b.n	8023a3c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80239b2:	2300      	movs	r3, #0
 80239b4:	613b      	str	r3, [r7, #16]
 80239b6:	68fb      	ldr	r3, [r7, #12]
 80239b8:	681b      	ldr	r3, [r3, #0]
 80239ba:	695b      	ldr	r3, [r3, #20]
 80239bc:	613b      	str	r3, [r7, #16]
 80239be:	68fb      	ldr	r3, [r7, #12]
 80239c0:	681b      	ldr	r3, [r3, #0]
 80239c2:	699b      	ldr	r3, [r3, #24]
 80239c4:	613b      	str	r3, [r7, #16]
 80239c6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80239c8:	68fb      	ldr	r3, [r7, #12]
 80239ca:	681b      	ldr	r3, [r3, #0]
 80239cc:	681a      	ldr	r2, [r3, #0]
 80239ce:	68fb      	ldr	r3, [r7, #12]
 80239d0:	681b      	ldr	r3, [r3, #0]
 80239d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80239d6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80239d8:	683b      	ldr	r3, [r7, #0]
 80239da:	9300      	str	r3, [sp, #0]
 80239dc:	687b      	ldr	r3, [r7, #4]
 80239de:	2200      	movs	r2, #0
 80239e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80239e4:	68f8      	ldr	r0, [r7, #12]
 80239e6:	f000 f831 	bl	8023a4c <I2C_WaitOnFlagUntilTimeout>
 80239ea:	4603      	mov	r3, r0
 80239ec:	2b00      	cmp	r3, #0
 80239ee:	d00d      	beq.n	8023a0c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80239f0:	68fb      	ldr	r3, [r7, #12]
 80239f2:	681b      	ldr	r3, [r3, #0]
 80239f4:	681b      	ldr	r3, [r3, #0]
 80239f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80239fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80239fe:	d103      	bne.n	8023a08 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8023a00:	68fb      	ldr	r3, [r7, #12]
 8023a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8023a06:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8023a08:	2303      	movs	r3, #3
 8023a0a:	e017      	b.n	8023a3c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8023a0c:	897b      	ldrh	r3, [r7, #10]
 8023a0e:	11db      	asrs	r3, r3, #7
 8023a10:	b2db      	uxtb	r3, r3
 8023a12:	f003 0306 	and.w	r3, r3, #6
 8023a16:	b2db      	uxtb	r3, r3
 8023a18:	f063 030e 	orn	r3, r3, #14
 8023a1c:	b2da      	uxtb	r2, r3
 8023a1e:	68fb      	ldr	r3, [r7, #12]
 8023a20:	681b      	ldr	r3, [r3, #0]
 8023a22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8023a24:	683b      	ldr	r3, [r7, #0]
 8023a26:	687a      	ldr	r2, [r7, #4]
 8023a28:	4907      	ldr	r1, [pc, #28]	; (8023a48 <I2C_MasterRequestRead+0x198>)
 8023a2a:	68f8      	ldr	r0, [r7, #12]
 8023a2c:	f000 f865 	bl	8023afa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8023a30:	4603      	mov	r3, r0
 8023a32:	2b00      	cmp	r3, #0
 8023a34:	d001      	beq.n	8023a3a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8023a36:	2301      	movs	r3, #1
 8023a38:	e000      	b.n	8023a3c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8023a3a:	2300      	movs	r3, #0
}
 8023a3c:	4618      	mov	r0, r3
 8023a3e:	3718      	adds	r7, #24
 8023a40:	46bd      	mov	sp, r7
 8023a42:	bd80      	pop	{r7, pc}
 8023a44:	00010008 	.word	0x00010008
 8023a48:	00010002 	.word	0x00010002

08023a4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8023a4c:	b580      	push	{r7, lr}
 8023a4e:	b084      	sub	sp, #16
 8023a50:	af00      	add	r7, sp, #0
 8023a52:	60f8      	str	r0, [r7, #12]
 8023a54:	60b9      	str	r1, [r7, #8]
 8023a56:	603b      	str	r3, [r7, #0]
 8023a58:	4613      	mov	r3, r2
 8023a5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8023a5c:	e025      	b.n	8023aaa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8023a5e:	683b      	ldr	r3, [r7, #0]
 8023a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023a64:	d021      	beq.n	8023aaa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8023a66:	f7fe fc61 	bl	802232c <HAL_GetTick>
 8023a6a:	4602      	mov	r2, r0
 8023a6c:	69bb      	ldr	r3, [r7, #24]
 8023a6e:	1ad3      	subs	r3, r2, r3
 8023a70:	683a      	ldr	r2, [r7, #0]
 8023a72:	429a      	cmp	r2, r3
 8023a74:	d302      	bcc.n	8023a7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8023a76:	683b      	ldr	r3, [r7, #0]
 8023a78:	2b00      	cmp	r3, #0
 8023a7a:	d116      	bne.n	8023aaa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8023a7c:	68fb      	ldr	r3, [r7, #12]
 8023a7e:	2200      	movs	r2, #0
 8023a80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8023a82:	68fb      	ldr	r3, [r7, #12]
 8023a84:	2220      	movs	r2, #32
 8023a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8023a8a:	68fb      	ldr	r3, [r7, #12]
 8023a8c:	2200      	movs	r2, #0
 8023a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8023a92:	68fb      	ldr	r3, [r7, #12]
 8023a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023a96:	f043 0220 	orr.w	r2, r3, #32
 8023a9a:	68fb      	ldr	r3, [r7, #12]
 8023a9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8023a9e:	68fb      	ldr	r3, [r7, #12]
 8023aa0:	2200      	movs	r2, #0
 8023aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8023aa6:	2301      	movs	r3, #1
 8023aa8:	e023      	b.n	8023af2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8023aaa:	68bb      	ldr	r3, [r7, #8]
 8023aac:	0c1b      	lsrs	r3, r3, #16
 8023aae:	b2db      	uxtb	r3, r3
 8023ab0:	2b01      	cmp	r3, #1
 8023ab2:	d10d      	bne.n	8023ad0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8023ab4:	68fb      	ldr	r3, [r7, #12]
 8023ab6:	681b      	ldr	r3, [r3, #0]
 8023ab8:	695b      	ldr	r3, [r3, #20]
 8023aba:	43da      	mvns	r2, r3
 8023abc:	68bb      	ldr	r3, [r7, #8]
 8023abe:	4013      	ands	r3, r2
 8023ac0:	b29b      	uxth	r3, r3
 8023ac2:	2b00      	cmp	r3, #0
 8023ac4:	bf0c      	ite	eq
 8023ac6:	2301      	moveq	r3, #1
 8023ac8:	2300      	movne	r3, #0
 8023aca:	b2db      	uxtb	r3, r3
 8023acc:	461a      	mov	r2, r3
 8023ace:	e00c      	b.n	8023aea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8023ad0:	68fb      	ldr	r3, [r7, #12]
 8023ad2:	681b      	ldr	r3, [r3, #0]
 8023ad4:	699b      	ldr	r3, [r3, #24]
 8023ad6:	43da      	mvns	r2, r3
 8023ad8:	68bb      	ldr	r3, [r7, #8]
 8023ada:	4013      	ands	r3, r2
 8023adc:	b29b      	uxth	r3, r3
 8023ade:	2b00      	cmp	r3, #0
 8023ae0:	bf0c      	ite	eq
 8023ae2:	2301      	moveq	r3, #1
 8023ae4:	2300      	movne	r3, #0
 8023ae6:	b2db      	uxtb	r3, r3
 8023ae8:	461a      	mov	r2, r3
 8023aea:	79fb      	ldrb	r3, [r7, #7]
 8023aec:	429a      	cmp	r2, r3
 8023aee:	d0b6      	beq.n	8023a5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8023af0:	2300      	movs	r3, #0
}
 8023af2:	4618      	mov	r0, r3
 8023af4:	3710      	adds	r7, #16
 8023af6:	46bd      	mov	sp, r7
 8023af8:	bd80      	pop	{r7, pc}

08023afa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8023afa:	b580      	push	{r7, lr}
 8023afc:	b084      	sub	sp, #16
 8023afe:	af00      	add	r7, sp, #0
 8023b00:	60f8      	str	r0, [r7, #12]
 8023b02:	60b9      	str	r1, [r7, #8]
 8023b04:	607a      	str	r2, [r7, #4]
 8023b06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8023b08:	e051      	b.n	8023bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8023b0a:	68fb      	ldr	r3, [r7, #12]
 8023b0c:	681b      	ldr	r3, [r3, #0]
 8023b0e:	695b      	ldr	r3, [r3, #20]
 8023b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8023b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8023b18:	d123      	bne.n	8023b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8023b1a:	68fb      	ldr	r3, [r7, #12]
 8023b1c:	681b      	ldr	r3, [r3, #0]
 8023b1e:	681a      	ldr	r2, [r3, #0]
 8023b20:	68fb      	ldr	r3, [r7, #12]
 8023b22:	681b      	ldr	r3, [r3, #0]
 8023b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8023b28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8023b2a:	68fb      	ldr	r3, [r7, #12]
 8023b2c:	681b      	ldr	r3, [r3, #0]
 8023b2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8023b32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8023b34:	68fb      	ldr	r3, [r7, #12]
 8023b36:	2200      	movs	r2, #0
 8023b38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8023b3a:	68fb      	ldr	r3, [r7, #12]
 8023b3c:	2220      	movs	r2, #32
 8023b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8023b42:	68fb      	ldr	r3, [r7, #12]
 8023b44:	2200      	movs	r2, #0
 8023b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8023b4a:	68fb      	ldr	r3, [r7, #12]
 8023b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023b4e:	f043 0204 	orr.w	r2, r3, #4
 8023b52:	68fb      	ldr	r3, [r7, #12]
 8023b54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8023b56:	68fb      	ldr	r3, [r7, #12]
 8023b58:	2200      	movs	r2, #0
 8023b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8023b5e:	2301      	movs	r3, #1
 8023b60:	e046      	b.n	8023bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8023b62:	687b      	ldr	r3, [r7, #4]
 8023b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023b68:	d021      	beq.n	8023bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8023b6a:	f7fe fbdf 	bl	802232c <HAL_GetTick>
 8023b6e:	4602      	mov	r2, r0
 8023b70:	683b      	ldr	r3, [r7, #0]
 8023b72:	1ad3      	subs	r3, r2, r3
 8023b74:	687a      	ldr	r2, [r7, #4]
 8023b76:	429a      	cmp	r2, r3
 8023b78:	d302      	bcc.n	8023b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8023b7a:	687b      	ldr	r3, [r7, #4]
 8023b7c:	2b00      	cmp	r3, #0
 8023b7e:	d116      	bne.n	8023bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8023b80:	68fb      	ldr	r3, [r7, #12]
 8023b82:	2200      	movs	r2, #0
 8023b84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8023b86:	68fb      	ldr	r3, [r7, #12]
 8023b88:	2220      	movs	r2, #32
 8023b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8023b8e:	68fb      	ldr	r3, [r7, #12]
 8023b90:	2200      	movs	r2, #0
 8023b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8023b96:	68fb      	ldr	r3, [r7, #12]
 8023b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023b9a:	f043 0220 	orr.w	r2, r3, #32
 8023b9e:	68fb      	ldr	r3, [r7, #12]
 8023ba0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8023ba2:	68fb      	ldr	r3, [r7, #12]
 8023ba4:	2200      	movs	r2, #0
 8023ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8023baa:	2301      	movs	r3, #1
 8023bac:	e020      	b.n	8023bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8023bae:	68bb      	ldr	r3, [r7, #8]
 8023bb0:	0c1b      	lsrs	r3, r3, #16
 8023bb2:	b2db      	uxtb	r3, r3
 8023bb4:	2b01      	cmp	r3, #1
 8023bb6:	d10c      	bne.n	8023bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8023bb8:	68fb      	ldr	r3, [r7, #12]
 8023bba:	681b      	ldr	r3, [r3, #0]
 8023bbc:	695b      	ldr	r3, [r3, #20]
 8023bbe:	43da      	mvns	r2, r3
 8023bc0:	68bb      	ldr	r3, [r7, #8]
 8023bc2:	4013      	ands	r3, r2
 8023bc4:	b29b      	uxth	r3, r3
 8023bc6:	2b00      	cmp	r3, #0
 8023bc8:	bf14      	ite	ne
 8023bca:	2301      	movne	r3, #1
 8023bcc:	2300      	moveq	r3, #0
 8023bce:	b2db      	uxtb	r3, r3
 8023bd0:	e00b      	b.n	8023bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8023bd2:	68fb      	ldr	r3, [r7, #12]
 8023bd4:	681b      	ldr	r3, [r3, #0]
 8023bd6:	699b      	ldr	r3, [r3, #24]
 8023bd8:	43da      	mvns	r2, r3
 8023bda:	68bb      	ldr	r3, [r7, #8]
 8023bdc:	4013      	ands	r3, r2
 8023bde:	b29b      	uxth	r3, r3
 8023be0:	2b00      	cmp	r3, #0
 8023be2:	bf14      	ite	ne
 8023be4:	2301      	movne	r3, #1
 8023be6:	2300      	moveq	r3, #0
 8023be8:	b2db      	uxtb	r3, r3
 8023bea:	2b00      	cmp	r3, #0
 8023bec:	d18d      	bne.n	8023b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8023bee:	2300      	movs	r3, #0
}
 8023bf0:	4618      	mov	r0, r3
 8023bf2:	3710      	adds	r7, #16
 8023bf4:	46bd      	mov	sp, r7
 8023bf6:	bd80      	pop	{r7, pc}

08023bf8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8023bf8:	b580      	push	{r7, lr}
 8023bfa:	b084      	sub	sp, #16
 8023bfc:	af00      	add	r7, sp, #0
 8023bfe:	60f8      	str	r0, [r7, #12]
 8023c00:	60b9      	str	r1, [r7, #8]
 8023c02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8023c04:	e02d      	b.n	8023c62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8023c06:	68f8      	ldr	r0, [r7, #12]
 8023c08:	f000 f8ce 	bl	8023da8 <I2C_IsAcknowledgeFailed>
 8023c0c:	4603      	mov	r3, r0
 8023c0e:	2b00      	cmp	r3, #0
 8023c10:	d001      	beq.n	8023c16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8023c12:	2301      	movs	r3, #1
 8023c14:	e02d      	b.n	8023c72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8023c16:	68bb      	ldr	r3, [r7, #8]
 8023c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023c1c:	d021      	beq.n	8023c62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8023c1e:	f7fe fb85 	bl	802232c <HAL_GetTick>
 8023c22:	4602      	mov	r2, r0
 8023c24:	687b      	ldr	r3, [r7, #4]
 8023c26:	1ad3      	subs	r3, r2, r3
 8023c28:	68ba      	ldr	r2, [r7, #8]
 8023c2a:	429a      	cmp	r2, r3
 8023c2c:	d302      	bcc.n	8023c34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8023c2e:	68bb      	ldr	r3, [r7, #8]
 8023c30:	2b00      	cmp	r3, #0
 8023c32:	d116      	bne.n	8023c62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8023c34:	68fb      	ldr	r3, [r7, #12]
 8023c36:	2200      	movs	r2, #0
 8023c38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8023c3a:	68fb      	ldr	r3, [r7, #12]
 8023c3c:	2220      	movs	r2, #32
 8023c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8023c42:	68fb      	ldr	r3, [r7, #12]
 8023c44:	2200      	movs	r2, #0
 8023c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8023c4a:	68fb      	ldr	r3, [r7, #12]
 8023c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023c4e:	f043 0220 	orr.w	r2, r3, #32
 8023c52:	68fb      	ldr	r3, [r7, #12]
 8023c54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8023c56:	68fb      	ldr	r3, [r7, #12]
 8023c58:	2200      	movs	r2, #0
 8023c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8023c5e:	2301      	movs	r3, #1
 8023c60:	e007      	b.n	8023c72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8023c62:	68fb      	ldr	r3, [r7, #12]
 8023c64:	681b      	ldr	r3, [r3, #0]
 8023c66:	695b      	ldr	r3, [r3, #20]
 8023c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023c6c:	2b80      	cmp	r3, #128	; 0x80
 8023c6e:	d1ca      	bne.n	8023c06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8023c70:	2300      	movs	r3, #0
}
 8023c72:	4618      	mov	r0, r3
 8023c74:	3710      	adds	r7, #16
 8023c76:	46bd      	mov	sp, r7
 8023c78:	bd80      	pop	{r7, pc}

08023c7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8023c7a:	b580      	push	{r7, lr}
 8023c7c:	b084      	sub	sp, #16
 8023c7e:	af00      	add	r7, sp, #0
 8023c80:	60f8      	str	r0, [r7, #12]
 8023c82:	60b9      	str	r1, [r7, #8]
 8023c84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8023c86:	e02d      	b.n	8023ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8023c88:	68f8      	ldr	r0, [r7, #12]
 8023c8a:	f000 f88d 	bl	8023da8 <I2C_IsAcknowledgeFailed>
 8023c8e:	4603      	mov	r3, r0
 8023c90:	2b00      	cmp	r3, #0
 8023c92:	d001      	beq.n	8023c98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8023c94:	2301      	movs	r3, #1
 8023c96:	e02d      	b.n	8023cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8023c98:	68bb      	ldr	r3, [r7, #8]
 8023c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023c9e:	d021      	beq.n	8023ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8023ca0:	f7fe fb44 	bl	802232c <HAL_GetTick>
 8023ca4:	4602      	mov	r2, r0
 8023ca6:	687b      	ldr	r3, [r7, #4]
 8023ca8:	1ad3      	subs	r3, r2, r3
 8023caa:	68ba      	ldr	r2, [r7, #8]
 8023cac:	429a      	cmp	r2, r3
 8023cae:	d302      	bcc.n	8023cb6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8023cb0:	68bb      	ldr	r3, [r7, #8]
 8023cb2:	2b00      	cmp	r3, #0
 8023cb4:	d116      	bne.n	8023ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8023cb6:	68fb      	ldr	r3, [r7, #12]
 8023cb8:	2200      	movs	r2, #0
 8023cba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8023cbc:	68fb      	ldr	r3, [r7, #12]
 8023cbe:	2220      	movs	r2, #32
 8023cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8023cc4:	68fb      	ldr	r3, [r7, #12]
 8023cc6:	2200      	movs	r2, #0
 8023cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8023ccc:	68fb      	ldr	r3, [r7, #12]
 8023cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023cd0:	f043 0220 	orr.w	r2, r3, #32
 8023cd4:	68fb      	ldr	r3, [r7, #12]
 8023cd6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8023cd8:	68fb      	ldr	r3, [r7, #12]
 8023cda:	2200      	movs	r2, #0
 8023cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8023ce0:	2301      	movs	r3, #1
 8023ce2:	e007      	b.n	8023cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8023ce4:	68fb      	ldr	r3, [r7, #12]
 8023ce6:	681b      	ldr	r3, [r3, #0]
 8023ce8:	695b      	ldr	r3, [r3, #20]
 8023cea:	f003 0304 	and.w	r3, r3, #4
 8023cee:	2b04      	cmp	r3, #4
 8023cf0:	d1ca      	bne.n	8023c88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8023cf2:	2300      	movs	r3, #0
}
 8023cf4:	4618      	mov	r0, r3
 8023cf6:	3710      	adds	r7, #16
 8023cf8:	46bd      	mov	sp, r7
 8023cfa:	bd80      	pop	{r7, pc}

08023cfc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8023cfc:	b580      	push	{r7, lr}
 8023cfe:	b084      	sub	sp, #16
 8023d00:	af00      	add	r7, sp, #0
 8023d02:	60f8      	str	r0, [r7, #12]
 8023d04:	60b9      	str	r1, [r7, #8]
 8023d06:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8023d08:	e042      	b.n	8023d90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8023d0a:	68fb      	ldr	r3, [r7, #12]
 8023d0c:	681b      	ldr	r3, [r3, #0]
 8023d0e:	695b      	ldr	r3, [r3, #20]
 8023d10:	f003 0310 	and.w	r3, r3, #16
 8023d14:	2b10      	cmp	r3, #16
 8023d16:	d119      	bne.n	8023d4c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8023d18:	68fb      	ldr	r3, [r7, #12]
 8023d1a:	681b      	ldr	r3, [r3, #0]
 8023d1c:	f06f 0210 	mvn.w	r2, #16
 8023d20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8023d22:	68fb      	ldr	r3, [r7, #12]
 8023d24:	2200      	movs	r2, #0
 8023d26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8023d28:	68fb      	ldr	r3, [r7, #12]
 8023d2a:	2220      	movs	r2, #32
 8023d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8023d30:	68fb      	ldr	r3, [r7, #12]
 8023d32:	2200      	movs	r2, #0
 8023d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8023d38:	68fb      	ldr	r3, [r7, #12]
 8023d3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8023d3c:	68fb      	ldr	r3, [r7, #12]
 8023d3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8023d40:	68fb      	ldr	r3, [r7, #12]
 8023d42:	2200      	movs	r2, #0
 8023d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8023d48:	2301      	movs	r3, #1
 8023d4a:	e029      	b.n	8023da0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8023d4c:	f7fe faee 	bl	802232c <HAL_GetTick>
 8023d50:	4602      	mov	r2, r0
 8023d52:	687b      	ldr	r3, [r7, #4]
 8023d54:	1ad3      	subs	r3, r2, r3
 8023d56:	68ba      	ldr	r2, [r7, #8]
 8023d58:	429a      	cmp	r2, r3
 8023d5a:	d302      	bcc.n	8023d62 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8023d5c:	68bb      	ldr	r3, [r7, #8]
 8023d5e:	2b00      	cmp	r3, #0
 8023d60:	d116      	bne.n	8023d90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8023d62:	68fb      	ldr	r3, [r7, #12]
 8023d64:	2200      	movs	r2, #0
 8023d66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8023d68:	68fb      	ldr	r3, [r7, #12]
 8023d6a:	2220      	movs	r2, #32
 8023d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8023d70:	68fb      	ldr	r3, [r7, #12]
 8023d72:	2200      	movs	r2, #0
 8023d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8023d78:	68fb      	ldr	r3, [r7, #12]
 8023d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023d7c:	f043 0220 	orr.w	r2, r3, #32
 8023d80:	68fb      	ldr	r3, [r7, #12]
 8023d82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8023d84:	68fb      	ldr	r3, [r7, #12]
 8023d86:	2200      	movs	r2, #0
 8023d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8023d8c:	2301      	movs	r3, #1
 8023d8e:	e007      	b.n	8023da0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8023d90:	68fb      	ldr	r3, [r7, #12]
 8023d92:	681b      	ldr	r3, [r3, #0]
 8023d94:	695b      	ldr	r3, [r3, #20]
 8023d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023d9a:	2b40      	cmp	r3, #64	; 0x40
 8023d9c:	d1b5      	bne.n	8023d0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8023d9e:	2300      	movs	r3, #0
}
 8023da0:	4618      	mov	r0, r3
 8023da2:	3710      	adds	r7, #16
 8023da4:	46bd      	mov	sp, r7
 8023da6:	bd80      	pop	{r7, pc}

08023da8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8023da8:	b480      	push	{r7}
 8023daa:	b083      	sub	sp, #12
 8023dac:	af00      	add	r7, sp, #0
 8023dae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8023db0:	687b      	ldr	r3, [r7, #4]
 8023db2:	681b      	ldr	r3, [r3, #0]
 8023db4:	695b      	ldr	r3, [r3, #20]
 8023db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8023dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8023dbe:	d11b      	bne.n	8023df8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8023dc0:	687b      	ldr	r3, [r7, #4]
 8023dc2:	681b      	ldr	r3, [r3, #0]
 8023dc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8023dc8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8023dca:	687b      	ldr	r3, [r7, #4]
 8023dcc:	2200      	movs	r2, #0
 8023dce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8023dd0:	687b      	ldr	r3, [r7, #4]
 8023dd2:	2220      	movs	r2, #32
 8023dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8023dd8:	687b      	ldr	r3, [r7, #4]
 8023dda:	2200      	movs	r2, #0
 8023ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8023de0:	687b      	ldr	r3, [r7, #4]
 8023de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023de4:	f043 0204 	orr.w	r2, r3, #4
 8023de8:	687b      	ldr	r3, [r7, #4]
 8023dea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8023dec:	687b      	ldr	r3, [r7, #4]
 8023dee:	2200      	movs	r2, #0
 8023df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8023df4:	2301      	movs	r3, #1
 8023df6:	e000      	b.n	8023dfa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8023df8:	2300      	movs	r3, #0
}
 8023dfa:	4618      	mov	r0, r3
 8023dfc:	370c      	adds	r7, #12
 8023dfe:	46bd      	mov	sp, r7
 8023e00:	bc80      	pop	{r7}
 8023e02:	4770      	bx	lr

08023e04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8023e04:	b580      	push	{r7, lr}
 8023e06:	b086      	sub	sp, #24
 8023e08:	af00      	add	r7, sp, #0
 8023e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8023e0c:	687b      	ldr	r3, [r7, #4]
 8023e0e:	2b00      	cmp	r3, #0
 8023e10:	d101      	bne.n	8023e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8023e12:	2301      	movs	r3, #1
 8023e14:	e26c      	b.n	80242f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8023e16:	687b      	ldr	r3, [r7, #4]
 8023e18:	681b      	ldr	r3, [r3, #0]
 8023e1a:	f003 0301 	and.w	r3, r3, #1
 8023e1e:	2b00      	cmp	r3, #0
 8023e20:	f000 8087 	beq.w	8023f32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8023e24:	4b92      	ldr	r3, [pc, #584]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023e26:	685b      	ldr	r3, [r3, #4]
 8023e28:	f003 030c 	and.w	r3, r3, #12
 8023e2c:	2b04      	cmp	r3, #4
 8023e2e:	d00c      	beq.n	8023e4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8023e30:	4b8f      	ldr	r3, [pc, #572]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023e32:	685b      	ldr	r3, [r3, #4]
 8023e34:	f003 030c 	and.w	r3, r3, #12
 8023e38:	2b08      	cmp	r3, #8
 8023e3a:	d112      	bne.n	8023e62 <HAL_RCC_OscConfig+0x5e>
 8023e3c:	4b8c      	ldr	r3, [pc, #560]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023e3e:	685b      	ldr	r3, [r3, #4]
 8023e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8023e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8023e48:	d10b      	bne.n	8023e62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8023e4a:	4b89      	ldr	r3, [pc, #548]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023e4c:	681b      	ldr	r3, [r3, #0]
 8023e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8023e52:	2b00      	cmp	r3, #0
 8023e54:	d06c      	beq.n	8023f30 <HAL_RCC_OscConfig+0x12c>
 8023e56:	687b      	ldr	r3, [r7, #4]
 8023e58:	685b      	ldr	r3, [r3, #4]
 8023e5a:	2b00      	cmp	r3, #0
 8023e5c:	d168      	bne.n	8023f30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8023e5e:	2301      	movs	r3, #1
 8023e60:	e246      	b.n	80242f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8023e62:	687b      	ldr	r3, [r7, #4]
 8023e64:	685b      	ldr	r3, [r3, #4]
 8023e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8023e6a:	d106      	bne.n	8023e7a <HAL_RCC_OscConfig+0x76>
 8023e6c:	4b80      	ldr	r3, [pc, #512]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023e6e:	681b      	ldr	r3, [r3, #0]
 8023e70:	4a7f      	ldr	r2, [pc, #508]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8023e76:	6013      	str	r3, [r2, #0]
 8023e78:	e02e      	b.n	8023ed8 <HAL_RCC_OscConfig+0xd4>
 8023e7a:	687b      	ldr	r3, [r7, #4]
 8023e7c:	685b      	ldr	r3, [r3, #4]
 8023e7e:	2b00      	cmp	r3, #0
 8023e80:	d10c      	bne.n	8023e9c <HAL_RCC_OscConfig+0x98>
 8023e82:	4b7b      	ldr	r3, [pc, #492]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023e84:	681b      	ldr	r3, [r3, #0]
 8023e86:	4a7a      	ldr	r2, [pc, #488]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8023e8c:	6013      	str	r3, [r2, #0]
 8023e8e:	4b78      	ldr	r3, [pc, #480]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023e90:	681b      	ldr	r3, [r3, #0]
 8023e92:	4a77      	ldr	r2, [pc, #476]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023e94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8023e98:	6013      	str	r3, [r2, #0]
 8023e9a:	e01d      	b.n	8023ed8 <HAL_RCC_OscConfig+0xd4>
 8023e9c:	687b      	ldr	r3, [r7, #4]
 8023e9e:	685b      	ldr	r3, [r3, #4]
 8023ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8023ea4:	d10c      	bne.n	8023ec0 <HAL_RCC_OscConfig+0xbc>
 8023ea6:	4b72      	ldr	r3, [pc, #456]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023ea8:	681b      	ldr	r3, [r3, #0]
 8023eaa:	4a71      	ldr	r2, [pc, #452]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8023eb0:	6013      	str	r3, [r2, #0]
 8023eb2:	4b6f      	ldr	r3, [pc, #444]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023eb4:	681b      	ldr	r3, [r3, #0]
 8023eb6:	4a6e      	ldr	r2, [pc, #440]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8023ebc:	6013      	str	r3, [r2, #0]
 8023ebe:	e00b      	b.n	8023ed8 <HAL_RCC_OscConfig+0xd4>
 8023ec0:	4b6b      	ldr	r3, [pc, #428]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023ec2:	681b      	ldr	r3, [r3, #0]
 8023ec4:	4a6a      	ldr	r2, [pc, #424]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8023eca:	6013      	str	r3, [r2, #0]
 8023ecc:	4b68      	ldr	r3, [pc, #416]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023ece:	681b      	ldr	r3, [r3, #0]
 8023ed0:	4a67      	ldr	r2, [pc, #412]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8023ed6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8023ed8:	687b      	ldr	r3, [r7, #4]
 8023eda:	685b      	ldr	r3, [r3, #4]
 8023edc:	2b00      	cmp	r3, #0
 8023ede:	d013      	beq.n	8023f08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8023ee0:	f7fe fa24 	bl	802232c <HAL_GetTick>
 8023ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8023ee6:	e008      	b.n	8023efa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8023ee8:	f7fe fa20 	bl	802232c <HAL_GetTick>
 8023eec:	4602      	mov	r2, r0
 8023eee:	693b      	ldr	r3, [r7, #16]
 8023ef0:	1ad3      	subs	r3, r2, r3
 8023ef2:	2b64      	cmp	r3, #100	; 0x64
 8023ef4:	d901      	bls.n	8023efa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8023ef6:	2303      	movs	r3, #3
 8023ef8:	e1fa      	b.n	80242f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8023efa:	4b5d      	ldr	r3, [pc, #372]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023efc:	681b      	ldr	r3, [r3, #0]
 8023efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8023f02:	2b00      	cmp	r3, #0
 8023f04:	d0f0      	beq.n	8023ee8 <HAL_RCC_OscConfig+0xe4>
 8023f06:	e014      	b.n	8023f32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8023f08:	f7fe fa10 	bl	802232c <HAL_GetTick>
 8023f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8023f0e:	e008      	b.n	8023f22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8023f10:	f7fe fa0c 	bl	802232c <HAL_GetTick>
 8023f14:	4602      	mov	r2, r0
 8023f16:	693b      	ldr	r3, [r7, #16]
 8023f18:	1ad3      	subs	r3, r2, r3
 8023f1a:	2b64      	cmp	r3, #100	; 0x64
 8023f1c:	d901      	bls.n	8023f22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8023f1e:	2303      	movs	r3, #3
 8023f20:	e1e6      	b.n	80242f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8023f22:	4b53      	ldr	r3, [pc, #332]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023f24:	681b      	ldr	r3, [r3, #0]
 8023f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8023f2a:	2b00      	cmp	r3, #0
 8023f2c:	d1f0      	bne.n	8023f10 <HAL_RCC_OscConfig+0x10c>
 8023f2e:	e000      	b.n	8023f32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8023f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8023f32:	687b      	ldr	r3, [r7, #4]
 8023f34:	681b      	ldr	r3, [r3, #0]
 8023f36:	f003 0302 	and.w	r3, r3, #2
 8023f3a:	2b00      	cmp	r3, #0
 8023f3c:	d063      	beq.n	8024006 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8023f3e:	4b4c      	ldr	r3, [pc, #304]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023f40:	685b      	ldr	r3, [r3, #4]
 8023f42:	f003 030c 	and.w	r3, r3, #12
 8023f46:	2b00      	cmp	r3, #0
 8023f48:	d00b      	beq.n	8023f62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8023f4a:	4b49      	ldr	r3, [pc, #292]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023f4c:	685b      	ldr	r3, [r3, #4]
 8023f4e:	f003 030c 	and.w	r3, r3, #12
 8023f52:	2b08      	cmp	r3, #8
 8023f54:	d11c      	bne.n	8023f90 <HAL_RCC_OscConfig+0x18c>
 8023f56:	4b46      	ldr	r3, [pc, #280]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023f58:	685b      	ldr	r3, [r3, #4]
 8023f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8023f5e:	2b00      	cmp	r3, #0
 8023f60:	d116      	bne.n	8023f90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8023f62:	4b43      	ldr	r3, [pc, #268]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023f64:	681b      	ldr	r3, [r3, #0]
 8023f66:	f003 0302 	and.w	r3, r3, #2
 8023f6a:	2b00      	cmp	r3, #0
 8023f6c:	d005      	beq.n	8023f7a <HAL_RCC_OscConfig+0x176>
 8023f6e:	687b      	ldr	r3, [r7, #4]
 8023f70:	691b      	ldr	r3, [r3, #16]
 8023f72:	2b01      	cmp	r3, #1
 8023f74:	d001      	beq.n	8023f7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8023f76:	2301      	movs	r3, #1
 8023f78:	e1ba      	b.n	80242f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8023f7a:	4b3d      	ldr	r3, [pc, #244]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023f7c:	681b      	ldr	r3, [r3, #0]
 8023f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8023f82:	687b      	ldr	r3, [r7, #4]
 8023f84:	695b      	ldr	r3, [r3, #20]
 8023f86:	00db      	lsls	r3, r3, #3
 8023f88:	4939      	ldr	r1, [pc, #228]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023f8a:	4313      	orrs	r3, r2
 8023f8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8023f8e:	e03a      	b.n	8024006 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8023f90:	687b      	ldr	r3, [r7, #4]
 8023f92:	691b      	ldr	r3, [r3, #16]
 8023f94:	2b00      	cmp	r3, #0
 8023f96:	d020      	beq.n	8023fda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8023f98:	4b36      	ldr	r3, [pc, #216]	; (8024074 <HAL_RCC_OscConfig+0x270>)
 8023f9a:	2201      	movs	r2, #1
 8023f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8023f9e:	f7fe f9c5 	bl	802232c <HAL_GetTick>
 8023fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8023fa4:	e008      	b.n	8023fb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8023fa6:	f7fe f9c1 	bl	802232c <HAL_GetTick>
 8023faa:	4602      	mov	r2, r0
 8023fac:	693b      	ldr	r3, [r7, #16]
 8023fae:	1ad3      	subs	r3, r2, r3
 8023fb0:	2b02      	cmp	r3, #2
 8023fb2:	d901      	bls.n	8023fb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8023fb4:	2303      	movs	r3, #3
 8023fb6:	e19b      	b.n	80242f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8023fb8:	4b2d      	ldr	r3, [pc, #180]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023fba:	681b      	ldr	r3, [r3, #0]
 8023fbc:	f003 0302 	and.w	r3, r3, #2
 8023fc0:	2b00      	cmp	r3, #0
 8023fc2:	d0f0      	beq.n	8023fa6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8023fc4:	4b2a      	ldr	r3, [pc, #168]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023fc6:	681b      	ldr	r3, [r3, #0]
 8023fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8023fcc:	687b      	ldr	r3, [r7, #4]
 8023fce:	695b      	ldr	r3, [r3, #20]
 8023fd0:	00db      	lsls	r3, r3, #3
 8023fd2:	4927      	ldr	r1, [pc, #156]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023fd4:	4313      	orrs	r3, r2
 8023fd6:	600b      	str	r3, [r1, #0]
 8023fd8:	e015      	b.n	8024006 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8023fda:	4b26      	ldr	r3, [pc, #152]	; (8024074 <HAL_RCC_OscConfig+0x270>)
 8023fdc:	2200      	movs	r2, #0
 8023fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8023fe0:	f7fe f9a4 	bl	802232c <HAL_GetTick>
 8023fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8023fe6:	e008      	b.n	8023ffa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8023fe8:	f7fe f9a0 	bl	802232c <HAL_GetTick>
 8023fec:	4602      	mov	r2, r0
 8023fee:	693b      	ldr	r3, [r7, #16]
 8023ff0:	1ad3      	subs	r3, r2, r3
 8023ff2:	2b02      	cmp	r3, #2
 8023ff4:	d901      	bls.n	8023ffa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8023ff6:	2303      	movs	r3, #3
 8023ff8:	e17a      	b.n	80242f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8023ffa:	4b1d      	ldr	r3, [pc, #116]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 8023ffc:	681b      	ldr	r3, [r3, #0]
 8023ffe:	f003 0302 	and.w	r3, r3, #2
 8024002:	2b00      	cmp	r3, #0
 8024004:	d1f0      	bne.n	8023fe8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8024006:	687b      	ldr	r3, [r7, #4]
 8024008:	681b      	ldr	r3, [r3, #0]
 802400a:	f003 0308 	and.w	r3, r3, #8
 802400e:	2b00      	cmp	r3, #0
 8024010:	d03a      	beq.n	8024088 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8024012:	687b      	ldr	r3, [r7, #4]
 8024014:	699b      	ldr	r3, [r3, #24]
 8024016:	2b00      	cmp	r3, #0
 8024018:	d019      	beq.n	802404e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802401a:	4b17      	ldr	r3, [pc, #92]	; (8024078 <HAL_RCC_OscConfig+0x274>)
 802401c:	2201      	movs	r2, #1
 802401e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8024020:	f7fe f984 	bl	802232c <HAL_GetTick>
 8024024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8024026:	e008      	b.n	802403a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8024028:	f7fe f980 	bl	802232c <HAL_GetTick>
 802402c:	4602      	mov	r2, r0
 802402e:	693b      	ldr	r3, [r7, #16]
 8024030:	1ad3      	subs	r3, r2, r3
 8024032:	2b02      	cmp	r3, #2
 8024034:	d901      	bls.n	802403a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8024036:	2303      	movs	r3, #3
 8024038:	e15a      	b.n	80242f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802403a:	4b0d      	ldr	r3, [pc, #52]	; (8024070 <HAL_RCC_OscConfig+0x26c>)
 802403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802403e:	f003 0302 	and.w	r3, r3, #2
 8024042:	2b00      	cmp	r3, #0
 8024044:	d0f0      	beq.n	8024028 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8024046:	2001      	movs	r0, #1
 8024048:	f000 fad8 	bl	80245fc <RCC_Delay>
 802404c:	e01c      	b.n	8024088 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 802404e:	4b0a      	ldr	r3, [pc, #40]	; (8024078 <HAL_RCC_OscConfig+0x274>)
 8024050:	2200      	movs	r2, #0
 8024052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8024054:	f7fe f96a 	bl	802232c <HAL_GetTick>
 8024058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802405a:	e00f      	b.n	802407c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 802405c:	f7fe f966 	bl	802232c <HAL_GetTick>
 8024060:	4602      	mov	r2, r0
 8024062:	693b      	ldr	r3, [r7, #16]
 8024064:	1ad3      	subs	r3, r2, r3
 8024066:	2b02      	cmp	r3, #2
 8024068:	d908      	bls.n	802407c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 802406a:	2303      	movs	r3, #3
 802406c:	e140      	b.n	80242f0 <HAL_RCC_OscConfig+0x4ec>
 802406e:	bf00      	nop
 8024070:	40021000 	.word	0x40021000
 8024074:	42420000 	.word	0x42420000
 8024078:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802407c:	4b9e      	ldr	r3, [pc, #632]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 802407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024080:	f003 0302 	and.w	r3, r3, #2
 8024084:	2b00      	cmp	r3, #0
 8024086:	d1e9      	bne.n	802405c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8024088:	687b      	ldr	r3, [r7, #4]
 802408a:	681b      	ldr	r3, [r3, #0]
 802408c:	f003 0304 	and.w	r3, r3, #4
 8024090:	2b00      	cmp	r3, #0
 8024092:	f000 80a6 	beq.w	80241e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8024096:	2300      	movs	r3, #0
 8024098:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 802409a:	4b97      	ldr	r3, [pc, #604]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 802409c:	69db      	ldr	r3, [r3, #28]
 802409e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80240a2:	2b00      	cmp	r3, #0
 80240a4:	d10d      	bne.n	80240c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80240a6:	4b94      	ldr	r3, [pc, #592]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 80240a8:	69db      	ldr	r3, [r3, #28]
 80240aa:	4a93      	ldr	r2, [pc, #588]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 80240ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80240b0:	61d3      	str	r3, [r2, #28]
 80240b2:	4b91      	ldr	r3, [pc, #580]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 80240b4:	69db      	ldr	r3, [r3, #28]
 80240b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80240ba:	60bb      	str	r3, [r7, #8]
 80240bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80240be:	2301      	movs	r3, #1
 80240c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80240c2:	4b8e      	ldr	r3, [pc, #568]	; (80242fc <HAL_RCC_OscConfig+0x4f8>)
 80240c4:	681b      	ldr	r3, [r3, #0]
 80240c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80240ca:	2b00      	cmp	r3, #0
 80240cc:	d118      	bne.n	8024100 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80240ce:	4b8b      	ldr	r3, [pc, #556]	; (80242fc <HAL_RCC_OscConfig+0x4f8>)
 80240d0:	681b      	ldr	r3, [r3, #0]
 80240d2:	4a8a      	ldr	r2, [pc, #552]	; (80242fc <HAL_RCC_OscConfig+0x4f8>)
 80240d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80240d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80240da:	f7fe f927 	bl	802232c <HAL_GetTick>
 80240de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80240e0:	e008      	b.n	80240f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80240e2:	f7fe f923 	bl	802232c <HAL_GetTick>
 80240e6:	4602      	mov	r2, r0
 80240e8:	693b      	ldr	r3, [r7, #16]
 80240ea:	1ad3      	subs	r3, r2, r3
 80240ec:	2b64      	cmp	r3, #100	; 0x64
 80240ee:	d901      	bls.n	80240f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80240f0:	2303      	movs	r3, #3
 80240f2:	e0fd      	b.n	80242f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80240f4:	4b81      	ldr	r3, [pc, #516]	; (80242fc <HAL_RCC_OscConfig+0x4f8>)
 80240f6:	681b      	ldr	r3, [r3, #0]
 80240f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80240fc:	2b00      	cmp	r3, #0
 80240fe:	d0f0      	beq.n	80240e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8024100:	687b      	ldr	r3, [r7, #4]
 8024102:	68db      	ldr	r3, [r3, #12]
 8024104:	2b01      	cmp	r3, #1
 8024106:	d106      	bne.n	8024116 <HAL_RCC_OscConfig+0x312>
 8024108:	4b7b      	ldr	r3, [pc, #492]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 802410a:	6a1b      	ldr	r3, [r3, #32]
 802410c:	4a7a      	ldr	r2, [pc, #488]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 802410e:	f043 0301 	orr.w	r3, r3, #1
 8024112:	6213      	str	r3, [r2, #32]
 8024114:	e02d      	b.n	8024172 <HAL_RCC_OscConfig+0x36e>
 8024116:	687b      	ldr	r3, [r7, #4]
 8024118:	68db      	ldr	r3, [r3, #12]
 802411a:	2b00      	cmp	r3, #0
 802411c:	d10c      	bne.n	8024138 <HAL_RCC_OscConfig+0x334>
 802411e:	4b76      	ldr	r3, [pc, #472]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 8024120:	6a1b      	ldr	r3, [r3, #32]
 8024122:	4a75      	ldr	r2, [pc, #468]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 8024124:	f023 0301 	bic.w	r3, r3, #1
 8024128:	6213      	str	r3, [r2, #32]
 802412a:	4b73      	ldr	r3, [pc, #460]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 802412c:	6a1b      	ldr	r3, [r3, #32]
 802412e:	4a72      	ldr	r2, [pc, #456]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 8024130:	f023 0304 	bic.w	r3, r3, #4
 8024134:	6213      	str	r3, [r2, #32]
 8024136:	e01c      	b.n	8024172 <HAL_RCC_OscConfig+0x36e>
 8024138:	687b      	ldr	r3, [r7, #4]
 802413a:	68db      	ldr	r3, [r3, #12]
 802413c:	2b05      	cmp	r3, #5
 802413e:	d10c      	bne.n	802415a <HAL_RCC_OscConfig+0x356>
 8024140:	4b6d      	ldr	r3, [pc, #436]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 8024142:	6a1b      	ldr	r3, [r3, #32]
 8024144:	4a6c      	ldr	r2, [pc, #432]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 8024146:	f043 0304 	orr.w	r3, r3, #4
 802414a:	6213      	str	r3, [r2, #32]
 802414c:	4b6a      	ldr	r3, [pc, #424]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 802414e:	6a1b      	ldr	r3, [r3, #32]
 8024150:	4a69      	ldr	r2, [pc, #420]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 8024152:	f043 0301 	orr.w	r3, r3, #1
 8024156:	6213      	str	r3, [r2, #32]
 8024158:	e00b      	b.n	8024172 <HAL_RCC_OscConfig+0x36e>
 802415a:	4b67      	ldr	r3, [pc, #412]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 802415c:	6a1b      	ldr	r3, [r3, #32]
 802415e:	4a66      	ldr	r2, [pc, #408]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 8024160:	f023 0301 	bic.w	r3, r3, #1
 8024164:	6213      	str	r3, [r2, #32]
 8024166:	4b64      	ldr	r3, [pc, #400]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 8024168:	6a1b      	ldr	r3, [r3, #32]
 802416a:	4a63      	ldr	r2, [pc, #396]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 802416c:	f023 0304 	bic.w	r3, r3, #4
 8024170:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8024172:	687b      	ldr	r3, [r7, #4]
 8024174:	68db      	ldr	r3, [r3, #12]
 8024176:	2b00      	cmp	r3, #0
 8024178:	d015      	beq.n	80241a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802417a:	f7fe f8d7 	bl	802232c <HAL_GetTick>
 802417e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8024180:	e00a      	b.n	8024198 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8024182:	f7fe f8d3 	bl	802232c <HAL_GetTick>
 8024186:	4602      	mov	r2, r0
 8024188:	693b      	ldr	r3, [r7, #16]
 802418a:	1ad3      	subs	r3, r2, r3
 802418c:	f241 3288 	movw	r2, #5000	; 0x1388
 8024190:	4293      	cmp	r3, r2
 8024192:	d901      	bls.n	8024198 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8024194:	2303      	movs	r3, #3
 8024196:	e0ab      	b.n	80242f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8024198:	4b57      	ldr	r3, [pc, #348]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 802419a:	6a1b      	ldr	r3, [r3, #32]
 802419c:	f003 0302 	and.w	r3, r3, #2
 80241a0:	2b00      	cmp	r3, #0
 80241a2:	d0ee      	beq.n	8024182 <HAL_RCC_OscConfig+0x37e>
 80241a4:	e014      	b.n	80241d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80241a6:	f7fe f8c1 	bl	802232c <HAL_GetTick>
 80241aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80241ac:	e00a      	b.n	80241c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80241ae:	f7fe f8bd 	bl	802232c <HAL_GetTick>
 80241b2:	4602      	mov	r2, r0
 80241b4:	693b      	ldr	r3, [r7, #16]
 80241b6:	1ad3      	subs	r3, r2, r3
 80241b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80241bc:	4293      	cmp	r3, r2
 80241be:	d901      	bls.n	80241c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80241c0:	2303      	movs	r3, #3
 80241c2:	e095      	b.n	80242f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80241c4:	4b4c      	ldr	r3, [pc, #304]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 80241c6:	6a1b      	ldr	r3, [r3, #32]
 80241c8:	f003 0302 	and.w	r3, r3, #2
 80241cc:	2b00      	cmp	r3, #0
 80241ce:	d1ee      	bne.n	80241ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80241d0:	7dfb      	ldrb	r3, [r7, #23]
 80241d2:	2b01      	cmp	r3, #1
 80241d4:	d105      	bne.n	80241e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80241d6:	4b48      	ldr	r3, [pc, #288]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 80241d8:	69db      	ldr	r3, [r3, #28]
 80241da:	4a47      	ldr	r2, [pc, #284]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 80241dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80241e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80241e2:	687b      	ldr	r3, [r7, #4]
 80241e4:	69db      	ldr	r3, [r3, #28]
 80241e6:	2b00      	cmp	r3, #0
 80241e8:	f000 8081 	beq.w	80242ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80241ec:	4b42      	ldr	r3, [pc, #264]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 80241ee:	685b      	ldr	r3, [r3, #4]
 80241f0:	f003 030c 	and.w	r3, r3, #12
 80241f4:	2b08      	cmp	r3, #8
 80241f6:	d061      	beq.n	80242bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80241f8:	687b      	ldr	r3, [r7, #4]
 80241fa:	69db      	ldr	r3, [r3, #28]
 80241fc:	2b02      	cmp	r3, #2
 80241fe:	d146      	bne.n	802428e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8024200:	4b3f      	ldr	r3, [pc, #252]	; (8024300 <HAL_RCC_OscConfig+0x4fc>)
 8024202:	2200      	movs	r2, #0
 8024204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8024206:	f7fe f891 	bl	802232c <HAL_GetTick>
 802420a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 802420c:	e008      	b.n	8024220 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802420e:	f7fe f88d 	bl	802232c <HAL_GetTick>
 8024212:	4602      	mov	r2, r0
 8024214:	693b      	ldr	r3, [r7, #16]
 8024216:	1ad3      	subs	r3, r2, r3
 8024218:	2b02      	cmp	r3, #2
 802421a:	d901      	bls.n	8024220 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 802421c:	2303      	movs	r3, #3
 802421e:	e067      	b.n	80242f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8024220:	4b35      	ldr	r3, [pc, #212]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 8024222:	681b      	ldr	r3, [r3, #0]
 8024224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024228:	2b00      	cmp	r3, #0
 802422a:	d1f0      	bne.n	802420e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 802422c:	687b      	ldr	r3, [r7, #4]
 802422e:	6a1b      	ldr	r3, [r3, #32]
 8024230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8024234:	d108      	bne.n	8024248 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8024236:	4b30      	ldr	r3, [pc, #192]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 8024238:	685b      	ldr	r3, [r3, #4]
 802423a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 802423e:	687b      	ldr	r3, [r7, #4]
 8024240:	689b      	ldr	r3, [r3, #8]
 8024242:	492d      	ldr	r1, [pc, #180]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 8024244:	4313      	orrs	r3, r2
 8024246:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8024248:	4b2b      	ldr	r3, [pc, #172]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 802424a:	685b      	ldr	r3, [r3, #4]
 802424c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8024250:	687b      	ldr	r3, [r7, #4]
 8024252:	6a19      	ldr	r1, [r3, #32]
 8024254:	687b      	ldr	r3, [r7, #4]
 8024256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024258:	430b      	orrs	r3, r1
 802425a:	4927      	ldr	r1, [pc, #156]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 802425c:	4313      	orrs	r3, r2
 802425e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8024260:	4b27      	ldr	r3, [pc, #156]	; (8024300 <HAL_RCC_OscConfig+0x4fc>)
 8024262:	2201      	movs	r2, #1
 8024264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8024266:	f7fe f861 	bl	802232c <HAL_GetTick>
 802426a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 802426c:	e008      	b.n	8024280 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802426e:	f7fe f85d 	bl	802232c <HAL_GetTick>
 8024272:	4602      	mov	r2, r0
 8024274:	693b      	ldr	r3, [r7, #16]
 8024276:	1ad3      	subs	r3, r2, r3
 8024278:	2b02      	cmp	r3, #2
 802427a:	d901      	bls.n	8024280 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 802427c:	2303      	movs	r3, #3
 802427e:	e037      	b.n	80242f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8024280:	4b1d      	ldr	r3, [pc, #116]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 8024282:	681b      	ldr	r3, [r3, #0]
 8024284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024288:	2b00      	cmp	r3, #0
 802428a:	d0f0      	beq.n	802426e <HAL_RCC_OscConfig+0x46a>
 802428c:	e02f      	b.n	80242ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802428e:	4b1c      	ldr	r3, [pc, #112]	; (8024300 <HAL_RCC_OscConfig+0x4fc>)
 8024290:	2200      	movs	r2, #0
 8024292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8024294:	f7fe f84a 	bl	802232c <HAL_GetTick>
 8024298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 802429a:	e008      	b.n	80242ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802429c:	f7fe f846 	bl	802232c <HAL_GetTick>
 80242a0:	4602      	mov	r2, r0
 80242a2:	693b      	ldr	r3, [r7, #16]
 80242a4:	1ad3      	subs	r3, r2, r3
 80242a6:	2b02      	cmp	r3, #2
 80242a8:	d901      	bls.n	80242ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80242aa:	2303      	movs	r3, #3
 80242ac:	e020      	b.n	80242f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80242ae:	4b12      	ldr	r3, [pc, #72]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 80242b0:	681b      	ldr	r3, [r3, #0]
 80242b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80242b6:	2b00      	cmp	r3, #0
 80242b8:	d1f0      	bne.n	802429c <HAL_RCC_OscConfig+0x498>
 80242ba:	e018      	b.n	80242ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80242bc:	687b      	ldr	r3, [r7, #4]
 80242be:	69db      	ldr	r3, [r3, #28]
 80242c0:	2b01      	cmp	r3, #1
 80242c2:	d101      	bne.n	80242c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80242c4:	2301      	movs	r3, #1
 80242c6:	e013      	b.n	80242f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80242c8:	4b0b      	ldr	r3, [pc, #44]	; (80242f8 <HAL_RCC_OscConfig+0x4f4>)
 80242ca:	685b      	ldr	r3, [r3, #4]
 80242cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80242ce:	68fb      	ldr	r3, [r7, #12]
 80242d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80242d4:	687b      	ldr	r3, [r7, #4]
 80242d6:	6a1b      	ldr	r3, [r3, #32]
 80242d8:	429a      	cmp	r2, r3
 80242da:	d106      	bne.n	80242ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80242dc:	68fb      	ldr	r3, [r7, #12]
 80242de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80242e2:	687b      	ldr	r3, [r7, #4]
 80242e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80242e6:	429a      	cmp	r2, r3
 80242e8:	d001      	beq.n	80242ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80242ea:	2301      	movs	r3, #1
 80242ec:	e000      	b.n	80242f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80242ee:	2300      	movs	r3, #0
}
 80242f0:	4618      	mov	r0, r3
 80242f2:	3718      	adds	r7, #24
 80242f4:	46bd      	mov	sp, r7
 80242f6:	bd80      	pop	{r7, pc}
 80242f8:	40021000 	.word	0x40021000
 80242fc:	40007000 	.word	0x40007000
 8024300:	42420060 	.word	0x42420060

08024304 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8024304:	b580      	push	{r7, lr}
 8024306:	b084      	sub	sp, #16
 8024308:	af00      	add	r7, sp, #0
 802430a:	6078      	str	r0, [r7, #4]
 802430c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 802430e:	687b      	ldr	r3, [r7, #4]
 8024310:	2b00      	cmp	r3, #0
 8024312:	d101      	bne.n	8024318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8024314:	2301      	movs	r3, #1
 8024316:	e0d0      	b.n	80244ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8024318:	4b6a      	ldr	r3, [pc, #424]	; (80244c4 <HAL_RCC_ClockConfig+0x1c0>)
 802431a:	681b      	ldr	r3, [r3, #0]
 802431c:	f003 0307 	and.w	r3, r3, #7
 8024320:	683a      	ldr	r2, [r7, #0]
 8024322:	429a      	cmp	r2, r3
 8024324:	d910      	bls.n	8024348 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8024326:	4b67      	ldr	r3, [pc, #412]	; (80244c4 <HAL_RCC_ClockConfig+0x1c0>)
 8024328:	681b      	ldr	r3, [r3, #0]
 802432a:	f023 0207 	bic.w	r2, r3, #7
 802432e:	4965      	ldr	r1, [pc, #404]	; (80244c4 <HAL_RCC_ClockConfig+0x1c0>)
 8024330:	683b      	ldr	r3, [r7, #0]
 8024332:	4313      	orrs	r3, r2
 8024334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8024336:	4b63      	ldr	r3, [pc, #396]	; (80244c4 <HAL_RCC_ClockConfig+0x1c0>)
 8024338:	681b      	ldr	r3, [r3, #0]
 802433a:	f003 0307 	and.w	r3, r3, #7
 802433e:	683a      	ldr	r2, [r7, #0]
 8024340:	429a      	cmp	r2, r3
 8024342:	d001      	beq.n	8024348 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8024344:	2301      	movs	r3, #1
 8024346:	e0b8      	b.n	80244ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8024348:	687b      	ldr	r3, [r7, #4]
 802434a:	681b      	ldr	r3, [r3, #0]
 802434c:	f003 0302 	and.w	r3, r3, #2
 8024350:	2b00      	cmp	r3, #0
 8024352:	d020      	beq.n	8024396 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8024354:	687b      	ldr	r3, [r7, #4]
 8024356:	681b      	ldr	r3, [r3, #0]
 8024358:	f003 0304 	and.w	r3, r3, #4
 802435c:	2b00      	cmp	r3, #0
 802435e:	d005      	beq.n	802436c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8024360:	4b59      	ldr	r3, [pc, #356]	; (80244c8 <HAL_RCC_ClockConfig+0x1c4>)
 8024362:	685b      	ldr	r3, [r3, #4]
 8024364:	4a58      	ldr	r2, [pc, #352]	; (80244c8 <HAL_RCC_ClockConfig+0x1c4>)
 8024366:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 802436a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802436c:	687b      	ldr	r3, [r7, #4]
 802436e:	681b      	ldr	r3, [r3, #0]
 8024370:	f003 0308 	and.w	r3, r3, #8
 8024374:	2b00      	cmp	r3, #0
 8024376:	d005      	beq.n	8024384 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8024378:	4b53      	ldr	r3, [pc, #332]	; (80244c8 <HAL_RCC_ClockConfig+0x1c4>)
 802437a:	685b      	ldr	r3, [r3, #4]
 802437c:	4a52      	ldr	r2, [pc, #328]	; (80244c8 <HAL_RCC_ClockConfig+0x1c4>)
 802437e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8024382:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8024384:	4b50      	ldr	r3, [pc, #320]	; (80244c8 <HAL_RCC_ClockConfig+0x1c4>)
 8024386:	685b      	ldr	r3, [r3, #4]
 8024388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 802438c:	687b      	ldr	r3, [r7, #4]
 802438e:	689b      	ldr	r3, [r3, #8]
 8024390:	494d      	ldr	r1, [pc, #308]	; (80244c8 <HAL_RCC_ClockConfig+0x1c4>)
 8024392:	4313      	orrs	r3, r2
 8024394:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8024396:	687b      	ldr	r3, [r7, #4]
 8024398:	681b      	ldr	r3, [r3, #0]
 802439a:	f003 0301 	and.w	r3, r3, #1
 802439e:	2b00      	cmp	r3, #0
 80243a0:	d040      	beq.n	8024424 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80243a2:	687b      	ldr	r3, [r7, #4]
 80243a4:	685b      	ldr	r3, [r3, #4]
 80243a6:	2b01      	cmp	r3, #1
 80243a8:	d107      	bne.n	80243ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80243aa:	4b47      	ldr	r3, [pc, #284]	; (80244c8 <HAL_RCC_ClockConfig+0x1c4>)
 80243ac:	681b      	ldr	r3, [r3, #0]
 80243ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80243b2:	2b00      	cmp	r3, #0
 80243b4:	d115      	bne.n	80243e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80243b6:	2301      	movs	r3, #1
 80243b8:	e07f      	b.n	80244ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80243ba:	687b      	ldr	r3, [r7, #4]
 80243bc:	685b      	ldr	r3, [r3, #4]
 80243be:	2b02      	cmp	r3, #2
 80243c0:	d107      	bne.n	80243d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80243c2:	4b41      	ldr	r3, [pc, #260]	; (80244c8 <HAL_RCC_ClockConfig+0x1c4>)
 80243c4:	681b      	ldr	r3, [r3, #0]
 80243c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80243ca:	2b00      	cmp	r3, #0
 80243cc:	d109      	bne.n	80243e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80243ce:	2301      	movs	r3, #1
 80243d0:	e073      	b.n	80244ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80243d2:	4b3d      	ldr	r3, [pc, #244]	; (80244c8 <HAL_RCC_ClockConfig+0x1c4>)
 80243d4:	681b      	ldr	r3, [r3, #0]
 80243d6:	f003 0302 	and.w	r3, r3, #2
 80243da:	2b00      	cmp	r3, #0
 80243dc:	d101      	bne.n	80243e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80243de:	2301      	movs	r3, #1
 80243e0:	e06b      	b.n	80244ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80243e2:	4b39      	ldr	r3, [pc, #228]	; (80244c8 <HAL_RCC_ClockConfig+0x1c4>)
 80243e4:	685b      	ldr	r3, [r3, #4]
 80243e6:	f023 0203 	bic.w	r2, r3, #3
 80243ea:	687b      	ldr	r3, [r7, #4]
 80243ec:	685b      	ldr	r3, [r3, #4]
 80243ee:	4936      	ldr	r1, [pc, #216]	; (80244c8 <HAL_RCC_ClockConfig+0x1c4>)
 80243f0:	4313      	orrs	r3, r2
 80243f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80243f4:	f7fd ff9a 	bl	802232c <HAL_GetTick>
 80243f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80243fa:	e00a      	b.n	8024412 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80243fc:	f7fd ff96 	bl	802232c <HAL_GetTick>
 8024400:	4602      	mov	r2, r0
 8024402:	68fb      	ldr	r3, [r7, #12]
 8024404:	1ad3      	subs	r3, r2, r3
 8024406:	f241 3288 	movw	r2, #5000	; 0x1388
 802440a:	4293      	cmp	r3, r2
 802440c:	d901      	bls.n	8024412 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 802440e:	2303      	movs	r3, #3
 8024410:	e053      	b.n	80244ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8024412:	4b2d      	ldr	r3, [pc, #180]	; (80244c8 <HAL_RCC_ClockConfig+0x1c4>)
 8024414:	685b      	ldr	r3, [r3, #4]
 8024416:	f003 020c 	and.w	r2, r3, #12
 802441a:	687b      	ldr	r3, [r7, #4]
 802441c:	685b      	ldr	r3, [r3, #4]
 802441e:	009b      	lsls	r3, r3, #2
 8024420:	429a      	cmp	r2, r3
 8024422:	d1eb      	bne.n	80243fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8024424:	4b27      	ldr	r3, [pc, #156]	; (80244c4 <HAL_RCC_ClockConfig+0x1c0>)
 8024426:	681b      	ldr	r3, [r3, #0]
 8024428:	f003 0307 	and.w	r3, r3, #7
 802442c:	683a      	ldr	r2, [r7, #0]
 802442e:	429a      	cmp	r2, r3
 8024430:	d210      	bcs.n	8024454 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8024432:	4b24      	ldr	r3, [pc, #144]	; (80244c4 <HAL_RCC_ClockConfig+0x1c0>)
 8024434:	681b      	ldr	r3, [r3, #0]
 8024436:	f023 0207 	bic.w	r2, r3, #7
 802443a:	4922      	ldr	r1, [pc, #136]	; (80244c4 <HAL_RCC_ClockConfig+0x1c0>)
 802443c:	683b      	ldr	r3, [r7, #0]
 802443e:	4313      	orrs	r3, r2
 8024440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8024442:	4b20      	ldr	r3, [pc, #128]	; (80244c4 <HAL_RCC_ClockConfig+0x1c0>)
 8024444:	681b      	ldr	r3, [r3, #0]
 8024446:	f003 0307 	and.w	r3, r3, #7
 802444a:	683a      	ldr	r2, [r7, #0]
 802444c:	429a      	cmp	r2, r3
 802444e:	d001      	beq.n	8024454 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8024450:	2301      	movs	r3, #1
 8024452:	e032      	b.n	80244ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8024454:	687b      	ldr	r3, [r7, #4]
 8024456:	681b      	ldr	r3, [r3, #0]
 8024458:	f003 0304 	and.w	r3, r3, #4
 802445c:	2b00      	cmp	r3, #0
 802445e:	d008      	beq.n	8024472 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8024460:	4b19      	ldr	r3, [pc, #100]	; (80244c8 <HAL_RCC_ClockConfig+0x1c4>)
 8024462:	685b      	ldr	r3, [r3, #4]
 8024464:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8024468:	687b      	ldr	r3, [r7, #4]
 802446a:	68db      	ldr	r3, [r3, #12]
 802446c:	4916      	ldr	r1, [pc, #88]	; (80244c8 <HAL_RCC_ClockConfig+0x1c4>)
 802446e:	4313      	orrs	r3, r2
 8024470:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8024472:	687b      	ldr	r3, [r7, #4]
 8024474:	681b      	ldr	r3, [r3, #0]
 8024476:	f003 0308 	and.w	r3, r3, #8
 802447a:	2b00      	cmp	r3, #0
 802447c:	d009      	beq.n	8024492 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 802447e:	4b12      	ldr	r3, [pc, #72]	; (80244c8 <HAL_RCC_ClockConfig+0x1c4>)
 8024480:	685b      	ldr	r3, [r3, #4]
 8024482:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8024486:	687b      	ldr	r3, [r7, #4]
 8024488:	691b      	ldr	r3, [r3, #16]
 802448a:	00db      	lsls	r3, r3, #3
 802448c:	490e      	ldr	r1, [pc, #56]	; (80244c8 <HAL_RCC_ClockConfig+0x1c4>)
 802448e:	4313      	orrs	r3, r2
 8024490:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8024492:	f000 f821 	bl	80244d8 <HAL_RCC_GetSysClockFreq>
 8024496:	4602      	mov	r2, r0
 8024498:	4b0b      	ldr	r3, [pc, #44]	; (80244c8 <HAL_RCC_ClockConfig+0x1c4>)
 802449a:	685b      	ldr	r3, [r3, #4]
 802449c:	091b      	lsrs	r3, r3, #4
 802449e:	f003 030f 	and.w	r3, r3, #15
 80244a2:	490a      	ldr	r1, [pc, #40]	; (80244cc <HAL_RCC_ClockConfig+0x1c8>)
 80244a4:	5ccb      	ldrb	r3, [r1, r3]
 80244a6:	fa22 f303 	lsr.w	r3, r2, r3
 80244aa:	4a09      	ldr	r2, [pc, #36]	; (80244d0 <HAL_RCC_ClockConfig+0x1cc>)
 80244ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80244ae:	4b09      	ldr	r3, [pc, #36]	; (80244d4 <HAL_RCC_ClockConfig+0x1d0>)
 80244b0:	681b      	ldr	r3, [r3, #0]
 80244b2:	4618      	mov	r0, r3
 80244b4:	f7fd fef8 	bl	80222a8 <HAL_InitTick>

  return HAL_OK;
 80244b8:	2300      	movs	r3, #0
}
 80244ba:	4618      	mov	r0, r3
 80244bc:	3710      	adds	r7, #16
 80244be:	46bd      	mov	sp, r7
 80244c0:	bd80      	pop	{r7, pc}
 80244c2:	bf00      	nop
 80244c4:	40022000 	.word	0x40022000
 80244c8:	40021000 	.word	0x40021000
 80244cc:	08026e9c 	.word	0x08026e9c
 80244d0:	200001f8 	.word	0x200001f8
 80244d4:	200001fc 	.word	0x200001fc

080244d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80244d8:	b490      	push	{r4, r7}
 80244da:	b08a      	sub	sp, #40	; 0x28
 80244dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80244de:	4b2a      	ldr	r3, [pc, #168]	; (8024588 <HAL_RCC_GetSysClockFreq+0xb0>)
 80244e0:	1d3c      	adds	r4, r7, #4
 80244e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80244e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80244e8:	f240 2301 	movw	r3, #513	; 0x201
 80244ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80244ee:	2300      	movs	r3, #0
 80244f0:	61fb      	str	r3, [r7, #28]
 80244f2:	2300      	movs	r3, #0
 80244f4:	61bb      	str	r3, [r7, #24]
 80244f6:	2300      	movs	r3, #0
 80244f8:	627b      	str	r3, [r7, #36]	; 0x24
 80244fa:	2300      	movs	r3, #0
 80244fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80244fe:	2300      	movs	r3, #0
 8024500:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8024502:	4b22      	ldr	r3, [pc, #136]	; (802458c <HAL_RCC_GetSysClockFreq+0xb4>)
 8024504:	685b      	ldr	r3, [r3, #4]
 8024506:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8024508:	69fb      	ldr	r3, [r7, #28]
 802450a:	f003 030c 	and.w	r3, r3, #12
 802450e:	2b04      	cmp	r3, #4
 8024510:	d002      	beq.n	8024518 <HAL_RCC_GetSysClockFreq+0x40>
 8024512:	2b08      	cmp	r3, #8
 8024514:	d003      	beq.n	802451e <HAL_RCC_GetSysClockFreq+0x46>
 8024516:	e02d      	b.n	8024574 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8024518:	4b1d      	ldr	r3, [pc, #116]	; (8024590 <HAL_RCC_GetSysClockFreq+0xb8>)
 802451a:	623b      	str	r3, [r7, #32]
      break;
 802451c:	e02d      	b.n	802457a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 802451e:	69fb      	ldr	r3, [r7, #28]
 8024520:	0c9b      	lsrs	r3, r3, #18
 8024522:	f003 030f 	and.w	r3, r3, #15
 8024526:	f107 0228 	add.w	r2, r7, #40	; 0x28
 802452a:	4413      	add	r3, r2
 802452c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8024530:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8024532:	69fb      	ldr	r3, [r7, #28]
 8024534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8024538:	2b00      	cmp	r3, #0
 802453a:	d013      	beq.n	8024564 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 802453c:	4b13      	ldr	r3, [pc, #76]	; (802458c <HAL_RCC_GetSysClockFreq+0xb4>)
 802453e:	685b      	ldr	r3, [r3, #4]
 8024540:	0c5b      	lsrs	r3, r3, #17
 8024542:	f003 0301 	and.w	r3, r3, #1
 8024546:	f107 0228 	add.w	r2, r7, #40	; 0x28
 802454a:	4413      	add	r3, r2
 802454c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8024550:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8024552:	697b      	ldr	r3, [r7, #20]
 8024554:	4a0e      	ldr	r2, [pc, #56]	; (8024590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8024556:	fb02 f203 	mul.w	r2, r2, r3
 802455a:	69bb      	ldr	r3, [r7, #24]
 802455c:	fbb2 f3f3 	udiv	r3, r2, r3
 8024560:	627b      	str	r3, [r7, #36]	; 0x24
 8024562:	e004      	b.n	802456e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8024564:	697b      	ldr	r3, [r7, #20]
 8024566:	4a0b      	ldr	r2, [pc, #44]	; (8024594 <HAL_RCC_GetSysClockFreq+0xbc>)
 8024568:	fb02 f303 	mul.w	r3, r2, r3
 802456c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 802456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024570:	623b      	str	r3, [r7, #32]
      break;
 8024572:	e002      	b.n	802457a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8024574:	4b06      	ldr	r3, [pc, #24]	; (8024590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8024576:	623b      	str	r3, [r7, #32]
      break;
 8024578:	bf00      	nop
    }
  }
  return sysclockfreq;
 802457a:	6a3b      	ldr	r3, [r7, #32]
}
 802457c:	4618      	mov	r0, r3
 802457e:	3728      	adds	r7, #40	; 0x28
 8024580:	46bd      	mov	sp, r7
 8024582:	bc90      	pop	{r4, r7}
 8024584:	4770      	bx	lr
 8024586:	bf00      	nop
 8024588:	08026e3c 	.word	0x08026e3c
 802458c:	40021000 	.word	0x40021000
 8024590:	007a1200 	.word	0x007a1200
 8024594:	003d0900 	.word	0x003d0900

08024598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8024598:	b480      	push	{r7}
 802459a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 802459c:	4b02      	ldr	r3, [pc, #8]	; (80245a8 <HAL_RCC_GetHCLKFreq+0x10>)
 802459e:	681b      	ldr	r3, [r3, #0]
}
 80245a0:	4618      	mov	r0, r3
 80245a2:	46bd      	mov	sp, r7
 80245a4:	bc80      	pop	{r7}
 80245a6:	4770      	bx	lr
 80245a8:	200001f8 	.word	0x200001f8

080245ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80245ac:	b580      	push	{r7, lr}
 80245ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80245b0:	f7ff fff2 	bl	8024598 <HAL_RCC_GetHCLKFreq>
 80245b4:	4602      	mov	r2, r0
 80245b6:	4b05      	ldr	r3, [pc, #20]	; (80245cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80245b8:	685b      	ldr	r3, [r3, #4]
 80245ba:	0a1b      	lsrs	r3, r3, #8
 80245bc:	f003 0307 	and.w	r3, r3, #7
 80245c0:	4903      	ldr	r1, [pc, #12]	; (80245d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80245c2:	5ccb      	ldrb	r3, [r1, r3]
 80245c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80245c8:	4618      	mov	r0, r3
 80245ca:	bd80      	pop	{r7, pc}
 80245cc:	40021000 	.word	0x40021000
 80245d0:	08026eac 	.word	0x08026eac

080245d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80245d4:	b580      	push	{r7, lr}
 80245d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80245d8:	f7ff ffde 	bl	8024598 <HAL_RCC_GetHCLKFreq>
 80245dc:	4602      	mov	r2, r0
 80245de:	4b05      	ldr	r3, [pc, #20]	; (80245f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80245e0:	685b      	ldr	r3, [r3, #4]
 80245e2:	0adb      	lsrs	r3, r3, #11
 80245e4:	f003 0307 	and.w	r3, r3, #7
 80245e8:	4903      	ldr	r1, [pc, #12]	; (80245f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80245ea:	5ccb      	ldrb	r3, [r1, r3]
 80245ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80245f0:	4618      	mov	r0, r3
 80245f2:	bd80      	pop	{r7, pc}
 80245f4:	40021000 	.word	0x40021000
 80245f8:	08026eac 	.word	0x08026eac

080245fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80245fc:	b480      	push	{r7}
 80245fe:	b085      	sub	sp, #20
 8024600:	af00      	add	r7, sp, #0
 8024602:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8024604:	4b0a      	ldr	r3, [pc, #40]	; (8024630 <RCC_Delay+0x34>)
 8024606:	681b      	ldr	r3, [r3, #0]
 8024608:	4a0a      	ldr	r2, [pc, #40]	; (8024634 <RCC_Delay+0x38>)
 802460a:	fba2 2303 	umull	r2, r3, r2, r3
 802460e:	0a5b      	lsrs	r3, r3, #9
 8024610:	687a      	ldr	r2, [r7, #4]
 8024612:	fb02 f303 	mul.w	r3, r2, r3
 8024616:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8024618:	bf00      	nop
  }
  while (Delay --);
 802461a:	68fb      	ldr	r3, [r7, #12]
 802461c:	1e5a      	subs	r2, r3, #1
 802461e:	60fa      	str	r2, [r7, #12]
 8024620:	2b00      	cmp	r3, #0
 8024622:	d1f9      	bne.n	8024618 <RCC_Delay+0x1c>
}
 8024624:	bf00      	nop
 8024626:	bf00      	nop
 8024628:	3714      	adds	r7, #20
 802462a:	46bd      	mov	sp, r7
 802462c:	bc80      	pop	{r7}
 802462e:	4770      	bx	lr
 8024630:	200001f8 	.word	0x200001f8
 8024634:	10624dd3 	.word	0x10624dd3

08024638 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8024638:	b580      	push	{r7, lr}
 802463a:	b082      	sub	sp, #8
 802463c:	af00      	add	r7, sp, #0
 802463e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8024640:	687b      	ldr	r3, [r7, #4]
 8024642:	2b00      	cmp	r3, #0
 8024644:	d101      	bne.n	802464a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8024646:	2301      	movs	r3, #1
 8024648:	e076      	b.n	8024738 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 802464a:	687b      	ldr	r3, [r7, #4]
 802464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802464e:	2b00      	cmp	r3, #0
 8024650:	d108      	bne.n	8024664 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8024652:	687b      	ldr	r3, [r7, #4]
 8024654:	685b      	ldr	r3, [r3, #4]
 8024656:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802465a:	d009      	beq.n	8024670 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 802465c:	687b      	ldr	r3, [r7, #4]
 802465e:	2200      	movs	r2, #0
 8024660:	61da      	str	r2, [r3, #28]
 8024662:	e005      	b.n	8024670 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8024664:	687b      	ldr	r3, [r7, #4]
 8024666:	2200      	movs	r2, #0
 8024668:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 802466a:	687b      	ldr	r3, [r7, #4]
 802466c:	2200      	movs	r2, #0
 802466e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8024670:	687b      	ldr	r3, [r7, #4]
 8024672:	2200      	movs	r2, #0
 8024674:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8024676:	687b      	ldr	r3, [r7, #4]
 8024678:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802467c:	b2db      	uxtb	r3, r3
 802467e:	2b00      	cmp	r3, #0
 8024680:	d106      	bne.n	8024690 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8024682:	687b      	ldr	r3, [r7, #4]
 8024684:	2200      	movs	r2, #0
 8024686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 802468a:	6878      	ldr	r0, [r7, #4]
 802468c:	f7fd fc5a 	bl	8021f44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8024690:	687b      	ldr	r3, [r7, #4]
 8024692:	2202      	movs	r2, #2
 8024694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8024698:	687b      	ldr	r3, [r7, #4]
 802469a:	681b      	ldr	r3, [r3, #0]
 802469c:	681a      	ldr	r2, [r3, #0]
 802469e:	687b      	ldr	r3, [r7, #4]
 80246a0:	681b      	ldr	r3, [r3, #0]
 80246a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80246a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80246a8:	687b      	ldr	r3, [r7, #4]
 80246aa:	685b      	ldr	r3, [r3, #4]
 80246ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80246b0:	687b      	ldr	r3, [r7, #4]
 80246b2:	689b      	ldr	r3, [r3, #8]
 80246b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80246b8:	431a      	orrs	r2, r3
 80246ba:	687b      	ldr	r3, [r7, #4]
 80246bc:	68db      	ldr	r3, [r3, #12]
 80246be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80246c2:	431a      	orrs	r2, r3
 80246c4:	687b      	ldr	r3, [r7, #4]
 80246c6:	691b      	ldr	r3, [r3, #16]
 80246c8:	f003 0302 	and.w	r3, r3, #2
 80246cc:	431a      	orrs	r2, r3
 80246ce:	687b      	ldr	r3, [r7, #4]
 80246d0:	695b      	ldr	r3, [r3, #20]
 80246d2:	f003 0301 	and.w	r3, r3, #1
 80246d6:	431a      	orrs	r2, r3
 80246d8:	687b      	ldr	r3, [r7, #4]
 80246da:	699b      	ldr	r3, [r3, #24]
 80246dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80246e0:	431a      	orrs	r2, r3
 80246e2:	687b      	ldr	r3, [r7, #4]
 80246e4:	69db      	ldr	r3, [r3, #28]
 80246e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80246ea:	431a      	orrs	r2, r3
 80246ec:	687b      	ldr	r3, [r7, #4]
 80246ee:	6a1b      	ldr	r3, [r3, #32]
 80246f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80246f4:	ea42 0103 	orr.w	r1, r2, r3
 80246f8:	687b      	ldr	r3, [r7, #4]
 80246fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80246fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8024700:	687b      	ldr	r3, [r7, #4]
 8024702:	681b      	ldr	r3, [r3, #0]
 8024704:	430a      	orrs	r2, r1
 8024706:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8024708:	687b      	ldr	r3, [r7, #4]
 802470a:	699b      	ldr	r3, [r3, #24]
 802470c:	0c1a      	lsrs	r2, r3, #16
 802470e:	687b      	ldr	r3, [r7, #4]
 8024710:	681b      	ldr	r3, [r3, #0]
 8024712:	f002 0204 	and.w	r2, r2, #4
 8024716:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8024718:	687b      	ldr	r3, [r7, #4]
 802471a:	681b      	ldr	r3, [r3, #0]
 802471c:	69da      	ldr	r2, [r3, #28]
 802471e:	687b      	ldr	r3, [r7, #4]
 8024720:	681b      	ldr	r3, [r3, #0]
 8024722:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8024726:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8024728:	687b      	ldr	r3, [r7, #4]
 802472a:	2200      	movs	r2, #0
 802472c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 802472e:	687b      	ldr	r3, [r7, #4]
 8024730:	2201      	movs	r2, #1
 8024732:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8024736:	2300      	movs	r3, #0
}
 8024738:	4618      	mov	r0, r3
 802473a:	3708      	adds	r7, #8
 802473c:	46bd      	mov	sp, r7
 802473e:	bd80      	pop	{r7, pc}

08024740 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8024740:	b580      	push	{r7, lr}
 8024742:	b088      	sub	sp, #32
 8024744:	af00      	add	r7, sp, #0
 8024746:	60f8      	str	r0, [r7, #12]
 8024748:	60b9      	str	r1, [r7, #8]
 802474a:	603b      	str	r3, [r7, #0]
 802474c:	4613      	mov	r3, r2
 802474e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8024750:	2300      	movs	r3, #0
 8024752:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8024754:	68fb      	ldr	r3, [r7, #12]
 8024756:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 802475a:	2b01      	cmp	r3, #1
 802475c:	d101      	bne.n	8024762 <HAL_SPI_Transmit+0x22>
 802475e:	2302      	movs	r3, #2
 8024760:	e126      	b.n	80249b0 <HAL_SPI_Transmit+0x270>
 8024762:	68fb      	ldr	r3, [r7, #12]
 8024764:	2201      	movs	r2, #1
 8024766:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802476a:	f7fd fddf 	bl	802232c <HAL_GetTick>
 802476e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8024770:	88fb      	ldrh	r3, [r7, #6]
 8024772:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8024774:	68fb      	ldr	r3, [r7, #12]
 8024776:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802477a:	b2db      	uxtb	r3, r3
 802477c:	2b01      	cmp	r3, #1
 802477e:	d002      	beq.n	8024786 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8024780:	2302      	movs	r3, #2
 8024782:	77fb      	strb	r3, [r7, #31]
    goto error;
 8024784:	e10b      	b.n	802499e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8024786:	68bb      	ldr	r3, [r7, #8]
 8024788:	2b00      	cmp	r3, #0
 802478a:	d002      	beq.n	8024792 <HAL_SPI_Transmit+0x52>
 802478c:	88fb      	ldrh	r3, [r7, #6]
 802478e:	2b00      	cmp	r3, #0
 8024790:	d102      	bne.n	8024798 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8024792:	2301      	movs	r3, #1
 8024794:	77fb      	strb	r3, [r7, #31]
    goto error;
 8024796:	e102      	b.n	802499e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8024798:	68fb      	ldr	r3, [r7, #12]
 802479a:	2203      	movs	r2, #3
 802479c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80247a0:	68fb      	ldr	r3, [r7, #12]
 80247a2:	2200      	movs	r2, #0
 80247a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80247a6:	68fb      	ldr	r3, [r7, #12]
 80247a8:	68ba      	ldr	r2, [r7, #8]
 80247aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80247ac:	68fb      	ldr	r3, [r7, #12]
 80247ae:	88fa      	ldrh	r2, [r7, #6]
 80247b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80247b2:	68fb      	ldr	r3, [r7, #12]
 80247b4:	88fa      	ldrh	r2, [r7, #6]
 80247b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80247b8:	68fb      	ldr	r3, [r7, #12]
 80247ba:	2200      	movs	r2, #0
 80247bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80247be:	68fb      	ldr	r3, [r7, #12]
 80247c0:	2200      	movs	r2, #0
 80247c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80247c4:	68fb      	ldr	r3, [r7, #12]
 80247c6:	2200      	movs	r2, #0
 80247c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80247ca:	68fb      	ldr	r3, [r7, #12]
 80247cc:	2200      	movs	r2, #0
 80247ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80247d0:	68fb      	ldr	r3, [r7, #12]
 80247d2:	2200      	movs	r2, #0
 80247d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80247d6:	68fb      	ldr	r3, [r7, #12]
 80247d8:	689b      	ldr	r3, [r3, #8]
 80247da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80247de:	d10f      	bne.n	8024800 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80247e0:	68fb      	ldr	r3, [r7, #12]
 80247e2:	681b      	ldr	r3, [r3, #0]
 80247e4:	681a      	ldr	r2, [r3, #0]
 80247e6:	68fb      	ldr	r3, [r7, #12]
 80247e8:	681b      	ldr	r3, [r3, #0]
 80247ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80247ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80247f0:	68fb      	ldr	r3, [r7, #12]
 80247f2:	681b      	ldr	r3, [r3, #0]
 80247f4:	681a      	ldr	r2, [r3, #0]
 80247f6:	68fb      	ldr	r3, [r7, #12]
 80247f8:	681b      	ldr	r3, [r3, #0]
 80247fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80247fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8024800:	68fb      	ldr	r3, [r7, #12]
 8024802:	681b      	ldr	r3, [r3, #0]
 8024804:	681b      	ldr	r3, [r3, #0]
 8024806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802480a:	2b40      	cmp	r3, #64	; 0x40
 802480c:	d007      	beq.n	802481e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802480e:	68fb      	ldr	r3, [r7, #12]
 8024810:	681b      	ldr	r3, [r3, #0]
 8024812:	681a      	ldr	r2, [r3, #0]
 8024814:	68fb      	ldr	r3, [r7, #12]
 8024816:	681b      	ldr	r3, [r3, #0]
 8024818:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802481c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 802481e:	68fb      	ldr	r3, [r7, #12]
 8024820:	68db      	ldr	r3, [r3, #12]
 8024822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8024826:	d14b      	bne.n	80248c0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8024828:	68fb      	ldr	r3, [r7, #12]
 802482a:	685b      	ldr	r3, [r3, #4]
 802482c:	2b00      	cmp	r3, #0
 802482e:	d002      	beq.n	8024836 <HAL_SPI_Transmit+0xf6>
 8024830:	8afb      	ldrh	r3, [r7, #22]
 8024832:	2b01      	cmp	r3, #1
 8024834:	d13e      	bne.n	80248b4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8024836:	68fb      	ldr	r3, [r7, #12]
 8024838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802483a:	881a      	ldrh	r2, [r3, #0]
 802483c:	68fb      	ldr	r3, [r7, #12]
 802483e:	681b      	ldr	r3, [r3, #0]
 8024840:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8024842:	68fb      	ldr	r3, [r7, #12]
 8024844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024846:	1c9a      	adds	r2, r3, #2
 8024848:	68fb      	ldr	r3, [r7, #12]
 802484a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 802484c:	68fb      	ldr	r3, [r7, #12]
 802484e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8024850:	b29b      	uxth	r3, r3
 8024852:	3b01      	subs	r3, #1
 8024854:	b29a      	uxth	r2, r3
 8024856:	68fb      	ldr	r3, [r7, #12]
 8024858:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 802485a:	e02b      	b.n	80248b4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 802485c:	68fb      	ldr	r3, [r7, #12]
 802485e:	681b      	ldr	r3, [r3, #0]
 8024860:	689b      	ldr	r3, [r3, #8]
 8024862:	f003 0302 	and.w	r3, r3, #2
 8024866:	2b02      	cmp	r3, #2
 8024868:	d112      	bne.n	8024890 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802486a:	68fb      	ldr	r3, [r7, #12]
 802486c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802486e:	881a      	ldrh	r2, [r3, #0]
 8024870:	68fb      	ldr	r3, [r7, #12]
 8024872:	681b      	ldr	r3, [r3, #0]
 8024874:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8024876:	68fb      	ldr	r3, [r7, #12]
 8024878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802487a:	1c9a      	adds	r2, r3, #2
 802487c:	68fb      	ldr	r3, [r7, #12]
 802487e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8024880:	68fb      	ldr	r3, [r7, #12]
 8024882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8024884:	b29b      	uxth	r3, r3
 8024886:	3b01      	subs	r3, #1
 8024888:	b29a      	uxth	r2, r3
 802488a:	68fb      	ldr	r3, [r7, #12]
 802488c:	86da      	strh	r2, [r3, #54]	; 0x36
 802488e:	e011      	b.n	80248b4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8024890:	f7fd fd4c 	bl	802232c <HAL_GetTick>
 8024894:	4602      	mov	r2, r0
 8024896:	69bb      	ldr	r3, [r7, #24]
 8024898:	1ad3      	subs	r3, r2, r3
 802489a:	683a      	ldr	r2, [r7, #0]
 802489c:	429a      	cmp	r2, r3
 802489e:	d803      	bhi.n	80248a8 <HAL_SPI_Transmit+0x168>
 80248a0:	683b      	ldr	r3, [r7, #0]
 80248a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80248a6:	d102      	bne.n	80248ae <HAL_SPI_Transmit+0x16e>
 80248a8:	683b      	ldr	r3, [r7, #0]
 80248aa:	2b00      	cmp	r3, #0
 80248ac:	d102      	bne.n	80248b4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80248ae:	2303      	movs	r3, #3
 80248b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80248b2:	e074      	b.n	802499e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80248b4:	68fb      	ldr	r3, [r7, #12]
 80248b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80248b8:	b29b      	uxth	r3, r3
 80248ba:	2b00      	cmp	r3, #0
 80248bc:	d1ce      	bne.n	802485c <HAL_SPI_Transmit+0x11c>
 80248be:	e04c      	b.n	802495a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80248c0:	68fb      	ldr	r3, [r7, #12]
 80248c2:	685b      	ldr	r3, [r3, #4]
 80248c4:	2b00      	cmp	r3, #0
 80248c6:	d002      	beq.n	80248ce <HAL_SPI_Transmit+0x18e>
 80248c8:	8afb      	ldrh	r3, [r7, #22]
 80248ca:	2b01      	cmp	r3, #1
 80248cc:	d140      	bne.n	8024950 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80248ce:	68fb      	ldr	r3, [r7, #12]
 80248d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80248d2:	68fb      	ldr	r3, [r7, #12]
 80248d4:	681b      	ldr	r3, [r3, #0]
 80248d6:	330c      	adds	r3, #12
 80248d8:	7812      	ldrb	r2, [r2, #0]
 80248da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80248dc:	68fb      	ldr	r3, [r7, #12]
 80248de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80248e0:	1c5a      	adds	r2, r3, #1
 80248e2:	68fb      	ldr	r3, [r7, #12]
 80248e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80248e6:	68fb      	ldr	r3, [r7, #12]
 80248e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80248ea:	b29b      	uxth	r3, r3
 80248ec:	3b01      	subs	r3, #1
 80248ee:	b29a      	uxth	r2, r3
 80248f0:	68fb      	ldr	r3, [r7, #12]
 80248f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80248f4:	e02c      	b.n	8024950 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80248f6:	68fb      	ldr	r3, [r7, #12]
 80248f8:	681b      	ldr	r3, [r3, #0]
 80248fa:	689b      	ldr	r3, [r3, #8]
 80248fc:	f003 0302 	and.w	r3, r3, #2
 8024900:	2b02      	cmp	r3, #2
 8024902:	d113      	bne.n	802492c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8024904:	68fb      	ldr	r3, [r7, #12]
 8024906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8024908:	68fb      	ldr	r3, [r7, #12]
 802490a:	681b      	ldr	r3, [r3, #0]
 802490c:	330c      	adds	r3, #12
 802490e:	7812      	ldrb	r2, [r2, #0]
 8024910:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8024912:	68fb      	ldr	r3, [r7, #12]
 8024914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024916:	1c5a      	adds	r2, r3, #1
 8024918:	68fb      	ldr	r3, [r7, #12]
 802491a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802491c:	68fb      	ldr	r3, [r7, #12]
 802491e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8024920:	b29b      	uxth	r3, r3
 8024922:	3b01      	subs	r3, #1
 8024924:	b29a      	uxth	r2, r3
 8024926:	68fb      	ldr	r3, [r7, #12]
 8024928:	86da      	strh	r2, [r3, #54]	; 0x36
 802492a:	e011      	b.n	8024950 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802492c:	f7fd fcfe 	bl	802232c <HAL_GetTick>
 8024930:	4602      	mov	r2, r0
 8024932:	69bb      	ldr	r3, [r7, #24]
 8024934:	1ad3      	subs	r3, r2, r3
 8024936:	683a      	ldr	r2, [r7, #0]
 8024938:	429a      	cmp	r2, r3
 802493a:	d803      	bhi.n	8024944 <HAL_SPI_Transmit+0x204>
 802493c:	683b      	ldr	r3, [r7, #0]
 802493e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024942:	d102      	bne.n	802494a <HAL_SPI_Transmit+0x20a>
 8024944:	683b      	ldr	r3, [r7, #0]
 8024946:	2b00      	cmp	r3, #0
 8024948:	d102      	bne.n	8024950 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 802494a:	2303      	movs	r3, #3
 802494c:	77fb      	strb	r3, [r7, #31]
          goto error;
 802494e:	e026      	b.n	802499e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8024950:	68fb      	ldr	r3, [r7, #12]
 8024952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8024954:	b29b      	uxth	r3, r3
 8024956:	2b00      	cmp	r3, #0
 8024958:	d1cd      	bne.n	80248f6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 802495a:	69ba      	ldr	r2, [r7, #24]
 802495c:	6839      	ldr	r1, [r7, #0]
 802495e:	68f8      	ldr	r0, [r7, #12]
 8024960:	f000 f8b2 	bl	8024ac8 <SPI_EndRxTxTransaction>
 8024964:	4603      	mov	r3, r0
 8024966:	2b00      	cmp	r3, #0
 8024968:	d002      	beq.n	8024970 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 802496a:	68fb      	ldr	r3, [r7, #12]
 802496c:	2220      	movs	r2, #32
 802496e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8024970:	68fb      	ldr	r3, [r7, #12]
 8024972:	689b      	ldr	r3, [r3, #8]
 8024974:	2b00      	cmp	r3, #0
 8024976:	d10a      	bne.n	802498e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8024978:	2300      	movs	r3, #0
 802497a:	613b      	str	r3, [r7, #16]
 802497c:	68fb      	ldr	r3, [r7, #12]
 802497e:	681b      	ldr	r3, [r3, #0]
 8024980:	68db      	ldr	r3, [r3, #12]
 8024982:	613b      	str	r3, [r7, #16]
 8024984:	68fb      	ldr	r3, [r7, #12]
 8024986:	681b      	ldr	r3, [r3, #0]
 8024988:	689b      	ldr	r3, [r3, #8]
 802498a:	613b      	str	r3, [r7, #16]
 802498c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802498e:	68fb      	ldr	r3, [r7, #12]
 8024990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024992:	2b00      	cmp	r3, #0
 8024994:	d002      	beq.n	802499c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8024996:	2301      	movs	r3, #1
 8024998:	77fb      	strb	r3, [r7, #31]
 802499a:	e000      	b.n	802499e <HAL_SPI_Transmit+0x25e>
  }

error:
 802499c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 802499e:	68fb      	ldr	r3, [r7, #12]
 80249a0:	2201      	movs	r2, #1
 80249a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80249a6:	68fb      	ldr	r3, [r7, #12]
 80249a8:	2200      	movs	r2, #0
 80249aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80249ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80249b0:	4618      	mov	r0, r3
 80249b2:	3720      	adds	r7, #32
 80249b4:	46bd      	mov	sp, r7
 80249b6:	bd80      	pop	{r7, pc}

080249b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80249b8:	b580      	push	{r7, lr}
 80249ba:	b088      	sub	sp, #32
 80249bc:	af00      	add	r7, sp, #0
 80249be:	60f8      	str	r0, [r7, #12]
 80249c0:	60b9      	str	r1, [r7, #8]
 80249c2:	603b      	str	r3, [r7, #0]
 80249c4:	4613      	mov	r3, r2
 80249c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80249c8:	f7fd fcb0 	bl	802232c <HAL_GetTick>
 80249cc:	4602      	mov	r2, r0
 80249ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80249d0:	1a9b      	subs	r3, r3, r2
 80249d2:	683a      	ldr	r2, [r7, #0]
 80249d4:	4413      	add	r3, r2
 80249d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80249d8:	f7fd fca8 	bl	802232c <HAL_GetTick>
 80249dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80249de:	4b39      	ldr	r3, [pc, #228]	; (8024ac4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80249e0:	681b      	ldr	r3, [r3, #0]
 80249e2:	015b      	lsls	r3, r3, #5
 80249e4:	0d1b      	lsrs	r3, r3, #20
 80249e6:	69fa      	ldr	r2, [r7, #28]
 80249e8:	fb02 f303 	mul.w	r3, r2, r3
 80249ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80249ee:	e054      	b.n	8024a9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80249f0:	683b      	ldr	r3, [r7, #0]
 80249f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80249f6:	d050      	beq.n	8024a9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80249f8:	f7fd fc98 	bl	802232c <HAL_GetTick>
 80249fc:	4602      	mov	r2, r0
 80249fe:	69bb      	ldr	r3, [r7, #24]
 8024a00:	1ad3      	subs	r3, r2, r3
 8024a02:	69fa      	ldr	r2, [r7, #28]
 8024a04:	429a      	cmp	r2, r3
 8024a06:	d902      	bls.n	8024a0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8024a08:	69fb      	ldr	r3, [r7, #28]
 8024a0a:	2b00      	cmp	r3, #0
 8024a0c:	d13d      	bne.n	8024a8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8024a0e:	68fb      	ldr	r3, [r7, #12]
 8024a10:	681b      	ldr	r3, [r3, #0]
 8024a12:	685a      	ldr	r2, [r3, #4]
 8024a14:	68fb      	ldr	r3, [r7, #12]
 8024a16:	681b      	ldr	r3, [r3, #0]
 8024a18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8024a1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8024a1e:	68fb      	ldr	r3, [r7, #12]
 8024a20:	685b      	ldr	r3, [r3, #4]
 8024a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8024a26:	d111      	bne.n	8024a4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8024a28:	68fb      	ldr	r3, [r7, #12]
 8024a2a:	689b      	ldr	r3, [r3, #8]
 8024a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8024a30:	d004      	beq.n	8024a3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8024a32:	68fb      	ldr	r3, [r7, #12]
 8024a34:	689b      	ldr	r3, [r3, #8]
 8024a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8024a3a:	d107      	bne.n	8024a4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8024a3c:	68fb      	ldr	r3, [r7, #12]
 8024a3e:	681b      	ldr	r3, [r3, #0]
 8024a40:	681a      	ldr	r2, [r3, #0]
 8024a42:	68fb      	ldr	r3, [r7, #12]
 8024a44:	681b      	ldr	r3, [r3, #0]
 8024a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8024a4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024a4c:	68fb      	ldr	r3, [r7, #12]
 8024a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8024a54:	d10f      	bne.n	8024a76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8024a56:	68fb      	ldr	r3, [r7, #12]
 8024a58:	681b      	ldr	r3, [r3, #0]
 8024a5a:	681a      	ldr	r2, [r3, #0]
 8024a5c:	68fb      	ldr	r3, [r7, #12]
 8024a5e:	681b      	ldr	r3, [r3, #0]
 8024a60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8024a64:	601a      	str	r2, [r3, #0]
 8024a66:	68fb      	ldr	r3, [r7, #12]
 8024a68:	681b      	ldr	r3, [r3, #0]
 8024a6a:	681a      	ldr	r2, [r3, #0]
 8024a6c:	68fb      	ldr	r3, [r7, #12]
 8024a6e:	681b      	ldr	r3, [r3, #0]
 8024a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8024a74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8024a76:	68fb      	ldr	r3, [r7, #12]
 8024a78:	2201      	movs	r2, #1
 8024a7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8024a7e:	68fb      	ldr	r3, [r7, #12]
 8024a80:	2200      	movs	r2, #0
 8024a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8024a86:	2303      	movs	r3, #3
 8024a88:	e017      	b.n	8024aba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8024a8a:	697b      	ldr	r3, [r7, #20]
 8024a8c:	2b00      	cmp	r3, #0
 8024a8e:	d101      	bne.n	8024a94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8024a90:	2300      	movs	r3, #0
 8024a92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8024a94:	697b      	ldr	r3, [r7, #20]
 8024a96:	3b01      	subs	r3, #1
 8024a98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8024a9a:	68fb      	ldr	r3, [r7, #12]
 8024a9c:	681b      	ldr	r3, [r3, #0]
 8024a9e:	689a      	ldr	r2, [r3, #8]
 8024aa0:	68bb      	ldr	r3, [r7, #8]
 8024aa2:	4013      	ands	r3, r2
 8024aa4:	68ba      	ldr	r2, [r7, #8]
 8024aa6:	429a      	cmp	r2, r3
 8024aa8:	bf0c      	ite	eq
 8024aaa:	2301      	moveq	r3, #1
 8024aac:	2300      	movne	r3, #0
 8024aae:	b2db      	uxtb	r3, r3
 8024ab0:	461a      	mov	r2, r3
 8024ab2:	79fb      	ldrb	r3, [r7, #7]
 8024ab4:	429a      	cmp	r2, r3
 8024ab6:	d19b      	bne.n	80249f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8024ab8:	2300      	movs	r3, #0
}
 8024aba:	4618      	mov	r0, r3
 8024abc:	3720      	adds	r7, #32
 8024abe:	46bd      	mov	sp, r7
 8024ac0:	bd80      	pop	{r7, pc}
 8024ac2:	bf00      	nop
 8024ac4:	200001f8 	.word	0x200001f8

08024ac8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8024ac8:	b580      	push	{r7, lr}
 8024aca:	b086      	sub	sp, #24
 8024acc:	af02      	add	r7, sp, #8
 8024ace:	60f8      	str	r0, [r7, #12]
 8024ad0:	60b9      	str	r1, [r7, #8]
 8024ad2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8024ad4:	687b      	ldr	r3, [r7, #4]
 8024ad6:	9300      	str	r3, [sp, #0]
 8024ad8:	68bb      	ldr	r3, [r7, #8]
 8024ada:	2200      	movs	r2, #0
 8024adc:	2180      	movs	r1, #128	; 0x80
 8024ade:	68f8      	ldr	r0, [r7, #12]
 8024ae0:	f7ff ff6a 	bl	80249b8 <SPI_WaitFlagStateUntilTimeout>
 8024ae4:	4603      	mov	r3, r0
 8024ae6:	2b00      	cmp	r3, #0
 8024ae8:	d007      	beq.n	8024afa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8024aea:	68fb      	ldr	r3, [r7, #12]
 8024aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024aee:	f043 0220 	orr.w	r2, r3, #32
 8024af2:	68fb      	ldr	r3, [r7, #12]
 8024af4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8024af6:	2303      	movs	r3, #3
 8024af8:	e000      	b.n	8024afc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8024afa:	2300      	movs	r3, #0
}
 8024afc:	4618      	mov	r0, r3
 8024afe:	3710      	adds	r7, #16
 8024b00:	46bd      	mov	sp, r7
 8024b02:	bd80      	pop	{r7, pc}

08024b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8024b04:	b580      	push	{r7, lr}
 8024b06:	b082      	sub	sp, #8
 8024b08:	af00      	add	r7, sp, #0
 8024b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8024b0c:	687b      	ldr	r3, [r7, #4]
 8024b0e:	2b00      	cmp	r3, #0
 8024b10:	d101      	bne.n	8024b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8024b12:	2301      	movs	r3, #1
 8024b14:	e041      	b.n	8024b9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8024b16:	687b      	ldr	r3, [r7, #4]
 8024b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8024b1c:	b2db      	uxtb	r3, r3
 8024b1e:	2b00      	cmp	r3, #0
 8024b20:	d106      	bne.n	8024b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8024b22:	687b      	ldr	r3, [r7, #4]
 8024b24:	2200      	movs	r2, #0
 8024b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8024b2a:	6878      	ldr	r0, [r7, #4]
 8024b2c:	f7fd fa4a 	bl	8021fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8024b30:	687b      	ldr	r3, [r7, #4]
 8024b32:	2202      	movs	r2, #2
 8024b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8024b38:	687b      	ldr	r3, [r7, #4]
 8024b3a:	681a      	ldr	r2, [r3, #0]
 8024b3c:	687b      	ldr	r3, [r7, #4]
 8024b3e:	3304      	adds	r3, #4
 8024b40:	4619      	mov	r1, r3
 8024b42:	4610      	mov	r0, r2
 8024b44:	f000 f9ba 	bl	8024ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8024b48:	687b      	ldr	r3, [r7, #4]
 8024b4a:	2201      	movs	r2, #1
 8024b4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8024b50:	687b      	ldr	r3, [r7, #4]
 8024b52:	2201      	movs	r2, #1
 8024b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8024b58:	687b      	ldr	r3, [r7, #4]
 8024b5a:	2201      	movs	r2, #1
 8024b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8024b60:	687b      	ldr	r3, [r7, #4]
 8024b62:	2201      	movs	r2, #1
 8024b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8024b68:	687b      	ldr	r3, [r7, #4]
 8024b6a:	2201      	movs	r2, #1
 8024b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8024b70:	687b      	ldr	r3, [r7, #4]
 8024b72:	2201      	movs	r2, #1
 8024b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8024b78:	687b      	ldr	r3, [r7, #4]
 8024b7a:	2201      	movs	r2, #1
 8024b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8024b80:	687b      	ldr	r3, [r7, #4]
 8024b82:	2201      	movs	r2, #1
 8024b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8024b88:	687b      	ldr	r3, [r7, #4]
 8024b8a:	2201      	movs	r2, #1
 8024b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8024b90:	687b      	ldr	r3, [r7, #4]
 8024b92:	2201      	movs	r2, #1
 8024b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8024b98:	2300      	movs	r3, #0
}
 8024b9a:	4618      	mov	r0, r3
 8024b9c:	3708      	adds	r7, #8
 8024b9e:	46bd      	mov	sp, r7
 8024ba0:	bd80      	pop	{r7, pc}
	...

08024ba4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8024ba4:	b480      	push	{r7}
 8024ba6:	b085      	sub	sp, #20
 8024ba8:	af00      	add	r7, sp, #0
 8024baa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8024bac:	687b      	ldr	r3, [r7, #4]
 8024bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8024bb2:	b2db      	uxtb	r3, r3
 8024bb4:	2b01      	cmp	r3, #1
 8024bb6:	d001      	beq.n	8024bbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8024bb8:	2301      	movs	r3, #1
 8024bba:	e044      	b.n	8024c46 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8024bbc:	687b      	ldr	r3, [r7, #4]
 8024bbe:	2202      	movs	r2, #2
 8024bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8024bc4:	687b      	ldr	r3, [r7, #4]
 8024bc6:	681b      	ldr	r3, [r3, #0]
 8024bc8:	68da      	ldr	r2, [r3, #12]
 8024bca:	687b      	ldr	r3, [r7, #4]
 8024bcc:	681b      	ldr	r3, [r3, #0]
 8024bce:	f042 0201 	orr.w	r2, r2, #1
 8024bd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8024bd4:	687b      	ldr	r3, [r7, #4]
 8024bd6:	681b      	ldr	r3, [r3, #0]
 8024bd8:	4a1d      	ldr	r2, [pc, #116]	; (8024c50 <HAL_TIM_Base_Start_IT+0xac>)
 8024bda:	4293      	cmp	r3, r2
 8024bdc:	d018      	beq.n	8024c10 <HAL_TIM_Base_Start_IT+0x6c>
 8024bde:	687b      	ldr	r3, [r7, #4]
 8024be0:	681b      	ldr	r3, [r3, #0]
 8024be2:	4a1c      	ldr	r2, [pc, #112]	; (8024c54 <HAL_TIM_Base_Start_IT+0xb0>)
 8024be4:	4293      	cmp	r3, r2
 8024be6:	d013      	beq.n	8024c10 <HAL_TIM_Base_Start_IT+0x6c>
 8024be8:	687b      	ldr	r3, [r7, #4]
 8024bea:	681b      	ldr	r3, [r3, #0]
 8024bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8024bf0:	d00e      	beq.n	8024c10 <HAL_TIM_Base_Start_IT+0x6c>
 8024bf2:	687b      	ldr	r3, [r7, #4]
 8024bf4:	681b      	ldr	r3, [r3, #0]
 8024bf6:	4a18      	ldr	r2, [pc, #96]	; (8024c58 <HAL_TIM_Base_Start_IT+0xb4>)
 8024bf8:	4293      	cmp	r3, r2
 8024bfa:	d009      	beq.n	8024c10 <HAL_TIM_Base_Start_IT+0x6c>
 8024bfc:	687b      	ldr	r3, [r7, #4]
 8024bfe:	681b      	ldr	r3, [r3, #0]
 8024c00:	4a16      	ldr	r2, [pc, #88]	; (8024c5c <HAL_TIM_Base_Start_IT+0xb8>)
 8024c02:	4293      	cmp	r3, r2
 8024c04:	d004      	beq.n	8024c10 <HAL_TIM_Base_Start_IT+0x6c>
 8024c06:	687b      	ldr	r3, [r7, #4]
 8024c08:	681b      	ldr	r3, [r3, #0]
 8024c0a:	4a15      	ldr	r2, [pc, #84]	; (8024c60 <HAL_TIM_Base_Start_IT+0xbc>)
 8024c0c:	4293      	cmp	r3, r2
 8024c0e:	d111      	bne.n	8024c34 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8024c10:	687b      	ldr	r3, [r7, #4]
 8024c12:	681b      	ldr	r3, [r3, #0]
 8024c14:	689b      	ldr	r3, [r3, #8]
 8024c16:	f003 0307 	and.w	r3, r3, #7
 8024c1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8024c1c:	68fb      	ldr	r3, [r7, #12]
 8024c1e:	2b06      	cmp	r3, #6
 8024c20:	d010      	beq.n	8024c44 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8024c22:	687b      	ldr	r3, [r7, #4]
 8024c24:	681b      	ldr	r3, [r3, #0]
 8024c26:	681a      	ldr	r2, [r3, #0]
 8024c28:	687b      	ldr	r3, [r7, #4]
 8024c2a:	681b      	ldr	r3, [r3, #0]
 8024c2c:	f042 0201 	orr.w	r2, r2, #1
 8024c30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8024c32:	e007      	b.n	8024c44 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8024c34:	687b      	ldr	r3, [r7, #4]
 8024c36:	681b      	ldr	r3, [r3, #0]
 8024c38:	681a      	ldr	r2, [r3, #0]
 8024c3a:	687b      	ldr	r3, [r7, #4]
 8024c3c:	681b      	ldr	r3, [r3, #0]
 8024c3e:	f042 0201 	orr.w	r2, r2, #1
 8024c42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8024c44:	2300      	movs	r3, #0
}
 8024c46:	4618      	mov	r0, r3
 8024c48:	3714      	adds	r7, #20
 8024c4a:	46bd      	mov	sp, r7
 8024c4c:	bc80      	pop	{r7}
 8024c4e:	4770      	bx	lr
 8024c50:	40012c00 	.word	0x40012c00
 8024c54:	40013400 	.word	0x40013400
 8024c58:	40000400 	.word	0x40000400
 8024c5c:	40000800 	.word	0x40000800
 8024c60:	40000c00 	.word	0x40000c00

08024c64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8024c64:	b580      	push	{r7, lr}
 8024c66:	b082      	sub	sp, #8
 8024c68:	af00      	add	r7, sp, #0
 8024c6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8024c6c:	687b      	ldr	r3, [r7, #4]
 8024c6e:	681b      	ldr	r3, [r3, #0]
 8024c70:	691b      	ldr	r3, [r3, #16]
 8024c72:	f003 0302 	and.w	r3, r3, #2
 8024c76:	2b02      	cmp	r3, #2
 8024c78:	d122      	bne.n	8024cc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8024c7a:	687b      	ldr	r3, [r7, #4]
 8024c7c:	681b      	ldr	r3, [r3, #0]
 8024c7e:	68db      	ldr	r3, [r3, #12]
 8024c80:	f003 0302 	and.w	r3, r3, #2
 8024c84:	2b02      	cmp	r3, #2
 8024c86:	d11b      	bne.n	8024cc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8024c88:	687b      	ldr	r3, [r7, #4]
 8024c8a:	681b      	ldr	r3, [r3, #0]
 8024c8c:	f06f 0202 	mvn.w	r2, #2
 8024c90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8024c92:	687b      	ldr	r3, [r7, #4]
 8024c94:	2201      	movs	r2, #1
 8024c96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8024c98:	687b      	ldr	r3, [r7, #4]
 8024c9a:	681b      	ldr	r3, [r3, #0]
 8024c9c:	699b      	ldr	r3, [r3, #24]
 8024c9e:	f003 0303 	and.w	r3, r3, #3
 8024ca2:	2b00      	cmp	r3, #0
 8024ca4:	d003      	beq.n	8024cae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8024ca6:	6878      	ldr	r0, [r7, #4]
 8024ca8:	f000 f8ed 	bl	8024e86 <HAL_TIM_IC_CaptureCallback>
 8024cac:	e005      	b.n	8024cba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8024cae:	6878      	ldr	r0, [r7, #4]
 8024cb0:	f000 f8e0 	bl	8024e74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8024cb4:	6878      	ldr	r0, [r7, #4]
 8024cb6:	f000 f8ef 	bl	8024e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8024cba:	687b      	ldr	r3, [r7, #4]
 8024cbc:	2200      	movs	r2, #0
 8024cbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8024cc0:	687b      	ldr	r3, [r7, #4]
 8024cc2:	681b      	ldr	r3, [r3, #0]
 8024cc4:	691b      	ldr	r3, [r3, #16]
 8024cc6:	f003 0304 	and.w	r3, r3, #4
 8024cca:	2b04      	cmp	r3, #4
 8024ccc:	d122      	bne.n	8024d14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8024cce:	687b      	ldr	r3, [r7, #4]
 8024cd0:	681b      	ldr	r3, [r3, #0]
 8024cd2:	68db      	ldr	r3, [r3, #12]
 8024cd4:	f003 0304 	and.w	r3, r3, #4
 8024cd8:	2b04      	cmp	r3, #4
 8024cda:	d11b      	bne.n	8024d14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8024cdc:	687b      	ldr	r3, [r7, #4]
 8024cde:	681b      	ldr	r3, [r3, #0]
 8024ce0:	f06f 0204 	mvn.w	r2, #4
 8024ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8024ce6:	687b      	ldr	r3, [r7, #4]
 8024ce8:	2202      	movs	r2, #2
 8024cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8024cec:	687b      	ldr	r3, [r7, #4]
 8024cee:	681b      	ldr	r3, [r3, #0]
 8024cf0:	699b      	ldr	r3, [r3, #24]
 8024cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8024cf6:	2b00      	cmp	r3, #0
 8024cf8:	d003      	beq.n	8024d02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8024cfa:	6878      	ldr	r0, [r7, #4]
 8024cfc:	f000 f8c3 	bl	8024e86 <HAL_TIM_IC_CaptureCallback>
 8024d00:	e005      	b.n	8024d0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8024d02:	6878      	ldr	r0, [r7, #4]
 8024d04:	f000 f8b6 	bl	8024e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8024d08:	6878      	ldr	r0, [r7, #4]
 8024d0a:	f000 f8c5 	bl	8024e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8024d0e:	687b      	ldr	r3, [r7, #4]
 8024d10:	2200      	movs	r2, #0
 8024d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8024d14:	687b      	ldr	r3, [r7, #4]
 8024d16:	681b      	ldr	r3, [r3, #0]
 8024d18:	691b      	ldr	r3, [r3, #16]
 8024d1a:	f003 0308 	and.w	r3, r3, #8
 8024d1e:	2b08      	cmp	r3, #8
 8024d20:	d122      	bne.n	8024d68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8024d22:	687b      	ldr	r3, [r7, #4]
 8024d24:	681b      	ldr	r3, [r3, #0]
 8024d26:	68db      	ldr	r3, [r3, #12]
 8024d28:	f003 0308 	and.w	r3, r3, #8
 8024d2c:	2b08      	cmp	r3, #8
 8024d2e:	d11b      	bne.n	8024d68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8024d30:	687b      	ldr	r3, [r7, #4]
 8024d32:	681b      	ldr	r3, [r3, #0]
 8024d34:	f06f 0208 	mvn.w	r2, #8
 8024d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8024d3a:	687b      	ldr	r3, [r7, #4]
 8024d3c:	2204      	movs	r2, #4
 8024d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8024d40:	687b      	ldr	r3, [r7, #4]
 8024d42:	681b      	ldr	r3, [r3, #0]
 8024d44:	69db      	ldr	r3, [r3, #28]
 8024d46:	f003 0303 	and.w	r3, r3, #3
 8024d4a:	2b00      	cmp	r3, #0
 8024d4c:	d003      	beq.n	8024d56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8024d4e:	6878      	ldr	r0, [r7, #4]
 8024d50:	f000 f899 	bl	8024e86 <HAL_TIM_IC_CaptureCallback>
 8024d54:	e005      	b.n	8024d62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8024d56:	6878      	ldr	r0, [r7, #4]
 8024d58:	f000 f88c 	bl	8024e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8024d5c:	6878      	ldr	r0, [r7, #4]
 8024d5e:	f000 f89b 	bl	8024e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8024d62:	687b      	ldr	r3, [r7, #4]
 8024d64:	2200      	movs	r2, #0
 8024d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8024d68:	687b      	ldr	r3, [r7, #4]
 8024d6a:	681b      	ldr	r3, [r3, #0]
 8024d6c:	691b      	ldr	r3, [r3, #16]
 8024d6e:	f003 0310 	and.w	r3, r3, #16
 8024d72:	2b10      	cmp	r3, #16
 8024d74:	d122      	bne.n	8024dbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8024d76:	687b      	ldr	r3, [r7, #4]
 8024d78:	681b      	ldr	r3, [r3, #0]
 8024d7a:	68db      	ldr	r3, [r3, #12]
 8024d7c:	f003 0310 	and.w	r3, r3, #16
 8024d80:	2b10      	cmp	r3, #16
 8024d82:	d11b      	bne.n	8024dbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8024d84:	687b      	ldr	r3, [r7, #4]
 8024d86:	681b      	ldr	r3, [r3, #0]
 8024d88:	f06f 0210 	mvn.w	r2, #16
 8024d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8024d8e:	687b      	ldr	r3, [r7, #4]
 8024d90:	2208      	movs	r2, #8
 8024d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8024d94:	687b      	ldr	r3, [r7, #4]
 8024d96:	681b      	ldr	r3, [r3, #0]
 8024d98:	69db      	ldr	r3, [r3, #28]
 8024d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8024d9e:	2b00      	cmp	r3, #0
 8024da0:	d003      	beq.n	8024daa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8024da2:	6878      	ldr	r0, [r7, #4]
 8024da4:	f000 f86f 	bl	8024e86 <HAL_TIM_IC_CaptureCallback>
 8024da8:	e005      	b.n	8024db6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8024daa:	6878      	ldr	r0, [r7, #4]
 8024dac:	f000 f862 	bl	8024e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8024db0:	6878      	ldr	r0, [r7, #4]
 8024db2:	f000 f871 	bl	8024e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8024db6:	687b      	ldr	r3, [r7, #4]
 8024db8:	2200      	movs	r2, #0
 8024dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8024dbc:	687b      	ldr	r3, [r7, #4]
 8024dbe:	681b      	ldr	r3, [r3, #0]
 8024dc0:	691b      	ldr	r3, [r3, #16]
 8024dc2:	f003 0301 	and.w	r3, r3, #1
 8024dc6:	2b01      	cmp	r3, #1
 8024dc8:	d10e      	bne.n	8024de8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8024dca:	687b      	ldr	r3, [r7, #4]
 8024dcc:	681b      	ldr	r3, [r3, #0]
 8024dce:	68db      	ldr	r3, [r3, #12]
 8024dd0:	f003 0301 	and.w	r3, r3, #1
 8024dd4:	2b01      	cmp	r3, #1
 8024dd6:	d107      	bne.n	8024de8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8024dd8:	687b      	ldr	r3, [r7, #4]
 8024dda:	681b      	ldr	r3, [r3, #0]
 8024ddc:	f06f 0201 	mvn.w	r2, #1
 8024de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8024de2:	6878      	ldr	r0, [r7, #4]
 8024de4:	f7fa f95e 	bl	801f0a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8024de8:	687b      	ldr	r3, [r7, #4]
 8024dea:	681b      	ldr	r3, [r3, #0]
 8024dec:	691b      	ldr	r3, [r3, #16]
 8024dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024df2:	2b80      	cmp	r3, #128	; 0x80
 8024df4:	d10e      	bne.n	8024e14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8024df6:	687b      	ldr	r3, [r7, #4]
 8024df8:	681b      	ldr	r3, [r3, #0]
 8024dfa:	68db      	ldr	r3, [r3, #12]
 8024dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024e00:	2b80      	cmp	r3, #128	; 0x80
 8024e02:	d107      	bne.n	8024e14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8024e04:	687b      	ldr	r3, [r7, #4]
 8024e06:	681b      	ldr	r3, [r3, #0]
 8024e08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8024e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8024e0e:	6878      	ldr	r0, [r7, #4]
 8024e10:	f000 f8d7 	bl	8024fc2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8024e14:	687b      	ldr	r3, [r7, #4]
 8024e16:	681b      	ldr	r3, [r3, #0]
 8024e18:	691b      	ldr	r3, [r3, #16]
 8024e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024e1e:	2b40      	cmp	r3, #64	; 0x40
 8024e20:	d10e      	bne.n	8024e40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8024e22:	687b      	ldr	r3, [r7, #4]
 8024e24:	681b      	ldr	r3, [r3, #0]
 8024e26:	68db      	ldr	r3, [r3, #12]
 8024e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024e2c:	2b40      	cmp	r3, #64	; 0x40
 8024e2e:	d107      	bne.n	8024e40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8024e30:	687b      	ldr	r3, [r7, #4]
 8024e32:	681b      	ldr	r3, [r3, #0]
 8024e34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8024e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8024e3a:	6878      	ldr	r0, [r7, #4]
 8024e3c:	f000 f835 	bl	8024eaa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8024e40:	687b      	ldr	r3, [r7, #4]
 8024e42:	681b      	ldr	r3, [r3, #0]
 8024e44:	691b      	ldr	r3, [r3, #16]
 8024e46:	f003 0320 	and.w	r3, r3, #32
 8024e4a:	2b20      	cmp	r3, #32
 8024e4c:	d10e      	bne.n	8024e6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8024e4e:	687b      	ldr	r3, [r7, #4]
 8024e50:	681b      	ldr	r3, [r3, #0]
 8024e52:	68db      	ldr	r3, [r3, #12]
 8024e54:	f003 0320 	and.w	r3, r3, #32
 8024e58:	2b20      	cmp	r3, #32
 8024e5a:	d107      	bne.n	8024e6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8024e5c:	687b      	ldr	r3, [r7, #4]
 8024e5e:	681b      	ldr	r3, [r3, #0]
 8024e60:	f06f 0220 	mvn.w	r2, #32
 8024e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8024e66:	6878      	ldr	r0, [r7, #4]
 8024e68:	f000 f8a2 	bl	8024fb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8024e6c:	bf00      	nop
 8024e6e:	3708      	adds	r7, #8
 8024e70:	46bd      	mov	sp, r7
 8024e72:	bd80      	pop	{r7, pc}

08024e74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8024e74:	b480      	push	{r7}
 8024e76:	b083      	sub	sp, #12
 8024e78:	af00      	add	r7, sp, #0
 8024e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8024e7c:	bf00      	nop
 8024e7e:	370c      	adds	r7, #12
 8024e80:	46bd      	mov	sp, r7
 8024e82:	bc80      	pop	{r7}
 8024e84:	4770      	bx	lr

08024e86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8024e86:	b480      	push	{r7}
 8024e88:	b083      	sub	sp, #12
 8024e8a:	af00      	add	r7, sp, #0
 8024e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8024e8e:	bf00      	nop
 8024e90:	370c      	adds	r7, #12
 8024e92:	46bd      	mov	sp, r7
 8024e94:	bc80      	pop	{r7}
 8024e96:	4770      	bx	lr

08024e98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8024e98:	b480      	push	{r7}
 8024e9a:	b083      	sub	sp, #12
 8024e9c:	af00      	add	r7, sp, #0
 8024e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8024ea0:	bf00      	nop
 8024ea2:	370c      	adds	r7, #12
 8024ea4:	46bd      	mov	sp, r7
 8024ea6:	bc80      	pop	{r7}
 8024ea8:	4770      	bx	lr

08024eaa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8024eaa:	b480      	push	{r7}
 8024eac:	b083      	sub	sp, #12
 8024eae:	af00      	add	r7, sp, #0
 8024eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8024eb2:	bf00      	nop
 8024eb4:	370c      	adds	r7, #12
 8024eb6:	46bd      	mov	sp, r7
 8024eb8:	bc80      	pop	{r7}
 8024eba:	4770      	bx	lr

08024ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8024ebc:	b480      	push	{r7}
 8024ebe:	b085      	sub	sp, #20
 8024ec0:	af00      	add	r7, sp, #0
 8024ec2:	6078      	str	r0, [r7, #4]
 8024ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8024ec6:	687b      	ldr	r3, [r7, #4]
 8024ec8:	681b      	ldr	r3, [r3, #0]
 8024eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8024ecc:	687b      	ldr	r3, [r7, #4]
 8024ece:	4a33      	ldr	r2, [pc, #204]	; (8024f9c <TIM_Base_SetConfig+0xe0>)
 8024ed0:	4293      	cmp	r3, r2
 8024ed2:	d013      	beq.n	8024efc <TIM_Base_SetConfig+0x40>
 8024ed4:	687b      	ldr	r3, [r7, #4]
 8024ed6:	4a32      	ldr	r2, [pc, #200]	; (8024fa0 <TIM_Base_SetConfig+0xe4>)
 8024ed8:	4293      	cmp	r3, r2
 8024eda:	d00f      	beq.n	8024efc <TIM_Base_SetConfig+0x40>
 8024edc:	687b      	ldr	r3, [r7, #4]
 8024ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8024ee2:	d00b      	beq.n	8024efc <TIM_Base_SetConfig+0x40>
 8024ee4:	687b      	ldr	r3, [r7, #4]
 8024ee6:	4a2f      	ldr	r2, [pc, #188]	; (8024fa4 <TIM_Base_SetConfig+0xe8>)
 8024ee8:	4293      	cmp	r3, r2
 8024eea:	d007      	beq.n	8024efc <TIM_Base_SetConfig+0x40>
 8024eec:	687b      	ldr	r3, [r7, #4]
 8024eee:	4a2e      	ldr	r2, [pc, #184]	; (8024fa8 <TIM_Base_SetConfig+0xec>)
 8024ef0:	4293      	cmp	r3, r2
 8024ef2:	d003      	beq.n	8024efc <TIM_Base_SetConfig+0x40>
 8024ef4:	687b      	ldr	r3, [r7, #4]
 8024ef6:	4a2d      	ldr	r2, [pc, #180]	; (8024fac <TIM_Base_SetConfig+0xf0>)
 8024ef8:	4293      	cmp	r3, r2
 8024efa:	d108      	bne.n	8024f0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8024efc:	68fb      	ldr	r3, [r7, #12]
 8024efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8024f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8024f04:	683b      	ldr	r3, [r7, #0]
 8024f06:	685b      	ldr	r3, [r3, #4]
 8024f08:	68fa      	ldr	r2, [r7, #12]
 8024f0a:	4313      	orrs	r3, r2
 8024f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8024f0e:	687b      	ldr	r3, [r7, #4]
 8024f10:	4a22      	ldr	r2, [pc, #136]	; (8024f9c <TIM_Base_SetConfig+0xe0>)
 8024f12:	4293      	cmp	r3, r2
 8024f14:	d013      	beq.n	8024f3e <TIM_Base_SetConfig+0x82>
 8024f16:	687b      	ldr	r3, [r7, #4]
 8024f18:	4a21      	ldr	r2, [pc, #132]	; (8024fa0 <TIM_Base_SetConfig+0xe4>)
 8024f1a:	4293      	cmp	r3, r2
 8024f1c:	d00f      	beq.n	8024f3e <TIM_Base_SetConfig+0x82>
 8024f1e:	687b      	ldr	r3, [r7, #4]
 8024f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8024f24:	d00b      	beq.n	8024f3e <TIM_Base_SetConfig+0x82>
 8024f26:	687b      	ldr	r3, [r7, #4]
 8024f28:	4a1e      	ldr	r2, [pc, #120]	; (8024fa4 <TIM_Base_SetConfig+0xe8>)
 8024f2a:	4293      	cmp	r3, r2
 8024f2c:	d007      	beq.n	8024f3e <TIM_Base_SetConfig+0x82>
 8024f2e:	687b      	ldr	r3, [r7, #4]
 8024f30:	4a1d      	ldr	r2, [pc, #116]	; (8024fa8 <TIM_Base_SetConfig+0xec>)
 8024f32:	4293      	cmp	r3, r2
 8024f34:	d003      	beq.n	8024f3e <TIM_Base_SetConfig+0x82>
 8024f36:	687b      	ldr	r3, [r7, #4]
 8024f38:	4a1c      	ldr	r2, [pc, #112]	; (8024fac <TIM_Base_SetConfig+0xf0>)
 8024f3a:	4293      	cmp	r3, r2
 8024f3c:	d108      	bne.n	8024f50 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8024f3e:	68fb      	ldr	r3, [r7, #12]
 8024f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8024f46:	683b      	ldr	r3, [r7, #0]
 8024f48:	68db      	ldr	r3, [r3, #12]
 8024f4a:	68fa      	ldr	r2, [r7, #12]
 8024f4c:	4313      	orrs	r3, r2
 8024f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8024f50:	68fb      	ldr	r3, [r7, #12]
 8024f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8024f56:	683b      	ldr	r3, [r7, #0]
 8024f58:	695b      	ldr	r3, [r3, #20]
 8024f5a:	4313      	orrs	r3, r2
 8024f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8024f5e:	687b      	ldr	r3, [r7, #4]
 8024f60:	68fa      	ldr	r2, [r7, #12]
 8024f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8024f64:	683b      	ldr	r3, [r7, #0]
 8024f66:	689a      	ldr	r2, [r3, #8]
 8024f68:	687b      	ldr	r3, [r7, #4]
 8024f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8024f6c:	683b      	ldr	r3, [r7, #0]
 8024f6e:	681a      	ldr	r2, [r3, #0]
 8024f70:	687b      	ldr	r3, [r7, #4]
 8024f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8024f74:	687b      	ldr	r3, [r7, #4]
 8024f76:	4a09      	ldr	r2, [pc, #36]	; (8024f9c <TIM_Base_SetConfig+0xe0>)
 8024f78:	4293      	cmp	r3, r2
 8024f7a:	d003      	beq.n	8024f84 <TIM_Base_SetConfig+0xc8>
 8024f7c:	687b      	ldr	r3, [r7, #4]
 8024f7e:	4a08      	ldr	r2, [pc, #32]	; (8024fa0 <TIM_Base_SetConfig+0xe4>)
 8024f80:	4293      	cmp	r3, r2
 8024f82:	d103      	bne.n	8024f8c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8024f84:	683b      	ldr	r3, [r7, #0]
 8024f86:	691a      	ldr	r2, [r3, #16]
 8024f88:	687b      	ldr	r3, [r7, #4]
 8024f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8024f8c:	687b      	ldr	r3, [r7, #4]
 8024f8e:	2201      	movs	r2, #1
 8024f90:	615a      	str	r2, [r3, #20]
}
 8024f92:	bf00      	nop
 8024f94:	3714      	adds	r7, #20
 8024f96:	46bd      	mov	sp, r7
 8024f98:	bc80      	pop	{r7}
 8024f9a:	4770      	bx	lr
 8024f9c:	40012c00 	.word	0x40012c00
 8024fa0:	40013400 	.word	0x40013400
 8024fa4:	40000400 	.word	0x40000400
 8024fa8:	40000800 	.word	0x40000800
 8024fac:	40000c00 	.word	0x40000c00

08024fb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8024fb0:	b480      	push	{r7}
 8024fb2:	b083      	sub	sp, #12
 8024fb4:	af00      	add	r7, sp, #0
 8024fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8024fb8:	bf00      	nop
 8024fba:	370c      	adds	r7, #12
 8024fbc:	46bd      	mov	sp, r7
 8024fbe:	bc80      	pop	{r7}
 8024fc0:	4770      	bx	lr

08024fc2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8024fc2:	b480      	push	{r7}
 8024fc4:	b083      	sub	sp, #12
 8024fc6:	af00      	add	r7, sp, #0
 8024fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8024fca:	bf00      	nop
 8024fcc:	370c      	adds	r7, #12
 8024fce:	46bd      	mov	sp, r7
 8024fd0:	bc80      	pop	{r7}
 8024fd2:	4770      	bx	lr

08024fd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8024fd4:	b580      	push	{r7, lr}
 8024fd6:	b082      	sub	sp, #8
 8024fd8:	af00      	add	r7, sp, #0
 8024fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8024fdc:	687b      	ldr	r3, [r7, #4]
 8024fde:	2b00      	cmp	r3, #0
 8024fe0:	d101      	bne.n	8024fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8024fe2:	2301      	movs	r3, #1
 8024fe4:	e03f      	b.n	8025066 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8024fe6:	687b      	ldr	r3, [r7, #4]
 8024fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8024fec:	b2db      	uxtb	r3, r3
 8024fee:	2b00      	cmp	r3, #0
 8024ff0:	d106      	bne.n	8025000 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8024ff2:	687b      	ldr	r3, [r7, #4]
 8024ff4:	2200      	movs	r2, #0
 8024ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8024ffa:	6878      	ldr	r0, [r7, #4]
 8024ffc:	f7fd f808 	bl	8022010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8025000:	687b      	ldr	r3, [r7, #4]
 8025002:	2224      	movs	r2, #36	; 0x24
 8025004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8025008:	687b      	ldr	r3, [r7, #4]
 802500a:	681b      	ldr	r3, [r3, #0]
 802500c:	68da      	ldr	r2, [r3, #12]
 802500e:	687b      	ldr	r3, [r7, #4]
 8025010:	681b      	ldr	r3, [r3, #0]
 8025012:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8025016:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8025018:	6878      	ldr	r0, [r7, #4]
 802501a:	f000 fcc1 	bl	80259a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802501e:	687b      	ldr	r3, [r7, #4]
 8025020:	681b      	ldr	r3, [r3, #0]
 8025022:	691a      	ldr	r2, [r3, #16]
 8025024:	687b      	ldr	r3, [r7, #4]
 8025026:	681b      	ldr	r3, [r3, #0]
 8025028:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 802502c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802502e:	687b      	ldr	r3, [r7, #4]
 8025030:	681b      	ldr	r3, [r3, #0]
 8025032:	695a      	ldr	r2, [r3, #20]
 8025034:	687b      	ldr	r3, [r7, #4]
 8025036:	681b      	ldr	r3, [r3, #0]
 8025038:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 802503c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 802503e:	687b      	ldr	r3, [r7, #4]
 8025040:	681b      	ldr	r3, [r3, #0]
 8025042:	68da      	ldr	r2, [r3, #12]
 8025044:	687b      	ldr	r3, [r7, #4]
 8025046:	681b      	ldr	r3, [r3, #0]
 8025048:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802504c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802504e:	687b      	ldr	r3, [r7, #4]
 8025050:	2200      	movs	r2, #0
 8025052:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8025054:	687b      	ldr	r3, [r7, #4]
 8025056:	2220      	movs	r2, #32
 8025058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 802505c:	687b      	ldr	r3, [r7, #4]
 802505e:	2220      	movs	r2, #32
 8025060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8025064:	2300      	movs	r3, #0
}
 8025066:	4618      	mov	r0, r3
 8025068:	3708      	adds	r7, #8
 802506a:	46bd      	mov	sp, r7
 802506c:	bd80      	pop	{r7, pc}

0802506e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802506e:	b580      	push	{r7, lr}
 8025070:	b08a      	sub	sp, #40	; 0x28
 8025072:	af02      	add	r7, sp, #8
 8025074:	60f8      	str	r0, [r7, #12]
 8025076:	60b9      	str	r1, [r7, #8]
 8025078:	603b      	str	r3, [r7, #0]
 802507a:	4613      	mov	r3, r2
 802507c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 802507e:	2300      	movs	r3, #0
 8025080:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8025082:	68fb      	ldr	r3, [r7, #12]
 8025084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8025088:	b2db      	uxtb	r3, r3
 802508a:	2b20      	cmp	r3, #32
 802508c:	d17c      	bne.n	8025188 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 802508e:	68bb      	ldr	r3, [r7, #8]
 8025090:	2b00      	cmp	r3, #0
 8025092:	d002      	beq.n	802509a <HAL_UART_Transmit+0x2c>
 8025094:	88fb      	ldrh	r3, [r7, #6]
 8025096:	2b00      	cmp	r3, #0
 8025098:	d101      	bne.n	802509e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 802509a:	2301      	movs	r3, #1
 802509c:	e075      	b.n	802518a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802509e:	68fb      	ldr	r3, [r7, #12]
 80250a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80250a4:	2b01      	cmp	r3, #1
 80250a6:	d101      	bne.n	80250ac <HAL_UART_Transmit+0x3e>
 80250a8:	2302      	movs	r3, #2
 80250aa:	e06e      	b.n	802518a <HAL_UART_Transmit+0x11c>
 80250ac:	68fb      	ldr	r3, [r7, #12]
 80250ae:	2201      	movs	r2, #1
 80250b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80250b4:	68fb      	ldr	r3, [r7, #12]
 80250b6:	2200      	movs	r2, #0
 80250b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80250ba:	68fb      	ldr	r3, [r7, #12]
 80250bc:	2221      	movs	r2, #33	; 0x21
 80250be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80250c2:	f7fd f933 	bl	802232c <HAL_GetTick>
 80250c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80250c8:	68fb      	ldr	r3, [r7, #12]
 80250ca:	88fa      	ldrh	r2, [r7, #6]
 80250cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80250ce:	68fb      	ldr	r3, [r7, #12]
 80250d0:	88fa      	ldrh	r2, [r7, #6]
 80250d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80250d4:	68fb      	ldr	r3, [r7, #12]
 80250d6:	689b      	ldr	r3, [r3, #8]
 80250d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80250dc:	d108      	bne.n	80250f0 <HAL_UART_Transmit+0x82>
 80250de:	68fb      	ldr	r3, [r7, #12]
 80250e0:	691b      	ldr	r3, [r3, #16]
 80250e2:	2b00      	cmp	r3, #0
 80250e4:	d104      	bne.n	80250f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80250e6:	2300      	movs	r3, #0
 80250e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80250ea:	68bb      	ldr	r3, [r7, #8]
 80250ec:	61bb      	str	r3, [r7, #24]
 80250ee:	e003      	b.n	80250f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80250f0:	68bb      	ldr	r3, [r7, #8]
 80250f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80250f4:	2300      	movs	r3, #0
 80250f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80250f8:	68fb      	ldr	r3, [r7, #12]
 80250fa:	2200      	movs	r2, #0
 80250fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8025100:	e02a      	b.n	8025158 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8025102:	683b      	ldr	r3, [r7, #0]
 8025104:	9300      	str	r3, [sp, #0]
 8025106:	697b      	ldr	r3, [r7, #20]
 8025108:	2200      	movs	r2, #0
 802510a:	2180      	movs	r1, #128	; 0x80
 802510c:	68f8      	ldr	r0, [r7, #12]
 802510e:	f000 fa73 	bl	80255f8 <UART_WaitOnFlagUntilTimeout>
 8025112:	4603      	mov	r3, r0
 8025114:	2b00      	cmp	r3, #0
 8025116:	d001      	beq.n	802511c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8025118:	2303      	movs	r3, #3
 802511a:	e036      	b.n	802518a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 802511c:	69fb      	ldr	r3, [r7, #28]
 802511e:	2b00      	cmp	r3, #0
 8025120:	d10b      	bne.n	802513a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8025122:	69bb      	ldr	r3, [r7, #24]
 8025124:	881b      	ldrh	r3, [r3, #0]
 8025126:	461a      	mov	r2, r3
 8025128:	68fb      	ldr	r3, [r7, #12]
 802512a:	681b      	ldr	r3, [r3, #0]
 802512c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8025130:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8025132:	69bb      	ldr	r3, [r7, #24]
 8025134:	3302      	adds	r3, #2
 8025136:	61bb      	str	r3, [r7, #24]
 8025138:	e007      	b.n	802514a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 802513a:	69fb      	ldr	r3, [r7, #28]
 802513c:	781a      	ldrb	r2, [r3, #0]
 802513e:	68fb      	ldr	r3, [r7, #12]
 8025140:	681b      	ldr	r3, [r3, #0]
 8025142:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8025144:	69fb      	ldr	r3, [r7, #28]
 8025146:	3301      	adds	r3, #1
 8025148:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 802514a:	68fb      	ldr	r3, [r7, #12]
 802514c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802514e:	b29b      	uxth	r3, r3
 8025150:	3b01      	subs	r3, #1
 8025152:	b29a      	uxth	r2, r3
 8025154:	68fb      	ldr	r3, [r7, #12]
 8025156:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8025158:	68fb      	ldr	r3, [r7, #12]
 802515a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802515c:	b29b      	uxth	r3, r3
 802515e:	2b00      	cmp	r3, #0
 8025160:	d1cf      	bne.n	8025102 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8025162:	683b      	ldr	r3, [r7, #0]
 8025164:	9300      	str	r3, [sp, #0]
 8025166:	697b      	ldr	r3, [r7, #20]
 8025168:	2200      	movs	r2, #0
 802516a:	2140      	movs	r1, #64	; 0x40
 802516c:	68f8      	ldr	r0, [r7, #12]
 802516e:	f000 fa43 	bl	80255f8 <UART_WaitOnFlagUntilTimeout>
 8025172:	4603      	mov	r3, r0
 8025174:	2b00      	cmp	r3, #0
 8025176:	d001      	beq.n	802517c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8025178:	2303      	movs	r3, #3
 802517a:	e006      	b.n	802518a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 802517c:	68fb      	ldr	r3, [r7, #12]
 802517e:	2220      	movs	r2, #32
 8025180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8025184:	2300      	movs	r3, #0
 8025186:	e000      	b.n	802518a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8025188:	2302      	movs	r3, #2
  }
}
 802518a:	4618      	mov	r0, r3
 802518c:	3720      	adds	r7, #32
 802518e:	46bd      	mov	sp, r7
 8025190:	bd80      	pop	{r7, pc}

08025192 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8025192:	b480      	push	{r7}
 8025194:	b085      	sub	sp, #20
 8025196:	af00      	add	r7, sp, #0
 8025198:	60f8      	str	r0, [r7, #12]
 802519a:	60b9      	str	r1, [r7, #8]
 802519c:	4613      	mov	r3, r2
 802519e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80251a0:	68fb      	ldr	r3, [r7, #12]
 80251a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80251a6:	b2db      	uxtb	r3, r3
 80251a8:	2b20      	cmp	r3, #32
 80251aa:	d130      	bne.n	802520e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80251ac:	68bb      	ldr	r3, [r7, #8]
 80251ae:	2b00      	cmp	r3, #0
 80251b0:	d002      	beq.n	80251b8 <HAL_UART_Transmit_IT+0x26>
 80251b2:	88fb      	ldrh	r3, [r7, #6]
 80251b4:	2b00      	cmp	r3, #0
 80251b6:	d101      	bne.n	80251bc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80251b8:	2301      	movs	r3, #1
 80251ba:	e029      	b.n	8025210 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80251bc:	68fb      	ldr	r3, [r7, #12]
 80251be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80251c2:	2b01      	cmp	r3, #1
 80251c4:	d101      	bne.n	80251ca <HAL_UART_Transmit_IT+0x38>
 80251c6:	2302      	movs	r3, #2
 80251c8:	e022      	b.n	8025210 <HAL_UART_Transmit_IT+0x7e>
 80251ca:	68fb      	ldr	r3, [r7, #12]
 80251cc:	2201      	movs	r2, #1
 80251ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80251d2:	68fb      	ldr	r3, [r7, #12]
 80251d4:	68ba      	ldr	r2, [r7, #8]
 80251d6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80251d8:	68fb      	ldr	r3, [r7, #12]
 80251da:	88fa      	ldrh	r2, [r7, #6]
 80251dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80251de:	68fb      	ldr	r3, [r7, #12]
 80251e0:	88fa      	ldrh	r2, [r7, #6]
 80251e2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80251e4:	68fb      	ldr	r3, [r7, #12]
 80251e6:	2200      	movs	r2, #0
 80251e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80251ea:	68fb      	ldr	r3, [r7, #12]
 80251ec:	2221      	movs	r2, #33	; 0x21
 80251ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80251f2:	68fb      	ldr	r3, [r7, #12]
 80251f4:	2200      	movs	r2, #0
 80251f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80251fa:	68fb      	ldr	r3, [r7, #12]
 80251fc:	681b      	ldr	r3, [r3, #0]
 80251fe:	68da      	ldr	r2, [r3, #12]
 8025200:	68fb      	ldr	r3, [r7, #12]
 8025202:	681b      	ldr	r3, [r3, #0]
 8025204:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8025208:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 802520a:	2300      	movs	r3, #0
 802520c:	e000      	b.n	8025210 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 802520e:	2302      	movs	r3, #2
  }
}
 8025210:	4618      	mov	r0, r3
 8025212:	3714      	adds	r7, #20
 8025214:	46bd      	mov	sp, r7
 8025216:	bc80      	pop	{r7}
 8025218:	4770      	bx	lr

0802521a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 802521a:	b580      	push	{r7, lr}
 802521c:	b084      	sub	sp, #16
 802521e:	af00      	add	r7, sp, #0
 8025220:	60f8      	str	r0, [r7, #12]
 8025222:	60b9      	str	r1, [r7, #8]
 8025224:	4613      	mov	r3, r2
 8025226:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8025228:	68fb      	ldr	r3, [r7, #12]
 802522a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802522e:	b2db      	uxtb	r3, r3
 8025230:	2b20      	cmp	r3, #32
 8025232:	d11d      	bne.n	8025270 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8025234:	68bb      	ldr	r3, [r7, #8]
 8025236:	2b00      	cmp	r3, #0
 8025238:	d002      	beq.n	8025240 <HAL_UART_Receive_IT+0x26>
 802523a:	88fb      	ldrh	r3, [r7, #6]
 802523c:	2b00      	cmp	r3, #0
 802523e:	d101      	bne.n	8025244 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8025240:	2301      	movs	r3, #1
 8025242:	e016      	b.n	8025272 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8025244:	68fb      	ldr	r3, [r7, #12]
 8025246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802524a:	2b01      	cmp	r3, #1
 802524c:	d101      	bne.n	8025252 <HAL_UART_Receive_IT+0x38>
 802524e:	2302      	movs	r3, #2
 8025250:	e00f      	b.n	8025272 <HAL_UART_Receive_IT+0x58>
 8025252:	68fb      	ldr	r3, [r7, #12]
 8025254:	2201      	movs	r2, #1
 8025256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802525a:	68fb      	ldr	r3, [r7, #12]
 802525c:	2200      	movs	r2, #0
 802525e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8025260:	88fb      	ldrh	r3, [r7, #6]
 8025262:	461a      	mov	r2, r3
 8025264:	68b9      	ldr	r1, [r7, #8]
 8025266:	68f8      	ldr	r0, [r7, #12]
 8025268:	f000 fa10 	bl	802568c <UART_Start_Receive_IT>
 802526c:	4603      	mov	r3, r0
 802526e:	e000      	b.n	8025272 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8025270:	2302      	movs	r3, #2
  }
}
 8025272:	4618      	mov	r0, r3
 8025274:	3710      	adds	r7, #16
 8025276:	46bd      	mov	sp, r7
 8025278:	bd80      	pop	{r7, pc}
	...

0802527c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 802527c:	b580      	push	{r7, lr}
 802527e:	b08a      	sub	sp, #40	; 0x28
 8025280:	af00      	add	r7, sp, #0
 8025282:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8025284:	687b      	ldr	r3, [r7, #4]
 8025286:	681b      	ldr	r3, [r3, #0]
 8025288:	681b      	ldr	r3, [r3, #0]
 802528a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 802528c:	687b      	ldr	r3, [r7, #4]
 802528e:	681b      	ldr	r3, [r3, #0]
 8025290:	68db      	ldr	r3, [r3, #12]
 8025292:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8025294:	687b      	ldr	r3, [r7, #4]
 8025296:	681b      	ldr	r3, [r3, #0]
 8025298:	695b      	ldr	r3, [r3, #20]
 802529a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 802529c:	2300      	movs	r3, #0
 802529e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80252a0:	2300      	movs	r3, #0
 80252a2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80252a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80252a6:	f003 030f 	and.w	r3, r3, #15
 80252aa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80252ac:	69bb      	ldr	r3, [r7, #24]
 80252ae:	2b00      	cmp	r3, #0
 80252b0:	d10d      	bne.n	80252ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80252b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80252b4:	f003 0320 	and.w	r3, r3, #32
 80252b8:	2b00      	cmp	r3, #0
 80252ba:	d008      	beq.n	80252ce <HAL_UART_IRQHandler+0x52>
 80252bc:	6a3b      	ldr	r3, [r7, #32]
 80252be:	f003 0320 	and.w	r3, r3, #32
 80252c2:	2b00      	cmp	r3, #0
 80252c4:	d003      	beq.n	80252ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80252c6:	6878      	ldr	r0, [r7, #4]
 80252c8:	f000 fac0 	bl	802584c <UART_Receive_IT>
      return;
 80252cc:	e17b      	b.n	80255c6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80252ce:	69bb      	ldr	r3, [r7, #24]
 80252d0:	2b00      	cmp	r3, #0
 80252d2:	f000 80b1 	beq.w	8025438 <HAL_UART_IRQHandler+0x1bc>
 80252d6:	69fb      	ldr	r3, [r7, #28]
 80252d8:	f003 0301 	and.w	r3, r3, #1
 80252dc:	2b00      	cmp	r3, #0
 80252de:	d105      	bne.n	80252ec <HAL_UART_IRQHandler+0x70>
 80252e0:	6a3b      	ldr	r3, [r7, #32]
 80252e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80252e6:	2b00      	cmp	r3, #0
 80252e8:	f000 80a6 	beq.w	8025438 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80252ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80252ee:	f003 0301 	and.w	r3, r3, #1
 80252f2:	2b00      	cmp	r3, #0
 80252f4:	d00a      	beq.n	802530c <HAL_UART_IRQHandler+0x90>
 80252f6:	6a3b      	ldr	r3, [r7, #32]
 80252f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80252fc:	2b00      	cmp	r3, #0
 80252fe:	d005      	beq.n	802530c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8025300:	687b      	ldr	r3, [r7, #4]
 8025302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025304:	f043 0201 	orr.w	r2, r3, #1
 8025308:	687b      	ldr	r3, [r7, #4]
 802530a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802530e:	f003 0304 	and.w	r3, r3, #4
 8025312:	2b00      	cmp	r3, #0
 8025314:	d00a      	beq.n	802532c <HAL_UART_IRQHandler+0xb0>
 8025316:	69fb      	ldr	r3, [r7, #28]
 8025318:	f003 0301 	and.w	r3, r3, #1
 802531c:	2b00      	cmp	r3, #0
 802531e:	d005      	beq.n	802532c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8025320:	687b      	ldr	r3, [r7, #4]
 8025322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025324:	f043 0202 	orr.w	r2, r3, #2
 8025328:	687b      	ldr	r3, [r7, #4]
 802532a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802532e:	f003 0302 	and.w	r3, r3, #2
 8025332:	2b00      	cmp	r3, #0
 8025334:	d00a      	beq.n	802534c <HAL_UART_IRQHandler+0xd0>
 8025336:	69fb      	ldr	r3, [r7, #28]
 8025338:	f003 0301 	and.w	r3, r3, #1
 802533c:	2b00      	cmp	r3, #0
 802533e:	d005      	beq.n	802534c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8025340:	687b      	ldr	r3, [r7, #4]
 8025342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025344:	f043 0204 	orr.w	r2, r3, #4
 8025348:	687b      	ldr	r3, [r7, #4]
 802534a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 802534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802534e:	f003 0308 	and.w	r3, r3, #8
 8025352:	2b00      	cmp	r3, #0
 8025354:	d00f      	beq.n	8025376 <HAL_UART_IRQHandler+0xfa>
 8025356:	6a3b      	ldr	r3, [r7, #32]
 8025358:	f003 0320 	and.w	r3, r3, #32
 802535c:	2b00      	cmp	r3, #0
 802535e:	d104      	bne.n	802536a <HAL_UART_IRQHandler+0xee>
 8025360:	69fb      	ldr	r3, [r7, #28]
 8025362:	f003 0301 	and.w	r3, r3, #1
 8025366:	2b00      	cmp	r3, #0
 8025368:	d005      	beq.n	8025376 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 802536a:	687b      	ldr	r3, [r7, #4]
 802536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802536e:	f043 0208 	orr.w	r2, r3, #8
 8025372:	687b      	ldr	r3, [r7, #4]
 8025374:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8025376:	687b      	ldr	r3, [r7, #4]
 8025378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802537a:	2b00      	cmp	r3, #0
 802537c:	f000 811e 	beq.w	80255bc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8025380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025382:	f003 0320 	and.w	r3, r3, #32
 8025386:	2b00      	cmp	r3, #0
 8025388:	d007      	beq.n	802539a <HAL_UART_IRQHandler+0x11e>
 802538a:	6a3b      	ldr	r3, [r7, #32]
 802538c:	f003 0320 	and.w	r3, r3, #32
 8025390:	2b00      	cmp	r3, #0
 8025392:	d002      	beq.n	802539a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8025394:	6878      	ldr	r0, [r7, #4]
 8025396:	f000 fa59 	bl	802584c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 802539a:	687b      	ldr	r3, [r7, #4]
 802539c:	681b      	ldr	r3, [r3, #0]
 802539e:	695b      	ldr	r3, [r3, #20]
 80253a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80253a4:	2b00      	cmp	r3, #0
 80253a6:	bf14      	ite	ne
 80253a8:	2301      	movne	r3, #1
 80253aa:	2300      	moveq	r3, #0
 80253ac:	b2db      	uxtb	r3, r3
 80253ae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80253b0:	687b      	ldr	r3, [r7, #4]
 80253b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80253b4:	f003 0308 	and.w	r3, r3, #8
 80253b8:	2b00      	cmp	r3, #0
 80253ba:	d102      	bne.n	80253c2 <HAL_UART_IRQHandler+0x146>
 80253bc:	697b      	ldr	r3, [r7, #20]
 80253be:	2b00      	cmp	r3, #0
 80253c0:	d031      	beq.n	8025426 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80253c2:	6878      	ldr	r0, [r7, #4]
 80253c4:	f000 f99b 	bl	80256fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80253c8:	687b      	ldr	r3, [r7, #4]
 80253ca:	681b      	ldr	r3, [r3, #0]
 80253cc:	695b      	ldr	r3, [r3, #20]
 80253ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80253d2:	2b00      	cmp	r3, #0
 80253d4:	d023      	beq.n	802541e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80253d6:	687b      	ldr	r3, [r7, #4]
 80253d8:	681b      	ldr	r3, [r3, #0]
 80253da:	695a      	ldr	r2, [r3, #20]
 80253dc:	687b      	ldr	r3, [r7, #4]
 80253de:	681b      	ldr	r3, [r3, #0]
 80253e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80253e4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80253e6:	687b      	ldr	r3, [r7, #4]
 80253e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80253ea:	2b00      	cmp	r3, #0
 80253ec:	d013      	beq.n	8025416 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80253ee:	687b      	ldr	r3, [r7, #4]
 80253f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80253f2:	4a76      	ldr	r2, [pc, #472]	; (80255cc <HAL_UART_IRQHandler+0x350>)
 80253f4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80253f6:	687b      	ldr	r3, [r7, #4]
 80253f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80253fa:	4618      	mov	r0, r3
 80253fc:	f7fd f90c 	bl	8022618 <HAL_DMA_Abort_IT>
 8025400:	4603      	mov	r3, r0
 8025402:	2b00      	cmp	r3, #0
 8025404:	d016      	beq.n	8025434 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8025406:	687b      	ldr	r3, [r7, #4]
 8025408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802540a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802540c:	687a      	ldr	r2, [r7, #4]
 802540e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8025410:	4610      	mov	r0, r2
 8025412:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8025414:	e00e      	b.n	8025434 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8025416:	6878      	ldr	r0, [r7, #4]
 8025418:	f000 f8da 	bl	80255d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802541c:	e00a      	b.n	8025434 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 802541e:	6878      	ldr	r0, [r7, #4]
 8025420:	f000 f8d6 	bl	80255d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8025424:	e006      	b.n	8025434 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8025426:	6878      	ldr	r0, [r7, #4]
 8025428:	f000 f8d2 	bl	80255d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 802542c:	687b      	ldr	r3, [r7, #4]
 802542e:	2200      	movs	r2, #0
 8025430:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8025432:	e0c3      	b.n	80255bc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8025434:	bf00      	nop
    return;
 8025436:	e0c1      	b.n	80255bc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8025438:	687b      	ldr	r3, [r7, #4]
 802543a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802543c:	2b01      	cmp	r3, #1
 802543e:	f040 80a1 	bne.w	8025584 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8025442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025444:	f003 0310 	and.w	r3, r3, #16
 8025448:	2b00      	cmp	r3, #0
 802544a:	f000 809b 	beq.w	8025584 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 802544e:	6a3b      	ldr	r3, [r7, #32]
 8025450:	f003 0310 	and.w	r3, r3, #16
 8025454:	2b00      	cmp	r3, #0
 8025456:	f000 8095 	beq.w	8025584 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 802545a:	2300      	movs	r3, #0
 802545c:	60fb      	str	r3, [r7, #12]
 802545e:	687b      	ldr	r3, [r7, #4]
 8025460:	681b      	ldr	r3, [r3, #0]
 8025462:	681b      	ldr	r3, [r3, #0]
 8025464:	60fb      	str	r3, [r7, #12]
 8025466:	687b      	ldr	r3, [r7, #4]
 8025468:	681b      	ldr	r3, [r3, #0]
 802546a:	685b      	ldr	r3, [r3, #4]
 802546c:	60fb      	str	r3, [r7, #12]
 802546e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8025470:	687b      	ldr	r3, [r7, #4]
 8025472:	681b      	ldr	r3, [r3, #0]
 8025474:	695b      	ldr	r3, [r3, #20]
 8025476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802547a:	2b00      	cmp	r3, #0
 802547c:	d04e      	beq.n	802551c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 802547e:	687b      	ldr	r3, [r7, #4]
 8025480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025482:	681b      	ldr	r3, [r3, #0]
 8025484:	685b      	ldr	r3, [r3, #4]
 8025486:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8025488:	8a3b      	ldrh	r3, [r7, #16]
 802548a:	2b00      	cmp	r3, #0
 802548c:	f000 8098 	beq.w	80255c0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8025490:	687b      	ldr	r3, [r7, #4]
 8025492:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8025494:	8a3a      	ldrh	r2, [r7, #16]
 8025496:	429a      	cmp	r2, r3
 8025498:	f080 8092 	bcs.w	80255c0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 802549c:	687b      	ldr	r3, [r7, #4]
 802549e:	8a3a      	ldrh	r2, [r7, #16]
 80254a0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80254a2:	687b      	ldr	r3, [r7, #4]
 80254a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80254a6:	699b      	ldr	r3, [r3, #24]
 80254a8:	2b20      	cmp	r3, #32
 80254aa:	d02b      	beq.n	8025504 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80254ac:	687b      	ldr	r3, [r7, #4]
 80254ae:	681b      	ldr	r3, [r3, #0]
 80254b0:	68da      	ldr	r2, [r3, #12]
 80254b2:	687b      	ldr	r3, [r7, #4]
 80254b4:	681b      	ldr	r3, [r3, #0]
 80254b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80254ba:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80254bc:	687b      	ldr	r3, [r7, #4]
 80254be:	681b      	ldr	r3, [r3, #0]
 80254c0:	695a      	ldr	r2, [r3, #20]
 80254c2:	687b      	ldr	r3, [r7, #4]
 80254c4:	681b      	ldr	r3, [r3, #0]
 80254c6:	f022 0201 	bic.w	r2, r2, #1
 80254ca:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80254cc:	687b      	ldr	r3, [r7, #4]
 80254ce:	681b      	ldr	r3, [r3, #0]
 80254d0:	695a      	ldr	r2, [r3, #20]
 80254d2:	687b      	ldr	r3, [r7, #4]
 80254d4:	681b      	ldr	r3, [r3, #0]
 80254d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80254da:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80254dc:	687b      	ldr	r3, [r7, #4]
 80254de:	2220      	movs	r2, #32
 80254e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80254e4:	687b      	ldr	r3, [r7, #4]
 80254e6:	2200      	movs	r2, #0
 80254e8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80254ea:	687b      	ldr	r3, [r7, #4]
 80254ec:	681b      	ldr	r3, [r3, #0]
 80254ee:	68da      	ldr	r2, [r3, #12]
 80254f0:	687b      	ldr	r3, [r7, #4]
 80254f2:	681b      	ldr	r3, [r3, #0]
 80254f4:	f022 0210 	bic.w	r2, r2, #16
 80254f8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80254fa:	687b      	ldr	r3, [r7, #4]
 80254fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80254fe:	4618      	mov	r0, r3
 8025500:	f7fd f84f 	bl	80225a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8025504:	687b      	ldr	r3, [r7, #4]
 8025506:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8025508:	687b      	ldr	r3, [r7, #4]
 802550a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802550c:	b29b      	uxth	r3, r3
 802550e:	1ad3      	subs	r3, r2, r3
 8025510:	b29b      	uxth	r3, r3
 8025512:	4619      	mov	r1, r3
 8025514:	6878      	ldr	r0, [r7, #4]
 8025516:	f000 f864 	bl	80255e2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 802551a:	e051      	b.n	80255c0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 802551c:	687b      	ldr	r3, [r7, #4]
 802551e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8025520:	687b      	ldr	r3, [r7, #4]
 8025522:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8025524:	b29b      	uxth	r3, r3
 8025526:	1ad3      	subs	r3, r2, r3
 8025528:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 802552a:	687b      	ldr	r3, [r7, #4]
 802552c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802552e:	b29b      	uxth	r3, r3
 8025530:	2b00      	cmp	r3, #0
 8025532:	d047      	beq.n	80255c4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8025534:	8a7b      	ldrh	r3, [r7, #18]
 8025536:	2b00      	cmp	r3, #0
 8025538:	d044      	beq.n	80255c4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802553a:	687b      	ldr	r3, [r7, #4]
 802553c:	681b      	ldr	r3, [r3, #0]
 802553e:	68da      	ldr	r2, [r3, #12]
 8025540:	687b      	ldr	r3, [r7, #4]
 8025542:	681b      	ldr	r3, [r3, #0]
 8025544:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8025548:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802554a:	687b      	ldr	r3, [r7, #4]
 802554c:	681b      	ldr	r3, [r3, #0]
 802554e:	695a      	ldr	r2, [r3, #20]
 8025550:	687b      	ldr	r3, [r7, #4]
 8025552:	681b      	ldr	r3, [r3, #0]
 8025554:	f022 0201 	bic.w	r2, r2, #1
 8025558:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 802555a:	687b      	ldr	r3, [r7, #4]
 802555c:	2220      	movs	r2, #32
 802555e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8025562:	687b      	ldr	r3, [r7, #4]
 8025564:	2200      	movs	r2, #0
 8025566:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8025568:	687b      	ldr	r3, [r7, #4]
 802556a:	681b      	ldr	r3, [r3, #0]
 802556c:	68da      	ldr	r2, [r3, #12]
 802556e:	687b      	ldr	r3, [r7, #4]
 8025570:	681b      	ldr	r3, [r3, #0]
 8025572:	f022 0210 	bic.w	r2, r2, #16
 8025576:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8025578:	8a7b      	ldrh	r3, [r7, #18]
 802557a:	4619      	mov	r1, r3
 802557c:	6878      	ldr	r0, [r7, #4]
 802557e:	f000 f830 	bl	80255e2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8025582:	e01f      	b.n	80255c4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8025584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802558a:	2b00      	cmp	r3, #0
 802558c:	d008      	beq.n	80255a0 <HAL_UART_IRQHandler+0x324>
 802558e:	6a3b      	ldr	r3, [r7, #32]
 8025590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025594:	2b00      	cmp	r3, #0
 8025596:	d003      	beq.n	80255a0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8025598:	6878      	ldr	r0, [r7, #4]
 802559a:	f000 f8f0 	bl	802577e <UART_Transmit_IT>
    return;
 802559e:	e012      	b.n	80255c6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80255a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80255a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80255a6:	2b00      	cmp	r3, #0
 80255a8:	d00d      	beq.n	80255c6 <HAL_UART_IRQHandler+0x34a>
 80255aa:	6a3b      	ldr	r3, [r7, #32]
 80255ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80255b0:	2b00      	cmp	r3, #0
 80255b2:	d008      	beq.n	80255c6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80255b4:	6878      	ldr	r0, [r7, #4]
 80255b6:	f000 f931 	bl	802581c <UART_EndTransmit_IT>
    return;
 80255ba:	e004      	b.n	80255c6 <HAL_UART_IRQHandler+0x34a>
    return;
 80255bc:	bf00      	nop
 80255be:	e002      	b.n	80255c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80255c0:	bf00      	nop
 80255c2:	e000      	b.n	80255c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80255c4:	bf00      	nop
  }
}
 80255c6:	3728      	adds	r7, #40	; 0x28
 80255c8:	46bd      	mov	sp, r7
 80255ca:	bd80      	pop	{r7, pc}
 80255cc:	08025757 	.word	0x08025757

080255d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80255d0:	b480      	push	{r7}
 80255d2:	b083      	sub	sp, #12
 80255d4:	af00      	add	r7, sp, #0
 80255d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80255d8:	bf00      	nop
 80255da:	370c      	adds	r7, #12
 80255dc:	46bd      	mov	sp, r7
 80255de:	bc80      	pop	{r7}
 80255e0:	4770      	bx	lr

080255e2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80255e2:	b480      	push	{r7}
 80255e4:	b083      	sub	sp, #12
 80255e6:	af00      	add	r7, sp, #0
 80255e8:	6078      	str	r0, [r7, #4]
 80255ea:	460b      	mov	r3, r1
 80255ec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80255ee:	bf00      	nop
 80255f0:	370c      	adds	r7, #12
 80255f2:	46bd      	mov	sp, r7
 80255f4:	bc80      	pop	{r7}
 80255f6:	4770      	bx	lr

080255f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80255f8:	b580      	push	{r7, lr}
 80255fa:	b084      	sub	sp, #16
 80255fc:	af00      	add	r7, sp, #0
 80255fe:	60f8      	str	r0, [r7, #12]
 8025600:	60b9      	str	r1, [r7, #8]
 8025602:	603b      	str	r3, [r7, #0]
 8025604:	4613      	mov	r3, r2
 8025606:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8025608:	e02c      	b.n	8025664 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802560a:	69bb      	ldr	r3, [r7, #24]
 802560c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025610:	d028      	beq.n	8025664 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8025612:	69bb      	ldr	r3, [r7, #24]
 8025614:	2b00      	cmp	r3, #0
 8025616:	d007      	beq.n	8025628 <UART_WaitOnFlagUntilTimeout+0x30>
 8025618:	f7fc fe88 	bl	802232c <HAL_GetTick>
 802561c:	4602      	mov	r2, r0
 802561e:	683b      	ldr	r3, [r7, #0]
 8025620:	1ad3      	subs	r3, r2, r3
 8025622:	69ba      	ldr	r2, [r7, #24]
 8025624:	429a      	cmp	r2, r3
 8025626:	d21d      	bcs.n	8025664 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8025628:	68fb      	ldr	r3, [r7, #12]
 802562a:	681b      	ldr	r3, [r3, #0]
 802562c:	68da      	ldr	r2, [r3, #12]
 802562e:	68fb      	ldr	r3, [r7, #12]
 8025630:	681b      	ldr	r3, [r3, #0]
 8025632:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8025636:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8025638:	68fb      	ldr	r3, [r7, #12]
 802563a:	681b      	ldr	r3, [r3, #0]
 802563c:	695a      	ldr	r2, [r3, #20]
 802563e:	68fb      	ldr	r3, [r7, #12]
 8025640:	681b      	ldr	r3, [r3, #0]
 8025642:	f022 0201 	bic.w	r2, r2, #1
 8025646:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8025648:	68fb      	ldr	r3, [r7, #12]
 802564a:	2220      	movs	r2, #32
 802564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8025650:	68fb      	ldr	r3, [r7, #12]
 8025652:	2220      	movs	r2, #32
 8025654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8025658:	68fb      	ldr	r3, [r7, #12]
 802565a:	2200      	movs	r2, #0
 802565c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8025660:	2303      	movs	r3, #3
 8025662:	e00f      	b.n	8025684 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8025664:	68fb      	ldr	r3, [r7, #12]
 8025666:	681b      	ldr	r3, [r3, #0]
 8025668:	681a      	ldr	r2, [r3, #0]
 802566a:	68bb      	ldr	r3, [r7, #8]
 802566c:	4013      	ands	r3, r2
 802566e:	68ba      	ldr	r2, [r7, #8]
 8025670:	429a      	cmp	r2, r3
 8025672:	bf0c      	ite	eq
 8025674:	2301      	moveq	r3, #1
 8025676:	2300      	movne	r3, #0
 8025678:	b2db      	uxtb	r3, r3
 802567a:	461a      	mov	r2, r3
 802567c:	79fb      	ldrb	r3, [r7, #7]
 802567e:	429a      	cmp	r2, r3
 8025680:	d0c3      	beq.n	802560a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8025682:	2300      	movs	r3, #0
}
 8025684:	4618      	mov	r0, r3
 8025686:	3710      	adds	r7, #16
 8025688:	46bd      	mov	sp, r7
 802568a:	bd80      	pop	{r7, pc}

0802568c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 802568c:	b480      	push	{r7}
 802568e:	b085      	sub	sp, #20
 8025690:	af00      	add	r7, sp, #0
 8025692:	60f8      	str	r0, [r7, #12]
 8025694:	60b9      	str	r1, [r7, #8]
 8025696:	4613      	mov	r3, r2
 8025698:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 802569a:	68fb      	ldr	r3, [r7, #12]
 802569c:	68ba      	ldr	r2, [r7, #8]
 802569e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80256a0:	68fb      	ldr	r3, [r7, #12]
 80256a2:	88fa      	ldrh	r2, [r7, #6]
 80256a4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80256a6:	68fb      	ldr	r3, [r7, #12]
 80256a8:	88fa      	ldrh	r2, [r7, #6]
 80256aa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80256ac:	68fb      	ldr	r3, [r7, #12]
 80256ae:	2200      	movs	r2, #0
 80256b0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80256b2:	68fb      	ldr	r3, [r7, #12]
 80256b4:	2222      	movs	r2, #34	; 0x22
 80256b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80256ba:	68fb      	ldr	r3, [r7, #12]
 80256bc:	2200      	movs	r2, #0
 80256be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80256c2:	68fb      	ldr	r3, [r7, #12]
 80256c4:	681b      	ldr	r3, [r3, #0]
 80256c6:	68da      	ldr	r2, [r3, #12]
 80256c8:	68fb      	ldr	r3, [r7, #12]
 80256ca:	681b      	ldr	r3, [r3, #0]
 80256cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80256d0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80256d2:	68fb      	ldr	r3, [r7, #12]
 80256d4:	681b      	ldr	r3, [r3, #0]
 80256d6:	695a      	ldr	r2, [r3, #20]
 80256d8:	68fb      	ldr	r3, [r7, #12]
 80256da:	681b      	ldr	r3, [r3, #0]
 80256dc:	f042 0201 	orr.w	r2, r2, #1
 80256e0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80256e2:	68fb      	ldr	r3, [r7, #12]
 80256e4:	681b      	ldr	r3, [r3, #0]
 80256e6:	68da      	ldr	r2, [r3, #12]
 80256e8:	68fb      	ldr	r3, [r7, #12]
 80256ea:	681b      	ldr	r3, [r3, #0]
 80256ec:	f042 0220 	orr.w	r2, r2, #32
 80256f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80256f2:	2300      	movs	r3, #0
}
 80256f4:	4618      	mov	r0, r3
 80256f6:	3714      	adds	r7, #20
 80256f8:	46bd      	mov	sp, r7
 80256fa:	bc80      	pop	{r7}
 80256fc:	4770      	bx	lr

080256fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80256fe:	b480      	push	{r7}
 8025700:	b083      	sub	sp, #12
 8025702:	af00      	add	r7, sp, #0
 8025704:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8025706:	687b      	ldr	r3, [r7, #4]
 8025708:	681b      	ldr	r3, [r3, #0]
 802570a:	68da      	ldr	r2, [r3, #12]
 802570c:	687b      	ldr	r3, [r7, #4]
 802570e:	681b      	ldr	r3, [r3, #0]
 8025710:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8025714:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8025716:	687b      	ldr	r3, [r7, #4]
 8025718:	681b      	ldr	r3, [r3, #0]
 802571a:	695a      	ldr	r2, [r3, #20]
 802571c:	687b      	ldr	r3, [r7, #4]
 802571e:	681b      	ldr	r3, [r3, #0]
 8025720:	f022 0201 	bic.w	r2, r2, #1
 8025724:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8025726:	687b      	ldr	r3, [r7, #4]
 8025728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802572a:	2b01      	cmp	r3, #1
 802572c:	d107      	bne.n	802573e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802572e:	687b      	ldr	r3, [r7, #4]
 8025730:	681b      	ldr	r3, [r3, #0]
 8025732:	68da      	ldr	r2, [r3, #12]
 8025734:	687b      	ldr	r3, [r7, #4]
 8025736:	681b      	ldr	r3, [r3, #0]
 8025738:	f022 0210 	bic.w	r2, r2, #16
 802573c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802573e:	687b      	ldr	r3, [r7, #4]
 8025740:	2220      	movs	r2, #32
 8025742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8025746:	687b      	ldr	r3, [r7, #4]
 8025748:	2200      	movs	r2, #0
 802574a:	631a      	str	r2, [r3, #48]	; 0x30
}
 802574c:	bf00      	nop
 802574e:	370c      	adds	r7, #12
 8025750:	46bd      	mov	sp, r7
 8025752:	bc80      	pop	{r7}
 8025754:	4770      	bx	lr

08025756 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8025756:	b580      	push	{r7, lr}
 8025758:	b084      	sub	sp, #16
 802575a:	af00      	add	r7, sp, #0
 802575c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802575e:	687b      	ldr	r3, [r7, #4]
 8025760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025762:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8025764:	68fb      	ldr	r3, [r7, #12]
 8025766:	2200      	movs	r2, #0
 8025768:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 802576a:	68fb      	ldr	r3, [r7, #12]
 802576c:	2200      	movs	r2, #0
 802576e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8025770:	68f8      	ldr	r0, [r7, #12]
 8025772:	f7ff ff2d 	bl	80255d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8025776:	bf00      	nop
 8025778:	3710      	adds	r7, #16
 802577a:	46bd      	mov	sp, r7
 802577c:	bd80      	pop	{r7, pc}

0802577e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 802577e:	b480      	push	{r7}
 8025780:	b085      	sub	sp, #20
 8025782:	af00      	add	r7, sp, #0
 8025784:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8025786:	687b      	ldr	r3, [r7, #4]
 8025788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802578c:	b2db      	uxtb	r3, r3
 802578e:	2b21      	cmp	r3, #33	; 0x21
 8025790:	d13e      	bne.n	8025810 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8025792:	687b      	ldr	r3, [r7, #4]
 8025794:	689b      	ldr	r3, [r3, #8]
 8025796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802579a:	d114      	bne.n	80257c6 <UART_Transmit_IT+0x48>
 802579c:	687b      	ldr	r3, [r7, #4]
 802579e:	691b      	ldr	r3, [r3, #16]
 80257a0:	2b00      	cmp	r3, #0
 80257a2:	d110      	bne.n	80257c6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80257a4:	687b      	ldr	r3, [r7, #4]
 80257a6:	6a1b      	ldr	r3, [r3, #32]
 80257a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80257aa:	68fb      	ldr	r3, [r7, #12]
 80257ac:	881b      	ldrh	r3, [r3, #0]
 80257ae:	461a      	mov	r2, r3
 80257b0:	687b      	ldr	r3, [r7, #4]
 80257b2:	681b      	ldr	r3, [r3, #0]
 80257b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80257b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80257ba:	687b      	ldr	r3, [r7, #4]
 80257bc:	6a1b      	ldr	r3, [r3, #32]
 80257be:	1c9a      	adds	r2, r3, #2
 80257c0:	687b      	ldr	r3, [r7, #4]
 80257c2:	621a      	str	r2, [r3, #32]
 80257c4:	e008      	b.n	80257d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80257c6:	687b      	ldr	r3, [r7, #4]
 80257c8:	6a1b      	ldr	r3, [r3, #32]
 80257ca:	1c59      	adds	r1, r3, #1
 80257cc:	687a      	ldr	r2, [r7, #4]
 80257ce:	6211      	str	r1, [r2, #32]
 80257d0:	781a      	ldrb	r2, [r3, #0]
 80257d2:	687b      	ldr	r3, [r7, #4]
 80257d4:	681b      	ldr	r3, [r3, #0]
 80257d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80257d8:	687b      	ldr	r3, [r7, #4]
 80257da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80257dc:	b29b      	uxth	r3, r3
 80257de:	3b01      	subs	r3, #1
 80257e0:	b29b      	uxth	r3, r3
 80257e2:	687a      	ldr	r2, [r7, #4]
 80257e4:	4619      	mov	r1, r3
 80257e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80257e8:	2b00      	cmp	r3, #0
 80257ea:	d10f      	bne.n	802580c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80257ec:	687b      	ldr	r3, [r7, #4]
 80257ee:	681b      	ldr	r3, [r3, #0]
 80257f0:	68da      	ldr	r2, [r3, #12]
 80257f2:	687b      	ldr	r3, [r7, #4]
 80257f4:	681b      	ldr	r3, [r3, #0]
 80257f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80257fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80257fc:	687b      	ldr	r3, [r7, #4]
 80257fe:	681b      	ldr	r3, [r3, #0]
 8025800:	68da      	ldr	r2, [r3, #12]
 8025802:	687b      	ldr	r3, [r7, #4]
 8025804:	681b      	ldr	r3, [r3, #0]
 8025806:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802580a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 802580c:	2300      	movs	r3, #0
 802580e:	e000      	b.n	8025812 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8025810:	2302      	movs	r3, #2
  }
}
 8025812:	4618      	mov	r0, r3
 8025814:	3714      	adds	r7, #20
 8025816:	46bd      	mov	sp, r7
 8025818:	bc80      	pop	{r7}
 802581a:	4770      	bx	lr

0802581c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 802581c:	b580      	push	{r7, lr}
 802581e:	b082      	sub	sp, #8
 8025820:	af00      	add	r7, sp, #0
 8025822:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8025824:	687b      	ldr	r3, [r7, #4]
 8025826:	681b      	ldr	r3, [r3, #0]
 8025828:	68da      	ldr	r2, [r3, #12]
 802582a:	687b      	ldr	r3, [r7, #4]
 802582c:	681b      	ldr	r3, [r3, #0]
 802582e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8025832:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8025834:	687b      	ldr	r3, [r7, #4]
 8025836:	2220      	movs	r2, #32
 8025838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 802583c:	6878      	ldr	r0, [r7, #4]
 802583e:	f7f9 fd79 	bl	801f334 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8025842:	2300      	movs	r3, #0
}
 8025844:	4618      	mov	r0, r3
 8025846:	3708      	adds	r7, #8
 8025848:	46bd      	mov	sp, r7
 802584a:	bd80      	pop	{r7, pc}

0802584c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 802584c:	b580      	push	{r7, lr}
 802584e:	b086      	sub	sp, #24
 8025850:	af00      	add	r7, sp, #0
 8025852:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8025854:	687b      	ldr	r3, [r7, #4]
 8025856:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802585a:	b2db      	uxtb	r3, r3
 802585c:	2b22      	cmp	r3, #34	; 0x22
 802585e:	f040 8099 	bne.w	8025994 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8025862:	687b      	ldr	r3, [r7, #4]
 8025864:	689b      	ldr	r3, [r3, #8]
 8025866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802586a:	d117      	bne.n	802589c <UART_Receive_IT+0x50>
 802586c:	687b      	ldr	r3, [r7, #4]
 802586e:	691b      	ldr	r3, [r3, #16]
 8025870:	2b00      	cmp	r3, #0
 8025872:	d113      	bne.n	802589c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8025874:	2300      	movs	r3, #0
 8025876:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8025878:	687b      	ldr	r3, [r7, #4]
 802587a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802587c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 802587e:	687b      	ldr	r3, [r7, #4]
 8025880:	681b      	ldr	r3, [r3, #0]
 8025882:	685b      	ldr	r3, [r3, #4]
 8025884:	b29b      	uxth	r3, r3
 8025886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802588a:	b29a      	uxth	r2, r3
 802588c:	693b      	ldr	r3, [r7, #16]
 802588e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8025890:	687b      	ldr	r3, [r7, #4]
 8025892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025894:	1c9a      	adds	r2, r3, #2
 8025896:	687b      	ldr	r3, [r7, #4]
 8025898:	629a      	str	r2, [r3, #40]	; 0x28
 802589a:	e026      	b.n	80258ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 802589c:	687b      	ldr	r3, [r7, #4]
 802589e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80258a0:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80258a2:	2300      	movs	r3, #0
 80258a4:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80258a6:	687b      	ldr	r3, [r7, #4]
 80258a8:	689b      	ldr	r3, [r3, #8]
 80258aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80258ae:	d007      	beq.n	80258c0 <UART_Receive_IT+0x74>
 80258b0:	687b      	ldr	r3, [r7, #4]
 80258b2:	689b      	ldr	r3, [r3, #8]
 80258b4:	2b00      	cmp	r3, #0
 80258b6:	d10a      	bne.n	80258ce <UART_Receive_IT+0x82>
 80258b8:	687b      	ldr	r3, [r7, #4]
 80258ba:	691b      	ldr	r3, [r3, #16]
 80258bc:	2b00      	cmp	r3, #0
 80258be:	d106      	bne.n	80258ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80258c0:	687b      	ldr	r3, [r7, #4]
 80258c2:	681b      	ldr	r3, [r3, #0]
 80258c4:	685b      	ldr	r3, [r3, #4]
 80258c6:	b2da      	uxtb	r2, r3
 80258c8:	697b      	ldr	r3, [r7, #20]
 80258ca:	701a      	strb	r2, [r3, #0]
 80258cc:	e008      	b.n	80258e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80258ce:	687b      	ldr	r3, [r7, #4]
 80258d0:	681b      	ldr	r3, [r3, #0]
 80258d2:	685b      	ldr	r3, [r3, #4]
 80258d4:	b2db      	uxtb	r3, r3
 80258d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80258da:	b2da      	uxtb	r2, r3
 80258dc:	697b      	ldr	r3, [r7, #20]
 80258de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80258e0:	687b      	ldr	r3, [r7, #4]
 80258e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80258e4:	1c5a      	adds	r2, r3, #1
 80258e6:	687b      	ldr	r3, [r7, #4]
 80258e8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80258ea:	687b      	ldr	r3, [r7, #4]
 80258ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80258ee:	b29b      	uxth	r3, r3
 80258f0:	3b01      	subs	r3, #1
 80258f2:	b29b      	uxth	r3, r3
 80258f4:	687a      	ldr	r2, [r7, #4]
 80258f6:	4619      	mov	r1, r3
 80258f8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80258fa:	2b00      	cmp	r3, #0
 80258fc:	d148      	bne.n	8025990 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80258fe:	687b      	ldr	r3, [r7, #4]
 8025900:	681b      	ldr	r3, [r3, #0]
 8025902:	68da      	ldr	r2, [r3, #12]
 8025904:	687b      	ldr	r3, [r7, #4]
 8025906:	681b      	ldr	r3, [r3, #0]
 8025908:	f022 0220 	bic.w	r2, r2, #32
 802590c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 802590e:	687b      	ldr	r3, [r7, #4]
 8025910:	681b      	ldr	r3, [r3, #0]
 8025912:	68da      	ldr	r2, [r3, #12]
 8025914:	687b      	ldr	r3, [r7, #4]
 8025916:	681b      	ldr	r3, [r3, #0]
 8025918:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802591c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 802591e:	687b      	ldr	r3, [r7, #4]
 8025920:	681b      	ldr	r3, [r3, #0]
 8025922:	695a      	ldr	r2, [r3, #20]
 8025924:	687b      	ldr	r3, [r7, #4]
 8025926:	681b      	ldr	r3, [r3, #0]
 8025928:	f022 0201 	bic.w	r2, r2, #1
 802592c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 802592e:	687b      	ldr	r3, [r7, #4]
 8025930:	2220      	movs	r2, #32
 8025932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8025936:	687b      	ldr	r3, [r7, #4]
 8025938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802593a:	2b01      	cmp	r3, #1
 802593c:	d123      	bne.n	8025986 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802593e:	687b      	ldr	r3, [r7, #4]
 8025940:	2200      	movs	r2, #0
 8025942:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8025944:	687b      	ldr	r3, [r7, #4]
 8025946:	681b      	ldr	r3, [r3, #0]
 8025948:	68da      	ldr	r2, [r3, #12]
 802594a:	687b      	ldr	r3, [r7, #4]
 802594c:	681b      	ldr	r3, [r3, #0]
 802594e:	f022 0210 	bic.w	r2, r2, #16
 8025952:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8025954:	687b      	ldr	r3, [r7, #4]
 8025956:	681b      	ldr	r3, [r3, #0]
 8025958:	681b      	ldr	r3, [r3, #0]
 802595a:	f003 0310 	and.w	r3, r3, #16
 802595e:	2b10      	cmp	r3, #16
 8025960:	d10a      	bne.n	8025978 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8025962:	2300      	movs	r3, #0
 8025964:	60fb      	str	r3, [r7, #12]
 8025966:	687b      	ldr	r3, [r7, #4]
 8025968:	681b      	ldr	r3, [r3, #0]
 802596a:	681b      	ldr	r3, [r3, #0]
 802596c:	60fb      	str	r3, [r7, #12]
 802596e:	687b      	ldr	r3, [r7, #4]
 8025970:	681b      	ldr	r3, [r3, #0]
 8025972:	685b      	ldr	r3, [r3, #4]
 8025974:	60fb      	str	r3, [r7, #12]
 8025976:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8025978:	687b      	ldr	r3, [r7, #4]
 802597a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802597c:	4619      	mov	r1, r3
 802597e:	6878      	ldr	r0, [r7, #4]
 8025980:	f7ff fe2f 	bl	80255e2 <HAL_UARTEx_RxEventCallback>
 8025984:	e002      	b.n	802598c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8025986:	6878      	ldr	r0, [r7, #4]
 8025988:	f7f9 fca4 	bl	801f2d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 802598c:	2300      	movs	r3, #0
 802598e:	e002      	b.n	8025996 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8025990:	2300      	movs	r3, #0
 8025992:	e000      	b.n	8025996 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8025994:	2302      	movs	r3, #2
  }
}
 8025996:	4618      	mov	r0, r3
 8025998:	3718      	adds	r7, #24
 802599a:	46bd      	mov	sp, r7
 802599c:	bd80      	pop	{r7, pc}
	...

080259a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80259a0:	b580      	push	{r7, lr}
 80259a2:	b084      	sub	sp, #16
 80259a4:	af00      	add	r7, sp, #0
 80259a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80259a8:	687b      	ldr	r3, [r7, #4]
 80259aa:	681b      	ldr	r3, [r3, #0]
 80259ac:	691b      	ldr	r3, [r3, #16]
 80259ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80259b2:	687b      	ldr	r3, [r7, #4]
 80259b4:	68da      	ldr	r2, [r3, #12]
 80259b6:	687b      	ldr	r3, [r7, #4]
 80259b8:	681b      	ldr	r3, [r3, #0]
 80259ba:	430a      	orrs	r2, r1
 80259bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80259be:	687b      	ldr	r3, [r7, #4]
 80259c0:	689a      	ldr	r2, [r3, #8]
 80259c2:	687b      	ldr	r3, [r7, #4]
 80259c4:	691b      	ldr	r3, [r3, #16]
 80259c6:	431a      	orrs	r2, r3
 80259c8:	687b      	ldr	r3, [r7, #4]
 80259ca:	695b      	ldr	r3, [r3, #20]
 80259cc:	4313      	orrs	r3, r2
 80259ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80259d0:	687b      	ldr	r3, [r7, #4]
 80259d2:	681b      	ldr	r3, [r3, #0]
 80259d4:	68db      	ldr	r3, [r3, #12]
 80259d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80259da:	f023 030c 	bic.w	r3, r3, #12
 80259de:	687a      	ldr	r2, [r7, #4]
 80259e0:	6812      	ldr	r2, [r2, #0]
 80259e2:	68b9      	ldr	r1, [r7, #8]
 80259e4:	430b      	orrs	r3, r1
 80259e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80259e8:	687b      	ldr	r3, [r7, #4]
 80259ea:	681b      	ldr	r3, [r3, #0]
 80259ec:	695b      	ldr	r3, [r3, #20]
 80259ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80259f2:	687b      	ldr	r3, [r7, #4]
 80259f4:	699a      	ldr	r2, [r3, #24]
 80259f6:	687b      	ldr	r3, [r7, #4]
 80259f8:	681b      	ldr	r3, [r3, #0]
 80259fa:	430a      	orrs	r2, r1
 80259fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80259fe:	687b      	ldr	r3, [r7, #4]
 8025a00:	681b      	ldr	r3, [r3, #0]
 8025a02:	4a2c      	ldr	r2, [pc, #176]	; (8025ab4 <UART_SetConfig+0x114>)
 8025a04:	4293      	cmp	r3, r2
 8025a06:	d103      	bne.n	8025a10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8025a08:	f7fe fde4 	bl	80245d4 <HAL_RCC_GetPCLK2Freq>
 8025a0c:	60f8      	str	r0, [r7, #12]
 8025a0e:	e002      	b.n	8025a16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8025a10:	f7fe fdcc 	bl	80245ac <HAL_RCC_GetPCLK1Freq>
 8025a14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8025a16:	68fa      	ldr	r2, [r7, #12]
 8025a18:	4613      	mov	r3, r2
 8025a1a:	009b      	lsls	r3, r3, #2
 8025a1c:	4413      	add	r3, r2
 8025a1e:	009a      	lsls	r2, r3, #2
 8025a20:	441a      	add	r2, r3
 8025a22:	687b      	ldr	r3, [r7, #4]
 8025a24:	685b      	ldr	r3, [r3, #4]
 8025a26:	009b      	lsls	r3, r3, #2
 8025a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8025a2c:	4a22      	ldr	r2, [pc, #136]	; (8025ab8 <UART_SetConfig+0x118>)
 8025a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8025a32:	095b      	lsrs	r3, r3, #5
 8025a34:	0119      	lsls	r1, r3, #4
 8025a36:	68fa      	ldr	r2, [r7, #12]
 8025a38:	4613      	mov	r3, r2
 8025a3a:	009b      	lsls	r3, r3, #2
 8025a3c:	4413      	add	r3, r2
 8025a3e:	009a      	lsls	r2, r3, #2
 8025a40:	441a      	add	r2, r3
 8025a42:	687b      	ldr	r3, [r7, #4]
 8025a44:	685b      	ldr	r3, [r3, #4]
 8025a46:	009b      	lsls	r3, r3, #2
 8025a48:	fbb2 f2f3 	udiv	r2, r2, r3
 8025a4c:	4b1a      	ldr	r3, [pc, #104]	; (8025ab8 <UART_SetConfig+0x118>)
 8025a4e:	fba3 0302 	umull	r0, r3, r3, r2
 8025a52:	095b      	lsrs	r3, r3, #5
 8025a54:	2064      	movs	r0, #100	; 0x64
 8025a56:	fb00 f303 	mul.w	r3, r0, r3
 8025a5a:	1ad3      	subs	r3, r2, r3
 8025a5c:	011b      	lsls	r3, r3, #4
 8025a5e:	3332      	adds	r3, #50	; 0x32
 8025a60:	4a15      	ldr	r2, [pc, #84]	; (8025ab8 <UART_SetConfig+0x118>)
 8025a62:	fba2 2303 	umull	r2, r3, r2, r3
 8025a66:	095b      	lsrs	r3, r3, #5
 8025a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8025a6c:	4419      	add	r1, r3
 8025a6e:	68fa      	ldr	r2, [r7, #12]
 8025a70:	4613      	mov	r3, r2
 8025a72:	009b      	lsls	r3, r3, #2
 8025a74:	4413      	add	r3, r2
 8025a76:	009a      	lsls	r2, r3, #2
 8025a78:	441a      	add	r2, r3
 8025a7a:	687b      	ldr	r3, [r7, #4]
 8025a7c:	685b      	ldr	r3, [r3, #4]
 8025a7e:	009b      	lsls	r3, r3, #2
 8025a80:	fbb2 f2f3 	udiv	r2, r2, r3
 8025a84:	4b0c      	ldr	r3, [pc, #48]	; (8025ab8 <UART_SetConfig+0x118>)
 8025a86:	fba3 0302 	umull	r0, r3, r3, r2
 8025a8a:	095b      	lsrs	r3, r3, #5
 8025a8c:	2064      	movs	r0, #100	; 0x64
 8025a8e:	fb00 f303 	mul.w	r3, r0, r3
 8025a92:	1ad3      	subs	r3, r2, r3
 8025a94:	011b      	lsls	r3, r3, #4
 8025a96:	3332      	adds	r3, #50	; 0x32
 8025a98:	4a07      	ldr	r2, [pc, #28]	; (8025ab8 <UART_SetConfig+0x118>)
 8025a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8025a9e:	095b      	lsrs	r3, r3, #5
 8025aa0:	f003 020f 	and.w	r2, r3, #15
 8025aa4:	687b      	ldr	r3, [r7, #4]
 8025aa6:	681b      	ldr	r3, [r3, #0]
 8025aa8:	440a      	add	r2, r1
 8025aaa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8025aac:	bf00      	nop
 8025aae:	3710      	adds	r7, #16
 8025ab0:	46bd      	mov	sp, r7
 8025ab2:	bd80      	pop	{r7, pc}
 8025ab4:	40013800 	.word	0x40013800
 8025ab8:	51eb851f 	.word	0x51eb851f

08025abc <__errno>:
 8025abc:	4b01      	ldr	r3, [pc, #4]	; (8025ac4 <__errno+0x8>)
 8025abe:	6818      	ldr	r0, [r3, #0]
 8025ac0:	4770      	bx	lr
 8025ac2:	bf00      	nop
 8025ac4:	20000204 	.word	0x20000204

08025ac8 <__libc_init_array>:
 8025ac8:	b570      	push	{r4, r5, r6, lr}
 8025aca:	2600      	movs	r6, #0
 8025acc:	4d0c      	ldr	r5, [pc, #48]	; (8025b00 <__libc_init_array+0x38>)
 8025ace:	4c0d      	ldr	r4, [pc, #52]	; (8025b04 <__libc_init_array+0x3c>)
 8025ad0:	1b64      	subs	r4, r4, r5
 8025ad2:	10a4      	asrs	r4, r4, #2
 8025ad4:	42a6      	cmp	r6, r4
 8025ad6:	d109      	bne.n	8025aec <__libc_init_array+0x24>
 8025ad8:	f000 fc64 	bl	80263a4 <_init>
 8025adc:	2600      	movs	r6, #0
 8025ade:	4d0a      	ldr	r5, [pc, #40]	; (8025b08 <__libc_init_array+0x40>)
 8025ae0:	4c0a      	ldr	r4, [pc, #40]	; (8025b0c <__libc_init_array+0x44>)
 8025ae2:	1b64      	subs	r4, r4, r5
 8025ae4:	10a4      	asrs	r4, r4, #2
 8025ae6:	42a6      	cmp	r6, r4
 8025ae8:	d105      	bne.n	8025af6 <__libc_init_array+0x2e>
 8025aea:	bd70      	pop	{r4, r5, r6, pc}
 8025aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8025af0:	4798      	blx	r3
 8025af2:	3601      	adds	r6, #1
 8025af4:	e7ee      	b.n	8025ad4 <__libc_init_array+0xc>
 8025af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8025afa:	4798      	blx	r3
 8025afc:	3601      	adds	r6, #1
 8025afe:	e7f2      	b.n	8025ae6 <__libc_init_array+0x1e>
 8025b00:	08026ee8 	.word	0x08026ee8
 8025b04:	08026ee8 	.word	0x08026ee8
 8025b08:	08026ee8 	.word	0x08026ee8
 8025b0c:	08026eec 	.word	0x08026eec

08025b10 <memcpy>:
 8025b10:	440a      	add	r2, r1
 8025b12:	4291      	cmp	r1, r2
 8025b14:	f100 33ff 	add.w	r3, r0, #4294967295
 8025b18:	d100      	bne.n	8025b1c <memcpy+0xc>
 8025b1a:	4770      	bx	lr
 8025b1c:	b510      	push	{r4, lr}
 8025b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025b22:	4291      	cmp	r1, r2
 8025b24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025b28:	d1f9      	bne.n	8025b1e <memcpy+0xe>
 8025b2a:	bd10      	pop	{r4, pc}

08025b2c <memset>:
 8025b2c:	4603      	mov	r3, r0
 8025b2e:	4402      	add	r2, r0
 8025b30:	4293      	cmp	r3, r2
 8025b32:	d100      	bne.n	8025b36 <memset+0xa>
 8025b34:	4770      	bx	lr
 8025b36:	f803 1b01 	strb.w	r1, [r3], #1
 8025b3a:	e7f9      	b.n	8025b30 <memset+0x4>

08025b3c <siprintf>:
 8025b3c:	b40e      	push	{r1, r2, r3}
 8025b3e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8025b42:	b500      	push	{lr}
 8025b44:	b09c      	sub	sp, #112	; 0x70
 8025b46:	ab1d      	add	r3, sp, #116	; 0x74
 8025b48:	9002      	str	r0, [sp, #8]
 8025b4a:	9006      	str	r0, [sp, #24]
 8025b4c:	9107      	str	r1, [sp, #28]
 8025b4e:	9104      	str	r1, [sp, #16]
 8025b50:	4808      	ldr	r0, [pc, #32]	; (8025b74 <siprintf+0x38>)
 8025b52:	4909      	ldr	r1, [pc, #36]	; (8025b78 <siprintf+0x3c>)
 8025b54:	f853 2b04 	ldr.w	r2, [r3], #4
 8025b58:	9105      	str	r1, [sp, #20]
 8025b5a:	6800      	ldr	r0, [r0, #0]
 8025b5c:	a902      	add	r1, sp, #8
 8025b5e:	9301      	str	r3, [sp, #4]
 8025b60:	f000 f870 	bl	8025c44 <_svfiprintf_r>
 8025b64:	2200      	movs	r2, #0
 8025b66:	9b02      	ldr	r3, [sp, #8]
 8025b68:	701a      	strb	r2, [r3, #0]
 8025b6a:	b01c      	add	sp, #112	; 0x70
 8025b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8025b70:	b003      	add	sp, #12
 8025b72:	4770      	bx	lr
 8025b74:	20000204 	.word	0x20000204
 8025b78:	ffff0208 	.word	0xffff0208

08025b7c <strcpy>:
 8025b7c:	4603      	mov	r3, r0
 8025b7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025b82:	f803 2b01 	strb.w	r2, [r3], #1
 8025b86:	2a00      	cmp	r2, #0
 8025b88:	d1f9      	bne.n	8025b7e <strcpy+0x2>
 8025b8a:	4770      	bx	lr

08025b8c <__ssputs_r>:
 8025b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025b90:	688e      	ldr	r6, [r1, #8]
 8025b92:	4682      	mov	sl, r0
 8025b94:	429e      	cmp	r6, r3
 8025b96:	460c      	mov	r4, r1
 8025b98:	4690      	mov	r8, r2
 8025b9a:	461f      	mov	r7, r3
 8025b9c:	d838      	bhi.n	8025c10 <__ssputs_r+0x84>
 8025b9e:	898a      	ldrh	r2, [r1, #12]
 8025ba0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8025ba4:	d032      	beq.n	8025c0c <__ssputs_r+0x80>
 8025ba6:	6825      	ldr	r5, [r4, #0]
 8025ba8:	6909      	ldr	r1, [r1, #16]
 8025baa:	3301      	adds	r3, #1
 8025bac:	eba5 0901 	sub.w	r9, r5, r1
 8025bb0:	6965      	ldr	r5, [r4, #20]
 8025bb2:	444b      	add	r3, r9
 8025bb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025bb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8025bbc:	106d      	asrs	r5, r5, #1
 8025bbe:	429d      	cmp	r5, r3
 8025bc0:	bf38      	it	cc
 8025bc2:	461d      	movcc	r5, r3
 8025bc4:	0553      	lsls	r3, r2, #21
 8025bc6:	d531      	bpl.n	8025c2c <__ssputs_r+0xa0>
 8025bc8:	4629      	mov	r1, r5
 8025bca:	f000 fb45 	bl	8026258 <_malloc_r>
 8025bce:	4606      	mov	r6, r0
 8025bd0:	b950      	cbnz	r0, 8025be8 <__ssputs_r+0x5c>
 8025bd2:	230c      	movs	r3, #12
 8025bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8025bd8:	f8ca 3000 	str.w	r3, [sl]
 8025bdc:	89a3      	ldrh	r3, [r4, #12]
 8025bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025be2:	81a3      	strh	r3, [r4, #12]
 8025be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025be8:	464a      	mov	r2, r9
 8025bea:	6921      	ldr	r1, [r4, #16]
 8025bec:	f7ff ff90 	bl	8025b10 <memcpy>
 8025bf0:	89a3      	ldrh	r3, [r4, #12]
 8025bf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8025bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025bfa:	81a3      	strh	r3, [r4, #12]
 8025bfc:	6126      	str	r6, [r4, #16]
 8025bfe:	444e      	add	r6, r9
 8025c00:	6026      	str	r6, [r4, #0]
 8025c02:	463e      	mov	r6, r7
 8025c04:	6165      	str	r5, [r4, #20]
 8025c06:	eba5 0509 	sub.w	r5, r5, r9
 8025c0a:	60a5      	str	r5, [r4, #8]
 8025c0c:	42be      	cmp	r6, r7
 8025c0e:	d900      	bls.n	8025c12 <__ssputs_r+0x86>
 8025c10:	463e      	mov	r6, r7
 8025c12:	4632      	mov	r2, r6
 8025c14:	4641      	mov	r1, r8
 8025c16:	6820      	ldr	r0, [r4, #0]
 8025c18:	f000 fab8 	bl	802618c <memmove>
 8025c1c:	68a3      	ldr	r3, [r4, #8]
 8025c1e:	6822      	ldr	r2, [r4, #0]
 8025c20:	1b9b      	subs	r3, r3, r6
 8025c22:	4432      	add	r2, r6
 8025c24:	2000      	movs	r0, #0
 8025c26:	60a3      	str	r3, [r4, #8]
 8025c28:	6022      	str	r2, [r4, #0]
 8025c2a:	e7db      	b.n	8025be4 <__ssputs_r+0x58>
 8025c2c:	462a      	mov	r2, r5
 8025c2e:	f000 fb6d 	bl	802630c <_realloc_r>
 8025c32:	4606      	mov	r6, r0
 8025c34:	2800      	cmp	r0, #0
 8025c36:	d1e1      	bne.n	8025bfc <__ssputs_r+0x70>
 8025c38:	4650      	mov	r0, sl
 8025c3a:	6921      	ldr	r1, [r4, #16]
 8025c3c:	f000 fac0 	bl	80261c0 <_free_r>
 8025c40:	e7c7      	b.n	8025bd2 <__ssputs_r+0x46>
	...

08025c44 <_svfiprintf_r>:
 8025c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c48:	4698      	mov	r8, r3
 8025c4a:	898b      	ldrh	r3, [r1, #12]
 8025c4c:	4607      	mov	r7, r0
 8025c4e:	061b      	lsls	r3, r3, #24
 8025c50:	460d      	mov	r5, r1
 8025c52:	4614      	mov	r4, r2
 8025c54:	b09d      	sub	sp, #116	; 0x74
 8025c56:	d50e      	bpl.n	8025c76 <_svfiprintf_r+0x32>
 8025c58:	690b      	ldr	r3, [r1, #16]
 8025c5a:	b963      	cbnz	r3, 8025c76 <_svfiprintf_r+0x32>
 8025c5c:	2140      	movs	r1, #64	; 0x40
 8025c5e:	f000 fafb 	bl	8026258 <_malloc_r>
 8025c62:	6028      	str	r0, [r5, #0]
 8025c64:	6128      	str	r0, [r5, #16]
 8025c66:	b920      	cbnz	r0, 8025c72 <_svfiprintf_r+0x2e>
 8025c68:	230c      	movs	r3, #12
 8025c6a:	603b      	str	r3, [r7, #0]
 8025c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8025c70:	e0d1      	b.n	8025e16 <_svfiprintf_r+0x1d2>
 8025c72:	2340      	movs	r3, #64	; 0x40
 8025c74:	616b      	str	r3, [r5, #20]
 8025c76:	2300      	movs	r3, #0
 8025c78:	9309      	str	r3, [sp, #36]	; 0x24
 8025c7a:	2320      	movs	r3, #32
 8025c7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025c80:	2330      	movs	r3, #48	; 0x30
 8025c82:	f04f 0901 	mov.w	r9, #1
 8025c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8025c8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8025e30 <_svfiprintf_r+0x1ec>
 8025c8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025c92:	4623      	mov	r3, r4
 8025c94:	469a      	mov	sl, r3
 8025c96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025c9a:	b10a      	cbz	r2, 8025ca0 <_svfiprintf_r+0x5c>
 8025c9c:	2a25      	cmp	r2, #37	; 0x25
 8025c9e:	d1f9      	bne.n	8025c94 <_svfiprintf_r+0x50>
 8025ca0:	ebba 0b04 	subs.w	fp, sl, r4
 8025ca4:	d00b      	beq.n	8025cbe <_svfiprintf_r+0x7a>
 8025ca6:	465b      	mov	r3, fp
 8025ca8:	4622      	mov	r2, r4
 8025caa:	4629      	mov	r1, r5
 8025cac:	4638      	mov	r0, r7
 8025cae:	f7ff ff6d 	bl	8025b8c <__ssputs_r>
 8025cb2:	3001      	adds	r0, #1
 8025cb4:	f000 80aa 	beq.w	8025e0c <_svfiprintf_r+0x1c8>
 8025cb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025cba:	445a      	add	r2, fp
 8025cbc:	9209      	str	r2, [sp, #36]	; 0x24
 8025cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8025cc2:	2b00      	cmp	r3, #0
 8025cc4:	f000 80a2 	beq.w	8025e0c <_svfiprintf_r+0x1c8>
 8025cc8:	2300      	movs	r3, #0
 8025cca:	f04f 32ff 	mov.w	r2, #4294967295
 8025cce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025cd2:	f10a 0a01 	add.w	sl, sl, #1
 8025cd6:	9304      	str	r3, [sp, #16]
 8025cd8:	9307      	str	r3, [sp, #28]
 8025cda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025cde:	931a      	str	r3, [sp, #104]	; 0x68
 8025ce0:	4654      	mov	r4, sl
 8025ce2:	2205      	movs	r2, #5
 8025ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025ce8:	4851      	ldr	r0, [pc, #324]	; (8025e30 <_svfiprintf_r+0x1ec>)
 8025cea:	f000 fa41 	bl	8026170 <memchr>
 8025cee:	9a04      	ldr	r2, [sp, #16]
 8025cf0:	b9d8      	cbnz	r0, 8025d2a <_svfiprintf_r+0xe6>
 8025cf2:	06d0      	lsls	r0, r2, #27
 8025cf4:	bf44      	itt	mi
 8025cf6:	2320      	movmi	r3, #32
 8025cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025cfc:	0711      	lsls	r1, r2, #28
 8025cfe:	bf44      	itt	mi
 8025d00:	232b      	movmi	r3, #43	; 0x2b
 8025d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025d06:	f89a 3000 	ldrb.w	r3, [sl]
 8025d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8025d0c:	d015      	beq.n	8025d3a <_svfiprintf_r+0xf6>
 8025d0e:	4654      	mov	r4, sl
 8025d10:	2000      	movs	r0, #0
 8025d12:	f04f 0c0a 	mov.w	ip, #10
 8025d16:	9a07      	ldr	r2, [sp, #28]
 8025d18:	4621      	mov	r1, r4
 8025d1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025d1e:	3b30      	subs	r3, #48	; 0x30
 8025d20:	2b09      	cmp	r3, #9
 8025d22:	d94e      	bls.n	8025dc2 <_svfiprintf_r+0x17e>
 8025d24:	b1b0      	cbz	r0, 8025d54 <_svfiprintf_r+0x110>
 8025d26:	9207      	str	r2, [sp, #28]
 8025d28:	e014      	b.n	8025d54 <_svfiprintf_r+0x110>
 8025d2a:	eba0 0308 	sub.w	r3, r0, r8
 8025d2e:	fa09 f303 	lsl.w	r3, r9, r3
 8025d32:	4313      	orrs	r3, r2
 8025d34:	46a2      	mov	sl, r4
 8025d36:	9304      	str	r3, [sp, #16]
 8025d38:	e7d2      	b.n	8025ce0 <_svfiprintf_r+0x9c>
 8025d3a:	9b03      	ldr	r3, [sp, #12]
 8025d3c:	1d19      	adds	r1, r3, #4
 8025d3e:	681b      	ldr	r3, [r3, #0]
 8025d40:	9103      	str	r1, [sp, #12]
 8025d42:	2b00      	cmp	r3, #0
 8025d44:	bfbb      	ittet	lt
 8025d46:	425b      	neglt	r3, r3
 8025d48:	f042 0202 	orrlt.w	r2, r2, #2
 8025d4c:	9307      	strge	r3, [sp, #28]
 8025d4e:	9307      	strlt	r3, [sp, #28]
 8025d50:	bfb8      	it	lt
 8025d52:	9204      	strlt	r2, [sp, #16]
 8025d54:	7823      	ldrb	r3, [r4, #0]
 8025d56:	2b2e      	cmp	r3, #46	; 0x2e
 8025d58:	d10c      	bne.n	8025d74 <_svfiprintf_r+0x130>
 8025d5a:	7863      	ldrb	r3, [r4, #1]
 8025d5c:	2b2a      	cmp	r3, #42	; 0x2a
 8025d5e:	d135      	bne.n	8025dcc <_svfiprintf_r+0x188>
 8025d60:	9b03      	ldr	r3, [sp, #12]
 8025d62:	3402      	adds	r4, #2
 8025d64:	1d1a      	adds	r2, r3, #4
 8025d66:	681b      	ldr	r3, [r3, #0]
 8025d68:	9203      	str	r2, [sp, #12]
 8025d6a:	2b00      	cmp	r3, #0
 8025d6c:	bfb8      	it	lt
 8025d6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8025d72:	9305      	str	r3, [sp, #20]
 8025d74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8025e40 <_svfiprintf_r+0x1fc>
 8025d78:	2203      	movs	r2, #3
 8025d7a:	4650      	mov	r0, sl
 8025d7c:	7821      	ldrb	r1, [r4, #0]
 8025d7e:	f000 f9f7 	bl	8026170 <memchr>
 8025d82:	b140      	cbz	r0, 8025d96 <_svfiprintf_r+0x152>
 8025d84:	2340      	movs	r3, #64	; 0x40
 8025d86:	eba0 000a 	sub.w	r0, r0, sl
 8025d8a:	fa03 f000 	lsl.w	r0, r3, r0
 8025d8e:	9b04      	ldr	r3, [sp, #16]
 8025d90:	3401      	adds	r4, #1
 8025d92:	4303      	orrs	r3, r0
 8025d94:	9304      	str	r3, [sp, #16]
 8025d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025d9a:	2206      	movs	r2, #6
 8025d9c:	4825      	ldr	r0, [pc, #148]	; (8025e34 <_svfiprintf_r+0x1f0>)
 8025d9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025da2:	f000 f9e5 	bl	8026170 <memchr>
 8025da6:	2800      	cmp	r0, #0
 8025da8:	d038      	beq.n	8025e1c <_svfiprintf_r+0x1d8>
 8025daa:	4b23      	ldr	r3, [pc, #140]	; (8025e38 <_svfiprintf_r+0x1f4>)
 8025dac:	bb1b      	cbnz	r3, 8025df6 <_svfiprintf_r+0x1b2>
 8025dae:	9b03      	ldr	r3, [sp, #12]
 8025db0:	3307      	adds	r3, #7
 8025db2:	f023 0307 	bic.w	r3, r3, #7
 8025db6:	3308      	adds	r3, #8
 8025db8:	9303      	str	r3, [sp, #12]
 8025dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025dbc:	4433      	add	r3, r6
 8025dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8025dc0:	e767      	b.n	8025c92 <_svfiprintf_r+0x4e>
 8025dc2:	460c      	mov	r4, r1
 8025dc4:	2001      	movs	r0, #1
 8025dc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8025dca:	e7a5      	b.n	8025d18 <_svfiprintf_r+0xd4>
 8025dcc:	2300      	movs	r3, #0
 8025dce:	f04f 0c0a 	mov.w	ip, #10
 8025dd2:	4619      	mov	r1, r3
 8025dd4:	3401      	adds	r4, #1
 8025dd6:	9305      	str	r3, [sp, #20]
 8025dd8:	4620      	mov	r0, r4
 8025dda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025dde:	3a30      	subs	r2, #48	; 0x30
 8025de0:	2a09      	cmp	r2, #9
 8025de2:	d903      	bls.n	8025dec <_svfiprintf_r+0x1a8>
 8025de4:	2b00      	cmp	r3, #0
 8025de6:	d0c5      	beq.n	8025d74 <_svfiprintf_r+0x130>
 8025de8:	9105      	str	r1, [sp, #20]
 8025dea:	e7c3      	b.n	8025d74 <_svfiprintf_r+0x130>
 8025dec:	4604      	mov	r4, r0
 8025dee:	2301      	movs	r3, #1
 8025df0:	fb0c 2101 	mla	r1, ip, r1, r2
 8025df4:	e7f0      	b.n	8025dd8 <_svfiprintf_r+0x194>
 8025df6:	ab03      	add	r3, sp, #12
 8025df8:	9300      	str	r3, [sp, #0]
 8025dfa:	462a      	mov	r2, r5
 8025dfc:	4638      	mov	r0, r7
 8025dfe:	4b0f      	ldr	r3, [pc, #60]	; (8025e3c <_svfiprintf_r+0x1f8>)
 8025e00:	a904      	add	r1, sp, #16
 8025e02:	f3af 8000 	nop.w
 8025e06:	1c42      	adds	r2, r0, #1
 8025e08:	4606      	mov	r6, r0
 8025e0a:	d1d6      	bne.n	8025dba <_svfiprintf_r+0x176>
 8025e0c:	89ab      	ldrh	r3, [r5, #12]
 8025e0e:	065b      	lsls	r3, r3, #25
 8025e10:	f53f af2c 	bmi.w	8025c6c <_svfiprintf_r+0x28>
 8025e14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025e16:	b01d      	add	sp, #116	; 0x74
 8025e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e1c:	ab03      	add	r3, sp, #12
 8025e1e:	9300      	str	r3, [sp, #0]
 8025e20:	462a      	mov	r2, r5
 8025e22:	4638      	mov	r0, r7
 8025e24:	4b05      	ldr	r3, [pc, #20]	; (8025e3c <_svfiprintf_r+0x1f8>)
 8025e26:	a904      	add	r1, sp, #16
 8025e28:	f000 f87c 	bl	8025f24 <_printf_i>
 8025e2c:	e7eb      	b.n	8025e06 <_svfiprintf_r+0x1c2>
 8025e2e:	bf00      	nop
 8025e30:	08026eb4 	.word	0x08026eb4
 8025e34:	08026ebe 	.word	0x08026ebe
 8025e38:	00000000 	.word	0x00000000
 8025e3c:	08025b8d 	.word	0x08025b8d
 8025e40:	08026eba 	.word	0x08026eba

08025e44 <_printf_common>:
 8025e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025e48:	4616      	mov	r6, r2
 8025e4a:	4699      	mov	r9, r3
 8025e4c:	688a      	ldr	r2, [r1, #8]
 8025e4e:	690b      	ldr	r3, [r1, #16]
 8025e50:	4607      	mov	r7, r0
 8025e52:	4293      	cmp	r3, r2
 8025e54:	bfb8      	it	lt
 8025e56:	4613      	movlt	r3, r2
 8025e58:	6033      	str	r3, [r6, #0]
 8025e5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025e5e:	460c      	mov	r4, r1
 8025e60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025e64:	b10a      	cbz	r2, 8025e6a <_printf_common+0x26>
 8025e66:	3301      	adds	r3, #1
 8025e68:	6033      	str	r3, [r6, #0]
 8025e6a:	6823      	ldr	r3, [r4, #0]
 8025e6c:	0699      	lsls	r1, r3, #26
 8025e6e:	bf42      	ittt	mi
 8025e70:	6833      	ldrmi	r3, [r6, #0]
 8025e72:	3302      	addmi	r3, #2
 8025e74:	6033      	strmi	r3, [r6, #0]
 8025e76:	6825      	ldr	r5, [r4, #0]
 8025e78:	f015 0506 	ands.w	r5, r5, #6
 8025e7c:	d106      	bne.n	8025e8c <_printf_common+0x48>
 8025e7e:	f104 0a19 	add.w	sl, r4, #25
 8025e82:	68e3      	ldr	r3, [r4, #12]
 8025e84:	6832      	ldr	r2, [r6, #0]
 8025e86:	1a9b      	subs	r3, r3, r2
 8025e88:	42ab      	cmp	r3, r5
 8025e8a:	dc28      	bgt.n	8025ede <_printf_common+0x9a>
 8025e8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8025e90:	1e13      	subs	r3, r2, #0
 8025e92:	6822      	ldr	r2, [r4, #0]
 8025e94:	bf18      	it	ne
 8025e96:	2301      	movne	r3, #1
 8025e98:	0692      	lsls	r2, r2, #26
 8025e9a:	d42d      	bmi.n	8025ef8 <_printf_common+0xb4>
 8025e9c:	4649      	mov	r1, r9
 8025e9e:	4638      	mov	r0, r7
 8025ea0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025ea4:	47c0      	blx	r8
 8025ea6:	3001      	adds	r0, #1
 8025ea8:	d020      	beq.n	8025eec <_printf_common+0xa8>
 8025eaa:	6823      	ldr	r3, [r4, #0]
 8025eac:	68e5      	ldr	r5, [r4, #12]
 8025eae:	f003 0306 	and.w	r3, r3, #6
 8025eb2:	2b04      	cmp	r3, #4
 8025eb4:	bf18      	it	ne
 8025eb6:	2500      	movne	r5, #0
 8025eb8:	6832      	ldr	r2, [r6, #0]
 8025eba:	f04f 0600 	mov.w	r6, #0
 8025ebe:	68a3      	ldr	r3, [r4, #8]
 8025ec0:	bf08      	it	eq
 8025ec2:	1aad      	subeq	r5, r5, r2
 8025ec4:	6922      	ldr	r2, [r4, #16]
 8025ec6:	bf08      	it	eq
 8025ec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025ecc:	4293      	cmp	r3, r2
 8025ece:	bfc4      	itt	gt
 8025ed0:	1a9b      	subgt	r3, r3, r2
 8025ed2:	18ed      	addgt	r5, r5, r3
 8025ed4:	341a      	adds	r4, #26
 8025ed6:	42b5      	cmp	r5, r6
 8025ed8:	d11a      	bne.n	8025f10 <_printf_common+0xcc>
 8025eda:	2000      	movs	r0, #0
 8025edc:	e008      	b.n	8025ef0 <_printf_common+0xac>
 8025ede:	2301      	movs	r3, #1
 8025ee0:	4652      	mov	r2, sl
 8025ee2:	4649      	mov	r1, r9
 8025ee4:	4638      	mov	r0, r7
 8025ee6:	47c0      	blx	r8
 8025ee8:	3001      	adds	r0, #1
 8025eea:	d103      	bne.n	8025ef4 <_printf_common+0xb0>
 8025eec:	f04f 30ff 	mov.w	r0, #4294967295
 8025ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025ef4:	3501      	adds	r5, #1
 8025ef6:	e7c4      	b.n	8025e82 <_printf_common+0x3e>
 8025ef8:	2030      	movs	r0, #48	; 0x30
 8025efa:	18e1      	adds	r1, r4, r3
 8025efc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025f00:	1c5a      	adds	r2, r3, #1
 8025f02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025f06:	4422      	add	r2, r4
 8025f08:	3302      	adds	r3, #2
 8025f0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025f0e:	e7c5      	b.n	8025e9c <_printf_common+0x58>
 8025f10:	2301      	movs	r3, #1
 8025f12:	4622      	mov	r2, r4
 8025f14:	4649      	mov	r1, r9
 8025f16:	4638      	mov	r0, r7
 8025f18:	47c0      	blx	r8
 8025f1a:	3001      	adds	r0, #1
 8025f1c:	d0e6      	beq.n	8025eec <_printf_common+0xa8>
 8025f1e:	3601      	adds	r6, #1
 8025f20:	e7d9      	b.n	8025ed6 <_printf_common+0x92>
	...

08025f24 <_printf_i>:
 8025f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025f28:	460c      	mov	r4, r1
 8025f2a:	7e27      	ldrb	r7, [r4, #24]
 8025f2c:	4691      	mov	r9, r2
 8025f2e:	2f78      	cmp	r7, #120	; 0x78
 8025f30:	4680      	mov	r8, r0
 8025f32:	469a      	mov	sl, r3
 8025f34:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025f36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025f3a:	d807      	bhi.n	8025f4c <_printf_i+0x28>
 8025f3c:	2f62      	cmp	r7, #98	; 0x62
 8025f3e:	d80a      	bhi.n	8025f56 <_printf_i+0x32>
 8025f40:	2f00      	cmp	r7, #0
 8025f42:	f000 80d9 	beq.w	80260f8 <_printf_i+0x1d4>
 8025f46:	2f58      	cmp	r7, #88	; 0x58
 8025f48:	f000 80a4 	beq.w	8026094 <_printf_i+0x170>
 8025f4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8025f50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8025f54:	e03a      	b.n	8025fcc <_printf_i+0xa8>
 8025f56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8025f5a:	2b15      	cmp	r3, #21
 8025f5c:	d8f6      	bhi.n	8025f4c <_printf_i+0x28>
 8025f5e:	a001      	add	r0, pc, #4	; (adr r0, 8025f64 <_printf_i+0x40>)
 8025f60:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8025f64:	08025fbd 	.word	0x08025fbd
 8025f68:	08025fd1 	.word	0x08025fd1
 8025f6c:	08025f4d 	.word	0x08025f4d
 8025f70:	08025f4d 	.word	0x08025f4d
 8025f74:	08025f4d 	.word	0x08025f4d
 8025f78:	08025f4d 	.word	0x08025f4d
 8025f7c:	08025fd1 	.word	0x08025fd1
 8025f80:	08025f4d 	.word	0x08025f4d
 8025f84:	08025f4d 	.word	0x08025f4d
 8025f88:	08025f4d 	.word	0x08025f4d
 8025f8c:	08025f4d 	.word	0x08025f4d
 8025f90:	080260df 	.word	0x080260df
 8025f94:	08026001 	.word	0x08026001
 8025f98:	080260c1 	.word	0x080260c1
 8025f9c:	08025f4d 	.word	0x08025f4d
 8025fa0:	08025f4d 	.word	0x08025f4d
 8025fa4:	08026101 	.word	0x08026101
 8025fa8:	08025f4d 	.word	0x08025f4d
 8025fac:	08026001 	.word	0x08026001
 8025fb0:	08025f4d 	.word	0x08025f4d
 8025fb4:	08025f4d 	.word	0x08025f4d
 8025fb8:	080260c9 	.word	0x080260c9
 8025fbc:	680b      	ldr	r3, [r1, #0]
 8025fbe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8025fc2:	1d1a      	adds	r2, r3, #4
 8025fc4:	681b      	ldr	r3, [r3, #0]
 8025fc6:	600a      	str	r2, [r1, #0]
 8025fc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025fcc:	2301      	movs	r3, #1
 8025fce:	e0a4      	b.n	802611a <_printf_i+0x1f6>
 8025fd0:	6825      	ldr	r5, [r4, #0]
 8025fd2:	6808      	ldr	r0, [r1, #0]
 8025fd4:	062e      	lsls	r6, r5, #24
 8025fd6:	f100 0304 	add.w	r3, r0, #4
 8025fda:	d50a      	bpl.n	8025ff2 <_printf_i+0xce>
 8025fdc:	6805      	ldr	r5, [r0, #0]
 8025fde:	600b      	str	r3, [r1, #0]
 8025fe0:	2d00      	cmp	r5, #0
 8025fe2:	da03      	bge.n	8025fec <_printf_i+0xc8>
 8025fe4:	232d      	movs	r3, #45	; 0x2d
 8025fe6:	426d      	negs	r5, r5
 8025fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025fec:	230a      	movs	r3, #10
 8025fee:	485e      	ldr	r0, [pc, #376]	; (8026168 <_printf_i+0x244>)
 8025ff0:	e019      	b.n	8026026 <_printf_i+0x102>
 8025ff2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8025ff6:	6805      	ldr	r5, [r0, #0]
 8025ff8:	600b      	str	r3, [r1, #0]
 8025ffa:	bf18      	it	ne
 8025ffc:	b22d      	sxthne	r5, r5
 8025ffe:	e7ef      	b.n	8025fe0 <_printf_i+0xbc>
 8026000:	680b      	ldr	r3, [r1, #0]
 8026002:	6825      	ldr	r5, [r4, #0]
 8026004:	1d18      	adds	r0, r3, #4
 8026006:	6008      	str	r0, [r1, #0]
 8026008:	0628      	lsls	r0, r5, #24
 802600a:	d501      	bpl.n	8026010 <_printf_i+0xec>
 802600c:	681d      	ldr	r5, [r3, #0]
 802600e:	e002      	b.n	8026016 <_printf_i+0xf2>
 8026010:	0669      	lsls	r1, r5, #25
 8026012:	d5fb      	bpl.n	802600c <_printf_i+0xe8>
 8026014:	881d      	ldrh	r5, [r3, #0]
 8026016:	2f6f      	cmp	r7, #111	; 0x6f
 8026018:	bf0c      	ite	eq
 802601a:	2308      	moveq	r3, #8
 802601c:	230a      	movne	r3, #10
 802601e:	4852      	ldr	r0, [pc, #328]	; (8026168 <_printf_i+0x244>)
 8026020:	2100      	movs	r1, #0
 8026022:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8026026:	6866      	ldr	r6, [r4, #4]
 8026028:	2e00      	cmp	r6, #0
 802602a:	bfa8      	it	ge
 802602c:	6821      	ldrge	r1, [r4, #0]
 802602e:	60a6      	str	r6, [r4, #8]
 8026030:	bfa4      	itt	ge
 8026032:	f021 0104 	bicge.w	r1, r1, #4
 8026036:	6021      	strge	r1, [r4, #0]
 8026038:	b90d      	cbnz	r5, 802603e <_printf_i+0x11a>
 802603a:	2e00      	cmp	r6, #0
 802603c:	d04d      	beq.n	80260da <_printf_i+0x1b6>
 802603e:	4616      	mov	r6, r2
 8026040:	fbb5 f1f3 	udiv	r1, r5, r3
 8026044:	fb03 5711 	mls	r7, r3, r1, r5
 8026048:	5dc7      	ldrb	r7, [r0, r7]
 802604a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802604e:	462f      	mov	r7, r5
 8026050:	42bb      	cmp	r3, r7
 8026052:	460d      	mov	r5, r1
 8026054:	d9f4      	bls.n	8026040 <_printf_i+0x11c>
 8026056:	2b08      	cmp	r3, #8
 8026058:	d10b      	bne.n	8026072 <_printf_i+0x14e>
 802605a:	6823      	ldr	r3, [r4, #0]
 802605c:	07df      	lsls	r7, r3, #31
 802605e:	d508      	bpl.n	8026072 <_printf_i+0x14e>
 8026060:	6923      	ldr	r3, [r4, #16]
 8026062:	6861      	ldr	r1, [r4, #4]
 8026064:	4299      	cmp	r1, r3
 8026066:	bfde      	ittt	le
 8026068:	2330      	movle	r3, #48	; 0x30
 802606a:	f806 3c01 	strble.w	r3, [r6, #-1]
 802606e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8026072:	1b92      	subs	r2, r2, r6
 8026074:	6122      	str	r2, [r4, #16]
 8026076:	464b      	mov	r3, r9
 8026078:	4621      	mov	r1, r4
 802607a:	4640      	mov	r0, r8
 802607c:	f8cd a000 	str.w	sl, [sp]
 8026080:	aa03      	add	r2, sp, #12
 8026082:	f7ff fedf 	bl	8025e44 <_printf_common>
 8026086:	3001      	adds	r0, #1
 8026088:	d14c      	bne.n	8026124 <_printf_i+0x200>
 802608a:	f04f 30ff 	mov.w	r0, #4294967295
 802608e:	b004      	add	sp, #16
 8026090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026094:	4834      	ldr	r0, [pc, #208]	; (8026168 <_printf_i+0x244>)
 8026096:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802609a:	680e      	ldr	r6, [r1, #0]
 802609c:	6823      	ldr	r3, [r4, #0]
 802609e:	f856 5b04 	ldr.w	r5, [r6], #4
 80260a2:	061f      	lsls	r7, r3, #24
 80260a4:	600e      	str	r6, [r1, #0]
 80260a6:	d514      	bpl.n	80260d2 <_printf_i+0x1ae>
 80260a8:	07d9      	lsls	r1, r3, #31
 80260aa:	bf44      	itt	mi
 80260ac:	f043 0320 	orrmi.w	r3, r3, #32
 80260b0:	6023      	strmi	r3, [r4, #0]
 80260b2:	b91d      	cbnz	r5, 80260bc <_printf_i+0x198>
 80260b4:	6823      	ldr	r3, [r4, #0]
 80260b6:	f023 0320 	bic.w	r3, r3, #32
 80260ba:	6023      	str	r3, [r4, #0]
 80260bc:	2310      	movs	r3, #16
 80260be:	e7af      	b.n	8026020 <_printf_i+0xfc>
 80260c0:	6823      	ldr	r3, [r4, #0]
 80260c2:	f043 0320 	orr.w	r3, r3, #32
 80260c6:	6023      	str	r3, [r4, #0]
 80260c8:	2378      	movs	r3, #120	; 0x78
 80260ca:	4828      	ldr	r0, [pc, #160]	; (802616c <_printf_i+0x248>)
 80260cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80260d0:	e7e3      	b.n	802609a <_printf_i+0x176>
 80260d2:	065e      	lsls	r6, r3, #25
 80260d4:	bf48      	it	mi
 80260d6:	b2ad      	uxthmi	r5, r5
 80260d8:	e7e6      	b.n	80260a8 <_printf_i+0x184>
 80260da:	4616      	mov	r6, r2
 80260dc:	e7bb      	b.n	8026056 <_printf_i+0x132>
 80260de:	680b      	ldr	r3, [r1, #0]
 80260e0:	6826      	ldr	r6, [r4, #0]
 80260e2:	1d1d      	adds	r5, r3, #4
 80260e4:	6960      	ldr	r0, [r4, #20]
 80260e6:	600d      	str	r5, [r1, #0]
 80260e8:	0635      	lsls	r5, r6, #24
 80260ea:	681b      	ldr	r3, [r3, #0]
 80260ec:	d501      	bpl.n	80260f2 <_printf_i+0x1ce>
 80260ee:	6018      	str	r0, [r3, #0]
 80260f0:	e002      	b.n	80260f8 <_printf_i+0x1d4>
 80260f2:	0671      	lsls	r1, r6, #25
 80260f4:	d5fb      	bpl.n	80260ee <_printf_i+0x1ca>
 80260f6:	8018      	strh	r0, [r3, #0]
 80260f8:	2300      	movs	r3, #0
 80260fa:	4616      	mov	r6, r2
 80260fc:	6123      	str	r3, [r4, #16]
 80260fe:	e7ba      	b.n	8026076 <_printf_i+0x152>
 8026100:	680b      	ldr	r3, [r1, #0]
 8026102:	1d1a      	adds	r2, r3, #4
 8026104:	600a      	str	r2, [r1, #0]
 8026106:	681e      	ldr	r6, [r3, #0]
 8026108:	2100      	movs	r1, #0
 802610a:	4630      	mov	r0, r6
 802610c:	6862      	ldr	r2, [r4, #4]
 802610e:	f000 f82f 	bl	8026170 <memchr>
 8026112:	b108      	cbz	r0, 8026118 <_printf_i+0x1f4>
 8026114:	1b80      	subs	r0, r0, r6
 8026116:	6060      	str	r0, [r4, #4]
 8026118:	6863      	ldr	r3, [r4, #4]
 802611a:	6123      	str	r3, [r4, #16]
 802611c:	2300      	movs	r3, #0
 802611e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026122:	e7a8      	b.n	8026076 <_printf_i+0x152>
 8026124:	4632      	mov	r2, r6
 8026126:	4649      	mov	r1, r9
 8026128:	4640      	mov	r0, r8
 802612a:	6923      	ldr	r3, [r4, #16]
 802612c:	47d0      	blx	sl
 802612e:	3001      	adds	r0, #1
 8026130:	d0ab      	beq.n	802608a <_printf_i+0x166>
 8026132:	6823      	ldr	r3, [r4, #0]
 8026134:	079b      	lsls	r3, r3, #30
 8026136:	d413      	bmi.n	8026160 <_printf_i+0x23c>
 8026138:	68e0      	ldr	r0, [r4, #12]
 802613a:	9b03      	ldr	r3, [sp, #12]
 802613c:	4298      	cmp	r0, r3
 802613e:	bfb8      	it	lt
 8026140:	4618      	movlt	r0, r3
 8026142:	e7a4      	b.n	802608e <_printf_i+0x16a>
 8026144:	2301      	movs	r3, #1
 8026146:	4632      	mov	r2, r6
 8026148:	4649      	mov	r1, r9
 802614a:	4640      	mov	r0, r8
 802614c:	47d0      	blx	sl
 802614e:	3001      	adds	r0, #1
 8026150:	d09b      	beq.n	802608a <_printf_i+0x166>
 8026152:	3501      	adds	r5, #1
 8026154:	68e3      	ldr	r3, [r4, #12]
 8026156:	9903      	ldr	r1, [sp, #12]
 8026158:	1a5b      	subs	r3, r3, r1
 802615a:	42ab      	cmp	r3, r5
 802615c:	dcf2      	bgt.n	8026144 <_printf_i+0x220>
 802615e:	e7eb      	b.n	8026138 <_printf_i+0x214>
 8026160:	2500      	movs	r5, #0
 8026162:	f104 0619 	add.w	r6, r4, #25
 8026166:	e7f5      	b.n	8026154 <_printf_i+0x230>
 8026168:	08026ec5 	.word	0x08026ec5
 802616c:	08026ed6 	.word	0x08026ed6

08026170 <memchr>:
 8026170:	4603      	mov	r3, r0
 8026172:	b510      	push	{r4, lr}
 8026174:	b2c9      	uxtb	r1, r1
 8026176:	4402      	add	r2, r0
 8026178:	4293      	cmp	r3, r2
 802617a:	4618      	mov	r0, r3
 802617c:	d101      	bne.n	8026182 <memchr+0x12>
 802617e:	2000      	movs	r0, #0
 8026180:	e003      	b.n	802618a <memchr+0x1a>
 8026182:	7804      	ldrb	r4, [r0, #0]
 8026184:	3301      	adds	r3, #1
 8026186:	428c      	cmp	r4, r1
 8026188:	d1f6      	bne.n	8026178 <memchr+0x8>
 802618a:	bd10      	pop	{r4, pc}

0802618c <memmove>:
 802618c:	4288      	cmp	r0, r1
 802618e:	b510      	push	{r4, lr}
 8026190:	eb01 0402 	add.w	r4, r1, r2
 8026194:	d902      	bls.n	802619c <memmove+0x10>
 8026196:	4284      	cmp	r4, r0
 8026198:	4623      	mov	r3, r4
 802619a:	d807      	bhi.n	80261ac <memmove+0x20>
 802619c:	1e43      	subs	r3, r0, #1
 802619e:	42a1      	cmp	r1, r4
 80261a0:	d008      	beq.n	80261b4 <memmove+0x28>
 80261a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80261a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80261aa:	e7f8      	b.n	802619e <memmove+0x12>
 80261ac:	4601      	mov	r1, r0
 80261ae:	4402      	add	r2, r0
 80261b0:	428a      	cmp	r2, r1
 80261b2:	d100      	bne.n	80261b6 <memmove+0x2a>
 80261b4:	bd10      	pop	{r4, pc}
 80261b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80261ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80261be:	e7f7      	b.n	80261b0 <memmove+0x24>

080261c0 <_free_r>:
 80261c0:	b538      	push	{r3, r4, r5, lr}
 80261c2:	4605      	mov	r5, r0
 80261c4:	2900      	cmp	r1, #0
 80261c6:	d043      	beq.n	8026250 <_free_r+0x90>
 80261c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80261cc:	1f0c      	subs	r4, r1, #4
 80261ce:	2b00      	cmp	r3, #0
 80261d0:	bfb8      	it	lt
 80261d2:	18e4      	addlt	r4, r4, r3
 80261d4:	f000 f8d0 	bl	8026378 <__malloc_lock>
 80261d8:	4a1e      	ldr	r2, [pc, #120]	; (8026254 <_free_r+0x94>)
 80261da:	6813      	ldr	r3, [r2, #0]
 80261dc:	4610      	mov	r0, r2
 80261de:	b933      	cbnz	r3, 80261ee <_free_r+0x2e>
 80261e0:	6063      	str	r3, [r4, #4]
 80261e2:	6014      	str	r4, [r2, #0]
 80261e4:	4628      	mov	r0, r5
 80261e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80261ea:	f000 b8cb 	b.w	8026384 <__malloc_unlock>
 80261ee:	42a3      	cmp	r3, r4
 80261f0:	d90a      	bls.n	8026208 <_free_r+0x48>
 80261f2:	6821      	ldr	r1, [r4, #0]
 80261f4:	1862      	adds	r2, r4, r1
 80261f6:	4293      	cmp	r3, r2
 80261f8:	bf01      	itttt	eq
 80261fa:	681a      	ldreq	r2, [r3, #0]
 80261fc:	685b      	ldreq	r3, [r3, #4]
 80261fe:	1852      	addeq	r2, r2, r1
 8026200:	6022      	streq	r2, [r4, #0]
 8026202:	6063      	str	r3, [r4, #4]
 8026204:	6004      	str	r4, [r0, #0]
 8026206:	e7ed      	b.n	80261e4 <_free_r+0x24>
 8026208:	461a      	mov	r2, r3
 802620a:	685b      	ldr	r3, [r3, #4]
 802620c:	b10b      	cbz	r3, 8026212 <_free_r+0x52>
 802620e:	42a3      	cmp	r3, r4
 8026210:	d9fa      	bls.n	8026208 <_free_r+0x48>
 8026212:	6811      	ldr	r1, [r2, #0]
 8026214:	1850      	adds	r0, r2, r1
 8026216:	42a0      	cmp	r0, r4
 8026218:	d10b      	bne.n	8026232 <_free_r+0x72>
 802621a:	6820      	ldr	r0, [r4, #0]
 802621c:	4401      	add	r1, r0
 802621e:	1850      	adds	r0, r2, r1
 8026220:	4283      	cmp	r3, r0
 8026222:	6011      	str	r1, [r2, #0]
 8026224:	d1de      	bne.n	80261e4 <_free_r+0x24>
 8026226:	6818      	ldr	r0, [r3, #0]
 8026228:	685b      	ldr	r3, [r3, #4]
 802622a:	4401      	add	r1, r0
 802622c:	6011      	str	r1, [r2, #0]
 802622e:	6053      	str	r3, [r2, #4]
 8026230:	e7d8      	b.n	80261e4 <_free_r+0x24>
 8026232:	d902      	bls.n	802623a <_free_r+0x7a>
 8026234:	230c      	movs	r3, #12
 8026236:	602b      	str	r3, [r5, #0]
 8026238:	e7d4      	b.n	80261e4 <_free_r+0x24>
 802623a:	6820      	ldr	r0, [r4, #0]
 802623c:	1821      	adds	r1, r4, r0
 802623e:	428b      	cmp	r3, r1
 8026240:	bf01      	itttt	eq
 8026242:	6819      	ldreq	r1, [r3, #0]
 8026244:	685b      	ldreq	r3, [r3, #4]
 8026246:	1809      	addeq	r1, r1, r0
 8026248:	6021      	streq	r1, [r4, #0]
 802624a:	6063      	str	r3, [r4, #4]
 802624c:	6054      	str	r4, [r2, #4]
 802624e:	e7c9      	b.n	80261e4 <_free_r+0x24>
 8026250:	bd38      	pop	{r3, r4, r5, pc}
 8026252:	bf00      	nop
 8026254:	2000133c 	.word	0x2000133c

08026258 <_malloc_r>:
 8026258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802625a:	1ccd      	adds	r5, r1, #3
 802625c:	f025 0503 	bic.w	r5, r5, #3
 8026260:	3508      	adds	r5, #8
 8026262:	2d0c      	cmp	r5, #12
 8026264:	bf38      	it	cc
 8026266:	250c      	movcc	r5, #12
 8026268:	2d00      	cmp	r5, #0
 802626a:	4606      	mov	r6, r0
 802626c:	db01      	blt.n	8026272 <_malloc_r+0x1a>
 802626e:	42a9      	cmp	r1, r5
 8026270:	d903      	bls.n	802627a <_malloc_r+0x22>
 8026272:	230c      	movs	r3, #12
 8026274:	6033      	str	r3, [r6, #0]
 8026276:	2000      	movs	r0, #0
 8026278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802627a:	f000 f87d 	bl	8026378 <__malloc_lock>
 802627e:	4921      	ldr	r1, [pc, #132]	; (8026304 <_malloc_r+0xac>)
 8026280:	680a      	ldr	r2, [r1, #0]
 8026282:	4614      	mov	r4, r2
 8026284:	b99c      	cbnz	r4, 80262ae <_malloc_r+0x56>
 8026286:	4f20      	ldr	r7, [pc, #128]	; (8026308 <_malloc_r+0xb0>)
 8026288:	683b      	ldr	r3, [r7, #0]
 802628a:	b923      	cbnz	r3, 8026296 <_malloc_r+0x3e>
 802628c:	4621      	mov	r1, r4
 802628e:	4630      	mov	r0, r6
 8026290:	f000 f862 	bl	8026358 <_sbrk_r>
 8026294:	6038      	str	r0, [r7, #0]
 8026296:	4629      	mov	r1, r5
 8026298:	4630      	mov	r0, r6
 802629a:	f000 f85d 	bl	8026358 <_sbrk_r>
 802629e:	1c43      	adds	r3, r0, #1
 80262a0:	d123      	bne.n	80262ea <_malloc_r+0x92>
 80262a2:	230c      	movs	r3, #12
 80262a4:	4630      	mov	r0, r6
 80262a6:	6033      	str	r3, [r6, #0]
 80262a8:	f000 f86c 	bl	8026384 <__malloc_unlock>
 80262ac:	e7e3      	b.n	8026276 <_malloc_r+0x1e>
 80262ae:	6823      	ldr	r3, [r4, #0]
 80262b0:	1b5b      	subs	r3, r3, r5
 80262b2:	d417      	bmi.n	80262e4 <_malloc_r+0x8c>
 80262b4:	2b0b      	cmp	r3, #11
 80262b6:	d903      	bls.n	80262c0 <_malloc_r+0x68>
 80262b8:	6023      	str	r3, [r4, #0]
 80262ba:	441c      	add	r4, r3
 80262bc:	6025      	str	r5, [r4, #0]
 80262be:	e004      	b.n	80262ca <_malloc_r+0x72>
 80262c0:	6863      	ldr	r3, [r4, #4]
 80262c2:	42a2      	cmp	r2, r4
 80262c4:	bf0c      	ite	eq
 80262c6:	600b      	streq	r3, [r1, #0]
 80262c8:	6053      	strne	r3, [r2, #4]
 80262ca:	4630      	mov	r0, r6
 80262cc:	f000 f85a 	bl	8026384 <__malloc_unlock>
 80262d0:	f104 000b 	add.w	r0, r4, #11
 80262d4:	1d23      	adds	r3, r4, #4
 80262d6:	f020 0007 	bic.w	r0, r0, #7
 80262da:	1ac2      	subs	r2, r0, r3
 80262dc:	d0cc      	beq.n	8026278 <_malloc_r+0x20>
 80262de:	1a1b      	subs	r3, r3, r0
 80262e0:	50a3      	str	r3, [r4, r2]
 80262e2:	e7c9      	b.n	8026278 <_malloc_r+0x20>
 80262e4:	4622      	mov	r2, r4
 80262e6:	6864      	ldr	r4, [r4, #4]
 80262e8:	e7cc      	b.n	8026284 <_malloc_r+0x2c>
 80262ea:	1cc4      	adds	r4, r0, #3
 80262ec:	f024 0403 	bic.w	r4, r4, #3
 80262f0:	42a0      	cmp	r0, r4
 80262f2:	d0e3      	beq.n	80262bc <_malloc_r+0x64>
 80262f4:	1a21      	subs	r1, r4, r0
 80262f6:	4630      	mov	r0, r6
 80262f8:	f000 f82e 	bl	8026358 <_sbrk_r>
 80262fc:	3001      	adds	r0, #1
 80262fe:	d1dd      	bne.n	80262bc <_malloc_r+0x64>
 8026300:	e7cf      	b.n	80262a2 <_malloc_r+0x4a>
 8026302:	bf00      	nop
 8026304:	2000133c 	.word	0x2000133c
 8026308:	20001340 	.word	0x20001340

0802630c <_realloc_r>:
 802630c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802630e:	4607      	mov	r7, r0
 8026310:	4614      	mov	r4, r2
 8026312:	460e      	mov	r6, r1
 8026314:	b921      	cbnz	r1, 8026320 <_realloc_r+0x14>
 8026316:	4611      	mov	r1, r2
 8026318:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802631c:	f7ff bf9c 	b.w	8026258 <_malloc_r>
 8026320:	b922      	cbnz	r2, 802632c <_realloc_r+0x20>
 8026322:	f7ff ff4d 	bl	80261c0 <_free_r>
 8026326:	4625      	mov	r5, r4
 8026328:	4628      	mov	r0, r5
 802632a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802632c:	f000 f830 	bl	8026390 <_malloc_usable_size_r>
 8026330:	42a0      	cmp	r0, r4
 8026332:	d20f      	bcs.n	8026354 <_realloc_r+0x48>
 8026334:	4621      	mov	r1, r4
 8026336:	4638      	mov	r0, r7
 8026338:	f7ff ff8e 	bl	8026258 <_malloc_r>
 802633c:	4605      	mov	r5, r0
 802633e:	2800      	cmp	r0, #0
 8026340:	d0f2      	beq.n	8026328 <_realloc_r+0x1c>
 8026342:	4631      	mov	r1, r6
 8026344:	4622      	mov	r2, r4
 8026346:	f7ff fbe3 	bl	8025b10 <memcpy>
 802634a:	4631      	mov	r1, r6
 802634c:	4638      	mov	r0, r7
 802634e:	f7ff ff37 	bl	80261c0 <_free_r>
 8026352:	e7e9      	b.n	8026328 <_realloc_r+0x1c>
 8026354:	4635      	mov	r5, r6
 8026356:	e7e7      	b.n	8026328 <_realloc_r+0x1c>

08026358 <_sbrk_r>:
 8026358:	b538      	push	{r3, r4, r5, lr}
 802635a:	2300      	movs	r3, #0
 802635c:	4d05      	ldr	r5, [pc, #20]	; (8026374 <_sbrk_r+0x1c>)
 802635e:	4604      	mov	r4, r0
 8026360:	4608      	mov	r0, r1
 8026362:	602b      	str	r3, [r5, #0]
 8026364:	f7fb ff20 	bl	80221a8 <_sbrk>
 8026368:	1c43      	adds	r3, r0, #1
 802636a:	d102      	bne.n	8026372 <_sbrk_r+0x1a>
 802636c:	682b      	ldr	r3, [r5, #0]
 802636e:	b103      	cbz	r3, 8026372 <_sbrk_r+0x1a>
 8026370:	6023      	str	r3, [r4, #0]
 8026372:	bd38      	pop	{r3, r4, r5, pc}
 8026374:	200063e0 	.word	0x200063e0

08026378 <__malloc_lock>:
 8026378:	4801      	ldr	r0, [pc, #4]	; (8026380 <__malloc_lock+0x8>)
 802637a:	f000 b811 	b.w	80263a0 <__retarget_lock_acquire_recursive>
 802637e:	bf00      	nop
 8026380:	200063e8 	.word	0x200063e8

08026384 <__malloc_unlock>:
 8026384:	4801      	ldr	r0, [pc, #4]	; (802638c <__malloc_unlock+0x8>)
 8026386:	f000 b80c 	b.w	80263a2 <__retarget_lock_release_recursive>
 802638a:	bf00      	nop
 802638c:	200063e8 	.word	0x200063e8

08026390 <_malloc_usable_size_r>:
 8026390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026394:	1f18      	subs	r0, r3, #4
 8026396:	2b00      	cmp	r3, #0
 8026398:	bfbc      	itt	lt
 802639a:	580b      	ldrlt	r3, [r1, r0]
 802639c:	18c0      	addlt	r0, r0, r3
 802639e:	4770      	bx	lr

080263a0 <__retarget_lock_acquire_recursive>:
 80263a0:	4770      	bx	lr

080263a2 <__retarget_lock_release_recursive>:
 80263a2:	4770      	bx	lr

080263a4 <_init>:
 80263a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80263a6:	bf00      	nop
 80263a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80263aa:	bc08      	pop	{r3}
 80263ac:	469e      	mov	lr, r3
 80263ae:	4770      	bx	lr

080263b0 <_fini>:
 80263b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80263b2:	bf00      	nop
 80263b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80263b6:	bc08      	pop	{r3}
 80263b8:	469e      	mov	lr, r3
 80263ba:	4770      	bx	lr
