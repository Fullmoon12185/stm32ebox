
fota-f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  0801e000  0801e000  0000e000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006808  0801e1e4  0801e1e4  0000e1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e8  080249ec  080249ec  000149ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080250d4  080250d4  0002016c  2**0
                  CONTENTS
  4 .ARM          00000000  080250d4  080250d4  0002016c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080250d4  080250d4  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080250d4  080250d4  000150d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080250d8  080250d8  000150d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  080250dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041b8  20000170  08025248  00020170  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004328  08025248  00024328  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f13  00000000  00000000  00020195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004705  00000000  00000000  0003a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  0003e7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b8  00000000  00000000  00040068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d2c3  00000000  00000000  00041820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d345  00000000  00000000  0005eae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a09ef  00000000  00000000  0007be28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011c817  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006678  00000000  00000000  0011c86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0801e1e4 <__do_global_dtors_aux>:
 801e1e4:	b510      	push	{r4, lr}
 801e1e6:	4c05      	ldr	r4, [pc, #20]	; (801e1fc <__do_global_dtors_aux+0x18>)
 801e1e8:	7823      	ldrb	r3, [r4, #0]
 801e1ea:	b933      	cbnz	r3, 801e1fa <__do_global_dtors_aux+0x16>
 801e1ec:	4b04      	ldr	r3, [pc, #16]	; (801e200 <__do_global_dtors_aux+0x1c>)
 801e1ee:	b113      	cbz	r3, 801e1f6 <__do_global_dtors_aux+0x12>
 801e1f0:	4804      	ldr	r0, [pc, #16]	; (801e204 <__do_global_dtors_aux+0x20>)
 801e1f2:	f3af 8000 	nop.w
 801e1f6:	2301      	movs	r3, #1
 801e1f8:	7023      	strb	r3, [r4, #0]
 801e1fa:	bd10      	pop	{r4, pc}
 801e1fc:	20000170 	.word	0x20000170
 801e200:	00000000 	.word	0x00000000
 801e204:	080249d4 	.word	0x080249d4

0801e208 <frame_dummy>:
 801e208:	b508      	push	{r3, lr}
 801e20a:	4b03      	ldr	r3, [pc, #12]	; (801e218 <frame_dummy+0x10>)
 801e20c:	b11b      	cbz	r3, 801e216 <frame_dummy+0xe>
 801e20e:	4903      	ldr	r1, [pc, #12]	; (801e21c <frame_dummy+0x14>)
 801e210:	4803      	ldr	r0, [pc, #12]	; (801e220 <frame_dummy+0x18>)
 801e212:	f3af 8000 	nop.w
 801e216:	bd08      	pop	{r3, pc}
 801e218:	00000000 	.word	0x00000000
 801e21c:	20000174 	.word	0x20000174
 801e220:	080249d4 	.word	0x080249d4

0801e224 <strlen>:
 801e224:	4603      	mov	r3, r0
 801e226:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e22a:	2a00      	cmp	r2, #0
 801e22c:	d1fb      	bne.n	801e226 <strlen+0x2>
 801e22e:	1a18      	subs	r0, r3, r0
 801e230:	3801      	subs	r0, #1
 801e232:	4770      	bx	lr

0801e234 <MC25LC512_CS>:
unsigned char MC25LC512_ReleaseDeepPowerDownMode(void);



void MC25LC512_CS(uint8_t CS_Status)
{
 801e234:	b580      	push	{r7, lr}
 801e236:	b082      	sub	sp, #8
 801e238:	af00      	add	r7, sp, #0
 801e23a:	4603      	mov	r3, r0
 801e23c:	71fb      	strb	r3, [r7, #7]
	// For Cs of the EEprom
	if(CS_Status == EEPROM_CS_PIN_RESET)
 801e23e:	79fb      	ldrb	r3, [r7, #7]
 801e240:	2b00      	cmp	r3, #0
 801e242:	d102      	bne.n	801e24a <MC25LC512_CS+0x16>
	{
		ResetChipSelect();
 801e244:	f000 fd6e 	bl	801ed24 <ResetChipSelect>
	{
		SetChipSelect();

	}

}
 801e248:	e001      	b.n	801e24e <MC25LC512_CS+0x1a>
		SetChipSelect();
 801e24a:	f000 fd77 	bl	801ed3c <SetChipSelect>
}
 801e24e:	bf00      	nop
 801e250:	3708      	adds	r7, #8
 801e252:	46bd      	mov	sp, r7
 801e254:	bd80      	pop	{r7, pc}
	...

0801e258 <MC25LC512_WriteEnableOrDisable>:
void MC25LC512_WriteEnableOrDisable(uint8_t EnableOrDisable)
{
 801e258:	b580      	push	{r7, lr}
 801e25a:	b084      	sub	sp, #16
 801e25c:	af00      	add	r7, sp, #0
 801e25e:	4603      	mov	r3, r0
 801e260:	71fb      	strb	r3, [r7, #7]
	uint8_t SendOneByte = 0;
 801e262:	2300      	movs	r3, #0
 801e264:	72fb      	strb	r3, [r7, #11]
	MC25LC512_CS(EEPROM_CS_PIN_RESET);// Reset The spi Chip //Reset means Enable
 801e266:	2000      	movs	r0, #0
 801e268:	f7ff ffe4 	bl	801e234 <MC25LC512_CS>
	for(uint16_t i = 0; i < 10; i ++);
 801e26c:	2300      	movs	r3, #0
 801e26e:	81fb      	strh	r3, [r7, #14]
 801e270:	e002      	b.n	801e278 <MC25LC512_WriteEnableOrDisable+0x20>
 801e272:	89fb      	ldrh	r3, [r7, #14]
 801e274:	3301      	adds	r3, #1
 801e276:	81fb      	strh	r3, [r7, #14]
 801e278:	89fb      	ldrh	r3, [r7, #14]
 801e27a:	2b09      	cmp	r3, #9
 801e27c:	d9f9      	bls.n	801e272 <MC25LC512_WriteEnableOrDisable+0x1a>
	if(EnableOrDisable==EEPROM_Enable)
 801e27e:	79fb      	ldrb	r3, [r7, #7]
 801e280:	2b01      	cmp	r3, #1
 801e282:	d102      	bne.n	801e28a <MC25LC512_WriteEnableOrDisable+0x32>
	{
			SendOneByte = MC25LCxxx_SPI_WREN;
 801e284:	2306      	movs	r3, #6
 801e286:	72fb      	strb	r3, [r7, #11]
 801e288:	e001      	b.n	801e28e <MC25LC512_WriteEnableOrDisable+0x36>
	}
	else
	{
			SendOneByte = MC25LCxxx_SPI_WRDI;
 801e28a:	2304      	movs	r3, #4
 801e28c:	72fb      	strb	r3, [r7, #11]
	}
	HAL_SPI_Transmit(&Spi2Handle , &SendOneByte, 1, 200) ;
 801e28e:	f107 010b 	add.w	r1, r7, #11
 801e292:	23c8      	movs	r3, #200	; 0xc8
 801e294:	2201      	movs	r2, #1
 801e296:	4809      	ldr	r0, [pc, #36]	; (801e2bc <MC25LC512_WriteEnableOrDisable+0x64>)
 801e298:	f004 fd72 	bl	8022d80 <HAL_SPI_Transmit>
	for(uint16_t i = 0; i < 10; i ++);
 801e29c:	2300      	movs	r3, #0
 801e29e:	81bb      	strh	r3, [r7, #12]
 801e2a0:	e002      	b.n	801e2a8 <MC25LC512_WriteEnableOrDisable+0x50>
 801e2a2:	89bb      	ldrh	r3, [r7, #12]
 801e2a4:	3301      	adds	r3, #1
 801e2a6:	81bb      	strh	r3, [r7, #12]
 801e2a8:	89bb      	ldrh	r3, [r7, #12]
 801e2aa:	2b09      	cmp	r3, #9
 801e2ac:	d9f9      	bls.n	801e2a2 <MC25LC512_WriteEnableOrDisable+0x4a>
	MC25LC512_CS(EEPROM_CS_PIN_SET);// Set The spi Chip //Set means Disable
 801e2ae:	2001      	movs	r0, #1
 801e2b0:	f7ff ffc0 	bl	801e234 <MC25LC512_CS>
}
 801e2b4:	bf00      	nop
 801e2b6:	3710      	adds	r7, #16
 801e2b8:	46bd      	mov	sp, r7
 801e2ba:	bd80      	pop	{r7, pc}
 801e2bc:	20001290 	.word	0x20001290

0801e2c0 <MC25LC512_Initialize>:
	return RecieveByteOfReleaseDeepPowerMode;

}

void MC25LC512_Initialize(void)
{
 801e2c0:	b580      	push	{r7, lr}
 801e2c2:	af00      	add	r7, sp, #0
	MC25LC512_CS(EEPROM_CS_PIN_SET);// Reset The spi Chip //Reset means Enable
 801e2c4:	2001      	movs	r0, #1
 801e2c6:	f7ff ffb5 	bl	801e234 <MC25LC512_CS>
	MC25LC512_WriteEnableOrDisable(EEPROM_Enable);
 801e2ca:	2001      	movs	r0, #1
 801e2cc:	f7ff ffc4 	bl	801e258 <MC25LC512_WriteEnableOrDisable>

}
 801e2d0:	bf00      	nop
 801e2d2:	bd80      	pop	{r7, pc}

0801e2d4 <FaBoLCD_PCF8574>:
	HAL_I2C_Master_Transmit(&I2cHandle, (uint16_t)66, (uint8_t *) initData, 1, 0xffff);
	HAL_Delay(100);
}

void FaBoLCD_PCF8574(uint8_t addr)
{
 801e2d4:	b580      	push	{r7, lr}
 801e2d6:	b086      	sub	sp, #24
 801e2d8:	af02      	add	r7, sp, #8
 801e2da:	4603      	mov	r3, r0
 801e2dc:	71fb      	strb	r3, [r7, #7]
  _i2caddr = addr;
 801e2de:	4a10      	ldr	r2, [pc, #64]	; (801e320 <FaBoLCD_PCF8574+0x4c>)
 801e2e0:	79fb      	ldrb	r3, [r7, #7]
 801e2e2:	7013      	strb	r3, [r2, #0]
  _backlight = BL;
 801e2e4:	4b0f      	ldr	r3, [pc, #60]	; (801e324 <FaBoLCD_PCF8574+0x50>)
 801e2e6:	2280      	movs	r2, #128	; 0x80
 801e2e8:	701a      	strb	r2, [r3, #0]
  uint8_t initData[1] = {0x80};
 801e2ea:	2380      	movs	r3, #128	; 0x80
 801e2ec:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit(&I2cHandle, (uint16_t)0x42, (uint8_t *) initData, 1, 0xffff);
 801e2ee:	f107 020c 	add.w	r2, r7, #12
 801e2f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e2f6:	9300      	str	r3, [sp, #0]
 801e2f8:	2301      	movs	r3, #1
 801e2fa:	2142      	movs	r1, #66	; 0x42
 801e2fc:	480a      	ldr	r0, [pc, #40]	; (801e328 <FaBoLCD_PCF8574+0x54>)
 801e2fe:	f003 fd9b 	bl	8021e38 <HAL_I2C_Master_Transmit>
  HAL_Delay(100);
 801e302:	2064      	movs	r0, #100	; 0x64
 801e304:	f002 fec0 	bl	8021088 <HAL_Delay>
  init();
 801e308:	f000 f810 	bl	801e32c <init>
  begin(LCD_COLUMN, LCD_LINE, LCD_5x8DOTS);
 801e30c:	2200      	movs	r2, #0
 801e30e:	2102      	movs	r1, #2
 801e310:	2010      	movs	r0, #16
 801e312:	f000 f817 	bl	801e344 <begin>
}
 801e316:	bf00      	nop
 801e318:	3710      	adds	r7, #16
 801e31a:	46bd      	mov	sp, r7
 801e31c:	bd80      	pop	{r7, pc}
 801e31e:	bf00      	nop
 801e320:	200011df 	.word	0x200011df
 801e324:	200011dc 	.word	0x200011dc
 801e328:	2000123c 	.word	0x2000123c

0801e32c <init>:

/**
 @brief init
*/
void init()
{
 801e32c:	b480      	push	{r7}
 801e32e:	af00      	add	r7, sp, #0
  _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 801e330:	4b03      	ldr	r3, [pc, #12]	; (801e340 <init+0x14>)
 801e332:	2200      	movs	r2, #0
 801e334:	701a      	strb	r2, [r3, #0]
}
 801e336:	bf00      	nop
 801e338:	46bd      	mov	sp, r7
 801e33a:	bc80      	pop	{r7}
 801e33c:	4770      	bx	lr
 801e33e:	bf00      	nop
 801e340:	20001213 	.word	0x20001213

0801e344 <begin>:

/**
 @brief brgin
*/
void begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
 801e344:	b580      	push	{r7, lr}
 801e346:	b082      	sub	sp, #8
 801e348:	af00      	add	r7, sp, #0
 801e34a:	4603      	mov	r3, r0
 801e34c:	71fb      	strb	r3, [r7, #7]
 801e34e:	460b      	mov	r3, r1
 801e350:	71bb      	strb	r3, [r7, #6]
 801e352:	4613      	mov	r3, r2
 801e354:	717b      	strb	r3, [r7, #5]
  if (lines > 1) {
 801e356:	79bb      	ldrb	r3, [r7, #6]
 801e358:	2b01      	cmp	r3, #1
 801e35a:	d906      	bls.n	801e36a <begin+0x26>
	_displayfunction |= LCD_2LINE;
 801e35c:	4b2b      	ldr	r3, [pc, #172]	; (801e40c <begin+0xc8>)
 801e35e:	781b      	ldrb	r3, [r3, #0]
 801e360:	f043 0308 	orr.w	r3, r3, #8
 801e364:	b2da      	uxtb	r2, r3
 801e366:	4b29      	ldr	r3, [pc, #164]	; (801e40c <begin+0xc8>)
 801e368:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 801e36a:	4a29      	ldr	r2, [pc, #164]	; (801e410 <begin+0xcc>)
 801e36c:	79bb      	ldrb	r3, [r7, #6]
 801e36e:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 801e370:	79fa      	ldrb	r2, [r7, #7]
 801e372:	79fb      	ldrb	r3, [r7, #7]
 801e374:	3340      	adds	r3, #64	; 0x40
 801e376:	2140      	movs	r1, #64	; 0x40
 801e378:	2000      	movs	r0, #0
 801e37a:	f000 f84f 	bl	801e41c <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 801e37e:	797b      	ldrb	r3, [r7, #5]
 801e380:	2b00      	cmp	r3, #0
 801e382:	d009      	beq.n	801e398 <begin+0x54>
 801e384:	79bb      	ldrb	r3, [r7, #6]
 801e386:	2b01      	cmp	r3, #1
 801e388:	d106      	bne.n	801e398 <begin+0x54>
	_displayfunction |= LCD_5x10DOTS;
 801e38a:	4b20      	ldr	r3, [pc, #128]	; (801e40c <begin+0xc8>)
 801e38c:	781b      	ldrb	r3, [r3, #0]
 801e38e:	f043 0304 	orr.w	r3, r3, #4
 801e392:	b2da      	uxtb	r2, r3
 801e394:	4b1d      	ldr	r3, [pc, #116]	; (801e40c <begin+0xc8>)
 801e396:	701a      	strb	r2, [r3, #0]
  }

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way before 4.5V so we'll wait 50
  HAL_Delay(50);
 801e398:	2032      	movs	r0, #50	; 0x32
 801e39a:	f002 fe75 	bl	8021088 <HAL_Delay>
  // Now we pull both RS and R/W low to begin commands
  writeI2c(0x00);
 801e39e:	2000      	movs	r0, #0
 801e3a0:	f000 f922 	bl	801e5e8 <writeI2c>

  // this is according to the hitachi HD44780 datasheet
  // figure 24, pg 46

  // we start in 8bit mode, try to set 4 bit mode
  write4bits(DB4|DB5);
 801e3a4:	2003      	movs	r0, #3
 801e3a6:	f000 f90e 	bl	801e5c6 <write4bits>
  HAL_Delay(5); // wait min 4.1ms
 801e3aa:	2005      	movs	r0, #5
 801e3ac:	f002 fe6c 	bl	8021088 <HAL_Delay>

  // second try
  write4bits(DB4|DB5);
 801e3b0:	2003      	movs	r0, #3
 801e3b2:	f000 f908 	bl	801e5c6 <write4bits>
  HAL_Delay(5); // wait min 4.1ms
 801e3b6:	2005      	movs	r0, #5
 801e3b8:	f002 fe66 	bl	8021088 <HAL_Delay>

  // third go!
  write4bits(DB4|DB5);
 801e3bc:	2003      	movs	r0, #3
 801e3be:	f000 f902 	bl	801e5c6 <write4bits>
  HAL_Delay(2);
 801e3c2:	2002      	movs	r0, #2
 801e3c4:	f002 fe60 	bl	8021088 <HAL_Delay>

  // finally, set to 4-bit interface
  write4bits(DB5);
 801e3c8:	2002      	movs	r0, #2
 801e3ca:	f000 f8fc 	bl	801e5c6 <write4bits>

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 801e3ce:	4b0f      	ldr	r3, [pc, #60]	; (801e40c <begin+0xc8>)
 801e3d0:	781b      	ldrb	r3, [r3, #0]
 801e3d2:	f043 0320 	orr.w	r3, r3, #32
 801e3d6:	b2db      	uxtb	r3, r3
 801e3d8:	4618      	mov	r0, r3
 801e3da:	f000 f88f 	bl	801e4fc <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 801e3de:	4b0d      	ldr	r3, [pc, #52]	; (801e414 <begin+0xd0>)
 801e3e0:	2204      	movs	r2, #4
 801e3e2:	701a      	strb	r2, [r3, #0]
  display();
 801e3e4:	f000 f874 	bl	801e4d0 <display>

  // clear it off
  clear();
 801e3e8:	f000 f836 	bl	801e458 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 801e3ec:	4b0a      	ldr	r3, [pc, #40]	; (801e418 <begin+0xd4>)
 801e3ee:	2202      	movs	r2, #2
 801e3f0:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 801e3f2:	4b09      	ldr	r3, [pc, #36]	; (801e418 <begin+0xd4>)
 801e3f4:	781b      	ldrb	r3, [r3, #0]
 801e3f6:	f043 0304 	orr.w	r3, r3, #4
 801e3fa:	b2db      	uxtb	r3, r3
 801e3fc:	4618      	mov	r0, r3
 801e3fe:	f000 f87d 	bl	801e4fc <command>

}
 801e402:	bf00      	nop
 801e404:	3708      	adds	r7, #8
 801e406:	46bd      	mov	sp, r7
 801e408:	bd80      	pop	{r7, pc}
 801e40a:	bf00      	nop
 801e40c:	20001213 	.word	0x20001213
 801e410:	200011de 	.word	0x200011de
 801e414:	200011dd 	.word	0x200011dd
 801e418:	20001212 	.word	0x20001212

0801e41c <setRowOffsets>:

/**
 @brief setRowOffsets
*/
void setRowOffsets(int row0, int row1, int row2, int row3)
{
 801e41c:	b480      	push	{r7}
 801e41e:	b085      	sub	sp, #20
 801e420:	af00      	add	r7, sp, #0
 801e422:	60f8      	str	r0, [r7, #12]
 801e424:	60b9      	str	r1, [r7, #8]
 801e426:	607a      	str	r2, [r7, #4]
 801e428:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 801e42a:	68fb      	ldr	r3, [r7, #12]
 801e42c:	b2da      	uxtb	r2, r3
 801e42e:	4b09      	ldr	r3, [pc, #36]	; (801e454 <setRowOffsets+0x38>)
 801e430:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 801e432:	68bb      	ldr	r3, [r7, #8]
 801e434:	b2da      	uxtb	r2, r3
 801e436:	4b07      	ldr	r3, [pc, #28]	; (801e454 <setRowOffsets+0x38>)
 801e438:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 801e43a:	687b      	ldr	r3, [r7, #4]
 801e43c:	b2da      	uxtb	r2, r3
 801e43e:	4b05      	ldr	r3, [pc, #20]	; (801e454 <setRowOffsets+0x38>)
 801e440:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 801e442:	683b      	ldr	r3, [r7, #0]
 801e444:	b2da      	uxtb	r2, r3
 801e446:	4b03      	ldr	r3, [pc, #12]	; (801e454 <setRowOffsets+0x38>)
 801e448:	70da      	strb	r2, [r3, #3]
}
 801e44a:	bf00      	nop
 801e44c:	3714      	adds	r7, #20
 801e44e:	46bd      	mov	sp, r7
 801e450:	bc80      	pop	{r7}
 801e452:	4770      	bx	lr
 801e454:	200011d8 	.word	0x200011d8

0801e458 <clear>:

/**
 @brief clear
*/
void clear()
{
 801e458:	b580      	push	{r7, lr}
 801e45a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 801e45c:	2001      	movs	r0, #1
 801e45e:	f000 f84d 	bl	801e4fc <command>
  HAL_Delay(2);  // this command takes a long time!
 801e462:	2002      	movs	r0, #2
 801e464:	f002 fe10 	bl	8021088 <HAL_Delay>
}
 801e468:	bf00      	nop
 801e46a:	bd80      	pop	{r7, pc}

0801e46c <setCursor>:

/**
 @brief setCursor
*/
void setCursor(uint8_t col, uint8_t row)
{
 801e46c:	b580      	push	{r7, lr}
 801e46e:	b084      	sub	sp, #16
 801e470:	af00      	add	r7, sp, #0
 801e472:	4603      	mov	r3, r0
 801e474:	460a      	mov	r2, r1
 801e476:	71fb      	strb	r3, [r7, #7]
 801e478:	4613      	mov	r3, r2
 801e47a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 801e47c:	2304      	movs	r3, #4
 801e47e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 801e480:	79bb      	ldrb	r3, [r7, #6]
 801e482:	68fa      	ldr	r2, [r7, #12]
 801e484:	429a      	cmp	r2, r3
 801e486:	d803      	bhi.n	801e490 <setCursor+0x24>
	row = max_lines - 1;    // we count rows starting w/0
 801e488:	68fb      	ldr	r3, [r7, #12]
 801e48a:	b2db      	uxtb	r3, r3
 801e48c:	3b01      	subs	r3, #1
 801e48e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 801e490:	4b0d      	ldr	r3, [pc, #52]	; (801e4c8 <setCursor+0x5c>)
 801e492:	781b      	ldrb	r3, [r3, #0]
 801e494:	79ba      	ldrb	r2, [r7, #6]
 801e496:	429a      	cmp	r2, r3
 801e498:	d303      	bcc.n	801e4a2 <setCursor+0x36>
	row = _numlines - 1;    // we count rows starting w/0
 801e49a:	4b0b      	ldr	r3, [pc, #44]	; (801e4c8 <setCursor+0x5c>)
 801e49c:	781b      	ldrb	r3, [r3, #0]
 801e49e:	3b01      	subs	r3, #1
 801e4a0:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 801e4a2:	79bb      	ldrb	r3, [r7, #6]
 801e4a4:	4a09      	ldr	r2, [pc, #36]	; (801e4cc <setCursor+0x60>)
 801e4a6:	5cd2      	ldrb	r2, [r2, r3]
 801e4a8:	79fb      	ldrb	r3, [r7, #7]
 801e4aa:	4413      	add	r3, r2
 801e4ac:	b2db      	uxtb	r3, r3
 801e4ae:	b25b      	sxtb	r3, r3
 801e4b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801e4b4:	b25b      	sxtb	r3, r3
 801e4b6:	b2db      	uxtb	r3, r3
 801e4b8:	4618      	mov	r0, r3
 801e4ba:	f000 f81f 	bl	801e4fc <command>
}
 801e4be:	bf00      	nop
 801e4c0:	3710      	adds	r7, #16
 801e4c2:	46bd      	mov	sp, r7
 801e4c4:	bd80      	pop	{r7, pc}
 801e4c6:	bf00      	nop
 801e4c8:	200011de 	.word	0x200011de
 801e4cc:	200011d8 	.word	0x200011d8

0801e4d0 <display>:
}

/**
 @brief Turn the display on (quickly)
*/
void display() {
 801e4d0:	b580      	push	{r7, lr}
 801e4d2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 801e4d4:	4b08      	ldr	r3, [pc, #32]	; (801e4f8 <display+0x28>)
 801e4d6:	781b      	ldrb	r3, [r3, #0]
 801e4d8:	f043 0304 	orr.w	r3, r3, #4
 801e4dc:	b2da      	uxtb	r2, r3
 801e4de:	4b06      	ldr	r3, [pc, #24]	; (801e4f8 <display+0x28>)
 801e4e0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 801e4e2:	4b05      	ldr	r3, [pc, #20]	; (801e4f8 <display+0x28>)
 801e4e4:	781b      	ldrb	r3, [r3, #0]
 801e4e6:	f043 0308 	orr.w	r3, r3, #8
 801e4ea:	b2db      	uxtb	r3, r3
 801e4ec:	4618      	mov	r0, r3
 801e4ee:	f000 f805 	bl	801e4fc <command>
}
 801e4f2:	bf00      	nop
 801e4f4:	bd80      	pop	{r7, pc}
 801e4f6:	bf00      	nop
 801e4f8:	200011dd 	.word	0x200011dd

0801e4fc <command>:
/*********** mid level commands, for sending data/cmds */

/**
 @brief command
*/
inline void command(uint8_t value) {
 801e4fc:	b580      	push	{r7, lr}
 801e4fe:	b082      	sub	sp, #8
 801e500:	af00      	add	r7, sp, #0
 801e502:	4603      	mov	r3, r0
 801e504:	71fb      	strb	r3, [r7, #7]
  send(value, 0);
 801e506:	79fb      	ldrb	r3, [r7, #7]
 801e508:	2100      	movs	r1, #0
 801e50a:	4618      	mov	r0, r3
 801e50c:	f000 f813 	bl	801e536 <send>
}
 801e510:	bf00      	nop
 801e512:	3708      	adds	r7, #8
 801e514:	46bd      	mov	sp, r7
 801e516:	bd80      	pop	{r7, pc}

0801e518 <write>:

/**
 @brief write
*/
inline uint8_t write(uint8_t value) {
 801e518:	b580      	push	{r7, lr}
 801e51a:	b082      	sub	sp, #8
 801e51c:	af00      	add	r7, sp, #0
 801e51e:	4603      	mov	r3, r0
 801e520:	71fb      	strb	r3, [r7, #7]
  send(value, RS);
 801e522:	79fb      	ldrb	r3, [r7, #7]
 801e524:	2140      	movs	r1, #64	; 0x40
 801e526:	4618      	mov	r0, r3
 801e528:	f000 f805 	bl	801e536 <send>
  return 1; // assume sucess
 801e52c:	2301      	movs	r3, #1
}
 801e52e:	4618      	mov	r0, r3
 801e530:	3708      	adds	r7, #8
 801e532:	46bd      	mov	sp, r7
 801e534:	bd80      	pop	{r7, pc}

0801e536 <send>:
/************ low level data pushing commands **********/

/**
 @brief write either command or data, 4-bit
*/
void send(uint8_t value, uint8_t mode) {
 801e536:	b580      	push	{r7, lr}
 801e538:	b084      	sub	sp, #16
 801e53a:	af00      	add	r7, sp, #0
 801e53c:	4603      	mov	r3, r0
 801e53e:	460a      	mov	r2, r1
 801e540:	71fb      	strb	r3, [r7, #7]
 801e542:	4613      	mov	r3, r2
 801e544:	71bb      	strb	r3, [r7, #6]
  uint8_t Hbit = (value >> 4) & 0x0F;
 801e546:	79fb      	ldrb	r3, [r7, #7]
 801e548:	091b      	lsrs	r3, r3, #4
 801e54a:	73fb      	strb	r3, [r7, #15]
  uint8_t Lbit = value & 0x0F;
 801e54c:	79fb      	ldrb	r3, [r7, #7]
 801e54e:	f003 030f 	and.w	r3, r3, #15
 801e552:	73bb      	strb	r3, [r7, #14]
  write4bits(Hbit|mode);
 801e554:	7bfa      	ldrb	r2, [r7, #15]
 801e556:	79bb      	ldrb	r3, [r7, #6]
 801e558:	4313      	orrs	r3, r2
 801e55a:	b2db      	uxtb	r3, r3
 801e55c:	4618      	mov	r0, r3
 801e55e:	f000 f832 	bl	801e5c6 <write4bits>
  write4bits(Lbit|mode);
 801e562:	7bba      	ldrb	r2, [r7, #14]
 801e564:	79bb      	ldrb	r3, [r7, #6]
 801e566:	4313      	orrs	r3, r2
 801e568:	b2db      	uxtb	r3, r3
 801e56a:	4618      	mov	r0, r3
 801e56c:	f000 f82b 	bl	801e5c6 <write4bits>
}
 801e570:	bf00      	nop
 801e572:	3710      	adds	r7, #16
 801e574:	46bd      	mov	sp, r7
 801e576:	bd80      	pop	{r7, pc}

0801e578 <pulseEnable>:

/**
 @brief pulseEnable
*/
void pulseEnable(uint8_t value) {
 801e578:	b580      	push	{r7, lr}
 801e57a:	b082      	sub	sp, #8
 801e57c:	af00      	add	r7, sp, #0
 801e57e:	4603      	mov	r3, r0
 801e580:	71fb      	strb	r3, [r7, #7]
  writeI2c(value & ~EN); // EN LOW
 801e582:	79fb      	ldrb	r3, [r7, #7]
 801e584:	f023 0310 	bic.w	r3, r3, #16
 801e588:	b2db      	uxtb	r3, r3
 801e58a:	4618      	mov	r0, r3
 801e58c:	f000 f82c 	bl	801e5e8 <writeI2c>
  HAL_Delay(1);
 801e590:	2001      	movs	r0, #1
 801e592:	f002 fd79 	bl	8021088 <HAL_Delay>
  writeI2c(value|EN);    // EN HIGH
 801e596:	79fb      	ldrb	r3, [r7, #7]
 801e598:	f043 0310 	orr.w	r3, r3, #16
 801e59c:	b2db      	uxtb	r3, r3
 801e59e:	4618      	mov	r0, r3
 801e5a0:	f000 f822 	bl	801e5e8 <writeI2c>
  HAL_Delay(1);  // enable pulse must be >450ns
 801e5a4:	2001      	movs	r0, #1
 801e5a6:	f002 fd6f 	bl	8021088 <HAL_Delay>
  writeI2c(value & ~EN); // EN LOW
 801e5aa:	79fb      	ldrb	r3, [r7, #7]
 801e5ac:	f023 0310 	bic.w	r3, r3, #16
 801e5b0:	b2db      	uxtb	r3, r3
 801e5b2:	4618      	mov	r0, r3
 801e5b4:	f000 f818 	bl	801e5e8 <writeI2c>
  HAL_Delay(1); // commands need > 37us to settle
 801e5b8:	2001      	movs	r0, #1
 801e5ba:	f002 fd65 	bl	8021088 <HAL_Delay>
}
 801e5be:	bf00      	nop
 801e5c0:	3708      	adds	r7, #8
 801e5c2:	46bd      	mov	sp, r7
 801e5c4:	bd80      	pop	{r7, pc}

0801e5c6 <write4bits>:

/**
 @brief write4bits
*/
void write4bits(uint8_t value) {
 801e5c6:	b580      	push	{r7, lr}
 801e5c8:	b082      	sub	sp, #8
 801e5ca:	af00      	add	r7, sp, #0
 801e5cc:	4603      	mov	r3, r0
 801e5ce:	71fb      	strb	r3, [r7, #7]
  writeI2c(value);
 801e5d0:	79fb      	ldrb	r3, [r7, #7]
 801e5d2:	4618      	mov	r0, r3
 801e5d4:	f000 f808 	bl	801e5e8 <writeI2c>
  pulseEnable(value);
 801e5d8:	79fb      	ldrb	r3, [r7, #7]
 801e5da:	4618      	mov	r0, r3
 801e5dc:	f7ff ffcc 	bl	801e578 <pulseEnable>
}
 801e5e0:	bf00      	nop
 801e5e2:	3708      	adds	r7, #8
 801e5e4:	46bd      	mov	sp, r7
 801e5e6:	bd80      	pop	{r7, pc}

0801e5e8 <writeI2c>:

/**
 @brief writeI2c
*/
void writeI2c(uint8_t data) {
 801e5e8:	b580      	push	{r7, lr}
 801e5ea:	b086      	sub	sp, #24
 801e5ec:	af02      	add	r7, sp, #8
 801e5ee:	4603      	mov	r3, r0
 801e5f0:	71fb      	strb	r3, [r7, #7]
  uint8_t data_t[1];
  data_t[0] = data|_backlight;
 801e5f2:	4b0b      	ldr	r3, [pc, #44]	; (801e620 <writeI2c+0x38>)
 801e5f4:	781a      	ldrb	r2, [r3, #0]
 801e5f6:	79fb      	ldrb	r3, [r7, #7]
 801e5f8:	4313      	orrs	r3, r2
 801e5fa:	b2db      	uxtb	r3, r3
 801e5fc:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit (&I2cHandle, (uint16_t)_i2caddr,(uint8_t *) data_t, 1, 0xFFFF);
 801e5fe:	4b09      	ldr	r3, [pc, #36]	; (801e624 <writeI2c+0x3c>)
 801e600:	781b      	ldrb	r3, [r3, #0]
 801e602:	b299      	uxth	r1, r3
 801e604:	f107 020c 	add.w	r2, r7, #12
 801e608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e60c:	9300      	str	r3, [sp, #0]
 801e60e:	2301      	movs	r3, #1
 801e610:	4805      	ldr	r0, [pc, #20]	; (801e628 <writeI2c+0x40>)
 801e612:	f003 fc11 	bl	8021e38 <HAL_I2C_Master_Transmit>
}
 801e616:	bf00      	nop
 801e618:	3710      	adds	r7, #16
 801e61a:	46bd      	mov	sp, r7
 801e61c:	bd80      	pop	{r7, pc}
 801e61e:	bf00      	nop
 801e620:	200011dc 	.word	0x200011dc
 801e624:	200011df 	.word	0x200011df
 801e628:	2000123c 	.word	0x2000123c

0801e62c <Lcd_Initialization>:
  * @brief 	Initialize LCD function.
  * @param 	None
  * @retval None
  */
void Lcd_Initialization (void)
{
 801e62c:	b580      	push	{r7, lr}
 801e62e:	af00      	add	r7, sp, #0
	FaBoLCD_PCF8574(SLAVE_ADDRESS_LCD);
 801e630:	2042      	movs	r0, #66	; 0x42
 801e632:	f7ff fe4f 	bl	801e2d4 <FaBoLCD_PCF8574>
}
 801e636:	bf00      	nop
 801e638:	bd80      	pop	{r7, pc}

0801e63a <Lcd_Send_Cmd>:

/**
  * @brief 	Send command to lcd.
  */
void Lcd_Send_Cmd (char cmd)
{
 801e63a:	b580      	push	{r7, lr}
 801e63c:	b082      	sub	sp, #8
 801e63e:	af00      	add	r7, sp, #0
 801e640:	4603      	mov	r3, r0
 801e642:	71fb      	strb	r3, [r7, #7]
	command(cmd);
 801e644:	79fb      	ldrb	r3, [r7, #7]
 801e646:	4618      	mov	r0, r3
 801e648:	f7ff ff58 	bl	801e4fc <command>
}
 801e64c:	bf00      	nop
 801e64e:	3708      	adds	r7, #8
 801e650:	46bd      	mov	sp, r7
 801e652:	bd80      	pop	{r7, pc}

0801e654 <Lcd_Send_Data>:
  * @brief 	Write received characters on lcd at the current cursor position.
  * @param 	data: character to write
  * @retval None
  */
void Lcd_Send_Data (char data)
{
 801e654:	b580      	push	{r7, lr}
 801e656:	b082      	sub	sp, #8
 801e658:	af00      	add	r7, sp, #0
 801e65a:	4603      	mov	r3, r0
 801e65c:	71fb      	strb	r3, [r7, #7]
	write(data);
 801e65e:	79fb      	ldrb	r3, [r7, #7]
 801e660:	4618      	mov	r0, r3
 801e662:	f7ff ff59 	bl	801e518 <write>
}
 801e666:	bf00      	nop
 801e668:	3708      	adds	r7, #8
 801e66a:	46bd      	mov	sp, r7
 801e66c:	bd80      	pop	{r7, pc}

0801e66e <Lcd_Send_String>:
  * @brief 	Give the string to write on lcd.
  * @param 	str: pointer string of characters
  * @retval None
  */
void Lcd_Send_String (char *str)
{
 801e66e:	b580      	push	{r7, lr}
 801e670:	b082      	sub	sp, #8
 801e672:	af00      	add	r7, sp, #0
 801e674:	6078      	str	r0, [r7, #4]
	while (*str) Lcd_Send_Data (*str++);
 801e676:	e006      	b.n	801e686 <Lcd_Send_String+0x18>
 801e678:	687b      	ldr	r3, [r7, #4]
 801e67a:	1c5a      	adds	r2, r3, #1
 801e67c:	607a      	str	r2, [r7, #4]
 801e67e:	781b      	ldrb	r3, [r3, #0]
 801e680:	4618      	mov	r0, r3
 801e682:	f7ff ffe7 	bl	801e654 <Lcd_Send_Data>
 801e686:	687b      	ldr	r3, [r7, #4]
 801e688:	781b      	ldrb	r3, [r3, #0]
 801e68a:	2b00      	cmp	r3, #0
 801e68c:	d1f4      	bne.n	801e678 <Lcd_Send_String+0xa>
}
 801e68e:	bf00      	nop
 801e690:	bf00      	nop
 801e692:	3708      	adds	r7, #8
 801e694:	46bd      	mov	sp, r7
 801e696:	bd80      	pop	{r7, pc}

0801e698 <Lcd_Clear_Display>:
  * @brief 	Clear the lcd screen
  * @param 	None
  * @retval None
  */
void Lcd_Clear_Display (void)
{
 801e698:	b580      	push	{r7, lr}
 801e69a:	af00      	add	r7, sp, #0
	Lcd_Send_Cmd (0x01); //clear display
 801e69c:	2001      	movs	r0, #1
 801e69e:	f7ff ffcc 	bl	801e63a <Lcd_Send_Cmd>
}
 801e6a2:	bf00      	nop
 801e6a4:	bd80      	pop	{r7, pc}

0801e6a6 <Lcd_Goto_XY>:
  * @param 	row: index on row, from 0 to 15
  * @param  col: index on column, from 0 to 1
  * @retval None
  */
void Lcd_Goto_XY (int row, int col)
{
 801e6a6:	b580      	push	{r7, lr}
 801e6a8:	b082      	sub	sp, #8
 801e6aa:	af00      	add	r7, sp, #0
 801e6ac:	6078      	str	r0, [r7, #4]
 801e6ae:	6039      	str	r1, [r7, #0]
	setCursor(col, row);
 801e6b0:	683b      	ldr	r3, [r7, #0]
 801e6b2:	b2db      	uxtb	r3, r3
 801e6b4:	687a      	ldr	r2, [r7, #4]
 801e6b6:	b2d2      	uxtb	r2, r2
 801e6b8:	4611      	mov	r1, r2
 801e6ba:	4618      	mov	r0, r3
 801e6bc:	f7ff fed6 	bl	801e46c <setCursor>
}
 801e6c0:	bf00      	nop
 801e6c2:	3708      	adds	r7, #8
 801e6c4:	46bd      	mov	sp, r7
 801e6c6:	bd80      	pop	{r7, pc}

0801e6c8 <Lcd_Show_String>:
  * @brief 	Print the string on LCD, from the coordinates (row, col).
  * @param 	row: index on row to start
  * @param  col: index on column to start
  * @retval None
  */
void Lcd_Show_String(char *str, int row, int col){
 801e6c8:	b580      	push	{r7, lr}
 801e6ca:	b084      	sub	sp, #16
 801e6cc:	af00      	add	r7, sp, #0
 801e6ce:	60f8      	str	r0, [r7, #12]
 801e6d0:	60b9      	str	r1, [r7, #8]
 801e6d2:	607a      	str	r2, [r7, #4]
	Lcd_Goto_XY(row, col);
 801e6d4:	6879      	ldr	r1, [r7, #4]
 801e6d6:	68b8      	ldr	r0, [r7, #8]
 801e6d8:	f7ff ffe5 	bl	801e6a6 <Lcd_Goto_XY>
//	Lcd_Send_String("                ");	// clear the row
	Lcd_Send_String(str);
 801e6dc:	68f8      	ldr	r0, [r7, #12]
 801e6de:	f7ff ffc6 	bl	801e66e <Lcd_Send_String>
}
 801e6e2:	bf00      	nop
 801e6e4:	3710      	adds	r7, #16
 801e6e6:	46bd      	mov	sp, r7
 801e6e8:	bd80      	pop	{r7, pc}
	...

0801e6ec <is_Sim7600_TimeOutFlag>:
 * is_Sim7600_TimeOutFlag()
 * @param None.
 * @retval Flagstatus: SET or RESET
 * @brief This function return sim7600_timeout_flag.
 */
FlagStatus is_Sim7600_TimeOutFlag(){
 801e6ec:	b480      	push	{r7}
 801e6ee:	af00      	add	r7, sp, #0
	return sim7600_timeout_flag;
 801e6f0:	4b02      	ldr	r3, [pc, #8]	; (801e6fc <is_Sim7600_TimeOutFlag+0x10>)
 801e6f2:	781b      	ldrb	r3, [r3, #0]
}
 801e6f4:	4618      	mov	r0, r3
 801e6f6:	46bd      	mov	sp, r7
 801e6f8:	bc80      	pop	{r7}
 801e6fa:	4770      	bx	lr
 801e6fc:	2000018d 	.word	0x2000018d

0801e700 <Set_Sim7600_Timeout_Flag>:
 * Set_Sim7600_Timeout_Flag()
 * @param None.
 * @retval None
 * @brief This function set sim7600_timeout_flag to SET.
 */
void Set_Sim7600_Timeout_Flag(void){
 801e700:	b480      	push	{r7}
 801e702:	af00      	add	r7, sp, #0
	sim7600_timeout_flag = SET;
 801e704:	4b03      	ldr	r3, [pc, #12]	; (801e714 <Set_Sim7600_Timeout_Flag+0x14>)
 801e706:	2201      	movs	r2, #1
 801e708:	701a      	strb	r2, [r3, #0]
}
 801e70a:	bf00      	nop
 801e70c:	46bd      	mov	sp, r7
 801e70e:	bc80      	pop	{r7}
 801e710:	4770      	bx	lr
 801e712:	bf00      	nop
 801e714:	2000018d 	.word	0x2000018d

0801e718 <Clear_Sim7600_Timeout_Flag>:
 * Clear_Sim7600_Timeout_Flag()
 * @param None.
 * @retval None
 * @brief This function set sim7600_timeout_flag to RESET.
 */
void Clear_Sim7600_Timeout_Flag(void){
 801e718:	b480      	push	{r7}
 801e71a:	af00      	add	r7, sp, #0
	sim7600_timeout_flag = RESET;
 801e71c:	4b03      	ldr	r3, [pc, #12]	; (801e72c <Clear_Sim7600_Timeout_Flag+0x14>)
 801e71e:	2200      	movs	r2, #0
 801e720:	701a      	strb	r2, [r3, #0]
}
 801e722:	bf00      	nop
 801e724:	46bd      	mov	sp, r7
 801e726:	bc80      	pop	{r7}
 801e728:	4770      	bx	lr
 801e72a:	bf00      	nop
 801e72c:	2000018d 	.word	0x2000018d

0801e730 <Sim7600_State_Display>:

/**
 * Sim7600_State_Display()
 * @brief This is function for display state of State Machine. It only show State when having a state changation.
 */
void Sim7600_State_Display(void){
 801e730:	b580      	push	{r7, lr}
 801e732:	af00      	add	r7, sp, #0
	if(sim7600_state!=prev_sim7600_state){
 801e734:	4b2a      	ldr	r3, [pc, #168]	; (801e7e0 <Sim7600_State_Display+0xb0>)
 801e736:	781a      	ldrb	r2, [r3, #0]
 801e738:	4b2a      	ldr	r3, [pc, #168]	; (801e7e4 <Sim7600_State_Display+0xb4>)
 801e73a:	781b      	ldrb	r3, [r3, #0]
 801e73c:	429a      	cmp	r2, r3
 801e73e:	d049      	beq.n	801e7d4 <Sim7600_State_Display+0xa4>
		switch(sim7600_state){
 801e740:	4b27      	ldr	r3, [pc, #156]	; (801e7e0 <Sim7600_State_Display+0xb0>)
 801e742:	781b      	ldrb	r3, [r3, #0]
 801e744:	2b0a      	cmp	r3, #10
 801e746:	d847      	bhi.n	801e7d8 <Sim7600_State_Display+0xa8>
 801e748:	a201      	add	r2, pc, #4	; (adr r2, 801e750 <Sim7600_State_Display+0x20>)
 801e74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e74e:	bf00      	nop
 801e750:	0801e77d 	.word	0x0801e77d
 801e754:	0801e785 	.word	0x0801e785
 801e758:	0801e78d 	.word	0x0801e78d
 801e75c:	0801e795 	.word	0x0801e795
 801e760:	0801e79d 	.word	0x0801e79d
 801e764:	0801e7a5 	.word	0x0801e7a5
 801e768:	0801e7ad 	.word	0x0801e7ad
 801e76c:	0801e7b5 	.word	0x0801e7b5
 801e770:	0801e7bd 	.word	0x0801e7bd
 801e774:	0801e7c5 	.word	0x0801e7c5
 801e778:	0801e7cd 	.word	0x0801e7cd
		case SIM7600_POWER_ON:
			LOG("\r\nSIM7600 POWER ON\r\n");
 801e77c:	481a      	ldr	r0, [pc, #104]	; (801e7e8 <Sim7600_State_Display+0xb8>)
 801e77e:	f000 fc3d 	bl	801effc <UART_DEBUG_Transmit>
			break;
 801e782:	e02a      	b.n	801e7da <Sim7600_State_Display+0xaa>
		case SIM7600_WAIT_FOR_POWER_ON_RESPONE:
			LOG((uint8_t*)"\r\nSIM7600 WAIT FOR POWER ON RESPONE\r\n");
 801e784:	4819      	ldr	r0, [pc, #100]	; (801e7ec <Sim7600_State_Display+0xbc>)
 801e786:	f000 fc39 	bl	801effc <UART_DEBUG_Transmit>
			break;
 801e78a:	e026      	b.n	801e7da <Sim7600_State_Display+0xaa>
		case SIM7600_RESET:
			LOG((uint8_t*)"\r\nSIM7600 RESET\r\n");
 801e78c:	4818      	ldr	r0, [pc, #96]	; (801e7f0 <Sim7600_State_Display+0xc0>)
 801e78e:	f000 fc35 	bl	801effc <UART_DEBUG_Transmit>
			break;
 801e792:	e022      	b.n	801e7da <Sim7600_State_Display+0xaa>
		case SIM7600_WAIT_FOR_RESET_RESPONE:
			LOG((uint8_t*)"\r\nSIM7600 WAIT FOR RESET RESPONE\r\n");
 801e794:	4817      	ldr	r0, [pc, #92]	; (801e7f4 <Sim7600_State_Display+0xc4>)
 801e796:	f000 fc31 	bl	801effc <UART_DEBUG_Transmit>
			break;
 801e79a:	e01e      	b.n	801e7da <Sim7600_State_Display+0xaa>
		case SIM7600_START_UP:
			LOG((uint8_t*)"\r\nSIM7600 START UP\r\n");
 801e79c:	4816      	ldr	r0, [pc, #88]	; (801e7f8 <Sim7600_State_Display+0xc8>)
 801e79e:	f000 fc2d 	bl	801effc <UART_DEBUG_Transmit>
			break;
 801e7a2:	e01a      	b.n	801e7da <Sim7600_State_Display+0xaa>
		case SIM7600_WAIT_FOR_START_UP_RESPONE:
			LOG((uint8_t*)"\r\nSIM7600 WAIT FOR START UP RESPONE\r\n");
 801e7a4:	4815      	ldr	r0, [pc, #84]	; (801e7fc <Sim7600_State_Display+0xcc>)
 801e7a6:	f000 fc29 	bl	801effc <UART_DEBUG_Transmit>
			break;
 801e7aa:	e016      	b.n	801e7da <Sim7600_State_Display+0xaa>
		case SIM7600_SETTING:
			LOG((uint8_t*)"\r\nSIM7600 SETTING\r\n");
 801e7ac:	4814      	ldr	r0, [pc, #80]	; (801e800 <Sim7600_State_Display+0xd0>)
 801e7ae:	f000 fc25 	bl	801effc <UART_DEBUG_Transmit>
			break;
 801e7b2:	e012      	b.n	801e7da <Sim7600_State_Display+0xaa>
		case SIM7600_WAIT_FOR_SETTING_RESPONE:
			LOG((uint8_t*)"\r\nSIM7600 WAIT FOR SETTING RESPONE\r\n");
 801e7b4:	4813      	ldr	r0, [pc, #76]	; (801e804 <Sim7600_State_Display+0xd4>)
 801e7b6:	f000 fc21 	bl	801effc <UART_DEBUG_Transmit>
			break;
 801e7ba:	e00e      	b.n	801e7da <Sim7600_State_Display+0xaa>
		case SIM7600_GET_IMEI:
			LOG((uint8_t*)"\r\nSIM7600 GET IMEI\r\n");
 801e7bc:	4812      	ldr	r0, [pc, #72]	; (801e808 <Sim7600_State_Display+0xd8>)
 801e7be:	f000 fc1d 	bl	801effc <UART_DEBUG_Transmit>
			break;
 801e7c2:	e00a      	b.n	801e7da <Sim7600_State_Display+0xaa>
		case SIM7600_WAIT_FOR_GET_IMEI_RESPONE:
			LOG((uint8_t*)"\r\nSIM7600 WAIT FOR GET IMEI RESPONE\r\n");
 801e7c4:	4811      	ldr	r0, [pc, #68]	; (801e80c <Sim7600_State_Display+0xdc>)
 801e7c6:	f000 fc19 	bl	801effc <UART_DEBUG_Transmit>
			break;
 801e7ca:	e006      	b.n	801e7da <Sim7600_State_Display+0xaa>
		case SIM7600_MAX_STATE:
			LOG((uint8_t*)"\r\nSIM7600 MAX STATE\r\n");
 801e7cc:	4810      	ldr	r0, [pc, #64]	; (801e810 <Sim7600_State_Display+0xe0>)
 801e7ce:	f000 fc15 	bl	801effc <UART_DEBUG_Transmit>
			break;
 801e7d2:	e002      	b.n	801e7da <Sim7600_State_Display+0xaa>
		default:
			break;
		}
	}
 801e7d4:	bf00      	nop
 801e7d6:	e000      	b.n	801e7da <Sim7600_State_Display+0xaa>
			break;
 801e7d8:	bf00      	nop
}
 801e7da:	bf00      	nop
 801e7dc:	bd80      	pop	{r7, pc}
 801e7de:	bf00      	nop
 801e7e0:	20000000 	.word	0x20000000
 801e7e4:	2000122a 	.word	0x2000122a
 801e7e8:	08024a90 	.word	0x08024a90
 801e7ec:	08024aa8 	.word	0x08024aa8
 801e7f0:	08024ad0 	.word	0x08024ad0
 801e7f4:	08024ae4 	.word	0x08024ae4
 801e7f8:	08024b08 	.word	0x08024b08
 801e7fc:	08024b20 	.word	0x08024b20
 801e800:	08024b48 	.word	0x08024b48
 801e804:	08024b5c 	.word	0x08024b5c
 801e808:	08024b84 	.word	0x08024b84
 801e80c:	08024b9c 	.word	0x08024b9c
 801e810:	08024bc4 	.word	0x08024bc4

0801e814 <Sim7600_Run>:
 * Sim7600_Run()
 * @param None
 * @retval 0 if state < SIM7600_MAX_STATE else return 1
 * @brief This is function can be called from external file. It run follow state machine method. Not have param.
 */
uint8_t Sim7600_Run(void){
 801e814:	b580      	push	{r7, lr}
 801e816:	af00      	add	r7, sp, #0
	Sim7600_State_Display();
 801e818:	f7ff ff8a 	bl	801e730 <Sim7600_State_Display>
	prev_sim7600_state = sim7600_state;
 801e81c:	4b09      	ldr	r3, [pc, #36]	; (801e844 <Sim7600_Run+0x30>)
 801e81e:	781a      	ldrb	r2, [r3, #0]
 801e820:	4b09      	ldr	r3, [pc, #36]	; (801e848 <Sim7600_Run+0x34>)
 801e822:	701a      	strb	r2, [r3, #0]
	if(sim7600_state < SIM7600_MAX_STATE){
 801e824:	4b07      	ldr	r3, [pc, #28]	; (801e844 <Sim7600_Run+0x30>)
 801e826:	781b      	ldrb	r3, [r3, #0]
 801e828:	2b09      	cmp	r3, #9
 801e82a:	d808      	bhi.n	801e83e <Sim7600_Run+0x2a>
		(*Sim7600_State_Machine[sim7600_state].func)();
 801e82c:	4b05      	ldr	r3, [pc, #20]	; (801e844 <Sim7600_Run+0x30>)
 801e82e:	781b      	ldrb	r3, [r3, #0]
 801e830:	4a06      	ldr	r2, [pc, #24]	; (801e84c <Sim7600_Run+0x38>)
 801e832:	00db      	lsls	r3, r3, #3
 801e834:	4413      	add	r3, r2
 801e836:	685b      	ldr	r3, [r3, #4]
 801e838:	4798      	blx	r3
		return 0;
 801e83a:	2300      	movs	r3, #0
 801e83c:	e000      	b.n	801e840 <Sim7600_Run+0x2c>
	} else {
		return 1;
 801e83e:	2301      	movs	r3, #1
	}
}
 801e840:	4618      	mov	r0, r3
 801e842:	bd80      	pop	{r7, pc}
 801e844:	20000000 	.word	0x20000000
 801e848:	2000122a 	.word	0x2000122a
 801e84c:	20000028 	.word	0x20000028

0801e850 <Power_Signal_Low>:
 * Power_Signal_Low()
 * @param None
 * @retval None
 * @brief This is function set Power Signal to RESET
 */
void Power_Signal_Low(void){
 801e850:	b580      	push	{r7, lr}
 801e852:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIM7600_4G_PWRON_PORT, SIM7600_4G_PWRON, GPIO_PIN_RESET);
 801e854:	2200      	movs	r2, #0
 801e856:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e85a:	4802      	ldr	r0, [pc, #8]	; (801e864 <Power_Signal_Low+0x14>)
 801e85c:	f003 f990 	bl	8021b80 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(SIM7600_4G_PWRON_PORT, SIM7600_4G_PWRON, GPIO_PIN_SET);
}
 801e860:	bf00      	nop
 801e862:	bd80      	pop	{r7, pc}
 801e864:	40011000 	.word	0x40011000

0801e868 <Power_Signal_High>:
 * Power_Signal_High()
 * @param None
 * @retval None
 * @brief This is function set Power Signal to SET
 */
void Power_Signal_High(void){
 801e868:	b580      	push	{r7, lr}
 801e86a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIM7600_4G_PWRON_PORT, SIM7600_4G_PWRON, GPIO_PIN_SET);
 801e86c:	2201      	movs	r2, #1
 801e86e:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e872:	4802      	ldr	r0, [pc, #8]	; (801e87c <Power_Signal_High+0x14>)
 801e874:	f003 f984 	bl	8021b80 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(SIM7600_4G_PWRON_PORT, SIM7600_4G_PWRON, GPIO_PIN_RESET);
}
 801e878:	bf00      	nop
 801e87a:	bd80      	pop	{r7, pc}
 801e87c:	40011000 	.word	0x40011000

0801e880 <Reset_Signal_Low>:
 * Reset_Signal_Low()
 * @param None
 * @retval None
 * @brief This is function set Reset Signal to RESET
 */
void Reset_Signal_Low(void){
 801e880:	b580      	push	{r7, lr}
 801e882:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIM7600_4G_PERST_PORT, SIM7600_4G_PERST, GPIO_PIN_RESET);
 801e884:	2200      	movs	r2, #0
 801e886:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e88a:	4802      	ldr	r0, [pc, #8]	; (801e894 <Reset_Signal_Low+0x14>)
 801e88c:	f003 f978 	bl	8021b80 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(SIM7600_4G_PERST_PORT, SIM7600_4G_PERST, GPIO_PIN_SET);
}
 801e890:	bf00      	nop
 801e892:	bd80      	pop	{r7, pc}
 801e894:	40011000 	.word	0x40011000

0801e898 <Reset_Signal_High>:
 * Reset_Signal_High()
 * @param None
 * @retval None
 * @brief This is function set Reset Signal to SET
 */
void Reset_Signal_High(void){
 801e898:	b580      	push	{r7, lr}
 801e89a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIM7600_4G_PERST_PORT, SIM7600_4G_PERST, GPIO_PIN_SET);
 801e89c:	2201      	movs	r2, #1
 801e89e:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e8a2:	4802      	ldr	r0, [pc, #8]	; (801e8ac <Reset_Signal_High+0x14>)
 801e8a4:	f003 f96c 	bl	8021b80 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(SIM7600_4G_PERST_PORT, SIM7600_4G_PERST, GPIO_PIN_RESET);

}
 801e8a8:	bf00      	nop
 801e8aa:	bd80      	pop	{r7, pc}
 801e8ac:	40011000 	.word	0x40011000

0801e8b0 <Sim7600_Power_On>:
 * Sim7600_Power_On()
 * @param None
 * @retval None
 * @brief This is function for control POWER_ON signal in Simcom7600 module
 */
void Sim7600_Power_On(void){
 801e8b0:	b580      	push	{r7, lr}
 801e8b2:	af00      	add	r7, sp, #0
	SCH_Add_Task(Power_Signal_Low, 0, 0);
 801e8b4:	2200      	movs	r2, #0
 801e8b6:	2100      	movs	r1, #0
 801e8b8:	4809      	ldr	r0, [pc, #36]	; (801e8e0 <Sim7600_Power_On+0x30>)
 801e8ba:	f001 fd61 	bl	8020380 <SCH_Add_Task>
	SCH_Add_Task(Power_Signal_High, TIMER_TO_POWER_ON_SIM7600, 0);
 801e8be:	2200      	movs	r2, #0
 801e8c0:	21c8      	movs	r1, #200	; 0xc8
 801e8c2:	4808      	ldr	r0, [pc, #32]	; (801e8e4 <Sim7600_Power_On+0x34>)
 801e8c4:	f001 fd5c 	bl	8020380 <SCH_Add_Task>
	Clear_Sim7600_Timeout_Flag();
 801e8c8:	f7ff ff26 	bl	801e718 <Clear_Sim7600_Timeout_Flag>
	SCH_Add_Task(Set_Sim7600_Timeout_Flag, TIMER_TO_POWER_ON_SIM7600_TIMEOUT, 0);
 801e8cc:	2200      	movs	r2, #0
 801e8ce:	21c8      	movs	r1, #200	; 0xc8
 801e8d0:	4805      	ldr	r0, [pc, #20]	; (801e8e8 <Sim7600_Power_On+0x38>)
 801e8d2:	f001 fd55 	bl	8020380 <SCH_Add_Task>
	sim7600_state = SIM7600_WAIT_FOR_POWER_ON_RESPONE;
 801e8d6:	4b05      	ldr	r3, [pc, #20]	; (801e8ec <Sim7600_Power_On+0x3c>)
 801e8d8:	2201      	movs	r2, #1
 801e8da:	701a      	strb	r2, [r3, #0]
}
 801e8dc:	bf00      	nop
 801e8de:	bd80      	pop	{r7, pc}
 801e8e0:	0801e851 	.word	0x0801e851
 801e8e4:	0801e869 	.word	0x0801e869
 801e8e8:	0801e701 	.word	0x0801e701
 801e8ec:	20000000 	.word	0x20000000

0801e8f0 <Sim7600_Wait_For_Power_On_Respone>:
 * Sim7600_Wait_For_Power_On_Respone()
 * @param None
 * @retval None
 * @brief This is function for waiting POWER_ON State respone, after timeout TIMER_TO_POWER_ON_SIM7600_TIMEOUT
 */
void Sim7600_Wait_For_Power_On_Respone(void){
 801e8f0:	b580      	push	{r7, lr}
 801e8f2:	af00      	add	r7, sp, #0
	if(is_Sim7600_TimeOutFlag()){
 801e8f4:	f7ff fefa 	bl	801e6ec <is_Sim7600_TimeOutFlag>
 801e8f8:	4603      	mov	r3, r0
 801e8fa:	2b00      	cmp	r3, #0
 801e8fc:	d002      	beq.n	801e904 <Sim7600_Wait_For_Power_On_Respone+0x14>
		sim7600_state = SIM7600_START_UP;
 801e8fe:	4b02      	ldr	r3, [pc, #8]	; (801e908 <Sim7600_Wait_For_Power_On_Respone+0x18>)
 801e900:	2204      	movs	r2, #4
 801e902:	701a      	strb	r2, [r3, #0]
	}
}
 801e904:	bf00      	nop
 801e906:	bd80      	pop	{r7, pc}
 801e908:	20000000 	.word	0x20000000

0801e90c <Sim7600_Reset>:
 * @param None
 * @retval None
 * @brief This is function for control RESET signal in Simcom7600 module
 * @brief Keep RESET signal LOW during TIMER_TO_RESET_SIM7600
 */
void Sim7600_Reset(void){
 801e90c:	b580      	push	{r7, lr}
 801e90e:	af00      	add	r7, sp, #0
	SCH_Add_Task(Reset_Signal_High, 0, 0);
 801e910:	2200      	movs	r2, #0
 801e912:	2100      	movs	r1, #0
 801e914:	480a      	ldr	r0, [pc, #40]	; (801e940 <Sim7600_Reset+0x34>)
 801e916:	f001 fd33 	bl	8020380 <SCH_Add_Task>
	SCH_Add_Task(Reset_Signal_Low, TIMER_TO_RESET_SIM7600, 0);
 801e91a:	2200      	movs	r2, #0
 801e91c:	21c8      	movs	r1, #200	; 0xc8
 801e91e:	4809      	ldr	r0, [pc, #36]	; (801e944 <Sim7600_Reset+0x38>)
 801e920:	f001 fd2e 	bl	8020380 <SCH_Add_Task>
	Clear_Sim7600_Timeout_Flag();
 801e924:	f7ff fef8 	bl	801e718 <Clear_Sim7600_Timeout_Flag>
	SCH_Add_Task(Set_Sim7600_Timeout_Flag, TIMER_TO_RESET_SIM7600_TIMEOUT, 0);
 801e928:	2200      	movs	r2, #0
 801e92a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801e92e:	4806      	ldr	r0, [pc, #24]	; (801e948 <Sim7600_Reset+0x3c>)
 801e930:	f001 fd26 	bl	8020380 <SCH_Add_Task>
	sim7600_state = SIM7600_WAIT_FOR_RESET_RESPONE;
 801e934:	4b05      	ldr	r3, [pc, #20]	; (801e94c <Sim7600_Reset+0x40>)
 801e936:	2203      	movs	r2, #3
 801e938:	701a      	strb	r2, [r3, #0]
}
 801e93a:	bf00      	nop
 801e93c:	bd80      	pop	{r7, pc}
 801e93e:	bf00      	nop
 801e940:	0801e899 	.word	0x0801e899
 801e944:	0801e881 	.word	0x0801e881
 801e948:	0801e701 	.word	0x0801e701
 801e94c:	20000000 	.word	0x20000000

0801e950 <Sim7600_Wait_For_Reset_Respone>:
 * Sim7600_Wait_For_Reset_Respone()
 * @param None
 * @retval None
 * @brief This is function for waiting simcom7600_timeout_flag is SET
 */
void Sim7600_Wait_For_Reset_Respone(void){
 801e950:	b580      	push	{r7, lr}
 801e952:	af00      	add	r7, sp, #0
	if(is_Sim7600_TimeOutFlag()){
 801e954:	f7ff feca 	bl	801e6ec <is_Sim7600_TimeOutFlag>
 801e958:	4603      	mov	r3, r0
 801e95a:	2b00      	cmp	r3, #0
 801e95c:	d002      	beq.n	801e964 <Sim7600_Wait_For_Reset_Respone+0x14>
		sim7600_state = SIM7600_POWER_ON;
 801e95e:	4b02      	ldr	r3, [pc, #8]	; (801e968 <Sim7600_Wait_For_Reset_Respone+0x18>)
 801e960:	2200      	movs	r2, #0
 801e962:	701a      	strb	r2, [r3, #0]
	}
}
 801e964:	bf00      	nop
 801e966:	bd80      	pop	{r7, pc}
 801e968:	20000000 	.word	0x20000000

0801e96c <Sim7600_Start_Up>:
 * Sim7600_Start_Up()
 * @param None
 * @retval None
 * @brief This is function for start up Simcom7600 module. Timeout is TIMEOUT_STARTUP_RESET.
 */
void Sim7600_Start_Up(void){
 801e96c:	b580      	push	{r7, lr}
 801e96e:	af00      	add	r7, sp, #0
	sim7600_state = SIM7600_WAIT_FOR_START_UP_RESPONE;
 801e970:	4b06      	ldr	r3, [pc, #24]	; (801e98c <Sim7600_Start_Up+0x20>)
 801e972:	2205      	movs	r2, #5
 801e974:	701a      	strb	r2, [r3, #0]
	Clear_Sim7600_Timeout_Flag();
 801e976:	f7ff fecf 	bl	801e718 <Clear_Sim7600_Timeout_Flag>
	SCH_Add_Task(Set_Sim7600_Timeout_Flag, TIMEOUT_STARTUP_RESET, 0);
 801e97a:	2200      	movs	r2, #0
 801e97c:	f644 6120 	movw	r1, #20000	; 0x4e20
 801e980:	4803      	ldr	r0, [pc, #12]	; (801e990 <Sim7600_Start_Up+0x24>)
 801e982:	f001 fcfd 	bl	8020380 <SCH_Add_Task>
}
 801e986:	bf00      	nop
 801e988:	bd80      	pop	{r7, pc}
 801e98a:	bf00      	nop
 801e98c:	20000000 	.word	0x20000000
 801e990:	0801e701 	.word	0x0801e701

0801e994 <Sim7600_Wait_For_Start_Up_Respone>:
 * @param None
 * @retval None
 * @brief This is function for waiting start up respond.
 * @brief If Timeout so Reset Simcom7600 else AT_Result = AT_PB_DONE switch to SIM7600_GET_IMEI
 */
void Sim7600_Wait_For_Start_Up_Respone(void){
 801e994:	b580      	push	{r7, lr}
 801e996:	af00      	add	r7, sp, #0
	// Time out if too long time cannot receive PB_DONE
	if(is_Sim7600_TimeOutFlag()){
 801e998:	f7ff fea8 	bl	801e6ec <is_Sim7600_TimeOutFlag>
 801e99c:	4603      	mov	r3, r0
 801e99e:	2b00      	cmp	r3, #0
 801e9a0:	d002      	beq.n	801e9a8 <Sim7600_Wait_For_Start_Up_Respone+0x14>
		sim7600_state = SIM7600_RESET;
 801e9a2:	4b0a      	ldr	r3, [pc, #40]	; (801e9cc <Sim7600_Wait_For_Start_Up_Respone+0x38>)
 801e9a4:	2202      	movs	r2, #2
 801e9a6:	701a      	strb	r2, [r3, #0]
	}
//	Wait_For_Respone(AT_PB_DONE);
	switch (Get_AT_Result()){
 801e9a8:	f001 fc94 	bl	80202d4 <Get_AT_Result>
 801e9ac:	4603      	mov	r3, r0
 801e9ae:	2b03      	cmp	r3, #3
 801e9b0:	d107      	bne.n	801e9c2 <Sim7600_Wait_For_Start_Up_Respone+0x2e>
		case AT_PB_DONE:
			Clear_AT_Result();
 801e9b2:	f001 fc99 	bl	80202e8 <Clear_AT_Result>
			Set_Sim7600_Timeout_Flag();
 801e9b6:	f7ff fea3 	bl	801e700 <Set_Sim7600_Timeout_Flag>
			sim7600_state = SIM7600_SETTING;//SIM7600_GET_IMEI;
 801e9ba:	4b04      	ldr	r3, [pc, #16]	; (801e9cc <Sim7600_Wait_For_Start_Up_Respone+0x38>)
 801e9bc:	2206      	movs	r2, #6
 801e9be:	701a      	strb	r2, [r3, #0]
			break;
 801e9c0:	e002      	b.n	801e9c8 <Sim7600_Wait_For_Start_Up_Respone+0x34>
		default:
			Clear_AT_Result();
 801e9c2:	f001 fc91 	bl	80202e8 <Clear_AT_Result>
			break;
 801e9c6:	bf00      	nop
	}
}
 801e9c8:	bf00      	nop
 801e9ca:	bd80      	pop	{r7, pc}
 801e9cc:	20000000 	.word	0x20000000

0801e9d0 <Sim7600_Setting>:
 * Sim7600_Get_Imei()
 * @param None
 * @retval None
 * @brief This is function for Get IMEI from Simcomo7600 to set LockerID.
 */
void Sim7600_Setting(void){
 801e9d0:	b580      	push	{r7, lr}
 801e9d2:	af00      	add	r7, sp, #0
	// Clear_Reiceive_Buffer();
	UART_SIM7600_Transmit(setting_command[setting_index]);
 801e9d4:	4b06      	ldr	r3, [pc, #24]	; (801e9f0 <Sim7600_Setting+0x20>)
 801e9d6:	781b      	ldrb	r3, [r3, #0]
 801e9d8:	461a      	mov	r2, r3
 801e9da:	4b06      	ldr	r3, [pc, #24]	; (801e9f4 <Sim7600_Setting+0x24>)
 801e9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e9e0:	4618      	mov	r0, r3
 801e9e2:	f000 fa71 	bl	801eec8 <UART_SIM7600_Transmit>
	sim7600_state = SIM7600_WAIT_FOR_SETTING_RESPONE;
 801e9e6:	4b04      	ldr	r3, [pc, #16]	; (801e9f8 <Sim7600_Setting+0x28>)
 801e9e8:	2207      	movs	r2, #7
 801e9ea:	701a      	strb	r2, [r3, #0]
}
 801e9ec:	bf00      	nop
 801e9ee:	bd80      	pop	{r7, pc}
 801e9f0:	2000018e 	.word	0x2000018e
 801e9f4:	20000004 	.word	0x20000004
 801e9f8:	20000000 	.word	0x20000000

0801e9fc <Sim7600_Wait_For_Setting_Respone>:
 * Sim7600_Wait_For_Get_Imei_Respone()
 * @param None
 * @retval None
 * @brief This is function for waiting respone from GET IMEI State.
 */
void Sim7600_Wait_For_Setting_Respone(void){
 801e9fc:	b580      	push	{r7, lr}
 801e9fe:	af00      	add	r7, sp, #0
	if(is_Sim7600_TimeOutFlag()){
 801ea00:	f7ff fe74 	bl	801e6ec <is_Sim7600_TimeOutFlag>
 801ea04:	4603      	mov	r3, r0
 801ea06:	2b00      	cmp	r3, #0
 801ea08:	d030      	beq.n	801ea6c <Sim7600_Wait_For_Setting_Respone+0x70>
		switch (Get_AT_Result()){
 801ea0a:	f001 fc63 	bl	80202d4 <Get_AT_Result>
 801ea0e:	4603      	mov	r3, r0
 801ea10:	2b00      	cmp	r3, #0
 801ea12:	d002      	beq.n	801ea1a <Sim7600_Wait_For_Setting_Respone+0x1e>
 801ea14:	2b01      	cmp	r3, #1
 801ea16:	d023      	beq.n	801ea60 <Sim7600_Wait_For_Setting_Respone+0x64>
			case AT_ERROR:
				Clear_AT_Result();
				sim7600_state = SIM7600_MAX_STATE;
				break;
			default:
				break;
 801ea18:	e02b      	b.n	801ea72 <Sim7600_Wait_For_Setting_Respone+0x76>
				Clear_AT_Result();
 801ea1a:	f001 fc65 	bl	80202e8 <Clear_AT_Result>
				if(setting_index >= (NO_SETTING_COMMAND - 1) ){
 801ea1e:	4b16      	ldr	r3, [pc, #88]	; (801ea78 <Sim7600_Wait_For_Setting_Respone+0x7c>)
 801ea20:	781b      	ldrb	r3, [r3, #0]
 801ea22:	2b07      	cmp	r3, #7
 801ea24:	d906      	bls.n	801ea34 <Sim7600_Wait_For_Setting_Respone+0x38>
					setting_index = 0;
 801ea26:	4b14      	ldr	r3, [pc, #80]	; (801ea78 <Sim7600_Wait_For_Setting_Respone+0x7c>)
 801ea28:	2200      	movs	r2, #0
 801ea2a:	701a      	strb	r2, [r3, #0]
					sim7600_state = SIM7600_GET_IMEI;
 801ea2c:	4b13      	ldr	r3, [pc, #76]	; (801ea7c <Sim7600_Wait_For_Setting_Respone+0x80>)
 801ea2e:	2208      	movs	r2, #8
 801ea30:	701a      	strb	r2, [r3, #0]
 801ea32:	e008      	b.n	801ea46 <Sim7600_Wait_For_Setting_Respone+0x4a>
					setting_index ++;
 801ea34:	4b10      	ldr	r3, [pc, #64]	; (801ea78 <Sim7600_Wait_For_Setting_Respone+0x7c>)
 801ea36:	781b      	ldrb	r3, [r3, #0]
 801ea38:	3301      	adds	r3, #1
 801ea3a:	b2da      	uxtb	r2, r3
 801ea3c:	4b0e      	ldr	r3, [pc, #56]	; (801ea78 <Sim7600_Wait_For_Setting_Respone+0x7c>)
 801ea3e:	701a      	strb	r2, [r3, #0]
					sim7600_state = SIM7600_SETTING;
 801ea40:	4b0e      	ldr	r3, [pc, #56]	; (801ea7c <Sim7600_Wait_For_Setting_Respone+0x80>)
 801ea42:	2206      	movs	r2, #6
 801ea44:	701a      	strb	r2, [r3, #0]
				if(setting_index == 6){
 801ea46:	4b0c      	ldr	r3, [pc, #48]	; (801ea78 <Sim7600_Wait_For_Setting_Respone+0x7c>)
 801ea48:	781b      	ldrb	r3, [r3, #0]
 801ea4a:	2b06      	cmp	r3, #6
 801ea4c:	d110      	bne.n	801ea70 <Sim7600_Wait_For_Setting_Respone+0x74>
					Clear_Sim7600_Timeout_Flag();
 801ea4e:	f7ff fe63 	bl	801e718 <Clear_Sim7600_Timeout_Flag>
					SCH_Add_Task(Set_Sim7600_Timeout_Flag, 500, 0);
 801ea52:	2200      	movs	r2, #0
 801ea54:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801ea58:	4809      	ldr	r0, [pc, #36]	; (801ea80 <Sim7600_Wait_For_Setting_Respone+0x84>)
 801ea5a:	f001 fc91 	bl	8020380 <SCH_Add_Task>
				break;
 801ea5e:	e007      	b.n	801ea70 <Sim7600_Wait_For_Setting_Respone+0x74>
				Clear_AT_Result();
 801ea60:	f001 fc42 	bl	80202e8 <Clear_AT_Result>
				sim7600_state = SIM7600_MAX_STATE;
 801ea64:	4b05      	ldr	r3, [pc, #20]	; (801ea7c <Sim7600_Wait_For_Setting_Respone+0x80>)
 801ea66:	220a      	movs	r2, #10
 801ea68:	701a      	strb	r2, [r3, #0]
				break;
 801ea6a:	e002      	b.n	801ea72 <Sim7600_Wait_For_Setting_Respone+0x76>
		}
	}
 801ea6c:	bf00      	nop
 801ea6e:	e000      	b.n	801ea72 <Sim7600_Wait_For_Setting_Respone+0x76>
				break;
 801ea70:	bf00      	nop
}
 801ea72:	bf00      	nop
 801ea74:	bd80      	pop	{r7, pc}
 801ea76:	bf00      	nop
 801ea78:	2000018e 	.word	0x2000018e
 801ea7c:	20000000 	.word	0x20000000
 801ea80:	0801e701 	.word	0x0801e701

0801ea84 <Sim7600_Get_Imei>:
 * Sim7600_Get_Imei()
 * @param None
 * @retval None
 * @brief This is function for Get IMEI from Simcomo7600 to set LockerID.
 */
void Sim7600_Get_Imei(void){
 801ea84:	b580      	push	{r7, lr}
 801ea86:	af00      	add	r7, sp, #0
	// Clear_Reiceive_Buffer();
	UART_SIM7600_Transmit((uint8_t*)"AT+SIMEI?\r\n");
 801ea88:	4803      	ldr	r0, [pc, #12]	; (801ea98 <Sim7600_Get_Imei+0x14>)
 801ea8a:	f000 fa1d 	bl	801eec8 <UART_SIM7600_Transmit>
	sim7600_state = SIM7600_WAIT_FOR_GET_IMEI_RESPONE;
 801ea8e:	4b03      	ldr	r3, [pc, #12]	; (801ea9c <Sim7600_Get_Imei+0x18>)
 801ea90:	2209      	movs	r2, #9
 801ea92:	701a      	strb	r2, [r3, #0]
}
 801ea94:	bf00      	nop
 801ea96:	bd80      	pop	{r7, pc}
 801ea98:	08024bdc 	.word	0x08024bdc
 801ea9c:	20000000 	.word	0x20000000

0801eaa0 <Sim7600_Wait_For_Get_Imei_Respone>:
 * Sim7600_Wait_For_Get_Imei_Respone()
 * @param None
 * @retval None
 * @brief This is function for waiting respone from GET IMEI State.
 */
void Sim7600_Wait_For_Get_Imei_Respone(void){
 801eaa0:	b580      	push	{r7, lr}
 801eaa2:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_IMEI);
	switch (Get_AT_Result()){
 801eaa4:	f001 fc16 	bl	80202d4 <Get_AT_Result>
 801eaa8:	4603      	mov	r3, r0
 801eaaa:	2b01      	cmp	r3, #1
 801eaac:	d010      	beq.n	801ead0 <Sim7600_Wait_For_Get_Imei_Respone+0x30>
 801eaae:	2b06      	cmp	r3, #6
 801eab0:	d113      	bne.n	801eada <Sim7600_Wait_For_Get_Imei_Respone+0x3a>
		case AT_IMEI:
			if(Get_Imei()){
 801eab2:	f000 f82b 	bl	801eb0c <Get_Imei>
 801eab6:	4603      	mov	r3, r0
 801eab8:	2b00      	cmp	r3, #0
 801eaba:	d010      	beq.n	801eade <Sim7600_Wait_For_Get_Imei_Respone+0x3e>
				Clear_AT_Result();
 801eabc:	f001 fc14 	bl	80202e8 <Clear_AT_Result>
				sim7600_state = SIM7600_MAX_STATE;
 801eac0:	4b08      	ldr	r3, [pc, #32]	; (801eae4 <Sim7600_Wait_For_Get_Imei_Respone+0x44>)
 801eac2:	220a      	movs	r2, #10
 801eac4:	701a      	strb	r2, [r3, #0]
				UART_DEBUG_Transmit_Size(imei_buffer, IMEI_LENGTH);
 801eac6:	210f      	movs	r1, #15
 801eac8:	4807      	ldr	r0, [pc, #28]	; (801eae8 <Sim7600_Wait_For_Get_Imei_Respone+0x48>)
 801eaca:	f000 fab5 	bl	801f038 <UART_DEBUG_Transmit_Size>
			}
			break;
 801eace:	e006      	b.n	801eade <Sim7600_Wait_For_Get_Imei_Respone+0x3e>
		case AT_ERROR:
			Clear_AT_Result();
 801ead0:	f001 fc0a 	bl	80202e8 <Clear_AT_Result>
			sim7600_state = SIM7600_MAX_STATE;
 801ead4:	4b03      	ldr	r3, [pc, #12]	; (801eae4 <Sim7600_Wait_For_Get_Imei_Respone+0x44>)
 801ead6:	220a      	movs	r2, #10
 801ead8:	701a      	strb	r2, [r3, #0]
		default:
			break;
 801eada:	bf00      	nop
 801eadc:	e000      	b.n	801eae0 <Sim7600_Wait_For_Get_Imei_Respone+0x40>
			break;
 801eade:	bf00      	nop
	}
}
 801eae0:	bf00      	nop
 801eae2:	bd80      	pop	{r7, pc}
 801eae4:	20000000 	.word	0x20000000
 801eae8:	2000122c 	.word	0x2000122c

0801eaec <SIM7600_Set_State>:
 * SIM7600_Set_State()
 * @param sim7600_state
 * @retval None
 * @brief This function set mqtt_state.
 */
void SIM7600_Set_State(Sim7600_State newState){
 801eaec:	b480      	push	{r7}
 801eaee:	b083      	sub	sp, #12
 801eaf0:	af00      	add	r7, sp, #0
 801eaf2:	4603      	mov	r3, r0
 801eaf4:	71fb      	strb	r3, [r7, #7]
	sim7600_state = newState;
 801eaf6:	4a04      	ldr	r2, [pc, #16]	; (801eb08 <SIM7600_Set_State+0x1c>)
 801eaf8:	79fb      	ldrb	r3, [r7, #7]
 801eafa:	7013      	strb	r3, [r2, #0]
}
 801eafc:	bf00      	nop
 801eafe:	370c      	adds	r7, #12
 801eb00:	46bd      	mov	sp, r7
 801eb02:	bc80      	pop	{r7}
 801eb04:	4770      	bx	lr
 801eb06:	bf00      	nop
 801eb08:	20000000 	.word	0x20000000

0801eb0c <Get_Imei>:





FlagStatus Get_Imei(){
 801eb0c:	b598      	push	{r3, r4, r7, lr}
 801eb0e:	af00      	add	r7, sp, #0
	if(imei_count == IMEI_LENGTH){
 801eb10:	4b0e      	ldr	r3, [pc, #56]	; (801eb4c <Get_Imei+0x40>)
 801eb12:	781b      	ldrb	r3, [r3, #0]
 801eb14:	2b0f      	cmp	r3, #15
 801eb16:	d104      	bne.n	801eb22 <Get_Imei+0x16>
		imei_count = 0;
 801eb18:	4b0c      	ldr	r3, [pc, #48]	; (801eb4c <Get_Imei+0x40>)
 801eb1a:	2200      	movs	r2, #0
 801eb1c:	701a      	strb	r2, [r3, #0]
		return SET;
 801eb1e:	2301      	movs	r3, #1
 801eb20:	e012      	b.n	801eb48 <Get_Imei+0x3c>
	}
	if(UART_SIM7600_Received_Buffer_Available()){
 801eb22:	f000 f9fd 	bl	801ef20 <UART_SIM7600_Received_Buffer_Available>
 801eb26:	4603      	mov	r3, r0
 801eb28:	2b00      	cmp	r3, #0
 801eb2a:	d00c      	beq.n	801eb46 <Get_Imei+0x3a>
		imei_buffer[imei_count++] = UART_SIM7600_Read_Received_Buffer();
 801eb2c:	4b07      	ldr	r3, [pc, #28]	; (801eb4c <Get_Imei+0x40>)
 801eb2e:	781b      	ldrb	r3, [r3, #0]
 801eb30:	1c5a      	adds	r2, r3, #1
 801eb32:	b2d1      	uxtb	r1, r2
 801eb34:	4a05      	ldr	r2, [pc, #20]	; (801eb4c <Get_Imei+0x40>)
 801eb36:	7011      	strb	r1, [r2, #0]
 801eb38:	461c      	mov	r4, r3
 801eb3a:	f000 fa07 	bl	801ef4c <UART_SIM7600_Read_Received_Buffer>
 801eb3e:	4603      	mov	r3, r0
 801eb40:	461a      	mov	r2, r3
 801eb42:	4b03      	ldr	r3, [pc, #12]	; (801eb50 <Get_Imei+0x44>)
 801eb44:	551a      	strb	r2, [r3, r4]
	}
	return RESET;
 801eb46:	2300      	movs	r3, #0
}
 801eb48:	4618      	mov	r0, r3
 801eb4a:	bd98      	pop	{r3, r4, r7, pc}
 801eb4c:	2000018c 	.word	0x2000018c
 801eb50:	2000122c 	.word	0x2000122c

0801eb54 <Reset_SimConfiguration_State>:

void Reset_SimConfiguration_State(){
 801eb54:	b580      	push	{r7, lr}
 801eb56:	af00      	add	r7, sp, #0
	SIM7600_Set_State(SIM7600_RESET);
 801eb58:	2002      	movs	r0, #2
 801eb5a:	f7ff ffc7 	bl	801eaec <SIM7600_Set_State>
}
 801eb5e:	bf00      	nop
 801eb60:	bd80      	pop	{r7, pc}
	...

0801eb64 <GPIO_Init>:
  * @brief 	GPIO Initialization Function: 74HC245, LED, Buzzer, SPI_CS, SwitchID, SIM7600_GPIO
  * @param 	None
  * @retval None
  */
void GPIO_Init(void)
{
 801eb64:	b580      	push	{r7, lr}
 801eb66:	b084      	sub	sp, #16
 801eb68:	af00      	add	r7, sp, #0
//	GPIO_InitTypeDef GPIO_InitStruct = {0};

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801eb6a:	4b1b      	ldr	r3, [pc, #108]	; (801ebd8 <GPIO_Init+0x74>)
 801eb6c:	699b      	ldr	r3, [r3, #24]
 801eb6e:	4a1a      	ldr	r2, [pc, #104]	; (801ebd8 <GPIO_Init+0x74>)
 801eb70:	f043 0310 	orr.w	r3, r3, #16
 801eb74:	6193      	str	r3, [r2, #24]
 801eb76:	4b18      	ldr	r3, [pc, #96]	; (801ebd8 <GPIO_Init+0x74>)
 801eb78:	699b      	ldr	r3, [r3, #24]
 801eb7a:	f003 0310 	and.w	r3, r3, #16
 801eb7e:	60fb      	str	r3, [r7, #12]
 801eb80:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 801eb82:	4b15      	ldr	r3, [pc, #84]	; (801ebd8 <GPIO_Init+0x74>)
 801eb84:	699b      	ldr	r3, [r3, #24]
 801eb86:	4a14      	ldr	r2, [pc, #80]	; (801ebd8 <GPIO_Init+0x74>)
 801eb88:	f043 0320 	orr.w	r3, r3, #32
 801eb8c:	6193      	str	r3, [r2, #24]
 801eb8e:	4b12      	ldr	r3, [pc, #72]	; (801ebd8 <GPIO_Init+0x74>)
 801eb90:	699b      	ldr	r3, [r3, #24]
 801eb92:	f003 0320 	and.w	r3, r3, #32
 801eb96:	60bb      	str	r3, [r7, #8]
 801eb98:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801eb9a:	4b0f      	ldr	r3, [pc, #60]	; (801ebd8 <GPIO_Init+0x74>)
 801eb9c:	699b      	ldr	r3, [r3, #24]
 801eb9e:	4a0e      	ldr	r2, [pc, #56]	; (801ebd8 <GPIO_Init+0x74>)
 801eba0:	f043 0304 	orr.w	r3, r3, #4
 801eba4:	6193      	str	r3, [r2, #24]
 801eba6:	4b0c      	ldr	r3, [pc, #48]	; (801ebd8 <GPIO_Init+0x74>)
 801eba8:	699b      	ldr	r3, [r3, #24]
 801ebaa:	f003 0304 	and.w	r3, r3, #4
 801ebae:	607b      	str	r3, [r7, #4]
 801ebb0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801ebb2:	4b09      	ldr	r3, [pc, #36]	; (801ebd8 <GPIO_Init+0x74>)
 801ebb4:	699b      	ldr	r3, [r3, #24]
 801ebb6:	4a08      	ldr	r2, [pc, #32]	; (801ebd8 <GPIO_Init+0x74>)
 801ebb8:	f043 0308 	orr.w	r3, r3, #8
 801ebbc:	6193      	str	r3, [r2, #24]
 801ebbe:	4b06      	ldr	r3, [pc, #24]	; (801ebd8 <GPIO_Init+0x74>)
 801ebc0:	699b      	ldr	r3, [r3, #24]
 801ebc2:	f003 0308 	and.w	r3, r3, #8
 801ebc6:	603b      	str	r3, [r7, #0]
 801ebc8:	683b      	ldr	r3, [r7, #0]
//	urgent_init();
//	LED_Init();
//	Buzzer_Init();
//	SPI_CS_Init();
//	Switch_Init();
	Sim7600_GPIO_Init();
 801ebca:	f000 f807 	bl	801ebdc <Sim7600_GPIO_Init>
//	Read_BoardID();
}
 801ebce:	bf00      	nop
 801ebd0:	3710      	adds	r7, #16
 801ebd2:	46bd      	mov	sp, r7
 801ebd4:	bd80      	pop	{r7, pc}
 801ebd6:	bf00      	nop
 801ebd8:	40021000 	.word	0x40021000

0801ebdc <Sim7600_GPIO_Init>:

	GPIO_InitStruct.Pin = BUZZER_PIN;
	HAL_GPIO_Init(BUZZER_PORT, &GPIO_InitStruct);
}

void Sim7600_GPIO_Init(void){
 801ebdc:	b580      	push	{r7, lr}
 801ebde:	b084      	sub	sp, #16
 801ebe0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 801ebe2:	463b      	mov	r3, r7
 801ebe4:	2200      	movs	r2, #0
 801ebe6:	601a      	str	r2, [r3, #0]
 801ebe8:	605a      	str	r2, [r3, #4]
 801ebea:	609a      	str	r2, [r3, #8]
 801ebec:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 801ebee:	2301      	movs	r3, #1
 801ebf0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull  = GPIO_PULLUP;
 801ebf2:	2301      	movs	r3, #1
 801ebf4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801ebf6:	2303      	movs	r3, #3
 801ebf8:	60fb      	str	r3, [r7, #12]

	GPIO_InitStruct.Pin = SIM7600_4G_PWRON;
 801ebfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 801ebfe:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(SIM7600_4G_PWRON_PORT, &GPIO_InitStruct);
 801ec00:	463b      	mov	r3, r7
 801ec02:	4619      	mov	r1, r3
 801ec04:	480d      	ldr	r0, [pc, #52]	; (801ec3c <Sim7600_GPIO_Init+0x60>)
 801ec06:	f002 fe27 	bl	8021858 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SIM7600_4G_PERST;
 801ec0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801ec0e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(SIM7600_4G_PERST_PORT, &GPIO_InitStruct);
 801ec10:	463b      	mov	r3, r7
 801ec12:	4619      	mov	r1, r3
 801ec14:	4809      	ldr	r0, [pc, #36]	; (801ec3c <Sim7600_GPIO_Init+0x60>)
 801ec16:	f002 fe1f 	bl	8021858 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(SIM7600_4G_PWRON_PORT, SIM7600_4G_PWRON, SET);
 801ec1a:	2201      	movs	r2, #1
 801ec1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 801ec20:	4806      	ldr	r0, [pc, #24]	; (801ec3c <Sim7600_GPIO_Init+0x60>)
 801ec22:	f002 ffad 	bl	8021b80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SIM7600_4G_PERST_PORT, SIM7600_4G_PERST, SET);
 801ec26:	2201      	movs	r2, #1
 801ec28:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ec2c:	4803      	ldr	r0, [pc, #12]	; (801ec3c <Sim7600_GPIO_Init+0x60>)
 801ec2e:	f002 ffa7 	bl	8021b80 <HAL_GPIO_WritePin>
}
 801ec32:	bf00      	nop
 801ec34:	3710      	adds	r7, #16
 801ec36:	46bd      	mov	sp, r7
 801ec38:	bd80      	pop	{r7, pc}
 801ec3a:	bf00      	nop
 801ec3c:	40011000 	.word	0x40011000

0801ec40 <I2C_Init>:
/**
  * @brief 	I2C peripheral initialization
  * @param 	None
  * @retval None
  */
HAL_StatusTypeDef I2C_Init(void){
 801ec40:	b580      	push	{r7, lr}
 801ec42:	af00      	add	r7, sp, #0
	/*##-1- Configure the I2C peripheral ######################################*/
	  I2cHandle.Instance             = I2C1;
 801ec44:	4b13      	ldr	r3, [pc, #76]	; (801ec94 <I2C_Init+0x54>)
 801ec46:	4a14      	ldr	r2, [pc, #80]	; (801ec98 <I2C_Init+0x58>)
 801ec48:	601a      	str	r2, [r3, #0]
	  I2cHandle.Init.ClockSpeed      = I2C_SPEEDCLOCK;
 801ec4a:	4b12      	ldr	r3, [pc, #72]	; (801ec94 <I2C_Init+0x54>)
 801ec4c:	4a13      	ldr	r2, [pc, #76]	; (801ec9c <I2C_Init+0x5c>)
 801ec4e:	605a      	str	r2, [r3, #4]
	  I2cHandle.Init.DutyCycle       = I2C_DUTYCYCLE;
 801ec50:	4b10      	ldr	r3, [pc, #64]	; (801ec94 <I2C_Init+0x54>)
 801ec52:	2200      	movs	r2, #0
 801ec54:	609a      	str	r2, [r3, #8]
	  I2cHandle.Init.OwnAddress1     = 0;//I2C_ADDRESS;
 801ec56:	4b0f      	ldr	r3, [pc, #60]	; (801ec94 <I2C_Init+0x54>)
 801ec58:	2200      	movs	r2, #0
 801ec5a:	60da      	str	r2, [r3, #12]
	  I2cHandle.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 801ec5c:	4b0d      	ldr	r3, [pc, #52]	; (801ec94 <I2C_Init+0x54>)
 801ec5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801ec62:	611a      	str	r2, [r3, #16]
	  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801ec64:	4b0b      	ldr	r3, [pc, #44]	; (801ec94 <I2C_Init+0x54>)
 801ec66:	2200      	movs	r2, #0
 801ec68:	615a      	str	r2, [r3, #20]
	  I2cHandle.Init.OwnAddress2     = 0;//0xFF;
 801ec6a:	4b0a      	ldr	r3, [pc, #40]	; (801ec94 <I2C_Init+0x54>)
 801ec6c:	2200      	movs	r2, #0
 801ec6e:	619a      	str	r2, [r3, #24]
	  I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801ec70:	4b08      	ldr	r3, [pc, #32]	; (801ec94 <I2C_Init+0x54>)
 801ec72:	2200      	movs	r2, #0
 801ec74:	61da      	str	r2, [r3, #28]
	  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 801ec76:	4b07      	ldr	r3, [pc, #28]	; (801ec94 <I2C_Init+0x54>)
 801ec78:	2200      	movs	r2, #0
 801ec7a:	621a      	str	r2, [r3, #32]

	  if(HAL_I2C_Init(&I2cHandle) != HAL_OK)
 801ec7c:	4805      	ldr	r0, [pc, #20]	; (801ec94 <I2C_Init+0x54>)
 801ec7e:	f002 ff97 	bl	8021bb0 <HAL_I2C_Init>
 801ec82:	4603      	mov	r3, r0
 801ec84:	2b00      	cmp	r3, #0
 801ec86:	d001      	beq.n	801ec8c <I2C_Init+0x4c>
	  {
	    /* Initialization Error */
		  return HAL_ERROR;
 801ec88:	2301      	movs	r3, #1
 801ec8a:	e000      	b.n	801ec8e <I2C_Init+0x4e>
	    Error_Handler();
	  }
	  return HAL_OK;
 801ec8c:	2300      	movs	r3, #0
}
 801ec8e:	4618      	mov	r0, r3
 801ec90:	bd80      	pop	{r7, pc}
 801ec92:	bf00      	nop
 801ec94:	2000123c 	.word	0x2000123c
 801ec98:	40005400 	.word	0x40005400
 801ec9c:	00061a80 	.word	0x00061a80

0801eca0 <SPI2_Init>:





HAL_StatusTypeDef SPI2_Init(void){
 801eca0:	b580      	push	{r7, lr}
 801eca2:	af00      	add	r7, sp, #0
	/*##-1- Configure the SPI peripheral #######################################*/
		  /* Set the SPI parameters */
		  Spi2Handle.Instance               = SPI2;
 801eca4:	4b1d      	ldr	r3, [pc, #116]	; (801ed1c <SPI2_Init+0x7c>)
 801eca6:	4a1e      	ldr	r2, [pc, #120]	; (801ed20 <SPI2_Init+0x80>)
 801eca8:	601a      	str	r2, [r3, #0]
		  Spi2Handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 801ecaa:	4b1c      	ldr	r3, [pc, #112]	; (801ed1c <SPI2_Init+0x7c>)
 801ecac:	2228      	movs	r2, #40	; 0x28
 801ecae:	61da      	str	r2, [r3, #28]
		  Spi2Handle.Init.Direction         = SPI_DIRECTION_2LINES;
 801ecb0:	4b1a      	ldr	r3, [pc, #104]	; (801ed1c <SPI2_Init+0x7c>)
 801ecb2:	2200      	movs	r2, #0
 801ecb4:	609a      	str	r2, [r3, #8]
		  Spi2Handle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 801ecb6:	4b19      	ldr	r3, [pc, #100]	; (801ed1c <SPI2_Init+0x7c>)
 801ecb8:	2200      	movs	r2, #0
 801ecba:	615a      	str	r2, [r3, #20]
		  Spi2Handle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 801ecbc:	4b17      	ldr	r3, [pc, #92]	; (801ed1c <SPI2_Init+0x7c>)
 801ecbe:	2200      	movs	r2, #0
 801ecc0:	611a      	str	r2, [r3, #16]
		  Spi2Handle.Init.DataSize          = SPI_DATASIZE_8BIT;
 801ecc2:	4b16      	ldr	r3, [pc, #88]	; (801ed1c <SPI2_Init+0x7c>)
 801ecc4:	2200      	movs	r2, #0
 801ecc6:	60da      	str	r2, [r3, #12]
		  Spi2Handle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 801ecc8:	4b14      	ldr	r3, [pc, #80]	; (801ed1c <SPI2_Init+0x7c>)
 801ecca:	2200      	movs	r2, #0
 801eccc:	621a      	str	r2, [r3, #32]
		  Spi2Handle.Init.TIMode            = SPI_TIMODE_DISABLE;
 801ecce:	4b13      	ldr	r3, [pc, #76]	; (801ed1c <SPI2_Init+0x7c>)
 801ecd0:	2200      	movs	r2, #0
 801ecd2:	625a      	str	r2, [r3, #36]	; 0x24
		  Spi2Handle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 801ecd4:	4b11      	ldr	r3, [pc, #68]	; (801ed1c <SPI2_Init+0x7c>)
 801ecd6:	2200      	movs	r2, #0
 801ecd8:	629a      	str	r2, [r3, #40]	; 0x28
		  Spi2Handle.Init.CRCPolynomial     = 7;
 801ecda:	4b10      	ldr	r3, [pc, #64]	; (801ed1c <SPI2_Init+0x7c>)
 801ecdc:	2207      	movs	r2, #7
 801ecde:	62da      	str	r2, [r3, #44]	; 0x2c
//		  Spi2Handle.Init.NSS               = SPI_NSS_SOFT;
		  Spi2Handle.Init.NSS               = SPI_NSS_HARD_OUTPUT;
 801ece0:	4b0e      	ldr	r3, [pc, #56]	; (801ed1c <SPI2_Init+0x7c>)
 801ece2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801ece6:	619a      	str	r2, [r3, #24]
		  Spi2Handle.Init.Mode = SPI_MODE_MASTER;
 801ece8:	4b0c      	ldr	r3, [pc, #48]	; (801ed1c <SPI2_Init+0x7c>)
 801ecea:	f44f 7282 	mov.w	r2, #260	; 0x104
 801ecee:	605a      	str	r2, [r3, #4]

		  if(HAL_SPI_Init(&Spi2Handle) != HAL_OK)
 801ecf0:	480a      	ldr	r0, [pc, #40]	; (801ed1c <SPI2_Init+0x7c>)
 801ecf2:	f003 ffc1 	bl	8022c78 <HAL_SPI_Init>
 801ecf6:	4603      	mov	r3, r0
 801ecf8:	2b00      	cmp	r3, #0
 801ecfa:	d003      	beq.n	801ed04 <SPI2_Init+0x64>
		  {
		    /* Initialization Error */
		    Error_Handler();
 801ecfc:	f001 ff50 	bl	8020ba0 <Error_Handler>
		    return HAL_ERROR;
 801ed00:	2301      	movs	r3, #1
 801ed02:	e008      	b.n	801ed16 <SPI2_Init+0x76>
		  }
		  /* SPI block is enabled prior calling SPI transmit/receive functions, in order to get CLK signal properly pulled down.
		     Otherwise, SPI CLK signal is not clean on this board and leads to errors during transfer */
		  __HAL_SPI_ENABLE(&Spi2Handle);
 801ed04:	4b05      	ldr	r3, [pc, #20]	; (801ed1c <SPI2_Init+0x7c>)
 801ed06:	681b      	ldr	r3, [r3, #0]
 801ed08:	681a      	ldr	r2, [r3, #0]
 801ed0a:	4b04      	ldr	r3, [pc, #16]	; (801ed1c <SPI2_Init+0x7c>)
 801ed0c:	681b      	ldr	r3, [r3, #0]
 801ed0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801ed12:	601a      	str	r2, [r3, #0]
		  return HAL_OK;
 801ed14:	2300      	movs	r3, #0
}
 801ed16:	4618      	mov	r0, r3
 801ed18:	bd80      	pop	{r7, pc}
 801ed1a:	bf00      	nop
 801ed1c:	20001290 	.word	0x20001290
 801ed20:	40003800 	.word	0x40003800

0801ed24 <ResetChipSelect>:

void ResetChipSelect(void){
 801ed24:	b580      	push	{r7, lr}
 801ed26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_PORT,SPI2_NSS_PIN, GPIO_PIN_RESET);
 801ed28:	2200      	movs	r2, #0
 801ed2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801ed2e:	4802      	ldr	r0, [pc, #8]	; (801ed38 <ResetChipSelect+0x14>)
 801ed30:	f002 ff26 	bl	8021b80 <HAL_GPIO_WritePin>
}
 801ed34:	bf00      	nop
 801ed36:	bd80      	pop	{r7, pc}
 801ed38:	40010c00 	.word	0x40010c00

0801ed3c <SetChipSelect>:

void SetChipSelect(void){
 801ed3c:	b580      	push	{r7, lr}
 801ed3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_PORT,SPI2_NSS_PIN, GPIO_PIN_SET);
 801ed40:	2201      	movs	r2, #1
 801ed42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801ed46:	4802      	ldr	r0, [pc, #8]	; (801ed50 <SetChipSelect+0x14>)
 801ed48:	f002 ff1a 	bl	8021b80 <HAL_GPIO_WritePin>
}
 801ed4c:	bf00      	nop
 801ed4e:	bd80      	pop	{r7, pc}
 801ed50:	40010c00 	.word	0x40010c00

0801ed54 <SystemClock_Config>:
 * @author thodo
 */
#include <Peripheral/app_system_clock_config.h>

HAL_StatusTypeDef SystemClock_Config(void)
{
 801ed54:	b580      	push	{r7, lr}
 801ed56:	b090      	sub	sp, #64	; 0x40
 801ed58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801ed5a:	f107 0318 	add.w	r3, r7, #24
 801ed5e:	2228      	movs	r2, #40	; 0x28
 801ed60:	2100      	movs	r1, #0
 801ed62:	4618      	mov	r0, r3
 801ed64:	f005 f9f4 	bl	8024150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801ed68:	1d3b      	adds	r3, r7, #4
 801ed6a:	2200      	movs	r2, #0
 801ed6c:	601a      	str	r2, [r3, #0]
 801ed6e:	605a      	str	r2, [r3, #4]
 801ed70:	609a      	str	r2, [r3, #8]
 801ed72:	60da      	str	r2, [r3, #12]
 801ed74:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 801ed76:	230a      	movs	r3, #10
 801ed78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801ed7a:	2301      	movs	r3, #1
 801ed7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 801ed7e:	2310      	movs	r3, #16
 801ed80:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 801ed82:	2301      	movs	r3, #1
 801ed84:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801ed86:	2302      	movs	r3, #2
 801ed88:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 801ed8a:	2300      	movs	r3, #0
 801ed8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 801ed8e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 801ed92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801ed94:	f107 0318 	add.w	r3, r7, #24
 801ed98:	4618      	mov	r0, r3
 801ed9a:	f003 fb53 	bl	8022444 <HAL_RCC_OscConfig>
 801ed9e:	4603      	mov	r3, r0
 801eda0:	2b00      	cmp	r3, #0
 801eda2:	d001      	beq.n	801eda8 <SystemClock_Config+0x54>
  {
	  return HAL_ERROR;
 801eda4:	2301      	movs	r3, #1
 801eda6:	e017      	b.n	801edd8 <SystemClock_Config+0x84>
	  Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801eda8:	230f      	movs	r3, #15
 801edaa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801edac:	2302      	movs	r3, #2
 801edae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801edb0:	2300      	movs	r3, #0
 801edb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 801edb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801edb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801edba:	2300      	movs	r3, #0
 801edbc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 801edbe:	1d3b      	adds	r3, r7, #4
 801edc0:	2102      	movs	r1, #2
 801edc2:	4618      	mov	r0, r3
 801edc4:	f003 fdbe 	bl	8022944 <HAL_RCC_ClockConfig>
 801edc8:	4603      	mov	r3, r0
 801edca:	2b00      	cmp	r3, #0
 801edcc:	d003      	beq.n	801edd6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 801edce:	f001 fee7 	bl	8020ba0 <Error_Handler>
    return HAL_ERROR;
 801edd2:	2301      	movs	r3, #1
 801edd4:	e000      	b.n	801edd8 <SystemClock_Config+0x84>
  }
  return HAL_OK;
 801edd6:	2300      	movs	r3, #0
}
 801edd8:	4618      	mov	r0, r3
 801edda:	3740      	adds	r7, #64	; 0x40
 801eddc:	46bd      	mov	sp, r7
 801edde:	bd80      	pop	{r7, pc}

0801ede0 <Timer_Init>:

/* Prescaler declaration */
uint32_t uwPrescalerValue = 0;


HAL_StatusTypeDef Timer_Init(void){
 801ede0:	b580      	push	{r7, lr}
 801ede2:	af00      	add	r7, sp, #0
	      2) by calling HAL API function HAL_RCC_GetSysClockFreq()
	      3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
	  ----------------------------------------------------------------------- */

	  /* Compute the prescaler value to have TIMx counter clock equal to 10000 Hz */
	  uwPrescalerValue = (uint32_t)(SystemCoreClock / 10000) - 1;
 801ede4:	4b18      	ldr	r3, [pc, #96]	; (801ee48 <Timer_Init+0x68>)
 801ede6:	681b      	ldr	r3, [r3, #0]
 801ede8:	4a18      	ldr	r2, [pc, #96]	; (801ee4c <Timer_Init+0x6c>)
 801edea:	fba2 2303 	umull	r2, r3, r2, r3
 801edee:	0b5b      	lsrs	r3, r3, #13
 801edf0:	3b01      	subs	r3, #1
 801edf2:	4a17      	ldr	r2, [pc, #92]	; (801ee50 <Timer_Init+0x70>)
 801edf4:	6013      	str	r3, [r2, #0]

	  /* Set TIMx instance */
	  htim3.Instance = TIM3;
 801edf6:	4b17      	ldr	r3, [pc, #92]	; (801ee54 <Timer_Init+0x74>)
 801edf8:	4a17      	ldr	r2, [pc, #92]	; (801ee58 <Timer_Init+0x78>)
 801edfa:	601a      	str	r2, [r3, #0]
	       + Period = 10000 - 1
	       + Prescaler = (SystemCoreClock/10000) - 1
	       + ClockDivision = 0
	       + Counter direction = Up
	  */
	  htim3.Init.Period            = TIMER_CYCLE*10-1;
 801edfc:	4b15      	ldr	r3, [pc, #84]	; (801ee54 <Timer_Init+0x74>)
 801edfe:	2263      	movs	r2, #99	; 0x63
 801ee00:	60da      	str	r2, [r3, #12]
	  htim3.Init.Prescaler         = uwPrescalerValue;
 801ee02:	4b13      	ldr	r3, [pc, #76]	; (801ee50 <Timer_Init+0x70>)
 801ee04:	681b      	ldr	r3, [r3, #0]
 801ee06:	4a13      	ldr	r2, [pc, #76]	; (801ee54 <Timer_Init+0x74>)
 801ee08:	6053      	str	r3, [r2, #4]
	  htim3.Init.ClockDivision     = 0;
 801ee0a:	4b12      	ldr	r3, [pc, #72]	; (801ee54 <Timer_Init+0x74>)
 801ee0c:	2200      	movs	r2, #0
 801ee0e:	611a      	str	r2, [r3, #16]
	  htim3.Init.CounterMode       = TIM_COUNTERMODE_UP;
 801ee10:	4b10      	ldr	r3, [pc, #64]	; (801ee54 <Timer_Init+0x74>)
 801ee12:	2200      	movs	r2, #0
 801ee14:	609a      	str	r2, [r3, #8]
	  htim3.Init.RepetitionCounter = 0;
 801ee16:	4b0f      	ldr	r3, [pc, #60]	; (801ee54 <Timer_Init+0x74>)
 801ee18:	2200      	movs	r2, #0
 801ee1a:	615a      	str	r2, [r3, #20]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801ee1c:	4b0d      	ldr	r3, [pc, #52]	; (801ee54 <Timer_Init+0x74>)
 801ee1e:	2200      	movs	r2, #0
 801ee20:	619a      	str	r2, [r3, #24]

	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 801ee22:	480c      	ldr	r0, [pc, #48]	; (801ee54 <Timer_Init+0x74>)
 801ee24:	f004 f98e 	bl	8023144 <HAL_TIM_Base_Init>
 801ee28:	4603      	mov	r3, r0
 801ee2a:	2b00      	cmp	r3, #0
 801ee2c:	d001      	beq.n	801ee32 <Timer_Init+0x52>
	  {
	    /* Initialization Error */
		  return HAL_ERROR;
 801ee2e:	2301      	movs	r3, #1
 801ee30:	e008      	b.n	801ee44 <Timer_Init+0x64>
	    Error_Handler();
	  }

	  /*##-2- Start the TIM Base generation in interrupt mode ####################*/
	  /* Start Channel1 */
	  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 801ee32:	4808      	ldr	r0, [pc, #32]	; (801ee54 <Timer_Init+0x74>)
 801ee34:	f004 f9d6 	bl	80231e4 <HAL_TIM_Base_Start_IT>
 801ee38:	4603      	mov	r3, r0
 801ee3a:	2b00      	cmp	r3, #0
 801ee3c:	d001      	beq.n	801ee42 <Timer_Init+0x62>
	  {
	    /* Starting Error */
		  return HAL_ERROR;
 801ee3e:	2301      	movs	r3, #1
 801ee40:	e000      	b.n	801ee44 <Timer_Init+0x64>
	    Error_Handler();
	  }
	  return HAL_OK;
 801ee42:	2300      	movs	r3, #0
}
 801ee44:	4618      	mov	r0, r3
 801ee46:	bd80      	pop	{r7, pc}
 801ee48:	200000fc 	.word	0x200000fc
 801ee4c:	d1b71759 	.word	0xd1b71759
 801ee50:	20000190 	.word	0x20000190
 801ee54:	200012f4 	.word	0x200012f4
 801ee58:	40000400 	.word	0x40000400

0801ee5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801ee5c:	b580      	push	{r7, lr}
 801ee5e:	b082      	sub	sp, #8
 801ee60:	af00      	add	r7, sp, #0
 801ee62:	6078      	str	r0, [r7, #4]
	SCH_Update();
 801ee64:	f001 fa64 	bl	8020330 <SCH_Update>
}
 801ee68:	bf00      	nop
 801ee6a:	3708      	adds	r7, #8
 801ee6c:	46bd      	mov	sp, r7
 801ee6e:	bd80      	pop	{r7, pc}

0801ee70 <UART_SIM7600_Init>:
  * @brief USART SIMCOM7600 Initialization Function
  * @param None
  * @retval None
  */
HAL_StatusTypeDef UART_SIM7600_Init(void)
{
 801ee70:	b580      	push	{r7, lr}
 801ee72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 801ee74:	4b12      	ldr	r3, [pc, #72]	; (801eec0 <UART_SIM7600_Init+0x50>)
 801ee76:	4a13      	ldr	r2, [pc, #76]	; (801eec4 <UART_SIM7600_Init+0x54>)
 801ee78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 801ee7a:	4b11      	ldr	r3, [pc, #68]	; (801eec0 <UART_SIM7600_Init+0x50>)
 801ee7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801ee80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801ee82:	4b0f      	ldr	r3, [pc, #60]	; (801eec0 <UART_SIM7600_Init+0x50>)
 801ee84:	2200      	movs	r2, #0
 801ee86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 801ee88:	4b0d      	ldr	r3, [pc, #52]	; (801eec0 <UART_SIM7600_Init+0x50>)
 801ee8a:	2200      	movs	r2, #0
 801ee8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801ee8e:	4b0c      	ldr	r3, [pc, #48]	; (801eec0 <UART_SIM7600_Init+0x50>)
 801ee90:	2200      	movs	r2, #0
 801ee92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 801ee94:	4b0a      	ldr	r3, [pc, #40]	; (801eec0 <UART_SIM7600_Init+0x50>)
 801ee96:	220c      	movs	r2, #12
 801ee98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801ee9a:	4b09      	ldr	r3, [pc, #36]	; (801eec0 <UART_SIM7600_Init+0x50>)
 801ee9c:	2200      	movs	r2, #0
 801ee9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801eea0:	4b07      	ldr	r3, [pc, #28]	; (801eec0 <UART_SIM7600_Init+0x50>)
 801eea2:	2200      	movs	r2, #0
 801eea4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801eea6:	4806      	ldr	r0, [pc, #24]	; (801eec0 <UART_SIM7600_Init+0x50>)
 801eea8:	f004 fbb4 	bl	8023614 <HAL_UART_Init>
 801eeac:	4603      	mov	r3, r0
 801eeae:	2b00      	cmp	r3, #0
 801eeb0:	d001      	beq.n	801eeb6 <UART_SIM7600_Init+0x46>
  {
	  return HAL_ERROR;
 801eeb2:	2301      	movs	r3, #1
 801eeb4:	e002      	b.n	801eebc <UART_SIM7600_Init+0x4c>
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */
  Start_Receive_IT();
 801eeb6:	f000 f8d7 	bl	801f068 <Start_Receive_IT>
  /* USER CODE END USART1_Init 2 */
  return HAL_OK;
 801eeba:	2300      	movs	r3, #0
}
 801eebc:	4618      	mov	r0, r3
 801eebe:	bd80      	pop	{r7, pc}
 801eec0:	20002384 	.word	0x20002384
 801eec4:	40013800 	.word	0x40013800

0801eec8 <UART_SIM7600_Transmit>:
/**
  * @brief UART_SIM7600_Transmit Initialization Function
  * @param None
  * @retval None
  */
void UART_SIM7600_Transmit(uint8_t *buffer){
 801eec8:	b580      	push	{r7, lr}
 801eeca:	b084      	sub	sp, #16
 801eecc:	af00      	add	r7, sp, #0
 801eece:	6078      	str	r0, [r7, #4]
	uint16_t tmpLen = strlen((char*)buffer);
 801eed0:	6878      	ldr	r0, [r7, #4]
 801eed2:	f7ff f9a7 	bl	801e224 <strlen>
 801eed6:	4603      	mov	r3, r0
 801eed8:	81fb      	strh	r3, [r7, #14]
	if(tmpLen == 0) {
 801eeda:	89fb      	ldrh	r3, [r7, #14]
 801eedc:	2b00      	cmp	r3, #0
 801eede:	d017      	beq.n	801ef10 <UART_SIM7600_Transmit+0x48>
		return;
	} else {
#ifdef DEBUG
		LOG(buffer);
 801eee0:	6878      	ldr	r0, [r7, #4]
 801eee2:	f000 f88b 	bl	801effc <UART_DEBUG_Transmit>
//		if (DEBUG){
////			while(!UartTransmitReady);
//			UART_DEBUG_Transmit(buffer);
//		}
		//TODO: never do while in state machine
		while(!UartTransmitReady);
 801eee6:	bf00      	nop
 801eee8:	4b0b      	ldr	r3, [pc, #44]	; (801ef18 <UART_SIM7600_Transmit+0x50>)
 801eeea:	781b      	ldrb	r3, [r3, #0]
 801eeec:	b2db      	uxtb	r3, r3
 801eeee:	2b00      	cmp	r3, #0
 801eef0:	d0fa      	beq.n	801eee8 <UART_SIM7600_Transmit+0x20>
		if(HAL_UART_Transmit_IT(&huart1, buffer, tmpLen)!= HAL_OK){
 801eef2:	89fb      	ldrh	r3, [r7, #14]
 801eef4:	461a      	mov	r2, r3
 801eef6:	6879      	ldr	r1, [r7, #4]
 801eef8:	4808      	ldr	r0, [pc, #32]	; (801ef1c <UART_SIM7600_Transmit+0x54>)
 801eefa:	f004 fc6a 	bl	80237d2 <HAL_UART_Transmit_IT>
 801eefe:	4603      	mov	r3, r0
 801ef00:	2b00      	cmp	r3, #0
 801ef02:	d001      	beq.n	801ef08 <UART_SIM7600_Transmit+0x40>
			Error_Handler();
 801ef04:	f001 fe4c 	bl	8020ba0 <Error_Handler>
		}
		UartTransmitReady = RESET;
 801ef08:	4b03      	ldr	r3, [pc, #12]	; (801ef18 <UART_SIM7600_Transmit+0x50>)
 801ef0a:	2200      	movs	r2, #0
 801ef0c:	701a      	strb	r2, [r3, #0]
	}
	return;
 801ef0e:	e000      	b.n	801ef12 <UART_SIM7600_Transmit+0x4a>
		return;
 801ef10:	bf00      	nop
}
 801ef12:	3710      	adds	r7, #16
 801ef14:	46bd      	mov	sp, r7
 801ef16:	bd80      	pop	{r7, pc}
 801ef18:	20000078 	.word	0x20000078
 801ef1c:	20002384 	.word	0x20002384

0801ef20 <UART_SIM7600_Received_Buffer_Available>:
  * @brief UART_SIM7600_Received_Buffer_Available Initialization Function
  * @param None
  * @param None
  * @retval None
  */
uint8_t UART_SIM7600_Received_Buffer_Available(void){
 801ef20:	b480      	push	{r7}
 801ef22:	af00      	add	r7, sp, #0
	if(receiveBufferIndexTail != receiveBufferIndexHead){
 801ef24:	4b07      	ldr	r3, [pc, #28]	; (801ef44 <UART_SIM7600_Received_Buffer_Available+0x24>)
 801ef26:	881b      	ldrh	r3, [r3, #0]
 801ef28:	b29a      	uxth	r2, r3
 801ef2a:	4b07      	ldr	r3, [pc, #28]	; (801ef48 <UART_SIM7600_Received_Buffer_Available+0x28>)
 801ef2c:	881b      	ldrh	r3, [r3, #0]
 801ef2e:	b29b      	uxth	r3, r3
 801ef30:	429a      	cmp	r2, r3
 801ef32:	d001      	beq.n	801ef38 <UART_SIM7600_Received_Buffer_Available+0x18>
		return 1;
 801ef34:	2301      	movs	r3, #1
 801ef36:	e000      	b.n	801ef3a <UART_SIM7600_Received_Buffer_Available+0x1a>
	} else {
		return 0;
 801ef38:	2300      	movs	r3, #0
	}
}
 801ef3a:	4618      	mov	r0, r3
 801ef3c:	46bd      	mov	sp, r7
 801ef3e:	bc80      	pop	{r7}
 801ef40:	4770      	bx	lr
 801ef42:	bf00      	nop
 801ef44:	20000196 	.word	0x20000196
 801ef48:	20000194 	.word	0x20000194

0801ef4c <UART_SIM7600_Read_Received_Buffer>:
  * @param None
  * @param None
  * @retval ch character at Tail index of buffer and Tail will increase 1
  */
char log[10];
uint8_t UART_SIM7600_Read_Received_Buffer(void){
 801ef4c:	b480      	push	{r7}
 801ef4e:	b083      	sub	sp, #12
 801ef50:	af00      	add	r7, sp, #0
	if(receiveBufferIndexTail == receiveBufferIndexHead) return 0xff;
 801ef52:	4b12      	ldr	r3, [pc, #72]	; (801ef9c <UART_SIM7600_Read_Received_Buffer+0x50>)
 801ef54:	881b      	ldrh	r3, [r3, #0]
 801ef56:	b29a      	uxth	r2, r3
 801ef58:	4b11      	ldr	r3, [pc, #68]	; (801efa0 <UART_SIM7600_Read_Received_Buffer+0x54>)
 801ef5a:	881b      	ldrh	r3, [r3, #0]
 801ef5c:	b29b      	uxth	r3, r3
 801ef5e:	429a      	cmp	r2, r3
 801ef60:	d101      	bne.n	801ef66 <UART_SIM7600_Read_Received_Buffer+0x1a>
 801ef62:	23ff      	movs	r3, #255	; 0xff
 801ef64:	e015      	b.n	801ef92 <UART_SIM7600_Read_Received_Buffer+0x46>
	uint8_t ch = aUART_RxBuffer[receiveBufferIndexTail];
 801ef66:	4b0d      	ldr	r3, [pc, #52]	; (801ef9c <UART_SIM7600_Read_Received_Buffer+0x50>)
 801ef68:	881b      	ldrh	r3, [r3, #0]
 801ef6a:	b29b      	uxth	r3, r3
 801ef6c:	461a      	mov	r2, r3
 801ef6e:	4b0d      	ldr	r3, [pc, #52]	; (801efa4 <UART_SIM7600_Read_Received_Buffer+0x58>)
 801ef70:	5c9b      	ldrb	r3, [r3, r2]
 801ef72:	71fb      	strb	r3, [r7, #7]
	receiveBufferIndexTail = (receiveBufferIndexTail + 1) % UART_RX_BUFFERSIZE;
 801ef74:	4b09      	ldr	r3, [pc, #36]	; (801ef9c <UART_SIM7600_Read_Received_Buffer+0x50>)
 801ef76:	881b      	ldrh	r3, [r3, #0]
 801ef78:	b29b      	uxth	r3, r3
 801ef7a:	3301      	adds	r3, #1
 801ef7c:	425a      	negs	r2, r3
 801ef7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ef82:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801ef86:	bf58      	it	pl
 801ef88:	4253      	negpl	r3, r2
 801ef8a:	b29a      	uxth	r2, r3
 801ef8c:	4b03      	ldr	r3, [pc, #12]	; (801ef9c <UART_SIM7600_Read_Received_Buffer+0x50>)
 801ef8e:	801a      	strh	r2, [r3, #0]
//	sprintf(log,"%d\r\n",receiveBufferIndexTail,receiveBufferIndexHead);
//	LOG("1111");
	return ch;
 801ef90:	79fb      	ldrb	r3, [r7, #7]
}
 801ef92:	4618      	mov	r0, r3
 801ef94:	370c      	adds	r7, #12
 801ef96:	46bd      	mov	sp, r7
 801ef98:	bc80      	pop	{r7}
 801ef9a:	4770      	bx	lr
 801ef9c:	20000196 	.word	0x20000196
 801efa0:	20000194 	.word	0x20000194
 801efa4:	20001384 	.word	0x20001384

0801efa8 <UART_DEBUG_Init>:
  * @brief UART_DEBUG_Init Initialization Function
  * @param None
  * @retval None
  */
HAL_StatusTypeDef UART_DEBUG_Init(void)
{
 801efa8:	b580      	push	{r7, lr}
 801efaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 801efac:	4b11      	ldr	r3, [pc, #68]	; (801eff4 <UART_DEBUG_Init+0x4c>)
 801efae:	4a12      	ldr	r2, [pc, #72]	; (801eff8 <UART_DEBUG_Init+0x50>)
 801efb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 801efb2:	4b10      	ldr	r3, [pc, #64]	; (801eff4 <UART_DEBUG_Init+0x4c>)
 801efb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801efb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 801efba:	4b0e      	ldr	r3, [pc, #56]	; (801eff4 <UART_DEBUG_Init+0x4c>)
 801efbc:	2200      	movs	r2, #0
 801efbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 801efc0:	4b0c      	ldr	r3, [pc, #48]	; (801eff4 <UART_DEBUG_Init+0x4c>)
 801efc2:	2200      	movs	r2, #0
 801efc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 801efc6:	4b0b      	ldr	r3, [pc, #44]	; (801eff4 <UART_DEBUG_Init+0x4c>)
 801efc8:	2200      	movs	r2, #0
 801efca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 801efcc:	4b09      	ldr	r3, [pc, #36]	; (801eff4 <UART_DEBUG_Init+0x4c>)
 801efce:	220c      	movs	r2, #12
 801efd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801efd2:	4b08      	ldr	r3, [pc, #32]	; (801eff4 <UART_DEBUG_Init+0x4c>)
 801efd4:	2200      	movs	r2, #0
 801efd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 801efd8:	4b06      	ldr	r3, [pc, #24]	; (801eff4 <UART_DEBUG_Init+0x4c>)
 801efda:	2200      	movs	r2, #0
 801efdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 801efde:	4805      	ldr	r0, [pc, #20]	; (801eff4 <UART_DEBUG_Init+0x4c>)
 801efe0:	f004 fb18 	bl	8023614 <HAL_UART_Init>
 801efe4:	4603      	mov	r3, r0
 801efe6:	2b00      	cmp	r3, #0
 801efe8:	d001      	beq.n	801efee <UART_DEBUG_Init+0x46>
  {
	  return HAL_ERROR;
 801efea:	2301      	movs	r3, #1
 801efec:	e000      	b.n	801eff0 <UART_DEBUG_Init+0x48>
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
  return HAL_OK;
 801efee:	2300      	movs	r3, #0
}
 801eff0:	4618      	mov	r0, r3
 801eff2:	bd80      	pop	{r7, pc}
 801eff4:	2000133c 	.word	0x2000133c
 801eff8:	40004800 	.word	0x40004800

0801effc <UART_DEBUG_Transmit>:
/**
  * @brief USART Transmit Initialization Function
  * @param buffer buffer to transmit via UART DEBUG without known size, it will use strlen(buffer) to get size.
  * @retval None
  */
void UART_DEBUG_Transmit(uint8_t *buffer){
 801effc:	b580      	push	{r7, lr}
 801effe:	b084      	sub	sp, #16
 801f000:	af00      	add	r7, sp, #0
 801f002:	6078      	str	r0, [r7, #4]
	uint16_t tmpLen = strlen((char*)buffer);
 801f004:	6878      	ldr	r0, [r7, #4]
 801f006:	f7ff f90d 	bl	801e224 <strlen>
 801f00a:	4603      	mov	r3, r0
 801f00c:	81fb      	strh	r3, [r7, #14]
	if(tmpLen == 0){
 801f00e:	89fb      	ldrh	r3, [r7, #14]
 801f010:	2b00      	cmp	r3, #0
 801f012:	d00b      	beq.n	801f02c <UART_DEBUG_Transmit+0x30>
		return;
	}
	if(HAL_UART_Transmit(&huart3, (uint8_t*)buffer, tmpLen ,0xFF)!= HAL_OK){
 801f014:	89fa      	ldrh	r2, [r7, #14]
 801f016:	23ff      	movs	r3, #255	; 0xff
 801f018:	6879      	ldr	r1, [r7, #4]
 801f01a:	4806      	ldr	r0, [pc, #24]	; (801f034 <UART_DEBUG_Transmit+0x38>)
 801f01c:	f004 fb47 	bl	80236ae <HAL_UART_Transmit>
 801f020:	4603      	mov	r3, r0
 801f022:	2b00      	cmp	r3, #0
 801f024:	d003      	beq.n	801f02e <UART_DEBUG_Transmit+0x32>
		Error_Handler();
 801f026:	f001 fdbb 	bl	8020ba0 <Error_Handler>
 801f02a:	e000      	b.n	801f02e <UART_DEBUG_Transmit+0x32>
		return;
 801f02c:	bf00      	nop
	}
//	UartTransmitReady = RESET;
}
 801f02e:	3710      	adds	r7, #16
 801f030:	46bd      	mov	sp, r7
 801f032:	bd80      	pop	{r7, pc}
 801f034:	2000133c 	.word	0x2000133c

0801f038 <UART_DEBUG_Transmit_Size>:
  * @brief UART_DEBUG_Transmit_Size Initialization Function
  * @param buffer: buffer contain data for transmit
  * @param buffer_size: size of data to transmit
  * @retval None
  */
void UART_DEBUG_Transmit_Size(uint8_t *buffer ,uint16_t buffer_size){
 801f038:	b580      	push	{r7, lr}
 801f03a:	b082      	sub	sp, #8
 801f03c:	af00      	add	r7, sp, #0
 801f03e:	6078      	str	r0, [r7, #4]
 801f040:	460b      	mov	r3, r1
 801f042:	807b      	strh	r3, [r7, #2]
	if(HAL_UART_Transmit(&huart3, (uint8_t*)buffer, buffer_size,200)!= HAL_OK){
 801f044:	887a      	ldrh	r2, [r7, #2]
 801f046:	23c8      	movs	r3, #200	; 0xc8
 801f048:	6879      	ldr	r1, [r7, #4]
 801f04a:	4806      	ldr	r0, [pc, #24]	; (801f064 <UART_DEBUG_Transmit_Size+0x2c>)
 801f04c:	f004 fb2f 	bl	80236ae <HAL_UART_Transmit>
 801f050:	4603      	mov	r3, r0
 801f052:	2b00      	cmp	r3, #0
 801f054:	d001      	beq.n	801f05a <UART_DEBUG_Transmit_Size+0x22>
		Error_Handler();
 801f056:	f001 fda3 	bl	8020ba0 <Error_Handler>
	}
//	UartTransmitReady = RESET;
}
 801f05a:	bf00      	nop
 801f05c:	3708      	adds	r7, #8
 801f05e:	46bd      	mov	sp, r7
 801f060:	bd80      	pop	{r7, pc}
 801f062:	bf00      	nop
 801f064:	2000133c 	.word	0x2000133c

0801f068 <Start_Receive_IT>:
  * @brief Setup_Receive_IT Initialization Function
  * It will receive 1 bytes.
  * @param None
  * @retval None
  */
void Start_Receive_IT(void){
 801f068:	b580      	push	{r7, lr}
 801f06a:	af00      	add	r7, sp, #0
	if(HAL_UART_Receive_IT(&huart1, &temp, 1)!= HAL_OK){
 801f06c:	2201      	movs	r2, #1
 801f06e:	4905      	ldr	r1, [pc, #20]	; (801f084 <Start_Receive_IT+0x1c>)
 801f070:	4805      	ldr	r0, [pc, #20]	; (801f088 <Start_Receive_IT+0x20>)
 801f072:	f004 fbf2 	bl	802385a <HAL_UART_Receive_IT>
 801f076:	4603      	mov	r3, r0
 801f078:	2b00      	cmp	r3, #0
 801f07a:	d001      	beq.n	801f080 <Start_Receive_IT+0x18>
		Error_Handler();
 801f07c:	f001 fd90 	bl	8020ba0 <Error_Handler>
	}
}
 801f080:	bf00      	nop
 801f082:	bd80      	pop	{r7, pc}
 801f084:	20001380 	.word	0x20001380
 801f088:	20002384 	.word	0x20002384

0801f08c <HAL_UART_RxCpltCallback>:
  * When Simcom7600 transmit data to UART, so HAL_UART_RxCpltCallback will be called.
  * HAL_UART_RxCpltCallback will recalled HAL_UART_Receive_IT to continous UART Interrupt Service.
  * @param huart UART_HandleTypeDef be handled in Callback
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 801f08c:	b580      	push	{r7, lr}
 801f08e:	b082      	sub	sp, #8
 801f090:	af00      	add	r7, sp, #0
 801f092:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 801f094:	687b      	ldr	r3, [r7, #4]
 801f096:	681b      	ldr	r3, [r3, #0]
 801f098:	4a10      	ldr	r2, [pc, #64]	; (801f0dc <HAL_UART_RxCpltCallback+0x50>)
 801f09a:	4293      	cmp	r3, r2
 801f09c:	d11a      	bne.n	801f0d4 <HAL_UART_RxCpltCallback+0x48>
		aUART_RxBuffer[receiveBufferIndexHead] = temp;
 801f09e:	4b10      	ldr	r3, [pc, #64]	; (801f0e0 <HAL_UART_RxCpltCallback+0x54>)
 801f0a0:	881b      	ldrh	r3, [r3, #0]
 801f0a2:	b29b      	uxth	r3, r3
 801f0a4:	461a      	mov	r2, r3
 801f0a6:	4b0f      	ldr	r3, [pc, #60]	; (801f0e4 <HAL_UART_RxCpltCallback+0x58>)
 801f0a8:	7819      	ldrb	r1, [r3, #0]
 801f0aa:	4b0f      	ldr	r3, [pc, #60]	; (801f0e8 <HAL_UART_RxCpltCallback+0x5c>)
 801f0ac:	5499      	strb	r1, [r3, r2]
		receiveBufferIndexHead = (receiveBufferIndexHead + 1) % UART_RX_BUFFERSIZE;
 801f0ae:	4b0c      	ldr	r3, [pc, #48]	; (801f0e0 <HAL_UART_RxCpltCallback+0x54>)
 801f0b0:	881b      	ldrh	r3, [r3, #0]
 801f0b2:	b29b      	uxth	r3, r3
 801f0b4:	3301      	adds	r3, #1
 801f0b6:	425a      	negs	r2, r3
 801f0b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801f0bc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801f0c0:	bf58      	it	pl
 801f0c2:	4253      	negpl	r3, r2
 801f0c4:	b29a      	uxth	r2, r3
 801f0c6:	4b06      	ldr	r3, [pc, #24]	; (801f0e0 <HAL_UART_RxCpltCallback+0x54>)
 801f0c8:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(huart, &temp, 1);
 801f0ca:	2201      	movs	r2, #1
 801f0cc:	4905      	ldr	r1, [pc, #20]	; (801f0e4 <HAL_UART_RxCpltCallback+0x58>)
 801f0ce:	6878      	ldr	r0, [r7, #4]
 801f0d0:	f004 fbc3 	bl	802385a <HAL_UART_Receive_IT>
	}
}
 801f0d4:	bf00      	nop
 801f0d6:	3708      	adds	r7, #8
 801f0d8:	46bd      	mov	sp, r7
 801f0da:	bd80      	pop	{r7, pc}
 801f0dc:	40013800 	.word	0x40013800
 801f0e0:	20000194 	.word	0x20000194
 801f0e4:	20001380 	.word	0x20001380
 801f0e8:	20001384 	.word	0x20001384

0801f0ec <HAL_UART_TxCpltCallback>:
/**
  * @brief HAL_UART_TxCpltCallback Initialization Function
  * @param UartHandle UART_HandleTypeDef be handled in Callback
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 801f0ec:	b480      	push	{r7}
 801f0ee:	b083      	sub	sp, #12
 801f0f0:	af00      	add	r7, sp, #0
 801f0f2:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartTransmitReady = SET;
 801f0f4:	4b03      	ldr	r3, [pc, #12]	; (801f104 <HAL_UART_TxCpltCallback+0x18>)
 801f0f6:	2201      	movs	r2, #1
 801f0f8:	701a      	strb	r2, [r3, #0]
}
 801f0fa:	bf00      	nop
 801f0fc:	370c      	adds	r7, #12
 801f0fe:	46bd      	mov	sp, r7
 801f100:	bc80      	pop	{r7}
 801f102:	4770      	bx	lr
 801f104:	20000078 	.word	0x20000078

0801f108 <Clear_Reiceive_Buffer>:
  * @brief Clear_Reiceive_Buffer Initialization Function
  * Clear all data in RX buffer.
  * @param None
  * @retval None
  */
void Clear_Reiceive_Buffer(void){
 801f108:	b580      	push	{r7, lr}
 801f10a:	af00      	add	r7, sp, #0
	memset(aUART_RxBuffer,0,UART_RX_BUFFERSIZE);
 801f10c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801f110:	2100      	movs	r1, #0
 801f112:	4805      	ldr	r0, [pc, #20]	; (801f128 <Clear_Reiceive_Buffer+0x20>)
 801f114:	f005 f81c 	bl	8024150 <memset>
	receiveBufferIndexHead = 0;
 801f118:	4b04      	ldr	r3, [pc, #16]	; (801f12c <Clear_Reiceive_Buffer+0x24>)
 801f11a:	2200      	movs	r2, #0
 801f11c:	801a      	strh	r2, [r3, #0]
	receiveBufferIndexTail = 0;
 801f11e:	4b04      	ldr	r3, [pc, #16]	; (801f130 <Clear_Reiceive_Buffer+0x28>)
 801f120:	2200      	movs	r2, #0
 801f122:	801a      	strh	r2, [r3, #0]
}
 801f124:	bf00      	nop
 801f126:	bd80      	pop	{r7, pc}
 801f128:	20001384 	.word	0x20001384
 801f12c:	20000194 	.word	0x20000194
 801f130:	20000196 	.word	0x20000196

0801f134 <HTTP_Display_State>:

/**
 * HTTP_Display_State()
 * @brief This is function for display state of State Machine. It only show State when having a state changation.
 */
void HTTP_Display_State(void){
 801f134:	b580      	push	{r7, lr}
 801f136:	af00      	add	r7, sp, #0
	if(prev_http_state!=http_state){
 801f138:	4b2c      	ldr	r3, [pc, #176]	; (801f1ec <HTTP_Display_State+0xb8>)
 801f13a:	781a      	ldrb	r2, [r3, #0]
 801f13c:	4b2c      	ldr	r3, [pc, #176]	; (801f1f0 <HTTP_Display_State+0xbc>)
 801f13e:	781b      	ldrb	r3, [r3, #0]
 801f140:	429a      	cmp	r2, r3
 801f142:	d04d      	beq.n	801f1e0 <HTTP_Display_State+0xac>
		prev_http_state = http_state;
 801f144:	4b2a      	ldr	r3, [pc, #168]	; (801f1f0 <HTTP_Display_State+0xbc>)
 801f146:	781a      	ldrb	r2, [r3, #0]
 801f148:	4b28      	ldr	r3, [pc, #160]	; (801f1ec <HTTP_Display_State+0xb8>)
 801f14a:	701a      	strb	r2, [r3, #0]
		switch (http_state) {
 801f14c:	4b28      	ldr	r3, [pc, #160]	; (801f1f0 <HTTP_Display_State+0xbc>)
 801f14e:	781b      	ldrb	r3, [r3, #0]
 801f150:	2b0a      	cmp	r3, #10
 801f152:	d847      	bhi.n	801f1e4 <HTTP_Display_State+0xb0>
 801f154:	a201      	add	r2, pc, #4	; (adr r2, 801f15c <HTTP_Display_State+0x28>)
 801f156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f15a:	bf00      	nop
 801f15c:	0801f189 	.word	0x0801f189
 801f160:	0801f191 	.word	0x0801f191
 801f164:	0801f199 	.word	0x0801f199
 801f168:	0801f1a1 	.word	0x0801f1a1
 801f16c:	0801f1a9 	.word	0x0801f1a9
 801f170:	0801f1b1 	.word	0x0801f1b1
 801f174:	0801f1b9 	.word	0x0801f1b9
 801f178:	0801f1c1 	.word	0x0801f1c1
 801f17c:	0801f1c9 	.word	0x0801f1c9
 801f180:	0801f1d1 	.word	0x0801f1d1
 801f184:	0801f1d9 	.word	0x0801f1d9
			case HTTP_INIT:
				LOG("\r\nHTTP INIT\r\n");
 801f188:	481a      	ldr	r0, [pc, #104]	; (801f1f4 <HTTP_Display_State+0xc0>)
 801f18a:	f7ff ff37 	bl	801effc <UART_DEBUG_Transmit>
				break;
 801f18e:	e02a      	b.n	801f1e6 <HTTP_Display_State+0xb2>
			case HTTP_WAIT_FOR_INIT:
				LOG("\r\nHTTP WAIT FOR INIT\r\n");
 801f190:	4819      	ldr	r0, [pc, #100]	; (801f1f8 <HTTP_Display_State+0xc4>)
 801f192:	f7ff ff33 	bl	801effc <UART_DEBUG_Transmit>
				break;
 801f196:	e026      	b.n	801f1e6 <HTTP_Display_State+0xb2>
			case HTTP_PARA:
				LOG("\r\nHTTP PARA\r\n");
 801f198:	4818      	ldr	r0, [pc, #96]	; (801f1fc <HTTP_Display_State+0xc8>)
 801f19a:	f7ff ff2f 	bl	801effc <UART_DEBUG_Transmit>
				break;
 801f19e:	e022      	b.n	801f1e6 <HTTP_Display_State+0xb2>
			case HTTP_WAIT_FOR_PARA:
				LOG("\r\nHTTP WAIT FOR PARA\r\n");
 801f1a0:	4817      	ldr	r0, [pc, #92]	; (801f200 <HTTP_Display_State+0xcc>)
 801f1a2:	f7ff ff2b 	bl	801effc <UART_DEBUG_Transmit>
				break;
 801f1a6:	e01e      	b.n	801f1e6 <HTTP_Display_State+0xb2>
			case HTTP_ACTION:
				LOG("\r\nHTTP ACTION\r\n");
 801f1a8:	4816      	ldr	r0, [pc, #88]	; (801f204 <HTTP_Display_State+0xd0>)
 801f1aa:	f7ff ff27 	bl	801effc <UART_DEBUG_Transmit>
				break;
 801f1ae:	e01a      	b.n	801f1e6 <HTTP_Display_State+0xb2>
			case HTTP_WAIT_FOR_ACTION:
				LOG("\r\nHTTP WAIT FOR ACTION\r\n");
 801f1b0:	4815      	ldr	r0, [pc, #84]	; (801f208 <HTTP_Display_State+0xd4>)
 801f1b2:	f7ff ff23 	bl	801effc <UART_DEBUG_Transmit>
				//TODO recheck, break or not ?
				break;
 801f1b6:	e016      	b.n	801f1e6 <HTTP_Display_State+0xb2>
			case HTTP_READ:
				LOG("\r\nHTTP READ\r\n");
 801f1b8:	4814      	ldr	r0, [pc, #80]	; (801f20c <HTTP_Display_State+0xd8>)
 801f1ba:	f7ff ff1f 	bl	801effc <UART_DEBUG_Transmit>
				break;
 801f1be:	e012      	b.n	801f1e6 <HTTP_Display_State+0xb2>
			case HTTP_WAIT_FOR_READ:
				LOG("\r\nHTTP WAIT FOR READ\r\n");
 801f1c0:	4813      	ldr	r0, [pc, #76]	; (801f210 <HTTP_Display_State+0xdc>)
 801f1c2:	f7ff ff1b 	bl	801effc <UART_DEBUG_Transmit>
				break;
 801f1c6:	e00e      	b.n	801f1e6 <HTTP_Display_State+0xb2>
			case HTTP_TERM:
				LOG("\r\nHTTP TERM\r\n");
 801f1c8:	4812      	ldr	r0, [pc, #72]	; (801f214 <HTTP_Display_State+0xe0>)
 801f1ca:	f7ff ff17 	bl	801effc <UART_DEBUG_Transmit>
				break;
 801f1ce:	e00a      	b.n	801f1e6 <HTTP_Display_State+0xb2>
			case HTTP_WAIT_FOR_TERM:
				LOG("\r\nHTTP WAIT FOR TERM\r\n");
 801f1d0:	4811      	ldr	r0, [pc, #68]	; (801f218 <HTTP_Display_State+0xe4>)
 801f1d2:	f7ff ff13 	bl	801effc <UART_DEBUG_Transmit>
				break;
 801f1d6:	e006      	b.n	801f1e6 <HTTP_Display_State+0xb2>
			case HTTP_DONE:
				LOG("\r\nHTTP DONE\r\n");
 801f1d8:	4810      	ldr	r0, [pc, #64]	; (801f21c <HTTP_Display_State+0xe8>)
 801f1da:	f7ff ff0f 	bl	801effc <UART_DEBUG_Transmit>
				break;
 801f1de:	e002      	b.n	801f1e6 <HTTP_Display_State+0xb2>
			default:
				break;
		}
	}
 801f1e0:	bf00      	nop
 801f1e2:	e000      	b.n	801f1e6 <HTTP_Display_State+0xb2>
				break;
 801f1e4:	bf00      	nop

}
 801f1e6:	bf00      	nop
 801f1e8:	bd80      	pop	{r7, pc}
 801f1ea:	bf00      	nop
 801f1ec:	200001a0 	.word	0x200001a0
 801f1f0:	200001a1 	.word	0x200001a1
 801f1f4:	08024bf8 	.word	0x08024bf8
 801f1f8:	08024c08 	.word	0x08024c08
 801f1fc:	08024c20 	.word	0x08024c20
 801f200:	08024c30 	.word	0x08024c30
 801f204:	08024c48 	.word	0x08024c48
 801f208:	08024c58 	.word	0x08024c58
 801f20c:	08024c74 	.word	0x08024c74
 801f210:	08024c84 	.word	0x08024c84
 801f214:	08024c9c 	.word	0x08024c9c
 801f218:	08024cac 	.word	0x08024cac
 801f21c:	08024cc4 	.word	0x08024cc4

0801f220 <HTTP_Run>:

/**
 * HTTP_Run()
 * @brief This is function can be called from external file. It run follow state machine method. Not have param.
 */
uint8_t HTTP_Run(){
 801f220:	b580      	push	{r7, lr}
 801f222:	af00      	add	r7, sp, #0
	HTTP_Display_State();
 801f224:	f7ff ff86 	bl	801f134 <HTTP_Display_State>
	if(http_state < HTTP_DONE){
 801f228:	4b0c      	ldr	r3, [pc, #48]	; (801f25c <HTTP_Run+0x3c>)
 801f22a:	781b      	ldrb	r3, [r3, #0]
 801f22c:	2b09      	cmp	r3, #9
 801f22e:	d808      	bhi.n	801f242 <HTTP_Run+0x22>
		(*http_state_machine[http_state].func)();
 801f230:	4b0a      	ldr	r3, [pc, #40]	; (801f25c <HTTP_Run+0x3c>)
 801f232:	781b      	ldrb	r3, [r3, #0]
 801f234:	4a0a      	ldr	r2, [pc, #40]	; (801f260 <HTTP_Run+0x40>)
 801f236:	00db      	lsls	r3, r3, #3
 801f238:	4413      	add	r3, r2
 801f23a:	685b      	ldr	r3, [r3, #4]
 801f23c:	4798      	blx	r3
		return 0;
 801f23e:	2300      	movs	r3, #0
 801f240:	e009      	b.n	801f256 <HTTP_Run+0x36>
	}
	else if(http_state == HTTP_DONE){
 801f242:	4b06      	ldr	r3, [pc, #24]	; (801f25c <HTTP_Run+0x3c>)
 801f244:	781b      	ldrb	r3, [r3, #0]
 801f246:	2b0a      	cmp	r3, #10
 801f248:	d104      	bne.n	801f254 <HTTP_Run+0x34>
		LOG("Get into HTTP DONE");
 801f24a:	4806      	ldr	r0, [pc, #24]	; (801f264 <HTTP_Run+0x44>)
 801f24c:	f7ff fed6 	bl	801effc <UART_DEBUG_Transmit>
		return 1;
 801f250:	2301      	movs	r3, #1
 801f252:	e000      	b.n	801f256 <HTTP_Run+0x36>
	}
	else{
		//HTTP Error
		return 2;
 801f254:	2302      	movs	r3, #2
	}
}
 801f256:	4618      	mov	r0, r3
 801f258:	bd80      	pop	{r7, pc}
 801f25a:	bf00      	nop
 801f25c:	200001a1 	.word	0x200001a1
 801f260:	2000008c 	.word	0x2000008c
 801f264:	08024cd4 	.word	0x08024cd4

0801f268 <HTTP_Init>:

/**
 * HTTP_Init()
 * @brief This is function for initiating Http service
 */
void HTTP_Init(){
 801f268:	b580      	push	{r7, lr}
 801f26a:	af00      	add	r7, sp, #0
	content_length = 0;
 801f26c:	4b0b      	ldr	r3, [pc, #44]	; (801f29c <HTTP_Init+0x34>)
 801f26e:	2200      	movs	r2, #0
 801f270:	601a      	str	r2, [r3, #0]
	Clear_Reiceive_Buffer();
 801f272:	f7ff ff49 	bl	801f108 <Clear_Reiceive_Buffer>
	if(default_atcommand){
 801f276:	4b0a      	ldr	r3, [pc, #40]	; (801f2a0 <HTTP_Init+0x38>)
 801f278:	781b      	ldrb	r3, [r3, #0]
 801f27a:	2b00      	cmp	r3, #0
 801f27c:	d003      	beq.n	801f286 <HTTP_Init+0x1e>
		sprintf(http_at_command,"AT+HTTPINIT\r\n");
 801f27e:	4909      	ldr	r1, [pc, #36]	; (801f2a4 <HTTP_Init+0x3c>)
 801f280:	4809      	ldr	r0, [pc, #36]	; (801f2a8 <HTTP_Init+0x40>)
 801f282:	f004 ff6d 	bl	8024160 <siprintf>
	}
	UART_SIM7600_Transmit((uint8_t *)http_at_command);
 801f286:	4808      	ldr	r0, [pc, #32]	; (801f2a8 <HTTP_Init+0x40>)
 801f288:	f7ff fe1e 	bl	801eec8 <UART_SIM7600_Transmit>
	Clear_Http_Command();
 801f28c:	f000 fe5c 	bl	801ff48 <Clear_Http_Command>
	http_state = HTTP_WAIT_FOR_INIT;
 801f290:	4b06      	ldr	r3, [pc, #24]	; (801f2ac <HTTP_Init+0x44>)
 801f292:	2201      	movs	r2, #1
 801f294:	701a      	strb	r2, [r3, #0]
}
 801f296:	bf00      	nop
 801f298:	bd80      	pop	{r7, pc}
 801f29a:	bf00      	nop
 801f29c:	2000019c 	.word	0x2000019c
 801f2a0:	2000007a 	.word	0x2000007a
 801f2a4:	08024ce8 	.word	0x08024ce8
 801f2a8:	2000354c 	.word	0x2000354c
 801f2ac:	200001a1 	.word	0x200001a1

0801f2b0 <HTTP_Wait_For_Init>:

/**
 * HTTP_Wait_For_Init()
 * @brief This is function for waiting respond from initiating Http service
 */
void HTTP_Wait_For_Init(){
 801f2b0:	b580      	push	{r7, lr}
 801f2b2:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_OK);
	switch (Get_AT_Result()){
 801f2b4:	f001 f80e 	bl	80202d4 <Get_AT_Result>
 801f2b8:	4603      	mov	r3, r0
 801f2ba:	2b00      	cmp	r3, #0
 801f2bc:	d002      	beq.n	801f2c4 <HTTP_Wait_For_Init+0x14>
 801f2be:	2b01      	cmp	r3, #1
 801f2c0:	d006      	beq.n	801f2d0 <HTTP_Wait_For_Init+0x20>
		case AT_ERROR:
			Clear_AT_Result();
			http_state=HTTP_MAX_STATE;
			break;
		default:
			break;
 801f2c2:	e00b      	b.n	801f2dc <HTTP_Wait_For_Init+0x2c>
			Clear_AT_Result();
 801f2c4:	f001 f810 	bl	80202e8 <Clear_AT_Result>
			http_state=HTTP_PARA;
 801f2c8:	4b05      	ldr	r3, [pc, #20]	; (801f2e0 <HTTP_Wait_For_Init+0x30>)
 801f2ca:	2202      	movs	r2, #2
 801f2cc:	701a      	strb	r2, [r3, #0]
			break;
 801f2ce:	e005      	b.n	801f2dc <HTTP_Wait_For_Init+0x2c>
			Clear_AT_Result();
 801f2d0:	f001 f80a 	bl	80202e8 <Clear_AT_Result>
			http_state=HTTP_MAX_STATE;
 801f2d4:	4b02      	ldr	r3, [pc, #8]	; (801f2e0 <HTTP_Wait_For_Init+0x30>)
 801f2d6:	220b      	movs	r2, #11
 801f2d8:	701a      	strb	r2, [r3, #0]
			break;
 801f2da:	bf00      	nop
	}
}
 801f2dc:	bf00      	nop
 801f2de:	bd80      	pop	{r7, pc}
 801f2e0:	200001a1 	.word	0x200001a1

0801f2e4 <HTTP_Para>:

/**
 * HTTP_Para()
 * @brief This is function for passing parameter to HTTP Request
 */
void HTTP_Para(){
 801f2e4:	b580      	push	{r7, lr}
 801f2e6:	af00      	add	r7, sp, #0
	if (default_atcommand) {
 801f2e8:	4b0d      	ldr	r3, [pc, #52]	; (801f320 <HTTP_Para+0x3c>)
 801f2ea:	781b      	ldrb	r3, [r3, #0]
 801f2ec:	2b00      	cmp	r3, #0
 801f2ee:	d00d      	beq.n	801f30c <HTTP_Para+0x28>
		if(fota_check_version){
 801f2f0:	4b0c      	ldr	r3, [pc, #48]	; (801f324 <HTTP_Para+0x40>)
 801f2f2:	781b      	ldrb	r3, [r3, #0]
 801f2f4:	2b00      	cmp	r3, #0
 801f2f6:	d004      	beq.n	801f302 <HTTP_Para+0x1e>
			sprintf(http_at_command,"AT+HTTPPARA=\"URL\",\"http://ota.chipfc.com/ebox_firmware/version.txt\"\r\n");
 801f2f8:	490b      	ldr	r1, [pc, #44]	; (801f328 <HTTP_Para+0x44>)
 801f2fa:	480c      	ldr	r0, [pc, #48]	; (801f32c <HTTP_Para+0x48>)
 801f2fc:	f004 ff30 	bl	8024160 <siprintf>
 801f300:	e004      	b.n	801f30c <HTTP_Para+0x28>
		}
		else{
			sprintf(http_at_command,"AT+HTTPPARA=\"URL\",\"http://ota.chipfc.com/ebox_firmware/%s/eBoxK2.hex\"\r\n",version);
 801f302:	4a0b      	ldr	r2, [pc, #44]	; (801f330 <HTTP_Para+0x4c>)
 801f304:	490b      	ldr	r1, [pc, #44]	; (801f334 <HTTP_Para+0x50>)
 801f306:	4809      	ldr	r0, [pc, #36]	; (801f32c <HTTP_Para+0x48>)
 801f308:	f004 ff2a 	bl	8024160 <siprintf>
		}
	}
	UART_SIM7600_Transmit((uint8_t*)http_at_command);
 801f30c:	4807      	ldr	r0, [pc, #28]	; (801f32c <HTTP_Para+0x48>)
 801f30e:	f7ff fddb 	bl	801eec8 <UART_SIM7600_Transmit>
	Clear_Http_Command();
 801f312:	f000 fe19 	bl	801ff48 <Clear_Http_Command>
	http_state = HTTP_WAIT_FOR_PARA;
 801f316:	4b08      	ldr	r3, [pc, #32]	; (801f338 <HTTP_Para+0x54>)
 801f318:	2203      	movs	r2, #3
 801f31a:	701a      	strb	r2, [r3, #0]
}
 801f31c:	bf00      	nop
 801f31e:	bd80      	pop	{r7, pc}
 801f320:	2000007a 	.word	0x2000007a
 801f324:	2000007b 	.word	0x2000007b
 801f328:	08024cf8 	.word	0x08024cf8
 801f32c:	2000354c 	.word	0x2000354c
 801f330:	2000252c 	.word	0x2000252c
 801f334:	08024d40 	.word	0x08024d40
 801f338:	200001a1 	.word	0x200001a1

0801f33c <HTTP_Wait_For_Para>:
/**
 * HTTP_Wait_For_Para()
 * @brief This is function for waiting respone from  HTTP_PARA state
 * If AT_Result is AT_OK so switch to HTTP_ACTION else it's AT_ERROR so switch to HTTP_MAX_STATE
 */
void HTTP_Wait_For_Para(){
 801f33c:	b580      	push	{r7, lr}
 801f33e:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_OK);
	switch (Get_AT_Result()){
 801f340:	f000 ffc8 	bl	80202d4 <Get_AT_Result>
 801f344:	4603      	mov	r3, r0
 801f346:	2b00      	cmp	r3, #0
 801f348:	d002      	beq.n	801f350 <HTTP_Wait_For_Para+0x14>
 801f34a:	2b01      	cmp	r3, #1
 801f34c:	d006      	beq.n	801f35c <HTTP_Wait_For_Para+0x20>
		case AT_ERROR:
			Clear_AT_Result();
			http_state=HTTP_MAX_STATE;
			break;
		default:
			break;
 801f34e:	e00b      	b.n	801f368 <HTTP_Wait_For_Para+0x2c>
			Clear_AT_Result();
 801f350:	f000 ffca 	bl	80202e8 <Clear_AT_Result>
			http_state=HTTP_ACTION;
 801f354:	4b05      	ldr	r3, [pc, #20]	; (801f36c <HTTP_Wait_For_Para+0x30>)
 801f356:	2204      	movs	r2, #4
 801f358:	701a      	strb	r2, [r3, #0]
			break;
 801f35a:	e005      	b.n	801f368 <HTTP_Wait_For_Para+0x2c>
			Clear_AT_Result();
 801f35c:	f000 ffc4 	bl	80202e8 <Clear_AT_Result>
			http_state=HTTP_MAX_STATE;
 801f360:	4b02      	ldr	r3, [pc, #8]	; (801f36c <HTTP_Wait_For_Para+0x30>)
 801f362:	220b      	movs	r2, #11
 801f364:	701a      	strb	r2, [r3, #0]
			break;
 801f366:	bf00      	nop
	}
}
 801f368:	bf00      	nop
 801f36a:	bd80      	pop	{r7, pc}
 801f36c:	200001a1 	.word	0x200001a1

0801f370 <HTTP_Action>:
/**
 * HTTP_Action()
 * @brief This is function for create request with method : GET,POST,PUT
 * Passing 0 :GET ,1:POST ,...
 */
void HTTP_Action(){
 801f370:	b580      	push	{r7, lr}
 801f372:	af00      	add	r7, sp, #0
//	Clear_Reiceive_Buffer();
	if (default_atcommand) {
 801f374:	4b0c      	ldr	r3, [pc, #48]	; (801f3a8 <HTTP_Action+0x38>)
 801f376:	781b      	ldrb	r3, [r3, #0]
 801f378:	2b00      	cmp	r3, #0
 801f37a:	d003      	beq.n	801f384 <HTTP_Action+0x14>
		sprintf(http_at_command,"AT+HTTPACTION=0\r\n");
 801f37c:	490b      	ldr	r1, [pc, #44]	; (801f3ac <HTTP_Action+0x3c>)
 801f37e:	480c      	ldr	r0, [pc, #48]	; (801f3b0 <HTTP_Action+0x40>)
 801f380:	f004 feee 	bl	8024160 <siprintf>
	}
	UART_SIM7600_Transmit((uint8_t*)http_at_command);
 801f384:	480a      	ldr	r0, [pc, #40]	; (801f3b0 <HTTP_Action+0x40>)
 801f386:	f7ff fd9f 	bl	801eec8 <UART_SIM7600_Transmit>
	Clear_Http_Command();
 801f38a:	f000 fddd 	bl	801ff48 <Clear_Http_Command>
	Clear_Http_Timeout_Flag();
 801f38e:	f000 f9c5 	bl	801f71c <Clear_Http_Timeout_Flag>
	SCH_Add_Task(Set_Http_Timeout_Flag, ACTION_TIMEOUT, 0);
 801f392:	2200      	movs	r2, #0
 801f394:	21c8      	movs	r1, #200	; 0xc8
 801f396:	4807      	ldr	r0, [pc, #28]	; (801f3b4 <HTTP_Action+0x44>)
 801f398:	f000 fff2 	bl	8020380 <SCH_Add_Task>
	http_state = HTTP_WAIT_FOR_ACTION;
 801f39c:	4b06      	ldr	r3, [pc, #24]	; (801f3b8 <HTTP_Action+0x48>)
 801f39e:	2205      	movs	r2, #5
 801f3a0:	701a      	strb	r2, [r3, #0]
}
 801f3a2:	bf00      	nop
 801f3a4:	bd80      	pop	{r7, pc}
 801f3a6:	bf00      	nop
 801f3a8:	2000007a 	.word	0x2000007a
 801f3ac:	08024d88 	.word	0x08024d88
 801f3b0:	2000354c 	.word	0x2000354c
 801f3b4:	0801f705 	.word	0x0801f705
 801f3b8:	200001a1 	.word	0x200001a1

0801f3bc <HTTP_Wait_For_Action>:
 * HTTP_Wait_For_Action()
 * @brief This is function for waiting HTTP_ACTION respone
 * If AT_Result is AT_OK so switch to HTTP_READ to read HTTP Respone body
 * else AT_ERROR so switch to HTTP_MAX_STATE to reset Simcom7600
 */
void HTTP_Wait_For_Action(){
 801f3bc:	b580      	push	{r7, lr}
 801f3be:	af00      	add	r7, sp, #0
	if(is_Http_TimeOutFlag()){
 801f3c0:	f000 f996 	bl	801f6f0 <is_Http_TimeOutFlag>
 801f3c4:	4603      	mov	r3, r0
 801f3c6:	2b00      	cmp	r3, #0
 801f3c8:	d035      	beq.n	801f436 <HTTP_Wait_For_Action+0x7a>
//		Wait_For_Respone(AT_OK);
		switch (Get_AT_Result()){
 801f3ca:	f000 ff83 	bl	80202d4 <Get_AT_Result>
 801f3ce:	4603      	mov	r3, r0
 801f3d0:	2b05      	cmp	r3, #5
 801f3d2:	d009      	beq.n	801f3e8 <HTTP_Wait_For_Action+0x2c>
 801f3d4:	2b05      	cmp	r3, #5
 801f3d6:	dc30      	bgt.n	801f43a <HTTP_Wait_For_Action+0x7e>
 801f3d8:	2b00      	cmp	r3, #0
 801f3da:	d002      	beq.n	801f3e2 <HTTP_Wait_For_Action+0x26>
 801f3dc:	2b01      	cmp	r3, #1
 801f3de:	d024      	beq.n	801f42a <HTTP_Wait_For_Action+0x6e>
			case AT_ERROR:
				Clear_AT_Result();
				http_state = HTTP_MAX_STATE;
				break;
			default:
				break;
 801f3e0:	e02b      	b.n	801f43a <HTTP_Wait_For_Action+0x7e>
				Clear_AT_Result();
 801f3e2:	f000 ff81 	bl	80202e8 <Clear_AT_Result>
				break;
 801f3e6:	e02b      	b.n	801f440 <HTTP_Wait_For_Action+0x84>
				if(HTTP_Get_Content_Length()){
 801f3e8:	f000 fd64 	bl	801feb4 <HTTP_Get_Content_Length>
 801f3ec:	4603      	mov	r3, r0
 801f3ee:	2b00      	cmp	r3, #0
 801f3f0:	d025      	beq.n	801f43e <HTTP_Wait_For_Action+0x82>
					http_response_remain = HTTP_Return_Content_Length();
 801f3f2:	f000 fdb5 	bl	801ff60 <HTTP_Return_Content_Length>
 801f3f6:	4603      	mov	r3, r0
 801f3f8:	4a12      	ldr	r2, [pc, #72]	; (801f444 <HTTP_Wait_For_Action+0x88>)
 801f3fa:	6013      	str	r3, [r2, #0]
					firmware_size = http_response_remain;
 801f3fc:	4b11      	ldr	r3, [pc, #68]	; (801f444 <HTTP_Wait_For_Action+0x88>)
 801f3fe:	681b      	ldr	r3, [r3, #0]
 801f400:	4a11      	ldr	r2, [pc, #68]	; (801f448 <HTTP_Wait_For_Action+0x8c>)
 801f402:	6013      	str	r3, [r2, #0]
					content_length = 0;
 801f404:	4b11      	ldr	r3, [pc, #68]	; (801f44c <HTTP_Wait_For_Action+0x90>)
 801f406:	2200      	movs	r2, #0
 801f408:	601a      	str	r2, [r3, #0]
					sprintf(logMsg,"\r\n%d\r\n",http_response_remain);
 801f40a:	4b0e      	ldr	r3, [pc, #56]	; (801f444 <HTTP_Wait_For_Action+0x88>)
 801f40c:	681b      	ldr	r3, [r3, #0]
 801f40e:	461a      	mov	r2, r3
 801f410:	490f      	ldr	r1, [pc, #60]	; (801f450 <HTTP_Wait_For_Action+0x94>)
 801f412:	4810      	ldr	r0, [pc, #64]	; (801f454 <HTTP_Wait_For_Action+0x98>)
 801f414:	f004 fea4 	bl	8024160 <siprintf>
					LOG(logMsg);
 801f418:	480e      	ldr	r0, [pc, #56]	; (801f454 <HTTP_Wait_For_Action+0x98>)
 801f41a:	f7ff fdef 	bl	801effc <UART_DEBUG_Transmit>
					Clear_AT_Result();
 801f41e:	f000 ff63 	bl	80202e8 <Clear_AT_Result>
					http_state = HTTP_READ;
 801f422:	4b0d      	ldr	r3, [pc, #52]	; (801f458 <HTTP_Wait_For_Action+0x9c>)
 801f424:	2206      	movs	r2, #6
 801f426:	701a      	strb	r2, [r3, #0]
				break;
 801f428:	e009      	b.n	801f43e <HTTP_Wait_For_Action+0x82>
				Clear_AT_Result();
 801f42a:	f000 ff5d 	bl	80202e8 <Clear_AT_Result>
				http_state = HTTP_MAX_STATE;
 801f42e:	4b0a      	ldr	r3, [pc, #40]	; (801f458 <HTTP_Wait_For_Action+0x9c>)
 801f430:	220b      	movs	r2, #11
 801f432:	701a      	strb	r2, [r3, #0]
				break;
 801f434:	e004      	b.n	801f440 <HTTP_Wait_For_Action+0x84>
		}
	}
 801f436:	bf00      	nop
 801f438:	e002      	b.n	801f440 <HTTP_Wait_For_Action+0x84>
				break;
 801f43a:	bf00      	nop
 801f43c:	e000      	b.n	801f440 <HTTP_Wait_For_Action+0x84>
				break;
 801f43e:	bf00      	nop
}
 801f440:	bf00      	nop
 801f442:	bd80      	pop	{r7, pc}
 801f444:	200001a4 	.word	0x200001a4
 801f448:	200001ac 	.word	0x200001ac
 801f44c:	2000019c 	.word	0x2000019c
 801f450:	08024d9c 	.word	0x08024d9c
 801f454:	20003f78 	.word	0x20003f78
 801f458:	200001a1 	.word	0x200001a1

0801f45c <HTTP_Read>:

/**
 * HTTP_Read()
 * @brief This is function for read HTTP respone body, passing for AT number of read data. Default is MAX_HTTP_BODY = 400
 */
void HTTP_Read(){
 801f45c:	b580      	push	{r7, lr}
 801f45e:	b082      	sub	sp, #8
 801f460:	af00      	add	r7, sp, #0
	uint32_t read_size;
	if(fota_check_version){
 801f462:	4b4a      	ldr	r3, [pc, #296]	; (801f58c <HTTP_Read+0x130>)
 801f464:	781b      	ldrb	r3, [r3, #0]
 801f466:	2b00      	cmp	r3, #0
 801f468:	d003      	beq.n	801f472 <HTTP_Read+0x16>
		read_size = http_response_remain;
 801f46a:	4b49      	ldr	r3, [pc, #292]	; (801f590 <HTTP_Read+0x134>)
 801f46c:	681b      	ldr	r3, [r3, #0]
 801f46e:	607b      	str	r3, [r7, #4]
 801f470:	e059      	b.n	801f526 <HTTP_Read+0xca>
	}
	else{
		static uint8_t num_show_lcd = 0;
		if(http_response_remain == 0){
 801f472:	4b47      	ldr	r3, [pc, #284]	; (801f590 <HTTP_Read+0x134>)
 801f474:	681b      	ldr	r3, [r3, #0]
 801f476:	2b00      	cmp	r3, #0
 801f478:	d10b      	bne.n	801f492 <HTTP_Read+0x36>
			sprintf(logMsg,"Complete 100%");
 801f47a:	4946      	ldr	r1, [pc, #280]	; (801f594 <HTTP_Read+0x138>)
 801f47c:	4846      	ldr	r0, [pc, #280]	; (801f598 <HTTP_Read+0x13c>)
 801f47e:	f004 fe6f 	bl	8024160 <siprintf>
			Lcd_Clear_Display();
 801f482:	f7ff f909 	bl	801e698 <Lcd_Clear_Display>
			Lcd_Show_String(logMsg, 0, 0);
 801f486:	2200      	movs	r2, #0
 801f488:	2100      	movs	r1, #0
 801f48a:	4843      	ldr	r0, [pc, #268]	; (801f598 <HTTP_Read+0x13c>)
 801f48c:	f7ff f91c 	bl	801e6c8 <Lcd_Show_String>
 801f490:	e02b      	b.n	801f4ea <HTTP_Read+0x8e>
		}
		else if((firmware_size - http_response_remain) > 10240 * num_show_lcd){
 801f492:	4b42      	ldr	r3, [pc, #264]	; (801f59c <HTTP_Read+0x140>)
 801f494:	681a      	ldr	r2, [r3, #0]
 801f496:	4b3e      	ldr	r3, [pc, #248]	; (801f590 <HTTP_Read+0x134>)
 801f498:	681b      	ldr	r3, [r3, #0]
 801f49a:	1ad2      	subs	r2, r2, r3
 801f49c:	4b40      	ldr	r3, [pc, #256]	; (801f5a0 <HTTP_Read+0x144>)
 801f49e:	781b      	ldrb	r3, [r3, #0]
 801f4a0:	4619      	mov	r1, r3
 801f4a2:	460b      	mov	r3, r1
 801f4a4:	009b      	lsls	r3, r3, #2
 801f4a6:	440b      	add	r3, r1
 801f4a8:	02db      	lsls	r3, r3, #11
 801f4aa:	429a      	cmp	r2, r3
 801f4ac:	d91d      	bls.n	801f4ea <HTTP_Read+0x8e>
			sprintf(logMsg,"Complete %ld\%",(firmware_size- http_response_remain) * 100 / firmware_size);
 801f4ae:	4b3b      	ldr	r3, [pc, #236]	; (801f59c <HTTP_Read+0x140>)
 801f4b0:	681a      	ldr	r2, [r3, #0]
 801f4b2:	4b37      	ldr	r3, [pc, #220]	; (801f590 <HTTP_Read+0x134>)
 801f4b4:	681b      	ldr	r3, [r3, #0]
 801f4b6:	1ad3      	subs	r3, r2, r3
 801f4b8:	2264      	movs	r2, #100	; 0x64
 801f4ba:	fb02 f203 	mul.w	r2, r2, r3
 801f4be:	4b37      	ldr	r3, [pc, #220]	; (801f59c <HTTP_Read+0x140>)
 801f4c0:	681b      	ldr	r3, [r3, #0]
 801f4c2:	fbb2 f3f3 	udiv	r3, r2, r3
 801f4c6:	461a      	mov	r2, r3
 801f4c8:	4936      	ldr	r1, [pc, #216]	; (801f5a4 <HTTP_Read+0x148>)
 801f4ca:	4833      	ldr	r0, [pc, #204]	; (801f598 <HTTP_Read+0x13c>)
 801f4cc:	f004 fe48 	bl	8024160 <siprintf>
			Lcd_Clear_Display();
 801f4d0:	f7ff f8e2 	bl	801e698 <Lcd_Clear_Display>
			Lcd_Show_String(logMsg, 0, 0);
 801f4d4:	2200      	movs	r2, #0
 801f4d6:	2100      	movs	r1, #0
 801f4d8:	482f      	ldr	r0, [pc, #188]	; (801f598 <HTTP_Read+0x13c>)
 801f4da:	f7ff f8f5 	bl	801e6c8 <Lcd_Show_String>
			num_show_lcd ++;
 801f4de:	4b30      	ldr	r3, [pc, #192]	; (801f5a0 <HTTP_Read+0x144>)
 801f4e0:	781b      	ldrb	r3, [r3, #0]
 801f4e2:	3301      	adds	r3, #1
 801f4e4:	b2da      	uxtb	r2, r3
 801f4e6:	4b2e      	ldr	r3, [pc, #184]	; (801f5a0 <HTTP_Read+0x144>)
 801f4e8:	701a      	strb	r2, [r3, #0]
		}
		if(http_response_remain > (FIRMWARE_READ_SIZE_PER_TIME)){
 801f4ea:	4b29      	ldr	r3, [pc, #164]	; (801f590 <HTTP_Read+0x134>)
 801f4ec:	681b      	ldr	r3, [r3, #0]
 801f4ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f4f2:	d909      	bls.n	801f508 <HTTP_Read+0xac>
			read_size = FIRMWARE_READ_SIZE_PER_TIME;
 801f4f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f4f8:	607b      	str	r3, [r7, #4]
			http_response_remain = http_response_remain -  (FIRMWARE_READ_SIZE_PER_TIME);
 801f4fa:	4b25      	ldr	r3, [pc, #148]	; (801f590 <HTTP_Read+0x134>)
 801f4fc:	681b      	ldr	r3, [r3, #0]
 801f4fe:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801f502:	4a23      	ldr	r2, [pc, #140]	; (801f590 <HTTP_Read+0x134>)
 801f504:	6013      	str	r3, [r2, #0]
 801f506:	e00e      	b.n	801f526 <HTTP_Read+0xca>
		}
		else if (http_response_remain > 0 && http_response_remain < (FIRMWARE_READ_SIZE_PER_TIME)){
 801f508:	4b21      	ldr	r3, [pc, #132]	; (801f590 <HTTP_Read+0x134>)
 801f50a:	681b      	ldr	r3, [r3, #0]
 801f50c:	2b00      	cmp	r3, #0
 801f50e:	d00a      	beq.n	801f526 <HTTP_Read+0xca>
 801f510:	4b1f      	ldr	r3, [pc, #124]	; (801f590 <HTTP_Read+0x134>)
 801f512:	681b      	ldr	r3, [r3, #0]
 801f514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f518:	d205      	bcs.n	801f526 <HTTP_Read+0xca>
			read_size = http_response_remain;
 801f51a:	4b1d      	ldr	r3, [pc, #116]	; (801f590 <HTTP_Read+0x134>)
 801f51c:	681b      	ldr	r3, [r3, #0]
 801f51e:	607b      	str	r3, [r7, #4]
			http_response_remain = 0;
 801f520:	4b1b      	ldr	r3, [pc, #108]	; (801f590 <HTTP_Read+0x134>)
 801f522:	2200      	movs	r2, #0
 801f524:	601a      	str	r2, [r3, #0]
		}
	}
	if (default_atcommand) {
 801f526:	4b20      	ldr	r3, [pc, #128]	; (801f5a8 <HTTP_Read+0x14c>)
 801f528:	781b      	ldrb	r3, [r3, #0]
 801f52a:	2b00      	cmp	r3, #0
 801f52c:	d004      	beq.n	801f538 <HTTP_Read+0xdc>
		sprintf(http_at_command,"AT+HTTPREAD=0,%d\r\n",read_size);
 801f52e:	687a      	ldr	r2, [r7, #4]
 801f530:	491e      	ldr	r1, [pc, #120]	; (801f5ac <HTTP_Read+0x150>)
 801f532:	481f      	ldr	r0, [pc, #124]	; (801f5b0 <HTTP_Read+0x154>)
 801f534:	f004 fe14 	bl	8024160 <siprintf>
	}

	sprintf(logMsg,"http_response_remain: %ld\r\n",http_response_remain);
 801f538:	4b15      	ldr	r3, [pc, #84]	; (801f590 <HTTP_Read+0x134>)
 801f53a:	681b      	ldr	r3, [r3, #0]
 801f53c:	461a      	mov	r2, r3
 801f53e:	491d      	ldr	r1, [pc, #116]	; (801f5b4 <HTTP_Read+0x158>)
 801f540:	4815      	ldr	r0, [pc, #84]	; (801f598 <HTTP_Read+0x13c>)
 801f542:	f004 fe0d 	bl	8024160 <siprintf>
	LOG(logMsg);
 801f546:	4814      	ldr	r0, [pc, #80]	; (801f598 <HTTP_Read+0x13c>)
 801f548:	f7ff fd58 	bl	801effc <UART_DEBUG_Transmit>
	sprintf(logMsg,"firmware_index: %ld\r\n",firmware_index);
 801f54c:	4b1a      	ldr	r3, [pc, #104]	; (801f5b8 <HTTP_Read+0x15c>)
 801f54e:	881b      	ldrh	r3, [r3, #0]
 801f550:	461a      	mov	r2, r3
 801f552:	491a      	ldr	r1, [pc, #104]	; (801f5bc <HTTP_Read+0x160>)
 801f554:	4810      	ldr	r0, [pc, #64]	; (801f598 <HTTP_Read+0x13c>)
 801f556:	f004 fe03 	bl	8024160 <siprintf>
	LOG(logMsg);
 801f55a:	480f      	ldr	r0, [pc, #60]	; (801f598 <HTTP_Read+0x13c>)
 801f55c:	f7ff fd4e 	bl	801effc <UART_DEBUG_Transmit>
	UART_SIM7600_Transmit((uint8_t *)http_at_command);
 801f560:	4813      	ldr	r0, [pc, #76]	; (801f5b0 <HTTP_Read+0x154>)
 801f562:	f7ff fcb1 	bl	801eec8 <UART_SIM7600_Transmit>
	Clear_Http_Timeout_Flag();
 801f566:	f000 f8d9 	bl	801f71c <Clear_Http_Timeout_Flag>
	SCH_Add_Task(Set_Http_Timeout_Flag, 100, 0);
 801f56a:	2200      	movs	r2, #0
 801f56c:	2164      	movs	r1, #100	; 0x64
 801f56e:	4814      	ldr	r0, [pc, #80]	; (801f5c0 <HTTP_Read+0x164>)
 801f570:	f000 ff06 	bl	8020380 <SCH_Add_Task>
	Clear_Http_Command();
 801f574:	f000 fce8 	bl	801ff48 <Clear_Http_Command>
	HAL_Delay(100);
 801f578:	2064      	movs	r0, #100	; 0x64
 801f57a:	f001 fd85 	bl	8021088 <HAL_Delay>
	http_state = HTTP_WAIT_FOR_READ;
 801f57e:	4b11      	ldr	r3, [pc, #68]	; (801f5c4 <HTTP_Read+0x168>)
 801f580:	2207      	movs	r2, #7
 801f582:	701a      	strb	r2, [r3, #0]
}
 801f584:	bf00      	nop
 801f586:	3708      	adds	r7, #8
 801f588:	46bd      	mov	sp, r7
 801f58a:	bd80      	pop	{r7, pc}
 801f58c:	2000007b 	.word	0x2000007b
 801f590:	200001a4 	.word	0x200001a4
 801f594:	08024da4 	.word	0x08024da4
 801f598:	20003f78 	.word	0x20003f78
 801f59c:	200001ac 	.word	0x200001ac
 801f5a0:	200001b8 	.word	0x200001b8
 801f5a4:	08024db4 	.word	0x08024db4
 801f5a8:	2000007a 	.word	0x2000007a
 801f5ac:	08024dc4 	.word	0x08024dc4
 801f5b0:	2000354c 	.word	0x2000354c
 801f5b4:	08024dd8 	.word	0x08024dd8
 801f5b8:	200001a8 	.word	0x200001a8
 801f5bc:	08024df4 	.word	0x08024df4
 801f5c0:	0801f705 	.word	0x0801f705
 801f5c4:	200001a1 	.word	0x200001a1

0801f5c8 <HTTP_Wait_For_Read>:
 * else if AT_Result = AT_NOT_FOUND switch to HTTP_PARA every timeout
 * else if AT_Result = AT_ERROR switch to HTTP_MAX_STATE to reset Simcom7600
 */
char log[50];
uint32_t firmware_index_end;
void HTTP_Wait_For_Read(){
 801f5c8:	b580      	push	{r7, lr}
 801f5ca:	b082      	sub	sp, #8
 801f5cc:	af00      	add	r7, sp, #0
	FlagStatus flag_ret;
	if(fota_check_version){
 801f5ce:	4b24      	ldr	r3, [pc, #144]	; (801f660 <HTTP_Wait_For_Read+0x98>)
 801f5d0:	781b      	ldrb	r3, [r3, #0]
 801f5d2:	2b00      	cmp	r3, #0
 801f5d4:	d014      	beq.n	801f600 <HTTP_Wait_For_Read+0x38>
		switch (Get_AT_Result()) {
 801f5d6:	f000 fe7d 	bl	80202d4 <Get_AT_Result>
 801f5da:	4603      	mov	r3, r0
 801f5dc:	2b00      	cmp	r3, #0
 801f5de:	d134      	bne.n	801f64a <HTTP_Wait_For_Read+0x82>
			case AT_OK:
				flag_ret = HTTP_Firmware_Version();
 801f5e0:	f000 f8a8 	bl	801f734 <HTTP_Firmware_Version>
 801f5e4:	4603      	mov	r3, r0
 801f5e6:	71fb      	strb	r3, [r7, #7]
				if(flag_ret){
 801f5e8:	79fb      	ldrb	r3, [r7, #7]
 801f5ea:	2b00      	cmp	r3, #0
 801f5ec:	d02f      	beq.n	801f64e <HTTP_Wait_For_Read+0x86>
					fota_check_version = RESET;
 801f5ee:	4b1c      	ldr	r3, [pc, #112]	; (801f660 <HTTP_Wait_For_Read+0x98>)
 801f5f0:	2200      	movs	r2, #0
 801f5f2:	701a      	strb	r2, [r3, #0]
					Clear_AT_Result();
 801f5f4:	f000 fe78 	bl	80202e8 <Clear_AT_Result>
					http_state = HTTP_PARA;
 801f5f8:	4b1a      	ldr	r3, [pc, #104]	; (801f664 <HTTP_Wait_For_Read+0x9c>)
 801f5fa:	2202      	movs	r2, #2
 801f5fc:	701a      	strb	r2, [r3, #0]
					return;
 801f5fe:	e02b      	b.n	801f658 <HTTP_Wait_For_Read+0x90>
			default:
				break;
		}
	}
	else{
		switch (Get_AT_Result()) {
 801f600:	f000 fe68 	bl	80202d4 <Get_AT_Result>
 801f604:	4603      	mov	r3, r0
 801f606:	2b00      	cmp	r3, #0
 801f608:	d123      	bne.n	801f652 <HTTP_Wait_For_Read+0x8a>
			case AT_OK:
				flag_ret = HTTP_Firmware_Data();
 801f60a:	f000 f96f 	bl	801f8ec <HTTP_Firmware_Data>
 801f60e:	4603      	mov	r3, r0
 801f610:	71fb      	strb	r3, [r7, #7]
				if(flag_ret){
 801f612:	79fb      	ldrb	r3, [r7, #7]
 801f614:	2b00      	cmp	r3, #0
 801f616:	d01e      	beq.n	801f656 <HTTP_Wait_For_Read+0x8e>
					if(checksum_correct){
 801f618:	4b13      	ldr	r3, [pc, #76]	; (801f668 <HTTP_Wait_For_Read+0xa0>)
 801f61a:	781b      	ldrb	r3, [r3, #0]
 801f61c:	2b00      	cmp	r3, #0
 801f61e:	d009      	beq.n	801f634 <HTTP_Wait_For_Read+0x6c>
						if(http_response_remain == 0){
 801f620:	4b12      	ldr	r3, [pc, #72]	; (801f66c <HTTP_Wait_For_Read+0xa4>)
 801f622:	681b      	ldr	r3, [r3, #0]
 801f624:	2b00      	cmp	r3, #0
 801f626:	d10a      	bne.n	801f63e <HTTP_Wait_For_Read+0x76>
							LOG("Jump To Current Firmware");
 801f628:	4811      	ldr	r0, [pc, #68]	; (801f670 <HTTP_Wait_For_Read+0xa8>)
 801f62a:	f7ff fce7 	bl	801effc <UART_DEBUG_Transmit>
							Jump_To_Current_Firmware();
 801f62e:	f001 f92f 	bl	8020890 <Jump_To_Current_Firmware>
 801f632:	e004      	b.n	801f63e <HTTP_Wait_For_Read+0x76>
						}
					}
					else{
						LOG("Jump To Factory Firmware");
 801f634:	480f      	ldr	r0, [pc, #60]	; (801f674 <HTTP_Wait_For_Read+0xac>)
 801f636:	f7ff fce1 	bl	801effc <UART_DEBUG_Transmit>
						Jump_To_Factory_Firmware();
 801f63a:	f001 f937 	bl	80208ac <Jump_To_Factory_Firmware>
					}

					Clear_AT_Result();
 801f63e:	f000 fe53 	bl	80202e8 <Clear_AT_Result>
					http_state = HTTP_READ;
 801f642:	4b08      	ldr	r3, [pc, #32]	; (801f664 <HTTP_Wait_For_Read+0x9c>)
 801f644:	2206      	movs	r2, #6
 801f646:	701a      	strb	r2, [r3, #0]
				}
				break;
 801f648:	e005      	b.n	801f656 <HTTP_Wait_For_Read+0x8e>
				break;
 801f64a:	bf00      	nop
 801f64c:	e004      	b.n	801f658 <HTTP_Wait_For_Read+0x90>
				break;
 801f64e:	bf00      	nop
 801f650:	e002      	b.n	801f658 <HTTP_Wait_For_Read+0x90>
			default:
				break;
 801f652:	bf00      	nop
 801f654:	e000      	b.n	801f658 <HTTP_Wait_For_Read+0x90>
				break;
 801f656:	bf00      	nop
		}
	}

}
 801f658:	3708      	adds	r7, #8
 801f65a:	46bd      	mov	sp, r7
 801f65c:	bd80      	pop	{r7, pc}
 801f65e:	bf00      	nop
 801f660:	2000007b 	.word	0x2000007b
 801f664:	200001a1 	.word	0x200001a1
 801f668:	2000007c 	.word	0x2000007c
 801f66c:	200001a4 	.word	0x200001a4
 801f670:	08024e0c 	.word	0x08024e0c
 801f674:	08024e28 	.word	0x08024e28

0801f678 <HTTP_Term>:

/**
 * HTTP_Term()
 * @brief This is function for terminaring HTTP Service
 */
void HTTP_Term(){
 801f678:	b580      	push	{r7, lr}
 801f67a:	af00      	add	r7, sp, #0
//	Clear_Reiceive_Buffer();
	if (default_atcommand) {
 801f67c:	4b08      	ldr	r3, [pc, #32]	; (801f6a0 <HTTP_Term+0x28>)
 801f67e:	781b      	ldrb	r3, [r3, #0]
 801f680:	2b00      	cmp	r3, #0
 801f682:	d003      	beq.n	801f68c <HTTP_Term+0x14>
		sprintf(http_at_command,"AT+HTTPTERM\r\n");
 801f684:	4907      	ldr	r1, [pc, #28]	; (801f6a4 <HTTP_Term+0x2c>)
 801f686:	4808      	ldr	r0, [pc, #32]	; (801f6a8 <HTTP_Term+0x30>)
 801f688:	f004 fd6a 	bl	8024160 <siprintf>
	}
	UART_SIM7600_Transmit((uint8_t*)http_at_command);
 801f68c:	4806      	ldr	r0, [pc, #24]	; (801f6a8 <HTTP_Term+0x30>)
 801f68e:	f7ff fc1b 	bl	801eec8 <UART_SIM7600_Transmit>
	Clear_Http_Command();
 801f692:	f000 fc59 	bl	801ff48 <Clear_Http_Command>
	http_state = HTTP_WAIT_FOR_TERM;
 801f696:	4b05      	ldr	r3, [pc, #20]	; (801f6ac <HTTP_Term+0x34>)
 801f698:	2209      	movs	r2, #9
 801f69a:	701a      	strb	r2, [r3, #0]
}
 801f69c:	bf00      	nop
 801f69e:	bd80      	pop	{r7, pc}
 801f6a0:	2000007a 	.word	0x2000007a
 801f6a4:	08024e44 	.word	0x08024e44
 801f6a8:	2000354c 	.word	0x2000354c
 801f6ac:	200001a1 	.word	0x200001a1

0801f6b0 <HTTP_Wait_For_Term>:
 * HTTP_Wait_For_Term()
 * @brief This is function for waiting HTTP_TERM state respone
 * If AT_Result is AT_OK so switch to HTTP_DONE
 * else switch to HTTP_MAX_STATE and reset Simcom7600
 */
void HTTP_Wait_For_Term(){
 801f6b0:	b580      	push	{r7, lr}
 801f6b2:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_OK);
	switch (Get_AT_Result()){
 801f6b4:	f000 fe0e 	bl	80202d4 <Get_AT_Result>
 801f6b8:	4603      	mov	r3, r0
 801f6ba:	2b00      	cmp	r3, #0
 801f6bc:	d002      	beq.n	801f6c4 <HTTP_Wait_For_Term+0x14>
 801f6be:	2b01      	cmp	r3, #1
 801f6c0:	d006      	beq.n	801f6d0 <HTTP_Wait_For_Term+0x20>
		case AT_ERROR:
			Clear_AT_Result();
			http_state=HTTP_MAX_STATE;
			break;
		default:
			break;
 801f6c2:	e00b      	b.n	801f6dc <HTTP_Wait_For_Term+0x2c>
			Clear_AT_Result();
 801f6c4:	f000 fe10 	bl	80202e8 <Clear_AT_Result>
			http_state=HTTP_INIT;
 801f6c8:	4b05      	ldr	r3, [pc, #20]	; (801f6e0 <HTTP_Wait_For_Term+0x30>)
 801f6ca:	2200      	movs	r2, #0
 801f6cc:	701a      	strb	r2, [r3, #0]
			break;
 801f6ce:	e005      	b.n	801f6dc <HTTP_Wait_For_Term+0x2c>
			Clear_AT_Result();
 801f6d0:	f000 fe0a 	bl	80202e8 <Clear_AT_Result>
			http_state=HTTP_MAX_STATE;
 801f6d4:	4b02      	ldr	r3, [pc, #8]	; (801f6e0 <HTTP_Wait_For_Term+0x30>)
 801f6d6:	220b      	movs	r2, #11
 801f6d8:	701a      	strb	r2, [r3, #0]
			break;
 801f6da:	bf00      	nop
	}
}
 801f6dc:	bf00      	nop
 801f6de:	bd80      	pop	{r7, pc}
 801f6e0:	200001a1 	.word	0x200001a1

0801f6e4 <HTTP_Done>:

/**
 * HTTP_Done()
 * @brief This is function for waiting FSM get out of HTTP Operation
 */
void HTTP_Done(){
 801f6e4:	b480      	push	{r7}
 801f6e6:	af00      	add	r7, sp, #0
	return;
 801f6e8:	bf00      	nop
}
 801f6ea:	46bd      	mov	sp, r7
 801f6ec:	bc80      	pop	{r7}
 801f6ee:	4770      	bx	lr

0801f6f0 <is_Http_TimeOutFlag>:
/**
 * is_Http_TimeOutFlag()
 * @brief Get http_timeout_flag
 * @return http_timeout_flag
 */
FlagStatus is_Http_TimeOutFlag(void){
 801f6f0:	b480      	push	{r7}
 801f6f2:	af00      	add	r7, sp, #0
	return http_timeout_flag;
 801f6f4:	4b02      	ldr	r3, [pc, #8]	; (801f700 <is_Http_TimeOutFlag+0x10>)
 801f6f6:	781b      	ldrb	r3, [r3, #0]
}
 801f6f8:	4618      	mov	r0, r3
 801f6fa:	46bd      	mov	sp, r7
 801f6fc:	bc80      	pop	{r7}
 801f6fe:	4770      	bx	lr
 801f700:	20000079 	.word	0x20000079

0801f704 <Set_Http_Timeout_Flag>:

/**
 * Set_Http_Timeout_Flag()
 * @brief Set http_timeout_flag to SET
 */
void Set_Http_Timeout_Flag(void){
 801f704:	b480      	push	{r7}
 801f706:	af00      	add	r7, sp, #0
	http_timeout_flag = SET;
 801f708:	4b03      	ldr	r3, [pc, #12]	; (801f718 <Set_Http_Timeout_Flag+0x14>)
 801f70a:	2201      	movs	r2, #1
 801f70c:	701a      	strb	r2, [r3, #0]
}
 801f70e:	bf00      	nop
 801f710:	46bd      	mov	sp, r7
 801f712:	bc80      	pop	{r7}
 801f714:	4770      	bx	lr
 801f716:	bf00      	nop
 801f718:	20000079 	.word	0x20000079

0801f71c <Clear_Http_Timeout_Flag>:

/**
 * Clear_Http_Timeout_Flag()
 * @brief Clear http_timeout_flag to RESET
 */
void Clear_Http_Timeout_Flag(void){
 801f71c:	b480      	push	{r7}
 801f71e:	af00      	add	r7, sp, #0
	http_timeout_flag = RESET;
 801f720:	4b03      	ldr	r3, [pc, #12]	; (801f730 <Clear_Http_Timeout_Flag+0x14>)
 801f722:	2200      	movs	r2, #0
 801f724:	701a      	strb	r2, [r3, #0]
}
 801f726:	bf00      	nop
 801f728:	46bd      	mov	sp, r7
 801f72a:	bc80      	pop	{r7}
 801f72c:	4770      	bx	lr
 801f72e:	bf00      	nop
 801f730:	20000079 	.word	0x20000079

0801f734 <HTTP_Firmware_Version>:

uint8_t temp_version_name_buffer[TEMP_VERSION_BUFFER_LENGTH];
uint8_t temp_version_name_index = 0;
FlagStatus prepare_record_version_name = RESET;
FlagStatus start_record_version_name = RESET;
FlagStatus HTTP_Firmware_Version(){
 801f734:	b598      	push	{r3, r4, r7, lr}
 801f736:	af00      	add	r7, sp, #0
	if(UART_SIM7600_Received_Buffer_Available()){
 801f738:	f7ff fbf2 	bl	801ef20 <UART_SIM7600_Received_Buffer_Available>
 801f73c:	4603      	mov	r3, r0
 801f73e:	2b00      	cmp	r3, #0
 801f740:	d059      	beq.n	801f7f6 <HTTP_Firmware_Version+0xc2>
		temp_version_name_buffer[temp_version_name_index] = UART_SIM7600_Read_Received_Buffer();
 801f742:	4b2e      	ldr	r3, [pc, #184]	; (801f7fc <HTTP_Firmware_Version+0xc8>)
 801f744:	781b      	ldrb	r3, [r3, #0]
 801f746:	461c      	mov	r4, r3
 801f748:	f7ff fc00 	bl	801ef4c <UART_SIM7600_Read_Received_Buffer>
 801f74c:	4603      	mov	r3, r0
 801f74e:	461a      	mov	r2, r3
 801f750:	4b2b      	ldr	r3, [pc, #172]	; (801f800 <HTTP_Firmware_Version+0xcc>)
 801f752:	551a      	strb	r2, [r3, r4]
//		UART_DEBUG_Transmit_Size(temp_version_name_buffer + temp_version_name_index, 1);
		if(isReceiveData_New(temp_version_name_buffer, temp_version_name_index + 1, TEMP_VERSION_BUFFER_LENGTH, "+HTTPREAD: DATA")){
 801f754:	4b29      	ldr	r3, [pc, #164]	; (801f7fc <HTTP_Firmware_Version+0xc8>)
 801f756:	781b      	ldrb	r3, [r3, #0]
 801f758:	1c59      	adds	r1, r3, #1
 801f75a:	4b2a      	ldr	r3, [pc, #168]	; (801f804 <HTTP_Firmware_Version+0xd0>)
 801f75c:	2264      	movs	r2, #100	; 0x64
 801f75e:	4828      	ldr	r0, [pc, #160]	; (801f800 <HTTP_Firmware_Version+0xcc>)
 801f760:	f000 fc40 	bl	801ffe4 <isReceiveData_New>
 801f764:	4603      	mov	r3, r0
 801f766:	2b00      	cmp	r3, #0
 801f768:	d002      	beq.n	801f770 <HTTP_Firmware_Version+0x3c>
			prepare_record_version_name = SET;
 801f76a:	4b27      	ldr	r3, [pc, #156]	; (801f808 <HTTP_Firmware_Version+0xd4>)
 801f76c:	2201      	movs	r2, #1
 801f76e:	701a      	strb	r2, [r3, #0]
		}
		if(prepare_record_version_name){
 801f770:	4b25      	ldr	r3, [pc, #148]	; (801f808 <HTTP_Firmware_Version+0xd4>)
 801f772:	781b      	ldrb	r3, [r3, #0]
 801f774:	2b00      	cmp	r3, #0
 801f776:	d02e      	beq.n	801f7d6 <HTTP_Firmware_Version+0xa2>
			if(start_record_version_name){
 801f778:	4b24      	ldr	r3, [pc, #144]	; (801f80c <HTTP_Firmware_Version+0xd8>)
 801f77a:	781b      	ldrb	r3, [r3, #0]
 801f77c:	2b00      	cmp	r3, #0
 801f77e:	d01c      	beq.n	801f7ba <HTTP_Firmware_Version+0x86>
				//Check whether stop record version name
				if(temp_version_name_buffer[temp_version_name_index]=='\r'){
 801f780:	4b1e      	ldr	r3, [pc, #120]	; (801f7fc <HTTP_Firmware_Version+0xc8>)
 801f782:	781b      	ldrb	r3, [r3, #0]
 801f784:	461a      	mov	r2, r3
 801f786:	4b1e      	ldr	r3, [pc, #120]	; (801f800 <HTTP_Firmware_Version+0xcc>)
 801f788:	5c9b      	ldrb	r3, [r3, r2]
 801f78a:	2b0d      	cmp	r3, #13
 801f78c:	d107      	bne.n	801f79e <HTTP_Firmware_Version+0x6a>
					start_record_version_name = RESET;
 801f78e:	4b1f      	ldr	r3, [pc, #124]	; (801f80c <HTTP_Firmware_Version+0xd8>)
 801f790:	2200      	movs	r2, #0
 801f792:	701a      	strb	r2, [r3, #0]
					prepare_record_version_name = RESET;
 801f794:	4b1c      	ldr	r3, [pc, #112]	; (801f808 <HTTP_Firmware_Version+0xd4>)
 801f796:	2200      	movs	r2, #0
 801f798:	701a      	strb	r2, [r3, #0]
					return SET;
 801f79a:	2301      	movs	r3, #1
 801f79c:	e02c      	b.n	801f7f8 <HTTP_Firmware_Version+0xc4>
				}
				else{
					version[version_index++] = temp_version_name_buffer[temp_version_name_index];
 801f79e:	4b17      	ldr	r3, [pc, #92]	; (801f7fc <HTTP_Firmware_Version+0xc8>)
 801f7a0:	781b      	ldrb	r3, [r3, #0]
 801f7a2:	4619      	mov	r1, r3
 801f7a4:	4b1a      	ldr	r3, [pc, #104]	; (801f810 <HTTP_Firmware_Version+0xdc>)
 801f7a6:	781b      	ldrb	r3, [r3, #0]
 801f7a8:	1c5a      	adds	r2, r3, #1
 801f7aa:	b2d0      	uxtb	r0, r2
 801f7ac:	4a18      	ldr	r2, [pc, #96]	; (801f810 <HTTP_Firmware_Version+0xdc>)
 801f7ae:	7010      	strb	r0, [r2, #0]
 801f7b0:	461a      	mov	r2, r3
 801f7b2:	4b13      	ldr	r3, [pc, #76]	; (801f800 <HTTP_Firmware_Version+0xcc>)
 801f7b4:	5c59      	ldrb	r1, [r3, r1]
 801f7b6:	4b17      	ldr	r3, [pc, #92]	; (801f814 <HTTP_Firmware_Version+0xe0>)
 801f7b8:	5499      	strb	r1, [r3, r2]
				}
			}
			if(isReceiveData_New(temp_version_name_buffer, temp_version_name_index + 1, TEMP_VERSION_BUFFER_LENGTH, "\r\n")){
 801f7ba:	4b10      	ldr	r3, [pc, #64]	; (801f7fc <HTTP_Firmware_Version+0xc8>)
 801f7bc:	781b      	ldrb	r3, [r3, #0]
 801f7be:	1c59      	adds	r1, r3, #1
 801f7c0:	4b15      	ldr	r3, [pc, #84]	; (801f818 <HTTP_Firmware_Version+0xe4>)
 801f7c2:	2264      	movs	r2, #100	; 0x64
 801f7c4:	480e      	ldr	r0, [pc, #56]	; (801f800 <HTTP_Firmware_Version+0xcc>)
 801f7c6:	f000 fc0d 	bl	801ffe4 <isReceiveData_New>
 801f7ca:	4603      	mov	r3, r0
 801f7cc:	2b00      	cmp	r3, #0
 801f7ce:	d002      	beq.n	801f7d6 <HTTP_Firmware_Version+0xa2>
				start_record_version_name = SET;
 801f7d0:	4b0e      	ldr	r3, [pc, #56]	; (801f80c <HTTP_Firmware_Version+0xd8>)
 801f7d2:	2201      	movs	r2, #1
 801f7d4:	701a      	strb	r2, [r3, #0]
			}

		}
		temp_version_name_index = (temp_version_name_index + 1)% TEMP_VERSION_BUFFER_LENGTH;
 801f7d6:	4b09      	ldr	r3, [pc, #36]	; (801f7fc <HTTP_Firmware_Version+0xc8>)
 801f7d8:	781b      	ldrb	r3, [r3, #0]
 801f7da:	3301      	adds	r3, #1
 801f7dc:	4a0f      	ldr	r2, [pc, #60]	; (801f81c <HTTP_Firmware_Version+0xe8>)
 801f7de:	fb82 1203 	smull	r1, r2, r2, r3
 801f7e2:	1151      	asrs	r1, r2, #5
 801f7e4:	17da      	asrs	r2, r3, #31
 801f7e6:	1a8a      	subs	r2, r1, r2
 801f7e8:	2164      	movs	r1, #100	; 0x64
 801f7ea:	fb01 f202 	mul.w	r2, r1, r2
 801f7ee:	1a9a      	subs	r2, r3, r2
 801f7f0:	b2d2      	uxtb	r2, r2
 801f7f2:	4b02      	ldr	r3, [pc, #8]	; (801f7fc <HTTP_Firmware_Version+0xc8>)
 801f7f4:	701a      	strb	r2, [r3, #0]
	}
	return RESET;
 801f7f6:	2300      	movs	r3, #0
}
 801f7f8:	4618      	mov	r0, r3
 801f7fa:	bd98      	pop	{r3, r4, r7, pc}
 801f7fc:	200001b0 	.word	0x200001b0
 801f800:	20003f14 	.word	0x20003f14
 801f804:	08024e68 	.word	0x08024e68
 801f808:	200001b1 	.word	0x200001b1
 801f80c:	200001b2 	.word	0x200001b2
 801f810:	20000198 	.word	0x20000198
 801f814:	2000252c 	.word	0x2000252c
 801f818:	08024e78 	.word	0x08024e78
 801f81c:	51eb851f 	.word	0x51eb851f

0801f820 <is_Firmware_Line_Data_Correct>:

/*
 * Line is: ":0101010101010 and checksum :01, last is "\r\n""
 * We ignore ':' character and calculate checksum from 01....010 and ignore checksum value
 */
FlagStatus is_Firmware_Line_Data_Correct(uint8_t *buffer, uint16_t buffer_len){
 801f820:	b590      	push	{r4, r7, lr}
 801f822:	b085      	sub	sp, #20
 801f824:	af00      	add	r7, sp, #0
 801f826:	6078      	str	r0, [r7, #4]
 801f828:	460b      	mov	r3, r1
 801f82a:	807b      	strh	r3, [r7, #2]
	FlagStatus flag_ret;
	checksum = 0;
 801f82c:	4b2e      	ldr	r3, [pc, #184]	; (801f8e8 <is_Firmware_Line_Data_Correct+0xc8>)
 801f82e:	2200      	movs	r2, #0
 801f830:	701a      	strb	r2, [r3, #0]

	for (uint16_t var = 0; var < buffer_len - 3 - 2; var=var+2) {
 801f832:	2300      	movs	r3, #0
 801f834:	81fb      	strh	r3, [r7, #14]
 801f836:	e01f      	b.n	801f878 <is_Firmware_Line_Data_Correct+0x58>
//		sprintf(log,"%c-%c\r\n",buffer[var],buffer[var+1]);
//		LOG(log);
		checksum = checksum + (Char2Hex(buffer[var]) << 4) + Char2Hex(buffer[var+1]);
 801f838:	89fb      	ldrh	r3, [r7, #14]
 801f83a:	687a      	ldr	r2, [r7, #4]
 801f83c:	4413      	add	r3, r2
 801f83e:	781b      	ldrb	r3, [r3, #0]
 801f840:	4618      	mov	r0, r3
 801f842:	f000 fc17 	bl	8020074 <Char2Hex>
 801f846:	4603      	mov	r3, r0
 801f848:	b2db      	uxtb	r3, r3
 801f84a:	011b      	lsls	r3, r3, #4
 801f84c:	b2da      	uxtb	r2, r3
 801f84e:	4b26      	ldr	r3, [pc, #152]	; (801f8e8 <is_Firmware_Line_Data_Correct+0xc8>)
 801f850:	781b      	ldrb	r3, [r3, #0]
 801f852:	4413      	add	r3, r2
 801f854:	b2dc      	uxtb	r4, r3
 801f856:	89fb      	ldrh	r3, [r7, #14]
 801f858:	3301      	adds	r3, #1
 801f85a:	687a      	ldr	r2, [r7, #4]
 801f85c:	4413      	add	r3, r2
 801f85e:	781b      	ldrb	r3, [r3, #0]
 801f860:	4618      	mov	r0, r3
 801f862:	f000 fc07 	bl	8020074 <Char2Hex>
 801f866:	4603      	mov	r3, r0
 801f868:	b2db      	uxtb	r3, r3
 801f86a:	4423      	add	r3, r4
 801f86c:	b2da      	uxtb	r2, r3
 801f86e:	4b1e      	ldr	r3, [pc, #120]	; (801f8e8 <is_Firmware_Line_Data_Correct+0xc8>)
 801f870:	701a      	strb	r2, [r3, #0]
	for (uint16_t var = 0; var < buffer_len - 3 - 2; var=var+2) {
 801f872:	89fb      	ldrh	r3, [r7, #14]
 801f874:	3302      	adds	r3, #2
 801f876:	81fb      	strh	r3, [r7, #14]
 801f878:	89fa      	ldrh	r2, [r7, #14]
 801f87a:	887b      	ldrh	r3, [r7, #2]
 801f87c:	3b05      	subs	r3, #5
 801f87e:	429a      	cmp	r2, r3
 801f880:	dbda      	blt.n	801f838 <is_Firmware_Line_Data_Correct+0x18>
	}
	checksum =~checksum;
 801f882:	4b19      	ldr	r3, [pc, #100]	; (801f8e8 <is_Firmware_Line_Data_Correct+0xc8>)
 801f884:	781b      	ldrb	r3, [r3, #0]
 801f886:	43db      	mvns	r3, r3
 801f888:	b2da      	uxtb	r2, r3
 801f88a:	4b17      	ldr	r3, [pc, #92]	; (801f8e8 <is_Firmware_Line_Data_Correct+0xc8>)
 801f88c:	701a      	strb	r2, [r3, #0]
	checksum += 1;
 801f88e:	4b16      	ldr	r3, [pc, #88]	; (801f8e8 <is_Firmware_Line_Data_Correct+0xc8>)
 801f890:	781b      	ldrb	r3, [r3, #0]
 801f892:	3301      	adds	r3, #1
 801f894:	b2da      	uxtb	r2, r3
 801f896:	4b14      	ldr	r3, [pc, #80]	; (801f8e8 <is_Firmware_Line_Data_Correct+0xc8>)
 801f898:	701a      	strb	r2, [r3, #0]
	uint8_t checksum_inline = (Char2Hex(buffer[buffer_len - 3 -2 ]) << 4) + Char2Hex(buffer[buffer_len -3-2 +1 ]);
 801f89a:	887b      	ldrh	r3, [r7, #2]
 801f89c:	3b05      	subs	r3, #5
 801f89e:	687a      	ldr	r2, [r7, #4]
 801f8a0:	4413      	add	r3, r2
 801f8a2:	781b      	ldrb	r3, [r3, #0]
 801f8a4:	4618      	mov	r0, r3
 801f8a6:	f000 fbe5 	bl	8020074 <Char2Hex>
 801f8aa:	4603      	mov	r3, r0
 801f8ac:	b2db      	uxtb	r3, r3
 801f8ae:	011b      	lsls	r3, r3, #4
 801f8b0:	b2dc      	uxtb	r4, r3
 801f8b2:	887b      	ldrh	r3, [r7, #2]
 801f8b4:	3b04      	subs	r3, #4
 801f8b6:	687a      	ldr	r2, [r7, #4]
 801f8b8:	4413      	add	r3, r2
 801f8ba:	781b      	ldrb	r3, [r3, #0]
 801f8bc:	4618      	mov	r0, r3
 801f8be:	f000 fbd9 	bl	8020074 <Char2Hex>
 801f8c2:	4603      	mov	r3, r0
 801f8c4:	b2db      	uxtb	r3, r3
 801f8c6:	4423      	add	r3, r4
 801f8c8:	737b      	strb	r3, [r7, #13]
//	sprintf(log,"Check sum %x\r\n",checksum);
//	LOG(log);
//	sprintf(log,"Calculated Check sum %x\r\n",checksum_inline);
//	LOG(log);
	flag_ret = (checksum == checksum_inline);
 801f8ca:	4b07      	ldr	r3, [pc, #28]	; (801f8e8 <is_Firmware_Line_Data_Correct+0xc8>)
 801f8cc:	781b      	ldrb	r3, [r3, #0]
 801f8ce:	7b7a      	ldrb	r2, [r7, #13]
 801f8d0:	429a      	cmp	r2, r3
 801f8d2:	bf0c      	ite	eq
 801f8d4:	2301      	moveq	r3, #1
 801f8d6:	2300      	movne	r3, #0
 801f8d8:	b2db      	uxtb	r3, r3
 801f8da:	733b      	strb	r3, [r7, #12]
	return flag_ret;
 801f8dc:	7b3b      	ldrb	r3, [r7, #12]
}
 801f8de:	4618      	mov	r0, r3
 801f8e0:	3714      	adds	r7, #20
 801f8e2:	46bd      	mov	sp, r7
 801f8e4:	bd90      	pop	{r4, r7, pc}
 801f8e6:	bf00      	nop
 801f8e8:	200001a2 	.word	0x200001a2

0801f8ec <HTTP_Firmware_Data>:
uint8_t temp_at_response_buffer[LINE_BUFFER_LENGTH];
uint16_t temp_at_response_index = 0;
uint8_t temp_char;
char new_log[10];
FlagStatus first_http_read = SET;
FlagStatus HTTP_Firmware_Data(){
 801f8ec:	b590      	push	{r4, r7, lr}
 801f8ee:	b089      	sub	sp, #36	; 0x24
 801f8f0:	af00      	add	r7, sp, #0
	 *  	"data": "0ABCDGEGGASD...
	 *  			ASDB12312512412...
	 *  			01231291512925192"
	 *  So We need seperate "new_version" and "checksum" field out of "data"
	 */
	if(UART_SIM7600_Received_Buffer_Available()){
 801f8f2:	f7ff fb15 	bl	801ef20 <UART_SIM7600_Received_Buffer_Available>
 801f8f6:	4603      	mov	r3, r0
 801f8f8:	2b00      	cmp	r3, #0
 801f8fa:	f000 82bb 	beq.w	801fe74 <HTTP_Firmware_Data+0x588>
		temp_at_response_buffer[temp_at_response_index] = UART_SIM7600_Read_Received_Buffer();
 801f8fe:	4ba7      	ldr	r3, [pc, #668]	; (801fb9c <HTTP_Firmware_Data+0x2b0>)
 801f900:	881b      	ldrh	r3, [r3, #0]
 801f902:	461c      	mov	r4, r3
 801f904:	f7ff fb22 	bl	801ef4c <UART_SIM7600_Read_Received_Buffer>
 801f908:	4603      	mov	r3, r0
 801f90a:	461a      	mov	r2, r3
 801f90c:	4ba4      	ldr	r3, [pc, #656]	; (801fba0 <HTTP_Firmware_Data+0x2b4>)
 801f90e:	551a      	strb	r2, [r3, r4]
//		UART_DEBUG_Transmit_Size(temp_at_response_buffer + temp_at_response_index, 1);
		//Check if end of SIM respond
		if(isReceiveData_New(temp_at_response_buffer, temp_at_response_index+1, LINE_BUFFER_LENGTH, "\r\n+HTTPREAD: 0")){
 801f910:	4ba2      	ldr	r3, [pc, #648]	; (801fb9c <HTTP_Firmware_Data+0x2b0>)
 801f912:	881b      	ldrh	r3, [r3, #0]
 801f914:	1c59      	adds	r1, r3, #1
 801f916:	4ba3      	ldr	r3, [pc, #652]	; (801fba4 <HTTP_Firmware_Data+0x2b8>)
 801f918:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801f91c:	48a0      	ldr	r0, [pc, #640]	; (801fba0 <HTTP_Firmware_Data+0x2b4>)
 801f91e:	f000 fb61 	bl	801ffe4 <isReceiveData_New>
 801f922:	4603      	mov	r3, r0
 801f924:	2b00      	cmp	r3, #0
 801f926:	d060      	beq.n	801f9ea <HTTP_Firmware_Data+0xfe>
//			LOG("1");
			if(firmware_index >= PAGESIZE){
 801f928:	4b9f      	ldr	r3, [pc, #636]	; (801fba8 <HTTP_Firmware_Data+0x2bc>)
 801f92a:	881b      	ldrh	r3, [r3, #0]
 801f92c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f930:	d331      	bcc.n	801f996 <HTTP_Firmware_Data+0xaa>
				Flash_Erase(firmware_address, 1);
 801f932:	4b9e      	ldr	r3, [pc, #632]	; (801fbac <HTTP_Firmware_Data+0x2c0>)
 801f934:	681b      	ldr	r3, [r3, #0]
 801f936:	2101      	movs	r1, #1
 801f938:	4618      	mov	r0, r3
 801f93a:	f000 ffdb 	bl	80208f4 <Flash_Erase>
				Flash_Write_Char(firmware_address, firmware_data, PAGESIZE);
 801f93e:	4b9b      	ldr	r3, [pc, #620]	; (801fbac <HTTP_Firmware_Data+0x2c0>)
 801f940:	681b      	ldr	r3, [r3, #0]
 801f942:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801f946:	499a      	ldr	r1, [pc, #616]	; (801fbb0 <HTTP_Firmware_Data+0x2c4>)
 801f948:	4618      	mov	r0, r3
 801f94a:	f001 f825 	bl	8020998 <Flash_Write_Char>
//				LOG("3");
				firmware_address+= PAGESIZE;
 801f94e:	4b97      	ldr	r3, [pc, #604]	; (801fbac <HTTP_Firmware_Data+0x2c0>)
 801f950:	681b      	ldr	r3, [r3, #0]
 801f952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f956:	4a95      	ldr	r2, [pc, #596]	; (801fbac <HTTP_Firmware_Data+0x2c0>)
 801f958:	6013      	str	r3, [r2, #0]
//				memcpy(firmware_data,firmware_data+PAGESIZE,firmware_index-PAGESIZE);
				for (int var = PAGESIZE; var < firmware_index; ++var) {
 801f95a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f95e:	61fb      	str	r3, [r7, #28]
 801f960:	e00b      	b.n	801f97a <HTTP_Firmware_Data+0x8e>
					firmware_data[var-PAGESIZE] = firmware_data[var];
 801f962:	69fb      	ldr	r3, [r7, #28]
 801f964:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801f968:	4991      	ldr	r1, [pc, #580]	; (801fbb0 <HTTP_Firmware_Data+0x2c4>)
 801f96a:	69fa      	ldr	r2, [r7, #28]
 801f96c:	440a      	add	r2, r1
 801f96e:	7811      	ldrb	r1, [r2, #0]
 801f970:	4a8f      	ldr	r2, [pc, #572]	; (801fbb0 <HTTP_Firmware_Data+0x2c4>)
 801f972:	54d1      	strb	r1, [r2, r3]
				for (int var = PAGESIZE; var < firmware_index; ++var) {
 801f974:	69fb      	ldr	r3, [r7, #28]
 801f976:	3301      	adds	r3, #1
 801f978:	61fb      	str	r3, [r7, #28]
 801f97a:	4b8b      	ldr	r3, [pc, #556]	; (801fba8 <HTTP_Firmware_Data+0x2bc>)
 801f97c:	881b      	ldrh	r3, [r3, #0]
 801f97e:	461a      	mov	r2, r3
 801f980:	69fb      	ldr	r3, [r7, #28]
 801f982:	4293      	cmp	r3, r2
 801f984:	dbed      	blt.n	801f962 <HTTP_Firmware_Data+0x76>
				}
				firmware_index = firmware_index - PAGESIZE;
 801f986:	4b88      	ldr	r3, [pc, #544]	; (801fba8 <HTTP_Firmware_Data+0x2bc>)
 801f988:	881b      	ldrh	r3, [r3, #0]
 801f98a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801f98e:	b29a      	uxth	r2, r3
 801f990:	4b85      	ldr	r3, [pc, #532]	; (801fba8 <HTTP_Firmware_Data+0x2bc>)
 801f992:	801a      	strh	r2, [r3, #0]
 801f994:	e01e      	b.n	801f9d4 <HTTP_Firmware_Data+0xe8>
			}
			else if(http_response_remain == 0){
 801f996:	4b87      	ldr	r3, [pc, #540]	; (801fbb4 <HTTP_Firmware_Data+0x2c8>)
 801f998:	681b      	ldr	r3, [r3, #0]
 801f99a:	2b00      	cmp	r3, #0
 801f99c:	d11a      	bne.n	801f9d4 <HTTP_Firmware_Data+0xe8>
				Flash_Erase(firmware_address, firmware_index);
 801f99e:	4b83      	ldr	r3, [pc, #524]	; (801fbac <HTTP_Firmware_Data+0x2c0>)
 801f9a0:	681b      	ldr	r3, [r3, #0]
 801f9a2:	4a81      	ldr	r2, [pc, #516]	; (801fba8 <HTTP_Firmware_Data+0x2bc>)
 801f9a4:	8812      	ldrh	r2, [r2, #0]
 801f9a6:	4611      	mov	r1, r2
 801f9a8:	4618      	mov	r0, r3
 801f9aa:	f000 ffa3 	bl	80208f4 <Flash_Erase>
				Flash_Write_Char(firmware_address, firmware_data, firmware_index);
 801f9ae:	4b7f      	ldr	r3, [pc, #508]	; (801fbac <HTTP_Firmware_Data+0x2c0>)
 801f9b0:	681b      	ldr	r3, [r3, #0]
 801f9b2:	4a7d      	ldr	r2, [pc, #500]	; (801fba8 <HTTP_Firmware_Data+0x2bc>)
 801f9b4:	8812      	ldrh	r2, [r2, #0]
 801f9b6:	497e      	ldr	r1, [pc, #504]	; (801fbb0 <HTTP_Firmware_Data+0x2c4>)
 801f9b8:	4618      	mov	r0, r3
 801f9ba:	f000 ffed 	bl	8020998 <Flash_Write_Char>
				firmware_address+= firmware_index;
 801f9be:	4b7a      	ldr	r3, [pc, #488]	; (801fba8 <HTTP_Firmware_Data+0x2bc>)
 801f9c0:	881b      	ldrh	r3, [r3, #0]
 801f9c2:	461a      	mov	r2, r3
 801f9c4:	4b79      	ldr	r3, [pc, #484]	; (801fbac <HTTP_Firmware_Data+0x2c0>)
 801f9c6:	681b      	ldr	r3, [r3, #0]
 801f9c8:	4413      	add	r3, r2
 801f9ca:	4a78      	ldr	r2, [pc, #480]	; (801fbac <HTTP_Firmware_Data+0x2c0>)
 801f9cc:	6013      	str	r3, [r2, #0]
				firmware_index = 0;
 801f9ce:	4b76      	ldr	r3, [pc, #472]	; (801fba8 <HTTP_Firmware_Data+0x2bc>)
 801f9d0:	2200      	movs	r2, #0
 801f9d2:	801a      	strh	r2, [r3, #0]
			}
			line_buffer_index = line_buffer_index - strlen("\r\n+HTTPREAD: 0") + 1;
 801f9d4:	4b78      	ldr	r3, [pc, #480]	; (801fbb8 <HTTP_Firmware_Data+0x2cc>)
 801f9d6:	881b      	ldrh	r3, [r3, #0]
 801f9d8:	3b0d      	subs	r3, #13
 801f9da:	b29a      	uxth	r2, r3
 801f9dc:	4b76      	ldr	r3, [pc, #472]	; (801fbb8 <HTTP_Firmware_Data+0x2cc>)
 801f9de:	801a      	strh	r2, [r3, #0]
			start_record_firmware_data = RESET;
 801f9e0:	4b76      	ldr	r3, [pc, #472]	; (801fbbc <HTTP_Firmware_Data+0x2d0>)
 801f9e2:	2200      	movs	r2, #0
 801f9e4:	701a      	strb	r2, [r3, #0]
			return SET;
 801f9e6:	2301      	movs	r3, #1
 801f9e8:	e245      	b.n	801fe76 <HTTP_Firmware_Data+0x58a>
		}
		// Check whether start of SIM Respond
		else if(isReceiveData_New(temp_at_response_buffer, temp_at_response_index+1, LINE_BUFFER_LENGTH, "HTTPREAD: DATA")){
 801f9ea:	4b6c      	ldr	r3, [pc, #432]	; (801fb9c <HTTP_Firmware_Data+0x2b0>)
 801f9ec:	881b      	ldrh	r3, [r3, #0]
 801f9ee:	1c59      	adds	r1, r3, #1
 801f9f0:	4b73      	ldr	r3, [pc, #460]	; (801fbc0 <HTTP_Firmware_Data+0x2d4>)
 801f9f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801f9f6:	486a      	ldr	r0, [pc, #424]	; (801fba0 <HTTP_Firmware_Data+0x2b4>)
 801f9f8:	f000 faf4 	bl	801ffe4 <isReceiveData_New>
 801f9fc:	4603      	mov	r3, r0
 801f9fe:	2b00      	cmp	r3, #0
 801fa00:	d004      	beq.n	801fa0c <HTTP_Firmware_Data+0x120>
//			LOG("2");
			prepare_record_firmware_data = SET;
 801fa02:	4b70      	ldr	r3, [pc, #448]	; (801fbc4 <HTTP_Firmware_Data+0x2d8>)
 801fa04:	2201      	movs	r2, #1
 801fa06:	701a      	strb	r2, [r3, #0]
			return RESET;
 801fa08:	2300      	movs	r3, #0
 801fa0a:	e234      	b.n	801fe76 <HTTP_Firmware_Data+0x58a>
		}
		else if(prepare_record_firmware_data){
 801fa0c:	4b6d      	ldr	r3, [pc, #436]	; (801fbc4 <HTTP_Firmware_Data+0x2d8>)
 801fa0e:	781b      	ldrb	r3, [r3, #0]
 801fa10:	2b00      	cmp	r3, #0
 801fa12:	d014      	beq.n	801fa3e <HTTP_Firmware_Data+0x152>
//			LOG("3");
			if(isReceiveData_New(temp_at_response_buffer, temp_at_response_index+1, LINE_BUFFER_LENGTH, "\r\n")){
 801fa14:	4b61      	ldr	r3, [pc, #388]	; (801fb9c <HTTP_Firmware_Data+0x2b0>)
 801fa16:	881b      	ldrh	r3, [r3, #0]
 801fa18:	1c59      	adds	r1, r3, #1
 801fa1a:	4b6b      	ldr	r3, [pc, #428]	; (801fbc8 <HTTP_Firmware_Data+0x2dc>)
 801fa1c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801fa20:	485f      	ldr	r0, [pc, #380]	; (801fba0 <HTTP_Firmware_Data+0x2b4>)
 801fa22:	f000 fadf 	bl	801ffe4 <isReceiveData_New>
 801fa26:	4603      	mov	r3, r0
 801fa28:	2b00      	cmp	r3, #0
 801fa2a:	f000 8212 	beq.w	801fe52 <HTTP_Firmware_Data+0x566>
				start_record_firmware_data = SET;
 801fa2e:	4b63      	ldr	r3, [pc, #396]	; (801fbbc <HTTP_Firmware_Data+0x2d0>)
 801fa30:	2201      	movs	r2, #1
 801fa32:	701a      	strb	r2, [r3, #0]
				prepare_record_firmware_data = RESET;
 801fa34:	4b63      	ldr	r3, [pc, #396]	; (801fbc4 <HTTP_Firmware_Data+0x2d8>)
 801fa36:	2200      	movs	r2, #0
 801fa38:	701a      	strb	r2, [r3, #0]
				// reset line_index
				return RESET;
 801fa3a:	2300      	movs	r3, #0
 801fa3c:	e21b      	b.n	801fe76 <HTTP_Firmware_Data+0x58a>
			}
		}
		else if(start_record_firmware_data){
 801fa3e:	4b5f      	ldr	r3, [pc, #380]	; (801fbbc <HTTP_Firmware_Data+0x2d0>)
 801fa40:	781b      	ldrb	r3, [r3, #0]
 801fa42:	2b00      	cmp	r3, #0
 801fa44:	f000 8205 	beq.w	801fe52 <HTTP_Firmware_Data+0x566>
//			LOG("4");
			// Check whether that data is not end of HTTP READ
			line_buffer[line_buffer_index] = temp_at_response_buffer[temp_at_response_index];
 801fa48:	4b54      	ldr	r3, [pc, #336]	; (801fb9c <HTTP_Firmware_Data+0x2b0>)
 801fa4a:	881b      	ldrh	r3, [r3, #0]
 801fa4c:	4619      	mov	r1, r3
 801fa4e:	4b5a      	ldr	r3, [pc, #360]	; (801fbb8 <HTTP_Firmware_Data+0x2cc>)
 801fa50:	881b      	ldrh	r3, [r3, #0]
 801fa52:	461a      	mov	r2, r3
 801fa54:	4b52      	ldr	r3, [pc, #328]	; (801fba0 <HTTP_Firmware_Data+0x2b4>)
 801fa56:	5c59      	ldrb	r1, [r3, r1]
 801fa58:	4b5c      	ldr	r3, [pc, #368]	; (801fbcc <HTTP_Firmware_Data+0x2e0>)
 801fa5a:	5499      	strb	r1, [r3, r2]
			line_buffer_index = (line_buffer_index +1)%LINE_BUFFER_LENGTH;
 801fa5c:	4b56      	ldr	r3, [pc, #344]	; (801fbb8 <HTTP_Firmware_Data+0x2cc>)
 801fa5e:	881b      	ldrh	r3, [r3, #0]
 801fa60:	3301      	adds	r3, #1
 801fa62:	4a5b      	ldr	r2, [pc, #364]	; (801fbd0 <HTTP_Firmware_Data+0x2e4>)
 801fa64:	fb82 1203 	smull	r1, r2, r2, r3
 801fa68:	1151      	asrs	r1, r2, #5
 801fa6a:	17da      	asrs	r2, r3, #31
 801fa6c:	1a8a      	subs	r2, r1, r2
 801fa6e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 801fa72:	fb01 f202 	mul.w	r2, r1, r2
 801fa76:	1a9a      	subs	r2, r3, r2
 801fa78:	b292      	uxth	r2, r2
 801fa7a:	4b4f      	ldr	r3, [pc, #316]	; (801fbb8 <HTTP_Firmware_Data+0x2cc>)
 801fa7c:	801a      	strh	r2, [r3, #0]
			if(http_response_remain == 0){
 801fa7e:	4b4d      	ldr	r3, [pc, #308]	; (801fbb4 <HTTP_Firmware_Data+0x2c8>)
 801fa80:	681b      	ldr	r3, [r3, #0]
 801fa82:	2b00      	cmp	r3, #0
 801fa84:	f040 8112 	bne.w	801fcac <HTTP_Firmware_Data+0x3c0>
				if(isReceiveData_New(line_buffer, line_buffer_index, LINE_BUFFER_LENGTH, "\r\n+")||
 801fa88:	4b4b      	ldr	r3, [pc, #300]	; (801fbb8 <HTTP_Firmware_Data+0x2cc>)
 801fa8a:	881b      	ldrh	r3, [r3, #0]
 801fa8c:	4619      	mov	r1, r3
 801fa8e:	4b51      	ldr	r3, [pc, #324]	; (801fbd4 <HTTP_Firmware_Data+0x2e8>)
 801fa90:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801fa94:	484d      	ldr	r0, [pc, #308]	; (801fbcc <HTTP_Firmware_Data+0x2e0>)
 801fa96:	f000 faa5 	bl	801ffe4 <isReceiveData_New>
 801fa9a:	4603      	mov	r3, r0
 801fa9c:	2b00      	cmp	r3, #0
 801fa9e:	d10c      	bne.n	801faba <HTTP_Firmware_Data+0x1ce>
						isReceiveData_New(line_buffer, line_buffer_index, LINE_BUFFER_LENGTH, "\r\n:")){
 801faa0:	4b45      	ldr	r3, [pc, #276]	; (801fbb8 <HTTP_Firmware_Data+0x2cc>)
 801faa2:	881b      	ldrh	r3, [r3, #0]
 801faa4:	4619      	mov	r1, r3
 801faa6:	4b4c      	ldr	r3, [pc, #304]	; (801fbd8 <HTTP_Firmware_Data+0x2ec>)
 801faa8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801faac:	4847      	ldr	r0, [pc, #284]	; (801fbcc <HTTP_Firmware_Data+0x2e0>)
 801faae:	f000 fa99 	bl	801ffe4 <isReceiveData_New>
 801fab2:	4603      	mov	r3, r0
				if(isReceiveData_New(line_buffer, line_buffer_index, LINE_BUFFER_LENGTH, "\r\n+")||
 801fab4:	2b00      	cmp	r3, #0
 801fab6:	f000 81cc 	beq.w	801fe52 <HTTP_Firmware_Data+0x566>
					if(isReceiveData_New(line_buffer, line_buffer_index, LINE_BUFFER_LENGTH, "\r\n+")){
 801faba:	4b3f      	ldr	r3, [pc, #252]	; (801fbb8 <HTTP_Firmware_Data+0x2cc>)
 801fabc:	881b      	ldrh	r3, [r3, #0]
 801fabe:	4619      	mov	r1, r3
 801fac0:	4b44      	ldr	r3, [pc, #272]	; (801fbd4 <HTTP_Firmware_Data+0x2e8>)
 801fac2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801fac6:	4841      	ldr	r0, [pc, #260]	; (801fbcc <HTTP_Firmware_Data+0x2e0>)
 801fac8:	f000 fa8c 	bl	801ffe4 <isReceiveData_New>
 801facc:	4603      	mov	r3, r0
 801face:	2b00      	cmp	r3, #0
 801fad0:	d005      	beq.n	801fade <HTTP_Firmware_Data+0x1f2>
						line_buffer_index-=2;
 801fad2:	4b39      	ldr	r3, [pc, #228]	; (801fbb8 <HTTP_Firmware_Data+0x2cc>)
 801fad4:	881b      	ldrh	r3, [r3, #0]
 801fad6:	3b02      	subs	r3, #2
 801fad8:	b29a      	uxth	r2, r3
 801fada:	4b37      	ldr	r3, [pc, #220]	; (801fbb8 <HTTP_Firmware_Data+0x2cc>)
 801fadc:	801a      	strh	r2, [r3, #0]
//					sprintf(log,"\r\ntemp_at_response_index: %ld\r\n",temp_at_response_index);
//					LOG(log);
//					sprintf(log,"\r\nline_buffer_index: %ld\r\n",line_buffer_index);
//					LOG(log);
					// Calculator checksum
					if(first_http_read){
 801fade:	4b3f      	ldr	r3, [pc, #252]	; (801fbdc <HTTP_Firmware_Data+0x2f0>)
 801fae0:	781b      	ldrb	r3, [r3, #0]
 801fae2:	2b00      	cmp	r3, #0
 801fae4:	d006      	beq.n	801faf4 <HTTP_Firmware_Data+0x208>
						first_http_read = RESET;
 801fae6:	4b3d      	ldr	r3, [pc, #244]	; (801fbdc <HTTP_Firmware_Data+0x2f0>)
 801fae8:	2200      	movs	r2, #0
 801faea:	701a      	strb	r2, [r3, #0]
						line_buffer_index = 0;
 801faec:	4b32      	ldr	r3, [pc, #200]	; (801fbb8 <HTTP_Firmware_Data+0x2cc>)
 801faee:	2200      	movs	r2, #0
 801faf0:	801a      	strh	r2, [r3, #0]
 801faf2:	e1ae      	b.n	801fe52 <HTTP_Firmware_Data+0x566>
					}
					else{
						if(is_Firmware_Line_Data_Correct(line_buffer, line_buffer_index)){
 801faf4:	4b30      	ldr	r3, [pc, #192]	; (801fbb8 <HTTP_Firmware_Data+0x2cc>)
 801faf6:	881b      	ldrh	r3, [r3, #0]
 801faf8:	4619      	mov	r1, r3
 801fafa:	4834      	ldr	r0, [pc, #208]	; (801fbcc <HTTP_Firmware_Data+0x2e0>)
 801fafc:	f7ff fe90 	bl	801f820 <is_Firmware_Line_Data_Correct>
 801fb00:	4603      	mov	r3, r0
 801fb02:	2b00      	cmp	r3, #0
 801fb04:	f000 80ca 	beq.w	801fc9c <HTTP_Firmware_Data+0x3b0>
							// Check whether that line is the firmware data or not
							if(Char2Hex(line_buffer[7])==0){
 801fb08:	4b30      	ldr	r3, [pc, #192]	; (801fbcc <HTTP_Firmware_Data+0x2e0>)
 801fb0a:	79db      	ldrb	r3, [r3, #7]
 801fb0c:	4618      	mov	r0, r3
 801fb0e:	f000 fab1 	bl	8020074 <Char2Hex>
 801fb12:	4603      	mov	r3, r0
 801fb14:	2b00      	cmp	r3, #0
 801fb16:	f040 80bd 	bne.w	801fc94 <HTTP_Firmware_Data+0x3a8>
								firmware_address_curr_offet = ((uint16_t)(Char2Hex(line_buffer[2]))<<12) +((uint16_t)(Char2Hex(line_buffer[3]))<<8)
 801fb1a:	4b2c      	ldr	r3, [pc, #176]	; (801fbcc <HTTP_Firmware_Data+0x2e0>)
 801fb1c:	789b      	ldrb	r3, [r3, #2]
 801fb1e:	4618      	mov	r0, r3
 801fb20:	f000 faa8 	bl	8020074 <Char2Hex>
 801fb24:	4603      	mov	r3, r0
 801fb26:	b29b      	uxth	r3, r3
 801fb28:	031b      	lsls	r3, r3, #12
 801fb2a:	b29c      	uxth	r4, r3
 801fb2c:	4b27      	ldr	r3, [pc, #156]	; (801fbcc <HTTP_Firmware_Data+0x2e0>)
 801fb2e:	78db      	ldrb	r3, [r3, #3]
 801fb30:	4618      	mov	r0, r3
 801fb32:	f000 fa9f 	bl	8020074 <Char2Hex>
 801fb36:	4603      	mov	r3, r0
 801fb38:	b29b      	uxth	r3, r3
 801fb3a:	021b      	lsls	r3, r3, #8
 801fb3c:	b29b      	uxth	r3, r3
 801fb3e:	4423      	add	r3, r4
 801fb40:	b29c      	uxth	r4, r3
																		+((uint16_t)(Char2Hex(line_buffer[4]))<<4)+(uint16_t)(Char2Hex(line_buffer[5]));
 801fb42:	4b22      	ldr	r3, [pc, #136]	; (801fbcc <HTTP_Firmware_Data+0x2e0>)
 801fb44:	791b      	ldrb	r3, [r3, #4]
 801fb46:	4618      	mov	r0, r3
 801fb48:	f000 fa94 	bl	8020074 <Char2Hex>
 801fb4c:	4603      	mov	r3, r0
 801fb4e:	b29b      	uxth	r3, r3
 801fb50:	011b      	lsls	r3, r3, #4
 801fb52:	b29b      	uxth	r3, r3
 801fb54:	4423      	add	r3, r4
 801fb56:	b29c      	uxth	r4, r3
 801fb58:	4b1c      	ldr	r3, [pc, #112]	; (801fbcc <HTTP_Firmware_Data+0x2e0>)
 801fb5a:	795b      	ldrb	r3, [r3, #5]
 801fb5c:	4618      	mov	r0, r3
 801fb5e:	f000 fa89 	bl	8020074 <Char2Hex>
 801fb62:	4603      	mov	r3, r0
 801fb64:	b29b      	uxth	r3, r3
 801fb66:	4423      	add	r3, r4
 801fb68:	b29a      	uxth	r2, r3
								firmware_address_curr_offet = ((uint16_t)(Char2Hex(line_buffer[2]))<<12) +((uint16_t)(Char2Hex(line_buffer[3]))<<8)
 801fb6a:	4b1d      	ldr	r3, [pc, #116]	; (801fbe0 <HTTP_Firmware_Data+0x2f4>)
 801fb6c:	801a      	strh	r2, [r3, #0]
								uint16_t num_byte_FF_add_to_end_buffer = 0;
 801fb6e:	2300      	movs	r3, #0
 801fb70:	837b      	strh	r3, [r7, #26]
								if(firmware_address_prev_offet >= 0xFFF0){
 801fb72:	4b1c      	ldr	r3, [pc, #112]	; (801fbe4 <HTTP_Firmware_Data+0x2f8>)
 801fb74:	881b      	ldrh	r3, [r3, #0]
 801fb76:	f64f 72ef 	movw	r2, #65519	; 0xffef
 801fb7a:	4293      	cmp	r3, r2
 801fb7c:	d90a      	bls.n	801fb94 <HTTP_Firmware_Data+0x2a8>
									num_byte_FF_add_to_end_buffer = 0xFFFF - firmware_address_prev_offet + 1 + firmware_address_curr_offet - prev_num_byte;
 801fb7e:	4b18      	ldr	r3, [pc, #96]	; (801fbe0 <HTTP_Firmware_Data+0x2f4>)
 801fb80:	881a      	ldrh	r2, [r3, #0]
 801fb82:	4b18      	ldr	r3, [pc, #96]	; (801fbe4 <HTTP_Firmware_Data+0x2f8>)
 801fb84:	881b      	ldrh	r3, [r3, #0]
 801fb86:	1ad3      	subs	r3, r2, r3
 801fb88:	b29a      	uxth	r2, r3
 801fb8a:	4b17      	ldr	r3, [pc, #92]	; (801fbe8 <HTTP_Firmware_Data+0x2fc>)
 801fb8c:	781b      	ldrb	r3, [r3, #0]
 801fb8e:	b29b      	uxth	r3, r3
 801fb90:	1ad3      	subs	r3, r2, r3
 801fb92:	837b      	strh	r3, [r7, #26]
								}
								for (int var = 0; var < num_byte_FF_add_to_end_buffer; var++) {
 801fb94:	2300      	movs	r3, #0
 801fb96:	617b      	str	r3, [r7, #20]
 801fb98:	e035      	b.n	801fc06 <HTTP_Firmware_Data+0x31a>
 801fb9a:	bf00      	nop
 801fb9c:	200001b6 	.word	0x200001b6
 801fba0:	200023fc 	.word	0x200023fc
 801fba4:	08024e7c 	.word	0x08024e7c
 801fba8:	200001a8 	.word	0x200001a8
 801fbac:	20000080 	.word	0x20000080
 801fbb0:	20002548 	.word	0x20002548
 801fbb4:	200001a4 	.word	0x200001a4
 801fbb8:	200035e2 	.word	0x200035e2
 801fbbc:	200001b4 	.word	0x200001b4
 801fbc0:	08024e8c 	.word	0x08024e8c
 801fbc4:	200001b3 	.word	0x200001b3
 801fbc8:	08024e78 	.word	0x08024e78
 801fbcc:	200035e8 	.word	0x200035e8
 801fbd0:	1b4e81b5 	.word	0x1b4e81b5
 801fbd4:	08024e9c 	.word	0x08024e9c
 801fbd8:	08024ea0 	.word	0x08024ea0
 801fbdc:	200000e4 	.word	0x200000e4
 801fbe0:	20000086 	.word	0x20000086
 801fbe4:	20000084 	.word	0x20000084
 801fbe8:	20000088 	.word	0x20000088
									firmware_data[firmware_index++] = 0xFF;
 801fbec:	4ba4      	ldr	r3, [pc, #656]	; (801fe80 <HTTP_Firmware_Data+0x594>)
 801fbee:	881b      	ldrh	r3, [r3, #0]
 801fbf0:	1c5a      	adds	r2, r3, #1
 801fbf2:	b291      	uxth	r1, r2
 801fbf4:	4aa2      	ldr	r2, [pc, #648]	; (801fe80 <HTTP_Firmware_Data+0x594>)
 801fbf6:	8011      	strh	r1, [r2, #0]
 801fbf8:	461a      	mov	r2, r3
 801fbfa:	4ba2      	ldr	r3, [pc, #648]	; (801fe84 <HTTP_Firmware_Data+0x598>)
 801fbfc:	21ff      	movs	r1, #255	; 0xff
 801fbfe:	5499      	strb	r1, [r3, r2]
								for (int var = 0; var < num_byte_FF_add_to_end_buffer; var++) {
 801fc00:	697b      	ldr	r3, [r7, #20]
 801fc02:	3301      	adds	r3, #1
 801fc04:	617b      	str	r3, [r7, #20]
 801fc06:	8b7b      	ldrh	r3, [r7, #26]
 801fc08:	697a      	ldr	r2, [r7, #20]
 801fc0a:	429a      	cmp	r2, r3
 801fc0c:	dbee      	blt.n	801fbec <HTTP_Firmware_Data+0x300>
								}
								prev_num_byte = (Char2Hex(line_buffer[0])<<4) + Char2Hex(line_buffer[1]);
 801fc0e:	4b9e      	ldr	r3, [pc, #632]	; (801fe88 <HTTP_Firmware_Data+0x59c>)
 801fc10:	781b      	ldrb	r3, [r3, #0]
 801fc12:	4618      	mov	r0, r3
 801fc14:	f000 fa2e 	bl	8020074 <Char2Hex>
 801fc18:	4603      	mov	r3, r0
 801fc1a:	b2db      	uxtb	r3, r3
 801fc1c:	011b      	lsls	r3, r3, #4
 801fc1e:	b2dc      	uxtb	r4, r3
 801fc20:	4b99      	ldr	r3, [pc, #612]	; (801fe88 <HTTP_Firmware_Data+0x59c>)
 801fc22:	785b      	ldrb	r3, [r3, #1]
 801fc24:	4618      	mov	r0, r3
 801fc26:	f000 fa25 	bl	8020074 <Char2Hex>
 801fc2a:	4603      	mov	r3, r0
 801fc2c:	b2db      	uxtb	r3, r3
 801fc2e:	4423      	add	r3, r4
 801fc30:	b2da      	uxtb	r2, r3
 801fc32:	4b96      	ldr	r3, [pc, #600]	; (801fe8c <HTTP_Firmware_Data+0x5a0>)
 801fc34:	701a      	strb	r2, [r3, #0]
								firmware_address_prev_offet = firmware_address_curr_offet;
 801fc36:	4b96      	ldr	r3, [pc, #600]	; (801fe90 <HTTP_Firmware_Data+0x5a4>)
 801fc38:	881a      	ldrh	r2, [r3, #0]
 801fc3a:	4b96      	ldr	r3, [pc, #600]	; (801fe94 <HTTP_Firmware_Data+0x5a8>)
 801fc3c:	801a      	strh	r2, [r3, #0]


								for (int var = 8; var < line_buffer_index - 3 -2; var=var+2) {
 801fc3e:	2308      	movs	r3, #8
 801fc40:	613b      	str	r3, [r7, #16]
 801fc42:	e021      	b.n	801fc88 <HTTP_Firmware_Data+0x39c>
									//Save line to firmware data
									firmware_data[firmware_index++] = (Char2Hex(line_buffer[var])<<4)+ Char2Hex(line_buffer[var+1]);
 801fc44:	4a90      	ldr	r2, [pc, #576]	; (801fe88 <HTTP_Firmware_Data+0x59c>)
 801fc46:	693b      	ldr	r3, [r7, #16]
 801fc48:	4413      	add	r3, r2
 801fc4a:	781b      	ldrb	r3, [r3, #0]
 801fc4c:	4618      	mov	r0, r3
 801fc4e:	f000 fa11 	bl	8020074 <Char2Hex>
 801fc52:	4603      	mov	r3, r0
 801fc54:	b2db      	uxtb	r3, r3
 801fc56:	011b      	lsls	r3, r3, #4
 801fc58:	b2dc      	uxtb	r4, r3
 801fc5a:	693b      	ldr	r3, [r7, #16]
 801fc5c:	3301      	adds	r3, #1
 801fc5e:	4a8a      	ldr	r2, [pc, #552]	; (801fe88 <HTTP_Firmware_Data+0x59c>)
 801fc60:	5cd3      	ldrb	r3, [r2, r3]
 801fc62:	4618      	mov	r0, r3
 801fc64:	f000 fa06 	bl	8020074 <Char2Hex>
 801fc68:	4603      	mov	r3, r0
 801fc6a:	b2da      	uxtb	r2, r3
 801fc6c:	4b84      	ldr	r3, [pc, #528]	; (801fe80 <HTTP_Firmware_Data+0x594>)
 801fc6e:	881b      	ldrh	r3, [r3, #0]
 801fc70:	1c59      	adds	r1, r3, #1
 801fc72:	b288      	uxth	r0, r1
 801fc74:	4982      	ldr	r1, [pc, #520]	; (801fe80 <HTTP_Firmware_Data+0x594>)
 801fc76:	8008      	strh	r0, [r1, #0]
 801fc78:	4619      	mov	r1, r3
 801fc7a:	18a3      	adds	r3, r4, r2
 801fc7c:	b2da      	uxtb	r2, r3
 801fc7e:	4b81      	ldr	r3, [pc, #516]	; (801fe84 <HTTP_Firmware_Data+0x598>)
 801fc80:	545a      	strb	r2, [r3, r1]
								for (int var = 8; var < line_buffer_index - 3 -2; var=var+2) {
 801fc82:	693b      	ldr	r3, [r7, #16]
 801fc84:	3302      	adds	r3, #2
 801fc86:	613b      	str	r3, [r7, #16]
 801fc88:	4b83      	ldr	r3, [pc, #524]	; (801fe98 <HTTP_Firmware_Data+0x5ac>)
 801fc8a:	881b      	ldrh	r3, [r3, #0]
 801fc8c:	3b05      	subs	r3, #5
 801fc8e:	693a      	ldr	r2, [r7, #16]
 801fc90:	429a      	cmp	r2, r3
 801fc92:	dbd7      	blt.n	801fc44 <HTTP_Firmware_Data+0x358>
								}
							}
							line_buffer_index = 0;
 801fc94:	4b80      	ldr	r3, [pc, #512]	; (801fe98 <HTTP_Firmware_Data+0x5ac>)
 801fc96:	2200      	movs	r2, #0
 801fc98:	801a      	strh	r2, [r3, #0]
 801fc9a:	e0da      	b.n	801fe52 <HTTP_Firmware_Data+0x566>
						}
						else{
							checksum_correct = RESET;
 801fc9c:	4b7f      	ldr	r3, [pc, #508]	; (801fe9c <HTTP_Firmware_Data+0x5b0>)
 801fc9e:	2200      	movs	r2, #0
 801fca0:	701a      	strb	r2, [r3, #0]
							LOG("\r\nChecksum is Wrong\r\n");
 801fca2:	487f      	ldr	r0, [pc, #508]	; (801fea0 <HTTP_Firmware_Data+0x5b4>)
 801fca4:	f7ff f9aa 	bl	801effc <UART_DEBUG_Transmit>
							return SET;
 801fca8:	2301      	movs	r3, #1
 801fcaa:	e0e4      	b.n	801fe76 <HTTP_Firmware_Data+0x58a>
						}
					}
				}
			}
			else{
				if(isReceiveData_New(line_buffer, line_buffer_index, LINE_BUFFER_LENGTH, "\r\n:")){
 801fcac:	4b7a      	ldr	r3, [pc, #488]	; (801fe98 <HTTP_Firmware_Data+0x5ac>)
 801fcae:	881b      	ldrh	r3, [r3, #0]
 801fcb0:	4619      	mov	r1, r3
 801fcb2:	4b7c      	ldr	r3, [pc, #496]	; (801fea4 <HTTP_Firmware_Data+0x5b8>)
 801fcb4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801fcb8:	4873      	ldr	r0, [pc, #460]	; (801fe88 <HTTP_Firmware_Data+0x59c>)
 801fcba:	f000 f993 	bl	801ffe4 <isReceiveData_New>
 801fcbe:	4603      	mov	r3, r0
 801fcc0:	2b00      	cmp	r3, #0
 801fcc2:	f000 80c6 	beq.w	801fe52 <HTTP_Firmware_Data+0x566>
	//				sprintf(log,"\r\n temp_at_response_index: %ld\r\n",temp_at_response_index);
	//				LOG(log);
	//				sprintf(log,"\r\n line_buffer_index: %ld\r\n",line_buffer_index);
	//				LOG(log);
					// Calculator checksum
					if(first_http_read){
 801fcc6:	4b78      	ldr	r3, [pc, #480]	; (801fea8 <HTTP_Firmware_Data+0x5bc>)
 801fcc8:	781b      	ldrb	r3, [r3, #0]
 801fcca:	2b00      	cmp	r3, #0
 801fccc:	d006      	beq.n	801fcdc <HTTP_Firmware_Data+0x3f0>
						first_http_read = RESET;
 801fcce:	4b76      	ldr	r3, [pc, #472]	; (801fea8 <HTTP_Firmware_Data+0x5bc>)
 801fcd0:	2200      	movs	r2, #0
 801fcd2:	701a      	strb	r2, [r3, #0]
						line_buffer_index = 0;
 801fcd4:	4b70      	ldr	r3, [pc, #448]	; (801fe98 <HTTP_Firmware_Data+0x5ac>)
 801fcd6:	2200      	movs	r2, #0
 801fcd8:	801a      	strh	r2, [r3, #0]
 801fcda:	e0ba      	b.n	801fe52 <HTTP_Firmware_Data+0x566>
					}
					else{
						if(is_Firmware_Line_Data_Correct(line_buffer, line_buffer_index)){
 801fcdc:	4b6e      	ldr	r3, [pc, #440]	; (801fe98 <HTTP_Firmware_Data+0x5ac>)
 801fcde:	881b      	ldrh	r3, [r3, #0]
 801fce0:	4619      	mov	r1, r3
 801fce2:	4869      	ldr	r0, [pc, #420]	; (801fe88 <HTTP_Firmware_Data+0x59c>)
 801fce4:	f7ff fd9c 	bl	801f820 <is_Firmware_Line_Data_Correct>
 801fce8:	4603      	mov	r3, r0
 801fcea:	2b00      	cmp	r3, #0
 801fcec:	f000 80a9 	beq.w	801fe42 <HTTP_Firmware_Data+0x556>
							// Check whether that line is the firmware data or not
							if(Char2Hex(line_buffer[7])==0){
 801fcf0:	4b65      	ldr	r3, [pc, #404]	; (801fe88 <HTTP_Firmware_Data+0x59c>)
 801fcf2:	79db      	ldrb	r3, [r3, #7]
 801fcf4:	4618      	mov	r0, r3
 801fcf6:	f000 f9bd 	bl	8020074 <Char2Hex>
 801fcfa:	4603      	mov	r3, r0
 801fcfc:	2b00      	cmp	r3, #0
 801fcfe:	f040 809c 	bne.w	801fe3a <HTTP_Firmware_Data+0x54e>
								firmware_address_curr_offet = ((uint16_t)(Char2Hex(line_buffer[2]))<<12) +((uint16_t)(Char2Hex(line_buffer[3]))<<8)
 801fd02:	4b61      	ldr	r3, [pc, #388]	; (801fe88 <HTTP_Firmware_Data+0x59c>)
 801fd04:	789b      	ldrb	r3, [r3, #2]
 801fd06:	4618      	mov	r0, r3
 801fd08:	f000 f9b4 	bl	8020074 <Char2Hex>
 801fd0c:	4603      	mov	r3, r0
 801fd0e:	b29b      	uxth	r3, r3
 801fd10:	031b      	lsls	r3, r3, #12
 801fd12:	b29c      	uxth	r4, r3
 801fd14:	4b5c      	ldr	r3, [pc, #368]	; (801fe88 <HTTP_Firmware_Data+0x59c>)
 801fd16:	78db      	ldrb	r3, [r3, #3]
 801fd18:	4618      	mov	r0, r3
 801fd1a:	f000 f9ab 	bl	8020074 <Char2Hex>
 801fd1e:	4603      	mov	r3, r0
 801fd20:	b29b      	uxth	r3, r3
 801fd22:	021b      	lsls	r3, r3, #8
 801fd24:	b29b      	uxth	r3, r3
 801fd26:	4423      	add	r3, r4
 801fd28:	b29c      	uxth	r4, r3
																		+((uint16_t)(Char2Hex(line_buffer[4]))<<4)+(uint16_t)(Char2Hex(line_buffer[5]));
 801fd2a:	4b57      	ldr	r3, [pc, #348]	; (801fe88 <HTTP_Firmware_Data+0x59c>)
 801fd2c:	791b      	ldrb	r3, [r3, #4]
 801fd2e:	4618      	mov	r0, r3
 801fd30:	f000 f9a0 	bl	8020074 <Char2Hex>
 801fd34:	4603      	mov	r3, r0
 801fd36:	b29b      	uxth	r3, r3
 801fd38:	011b      	lsls	r3, r3, #4
 801fd3a:	b29b      	uxth	r3, r3
 801fd3c:	4423      	add	r3, r4
 801fd3e:	b29c      	uxth	r4, r3
 801fd40:	4b51      	ldr	r3, [pc, #324]	; (801fe88 <HTTP_Firmware_Data+0x59c>)
 801fd42:	795b      	ldrb	r3, [r3, #5]
 801fd44:	4618      	mov	r0, r3
 801fd46:	f000 f995 	bl	8020074 <Char2Hex>
 801fd4a:	4603      	mov	r3, r0
 801fd4c:	b29b      	uxth	r3, r3
 801fd4e:	4423      	add	r3, r4
 801fd50:	b29a      	uxth	r2, r3
								firmware_address_curr_offet = ((uint16_t)(Char2Hex(line_buffer[2]))<<12) +((uint16_t)(Char2Hex(line_buffer[3]))<<8)
 801fd52:	4b4f      	ldr	r3, [pc, #316]	; (801fe90 <HTTP_Firmware_Data+0x5a4>)
 801fd54:	801a      	strh	r2, [r3, #0]
								uint16_t num_byte_FF_add_to_end_buffer = 0;
 801fd56:	2300      	movs	r3, #0
 801fd58:	80fb      	strh	r3, [r7, #6]
								if(firmware_address_prev_offet >= 0xFFF0){
 801fd5a:	4b4e      	ldr	r3, [pc, #312]	; (801fe94 <HTTP_Firmware_Data+0x5a8>)
 801fd5c:	881b      	ldrh	r3, [r3, #0]
 801fd5e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 801fd62:	4293      	cmp	r3, r2
 801fd64:	d90a      	bls.n	801fd7c <HTTP_Firmware_Data+0x490>
									num_byte_FF_add_to_end_buffer = 0xFFFF - firmware_address_prev_offet + 1 + firmware_address_curr_offet - prev_num_byte;
 801fd66:	4b4a      	ldr	r3, [pc, #296]	; (801fe90 <HTTP_Firmware_Data+0x5a4>)
 801fd68:	881a      	ldrh	r2, [r3, #0]
 801fd6a:	4b4a      	ldr	r3, [pc, #296]	; (801fe94 <HTTP_Firmware_Data+0x5a8>)
 801fd6c:	881b      	ldrh	r3, [r3, #0]
 801fd6e:	1ad3      	subs	r3, r2, r3
 801fd70:	b29a      	uxth	r2, r3
 801fd72:	4b46      	ldr	r3, [pc, #280]	; (801fe8c <HTTP_Firmware_Data+0x5a0>)
 801fd74:	781b      	ldrb	r3, [r3, #0]
 801fd76:	b29b      	uxth	r3, r3
 801fd78:	1ad3      	subs	r3, r2, r3
 801fd7a:	80fb      	strh	r3, [r7, #6]
								}
								for (int var = 0; var < firmware_address_curr_offet - firmware_address_prev_offet - prev_num_byte; var++) {
 801fd7c:	2300      	movs	r3, #0
 801fd7e:	60fb      	str	r3, [r7, #12]
 801fd80:	e00c      	b.n	801fd9c <HTTP_Firmware_Data+0x4b0>
									firmware_data[firmware_index++] = 0xFF;
 801fd82:	4b3f      	ldr	r3, [pc, #252]	; (801fe80 <HTTP_Firmware_Data+0x594>)
 801fd84:	881b      	ldrh	r3, [r3, #0]
 801fd86:	1c5a      	adds	r2, r3, #1
 801fd88:	b291      	uxth	r1, r2
 801fd8a:	4a3d      	ldr	r2, [pc, #244]	; (801fe80 <HTTP_Firmware_Data+0x594>)
 801fd8c:	8011      	strh	r1, [r2, #0]
 801fd8e:	461a      	mov	r2, r3
 801fd90:	4b3c      	ldr	r3, [pc, #240]	; (801fe84 <HTTP_Firmware_Data+0x598>)
 801fd92:	21ff      	movs	r1, #255	; 0xff
 801fd94:	5499      	strb	r1, [r3, r2]
								for (int var = 0; var < firmware_address_curr_offet - firmware_address_prev_offet - prev_num_byte; var++) {
 801fd96:	68fb      	ldr	r3, [r7, #12]
 801fd98:	3301      	adds	r3, #1
 801fd9a:	60fb      	str	r3, [r7, #12]
 801fd9c:	4b3c      	ldr	r3, [pc, #240]	; (801fe90 <HTTP_Firmware_Data+0x5a4>)
 801fd9e:	881b      	ldrh	r3, [r3, #0]
 801fda0:	461a      	mov	r2, r3
 801fda2:	4b3c      	ldr	r3, [pc, #240]	; (801fe94 <HTTP_Firmware_Data+0x5a8>)
 801fda4:	881b      	ldrh	r3, [r3, #0]
 801fda6:	1ad3      	subs	r3, r2, r3
 801fda8:	4a38      	ldr	r2, [pc, #224]	; (801fe8c <HTTP_Firmware_Data+0x5a0>)
 801fdaa:	7812      	ldrb	r2, [r2, #0]
 801fdac:	1a9b      	subs	r3, r3, r2
 801fdae:	68fa      	ldr	r2, [r7, #12]
 801fdb0:	429a      	cmp	r2, r3
 801fdb2:	dbe6      	blt.n	801fd82 <HTTP_Firmware_Data+0x496>
								}
								prev_num_byte = (Char2Hex(line_buffer[0])<<4) + Char2Hex(line_buffer[1]);
 801fdb4:	4b34      	ldr	r3, [pc, #208]	; (801fe88 <HTTP_Firmware_Data+0x59c>)
 801fdb6:	781b      	ldrb	r3, [r3, #0]
 801fdb8:	4618      	mov	r0, r3
 801fdba:	f000 f95b 	bl	8020074 <Char2Hex>
 801fdbe:	4603      	mov	r3, r0
 801fdc0:	b2db      	uxtb	r3, r3
 801fdc2:	011b      	lsls	r3, r3, #4
 801fdc4:	b2dc      	uxtb	r4, r3
 801fdc6:	4b30      	ldr	r3, [pc, #192]	; (801fe88 <HTTP_Firmware_Data+0x59c>)
 801fdc8:	785b      	ldrb	r3, [r3, #1]
 801fdca:	4618      	mov	r0, r3
 801fdcc:	f000 f952 	bl	8020074 <Char2Hex>
 801fdd0:	4603      	mov	r3, r0
 801fdd2:	b2db      	uxtb	r3, r3
 801fdd4:	4423      	add	r3, r4
 801fdd6:	b2da      	uxtb	r2, r3
 801fdd8:	4b2c      	ldr	r3, [pc, #176]	; (801fe8c <HTTP_Firmware_Data+0x5a0>)
 801fdda:	701a      	strb	r2, [r3, #0]
								firmware_address_prev_offet = firmware_address_curr_offet;
 801fddc:	4b2c      	ldr	r3, [pc, #176]	; (801fe90 <HTTP_Firmware_Data+0x5a4>)
 801fdde:	881a      	ldrh	r2, [r3, #0]
 801fde0:	4b2c      	ldr	r3, [pc, #176]	; (801fe94 <HTTP_Firmware_Data+0x5a8>)
 801fde2:	801a      	strh	r2, [r3, #0]

								for (int var = 8; var < line_buffer_index - 3 -2; var=var+2) {
 801fde4:	2308      	movs	r3, #8
 801fde6:	60bb      	str	r3, [r7, #8]
 801fde8:	e021      	b.n	801fe2e <HTTP_Firmware_Data+0x542>
									//Save line to firmware data
									firmware_data[firmware_index++] = (Char2Hex(line_buffer[var])<<4)+ Char2Hex(line_buffer[var+1]);
 801fdea:	4a27      	ldr	r2, [pc, #156]	; (801fe88 <HTTP_Firmware_Data+0x59c>)
 801fdec:	68bb      	ldr	r3, [r7, #8]
 801fdee:	4413      	add	r3, r2
 801fdf0:	781b      	ldrb	r3, [r3, #0]
 801fdf2:	4618      	mov	r0, r3
 801fdf4:	f000 f93e 	bl	8020074 <Char2Hex>
 801fdf8:	4603      	mov	r3, r0
 801fdfa:	b2db      	uxtb	r3, r3
 801fdfc:	011b      	lsls	r3, r3, #4
 801fdfe:	b2dc      	uxtb	r4, r3
 801fe00:	68bb      	ldr	r3, [r7, #8]
 801fe02:	3301      	adds	r3, #1
 801fe04:	4a20      	ldr	r2, [pc, #128]	; (801fe88 <HTTP_Firmware_Data+0x59c>)
 801fe06:	5cd3      	ldrb	r3, [r2, r3]
 801fe08:	4618      	mov	r0, r3
 801fe0a:	f000 f933 	bl	8020074 <Char2Hex>
 801fe0e:	4603      	mov	r3, r0
 801fe10:	b2da      	uxtb	r2, r3
 801fe12:	4b1b      	ldr	r3, [pc, #108]	; (801fe80 <HTTP_Firmware_Data+0x594>)
 801fe14:	881b      	ldrh	r3, [r3, #0]
 801fe16:	1c59      	adds	r1, r3, #1
 801fe18:	b288      	uxth	r0, r1
 801fe1a:	4919      	ldr	r1, [pc, #100]	; (801fe80 <HTTP_Firmware_Data+0x594>)
 801fe1c:	8008      	strh	r0, [r1, #0]
 801fe1e:	4619      	mov	r1, r3
 801fe20:	18a3      	adds	r3, r4, r2
 801fe22:	b2da      	uxtb	r2, r3
 801fe24:	4b17      	ldr	r3, [pc, #92]	; (801fe84 <HTTP_Firmware_Data+0x598>)
 801fe26:	545a      	strb	r2, [r3, r1]
								for (int var = 8; var < line_buffer_index - 3 -2; var=var+2) {
 801fe28:	68bb      	ldr	r3, [r7, #8]
 801fe2a:	3302      	adds	r3, #2
 801fe2c:	60bb      	str	r3, [r7, #8]
 801fe2e:	4b1a      	ldr	r3, [pc, #104]	; (801fe98 <HTTP_Firmware_Data+0x5ac>)
 801fe30:	881b      	ldrh	r3, [r3, #0]
 801fe32:	3b05      	subs	r3, #5
 801fe34:	68ba      	ldr	r2, [r7, #8]
 801fe36:	429a      	cmp	r2, r3
 801fe38:	dbd7      	blt.n	801fdea <HTTP_Firmware_Data+0x4fe>
								}
							}
							line_buffer_index = 0;
 801fe3a:	4b17      	ldr	r3, [pc, #92]	; (801fe98 <HTTP_Firmware_Data+0x5ac>)
 801fe3c:	2200      	movs	r2, #0
 801fe3e:	801a      	strh	r2, [r3, #0]
 801fe40:	e007      	b.n	801fe52 <HTTP_Firmware_Data+0x566>
						}
						else{
							checksum_correct = RESET;
 801fe42:	4b16      	ldr	r3, [pc, #88]	; (801fe9c <HTTP_Firmware_Data+0x5b0>)
 801fe44:	2200      	movs	r2, #0
 801fe46:	701a      	strb	r2, [r3, #0]
							LOG("\r\nChecksum is Wrong\r\n");
 801fe48:	4815      	ldr	r0, [pc, #84]	; (801fea0 <HTTP_Firmware_Data+0x5b4>)
 801fe4a:	f7ff f8d7 	bl	801effc <UART_DEBUG_Transmit>
							return SET;
 801fe4e:	2301      	movs	r3, #1
 801fe50:	e011      	b.n	801fe76 <HTTP_Firmware_Data+0x58a>
						}
					}
				}
			}
		}
		temp_at_response_index = (temp_at_response_index +1)%LINE_BUFFER_LENGTH;
 801fe52:	4b16      	ldr	r3, [pc, #88]	; (801feac <HTTP_Firmware_Data+0x5c0>)
 801fe54:	881b      	ldrh	r3, [r3, #0]
 801fe56:	3301      	adds	r3, #1
 801fe58:	4a15      	ldr	r2, [pc, #84]	; (801feb0 <HTTP_Firmware_Data+0x5c4>)
 801fe5a:	fb82 1203 	smull	r1, r2, r2, r3
 801fe5e:	1151      	asrs	r1, r2, #5
 801fe60:	17da      	asrs	r2, r3, #31
 801fe62:	1a8a      	subs	r2, r1, r2
 801fe64:	f44f 7196 	mov.w	r1, #300	; 0x12c
 801fe68:	fb01 f202 	mul.w	r2, r1, r2
 801fe6c:	1a9a      	subs	r2, r3, r2
 801fe6e:	b292      	uxth	r2, r2
 801fe70:	4b0e      	ldr	r3, [pc, #56]	; (801feac <HTTP_Firmware_Data+0x5c0>)
 801fe72:	801a      	strh	r2, [r3, #0]
	}
	return RESET;
 801fe74:	2300      	movs	r3, #0
}
 801fe76:	4618      	mov	r0, r3
 801fe78:	3724      	adds	r7, #36	; 0x24
 801fe7a:	46bd      	mov	sp, r7
 801fe7c:	bd90      	pop	{r4, r7, pc}
 801fe7e:	bf00      	nop
 801fe80:	200001a8 	.word	0x200001a8
 801fe84:	20002548 	.word	0x20002548
 801fe88:	200035e8 	.word	0x200035e8
 801fe8c:	20000088 	.word	0x20000088
 801fe90:	20000086 	.word	0x20000086
 801fe94:	20000084 	.word	0x20000084
 801fe98:	200035e2 	.word	0x200035e2
 801fe9c:	2000007c 	.word	0x2000007c
 801fea0:	08024ea4 	.word	0x08024ea4
 801fea4:	08024ea0 	.word	0x08024ea0
 801fea8:	200000e4 	.word	0x200000e4
 801feac:	200001b6 	.word	0x200001b6
 801feb0:	1b4e81b5 	.word	0x1b4e81b5

0801feb4 <HTTP_Get_Content_Length>:



FlagStatus HTTP_Get_Content_Length(){
 801feb4:	b580      	push	{r7, lr}
 801feb6:	af00      	add	r7, sp, #0
	if(UART_SIM7600_Received_Buffer_Available()){
 801feb8:	f7ff f832 	bl	801ef20 <UART_SIM7600_Received_Buffer_Available>
 801febc:	4603      	mov	r3, r0
 801febe:	2b00      	cmp	r3, #0
 801fec0:	d029      	beq.n	801ff16 <HTTP_Get_Content_Length+0x62>
		temp = UART_SIM7600_Read_Received_Buffer();
 801fec2:	f7ff f843 	bl	801ef4c <UART_SIM7600_Read_Received_Buffer>
 801fec6:	4603      	mov	r3, r0
 801fec8:	461a      	mov	r2, r3
 801feca:	4b14      	ldr	r3, [pc, #80]	; (801ff1c <HTTP_Get_Content_Length+0x68>)
 801fecc:	701a      	strb	r2, [r3, #0]
		if(temp == '\r'){
 801fece:	4b13      	ldr	r3, [pc, #76]	; (801ff1c <HTTP_Get_Content_Length+0x68>)
 801fed0:	781b      	ldrb	r3, [r3, #0]
 801fed2:	2b0d      	cmp	r3, #13
 801fed4:	d104      	bne.n	801fee0 <HTTP_Get_Content_Length+0x2c>
			http_num_ignore = 0;
 801fed6:	4b12      	ldr	r3, [pc, #72]	; (801ff20 <HTTP_Get_Content_Length+0x6c>)
 801fed8:	2200      	movs	r2, #0
 801feda:	701a      	strb	r2, [r3, #0]
			return SET;
 801fedc:	2301      	movs	r3, #1
 801fede:	e01b      	b.n	801ff18 <HTTP_Get_Content_Length+0x64>
		}
		if(http_num_ignore==2){
 801fee0:	4b0f      	ldr	r3, [pc, #60]	; (801ff20 <HTTP_Get_Content_Length+0x6c>)
 801fee2:	781b      	ldrb	r3, [r3, #0]
 801fee4:	2b02      	cmp	r3, #2
 801fee6:	d10c      	bne.n	801ff02 <HTTP_Get_Content_Length+0x4e>
			content_length = content_length*10 + (uint32_t)temp - (uint32_t)48;
 801fee8:	4b0e      	ldr	r3, [pc, #56]	; (801ff24 <HTTP_Get_Content_Length+0x70>)
 801feea:	681a      	ldr	r2, [r3, #0]
 801feec:	4613      	mov	r3, r2
 801feee:	009b      	lsls	r3, r3, #2
 801fef0:	4413      	add	r3, r2
 801fef2:	005b      	lsls	r3, r3, #1
 801fef4:	461a      	mov	r2, r3
 801fef6:	4b09      	ldr	r3, [pc, #36]	; (801ff1c <HTTP_Get_Content_Length+0x68>)
 801fef8:	781b      	ldrb	r3, [r3, #0]
 801fefa:	4413      	add	r3, r2
 801fefc:	3b30      	subs	r3, #48	; 0x30
 801fefe:	4a09      	ldr	r2, [pc, #36]	; (801ff24 <HTTP_Get_Content_Length+0x70>)
 801ff00:	6013      	str	r3, [r2, #0]
		}
		if(temp == ','){
 801ff02:	4b06      	ldr	r3, [pc, #24]	; (801ff1c <HTTP_Get_Content_Length+0x68>)
 801ff04:	781b      	ldrb	r3, [r3, #0]
 801ff06:	2b2c      	cmp	r3, #44	; 0x2c
 801ff08:	d105      	bne.n	801ff16 <HTTP_Get_Content_Length+0x62>
			http_num_ignore ++;
 801ff0a:	4b05      	ldr	r3, [pc, #20]	; (801ff20 <HTTP_Get_Content_Length+0x6c>)
 801ff0c:	781b      	ldrb	r3, [r3, #0]
 801ff0e:	3301      	adds	r3, #1
 801ff10:	b2da      	uxtb	r2, r3
 801ff12:	4b03      	ldr	r3, [pc, #12]	; (801ff20 <HTTP_Get_Content_Length+0x6c>)
 801ff14:	701a      	strb	r2, [r3, #0]
		}
	}
	return RESET;
 801ff16:	2300      	movs	r3, #0
}
 801ff18:	4618      	mov	r0, r3
 801ff1a:	bd80      	pop	{r7, pc}
 801ff1c:	20001380 	.word	0x20001380
 801ff20:	20000199 	.word	0x20000199
 801ff24:	2000019c 	.word	0x2000019c

0801ff28 <HTTP_Set_State>:

/**
 * HTTP_Set_State()
 * @brief This is function for setting state to HTTP State Machine
 */
void HTTP_Set_State(HTTP_State _http_state){
 801ff28:	b480      	push	{r7}
 801ff2a:	b083      	sub	sp, #12
 801ff2c:	af00      	add	r7, sp, #0
 801ff2e:	4603      	mov	r3, r0
 801ff30:	71fb      	strb	r3, [r7, #7]
	http_state = _http_state;
 801ff32:	4a04      	ldr	r2, [pc, #16]	; (801ff44 <HTTP_Set_State+0x1c>)
 801ff34:	79fb      	ldrb	r3, [r7, #7]
 801ff36:	7013      	strb	r3, [r2, #0]
}
 801ff38:	bf00      	nop
 801ff3a:	370c      	adds	r7, #12
 801ff3c:	46bd      	mov	sp, r7
 801ff3e:	bc80      	pop	{r7}
 801ff40:	4770      	bx	lr
 801ff42:	bf00      	nop
 801ff44:	200001a1 	.word	0x200001a1

0801ff48 <Clear_Http_Command>:
void Reset_HttpConfiguration_State(){
	Reset_No_Board();
	HTTP_Set_State(HTTP_INIT);
}

void Clear_Http_Command(){
 801ff48:	b480      	push	{r7}
 801ff4a:	af00      	add	r7, sp, #0
	default_atcommand = SET;
 801ff4c:	4b03      	ldr	r3, [pc, #12]	; (801ff5c <Clear_Http_Command+0x14>)
 801ff4e:	2201      	movs	r2, #1
 801ff50:	701a      	strb	r2, [r3, #0]
}
 801ff52:	bf00      	nop
 801ff54:	46bd      	mov	sp, r7
 801ff56:	bc80      	pop	{r7}
 801ff58:	4770      	bx	lr
 801ff5a:	bf00      	nop
 801ff5c:	2000007a 	.word	0x2000007a

0801ff60 <HTTP_Return_Content_Length>:
void Set_Http_Command(char * atcommand){
	sprintf(http_at_command,"%s",atcommand);
	default_atcommand = RESET;
}

uint32_t HTTP_Return_Content_Length(){
 801ff60:	b480      	push	{r7}
 801ff62:	af00      	add	r7, sp, #0
	return content_length;
 801ff64:	4b02      	ldr	r3, [pc, #8]	; (801ff70 <HTTP_Return_Content_Length+0x10>)
 801ff66:	681b      	ldr	r3, [r3, #0]
}
 801ff68:	4618      	mov	r0, r3
 801ff6a:	46bd      	mov	sp, r7
 801ff6c:	bc80      	pop	{r7}
 801ff6e:	4770      	bx	lr
 801ff70:	2000019c 	.word	0x2000019c

0801ff74 <isReceiveData>:
 * 			buffer_len = 6 => It just point to "I love"
 * 			data = "love"
 *
 * 			=> return SET ~ True
 */
FlagStatus isReceiveData(char *buffer , uint16_t buffer_len , const char * data){
 801ff74:	b580      	push	{r7, lr}
 801ff76:	b086      	sub	sp, #24
 801ff78:	af00      	add	r7, sp, #0
 801ff7a:	60f8      	str	r0, [r7, #12]
 801ff7c:	460b      	mov	r3, r1
 801ff7e:	607a      	str	r2, [r7, #4]
 801ff80:	817b      	strh	r3, [r7, #10]
	uint8_t tmpLen = strlen((char*)data);
 801ff82:	6878      	ldr	r0, [r7, #4]
 801ff84:	f7fe f94e 	bl	801e224 <strlen>
 801ff88:	4603      	mov	r3, r0
 801ff8a:	75bb      	strb	r3, [r7, #22]
	if(buffer_len < tmpLen ){
 801ff8c:	7dbb      	ldrb	r3, [r7, #22]
 801ff8e:	b29b      	uxth	r3, r3
 801ff90:	897a      	ldrh	r2, [r7, #10]
 801ff92:	429a      	cmp	r2, r3
 801ff94:	d201      	bcs.n	801ff9a <isReceiveData+0x26>
		return RESET;
 801ff96:	2300      	movs	r3, #0
 801ff98:	e020      	b.n	801ffdc <isReceiveData+0x68>
	}
	else{
		uint8_t tmpLen = strlen((char*)data);
 801ff9a:	6878      	ldr	r0, [r7, #4]
 801ff9c:	f7fe f942 	bl	801e224 <strlen>
 801ffa0:	4603      	mov	r3, r0
 801ffa2:	757b      	strb	r3, [r7, #21]
		for (uint8_t index = 0; index < tmpLen; index++) {
 801ffa4:	2300      	movs	r3, #0
 801ffa6:	75fb      	strb	r3, [r7, #23]
 801ffa8:	e013      	b.n	801ffd2 <isReceiveData+0x5e>
			if(buffer[buffer_len -tmpLen + index] != data[index]){
 801ffaa:	897a      	ldrh	r2, [r7, #10]
 801ffac:	7d7b      	ldrb	r3, [r7, #21]
 801ffae:	1ad2      	subs	r2, r2, r3
 801ffb0:	7dfb      	ldrb	r3, [r7, #23]
 801ffb2:	4413      	add	r3, r2
 801ffb4:	461a      	mov	r2, r3
 801ffb6:	68fb      	ldr	r3, [r7, #12]
 801ffb8:	4413      	add	r3, r2
 801ffba:	781a      	ldrb	r2, [r3, #0]
 801ffbc:	7dfb      	ldrb	r3, [r7, #23]
 801ffbe:	6879      	ldr	r1, [r7, #4]
 801ffc0:	440b      	add	r3, r1
 801ffc2:	781b      	ldrb	r3, [r3, #0]
 801ffc4:	429a      	cmp	r2, r3
 801ffc6:	d001      	beq.n	801ffcc <isReceiveData+0x58>
				return RESET;
 801ffc8:	2300      	movs	r3, #0
 801ffca:	e007      	b.n	801ffdc <isReceiveData+0x68>
		for (uint8_t index = 0; index < tmpLen; index++) {
 801ffcc:	7dfb      	ldrb	r3, [r7, #23]
 801ffce:	3301      	adds	r3, #1
 801ffd0:	75fb      	strb	r3, [r7, #23]
 801ffd2:	7dfa      	ldrb	r2, [r7, #23]
 801ffd4:	7d7b      	ldrb	r3, [r7, #21]
 801ffd6:	429a      	cmp	r2, r3
 801ffd8:	d3e7      	bcc.n	801ffaa <isReceiveData+0x36>
			}
		}
	}
	return SET;
 801ffda:	2301      	movs	r3, #1
}
 801ffdc:	4618      	mov	r0, r3
 801ffde:	3718      	adds	r7, #24
 801ffe0:	46bd      	mov	sp, r7
 801ffe2:	bd80      	pop	{r7, pc}

0801ffe4 <isReceiveData_New>:


FlagStatus isReceiveData_New(char *buffer , uint16_t buffer_len , uint16_t buffer_size , const char * data){
 801ffe4:	b580      	push	{r7, lr}
 801ffe6:	b086      	sub	sp, #24
 801ffe8:	af00      	add	r7, sp, #0
 801ffea:	60f8      	str	r0, [r7, #12]
 801ffec:	607b      	str	r3, [r7, #4]
 801ffee:	460b      	mov	r3, r1
 801fff0:	817b      	strh	r3, [r7, #10]
 801fff2:	4613      	mov	r3, r2
 801fff4:	813b      	strh	r3, [r7, #8]
	uint16_t tmpLen = strlen((char*)data);
 801fff6:	6878      	ldr	r0, [r7, #4]
 801fff8:	f7fe f914 	bl	801e224 <strlen>
 801fffc:	4603      	mov	r3, r0
 801fffe:	82bb      	strh	r3, [r7, #20]
	for (uint16_t index = 0; index < tmpLen; index++) {
 8020000:	2300      	movs	r3, #0
 8020002:	82fb      	strh	r3, [r7, #22]
 8020004:	e02d      	b.n	8020062 <isReceiveData_New+0x7e>
		if(buffer[buffer_len -tmpLen <0 ? (buffer_size + buffer_len - tmpLen + index)%buffer_size :(buffer_len - tmpLen + index)%buffer_size ] != data[index]){
 8020006:	897a      	ldrh	r2, [r7, #10]
 8020008:	8abb      	ldrh	r3, [r7, #20]
 802000a:	1ad3      	subs	r3, r2, r3
 802000c:	2b00      	cmp	r3, #0
 802000e:	da0e      	bge.n	802002e <isReceiveData_New+0x4a>
 8020010:	893a      	ldrh	r2, [r7, #8]
 8020012:	897b      	ldrh	r3, [r7, #10]
 8020014:	441a      	add	r2, r3
 8020016:	8abb      	ldrh	r3, [r7, #20]
 8020018:	1ad2      	subs	r2, r2, r3
 802001a:	8afb      	ldrh	r3, [r7, #22]
 802001c:	4413      	add	r3, r2
 802001e:	893a      	ldrh	r2, [r7, #8]
 8020020:	fb93 f1f2 	sdiv	r1, r3, r2
 8020024:	fb02 f201 	mul.w	r2, r2, r1
 8020028:	1a9b      	subs	r3, r3, r2
 802002a:	461a      	mov	r2, r3
 802002c:	e00b      	b.n	8020046 <isReceiveData_New+0x62>
 802002e:	897a      	ldrh	r2, [r7, #10]
 8020030:	8abb      	ldrh	r3, [r7, #20]
 8020032:	1ad2      	subs	r2, r2, r3
 8020034:	8afb      	ldrh	r3, [r7, #22]
 8020036:	4413      	add	r3, r2
 8020038:	893a      	ldrh	r2, [r7, #8]
 802003a:	fb93 f1f2 	sdiv	r1, r3, r2
 802003e:	fb02 f201 	mul.w	r2, r2, r1
 8020042:	1a9b      	subs	r3, r3, r2
 8020044:	461a      	mov	r2, r3
 8020046:	68fb      	ldr	r3, [r7, #12]
 8020048:	4413      	add	r3, r2
 802004a:	781a      	ldrb	r2, [r3, #0]
 802004c:	8afb      	ldrh	r3, [r7, #22]
 802004e:	6879      	ldr	r1, [r7, #4]
 8020050:	440b      	add	r3, r1
 8020052:	781b      	ldrb	r3, [r3, #0]
 8020054:	429a      	cmp	r2, r3
 8020056:	d001      	beq.n	802005c <isReceiveData_New+0x78>
			return RESET;
 8020058:	2300      	movs	r3, #0
 802005a:	e007      	b.n	802006c <isReceiveData_New+0x88>
	for (uint16_t index = 0; index < tmpLen; index++) {
 802005c:	8afb      	ldrh	r3, [r7, #22]
 802005e:	3301      	adds	r3, #1
 8020060:	82fb      	strh	r3, [r7, #22]
 8020062:	8afa      	ldrh	r2, [r7, #22]
 8020064:	8abb      	ldrh	r3, [r7, #20]
 8020066:	429a      	cmp	r2, r3
 8020068:	d3cd      	bcc.n	8020006 <isReceiveData_New+0x22>
		}
	}
	return SET;
 802006a:	2301      	movs	r3, #1
}
 802006c:	4618      	mov	r0, r3
 802006e:	3718      	adds	r7, #24
 8020070:	46bd      	mov	sp, r7
 8020072:	bd80      	pop	{r7, pc}

08020074 <Char2Hex>:
	}
	return result;
}


uint8_t Char2Hex(char character){
 8020074:	b480      	push	{r7}
 8020076:	b085      	sub	sp, #20
 8020078:	af00      	add	r7, sp, #0
 802007a:	4603      	mov	r3, r0
 802007c:	71fb      	strb	r3, [r7, #7]
	uint8_t result;
	if( character >='0' && character <= '9'){
 802007e:	79fb      	ldrb	r3, [r7, #7]
 8020080:	2b2f      	cmp	r3, #47	; 0x2f
 8020082:	d906      	bls.n	8020092 <Char2Hex+0x1e>
 8020084:	79fb      	ldrb	r3, [r7, #7]
 8020086:	2b39      	cmp	r3, #57	; 0x39
 8020088:	d803      	bhi.n	8020092 <Char2Hex+0x1e>
		result = character - (uint8_t)('0') ;
 802008a:	79fb      	ldrb	r3, [r7, #7]
 802008c:	3b30      	subs	r3, #48	; 0x30
 802008e:	73fb      	strb	r3, [r7, #15]
 8020090:	e008      	b.n	80200a4 <Char2Hex+0x30>
	}
	else if(character >='A' && character <= 'F'){
 8020092:	79fb      	ldrb	r3, [r7, #7]
 8020094:	2b40      	cmp	r3, #64	; 0x40
 8020096:	d905      	bls.n	80200a4 <Char2Hex+0x30>
 8020098:	79fb      	ldrb	r3, [r7, #7]
 802009a:	2b46      	cmp	r3, #70	; 0x46
 802009c:	d802      	bhi.n	80200a4 <Char2Hex+0x30>
		result = character - (uint8_t)('A') + 10;
 802009e:	79fb      	ldrb	r3, [r7, #7]
 80200a0:	3b37      	subs	r3, #55	; 0x37
 80200a2:	73fb      	strb	r3, [r7, #15]
	}
	return result;
 80200a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80200a6:	4618      	mov	r0, r3
 80200a8:	3714      	adds	r7, #20
 80200aa:	46bd      	mov	sp, r7
 80200ac:	bc80      	pop	{r7}
 80200ae:	4770      	bx	lr

080200b0 <AT_Processing>:
  * If Available It will Read 1 byte and add to temp buffer.
  * Then Temp buffer will be compared to pattern being passed in isReceiveData function.
  * @param None
  * @retval None
  */
void AT_Processing(){
 80200b0:	b580      	push	{r7, lr}
 80200b2:	af00      	add	r7, sp, #0
	if(at_result != AT_NONE){
 80200b4:	4b73      	ldr	r3, [pc, #460]	; (8020284 <AT_Processing+0x1d4>)
 80200b6:	781b      	ldrb	r3, [r3, #0]
 80200b8:	2b0a      	cmp	r3, #10
 80200ba:	f040 80de 	bne.w	802027a <AT_Processing+0x1ca>
		return;
	}
	else if(UART_SIM7600_Received_Buffer_Available()){
 80200be:	f7fe ff2f 	bl	801ef20 <UART_SIM7600_Received_Buffer_Available>
 80200c2:	4603      	mov	r3, r0
 80200c4:	2b00      	cmp	r3, #0
 80200c6:	f000 80da 	beq.w	802027e <AT_Processing+0x1ce>
		data_respone[data_respone_index]=UART_SIM7600_Read_Received_Buffer();
 80200ca:	f7fe ff3f 	bl	801ef4c <UART_SIM7600_Read_Received_Buffer>
 80200ce:	4601      	mov	r1, r0
 80200d0:	4b6d      	ldr	r3, [pc, #436]	; (8020288 <AT_Processing+0x1d8>)
 80200d2:	781b      	ldrb	r3, [r3, #0]
 80200d4:	461a      	mov	r2, r3
 80200d6:	b2c9      	uxtb	r1, r1
 80200d8:	4b6c      	ldr	r3, [pc, #432]	; (802028c <AT_Processing+0x1dc>)
 80200da:	5499      	strb	r1, [r3, r2]
//		UART_DEBUG_Transmit_Size(data_respone + data_respone_index, 1);
//		LOG("1");
		data_respone_index++;
 80200dc:	4b6a      	ldr	r3, [pc, #424]	; (8020288 <AT_Processing+0x1d8>)
 80200de:	781b      	ldrb	r3, [r3, #0]
 80200e0:	3301      	adds	r3, #1
 80200e2:	b2da      	uxtb	r2, r3
 80200e4:	4b68      	ldr	r3, [pc, #416]	; (8020288 <AT_Processing+0x1d8>)
 80200e6:	701a      	strb	r2, [r3, #0]

		if(isReceiveData((char*)data_respone, (uint16_t)data_respone_index, OK)){
 80200e8:	4b67      	ldr	r3, [pc, #412]	; (8020288 <AT_Processing+0x1d8>)
 80200ea:	781b      	ldrb	r3, [r3, #0]
 80200ec:	b29b      	uxth	r3, r3
 80200ee:	4a68      	ldr	r2, [pc, #416]	; (8020290 <AT_Processing+0x1e0>)
 80200f0:	6812      	ldr	r2, [r2, #0]
 80200f2:	4619      	mov	r1, r3
 80200f4:	4865      	ldr	r0, [pc, #404]	; (802028c <AT_Processing+0x1dc>)
 80200f6:	f7ff ff3d 	bl	801ff74 <isReceiveData>
 80200fa:	4603      	mov	r3, r0
 80200fc:	2b00      	cmp	r3, #0
 80200fe:	d00d      	beq.n	802011c <AT_Processing+0x6c>
			LOG("\r\nOK\r\n");
 8020100:	4864      	ldr	r0, [pc, #400]	; (8020294 <AT_Processing+0x1e4>)
 8020102:	f7fe ff7b 	bl	801effc <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 8020106:	4b60      	ldr	r3, [pc, #384]	; (8020288 <AT_Processing+0x1d8>)
 8020108:	781a      	ldrb	r2, [r3, #0]
 802010a:	4b63      	ldr	r3, [pc, #396]	; (8020298 <AT_Processing+0x1e8>)
 802010c:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 802010e:	4b5e      	ldr	r3, [pc, #376]	; (8020288 <AT_Processing+0x1d8>)
 8020110:	2200      	movs	r2, #0
 8020112:	701a      	strb	r2, [r3, #0]
			at_result = AT_OK;
 8020114:	4b5b      	ldr	r3, [pc, #364]	; (8020284 <AT_Processing+0x1d4>)
 8020116:	2200      	movs	r2, #0
 8020118:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
			at_result = AT_FIRMWARE_CHECKSUM;
		}
	}
//	UART_DEBUG_Transmit_Size(aUART_RxBuffer, RXBUFFERSIZE);
	return;
 802011a:	e0b0      	b.n	802027e <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)ERROR_1/*ERROR_1*/)){
 802011c:	4b5a      	ldr	r3, [pc, #360]	; (8020288 <AT_Processing+0x1d8>)
 802011e:	781b      	ldrb	r3, [r3, #0]
 8020120:	b29b      	uxth	r3, r3
 8020122:	4a5e      	ldr	r2, [pc, #376]	; (802029c <AT_Processing+0x1ec>)
 8020124:	4619      	mov	r1, r3
 8020126:	4859      	ldr	r0, [pc, #356]	; (802028c <AT_Processing+0x1dc>)
 8020128:	f7ff ff24 	bl	801ff74 <isReceiveData>
 802012c:	4603      	mov	r3, r0
 802012e:	2b00      	cmp	r3, #0
 8020130:	d00d      	beq.n	802014e <AT_Processing+0x9e>
			LOG("\r\nERROR\r\n");
 8020132:	485b      	ldr	r0, [pc, #364]	; (80202a0 <AT_Processing+0x1f0>)
 8020134:	f7fe ff62 	bl	801effc <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 8020138:	4b53      	ldr	r3, [pc, #332]	; (8020288 <AT_Processing+0x1d8>)
 802013a:	781a      	ldrb	r2, [r3, #0]
 802013c:	4b56      	ldr	r3, [pc, #344]	; (8020298 <AT_Processing+0x1e8>)
 802013e:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 8020140:	4b51      	ldr	r3, [pc, #324]	; (8020288 <AT_Processing+0x1d8>)
 8020142:	2200      	movs	r2, #0
 8020144:	701a      	strb	r2, [r3, #0]
			at_result = AT_ERROR;
 8020146:	4b4f      	ldr	r3, [pc, #316]	; (8020284 <AT_Processing+0x1d4>)
 8020148:	2201      	movs	r2, #1
 802014a:	701a      	strb	r2, [r3, #0]
	return;
 802014c:	e097      	b.n	802027e <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)PB_DONE /*PB_DONE*/)){
 802014e:	4b4e      	ldr	r3, [pc, #312]	; (8020288 <AT_Processing+0x1d8>)
 8020150:	781b      	ldrb	r3, [r3, #0]
 8020152:	b29b      	uxth	r3, r3
 8020154:	4a53      	ldr	r2, [pc, #332]	; (80202a4 <AT_Processing+0x1f4>)
 8020156:	4619      	mov	r1, r3
 8020158:	484c      	ldr	r0, [pc, #304]	; (802028c <AT_Processing+0x1dc>)
 802015a:	f7ff ff0b 	bl	801ff74 <isReceiveData>
 802015e:	4603      	mov	r3, r0
 8020160:	2b00      	cmp	r3, #0
 8020162:	d00d      	beq.n	8020180 <AT_Processing+0xd0>
			LOG("\r\nPB DONE\r\n");
 8020164:	4850      	ldr	r0, [pc, #320]	; (80202a8 <AT_Processing+0x1f8>)
 8020166:	f7fe ff49 	bl	801effc <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 802016a:	4b47      	ldr	r3, [pc, #284]	; (8020288 <AT_Processing+0x1d8>)
 802016c:	781a      	ldrb	r2, [r3, #0]
 802016e:	4b4a      	ldr	r3, [pc, #296]	; (8020298 <AT_Processing+0x1e8>)
 8020170:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 8020172:	4b45      	ldr	r3, [pc, #276]	; (8020288 <AT_Processing+0x1d8>)
 8020174:	2200      	movs	r2, #0
 8020176:	701a      	strb	r2, [r3, #0]
			at_result = AT_PB_DONE;
 8020178:	4b42      	ldr	r3, [pc, #264]	; (8020284 <AT_Processing+0x1d4>)
 802017a:	2203      	movs	r2, #3
 802017c:	701a      	strb	r2, [r3, #0]
	return;
 802017e:	e07e      	b.n	802027e <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)IMEI_CHECK)){
 8020180:	4b41      	ldr	r3, [pc, #260]	; (8020288 <AT_Processing+0x1d8>)
 8020182:	781b      	ldrb	r3, [r3, #0]
 8020184:	b29b      	uxth	r3, r3
 8020186:	4a49      	ldr	r2, [pc, #292]	; (80202ac <AT_Processing+0x1fc>)
 8020188:	4619      	mov	r1, r3
 802018a:	4840      	ldr	r0, [pc, #256]	; (802028c <AT_Processing+0x1dc>)
 802018c:	f7ff fef2 	bl	801ff74 <isReceiveData>
 8020190:	4603      	mov	r3, r0
 8020192:	2b00      	cmp	r3, #0
 8020194:	d00d      	beq.n	80201b2 <AT_Processing+0x102>
			LOG("\r\nRECEIVE IMEI\r\n");
 8020196:	4846      	ldr	r0, [pc, #280]	; (80202b0 <AT_Processing+0x200>)
 8020198:	f7fe ff30 	bl	801effc <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 802019c:	4b3a      	ldr	r3, [pc, #232]	; (8020288 <AT_Processing+0x1d8>)
 802019e:	781a      	ldrb	r2, [r3, #0]
 80201a0:	4b3d      	ldr	r3, [pc, #244]	; (8020298 <AT_Processing+0x1e8>)
 80201a2:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 80201a4:	4b38      	ldr	r3, [pc, #224]	; (8020288 <AT_Processing+0x1d8>)
 80201a6:	2200      	movs	r2, #0
 80201a8:	701a      	strb	r2, [r3, #0]
			at_result = AT_IMEI;
 80201aa:	4b36      	ldr	r3, [pc, #216]	; (8020284 <AT_Processing+0x1d4>)
 80201ac:	2206      	movs	r2, #6
 80201ae:	701a      	strb	r2, [r3, #0]
	return;
 80201b0:	e065      	b.n	802027e <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)RECEIVE_RESPONSE)){
 80201b2:	4b35      	ldr	r3, [pc, #212]	; (8020288 <AT_Processing+0x1d8>)
 80201b4:	781b      	ldrb	r3, [r3, #0]
 80201b6:	b29b      	uxth	r3, r3
 80201b8:	4a3e      	ldr	r2, [pc, #248]	; (80202b4 <AT_Processing+0x204>)
 80201ba:	4619      	mov	r1, r3
 80201bc:	4833      	ldr	r0, [pc, #204]	; (802028c <AT_Processing+0x1dc>)
 80201be:	f7ff fed9 	bl	801ff74 <isReceiveData>
 80201c2:	4603      	mov	r3, r0
 80201c4:	2b00      	cmp	r3, #0
 80201c6:	d00d      	beq.n	80201e4 <AT_Processing+0x134>
			LOG("\r\nRECEIVE HTTP RESPONSE\r\n");
 80201c8:	483b      	ldr	r0, [pc, #236]	; (80202b8 <AT_Processing+0x208>)
 80201ca:	f7fe ff17 	bl	801effc <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 80201ce:	4b2e      	ldr	r3, [pc, #184]	; (8020288 <AT_Processing+0x1d8>)
 80201d0:	781a      	ldrb	r2, [r3, #0]
 80201d2:	4b31      	ldr	r3, [pc, #196]	; (8020298 <AT_Processing+0x1e8>)
 80201d4:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 80201d6:	4b2c      	ldr	r3, [pc, #176]	; (8020288 <AT_Processing+0x1d8>)
 80201d8:	2200      	movs	r2, #0
 80201da:	701a      	strb	r2, [r3, #0]
			at_result = AT_HTTP_RESPONSE;
 80201dc:	4b29      	ldr	r3, [pc, #164]	; (8020284 <AT_Processing+0x1d4>)
 80201de:	2205      	movs	r2, #5
 80201e0:	701a      	strb	r2, [r3, #0]
	return;
 80201e2:	e04c      	b.n	802027e <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)FIRMWARE_VERSION)){
 80201e4:	4b28      	ldr	r3, [pc, #160]	; (8020288 <AT_Processing+0x1d8>)
 80201e6:	781b      	ldrb	r3, [r3, #0]
 80201e8:	b29b      	uxth	r3, r3
 80201ea:	4a34      	ldr	r2, [pc, #208]	; (80202bc <AT_Processing+0x20c>)
 80201ec:	4619      	mov	r1, r3
 80201ee:	4827      	ldr	r0, [pc, #156]	; (802028c <AT_Processing+0x1dc>)
 80201f0:	f7ff fec0 	bl	801ff74 <isReceiveData>
 80201f4:	4603      	mov	r3, r0
 80201f6:	2b00      	cmp	r3, #0
 80201f8:	d00d      	beq.n	8020216 <AT_Processing+0x166>
			LOG("\r\nRECEIVE VERSION RESPONSE\r\n");
 80201fa:	4831      	ldr	r0, [pc, #196]	; (80202c0 <AT_Processing+0x210>)
 80201fc:	f7fe fefe 	bl	801effc <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 8020200:	4b21      	ldr	r3, [pc, #132]	; (8020288 <AT_Processing+0x1d8>)
 8020202:	781a      	ldrb	r2, [r3, #0]
 8020204:	4b24      	ldr	r3, [pc, #144]	; (8020298 <AT_Processing+0x1e8>)
 8020206:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 8020208:	4b1f      	ldr	r3, [pc, #124]	; (8020288 <AT_Processing+0x1d8>)
 802020a:	2200      	movs	r2, #0
 802020c:	701a      	strb	r2, [r3, #0]
			at_result = AT_FIRMWARE_VERSION;
 802020e:	4b1d      	ldr	r3, [pc, #116]	; (8020284 <AT_Processing+0x1d4>)
 8020210:	2207      	movs	r2, #7
 8020212:	701a      	strb	r2, [r3, #0]
	return;
 8020214:	e033      	b.n	802027e <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)FIRMWARE_DATA)){
 8020216:	4b1c      	ldr	r3, [pc, #112]	; (8020288 <AT_Processing+0x1d8>)
 8020218:	781b      	ldrb	r3, [r3, #0]
 802021a:	b29b      	uxth	r3, r3
 802021c:	4a29      	ldr	r2, [pc, #164]	; (80202c4 <AT_Processing+0x214>)
 802021e:	4619      	mov	r1, r3
 8020220:	481a      	ldr	r0, [pc, #104]	; (802028c <AT_Processing+0x1dc>)
 8020222:	f7ff fea7 	bl	801ff74 <isReceiveData>
 8020226:	4603      	mov	r3, r0
 8020228:	2b00      	cmp	r3, #0
 802022a:	d00d      	beq.n	8020248 <AT_Processing+0x198>
			LOG("\r\nRECEIVE FIRMWARE DATA\r\n");
 802022c:	4826      	ldr	r0, [pc, #152]	; (80202c8 <AT_Processing+0x218>)
 802022e:	f7fe fee5 	bl	801effc <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 8020232:	4b15      	ldr	r3, [pc, #84]	; (8020288 <AT_Processing+0x1d8>)
 8020234:	781a      	ldrb	r2, [r3, #0]
 8020236:	4b18      	ldr	r3, [pc, #96]	; (8020298 <AT_Processing+0x1e8>)
 8020238:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 802023a:	4b13      	ldr	r3, [pc, #76]	; (8020288 <AT_Processing+0x1d8>)
 802023c:	2200      	movs	r2, #0
 802023e:	701a      	strb	r2, [r3, #0]
			at_result = AT_FIRMWARE_DATA;
 8020240:	4b10      	ldr	r3, [pc, #64]	; (8020284 <AT_Processing+0x1d4>)
 8020242:	2208      	movs	r2, #8
 8020244:	701a      	strb	r2, [r3, #0]
	return;
 8020246:	e01a      	b.n	802027e <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)FIRMWARE_CHECKSUM)){
 8020248:	4b0f      	ldr	r3, [pc, #60]	; (8020288 <AT_Processing+0x1d8>)
 802024a:	781b      	ldrb	r3, [r3, #0]
 802024c:	b29b      	uxth	r3, r3
 802024e:	4a1f      	ldr	r2, [pc, #124]	; (80202cc <AT_Processing+0x21c>)
 8020250:	4619      	mov	r1, r3
 8020252:	480e      	ldr	r0, [pc, #56]	; (802028c <AT_Processing+0x1dc>)
 8020254:	f7ff fe8e 	bl	801ff74 <isReceiveData>
 8020258:	4603      	mov	r3, r0
 802025a:	2b00      	cmp	r3, #0
 802025c:	d00f      	beq.n	802027e <AT_Processing+0x1ce>
			LOG("\r\nRECEIVE FIRMWARE CHECKSUM\r\n");
 802025e:	481c      	ldr	r0, [pc, #112]	; (80202d0 <AT_Processing+0x220>)
 8020260:	f7fe fecc 	bl	801effc <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 8020264:	4b08      	ldr	r3, [pc, #32]	; (8020288 <AT_Processing+0x1d8>)
 8020266:	781a      	ldrb	r2, [r3, #0]
 8020268:	4b0b      	ldr	r3, [pc, #44]	; (8020298 <AT_Processing+0x1e8>)
 802026a:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 802026c:	4b06      	ldr	r3, [pc, #24]	; (8020288 <AT_Processing+0x1d8>)
 802026e:	2200      	movs	r2, #0
 8020270:	701a      	strb	r2, [r3, #0]
			at_result = AT_FIRMWARE_CHECKSUM;
 8020272:	4b04      	ldr	r3, [pc, #16]	; (8020284 <AT_Processing+0x1d4>)
 8020274:	2209      	movs	r2, #9
 8020276:	701a      	strb	r2, [r3, #0]
	return;
 8020278:	e001      	b.n	802027e <AT_Processing+0x1ce>
		return;
 802027a:	bf00      	nop
 802027c:	e000      	b.n	8020280 <AT_Processing+0x1d0>
	return;
 802027e:	bf00      	nop
}
 8020280:	bd80      	pop	{r7, pc}
 8020282:	bf00      	nop
 8020284:	200000e5 	.word	0x200000e5
 8020288:	200011bd 	.word	0x200011bd
 802028c:	200001bc 	.word	0x200001bc
 8020290:	200000e8 	.word	0x200000e8
 8020294:	08024ec4 	.word	0x08024ec4
 8020298:	200011bc 	.word	0x200011bc
 802029c:	08025044 	.word	0x08025044
 80202a0:	08024ecc 	.word	0x08024ecc
 80202a4:	0802503c 	.word	0x0802503c
 80202a8:	08024ed8 	.word	0x08024ed8
 80202ac:	0802504c 	.word	0x0802504c
 80202b0:	08024ee4 	.word	0x08024ee4
 80202b4:	08025058 	.word	0x08025058
 80202b8:	08024ef8 	.word	0x08024ef8
 80202bc:	08025068 	.word	0x08025068
 80202c0:	08024f14 	.word	0x08024f14
 80202c4:	08025080 	.word	0x08025080
 80202c8:	08024f34 	.word	0x08024f34
 80202cc:	08025074 	.word	0x08025074
 80202d0:	08024f50 	.word	0x08024f50

080202d4 <Get_AT_Result>:
/**
  * @brief Get_AT_Result Initialization Function
  * @param None
  * @retval at_result
  */
AT_Result Get_AT_Result(){
 80202d4:	b480      	push	{r7}
 80202d6:	af00      	add	r7, sp, #0
	return at_result;
 80202d8:	4b02      	ldr	r3, [pc, #8]	; (80202e4 <Get_AT_Result+0x10>)
 80202da:	781b      	ldrb	r3, [r3, #0]
}
 80202dc:	4618      	mov	r0, r3
 80202de:	46bd      	mov	sp, r7
 80202e0:	bc80      	pop	{r7}
 80202e2:	4770      	bx	lr
 80202e4:	200000e5 	.word	0x200000e5

080202e8 <Clear_AT_Result>:
/**
  * @brief Clear_AT_Result Initialization Function
  * @param None
  * @retval None
  */
void Clear_AT_Result(){
 80202e8:	b480      	push	{r7}
 80202ea:	af00      	add	r7, sp, #0
	at_result = AT_NONE;
 80202ec:	4b03      	ldr	r3, [pc, #12]	; (80202fc <Clear_AT_Result+0x14>)
 80202ee:	220a      	movs	r2, #10
 80202f0:	701a      	strb	r2, [r3, #0]
}
 80202f2:	bf00      	nop
 80202f4:	46bd      	mov	sp, r7
 80202f6:	bc80      	pop	{r7}
 80202f8:	4770      	bx	lr
 80202fa:	bf00      	nop
 80202fc:	200000e5 	.word	0x200000e5

08020300 <Get_New_Task_ID>:

uint32_t count_SCH_Update = 0;
uint8_t testFlag = 0;
uint8_t strScheduler[] = "                                                                    ";

uint32_t Get_New_Task_ID(void){
 8020300:	b480      	push	{r7}
 8020302:	af00      	add	r7, sp, #0
	newTaskID++;
 8020304:	4b09      	ldr	r3, [pc, #36]	; (802032c <Get_New_Task_ID+0x2c>)
 8020306:	681b      	ldr	r3, [r3, #0]
 8020308:	3301      	adds	r3, #1
 802030a:	4a08      	ldr	r2, [pc, #32]	; (802032c <Get_New_Task_ID+0x2c>)
 802030c:	6013      	str	r3, [r2, #0]
	if(newTaskID == NO_TASK_ID){
 802030e:	4b07      	ldr	r3, [pc, #28]	; (802032c <Get_New_Task_ID+0x2c>)
 8020310:	681b      	ldr	r3, [r3, #0]
 8020312:	2b00      	cmp	r3, #0
 8020314:	d104      	bne.n	8020320 <Get_New_Task_ID+0x20>
		newTaskID++;
 8020316:	4b05      	ldr	r3, [pc, #20]	; (802032c <Get_New_Task_ID+0x2c>)
 8020318:	681b      	ldr	r3, [r3, #0]
 802031a:	3301      	adds	r3, #1
 802031c:	4a03      	ldr	r2, [pc, #12]	; (802032c <Get_New_Task_ID+0x2c>)
 802031e:	6013      	str	r3, [r2, #0]
	}
	return newTaskID;
 8020320:	4b02      	ldr	r3, [pc, #8]	; (802032c <Get_New_Task_ID+0x2c>)
 8020322:	681b      	ldr	r3, [r3, #0]
}
 8020324:	4618      	mov	r0, r3
 8020326:	46bd      	mov	sp, r7
 8020328:	bc80      	pop	{r7}
 802032a:	4770      	bx	lr
 802032c:	200011c0 	.word	0x200011c0

08020330 <SCH_Update>:


void SCH_Update(void){
 8020330:	b480      	push	{r7}
 8020332:	af00      	add	r7, sp, #0
	// Check if there is a task at this location
	count_SCH_Update ++;
 8020334:	4b10      	ldr	r3, [pc, #64]	; (8020378 <SCH_Update+0x48>)
 8020336:	681b      	ldr	r3, [r3, #0]
 8020338:	3301      	adds	r3, #1
 802033a:	4a0f      	ldr	r2, [pc, #60]	; (8020378 <SCH_Update+0x48>)
 802033c:	6013      	str	r3, [r2, #0]
	if (SCH_tasks_G[0].pTask && SCH_tasks_G[0].RunMe == 0) {
 802033e:	4b0f      	ldr	r3, [pc, #60]	; (802037c <SCH_Update+0x4c>)
 8020340:	681b      	ldr	r3, [r3, #0]
 8020342:	2b00      	cmp	r3, #0
 8020344:	d013      	beq.n	802036e <SCH_Update+0x3e>
 8020346:	4b0d      	ldr	r3, [pc, #52]	; (802037c <SCH_Update+0x4c>)
 8020348:	7b1b      	ldrb	r3, [r3, #12]
 802034a:	2b00      	cmp	r3, #0
 802034c:	d10f      	bne.n	802036e <SCH_Update+0x3e>
		if(SCH_tasks_G[0].Delay > 0){
 802034e:	4b0b      	ldr	r3, [pc, #44]	; (802037c <SCH_Update+0x4c>)
 8020350:	685b      	ldr	r3, [r3, #4]
 8020352:	2b00      	cmp	r3, #0
 8020354:	d004      	beq.n	8020360 <SCH_Update+0x30>
			SCH_tasks_G[0].Delay = SCH_tasks_G[0].Delay - 1;
 8020356:	4b09      	ldr	r3, [pc, #36]	; (802037c <SCH_Update+0x4c>)
 8020358:	685b      	ldr	r3, [r3, #4]
 802035a:	3b01      	subs	r3, #1
 802035c:	4a07      	ldr	r2, [pc, #28]	; (802037c <SCH_Update+0x4c>)
 802035e:	6053      	str	r3, [r2, #4]
		}
		if (SCH_tasks_G[0].Delay == 0) {
 8020360:	4b06      	ldr	r3, [pc, #24]	; (802037c <SCH_Update+0x4c>)
 8020362:	685b      	ldr	r3, [r3, #4]
 8020364:	2b00      	cmp	r3, #0
 8020366:	d102      	bne.n	802036e <SCH_Update+0x3e>
			SCH_tasks_G[0].RunMe = 1;
 8020368:	4b04      	ldr	r3, [pc, #16]	; (802037c <SCH_Update+0x4c>)
 802036a:	2201      	movs	r2, #1
 802036c:	731a      	strb	r2, [r3, #12]
		}
	}
}
 802036e:	bf00      	nop
 8020370:	46bd      	mov	sp, r7
 8020372:	bc80      	pop	{r7}
 8020374:	4770      	bx	lr
 8020376:	bf00      	nop
 8020378:	200011c4 	.word	0x200011c4
 802037c:	20003fd4 	.word	0x20003fd4

08020380 <SCH_Add_Task>:
uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8020380:	b590      	push	{r4, r7, lr}
 8020382:	b089      	sub	sp, #36	; 0x24
 8020384:	af00      	add	r7, sp, #0
 8020386:	60f8      	str	r0, [r7, #12]
 8020388:	60b9      	str	r1, [r7, #8]
 802038a:	607a      	str	r2, [r7, #4]
	uint8_t newTaskIndex = 0;
 802038c:	2300      	movs	r3, #0
 802038e:	77fb      	strb	r3, [r7, #31]
	uint32_t sumDelay = 0;
 8020390:	2300      	movs	r3, #0
 8020392:	61bb      	str	r3, [r7, #24]
	uint32_t newDelay = 0;
 8020394:	2300      	movs	r3, #0
 8020396:	613b      	str	r3, [r7, #16]

	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 8020398:	2300      	movs	r3, #0
 802039a:	77fb      	strb	r3, [r7, #31]
 802039c:	e133      	b.n	8020606 <SCH_Add_Task+0x286>
		sumDelay = sumDelay + SCH_tasks_G[newTaskIndex].Delay;
 802039e:	7ffa      	ldrb	r2, [r7, #31]
 80203a0:	49a1      	ldr	r1, [pc, #644]	; (8020628 <SCH_Add_Task+0x2a8>)
 80203a2:	4613      	mov	r3, r2
 80203a4:	009b      	lsls	r3, r3, #2
 80203a6:	4413      	add	r3, r2
 80203a8:	009b      	lsls	r3, r3, #2
 80203aa:	440b      	add	r3, r1
 80203ac:	3304      	adds	r3, #4
 80203ae:	681b      	ldr	r3, [r3, #0]
 80203b0:	69ba      	ldr	r2, [r7, #24]
 80203b2:	4413      	add	r3, r2
 80203b4:	61bb      	str	r3, [r7, #24]
		if(sumDelay > DELAY){
 80203b6:	69ba      	ldr	r2, [r7, #24]
 80203b8:	68bb      	ldr	r3, [r7, #8]
 80203ba:	429a      	cmp	r2, r3
 80203bc:	f240 80c1 	bls.w	8020542 <SCH_Add_Task+0x1c2>
			newDelay = DELAY - (sumDelay - SCH_tasks_G[newTaskIndex].Delay);
 80203c0:	7ffa      	ldrb	r2, [r7, #31]
 80203c2:	4999      	ldr	r1, [pc, #612]	; (8020628 <SCH_Add_Task+0x2a8>)
 80203c4:	4613      	mov	r3, r2
 80203c6:	009b      	lsls	r3, r3, #2
 80203c8:	4413      	add	r3, r2
 80203ca:	009b      	lsls	r3, r3, #2
 80203cc:	440b      	add	r3, r1
 80203ce:	3304      	adds	r3, #4
 80203d0:	681a      	ldr	r2, [r3, #0]
 80203d2:	69bb      	ldr	r3, [r7, #24]
 80203d4:	1ad3      	subs	r3, r2, r3
 80203d6:	68ba      	ldr	r2, [r7, #8]
 80203d8:	4413      	add	r3, r2
 80203da:	613b      	str	r3, [r7, #16]
			SCH_tasks_G[newTaskIndex].Delay = sumDelay - DELAY;
 80203dc:	7ffa      	ldrb	r2, [r7, #31]
 80203de:	69b9      	ldr	r1, [r7, #24]
 80203e0:	68bb      	ldr	r3, [r7, #8]
 80203e2:	1ac9      	subs	r1, r1, r3
 80203e4:	4890      	ldr	r0, [pc, #576]	; (8020628 <SCH_Add_Task+0x2a8>)
 80203e6:	4613      	mov	r3, r2
 80203e8:	009b      	lsls	r3, r3, #2
 80203ea:	4413      	add	r3, r2
 80203ec:	009b      	lsls	r3, r3, #2
 80203ee:	4403      	add	r3, r0
 80203f0:	3304      	adds	r3, #4
 80203f2:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 80203f4:	2327      	movs	r3, #39	; 0x27
 80203f6:	75fb      	strb	r3, [r7, #23]
 80203f8:	e04c      	b.n	8020494 <SCH_Add_Task+0x114>
//				if(SCH_tasks_G[i - 1].pTask != 0)
				{
					SCH_tasks_G[i].pTask = SCH_tasks_G[i - 1].pTask;
 80203fa:	7dfb      	ldrb	r3, [r7, #23]
 80203fc:	1e59      	subs	r1, r3, #1
 80203fe:	7dfa      	ldrb	r2, [r7, #23]
 8020400:	4889      	ldr	r0, [pc, #548]	; (8020628 <SCH_Add_Task+0x2a8>)
 8020402:	460b      	mov	r3, r1
 8020404:	009b      	lsls	r3, r3, #2
 8020406:	440b      	add	r3, r1
 8020408:	009b      	lsls	r3, r3, #2
 802040a:	4403      	add	r3, r0
 802040c:	6819      	ldr	r1, [r3, #0]
 802040e:	4886      	ldr	r0, [pc, #536]	; (8020628 <SCH_Add_Task+0x2a8>)
 8020410:	4613      	mov	r3, r2
 8020412:	009b      	lsls	r3, r3, #2
 8020414:	4413      	add	r3, r2
 8020416:	009b      	lsls	r3, r3, #2
 8020418:	4403      	add	r3, r0
 802041a:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].Period = SCH_tasks_G[i - 1].Period;
 802041c:	7dfb      	ldrb	r3, [r7, #23]
 802041e:	1e59      	subs	r1, r3, #1
 8020420:	7dfa      	ldrb	r2, [r7, #23]
 8020422:	4881      	ldr	r0, [pc, #516]	; (8020628 <SCH_Add_Task+0x2a8>)
 8020424:	460b      	mov	r3, r1
 8020426:	009b      	lsls	r3, r3, #2
 8020428:	440b      	add	r3, r1
 802042a:	009b      	lsls	r3, r3, #2
 802042c:	4403      	add	r3, r0
 802042e:	3308      	adds	r3, #8
 8020430:	6819      	ldr	r1, [r3, #0]
 8020432:	487d      	ldr	r0, [pc, #500]	; (8020628 <SCH_Add_Task+0x2a8>)
 8020434:	4613      	mov	r3, r2
 8020436:	009b      	lsls	r3, r3, #2
 8020438:	4413      	add	r3, r2
 802043a:	009b      	lsls	r3, r3, #2
 802043c:	4403      	add	r3, r0
 802043e:	3308      	adds	r3, #8
 8020440:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].Delay = SCH_tasks_G[i - 1].Delay;
 8020442:	7dfb      	ldrb	r3, [r7, #23]
 8020444:	1e59      	subs	r1, r3, #1
 8020446:	7dfa      	ldrb	r2, [r7, #23]
 8020448:	4877      	ldr	r0, [pc, #476]	; (8020628 <SCH_Add_Task+0x2a8>)
 802044a:	460b      	mov	r3, r1
 802044c:	009b      	lsls	r3, r3, #2
 802044e:	440b      	add	r3, r1
 8020450:	009b      	lsls	r3, r3, #2
 8020452:	4403      	add	r3, r0
 8020454:	3304      	adds	r3, #4
 8020456:	6819      	ldr	r1, [r3, #0]
 8020458:	4873      	ldr	r0, [pc, #460]	; (8020628 <SCH_Add_Task+0x2a8>)
 802045a:	4613      	mov	r3, r2
 802045c:	009b      	lsls	r3, r3, #2
 802045e:	4413      	add	r3, r2
 8020460:	009b      	lsls	r3, r3, #2
 8020462:	4403      	add	r3, r0
 8020464:	3304      	adds	r3, #4
 8020466:	6019      	str	r1, [r3, #0]
//					SCH_tasks_G[i].RunMe = SCH_tasks_G[i - 1].RunMe;
					SCH_tasks_G[i].TaskID = SCH_tasks_G[i - 1].TaskID;
 8020468:	7dfb      	ldrb	r3, [r7, #23]
 802046a:	1e59      	subs	r1, r3, #1
 802046c:	7dfa      	ldrb	r2, [r7, #23]
 802046e:	486e      	ldr	r0, [pc, #440]	; (8020628 <SCH_Add_Task+0x2a8>)
 8020470:	460b      	mov	r3, r1
 8020472:	009b      	lsls	r3, r3, #2
 8020474:	440b      	add	r3, r1
 8020476:	009b      	lsls	r3, r3, #2
 8020478:	4403      	add	r3, r0
 802047a:	3310      	adds	r3, #16
 802047c:	6819      	ldr	r1, [r3, #0]
 802047e:	486a      	ldr	r0, [pc, #424]	; (8020628 <SCH_Add_Task+0x2a8>)
 8020480:	4613      	mov	r3, r2
 8020482:	009b      	lsls	r3, r3, #2
 8020484:	4413      	add	r3, r2
 8020486:	009b      	lsls	r3, r3, #2
 8020488:	4403      	add	r3, r0
 802048a:	3310      	adds	r3, #16
 802048c:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 802048e:	7dfb      	ldrb	r3, [r7, #23]
 8020490:	3b01      	subs	r3, #1
 8020492:	75fb      	strb	r3, [r7, #23]
 8020494:	7dfa      	ldrb	r2, [r7, #23]
 8020496:	7ffb      	ldrb	r3, [r7, #31]
 8020498:	429a      	cmp	r2, r3
 802049a:	d8ae      	bhi.n	80203fa <SCH_Add_Task+0x7a>
				}
			}
			SCH_tasks_G[newTaskIndex].pTask = pFunction;
 802049c:	7ffa      	ldrb	r2, [r7, #31]
 802049e:	4962      	ldr	r1, [pc, #392]	; (8020628 <SCH_Add_Task+0x2a8>)
 80204a0:	4613      	mov	r3, r2
 80204a2:	009b      	lsls	r3, r3, #2
 80204a4:	4413      	add	r3, r2
 80204a6:	009b      	lsls	r3, r3, #2
 80204a8:	440b      	add	r3, r1
 80204aa:	68fa      	ldr	r2, [r7, #12]
 80204ac:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Delay = newDelay;
 80204ae:	7ffa      	ldrb	r2, [r7, #31]
 80204b0:	495d      	ldr	r1, [pc, #372]	; (8020628 <SCH_Add_Task+0x2a8>)
 80204b2:	4613      	mov	r3, r2
 80204b4:	009b      	lsls	r3, r3, #2
 80204b6:	4413      	add	r3, r2
 80204b8:	009b      	lsls	r3, r3, #2
 80204ba:	440b      	add	r3, r1
 80204bc:	3304      	adds	r3, #4
 80204be:	693a      	ldr	r2, [r7, #16]
 80204c0:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Period = PERIOD;
 80204c2:	7ffa      	ldrb	r2, [r7, #31]
 80204c4:	4958      	ldr	r1, [pc, #352]	; (8020628 <SCH_Add_Task+0x2a8>)
 80204c6:	4613      	mov	r3, r2
 80204c8:	009b      	lsls	r3, r3, #2
 80204ca:	4413      	add	r3, r2
 80204cc:	009b      	lsls	r3, r3, #2
 80204ce:	440b      	add	r3, r1
 80204d0:	3308      	adds	r3, #8
 80204d2:	687a      	ldr	r2, [r7, #4]
 80204d4:	601a      	str	r2, [r3, #0]
			if(SCH_tasks_G[newTaskIndex].Delay == 0){
 80204d6:	7ffa      	ldrb	r2, [r7, #31]
 80204d8:	4953      	ldr	r1, [pc, #332]	; (8020628 <SCH_Add_Task+0x2a8>)
 80204da:	4613      	mov	r3, r2
 80204dc:	009b      	lsls	r3, r3, #2
 80204de:	4413      	add	r3, r2
 80204e0:	009b      	lsls	r3, r3, #2
 80204e2:	440b      	add	r3, r1
 80204e4:	3304      	adds	r3, #4
 80204e6:	681b      	ldr	r3, [r3, #0]
 80204e8:	2b00      	cmp	r3, #0
 80204ea:	d10a      	bne.n	8020502 <SCH_Add_Task+0x182>
				SCH_tasks_G[newTaskIndex].RunMe = 1;
 80204ec:	7ffa      	ldrb	r2, [r7, #31]
 80204ee:	494e      	ldr	r1, [pc, #312]	; (8020628 <SCH_Add_Task+0x2a8>)
 80204f0:	4613      	mov	r3, r2
 80204f2:	009b      	lsls	r3, r3, #2
 80204f4:	4413      	add	r3, r2
 80204f6:	009b      	lsls	r3, r3, #2
 80204f8:	440b      	add	r3, r1
 80204fa:	330c      	adds	r3, #12
 80204fc:	2201      	movs	r2, #1
 80204fe:	701a      	strb	r2, [r3, #0]
 8020500:	e009      	b.n	8020516 <SCH_Add_Task+0x196>
			} else {
				SCH_tasks_G[newTaskIndex].RunMe = 0;
 8020502:	7ffa      	ldrb	r2, [r7, #31]
 8020504:	4948      	ldr	r1, [pc, #288]	; (8020628 <SCH_Add_Task+0x2a8>)
 8020506:	4613      	mov	r3, r2
 8020508:	009b      	lsls	r3, r3, #2
 802050a:	4413      	add	r3, r2
 802050c:	009b      	lsls	r3, r3, #2
 802050e:	440b      	add	r3, r1
 8020510:	330c      	adds	r3, #12
 8020512:	2200      	movs	r2, #0
 8020514:	701a      	strb	r2, [r3, #0]
			}
			SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 8020516:	7ffc      	ldrb	r4, [r7, #31]
 8020518:	f7ff fef2 	bl	8020300 <Get_New_Task_ID>
 802051c:	4602      	mov	r2, r0
 802051e:	4942      	ldr	r1, [pc, #264]	; (8020628 <SCH_Add_Task+0x2a8>)
 8020520:	4623      	mov	r3, r4
 8020522:	009b      	lsls	r3, r3, #2
 8020524:	4423      	add	r3, r4
 8020526:	009b      	lsls	r3, r3, #2
 8020528:	440b      	add	r3, r1
 802052a:	3310      	adds	r3, #16
 802052c:	601a      	str	r2, [r3, #0]
			return SCH_tasks_G[newTaskIndex].TaskID;
 802052e:	7ffa      	ldrb	r2, [r7, #31]
 8020530:	493d      	ldr	r1, [pc, #244]	; (8020628 <SCH_Add_Task+0x2a8>)
 8020532:	4613      	mov	r3, r2
 8020534:	009b      	lsls	r3, r3, #2
 8020536:	4413      	add	r3, r2
 8020538:	009b      	lsls	r3, r3, #2
 802053a:	440b      	add	r3, r1
 802053c:	3310      	adds	r3, #16
 802053e:	681b      	ldr	r3, [r3, #0]
 8020540:	e06e      	b.n	8020620 <SCH_Add_Task+0x2a0>
		} else {
			if(SCH_tasks_G[newTaskIndex].pTask == 0x0000){
 8020542:	7ffa      	ldrb	r2, [r7, #31]
 8020544:	4938      	ldr	r1, [pc, #224]	; (8020628 <SCH_Add_Task+0x2a8>)
 8020546:	4613      	mov	r3, r2
 8020548:	009b      	lsls	r3, r3, #2
 802054a:	4413      	add	r3, r2
 802054c:	009b      	lsls	r3, r3, #2
 802054e:	440b      	add	r3, r1
 8020550:	681b      	ldr	r3, [r3, #0]
 8020552:	2b00      	cmp	r3, #0
 8020554:	d154      	bne.n	8020600 <SCH_Add_Task+0x280>
				SCH_tasks_G[newTaskIndex].pTask = pFunction;
 8020556:	7ffa      	ldrb	r2, [r7, #31]
 8020558:	4933      	ldr	r1, [pc, #204]	; (8020628 <SCH_Add_Task+0x2a8>)
 802055a:	4613      	mov	r3, r2
 802055c:	009b      	lsls	r3, r3, #2
 802055e:	4413      	add	r3, r2
 8020560:	009b      	lsls	r3, r3, #2
 8020562:	440b      	add	r3, r1
 8020564:	68fa      	ldr	r2, [r7, #12]
 8020566:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[newTaskIndex].Delay = DELAY - sumDelay;
 8020568:	7ffa      	ldrb	r2, [r7, #31]
 802056a:	68b9      	ldr	r1, [r7, #8]
 802056c:	69bb      	ldr	r3, [r7, #24]
 802056e:	1ac9      	subs	r1, r1, r3
 8020570:	482d      	ldr	r0, [pc, #180]	; (8020628 <SCH_Add_Task+0x2a8>)
 8020572:	4613      	mov	r3, r2
 8020574:	009b      	lsls	r3, r3, #2
 8020576:	4413      	add	r3, r2
 8020578:	009b      	lsls	r3, r3, #2
 802057a:	4403      	add	r3, r0
 802057c:	3304      	adds	r3, #4
 802057e:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[newTaskIndex].Period = PERIOD;
 8020580:	7ffa      	ldrb	r2, [r7, #31]
 8020582:	4929      	ldr	r1, [pc, #164]	; (8020628 <SCH_Add_Task+0x2a8>)
 8020584:	4613      	mov	r3, r2
 8020586:	009b      	lsls	r3, r3, #2
 8020588:	4413      	add	r3, r2
 802058a:	009b      	lsls	r3, r3, #2
 802058c:	440b      	add	r3, r1
 802058e:	3308      	adds	r3, #8
 8020590:	687a      	ldr	r2, [r7, #4]
 8020592:	601a      	str	r2, [r3, #0]
				if(SCH_tasks_G[newTaskIndex].Delay == 0){
 8020594:	7ffa      	ldrb	r2, [r7, #31]
 8020596:	4924      	ldr	r1, [pc, #144]	; (8020628 <SCH_Add_Task+0x2a8>)
 8020598:	4613      	mov	r3, r2
 802059a:	009b      	lsls	r3, r3, #2
 802059c:	4413      	add	r3, r2
 802059e:	009b      	lsls	r3, r3, #2
 80205a0:	440b      	add	r3, r1
 80205a2:	3304      	adds	r3, #4
 80205a4:	681b      	ldr	r3, [r3, #0]
 80205a6:	2b00      	cmp	r3, #0
 80205a8:	d10a      	bne.n	80205c0 <SCH_Add_Task+0x240>
					SCH_tasks_G[newTaskIndex].RunMe = 1;
 80205aa:	7ffa      	ldrb	r2, [r7, #31]
 80205ac:	491e      	ldr	r1, [pc, #120]	; (8020628 <SCH_Add_Task+0x2a8>)
 80205ae:	4613      	mov	r3, r2
 80205b0:	009b      	lsls	r3, r3, #2
 80205b2:	4413      	add	r3, r2
 80205b4:	009b      	lsls	r3, r3, #2
 80205b6:	440b      	add	r3, r1
 80205b8:	330c      	adds	r3, #12
 80205ba:	2201      	movs	r2, #1
 80205bc:	701a      	strb	r2, [r3, #0]
 80205be:	e009      	b.n	80205d4 <SCH_Add_Task+0x254>
				} else {
					SCH_tasks_G[newTaskIndex].RunMe = 0;
 80205c0:	7ffa      	ldrb	r2, [r7, #31]
 80205c2:	4919      	ldr	r1, [pc, #100]	; (8020628 <SCH_Add_Task+0x2a8>)
 80205c4:	4613      	mov	r3, r2
 80205c6:	009b      	lsls	r3, r3, #2
 80205c8:	4413      	add	r3, r2
 80205ca:	009b      	lsls	r3, r3, #2
 80205cc:	440b      	add	r3, r1
 80205ce:	330c      	adds	r3, #12
 80205d0:	2200      	movs	r2, #0
 80205d2:	701a      	strb	r2, [r3, #0]
				}
				SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 80205d4:	7ffc      	ldrb	r4, [r7, #31]
 80205d6:	f7ff fe93 	bl	8020300 <Get_New_Task_ID>
 80205da:	4602      	mov	r2, r0
 80205dc:	4912      	ldr	r1, [pc, #72]	; (8020628 <SCH_Add_Task+0x2a8>)
 80205de:	4623      	mov	r3, r4
 80205e0:	009b      	lsls	r3, r3, #2
 80205e2:	4423      	add	r3, r4
 80205e4:	009b      	lsls	r3, r3, #2
 80205e6:	440b      	add	r3, r1
 80205e8:	3310      	adds	r3, #16
 80205ea:	601a      	str	r2, [r3, #0]
				return SCH_tasks_G[newTaskIndex].TaskID;
 80205ec:	7ffa      	ldrb	r2, [r7, #31]
 80205ee:	490e      	ldr	r1, [pc, #56]	; (8020628 <SCH_Add_Task+0x2a8>)
 80205f0:	4613      	mov	r3, r2
 80205f2:	009b      	lsls	r3, r3, #2
 80205f4:	4413      	add	r3, r2
 80205f6:	009b      	lsls	r3, r3, #2
 80205f8:	440b      	add	r3, r1
 80205fa:	3310      	adds	r3, #16
 80205fc:	681b      	ldr	r3, [r3, #0]
 80205fe:	e00f      	b.n	8020620 <SCH_Add_Task+0x2a0>
	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 8020600:	7ffb      	ldrb	r3, [r7, #31]
 8020602:	3301      	adds	r3, #1
 8020604:	77fb      	strb	r3, [r7, #31]
 8020606:	7ffb      	ldrb	r3, [r7, #31]
 8020608:	2b27      	cmp	r3, #39	; 0x27
 802060a:	f67f aec8 	bls.w	802039e <SCH_Add_Task+0x1e>
			}
		}
	}
	return SCH_tasks_G[newTaskIndex].TaskID;
 802060e:	7ffa      	ldrb	r2, [r7, #31]
 8020610:	4905      	ldr	r1, [pc, #20]	; (8020628 <SCH_Add_Task+0x2a8>)
 8020612:	4613      	mov	r3, r2
 8020614:	009b      	lsls	r3, r3, #2
 8020616:	4413      	add	r3, r2
 8020618:	009b      	lsls	r3, r3, #2
 802061a:	440b      	add	r3, r1
 802061c:	3310      	adds	r3, #16
 802061e:	681b      	ldr	r3, [r3, #0]
}
 8020620:	4618      	mov	r0, r3
 8020622:	3724      	adds	r7, #36	; 0x24
 8020624:	46bd      	mov	sp, r7
 8020626:	bd90      	pop	{r4, r7, pc}
 8020628:	20003fd4 	.word	0x20003fd4

0802062c <SCH_Delete_Task>:


uint8_t SCH_Delete_Task(uint32_t taskID){
 802062c:	b480      	push	{r7}
 802062e:	b085      	sub	sp, #20
 8020630:	af00      	add	r7, sp, #0
 8020632:	6078      	str	r0, [r7, #4]
	uint8_t Return_code  = 0;
 8020634:	2300      	movs	r3, #0
 8020636:	737b      	strb	r3, [r7, #13]
	uint8_t taskIndex;
	uint8_t j;
	if(taskID != NO_TASK_ID){
 8020638:	687b      	ldr	r3, [r7, #4]
 802063a:	2b00      	cmp	r3, #0
 802063c:	f000 80e2 	beq.w	8020804 <SCH_Delete_Task+0x1d8>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 8020640:	2300      	movs	r3, #0
 8020642:	73fb      	strb	r3, [r7, #15]
 8020644:	e0da      	b.n	80207fc <SCH_Delete_Task+0x1d0>
			if(SCH_tasks_G[taskIndex].TaskID == taskID){
 8020646:	7bfa      	ldrb	r2, [r7, #15]
 8020648:	4971      	ldr	r1, [pc, #452]	; (8020810 <SCH_Delete_Task+0x1e4>)
 802064a:	4613      	mov	r3, r2
 802064c:	009b      	lsls	r3, r3, #2
 802064e:	4413      	add	r3, r2
 8020650:	009b      	lsls	r3, r3, #2
 8020652:	440b      	add	r3, r1
 8020654:	3310      	adds	r3, #16
 8020656:	681b      	ldr	r3, [r3, #0]
 8020658:	687a      	ldr	r2, [r7, #4]
 802065a:	429a      	cmp	r2, r3
 802065c:	f040 80cb 	bne.w	80207f6 <SCH_Delete_Task+0x1ca>
				Return_code = 1;
 8020660:	2301      	movs	r3, #1
 8020662:	737b      	strb	r3, [r7, #13]
				if(taskIndex != 0 && taskIndex < SCH_MAX_TASKS - 1){
 8020664:	7bfb      	ldrb	r3, [r7, #15]
 8020666:	2b00      	cmp	r3, #0
 8020668:	d02b      	beq.n	80206c2 <SCH_Delete_Task+0x96>
 802066a:	7bfb      	ldrb	r3, [r7, #15]
 802066c:	2b26      	cmp	r3, #38	; 0x26
 802066e:	d828      	bhi.n	80206c2 <SCH_Delete_Task+0x96>
					if(SCH_tasks_G[taskIndex+1].pTask != 0x0000){
 8020670:	7bfb      	ldrb	r3, [r7, #15]
 8020672:	1c5a      	adds	r2, r3, #1
 8020674:	4966      	ldr	r1, [pc, #408]	; (8020810 <SCH_Delete_Task+0x1e4>)
 8020676:	4613      	mov	r3, r2
 8020678:	009b      	lsls	r3, r3, #2
 802067a:	4413      	add	r3, r2
 802067c:	009b      	lsls	r3, r3, #2
 802067e:	440b      	add	r3, r1
 8020680:	681b      	ldr	r3, [r3, #0]
 8020682:	2b00      	cmp	r3, #0
 8020684:	d01d      	beq.n	80206c2 <SCH_Delete_Task+0x96>
						SCH_tasks_G[taskIndex+1].Delay += SCH_tasks_G[taskIndex].Delay;
 8020686:	7bfb      	ldrb	r3, [r7, #15]
 8020688:	1c5a      	adds	r2, r3, #1
 802068a:	4961      	ldr	r1, [pc, #388]	; (8020810 <SCH_Delete_Task+0x1e4>)
 802068c:	4613      	mov	r3, r2
 802068e:	009b      	lsls	r3, r3, #2
 8020690:	4413      	add	r3, r2
 8020692:	009b      	lsls	r3, r3, #2
 8020694:	440b      	add	r3, r1
 8020696:	3304      	adds	r3, #4
 8020698:	6819      	ldr	r1, [r3, #0]
 802069a:	7bfa      	ldrb	r2, [r7, #15]
 802069c:	485c      	ldr	r0, [pc, #368]	; (8020810 <SCH_Delete_Task+0x1e4>)
 802069e:	4613      	mov	r3, r2
 80206a0:	009b      	lsls	r3, r3, #2
 80206a2:	4413      	add	r3, r2
 80206a4:	009b      	lsls	r3, r3, #2
 80206a6:	4403      	add	r3, r0
 80206a8:	3304      	adds	r3, #4
 80206aa:	681b      	ldr	r3, [r3, #0]
 80206ac:	7bfa      	ldrb	r2, [r7, #15]
 80206ae:	3201      	adds	r2, #1
 80206b0:	4419      	add	r1, r3
 80206b2:	4857      	ldr	r0, [pc, #348]	; (8020810 <SCH_Delete_Task+0x1e4>)
 80206b4:	4613      	mov	r3, r2
 80206b6:	009b      	lsls	r3, r3, #2
 80206b8:	4413      	add	r3, r2
 80206ba:	009b      	lsls	r3, r3, #2
 80206bc:	4403      	add	r3, r0
 80206be:	3304      	adds	r3, #4
 80206c0:	6019      	str	r1, [r3, #0]
					}
				}

				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 80206c2:	7bfb      	ldrb	r3, [r7, #15]
 80206c4:	73bb      	strb	r3, [r7, #14]
 80206c6:	e060      	b.n	802078a <SCH_Delete_Task+0x15e>
					SCH_tasks_G[j].pTask = SCH_tasks_G[j+1].pTask;
 80206c8:	7bbb      	ldrb	r3, [r7, #14]
 80206ca:	1c59      	adds	r1, r3, #1
 80206cc:	7bba      	ldrb	r2, [r7, #14]
 80206ce:	4850      	ldr	r0, [pc, #320]	; (8020810 <SCH_Delete_Task+0x1e4>)
 80206d0:	460b      	mov	r3, r1
 80206d2:	009b      	lsls	r3, r3, #2
 80206d4:	440b      	add	r3, r1
 80206d6:	009b      	lsls	r3, r3, #2
 80206d8:	4403      	add	r3, r0
 80206da:	6819      	ldr	r1, [r3, #0]
 80206dc:	484c      	ldr	r0, [pc, #304]	; (8020810 <SCH_Delete_Task+0x1e4>)
 80206de:	4613      	mov	r3, r2
 80206e0:	009b      	lsls	r3, r3, #2
 80206e2:	4413      	add	r3, r2
 80206e4:	009b      	lsls	r3, r3, #2
 80206e6:	4403      	add	r3, r0
 80206e8:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Period = SCH_tasks_G[j+1].Period;
 80206ea:	7bbb      	ldrb	r3, [r7, #14]
 80206ec:	1c59      	adds	r1, r3, #1
 80206ee:	7bba      	ldrb	r2, [r7, #14]
 80206f0:	4847      	ldr	r0, [pc, #284]	; (8020810 <SCH_Delete_Task+0x1e4>)
 80206f2:	460b      	mov	r3, r1
 80206f4:	009b      	lsls	r3, r3, #2
 80206f6:	440b      	add	r3, r1
 80206f8:	009b      	lsls	r3, r3, #2
 80206fa:	4403      	add	r3, r0
 80206fc:	3308      	adds	r3, #8
 80206fe:	6819      	ldr	r1, [r3, #0]
 8020700:	4843      	ldr	r0, [pc, #268]	; (8020810 <SCH_Delete_Task+0x1e4>)
 8020702:	4613      	mov	r3, r2
 8020704:	009b      	lsls	r3, r3, #2
 8020706:	4413      	add	r3, r2
 8020708:	009b      	lsls	r3, r3, #2
 802070a:	4403      	add	r3, r0
 802070c:	3308      	adds	r3, #8
 802070e:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Delay = SCH_tasks_G[j+1].Delay;
 8020710:	7bbb      	ldrb	r3, [r7, #14]
 8020712:	1c59      	adds	r1, r3, #1
 8020714:	7bba      	ldrb	r2, [r7, #14]
 8020716:	483e      	ldr	r0, [pc, #248]	; (8020810 <SCH_Delete_Task+0x1e4>)
 8020718:	460b      	mov	r3, r1
 802071a:	009b      	lsls	r3, r3, #2
 802071c:	440b      	add	r3, r1
 802071e:	009b      	lsls	r3, r3, #2
 8020720:	4403      	add	r3, r0
 8020722:	3304      	adds	r3, #4
 8020724:	6819      	ldr	r1, [r3, #0]
 8020726:	483a      	ldr	r0, [pc, #232]	; (8020810 <SCH_Delete_Task+0x1e4>)
 8020728:	4613      	mov	r3, r2
 802072a:	009b      	lsls	r3, r3, #2
 802072c:	4413      	add	r3, r2
 802072e:	009b      	lsls	r3, r3, #2
 8020730:	4403      	add	r3, r0
 8020732:	3304      	adds	r3, #4
 8020734:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].RunMe = SCH_tasks_G[j+1].RunMe;
 8020736:	7bbb      	ldrb	r3, [r7, #14]
 8020738:	1c59      	adds	r1, r3, #1
 802073a:	7bba      	ldrb	r2, [r7, #14]
 802073c:	4834      	ldr	r0, [pc, #208]	; (8020810 <SCH_Delete_Task+0x1e4>)
 802073e:	460b      	mov	r3, r1
 8020740:	009b      	lsls	r3, r3, #2
 8020742:	440b      	add	r3, r1
 8020744:	009b      	lsls	r3, r3, #2
 8020746:	4403      	add	r3, r0
 8020748:	330c      	adds	r3, #12
 802074a:	7818      	ldrb	r0, [r3, #0]
 802074c:	4930      	ldr	r1, [pc, #192]	; (8020810 <SCH_Delete_Task+0x1e4>)
 802074e:	4613      	mov	r3, r2
 8020750:	009b      	lsls	r3, r3, #2
 8020752:	4413      	add	r3, r2
 8020754:	009b      	lsls	r3, r3, #2
 8020756:	440b      	add	r3, r1
 8020758:	330c      	adds	r3, #12
 802075a:	4602      	mov	r2, r0
 802075c:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[j].TaskID = SCH_tasks_G[j+1].TaskID;
 802075e:	7bbb      	ldrb	r3, [r7, #14]
 8020760:	1c59      	adds	r1, r3, #1
 8020762:	7bba      	ldrb	r2, [r7, #14]
 8020764:	482a      	ldr	r0, [pc, #168]	; (8020810 <SCH_Delete_Task+0x1e4>)
 8020766:	460b      	mov	r3, r1
 8020768:	009b      	lsls	r3, r3, #2
 802076a:	440b      	add	r3, r1
 802076c:	009b      	lsls	r3, r3, #2
 802076e:	4403      	add	r3, r0
 8020770:	3310      	adds	r3, #16
 8020772:	6819      	ldr	r1, [r3, #0]
 8020774:	4826      	ldr	r0, [pc, #152]	; (8020810 <SCH_Delete_Task+0x1e4>)
 8020776:	4613      	mov	r3, r2
 8020778:	009b      	lsls	r3, r3, #2
 802077a:	4413      	add	r3, r2
 802077c:	009b      	lsls	r3, r3, #2
 802077e:	4403      	add	r3, r0
 8020780:	3310      	adds	r3, #16
 8020782:	6019      	str	r1, [r3, #0]
				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 8020784:	7bbb      	ldrb	r3, [r7, #14]
 8020786:	3301      	adds	r3, #1
 8020788:	73bb      	strb	r3, [r7, #14]
 802078a:	7bbb      	ldrb	r3, [r7, #14]
 802078c:	2b26      	cmp	r3, #38	; 0x26
 802078e:	d99b      	bls.n	80206c8 <SCH_Delete_Task+0x9c>
				}
				SCH_tasks_G[j].pTask = 0;
 8020790:	7bba      	ldrb	r2, [r7, #14]
 8020792:	491f      	ldr	r1, [pc, #124]	; (8020810 <SCH_Delete_Task+0x1e4>)
 8020794:	4613      	mov	r3, r2
 8020796:	009b      	lsls	r3, r3, #2
 8020798:	4413      	add	r3, r2
 802079a:	009b      	lsls	r3, r3, #2
 802079c:	440b      	add	r3, r1
 802079e:	2200      	movs	r2, #0
 80207a0:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Period = 0;
 80207a2:	7bba      	ldrb	r2, [r7, #14]
 80207a4:	491a      	ldr	r1, [pc, #104]	; (8020810 <SCH_Delete_Task+0x1e4>)
 80207a6:	4613      	mov	r3, r2
 80207a8:	009b      	lsls	r3, r3, #2
 80207aa:	4413      	add	r3, r2
 80207ac:	009b      	lsls	r3, r3, #2
 80207ae:	440b      	add	r3, r1
 80207b0:	3308      	adds	r3, #8
 80207b2:	2200      	movs	r2, #0
 80207b4:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Delay = 0;
 80207b6:	7bba      	ldrb	r2, [r7, #14]
 80207b8:	4915      	ldr	r1, [pc, #84]	; (8020810 <SCH_Delete_Task+0x1e4>)
 80207ba:	4613      	mov	r3, r2
 80207bc:	009b      	lsls	r3, r3, #2
 80207be:	4413      	add	r3, r2
 80207c0:	009b      	lsls	r3, r3, #2
 80207c2:	440b      	add	r3, r1
 80207c4:	3304      	adds	r3, #4
 80207c6:	2200      	movs	r2, #0
 80207c8:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].RunMe = 0;
 80207ca:	7bba      	ldrb	r2, [r7, #14]
 80207cc:	4910      	ldr	r1, [pc, #64]	; (8020810 <SCH_Delete_Task+0x1e4>)
 80207ce:	4613      	mov	r3, r2
 80207d0:	009b      	lsls	r3, r3, #2
 80207d2:	4413      	add	r3, r2
 80207d4:	009b      	lsls	r3, r3, #2
 80207d6:	440b      	add	r3, r1
 80207d8:	330c      	adds	r3, #12
 80207da:	2200      	movs	r2, #0
 80207dc:	701a      	strb	r2, [r3, #0]
				SCH_tasks_G[j].TaskID = 0;
 80207de:	7bba      	ldrb	r2, [r7, #14]
 80207e0:	490b      	ldr	r1, [pc, #44]	; (8020810 <SCH_Delete_Task+0x1e4>)
 80207e2:	4613      	mov	r3, r2
 80207e4:	009b      	lsls	r3, r3, #2
 80207e6:	4413      	add	r3, r2
 80207e8:	009b      	lsls	r3, r3, #2
 80207ea:	440b      	add	r3, r1
 80207ec:	3310      	adds	r3, #16
 80207ee:	2200      	movs	r2, #0
 80207f0:	601a      	str	r2, [r3, #0]
				return Return_code;
 80207f2:	7b7b      	ldrb	r3, [r7, #13]
 80207f4:	e007      	b.n	8020806 <SCH_Delete_Task+0x1da>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 80207f6:	7bfb      	ldrb	r3, [r7, #15]
 80207f8:	3301      	adds	r3, #1
 80207fa:	73fb      	strb	r3, [r7, #15]
 80207fc:	7bfb      	ldrb	r3, [r7, #15]
 80207fe:	2b27      	cmp	r3, #39	; 0x27
 8020800:	f67f af21 	bls.w	8020646 <SCH_Delete_Task+0x1a>
			}
		}
	}
	return Return_code; // return status
 8020804:	7b7b      	ldrb	r3, [r7, #13]
}
 8020806:	4618      	mov	r0, r3
 8020808:	3714      	adds	r7, #20
 802080a:	46bd      	mov	sp, r7
 802080c:	bc80      	pop	{r7}
 802080e:	4770      	bx	lr
 8020810:	20003fd4 	.word	0x20003fd4

08020814 <SCH_Dispatch_Tasks>:



void SCH_Dispatch_Tasks(void){
 8020814:	b5b0      	push	{r4, r5, r7, lr}
 8020816:	b086      	sub	sp, #24
 8020818:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].RunMe > 0) {
 802081a:	4b11      	ldr	r3, [pc, #68]	; (8020860 <SCH_Dispatch_Tasks+0x4c>)
 802081c:	7b1b      	ldrb	r3, [r3, #12]
 802081e:	2b00      	cmp	r3, #0
 8020820:	d019      	beq.n	8020856 <SCH_Dispatch_Tasks+0x42>
//		sprintf((char*) strScheduler, "count=%d\r\n", (int) count_SCH_Update);
//		UART3_SendToHost((uint8_t *)strScheduler);
		(*SCH_tasks_G[0].pTask)(); // Run the task
 8020822:	4b0f      	ldr	r3, [pc, #60]	; (8020860 <SCH_Dispatch_Tasks+0x4c>)
 8020824:	681b      	ldr	r3, [r3, #0]
 8020826:	4798      	blx	r3
		SCH_tasks_G[0].RunMe = 0; // Reset / reduce RunMe flag
 8020828:	4b0d      	ldr	r3, [pc, #52]	; (8020860 <SCH_Dispatch_Tasks+0x4c>)
 802082a:	2200      	movs	r2, #0
 802082c:	731a      	strb	r2, [r3, #12]
		sTask temtask = SCH_tasks_G[0];
 802082e:	4b0c      	ldr	r3, [pc, #48]	; (8020860 <SCH_Dispatch_Tasks+0x4c>)
 8020830:	1d3c      	adds	r4, r7, #4
 8020832:	461d      	mov	r5, r3
 8020834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020838:	682b      	ldr	r3, [r5, #0]
 802083a:	6023      	str	r3, [r4, #0]
		SCH_Delete_Task(temtask.TaskID);
 802083c:	697b      	ldr	r3, [r7, #20]
 802083e:	4618      	mov	r0, r3
 8020840:	f7ff fef4 	bl	802062c <SCH_Delete_Task>
		if (temtask.Period != 0) {
 8020844:	68fb      	ldr	r3, [r7, #12]
 8020846:	2b00      	cmp	r3, #0
 8020848:	d005      	beq.n	8020856 <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(temtask.pTask, temtask.Period, temtask.Period);
 802084a:	687b      	ldr	r3, [r7, #4]
 802084c:	68f9      	ldr	r1, [r7, #12]
 802084e:	68fa      	ldr	r2, [r7, #12]
 8020850:	4618      	mov	r0, r3
 8020852:	f7ff fd95 	bl	8020380 <SCH_Add_Task>
		}
	}
}
 8020856:	bf00      	nop
 8020858:	3718      	adds	r7, #24
 802085a:	46bd      	mov	sp, r7
 802085c:	bdb0      	pop	{r4, r5, r7, pc}
 802085e:	bf00      	nop
 8020860:	20003fd4 	.word	0x20003fd4

08020864 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8020864:	b480      	push	{r7}
 8020866:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8020868:	f3bf 8f4f 	dsb	sy
}
 802086c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 802086e:	4b06      	ldr	r3, [pc, #24]	; (8020888 <__NVIC_SystemReset+0x24>)
 8020870:	68db      	ldr	r3, [r3, #12]
 8020872:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8020876:	4904      	ldr	r1, [pc, #16]	; (8020888 <__NVIC_SystemReset+0x24>)
 8020878:	4b04      	ldr	r3, [pc, #16]	; (802088c <__NVIC_SystemReset+0x28>)
 802087a:	4313      	orrs	r3, r2
 802087c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 802087e:	f3bf 8f4f 	dsb	sy
}
 8020882:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8020884:	bf00      	nop
 8020886:	e7fd      	b.n	8020884 <__NVIC_SystemReset+0x20>
 8020888:	e000ed00 	.word	0xe000ed00
 802088c:	05fa0004 	.word	0x05fa0004

08020890 <Jump_To_Current_Firmware>:
	Flash_Erase(CURRENT_VERSION_ADDR,1);
	Flash_Write_Char(CURRENT_VERSION_ADDR, version,strlen(VERSION));
}


void Jump_To_Current_Firmware(){
 8020890:	b580      	push	{r7, lr}
 8020892:	af00      	add	r7, sp, #0
	Flash_Erase(FIRMWARE_CHOOSEN,1);
 8020894:	2101      	movs	r1, #1
 8020896:	4804      	ldr	r0, [pc, #16]	; (80208a8 <Jump_To_Current_Firmware+0x18>)
 8020898:	f000 f82c 	bl	80208f4 <Flash_Erase>
    Flash_Write_Int(FIRMWARE_CHOOSEN, CURRENT_FIRMWARE_CHOOSEN);
 802089c:	2102      	movs	r1, #2
 802089e:	4802      	ldr	r0, [pc, #8]	; (80208a8 <Jump_To_Current_Firmware+0x18>)
 80208a0:	f000 f84c 	bl	802093c <Flash_Write_Int>
//	void (*app_reset_handler)(void) = (void*)(*(volatile uint32_t*) (CURRENT_FIRMWARE_ADDR + 4));
//	app_reset_handler();
	NVIC_SystemReset();
 80208a4:	f7ff ffde 	bl	8020864 <__NVIC_SystemReset>
 80208a8:	08060000 	.word	0x08060000

080208ac <Jump_To_Factory_Firmware>:
}

void Jump_To_Factory_Firmware(){
 80208ac:	b580      	push	{r7, lr}
 80208ae:	af00      	add	r7, sp, #0
	Flash_Erase(FIRMWARE_CHOOSEN,1);
 80208b0:	2101      	movs	r1, #1
 80208b2:	4804      	ldr	r0, [pc, #16]	; (80208c4 <Jump_To_Factory_Firmware+0x18>)
 80208b4:	f000 f81e 	bl	80208f4 <Flash_Erase>
    Flash_Write_Int(FIRMWARE_CHOOSEN, FACTORY_FIRMWARE_CHOOSEN);
 80208b8:	2101      	movs	r1, #1
 80208ba:	4802      	ldr	r0, [pc, #8]	; (80208c4 <Jump_To_Factory_Firmware+0x18>)
 80208bc:	f000 f83e 	bl	802093c <Flash_Write_Int>
//	void (*app_reset_handler)(void) = (void*)(*(volatile uint32_t*) (FOTA_FIRMWARE_ADDR + 4));
//	app_reset_handler();
	NVIC_SystemReset();
 80208c0:	f7ff ffd0 	bl	8020864 <__NVIC_SystemReset>
 80208c4:	08060000 	.word	0x08060000

080208c8 <Get_Update_Firmware_Status>:
void Update_Firmware_Success(){
	Flash_Erase(UPDATE_STATUS_ADDR,1);
    Flash_Write_Int(UPDATE_STATUS_ADDR, UPDATE_SUCCESS);
}

uint8_t Get_Update_Firmware_Status(){
 80208c8:	b480      	push	{r7}
 80208ca:	af00      	add	r7, sp, #0
	return update_status;
 80208cc:	4b02      	ldr	r3, [pc, #8]	; (80208d8 <Get_Update_Firmware_Status+0x10>)
 80208ce:	781b      	ldrb	r3, [r3, #0]
}
 80208d0:	4618      	mov	r0, r3
 80208d2:	46bd      	mov	sp, r7
 80208d4:	bc80      	pop	{r7}
 80208d6:	4770      	bx	lr
 80208d8:	20002528 	.word	0x20002528

080208dc <Flash_Lock>:
		data[i] = 0;
	}
}

void Flash_Lock()
{
 80208dc:	b580      	push	{r7, lr}
 80208de:	af00      	add	r7, sp, #0
	HAL_FLASH_Lock();
 80208e0:	f000 fe6c 	bl	80215bc <HAL_FLASH_Lock>
}
 80208e4:	bf00      	nop
 80208e6:	bd80      	pop	{r7, pc}

080208e8 <Flash_Unlock>:

void Flash_Unlock()
{
 80208e8:	b580      	push	{r7, lr}
 80208ea:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80208ec:	f000 fe40 	bl	8021570 <HAL_FLASH_Unlock>
}
 80208f0:	bf00      	nop
 80208f2:	bd80      	pop	{r7, pc}

080208f4 <Flash_Erase>:

void Flash_Erase(uint32_t addr,uint32_t num_bytes)
{
 80208f4:	b580      	push	{r7, lr}
 80208f6:	b088      	sub	sp, #32
 80208f8:	af00      	add	r7, sp, #0
 80208fa:	6078      	str	r0, [r7, #4]
 80208fc:	6039      	str	r1, [r7, #0]
	uint32_t num_page = (uint32_t)(num_bytes/FLASH_PAGE_SIZE)+1;
 80208fe:	683b      	ldr	r3, [r7, #0]
 8020900:	0adb      	lsrs	r3, r3, #11
 8020902:	3301      	adds	r3, #1
 8020904:	61fb      	str	r3, [r7, #28]
	uint32_t page_error;
	Flash_Unlock();
 8020906:	f7ff ffef 	bl	80208e8 <Flash_Unlock>
	FLASH_EraseInitTypeDef erase_instance;
	erase_instance.TypeErase = FLASH_TYPEERASE_PAGES;
 802090a:	2300      	movs	r3, #0
 802090c:	60bb      	str	r3, [r7, #8]
	erase_instance.NbPages = num_page;
 802090e:	69fb      	ldr	r3, [r7, #28]
 8020910:	617b      	str	r3, [r7, #20]
	erase_instance.PageAddress = addr;
 8020912:	687b      	ldr	r3, [r7, #4]
 8020914:	613b      	str	r3, [r7, #16]
	HAL_FLASHEx_Erase(&erase_instance, &page_error);
 8020916:	f107 0218 	add.w	r2, r7, #24
 802091a:	f107 0308 	add.w	r3, r7, #8
 802091e:	4611      	mov	r1, r2
 8020920:	4618      	mov	r0, r3
 8020922:	f000 fef1 	bl	8021708 <HAL_FLASHEx_Erase>
	Flash_Lock();
 8020926:	f7ff ffd9 	bl	80208dc <Flash_Lock>
	LOG("Erase done\r\n");
 802092a:	4803      	ldr	r0, [pc, #12]	; (8020938 <Flash_Erase+0x44>)
 802092c:	f7fe fb66 	bl	801effc <UART_DEBUG_Transmit>
}
 8020930:	bf00      	nop
 8020932:	3720      	adds	r7, #32
 8020934:	46bd      	mov	sp, r7
 8020936:	bd80      	pop	{r7, pc}
 8020938:	08024f70 	.word	0x08024f70

0802093c <Flash_Write_Int>:

void Flash_Write_Int(uint32_t addr, int data)
{
 802093c:	b580      	push	{r7, lr}
 802093e:	b082      	sub	sp, #8
 8020940:	af00      	add	r7, sp, #0
 8020942:	6078      	str	r0, [r7, #4]
 8020944:	6039      	str	r1, [r7, #0]
	Flash_Unlock();
 8020946:	f7ff ffcf 	bl	80208e8 <Flash_Unlock>
	FLASH->CR |= FLASH_CR_PG;				/*!< Programming */
 802094a:	4b12      	ldr	r3, [pc, #72]	; (8020994 <Flash_Write_Int+0x58>)
 802094c:	691b      	ldr	r3, [r3, #16]
 802094e:	4a11      	ldr	r2, [pc, #68]	; (8020994 <Flash_Write_Int+0x58>)
 8020950:	f043 0301 	orr.w	r3, r3, #1
 8020954:	6113      	str	r3, [r2, #16]
	while((FLASH->SR&FLASH_SR_BSY));
 8020956:	bf00      	nop
 8020958:	4b0e      	ldr	r3, [pc, #56]	; (8020994 <Flash_Write_Int+0x58>)
 802095a:	68db      	ldr	r3, [r3, #12]
 802095c:	f003 0301 	and.w	r3, r3, #1
 8020960:	2b00      	cmp	r3, #0
 8020962:	d1f9      	bne.n	8020958 <Flash_Write_Int+0x1c>
	*(__IO uint16_t*)addr = data;
 8020964:	687b      	ldr	r3, [r7, #4]
 8020966:	683a      	ldr	r2, [r7, #0]
 8020968:	b292      	uxth	r2, r2
 802096a:	801a      	strh	r2, [r3, #0]
	while((FLASH->SR&FLASH_SR_BSY));
 802096c:	bf00      	nop
 802096e:	4b09      	ldr	r3, [pc, #36]	; (8020994 <Flash_Write_Int+0x58>)
 8020970:	68db      	ldr	r3, [r3, #12]
 8020972:	f003 0301 	and.w	r3, r3, #1
 8020976:	2b00      	cmp	r3, #0
 8020978:	d1f9      	bne.n	802096e <Flash_Write_Int+0x32>
	FLASH->CR &= ~FLASH_CR_PG;
 802097a:	4b06      	ldr	r3, [pc, #24]	; (8020994 <Flash_Write_Int+0x58>)
 802097c:	691b      	ldr	r3, [r3, #16]
 802097e:	4a05      	ldr	r2, [pc, #20]	; (8020994 <Flash_Write_Int+0x58>)
 8020980:	f023 0301 	bic.w	r3, r3, #1
 8020984:	6113      	str	r3, [r2, #16]
	Flash_Lock();
 8020986:	f7ff ffa9 	bl	80208dc <Flash_Lock>
}
 802098a:	bf00      	nop
 802098c:	3708      	adds	r7, #8
 802098e:	46bd      	mov	sp, r7
 8020990:	bd80      	pop	{r7, pc}
 8020992:	bf00      	nop
 8020994:	40022000 	.word	0x40022000

08020998 <Flash_Write_Char>:
	return *val;
}


void Flash_Write_Char(uint32_t addr, uint8_t* data ,uint32_t data_len)
{
 8020998:	b580      	push	{r7, lr}
 802099a:	b08a      	sub	sp, #40	; 0x28
 802099c:	af00      	add	r7, sp, #0
 802099e:	60f8      	str	r0, [r7, #12]
 80209a0:	60b9      	str	r1, [r7, #8]
 80209a2:	607a      	str	r2, [r7, #4]
	char log[20];
	sprintf(log,"leng_char: %d\r\n",data_len);
 80209a4:	f107 0310 	add.w	r3, r7, #16
 80209a8:	687a      	ldr	r2, [r7, #4]
 80209aa:	4920      	ldr	r1, [pc, #128]	; (8020a2c <Flash_Write_Char+0x94>)
 80209ac:	4618      	mov	r0, r3
 80209ae:	f003 fbd7 	bl	8024160 <siprintf>
	LOG(log);
 80209b2:	f107 0310 	add.w	r3, r7, #16
 80209b6:	4618      	mov	r0, r3
 80209b8:	f7fe fb20 	bl	801effc <UART_DEBUG_Transmit>
	int i;
	uint16_t temp;
	Flash_Unlock();
 80209bc:	f7ff ff94 	bl	80208e8 <Flash_Unlock>
	FLASH->CR |= FLASH_CR_PG;
 80209c0:	4b1b      	ldr	r3, [pc, #108]	; (8020a30 <Flash_Write_Char+0x98>)
 80209c2:	691b      	ldr	r3, [r3, #16]
 80209c4:	4a1a      	ldr	r2, [pc, #104]	; (8020a30 <Flash_Write_Char+0x98>)
 80209c6:	f043 0301 	orr.w	r3, r3, #1
 80209ca:	6113      	str	r3, [r2, #16]
	for(i=0; i<data_len; i+=2)
 80209cc:	2300      	movs	r3, #0
 80209ce:	627b      	str	r3, [r7, #36]	; 0x24
 80209d0:	e011      	b.n	80209f6 <Flash_Write_Char+0x5e>
	{
	  while((FLASH->SR&FLASH_SR_BSY));
 80209d2:	bf00      	nop
 80209d4:	4b16      	ldr	r3, [pc, #88]	; (8020a30 <Flash_Write_Char+0x98>)
 80209d6:	68db      	ldr	r3, [r3, #12]
 80209d8:	f003 0301 	and.w	r3, r3, #1
 80209dc:	2b00      	cmp	r3, #0
 80209de:	d1f9      	bne.n	80209d4 <Flash_Write_Char+0x3c>
	  *(__IO uint16_t*)(addr + i) = *(uint16_t*)(data+i);
 80209e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80209e2:	68ba      	ldr	r2, [r7, #8]
 80209e4:	4413      	add	r3, r2
 80209e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80209e8:	68fa      	ldr	r2, [r7, #12]
 80209ea:	440a      	add	r2, r1
 80209ec:	881b      	ldrh	r3, [r3, #0]
 80209ee:	8013      	strh	r3, [r2, #0]
	for(i=0; i<data_len; i+=2)
 80209f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80209f2:	3302      	adds	r3, #2
 80209f4:	627b      	str	r3, [r7, #36]	; 0x24
 80209f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80209f8:	687a      	ldr	r2, [r7, #4]
 80209fa:	429a      	cmp	r2, r3
 80209fc:	d8e9      	bhi.n	80209d2 <Flash_Write_Char+0x3a>
	}
	while((FLASH->SR&FLASH_SR_BSY));
 80209fe:	bf00      	nop
 8020a00:	4b0b      	ldr	r3, [pc, #44]	; (8020a30 <Flash_Write_Char+0x98>)
 8020a02:	68db      	ldr	r3, [r3, #12]
 8020a04:	f003 0301 	and.w	r3, r3, #1
 8020a08:	2b00      	cmp	r3, #0
 8020a0a:	d1f9      	bne.n	8020a00 <Flash_Write_Char+0x68>
	FLASH->CR &= ~FLASH_CR_PG;
 8020a0c:	4b08      	ldr	r3, [pc, #32]	; (8020a30 <Flash_Write_Char+0x98>)
 8020a0e:	691b      	ldr	r3, [r3, #16]
 8020a10:	4a07      	ldr	r2, [pc, #28]	; (8020a30 <Flash_Write_Char+0x98>)
 8020a12:	f023 0301 	bic.w	r3, r3, #1
 8020a16:	6113      	str	r3, [r2, #16]
	Flash_Lock();
 8020a18:	f7ff ff60 	bl	80208dc <Flash_Lock>
	LOG("Write DOne");
 8020a1c:	4805      	ldr	r0, [pc, #20]	; (8020a34 <Flash_Write_Char+0x9c>)
 8020a1e:	f7fe faed 	bl	801effc <UART_DEBUG_Transmit>
}
 8020a22:	bf00      	nop
 8020a24:	3728      	adds	r7, #40	; 0x28
 8020a26:	46bd      	mov	sp, r7
 8020a28:	bd80      	pop	{r7, pc}
 8020a2a:	bf00      	nop
 8020a2c:	08024f80 	.word	0x08024f80
 8020a30:	40022000 	.word	0x40022000
 8020a34:	08024f90 	.word	0x08024f90

08020a38 <FSM_Display_State>:

/**
 * HTTP_Display_State()
 * @brief This is function for display state of State Machine. It only show State when having a state changation.
 */
void FSM_Display_State(void){
 8020a38:	b580      	push	{r7, lr}
 8020a3a:	af00      	add	r7, sp, #0
	if(fsm_curr_state!=fsm_prev_state){
 8020a3c:	4b0d      	ldr	r3, [pc, #52]	; (8020a74 <FSM_Display_State+0x3c>)
 8020a3e:	781a      	ldrb	r2, [r3, #0]
 8020a40:	4b0d      	ldr	r3, [pc, #52]	; (8020a78 <FSM_Display_State+0x40>)
 8020a42:	781b      	ldrb	r3, [r3, #0]
 8020a44:	429a      	cmp	r2, r3
 8020a46:	d012      	beq.n	8020a6e <FSM_Display_State+0x36>
		fsm_prev_state = fsm_curr_state;
 8020a48:	4b0a      	ldr	r3, [pc, #40]	; (8020a74 <FSM_Display_State+0x3c>)
 8020a4a:	781a      	ldrb	r2, [r3, #0]
 8020a4c:	4b0a      	ldr	r3, [pc, #40]	; (8020a78 <FSM_Display_State+0x40>)
 8020a4e:	701a      	strb	r2, [r3, #0]
		switch (fsm_curr_state) {
 8020a50:	4b08      	ldr	r3, [pc, #32]	; (8020a74 <FSM_Display_State+0x3c>)
 8020a52:	781b      	ldrb	r3, [r3, #0]
 8020a54:	2b00      	cmp	r3, #0
 8020a56:	d002      	beq.n	8020a5e <FSM_Display_State+0x26>
 8020a58:	2b01      	cmp	r3, #1
 8020a5a:	d004      	beq.n	8020a66 <FSM_Display_State+0x2e>
				break;
			case VERSION_CHECKING_HTTP:
				LOG("\r\nVERSION CHECKING HTTP\r\n");
				break;
			default:
				break;
 8020a5c:	e008      	b.n	8020a70 <FSM_Display_State+0x38>
				LOG("\r\nSTART SIMCOM\r\n");
 8020a5e:	4807      	ldr	r0, [pc, #28]	; (8020a7c <FSM_Display_State+0x44>)
 8020a60:	f7fe facc 	bl	801effc <UART_DEBUG_Transmit>
				break;
 8020a64:	e004      	b.n	8020a70 <FSM_Display_State+0x38>
				LOG("\r\nVERSION CHECKING HTTP\r\n");
 8020a66:	4806      	ldr	r0, [pc, #24]	; (8020a80 <FSM_Display_State+0x48>)
 8020a68:	f7fe fac8 	bl	801effc <UART_DEBUG_Transmit>
				break;
 8020a6c:	e000      	b.n	8020a70 <FSM_Display_State+0x38>
		}
	}
 8020a6e:	bf00      	nop

}
 8020a70:	bf00      	nop
 8020a72:	bd80      	pop	{r7, pc}
 8020a74:	200011c8 	.word	0x200011c8
 8020a78:	200011c9 	.word	0x200011c9
 8020a7c:	08024f9c 	.word	0x08024f9c
 8020a80:	08024fb0 	.word	0x08024fb0

08020a84 <FSM_Run>:

/**
 * HTTP_Run()
 * @brief This is function can be called from external file. It run follow state machine method. Not have param.
 */
uint8_t FSM_Run(void){
 8020a84:	b580      	push	{r7, lr}
 8020a86:	af00      	add	r7, sp, #0
	FSM_Display_State();
 8020a88:	f7ff ffd6 	bl	8020a38 <FSM_Display_State>
	if(fsm_curr_state < FSM_MAX_STATE){
 8020a8c:	4b07      	ldr	r3, [pc, #28]	; (8020aac <FSM_Run+0x28>)
 8020a8e:	781b      	ldrb	r3, [r3, #0]
 8020a90:	2b02      	cmp	r3, #2
 8020a92:	d808      	bhi.n	8020aa6 <FSM_Run+0x22>
		(*fsm_state_machine[fsm_curr_state].func)();
 8020a94:	4b05      	ldr	r3, [pc, #20]	; (8020aac <FSM_Run+0x28>)
 8020a96:	781b      	ldrb	r3, [r3, #0]
 8020a98:	4a05      	ldr	r2, [pc, #20]	; (8020ab0 <FSM_Run+0x2c>)
 8020a9a:	00db      	lsls	r3, r3, #3
 8020a9c:	4413      	add	r3, r2
 8020a9e:	685b      	ldr	r3, [r3, #4]
 8020aa0:	4798      	blx	r3
		return 0;
 8020aa2:	2300      	movs	r3, #0
 8020aa4:	e000      	b.n	8020aa8 <FSM_Run+0x24>
	}
	else{
		return 1;
 8020aa6:	2301      	movs	r3, #1
	}
}
 8020aa8:	4618      	mov	r0, r3
 8020aaa:	bd80      	pop	{r7, pc}
 8020aac:	200011c8 	.word	0x200011c8
 8020ab0:	200000ec 	.word	0x200000ec

08020ab4 <Start_Simcom>:


void Start_Simcom(){
 8020ab4:	b580      	push	{r7, lr}
 8020ab6:	af00      	add	r7, sp, #0
	if(Sim7600_Run()){
 8020ab8:	f7fd feac 	bl	801e814 <Sim7600_Run>
 8020abc:	4603      	mov	r3, r0
 8020abe:	2b00      	cmp	r3, #0
 8020ac0:	d002      	beq.n	8020ac8 <Start_Simcom+0x14>
		fsm_curr_state = VERSION_CHECKING_HTTP;
 8020ac2:	4b02      	ldr	r3, [pc, #8]	; (8020acc <Start_Simcom+0x18>)
 8020ac4:	2201      	movs	r2, #1
 8020ac6:	701a      	strb	r2, [r3, #0]
	}
}
 8020ac8:	bf00      	nop
 8020aca:	bd80      	pop	{r7, pc}
 8020acc:	200011c8 	.word	0x200011c8

08020ad0 <Version_Checking_Http>:
void Version_Checking_Http(){
 8020ad0:	b580      	push	{r7, lr}
 8020ad2:	af00      	add	r7, sp, #0
	ret = HTTP_Run();
 8020ad4:	f7fe fba4 	bl	801f220 <HTTP_Run>
 8020ad8:	4603      	mov	r3, r0
 8020ada:	461a      	mov	r2, r3
 8020adc:	4b15      	ldr	r3, [pc, #84]	; (8020b34 <Version_Checking_Http+0x64>)
 8020ade:	701a      	strb	r2, [r3, #0]
	if(ret == 1){
 8020ae0:	4b14      	ldr	r3, [pc, #80]	; (8020b34 <Version_Checking_Http+0x64>)
 8020ae2:	781b      	ldrb	r3, [r3, #0]
 8020ae4:	2b01      	cmp	r3, #1
 8020ae6:	d116      	bne.n	8020b16 <Version_Checking_Http+0x46>
		LOG("Get into\r\n");
 8020ae8:	4813      	ldr	r0, [pc, #76]	; (8020b38 <Version_Checking_Http+0x68>)
 8020aea:	f7fe fa87 	bl	801effc <UART_DEBUG_Transmit>
		if(Get_Update_Firmware_Status() == UPDATE_FAILED){
 8020aee:	f7ff feeb 	bl	80208c8 <Get_Update_Firmware_Status>
 8020af2:	4603      	mov	r3, r0
 8020af4:	2b01      	cmp	r3, #1
 8020af6:	d105      	bne.n	8020b04 <Version_Checking_Http+0x34>
			LOG("Get into Update Failed\r\n");
 8020af8:	4810      	ldr	r0, [pc, #64]	; (8020b3c <Version_Checking_Http+0x6c>)
 8020afa:	f7fe fa7f 	bl	801effc <UART_DEBUG_Transmit>
			Jump_To_Factory_Firmware();
 8020afe:	f7ff fed5 	bl	80208ac <Jump_To_Factory_Firmware>
	else if(ret == 2){
		Reset_SimConfiguration_State();
		HTTP_Set_State(HTTP_INIT);
		fsm_curr_state = START_SIMCOM;
	}
}
 8020b02:	e014      	b.n	8020b2e <Version_Checking_Http+0x5e>
			LOG("Get into Update Success\r\n");
 8020b04:	480e      	ldr	r0, [pc, #56]	; (8020b40 <Version_Checking_Http+0x70>)
 8020b06:	f7fe fa79 	bl	801effc <UART_DEBUG_Transmit>
			fsm_curr_state = COPY_NEW_FIRMWARE;
 8020b0a:	4b0e      	ldr	r3, [pc, #56]	; (8020b44 <Version_Checking_Http+0x74>)
 8020b0c:	2202      	movs	r2, #2
 8020b0e:	701a      	strb	r2, [r3, #0]
			Jump_To_Current_Firmware();
 8020b10:	f7ff febe 	bl	8020890 <Jump_To_Current_Firmware>
}
 8020b14:	e00b      	b.n	8020b2e <Version_Checking_Http+0x5e>
	else if(ret == 2){
 8020b16:	4b07      	ldr	r3, [pc, #28]	; (8020b34 <Version_Checking_Http+0x64>)
 8020b18:	781b      	ldrb	r3, [r3, #0]
 8020b1a:	2b02      	cmp	r3, #2
 8020b1c:	d107      	bne.n	8020b2e <Version_Checking_Http+0x5e>
		Reset_SimConfiguration_State();
 8020b1e:	f7fe f819 	bl	801eb54 <Reset_SimConfiguration_State>
		HTTP_Set_State(HTTP_INIT);
 8020b22:	2000      	movs	r0, #0
 8020b24:	f7ff fa00 	bl	801ff28 <HTTP_Set_State>
		fsm_curr_state = START_SIMCOM;
 8020b28:	4b06      	ldr	r3, [pc, #24]	; (8020b44 <Version_Checking_Http+0x74>)
 8020b2a:	2200      	movs	r2, #0
 8020b2c:	701a      	strb	r2, [r3, #0]
}
 8020b2e:	bf00      	nop
 8020b30:	bd80      	pop	{r7, pc}
 8020b32:	bf00      	nop
 8020b34:	200011ca 	.word	0x200011ca
 8020b38:	08024fcc 	.word	0x08024fcc
 8020b3c:	08024fd8 	.word	0x08024fd8
 8020b40:	08024ff4 	.word	0x08024ff4
 8020b44:	200011c8 	.word	0x200011c8

08020b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020b48:	b580      	push	{r7, lr}
 8020b4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020b4c:	f000 fa3a 	bl	8020fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8020b50:	f7fe f900 	bl	801ed54 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  UART_SIM7600_Init();
 8020b54:	f7fe f98c 	bl	801ee70 <UART_SIM7600_Init>
  UART_DEBUG_Init();
 8020b58:	f7fe fa26 	bl	801efa8 <UART_DEBUG_Init>
  I2C_Init();
 8020b5c:	f7fe f870 	bl	801ec40 <I2C_Init>
  Lcd_Initialization();
 8020b60:	f7fd fd64 	bl	801e62c <Lcd_Initialization>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  GPIO_Init();
 8020b64:	f7fd fffe 	bl	801eb64 <GPIO_Init>
  Timer_Init();
 8020b68:	f7fe f93a 	bl	801ede0 <Timer_Init>
  SPI2_Init();
 8020b6c:	f7fe f898 	bl	801eca0 <SPI2_Init>
  MC25LC512_Initialize();
 8020b70:	f7fd fba6 	bl	801e2c0 <MC25LC512_Initialize>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  UART_DEBUG_Transmit("Fota Start\r\n");
 8020b74:	4808      	ldr	r0, [pc, #32]	; (8020b98 <main+0x50>)
 8020b76:	f7fe fa41 	bl	801effc <UART_DEBUG_Transmit>
  Lcd_Clear_Display();
 8020b7a:	f7fd fd8d 	bl	801e698 <Lcd_Clear_Display>
  Lcd_Show_String("FOTA START", 0, 0);
 8020b7e:	2200      	movs	r2, #0
 8020b80:	2100      	movs	r1, #0
 8020b82:	4806      	ldr	r0, [pc, #24]	; (8020b9c <main+0x54>)
 8020b84:	f7fd fda0 	bl	801e6c8 <Lcd_Show_String>
  while (1)
  {
    /* USER CODE END WHILE */
	  FSM_Run();
 8020b88:	f7ff ff7c 	bl	8020a84 <FSM_Run>
	  SCH_Dispatch_Tasks();
 8020b8c:	f7ff fe42 	bl	8020814 <SCH_Dispatch_Tasks>
	  AT_Processing();
 8020b90:	f7ff fa8e 	bl	80200b0 <AT_Processing>
  {
 8020b94:	e7f8      	b.n	8020b88 <main+0x40>
 8020b96:	bf00      	nop
 8020b98:	08025010 	.word	0x08025010
 8020b9c:	08025020 	.word	0x08025020

08020ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020ba0:	b480      	push	{r7}
 8020ba2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8020ba4:	b672      	cpsid	i
}
 8020ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8020ba8:	e7fe      	b.n	8020ba8 <Error_Handler+0x8>
	...

08020bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020bac:	b480      	push	{r7}
 8020bae:	b085      	sub	sp, #20
 8020bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8020bb2:	4b15      	ldr	r3, [pc, #84]	; (8020c08 <HAL_MspInit+0x5c>)
 8020bb4:	699b      	ldr	r3, [r3, #24]
 8020bb6:	4a14      	ldr	r2, [pc, #80]	; (8020c08 <HAL_MspInit+0x5c>)
 8020bb8:	f043 0301 	orr.w	r3, r3, #1
 8020bbc:	6193      	str	r3, [r2, #24]
 8020bbe:	4b12      	ldr	r3, [pc, #72]	; (8020c08 <HAL_MspInit+0x5c>)
 8020bc0:	699b      	ldr	r3, [r3, #24]
 8020bc2:	f003 0301 	and.w	r3, r3, #1
 8020bc6:	60bb      	str	r3, [r7, #8]
 8020bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8020bca:	4b0f      	ldr	r3, [pc, #60]	; (8020c08 <HAL_MspInit+0x5c>)
 8020bcc:	69db      	ldr	r3, [r3, #28]
 8020bce:	4a0e      	ldr	r2, [pc, #56]	; (8020c08 <HAL_MspInit+0x5c>)
 8020bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020bd4:	61d3      	str	r3, [r2, #28]
 8020bd6:	4b0c      	ldr	r3, [pc, #48]	; (8020c08 <HAL_MspInit+0x5c>)
 8020bd8:	69db      	ldr	r3, [r3, #28]
 8020bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020bde:	607b      	str	r3, [r7, #4]
 8020be0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8020be2:	4b0a      	ldr	r3, [pc, #40]	; (8020c0c <HAL_MspInit+0x60>)
 8020be4:	685b      	ldr	r3, [r3, #4]
 8020be6:	60fb      	str	r3, [r7, #12]
 8020be8:	68fb      	ldr	r3, [r7, #12]
 8020bea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8020bee:	60fb      	str	r3, [r7, #12]
 8020bf0:	68fb      	ldr	r3, [r7, #12]
 8020bf2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8020bf6:	60fb      	str	r3, [r7, #12]
 8020bf8:	4a04      	ldr	r2, [pc, #16]	; (8020c0c <HAL_MspInit+0x60>)
 8020bfa:	68fb      	ldr	r3, [r7, #12]
 8020bfc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8020bfe:	bf00      	nop
 8020c00:	3714      	adds	r7, #20
 8020c02:	46bd      	mov	sp, r7
 8020c04:	bc80      	pop	{r7}
 8020c06:	4770      	bx	lr
 8020c08:	40021000 	.word	0x40021000
 8020c0c:	40010000 	.word	0x40010000

08020c10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8020c10:	b580      	push	{r7, lr}
 8020c12:	b088      	sub	sp, #32
 8020c14:	af00      	add	r7, sp, #0
 8020c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020c18:	f107 0310 	add.w	r3, r7, #16
 8020c1c:	2200      	movs	r2, #0
 8020c1e:	601a      	str	r2, [r3, #0]
 8020c20:	605a      	str	r2, [r3, #4]
 8020c22:	609a      	str	r2, [r3, #8]
 8020c24:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8020c26:	687b      	ldr	r3, [r7, #4]
 8020c28:	681b      	ldr	r3, [r3, #0]
 8020c2a:	4a15      	ldr	r2, [pc, #84]	; (8020c80 <HAL_I2C_MspInit+0x70>)
 8020c2c:	4293      	cmp	r3, r2
 8020c2e:	d123      	bne.n	8020c78 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8020c30:	4b14      	ldr	r3, [pc, #80]	; (8020c84 <HAL_I2C_MspInit+0x74>)
 8020c32:	699b      	ldr	r3, [r3, #24]
 8020c34:	4a13      	ldr	r2, [pc, #76]	; (8020c84 <HAL_I2C_MspInit+0x74>)
 8020c36:	f043 0308 	orr.w	r3, r3, #8
 8020c3a:	6193      	str	r3, [r2, #24]
 8020c3c:	4b11      	ldr	r3, [pc, #68]	; (8020c84 <HAL_I2C_MspInit+0x74>)
 8020c3e:	699b      	ldr	r3, [r3, #24]
 8020c40:	f003 0308 	and.w	r3, r3, #8
 8020c44:	60fb      	str	r3, [r7, #12]
 8020c46:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8020c48:	23c0      	movs	r3, #192	; 0xc0
 8020c4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8020c4c:	2312      	movs	r3, #18
 8020c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8020c50:	2303      	movs	r3, #3
 8020c52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8020c54:	f107 0310 	add.w	r3, r7, #16
 8020c58:	4619      	mov	r1, r3
 8020c5a:	480b      	ldr	r0, [pc, #44]	; (8020c88 <HAL_I2C_MspInit+0x78>)
 8020c5c:	f000 fdfc 	bl	8021858 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8020c60:	4b08      	ldr	r3, [pc, #32]	; (8020c84 <HAL_I2C_MspInit+0x74>)
 8020c62:	69db      	ldr	r3, [r3, #28]
 8020c64:	4a07      	ldr	r2, [pc, #28]	; (8020c84 <HAL_I2C_MspInit+0x74>)
 8020c66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8020c6a:	61d3      	str	r3, [r2, #28]
 8020c6c:	4b05      	ldr	r3, [pc, #20]	; (8020c84 <HAL_I2C_MspInit+0x74>)
 8020c6e:	69db      	ldr	r3, [r3, #28]
 8020c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8020c74:	60bb      	str	r3, [r7, #8]
 8020c76:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8020c78:	bf00      	nop
 8020c7a:	3720      	adds	r7, #32
 8020c7c:	46bd      	mov	sp, r7
 8020c7e:	bd80      	pop	{r7, pc}
 8020c80:	40005400 	.word	0x40005400
 8020c84:	40021000 	.word	0x40021000
 8020c88:	40010c00 	.word	0x40010c00

08020c8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8020c8c:	b580      	push	{r7, lr}
 8020c8e:	b088      	sub	sp, #32
 8020c90:	af00      	add	r7, sp, #0
 8020c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020c94:	f107 0310 	add.w	r3, r7, #16
 8020c98:	2200      	movs	r2, #0
 8020c9a:	601a      	str	r2, [r3, #0]
 8020c9c:	605a      	str	r2, [r3, #4]
 8020c9e:	609a      	str	r2, [r3, #8]
 8020ca0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8020ca2:	687b      	ldr	r3, [r7, #4]
 8020ca4:	681b      	ldr	r3, [r3, #0]
 8020ca6:	4a16      	ldr	r2, [pc, #88]	; (8020d00 <HAL_SPI_MspInit+0x74>)
 8020ca8:	4293      	cmp	r3, r2
 8020caa:	d124      	bne.n	8020cf6 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8020cac:	4b15      	ldr	r3, [pc, #84]	; (8020d04 <HAL_SPI_MspInit+0x78>)
 8020cae:	69db      	ldr	r3, [r3, #28]
 8020cb0:	4a14      	ldr	r2, [pc, #80]	; (8020d04 <HAL_SPI_MspInit+0x78>)
 8020cb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020cb6:	61d3      	str	r3, [r2, #28]
 8020cb8:	4b12      	ldr	r3, [pc, #72]	; (8020d04 <HAL_SPI_MspInit+0x78>)
 8020cba:	69db      	ldr	r3, [r3, #28]
 8020cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020cc0:	60fb      	str	r3, [r7, #12]
 8020cc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8020cc4:	4b0f      	ldr	r3, [pc, #60]	; (8020d04 <HAL_SPI_MspInit+0x78>)
 8020cc6:	699b      	ldr	r3, [r3, #24]
 8020cc8:	4a0e      	ldr	r2, [pc, #56]	; (8020d04 <HAL_SPI_MspInit+0x78>)
 8020cca:	f043 0308 	orr.w	r3, r3, #8
 8020cce:	6193      	str	r3, [r2, #24]
 8020cd0:	4b0c      	ldr	r3, [pc, #48]	; (8020d04 <HAL_SPI_MspInit+0x78>)
 8020cd2:	699b      	ldr	r3, [r3, #24]
 8020cd4:	f003 0308 	and.w	r3, r3, #8
 8020cd8:	60bb      	str	r3, [r7, #8]
 8020cda:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8020cdc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8020ce0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020ce2:	2302      	movs	r3, #2
 8020ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8020ce6:	2303      	movs	r3, #3
 8020ce8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8020cea:	f107 0310 	add.w	r3, r7, #16
 8020cee:	4619      	mov	r1, r3
 8020cf0:	4805      	ldr	r0, [pc, #20]	; (8020d08 <HAL_SPI_MspInit+0x7c>)
 8020cf2:	f000 fdb1 	bl	8021858 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8020cf6:	bf00      	nop
 8020cf8:	3720      	adds	r7, #32
 8020cfa:	46bd      	mov	sp, r7
 8020cfc:	bd80      	pop	{r7, pc}
 8020cfe:	bf00      	nop
 8020d00:	40003800 	.word	0x40003800
 8020d04:	40021000 	.word	0x40021000
 8020d08:	40010c00 	.word	0x40010c00

08020d0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8020d0c:	b580      	push	{r7, lr}
 8020d0e:	b084      	sub	sp, #16
 8020d10:	af00      	add	r7, sp, #0
 8020d12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8020d14:	687b      	ldr	r3, [r7, #4]
 8020d16:	681b      	ldr	r3, [r3, #0]
 8020d18:	4a0d      	ldr	r2, [pc, #52]	; (8020d50 <HAL_TIM_Base_MspInit+0x44>)
 8020d1a:	4293      	cmp	r3, r2
 8020d1c:	d113      	bne.n	8020d46 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8020d1e:	4b0d      	ldr	r3, [pc, #52]	; (8020d54 <HAL_TIM_Base_MspInit+0x48>)
 8020d20:	69db      	ldr	r3, [r3, #28]
 8020d22:	4a0c      	ldr	r2, [pc, #48]	; (8020d54 <HAL_TIM_Base_MspInit+0x48>)
 8020d24:	f043 0302 	orr.w	r3, r3, #2
 8020d28:	61d3      	str	r3, [r2, #28]
 8020d2a:	4b0a      	ldr	r3, [pc, #40]	; (8020d54 <HAL_TIM_Base_MspInit+0x48>)
 8020d2c:	69db      	ldr	r3, [r3, #28]
 8020d2e:	f003 0302 	and.w	r3, r3, #2
 8020d32:	60fb      	str	r3, [r7, #12]
 8020d34:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8020d36:	2200      	movs	r2, #0
 8020d38:	2100      	movs	r1, #0
 8020d3a:	201d      	movs	r0, #29
 8020d3c:	f000 fa9f 	bl	802127e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8020d40:	201d      	movs	r0, #29
 8020d42:	f000 fab8 	bl	80212b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8020d46:	bf00      	nop
 8020d48:	3710      	adds	r7, #16
 8020d4a:	46bd      	mov	sp, r7
 8020d4c:	bd80      	pop	{r7, pc}
 8020d4e:	bf00      	nop
 8020d50:	40000400 	.word	0x40000400
 8020d54:	40021000 	.word	0x40021000

08020d58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8020d58:	b580      	push	{r7, lr}
 8020d5a:	b08a      	sub	sp, #40	; 0x28
 8020d5c:	af00      	add	r7, sp, #0
 8020d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020d60:	f107 0318 	add.w	r3, r7, #24
 8020d64:	2200      	movs	r2, #0
 8020d66:	601a      	str	r2, [r3, #0]
 8020d68:	605a      	str	r2, [r3, #4]
 8020d6a:	609a      	str	r2, [r3, #8]
 8020d6c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8020d6e:	687b      	ldr	r3, [r7, #4]
 8020d70:	681b      	ldr	r3, [r3, #0]
 8020d72:	4a3c      	ldr	r2, [pc, #240]	; (8020e64 <HAL_UART_MspInit+0x10c>)
 8020d74:	4293      	cmp	r3, r2
 8020d76:	d13a      	bne.n	8020dee <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8020d78:	4b3b      	ldr	r3, [pc, #236]	; (8020e68 <HAL_UART_MspInit+0x110>)
 8020d7a:	699b      	ldr	r3, [r3, #24]
 8020d7c:	4a3a      	ldr	r2, [pc, #232]	; (8020e68 <HAL_UART_MspInit+0x110>)
 8020d7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020d82:	6193      	str	r3, [r2, #24]
 8020d84:	4b38      	ldr	r3, [pc, #224]	; (8020e68 <HAL_UART_MspInit+0x110>)
 8020d86:	699b      	ldr	r3, [r3, #24]
 8020d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020d8c:	617b      	str	r3, [r7, #20]
 8020d8e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020d90:	4b35      	ldr	r3, [pc, #212]	; (8020e68 <HAL_UART_MspInit+0x110>)
 8020d92:	699b      	ldr	r3, [r3, #24]
 8020d94:	4a34      	ldr	r2, [pc, #208]	; (8020e68 <HAL_UART_MspInit+0x110>)
 8020d96:	f043 0304 	orr.w	r3, r3, #4
 8020d9a:	6193      	str	r3, [r2, #24]
 8020d9c:	4b32      	ldr	r3, [pc, #200]	; (8020e68 <HAL_UART_MspInit+0x110>)
 8020d9e:	699b      	ldr	r3, [r3, #24]
 8020da0:	f003 0304 	and.w	r3, r3, #4
 8020da4:	613b      	str	r3, [r7, #16]
 8020da6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8020da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8020dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020dae:	2302      	movs	r3, #2
 8020db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8020db2:	2303      	movs	r3, #3
 8020db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020db6:	f107 0318 	add.w	r3, r7, #24
 8020dba:	4619      	mov	r1, r3
 8020dbc:	482b      	ldr	r0, [pc, #172]	; (8020e6c <HAL_UART_MspInit+0x114>)
 8020dbe:	f000 fd4b 	bl	8021858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8020dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020dc8:	2300      	movs	r3, #0
 8020dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dcc:	2300      	movs	r3, #0
 8020dce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020dd0:	f107 0318 	add.w	r3, r7, #24
 8020dd4:	4619      	mov	r1, r3
 8020dd6:	4825      	ldr	r0, [pc, #148]	; (8020e6c <HAL_UART_MspInit+0x114>)
 8020dd8:	f000 fd3e 	bl	8021858 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8020ddc:	2200      	movs	r2, #0
 8020dde:	2100      	movs	r1, #0
 8020de0:	2025      	movs	r0, #37	; 0x25
 8020de2:	f000 fa4c 	bl	802127e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8020de6:	2025      	movs	r0, #37	; 0x25
 8020de8:	f000 fa65 	bl	80212b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8020dec:	e036      	b.n	8020e5c <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 8020dee:	687b      	ldr	r3, [r7, #4]
 8020df0:	681b      	ldr	r3, [r3, #0]
 8020df2:	4a1f      	ldr	r2, [pc, #124]	; (8020e70 <HAL_UART_MspInit+0x118>)
 8020df4:	4293      	cmp	r3, r2
 8020df6:	d131      	bne.n	8020e5c <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8020df8:	4b1b      	ldr	r3, [pc, #108]	; (8020e68 <HAL_UART_MspInit+0x110>)
 8020dfa:	69db      	ldr	r3, [r3, #28]
 8020dfc:	4a1a      	ldr	r2, [pc, #104]	; (8020e68 <HAL_UART_MspInit+0x110>)
 8020dfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8020e02:	61d3      	str	r3, [r2, #28]
 8020e04:	4b18      	ldr	r3, [pc, #96]	; (8020e68 <HAL_UART_MspInit+0x110>)
 8020e06:	69db      	ldr	r3, [r3, #28]
 8020e08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8020e0c:	60fb      	str	r3, [r7, #12]
 8020e0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8020e10:	4b15      	ldr	r3, [pc, #84]	; (8020e68 <HAL_UART_MspInit+0x110>)
 8020e12:	699b      	ldr	r3, [r3, #24]
 8020e14:	4a14      	ldr	r2, [pc, #80]	; (8020e68 <HAL_UART_MspInit+0x110>)
 8020e16:	f043 0308 	orr.w	r3, r3, #8
 8020e1a:	6193      	str	r3, [r2, #24]
 8020e1c:	4b12      	ldr	r3, [pc, #72]	; (8020e68 <HAL_UART_MspInit+0x110>)
 8020e1e:	699b      	ldr	r3, [r3, #24]
 8020e20:	f003 0308 	and.w	r3, r3, #8
 8020e24:	60bb      	str	r3, [r7, #8]
 8020e26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8020e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020e2e:	2302      	movs	r3, #2
 8020e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8020e32:	2303      	movs	r3, #3
 8020e34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8020e36:	f107 0318 	add.w	r3, r7, #24
 8020e3a:	4619      	mov	r1, r3
 8020e3c:	480d      	ldr	r0, [pc, #52]	; (8020e74 <HAL_UART_MspInit+0x11c>)
 8020e3e:	f000 fd0b 	bl	8021858 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8020e42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020e48:	2300      	movs	r3, #0
 8020e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e4c:	2300      	movs	r3, #0
 8020e4e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8020e50:	f107 0318 	add.w	r3, r7, #24
 8020e54:	4619      	mov	r1, r3
 8020e56:	4807      	ldr	r0, [pc, #28]	; (8020e74 <HAL_UART_MspInit+0x11c>)
 8020e58:	f000 fcfe 	bl	8021858 <HAL_GPIO_Init>
}
 8020e5c:	bf00      	nop
 8020e5e:	3728      	adds	r7, #40	; 0x28
 8020e60:	46bd      	mov	sp, r7
 8020e62:	bd80      	pop	{r7, pc}
 8020e64:	40013800 	.word	0x40013800
 8020e68:	40021000 	.word	0x40021000
 8020e6c:	40010800 	.word	0x40010800
 8020e70:	40004800 	.word	0x40004800
 8020e74:	40010c00 	.word	0x40010c00

08020e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8020e78:	b480      	push	{r7}
 8020e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8020e7c:	e7fe      	b.n	8020e7c <NMI_Handler+0x4>

08020e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8020e7e:	b480      	push	{r7}
 8020e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8020e82:	e7fe      	b.n	8020e82 <HardFault_Handler+0x4>

08020e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8020e84:	b480      	push	{r7}
 8020e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8020e88:	e7fe      	b.n	8020e88 <MemManage_Handler+0x4>

08020e8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8020e8a:	b480      	push	{r7}
 8020e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8020e8e:	e7fe      	b.n	8020e8e <BusFault_Handler+0x4>

08020e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8020e90:	b480      	push	{r7}
 8020e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8020e94:	e7fe      	b.n	8020e94 <UsageFault_Handler+0x4>

08020e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8020e96:	b480      	push	{r7}
 8020e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8020e9a:	bf00      	nop
 8020e9c:	46bd      	mov	sp, r7
 8020e9e:	bc80      	pop	{r7}
 8020ea0:	4770      	bx	lr

08020ea2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8020ea2:	b480      	push	{r7}
 8020ea4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8020ea6:	bf00      	nop
 8020ea8:	46bd      	mov	sp, r7
 8020eaa:	bc80      	pop	{r7}
 8020eac:	4770      	bx	lr

08020eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8020eae:	b480      	push	{r7}
 8020eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8020eb2:	bf00      	nop
 8020eb4:	46bd      	mov	sp, r7
 8020eb6:	bc80      	pop	{r7}
 8020eb8:	4770      	bx	lr

08020eba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8020eba:	b580      	push	{r7, lr}
 8020ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8020ebe:	f000 f8c7 	bl	8021050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8020ec2:	bf00      	nop
 8020ec4:	bd80      	pop	{r7, pc}
	...

08020ec8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8020ec8:	b580      	push	{r7, lr}
 8020eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8020ecc:	4802      	ldr	r0, [pc, #8]	; (8020ed8 <TIM3_IRQHandler+0x10>)
 8020ece:	f002 f9e9 	bl	80232a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8020ed2:	bf00      	nop
 8020ed4:	bd80      	pop	{r7, pc}
 8020ed6:	bf00      	nop
 8020ed8:	200012f4 	.word	0x200012f4

08020edc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8020edc:	b580      	push	{r7, lr}
 8020ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8020ee0:	4802      	ldr	r0, [pc, #8]	; (8020eec <USART1_IRQHandler+0x10>)
 8020ee2:	f002 fceb 	bl	80238bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8020ee6:	bf00      	nop
 8020ee8:	bd80      	pop	{r7, pc}
 8020eea:	bf00      	nop
 8020eec:	20002384 	.word	0x20002384

08020ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8020ef0:	b580      	push	{r7, lr}
 8020ef2:	b086      	sub	sp, #24
 8020ef4:	af00      	add	r7, sp, #0
 8020ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8020ef8:	4a14      	ldr	r2, [pc, #80]	; (8020f4c <_sbrk+0x5c>)
 8020efa:	4b15      	ldr	r3, [pc, #84]	; (8020f50 <_sbrk+0x60>)
 8020efc:	1ad3      	subs	r3, r2, r3
 8020efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8020f00:	697b      	ldr	r3, [r7, #20]
 8020f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8020f04:	4b13      	ldr	r3, [pc, #76]	; (8020f54 <_sbrk+0x64>)
 8020f06:	681b      	ldr	r3, [r3, #0]
 8020f08:	2b00      	cmp	r3, #0
 8020f0a:	d102      	bne.n	8020f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8020f0c:	4b11      	ldr	r3, [pc, #68]	; (8020f54 <_sbrk+0x64>)
 8020f0e:	4a12      	ldr	r2, [pc, #72]	; (8020f58 <_sbrk+0x68>)
 8020f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8020f12:	4b10      	ldr	r3, [pc, #64]	; (8020f54 <_sbrk+0x64>)
 8020f14:	681a      	ldr	r2, [r3, #0]
 8020f16:	687b      	ldr	r3, [r7, #4]
 8020f18:	4413      	add	r3, r2
 8020f1a:	693a      	ldr	r2, [r7, #16]
 8020f1c:	429a      	cmp	r2, r3
 8020f1e:	d207      	bcs.n	8020f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8020f20:	f003 f8ec 	bl	80240fc <__errno>
 8020f24:	4603      	mov	r3, r0
 8020f26:	220c      	movs	r2, #12
 8020f28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8020f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8020f2e:	e009      	b.n	8020f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8020f30:	4b08      	ldr	r3, [pc, #32]	; (8020f54 <_sbrk+0x64>)
 8020f32:	681b      	ldr	r3, [r3, #0]
 8020f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8020f36:	4b07      	ldr	r3, [pc, #28]	; (8020f54 <_sbrk+0x64>)
 8020f38:	681a      	ldr	r2, [r3, #0]
 8020f3a:	687b      	ldr	r3, [r7, #4]
 8020f3c:	4413      	add	r3, r2
 8020f3e:	4a05      	ldr	r2, [pc, #20]	; (8020f54 <_sbrk+0x64>)
 8020f40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8020f42:	68fb      	ldr	r3, [r7, #12]
}
 8020f44:	4618      	mov	r0, r3
 8020f46:	3718      	adds	r7, #24
 8020f48:	46bd      	mov	sp, r7
 8020f4a:	bd80      	pop	{r7, pc}
 8020f4c:	20010000 	.word	0x20010000
 8020f50:	00000400 	.word	0x00000400
 8020f54:	200011cc 	.word	0x200011cc
 8020f58:	20004328 	.word	0x20004328

08020f5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8020f5c:	b480      	push	{r7}
 8020f5e:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8020f60:	4b03      	ldr	r3, [pc, #12]	; (8020f70 <SystemInit+0x14>)
 8020f62:	4a04      	ldr	r2, [pc, #16]	; (8020f74 <SystemInit+0x18>)
 8020f64:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8020f66:	bf00      	nop
 8020f68:	46bd      	mov	sp, r7
 8020f6a:	bc80      	pop	{r7}
 8020f6c:	4770      	bx	lr
 8020f6e:	bf00      	nop
 8020f70:	e000ed00 	.word	0xe000ed00
 8020f74:	0801e000 	.word	0x0801e000

08020f78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8020f78:	480c      	ldr	r0, [pc, #48]	; (8020fac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8020f7a:	490d      	ldr	r1, [pc, #52]	; (8020fb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8020f7c:	4a0d      	ldr	r2, [pc, #52]	; (8020fb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8020f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8020f80:	e002      	b.n	8020f88 <LoopCopyDataInit>

08020f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8020f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8020f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8020f86:	3304      	adds	r3, #4

08020f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8020f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8020f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8020f8c:	d3f9      	bcc.n	8020f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8020f8e:	4a0a      	ldr	r2, [pc, #40]	; (8020fb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8020f90:	4c0a      	ldr	r4, [pc, #40]	; (8020fbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8020f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8020f94:	e001      	b.n	8020f9a <LoopFillZerobss>

08020f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8020f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8020f98:	3204      	adds	r2, #4

08020f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8020f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8020f9c:	d3fb      	bcc.n	8020f96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8020f9e:	f7ff ffdd 	bl	8020f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8020fa2:	f003 f8b1 	bl	8024108 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8020fa6:	f7ff fdcf 	bl	8020b48 <main>
  bx lr
 8020faa:	4770      	bx	lr
  ldr r0, =_sdata
 8020fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8020fb0:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8020fb4:	080250dc 	.word	0x080250dc
  ldr r2, =_sbss
 8020fb8:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8020fbc:	20004328 	.word	0x20004328

08020fc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8020fc0:	e7fe      	b.n	8020fc0 <ADC1_2_IRQHandler>
	...

08020fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8020fc4:	b580      	push	{r7, lr}
 8020fc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8020fc8:	4b08      	ldr	r3, [pc, #32]	; (8020fec <HAL_Init+0x28>)
 8020fca:	681b      	ldr	r3, [r3, #0]
 8020fcc:	4a07      	ldr	r2, [pc, #28]	; (8020fec <HAL_Init+0x28>)
 8020fce:	f043 0310 	orr.w	r3, r3, #16
 8020fd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8020fd4:	2003      	movs	r0, #3
 8020fd6:	f000 f947 	bl	8021268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8020fda:	200f      	movs	r0, #15
 8020fdc:	f000 f808 	bl	8020ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8020fe0:	f7ff fde4 	bl	8020bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8020fe4:	2300      	movs	r3, #0
}
 8020fe6:	4618      	mov	r0, r3
 8020fe8:	bd80      	pop	{r7, pc}
 8020fea:	bf00      	nop
 8020fec:	40022000 	.word	0x40022000

08020ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8020ff0:	b580      	push	{r7, lr}
 8020ff2:	b082      	sub	sp, #8
 8020ff4:	af00      	add	r7, sp, #0
 8020ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8020ff8:	4b12      	ldr	r3, [pc, #72]	; (8021044 <HAL_InitTick+0x54>)
 8020ffa:	681a      	ldr	r2, [r3, #0]
 8020ffc:	4b12      	ldr	r3, [pc, #72]	; (8021048 <HAL_InitTick+0x58>)
 8020ffe:	781b      	ldrb	r3, [r3, #0]
 8021000:	4619      	mov	r1, r3
 8021002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8021006:	fbb3 f3f1 	udiv	r3, r3, r1
 802100a:	fbb2 f3f3 	udiv	r3, r2, r3
 802100e:	4618      	mov	r0, r3
 8021010:	f000 f95f 	bl	80212d2 <HAL_SYSTICK_Config>
 8021014:	4603      	mov	r3, r0
 8021016:	2b00      	cmp	r3, #0
 8021018:	d001      	beq.n	802101e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 802101a:	2301      	movs	r3, #1
 802101c:	e00e      	b.n	802103c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802101e:	687b      	ldr	r3, [r7, #4]
 8021020:	2b0f      	cmp	r3, #15
 8021022:	d80a      	bhi.n	802103a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8021024:	2200      	movs	r2, #0
 8021026:	6879      	ldr	r1, [r7, #4]
 8021028:	f04f 30ff 	mov.w	r0, #4294967295
 802102c:	f000 f927 	bl	802127e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8021030:	4a06      	ldr	r2, [pc, #24]	; (802104c <HAL_InitTick+0x5c>)
 8021032:	687b      	ldr	r3, [r7, #4]
 8021034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8021036:	2300      	movs	r3, #0
 8021038:	e000      	b.n	802103c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 802103a:	2301      	movs	r3, #1
}
 802103c:	4618      	mov	r0, r3
 802103e:	3708      	adds	r7, #8
 8021040:	46bd      	mov	sp, r7
 8021042:	bd80      	pop	{r7, pc}
 8021044:	200000fc 	.word	0x200000fc
 8021048:	20000104 	.word	0x20000104
 802104c:	20000100 	.word	0x20000100

08021050 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8021050:	b480      	push	{r7}
 8021052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8021054:	4b05      	ldr	r3, [pc, #20]	; (802106c <HAL_IncTick+0x1c>)
 8021056:	781b      	ldrb	r3, [r3, #0]
 8021058:	461a      	mov	r2, r3
 802105a:	4b05      	ldr	r3, [pc, #20]	; (8021070 <HAL_IncTick+0x20>)
 802105c:	681b      	ldr	r3, [r3, #0]
 802105e:	4413      	add	r3, r2
 8021060:	4a03      	ldr	r2, [pc, #12]	; (8021070 <HAL_IncTick+0x20>)
 8021062:	6013      	str	r3, [r2, #0]
}
 8021064:	bf00      	nop
 8021066:	46bd      	mov	sp, r7
 8021068:	bc80      	pop	{r7}
 802106a:	4770      	bx	lr
 802106c:	20000104 	.word	0x20000104
 8021070:	200042f4 	.word	0x200042f4

08021074 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8021074:	b480      	push	{r7}
 8021076:	af00      	add	r7, sp, #0
  return uwTick;
 8021078:	4b02      	ldr	r3, [pc, #8]	; (8021084 <HAL_GetTick+0x10>)
 802107a:	681b      	ldr	r3, [r3, #0]
}
 802107c:	4618      	mov	r0, r3
 802107e:	46bd      	mov	sp, r7
 8021080:	bc80      	pop	{r7}
 8021082:	4770      	bx	lr
 8021084:	200042f4 	.word	0x200042f4

08021088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8021088:	b580      	push	{r7, lr}
 802108a:	b084      	sub	sp, #16
 802108c:	af00      	add	r7, sp, #0
 802108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8021090:	f7ff fff0 	bl	8021074 <HAL_GetTick>
 8021094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8021096:	687b      	ldr	r3, [r7, #4]
 8021098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802109a:	68fb      	ldr	r3, [r7, #12]
 802109c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80210a0:	d005      	beq.n	80210ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80210a2:	4b0a      	ldr	r3, [pc, #40]	; (80210cc <HAL_Delay+0x44>)
 80210a4:	781b      	ldrb	r3, [r3, #0]
 80210a6:	461a      	mov	r2, r3
 80210a8:	68fb      	ldr	r3, [r7, #12]
 80210aa:	4413      	add	r3, r2
 80210ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80210ae:	bf00      	nop
 80210b0:	f7ff ffe0 	bl	8021074 <HAL_GetTick>
 80210b4:	4602      	mov	r2, r0
 80210b6:	68bb      	ldr	r3, [r7, #8]
 80210b8:	1ad3      	subs	r3, r2, r3
 80210ba:	68fa      	ldr	r2, [r7, #12]
 80210bc:	429a      	cmp	r2, r3
 80210be:	d8f7      	bhi.n	80210b0 <HAL_Delay+0x28>
  {
  }
}
 80210c0:	bf00      	nop
 80210c2:	bf00      	nop
 80210c4:	3710      	adds	r7, #16
 80210c6:	46bd      	mov	sp, r7
 80210c8:	bd80      	pop	{r7, pc}
 80210ca:	bf00      	nop
 80210cc:	20000104 	.word	0x20000104

080210d0 <__NVIC_SetPriorityGrouping>:
{
 80210d0:	b480      	push	{r7}
 80210d2:	b085      	sub	sp, #20
 80210d4:	af00      	add	r7, sp, #0
 80210d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80210d8:	687b      	ldr	r3, [r7, #4]
 80210da:	f003 0307 	and.w	r3, r3, #7
 80210de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80210e0:	4b0c      	ldr	r3, [pc, #48]	; (8021114 <__NVIC_SetPriorityGrouping+0x44>)
 80210e2:	68db      	ldr	r3, [r3, #12]
 80210e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80210e6:	68ba      	ldr	r2, [r7, #8]
 80210e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80210ec:	4013      	ands	r3, r2
 80210ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80210f0:	68fb      	ldr	r3, [r7, #12]
 80210f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80210f4:	68bb      	ldr	r3, [r7, #8]
 80210f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80210f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80210fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8021100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8021102:	4a04      	ldr	r2, [pc, #16]	; (8021114 <__NVIC_SetPriorityGrouping+0x44>)
 8021104:	68bb      	ldr	r3, [r7, #8]
 8021106:	60d3      	str	r3, [r2, #12]
}
 8021108:	bf00      	nop
 802110a:	3714      	adds	r7, #20
 802110c:	46bd      	mov	sp, r7
 802110e:	bc80      	pop	{r7}
 8021110:	4770      	bx	lr
 8021112:	bf00      	nop
 8021114:	e000ed00 	.word	0xe000ed00

08021118 <__NVIC_GetPriorityGrouping>:
{
 8021118:	b480      	push	{r7}
 802111a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802111c:	4b04      	ldr	r3, [pc, #16]	; (8021130 <__NVIC_GetPriorityGrouping+0x18>)
 802111e:	68db      	ldr	r3, [r3, #12]
 8021120:	0a1b      	lsrs	r3, r3, #8
 8021122:	f003 0307 	and.w	r3, r3, #7
}
 8021126:	4618      	mov	r0, r3
 8021128:	46bd      	mov	sp, r7
 802112a:	bc80      	pop	{r7}
 802112c:	4770      	bx	lr
 802112e:	bf00      	nop
 8021130:	e000ed00 	.word	0xe000ed00

08021134 <__NVIC_EnableIRQ>:
{
 8021134:	b480      	push	{r7}
 8021136:	b083      	sub	sp, #12
 8021138:	af00      	add	r7, sp, #0
 802113a:	4603      	mov	r3, r0
 802113c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021142:	2b00      	cmp	r3, #0
 8021144:	db0b      	blt.n	802115e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8021146:	79fb      	ldrb	r3, [r7, #7]
 8021148:	f003 021f 	and.w	r2, r3, #31
 802114c:	4906      	ldr	r1, [pc, #24]	; (8021168 <__NVIC_EnableIRQ+0x34>)
 802114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021152:	095b      	lsrs	r3, r3, #5
 8021154:	2001      	movs	r0, #1
 8021156:	fa00 f202 	lsl.w	r2, r0, r2
 802115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 802115e:	bf00      	nop
 8021160:	370c      	adds	r7, #12
 8021162:	46bd      	mov	sp, r7
 8021164:	bc80      	pop	{r7}
 8021166:	4770      	bx	lr
 8021168:	e000e100 	.word	0xe000e100

0802116c <__NVIC_SetPriority>:
{
 802116c:	b480      	push	{r7}
 802116e:	b083      	sub	sp, #12
 8021170:	af00      	add	r7, sp, #0
 8021172:	4603      	mov	r3, r0
 8021174:	6039      	str	r1, [r7, #0]
 8021176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8021178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802117c:	2b00      	cmp	r3, #0
 802117e:	db0a      	blt.n	8021196 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8021180:	683b      	ldr	r3, [r7, #0]
 8021182:	b2da      	uxtb	r2, r3
 8021184:	490c      	ldr	r1, [pc, #48]	; (80211b8 <__NVIC_SetPriority+0x4c>)
 8021186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802118a:	0112      	lsls	r2, r2, #4
 802118c:	b2d2      	uxtb	r2, r2
 802118e:	440b      	add	r3, r1
 8021190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8021194:	e00a      	b.n	80211ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8021196:	683b      	ldr	r3, [r7, #0]
 8021198:	b2da      	uxtb	r2, r3
 802119a:	4908      	ldr	r1, [pc, #32]	; (80211bc <__NVIC_SetPriority+0x50>)
 802119c:	79fb      	ldrb	r3, [r7, #7]
 802119e:	f003 030f 	and.w	r3, r3, #15
 80211a2:	3b04      	subs	r3, #4
 80211a4:	0112      	lsls	r2, r2, #4
 80211a6:	b2d2      	uxtb	r2, r2
 80211a8:	440b      	add	r3, r1
 80211aa:	761a      	strb	r2, [r3, #24]
}
 80211ac:	bf00      	nop
 80211ae:	370c      	adds	r7, #12
 80211b0:	46bd      	mov	sp, r7
 80211b2:	bc80      	pop	{r7}
 80211b4:	4770      	bx	lr
 80211b6:	bf00      	nop
 80211b8:	e000e100 	.word	0xe000e100
 80211bc:	e000ed00 	.word	0xe000ed00

080211c0 <NVIC_EncodePriority>:
{
 80211c0:	b480      	push	{r7}
 80211c2:	b089      	sub	sp, #36	; 0x24
 80211c4:	af00      	add	r7, sp, #0
 80211c6:	60f8      	str	r0, [r7, #12]
 80211c8:	60b9      	str	r1, [r7, #8]
 80211ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80211cc:	68fb      	ldr	r3, [r7, #12]
 80211ce:	f003 0307 	and.w	r3, r3, #7
 80211d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80211d4:	69fb      	ldr	r3, [r7, #28]
 80211d6:	f1c3 0307 	rsb	r3, r3, #7
 80211da:	2b04      	cmp	r3, #4
 80211dc:	bf28      	it	cs
 80211de:	2304      	movcs	r3, #4
 80211e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80211e2:	69fb      	ldr	r3, [r7, #28]
 80211e4:	3304      	adds	r3, #4
 80211e6:	2b06      	cmp	r3, #6
 80211e8:	d902      	bls.n	80211f0 <NVIC_EncodePriority+0x30>
 80211ea:	69fb      	ldr	r3, [r7, #28]
 80211ec:	3b03      	subs	r3, #3
 80211ee:	e000      	b.n	80211f2 <NVIC_EncodePriority+0x32>
 80211f0:	2300      	movs	r3, #0
 80211f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80211f4:	f04f 32ff 	mov.w	r2, #4294967295
 80211f8:	69bb      	ldr	r3, [r7, #24]
 80211fa:	fa02 f303 	lsl.w	r3, r2, r3
 80211fe:	43da      	mvns	r2, r3
 8021200:	68bb      	ldr	r3, [r7, #8]
 8021202:	401a      	ands	r2, r3
 8021204:	697b      	ldr	r3, [r7, #20]
 8021206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8021208:	f04f 31ff 	mov.w	r1, #4294967295
 802120c:	697b      	ldr	r3, [r7, #20]
 802120e:	fa01 f303 	lsl.w	r3, r1, r3
 8021212:	43d9      	mvns	r1, r3
 8021214:	687b      	ldr	r3, [r7, #4]
 8021216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8021218:	4313      	orrs	r3, r2
}
 802121a:	4618      	mov	r0, r3
 802121c:	3724      	adds	r7, #36	; 0x24
 802121e:	46bd      	mov	sp, r7
 8021220:	bc80      	pop	{r7}
 8021222:	4770      	bx	lr

08021224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8021224:	b580      	push	{r7, lr}
 8021226:	b082      	sub	sp, #8
 8021228:	af00      	add	r7, sp, #0
 802122a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 802122c:	687b      	ldr	r3, [r7, #4]
 802122e:	3b01      	subs	r3, #1
 8021230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8021234:	d301      	bcc.n	802123a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8021236:	2301      	movs	r3, #1
 8021238:	e00f      	b.n	802125a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802123a:	4a0a      	ldr	r2, [pc, #40]	; (8021264 <SysTick_Config+0x40>)
 802123c:	687b      	ldr	r3, [r7, #4]
 802123e:	3b01      	subs	r3, #1
 8021240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8021242:	210f      	movs	r1, #15
 8021244:	f04f 30ff 	mov.w	r0, #4294967295
 8021248:	f7ff ff90 	bl	802116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 802124c:	4b05      	ldr	r3, [pc, #20]	; (8021264 <SysTick_Config+0x40>)
 802124e:	2200      	movs	r2, #0
 8021250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8021252:	4b04      	ldr	r3, [pc, #16]	; (8021264 <SysTick_Config+0x40>)
 8021254:	2207      	movs	r2, #7
 8021256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8021258:	2300      	movs	r3, #0
}
 802125a:	4618      	mov	r0, r3
 802125c:	3708      	adds	r7, #8
 802125e:	46bd      	mov	sp, r7
 8021260:	bd80      	pop	{r7, pc}
 8021262:	bf00      	nop
 8021264:	e000e010 	.word	0xe000e010

08021268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8021268:	b580      	push	{r7, lr}
 802126a:	b082      	sub	sp, #8
 802126c:	af00      	add	r7, sp, #0
 802126e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8021270:	6878      	ldr	r0, [r7, #4]
 8021272:	f7ff ff2d 	bl	80210d0 <__NVIC_SetPriorityGrouping>
}
 8021276:	bf00      	nop
 8021278:	3708      	adds	r7, #8
 802127a:	46bd      	mov	sp, r7
 802127c:	bd80      	pop	{r7, pc}

0802127e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 802127e:	b580      	push	{r7, lr}
 8021280:	b086      	sub	sp, #24
 8021282:	af00      	add	r7, sp, #0
 8021284:	4603      	mov	r3, r0
 8021286:	60b9      	str	r1, [r7, #8]
 8021288:	607a      	str	r2, [r7, #4]
 802128a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 802128c:	2300      	movs	r3, #0
 802128e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8021290:	f7ff ff42 	bl	8021118 <__NVIC_GetPriorityGrouping>
 8021294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8021296:	687a      	ldr	r2, [r7, #4]
 8021298:	68b9      	ldr	r1, [r7, #8]
 802129a:	6978      	ldr	r0, [r7, #20]
 802129c:	f7ff ff90 	bl	80211c0 <NVIC_EncodePriority>
 80212a0:	4602      	mov	r2, r0
 80212a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80212a6:	4611      	mov	r1, r2
 80212a8:	4618      	mov	r0, r3
 80212aa:	f7ff ff5f 	bl	802116c <__NVIC_SetPriority>
}
 80212ae:	bf00      	nop
 80212b0:	3718      	adds	r7, #24
 80212b2:	46bd      	mov	sp, r7
 80212b4:	bd80      	pop	{r7, pc}

080212b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80212b6:	b580      	push	{r7, lr}
 80212b8:	b082      	sub	sp, #8
 80212ba:	af00      	add	r7, sp, #0
 80212bc:	4603      	mov	r3, r0
 80212be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80212c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80212c4:	4618      	mov	r0, r3
 80212c6:	f7ff ff35 	bl	8021134 <__NVIC_EnableIRQ>
}
 80212ca:	bf00      	nop
 80212cc:	3708      	adds	r7, #8
 80212ce:	46bd      	mov	sp, r7
 80212d0:	bd80      	pop	{r7, pc}

080212d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80212d2:	b580      	push	{r7, lr}
 80212d4:	b082      	sub	sp, #8
 80212d6:	af00      	add	r7, sp, #0
 80212d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80212da:	6878      	ldr	r0, [r7, #4]
 80212dc:	f7ff ffa2 	bl	8021224 <SysTick_Config>
 80212e0:	4603      	mov	r3, r0
}
 80212e2:	4618      	mov	r0, r3
 80212e4:	3708      	adds	r7, #8
 80212e6:	46bd      	mov	sp, r7
 80212e8:	bd80      	pop	{r7, pc}

080212ea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80212ea:	b480      	push	{r7}
 80212ec:	b085      	sub	sp, #20
 80212ee:	af00      	add	r7, sp, #0
 80212f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80212f2:	2300      	movs	r3, #0
 80212f4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80212f6:	687b      	ldr	r3, [r7, #4]
 80212f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80212fc:	2b02      	cmp	r3, #2
 80212fe:	d008      	beq.n	8021312 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8021300:	687b      	ldr	r3, [r7, #4]
 8021302:	2204      	movs	r2, #4
 8021304:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8021306:	687b      	ldr	r3, [r7, #4]
 8021308:	2200      	movs	r2, #0
 802130a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 802130e:	2301      	movs	r3, #1
 8021310:	e020      	b.n	8021354 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8021312:	687b      	ldr	r3, [r7, #4]
 8021314:	681b      	ldr	r3, [r3, #0]
 8021316:	681a      	ldr	r2, [r3, #0]
 8021318:	687b      	ldr	r3, [r7, #4]
 802131a:	681b      	ldr	r3, [r3, #0]
 802131c:	f022 020e 	bic.w	r2, r2, #14
 8021320:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8021322:	687b      	ldr	r3, [r7, #4]
 8021324:	681b      	ldr	r3, [r3, #0]
 8021326:	681a      	ldr	r2, [r3, #0]
 8021328:	687b      	ldr	r3, [r7, #4]
 802132a:	681b      	ldr	r3, [r3, #0]
 802132c:	f022 0201 	bic.w	r2, r2, #1
 8021330:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8021332:	687b      	ldr	r3, [r7, #4]
 8021334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8021336:	687b      	ldr	r3, [r7, #4]
 8021338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802133a:	2101      	movs	r1, #1
 802133c:	fa01 f202 	lsl.w	r2, r1, r2
 8021340:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8021342:	687b      	ldr	r3, [r7, #4]
 8021344:	2201      	movs	r2, #1
 8021346:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 802134a:	687b      	ldr	r3, [r7, #4]
 802134c:	2200      	movs	r2, #0
 802134e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8021352:	7bfb      	ldrb	r3, [r7, #15]
}
 8021354:	4618      	mov	r0, r3
 8021356:	3714      	adds	r7, #20
 8021358:	46bd      	mov	sp, r7
 802135a:	bc80      	pop	{r7}
 802135c:	4770      	bx	lr
	...

08021360 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8021360:	b580      	push	{r7, lr}
 8021362:	b084      	sub	sp, #16
 8021364:	af00      	add	r7, sp, #0
 8021366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8021368:	2300      	movs	r3, #0
 802136a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 802136c:	687b      	ldr	r3, [r7, #4]
 802136e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8021372:	2b02      	cmp	r3, #2
 8021374:	d005      	beq.n	8021382 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8021376:	687b      	ldr	r3, [r7, #4]
 8021378:	2204      	movs	r2, #4
 802137a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 802137c:	2301      	movs	r3, #1
 802137e:	73fb      	strb	r3, [r7, #15]
 8021380:	e0d6      	b.n	8021530 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8021382:	687b      	ldr	r3, [r7, #4]
 8021384:	681b      	ldr	r3, [r3, #0]
 8021386:	681a      	ldr	r2, [r3, #0]
 8021388:	687b      	ldr	r3, [r7, #4]
 802138a:	681b      	ldr	r3, [r3, #0]
 802138c:	f022 020e 	bic.w	r2, r2, #14
 8021390:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8021392:	687b      	ldr	r3, [r7, #4]
 8021394:	681b      	ldr	r3, [r3, #0]
 8021396:	681a      	ldr	r2, [r3, #0]
 8021398:	687b      	ldr	r3, [r7, #4]
 802139a:	681b      	ldr	r3, [r3, #0]
 802139c:	f022 0201 	bic.w	r2, r2, #1
 80213a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80213a2:	687b      	ldr	r3, [r7, #4]
 80213a4:	681b      	ldr	r3, [r3, #0]
 80213a6:	461a      	mov	r2, r3
 80213a8:	4b64      	ldr	r3, [pc, #400]	; (802153c <HAL_DMA_Abort_IT+0x1dc>)
 80213aa:	429a      	cmp	r2, r3
 80213ac:	d958      	bls.n	8021460 <HAL_DMA_Abort_IT+0x100>
 80213ae:	687b      	ldr	r3, [r7, #4]
 80213b0:	681b      	ldr	r3, [r3, #0]
 80213b2:	4a63      	ldr	r2, [pc, #396]	; (8021540 <HAL_DMA_Abort_IT+0x1e0>)
 80213b4:	4293      	cmp	r3, r2
 80213b6:	d04f      	beq.n	8021458 <HAL_DMA_Abort_IT+0xf8>
 80213b8:	687b      	ldr	r3, [r7, #4]
 80213ba:	681b      	ldr	r3, [r3, #0]
 80213bc:	4a61      	ldr	r2, [pc, #388]	; (8021544 <HAL_DMA_Abort_IT+0x1e4>)
 80213be:	4293      	cmp	r3, r2
 80213c0:	d048      	beq.n	8021454 <HAL_DMA_Abort_IT+0xf4>
 80213c2:	687b      	ldr	r3, [r7, #4]
 80213c4:	681b      	ldr	r3, [r3, #0]
 80213c6:	4a60      	ldr	r2, [pc, #384]	; (8021548 <HAL_DMA_Abort_IT+0x1e8>)
 80213c8:	4293      	cmp	r3, r2
 80213ca:	d040      	beq.n	802144e <HAL_DMA_Abort_IT+0xee>
 80213cc:	687b      	ldr	r3, [r7, #4]
 80213ce:	681b      	ldr	r3, [r3, #0]
 80213d0:	4a5e      	ldr	r2, [pc, #376]	; (802154c <HAL_DMA_Abort_IT+0x1ec>)
 80213d2:	4293      	cmp	r3, r2
 80213d4:	d038      	beq.n	8021448 <HAL_DMA_Abort_IT+0xe8>
 80213d6:	687b      	ldr	r3, [r7, #4]
 80213d8:	681b      	ldr	r3, [r3, #0]
 80213da:	4a5d      	ldr	r2, [pc, #372]	; (8021550 <HAL_DMA_Abort_IT+0x1f0>)
 80213dc:	4293      	cmp	r3, r2
 80213de:	d030      	beq.n	8021442 <HAL_DMA_Abort_IT+0xe2>
 80213e0:	687b      	ldr	r3, [r7, #4]
 80213e2:	681b      	ldr	r3, [r3, #0]
 80213e4:	4a5b      	ldr	r2, [pc, #364]	; (8021554 <HAL_DMA_Abort_IT+0x1f4>)
 80213e6:	4293      	cmp	r3, r2
 80213e8:	d028      	beq.n	802143c <HAL_DMA_Abort_IT+0xdc>
 80213ea:	687b      	ldr	r3, [r7, #4]
 80213ec:	681b      	ldr	r3, [r3, #0]
 80213ee:	4a53      	ldr	r2, [pc, #332]	; (802153c <HAL_DMA_Abort_IT+0x1dc>)
 80213f0:	4293      	cmp	r3, r2
 80213f2:	d020      	beq.n	8021436 <HAL_DMA_Abort_IT+0xd6>
 80213f4:	687b      	ldr	r3, [r7, #4]
 80213f6:	681b      	ldr	r3, [r3, #0]
 80213f8:	4a57      	ldr	r2, [pc, #348]	; (8021558 <HAL_DMA_Abort_IT+0x1f8>)
 80213fa:	4293      	cmp	r3, r2
 80213fc:	d019      	beq.n	8021432 <HAL_DMA_Abort_IT+0xd2>
 80213fe:	687b      	ldr	r3, [r7, #4]
 8021400:	681b      	ldr	r3, [r3, #0]
 8021402:	4a56      	ldr	r2, [pc, #344]	; (802155c <HAL_DMA_Abort_IT+0x1fc>)
 8021404:	4293      	cmp	r3, r2
 8021406:	d012      	beq.n	802142e <HAL_DMA_Abort_IT+0xce>
 8021408:	687b      	ldr	r3, [r7, #4]
 802140a:	681b      	ldr	r3, [r3, #0]
 802140c:	4a54      	ldr	r2, [pc, #336]	; (8021560 <HAL_DMA_Abort_IT+0x200>)
 802140e:	4293      	cmp	r3, r2
 8021410:	d00a      	beq.n	8021428 <HAL_DMA_Abort_IT+0xc8>
 8021412:	687b      	ldr	r3, [r7, #4]
 8021414:	681b      	ldr	r3, [r3, #0]
 8021416:	4a53      	ldr	r2, [pc, #332]	; (8021564 <HAL_DMA_Abort_IT+0x204>)
 8021418:	4293      	cmp	r3, r2
 802141a:	d102      	bne.n	8021422 <HAL_DMA_Abort_IT+0xc2>
 802141c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021420:	e01b      	b.n	802145a <HAL_DMA_Abort_IT+0xfa>
 8021422:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021426:	e018      	b.n	802145a <HAL_DMA_Abort_IT+0xfa>
 8021428:	f44f 7380 	mov.w	r3, #256	; 0x100
 802142c:	e015      	b.n	802145a <HAL_DMA_Abort_IT+0xfa>
 802142e:	2310      	movs	r3, #16
 8021430:	e013      	b.n	802145a <HAL_DMA_Abort_IT+0xfa>
 8021432:	2301      	movs	r3, #1
 8021434:	e011      	b.n	802145a <HAL_DMA_Abort_IT+0xfa>
 8021436:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 802143a:	e00e      	b.n	802145a <HAL_DMA_Abort_IT+0xfa>
 802143c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8021440:	e00b      	b.n	802145a <HAL_DMA_Abort_IT+0xfa>
 8021442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021446:	e008      	b.n	802145a <HAL_DMA_Abort_IT+0xfa>
 8021448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802144c:	e005      	b.n	802145a <HAL_DMA_Abort_IT+0xfa>
 802144e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8021452:	e002      	b.n	802145a <HAL_DMA_Abort_IT+0xfa>
 8021454:	2310      	movs	r3, #16
 8021456:	e000      	b.n	802145a <HAL_DMA_Abort_IT+0xfa>
 8021458:	2301      	movs	r3, #1
 802145a:	4a43      	ldr	r2, [pc, #268]	; (8021568 <HAL_DMA_Abort_IT+0x208>)
 802145c:	6053      	str	r3, [r2, #4]
 802145e:	e057      	b.n	8021510 <HAL_DMA_Abort_IT+0x1b0>
 8021460:	687b      	ldr	r3, [r7, #4]
 8021462:	681b      	ldr	r3, [r3, #0]
 8021464:	4a36      	ldr	r2, [pc, #216]	; (8021540 <HAL_DMA_Abort_IT+0x1e0>)
 8021466:	4293      	cmp	r3, r2
 8021468:	d04f      	beq.n	802150a <HAL_DMA_Abort_IT+0x1aa>
 802146a:	687b      	ldr	r3, [r7, #4]
 802146c:	681b      	ldr	r3, [r3, #0]
 802146e:	4a35      	ldr	r2, [pc, #212]	; (8021544 <HAL_DMA_Abort_IT+0x1e4>)
 8021470:	4293      	cmp	r3, r2
 8021472:	d048      	beq.n	8021506 <HAL_DMA_Abort_IT+0x1a6>
 8021474:	687b      	ldr	r3, [r7, #4]
 8021476:	681b      	ldr	r3, [r3, #0]
 8021478:	4a33      	ldr	r2, [pc, #204]	; (8021548 <HAL_DMA_Abort_IT+0x1e8>)
 802147a:	4293      	cmp	r3, r2
 802147c:	d040      	beq.n	8021500 <HAL_DMA_Abort_IT+0x1a0>
 802147e:	687b      	ldr	r3, [r7, #4]
 8021480:	681b      	ldr	r3, [r3, #0]
 8021482:	4a32      	ldr	r2, [pc, #200]	; (802154c <HAL_DMA_Abort_IT+0x1ec>)
 8021484:	4293      	cmp	r3, r2
 8021486:	d038      	beq.n	80214fa <HAL_DMA_Abort_IT+0x19a>
 8021488:	687b      	ldr	r3, [r7, #4]
 802148a:	681b      	ldr	r3, [r3, #0]
 802148c:	4a30      	ldr	r2, [pc, #192]	; (8021550 <HAL_DMA_Abort_IT+0x1f0>)
 802148e:	4293      	cmp	r3, r2
 8021490:	d030      	beq.n	80214f4 <HAL_DMA_Abort_IT+0x194>
 8021492:	687b      	ldr	r3, [r7, #4]
 8021494:	681b      	ldr	r3, [r3, #0]
 8021496:	4a2f      	ldr	r2, [pc, #188]	; (8021554 <HAL_DMA_Abort_IT+0x1f4>)
 8021498:	4293      	cmp	r3, r2
 802149a:	d028      	beq.n	80214ee <HAL_DMA_Abort_IT+0x18e>
 802149c:	687b      	ldr	r3, [r7, #4]
 802149e:	681b      	ldr	r3, [r3, #0]
 80214a0:	4a26      	ldr	r2, [pc, #152]	; (802153c <HAL_DMA_Abort_IT+0x1dc>)
 80214a2:	4293      	cmp	r3, r2
 80214a4:	d020      	beq.n	80214e8 <HAL_DMA_Abort_IT+0x188>
 80214a6:	687b      	ldr	r3, [r7, #4]
 80214a8:	681b      	ldr	r3, [r3, #0]
 80214aa:	4a2b      	ldr	r2, [pc, #172]	; (8021558 <HAL_DMA_Abort_IT+0x1f8>)
 80214ac:	4293      	cmp	r3, r2
 80214ae:	d019      	beq.n	80214e4 <HAL_DMA_Abort_IT+0x184>
 80214b0:	687b      	ldr	r3, [r7, #4]
 80214b2:	681b      	ldr	r3, [r3, #0]
 80214b4:	4a29      	ldr	r2, [pc, #164]	; (802155c <HAL_DMA_Abort_IT+0x1fc>)
 80214b6:	4293      	cmp	r3, r2
 80214b8:	d012      	beq.n	80214e0 <HAL_DMA_Abort_IT+0x180>
 80214ba:	687b      	ldr	r3, [r7, #4]
 80214bc:	681b      	ldr	r3, [r3, #0]
 80214be:	4a28      	ldr	r2, [pc, #160]	; (8021560 <HAL_DMA_Abort_IT+0x200>)
 80214c0:	4293      	cmp	r3, r2
 80214c2:	d00a      	beq.n	80214da <HAL_DMA_Abort_IT+0x17a>
 80214c4:	687b      	ldr	r3, [r7, #4]
 80214c6:	681b      	ldr	r3, [r3, #0]
 80214c8:	4a26      	ldr	r2, [pc, #152]	; (8021564 <HAL_DMA_Abort_IT+0x204>)
 80214ca:	4293      	cmp	r3, r2
 80214cc:	d102      	bne.n	80214d4 <HAL_DMA_Abort_IT+0x174>
 80214ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80214d2:	e01b      	b.n	802150c <HAL_DMA_Abort_IT+0x1ac>
 80214d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80214d8:	e018      	b.n	802150c <HAL_DMA_Abort_IT+0x1ac>
 80214da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80214de:	e015      	b.n	802150c <HAL_DMA_Abort_IT+0x1ac>
 80214e0:	2310      	movs	r3, #16
 80214e2:	e013      	b.n	802150c <HAL_DMA_Abort_IT+0x1ac>
 80214e4:	2301      	movs	r3, #1
 80214e6:	e011      	b.n	802150c <HAL_DMA_Abort_IT+0x1ac>
 80214e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80214ec:	e00e      	b.n	802150c <HAL_DMA_Abort_IT+0x1ac>
 80214ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80214f2:	e00b      	b.n	802150c <HAL_DMA_Abort_IT+0x1ac>
 80214f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80214f8:	e008      	b.n	802150c <HAL_DMA_Abort_IT+0x1ac>
 80214fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80214fe:	e005      	b.n	802150c <HAL_DMA_Abort_IT+0x1ac>
 8021500:	f44f 7380 	mov.w	r3, #256	; 0x100
 8021504:	e002      	b.n	802150c <HAL_DMA_Abort_IT+0x1ac>
 8021506:	2310      	movs	r3, #16
 8021508:	e000      	b.n	802150c <HAL_DMA_Abort_IT+0x1ac>
 802150a:	2301      	movs	r3, #1
 802150c:	4a17      	ldr	r2, [pc, #92]	; (802156c <HAL_DMA_Abort_IT+0x20c>)
 802150e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8021510:	687b      	ldr	r3, [r7, #4]
 8021512:	2201      	movs	r2, #1
 8021514:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8021518:	687b      	ldr	r3, [r7, #4]
 802151a:	2200      	movs	r2, #0
 802151c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8021520:	687b      	ldr	r3, [r7, #4]
 8021522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021524:	2b00      	cmp	r3, #0
 8021526:	d003      	beq.n	8021530 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8021528:	687b      	ldr	r3, [r7, #4]
 802152a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802152c:	6878      	ldr	r0, [r7, #4]
 802152e:	4798      	blx	r3
    } 
  }
  return status;
 8021530:	7bfb      	ldrb	r3, [r7, #15]
}
 8021532:	4618      	mov	r0, r3
 8021534:	3710      	adds	r7, #16
 8021536:	46bd      	mov	sp, r7
 8021538:	bd80      	pop	{r7, pc}
 802153a:	bf00      	nop
 802153c:	40020080 	.word	0x40020080
 8021540:	40020008 	.word	0x40020008
 8021544:	4002001c 	.word	0x4002001c
 8021548:	40020030 	.word	0x40020030
 802154c:	40020044 	.word	0x40020044
 8021550:	40020058 	.word	0x40020058
 8021554:	4002006c 	.word	0x4002006c
 8021558:	40020408 	.word	0x40020408
 802155c:	4002041c 	.word	0x4002041c
 8021560:	40020430 	.word	0x40020430
 8021564:	40020444 	.word	0x40020444
 8021568:	40020400 	.word	0x40020400
 802156c:	40020000 	.word	0x40020000

08021570 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8021570:	b480      	push	{r7}
 8021572:	b083      	sub	sp, #12
 8021574:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8021576:	2300      	movs	r3, #0
 8021578:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 802157a:	4b0d      	ldr	r3, [pc, #52]	; (80215b0 <HAL_FLASH_Unlock+0x40>)
 802157c:	691b      	ldr	r3, [r3, #16]
 802157e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021582:	2b00      	cmp	r3, #0
 8021584:	d00d      	beq.n	80215a2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8021586:	4b0a      	ldr	r3, [pc, #40]	; (80215b0 <HAL_FLASH_Unlock+0x40>)
 8021588:	4a0a      	ldr	r2, [pc, #40]	; (80215b4 <HAL_FLASH_Unlock+0x44>)
 802158a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 802158c:	4b08      	ldr	r3, [pc, #32]	; (80215b0 <HAL_FLASH_Unlock+0x40>)
 802158e:	4a0a      	ldr	r2, [pc, #40]	; (80215b8 <HAL_FLASH_Unlock+0x48>)
 8021590:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8021592:	4b07      	ldr	r3, [pc, #28]	; (80215b0 <HAL_FLASH_Unlock+0x40>)
 8021594:	691b      	ldr	r3, [r3, #16]
 8021596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802159a:	2b00      	cmp	r3, #0
 802159c:	d001      	beq.n	80215a2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 802159e:	2301      	movs	r3, #1
 80215a0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80215a2:	79fb      	ldrb	r3, [r7, #7]
}
 80215a4:	4618      	mov	r0, r3
 80215a6:	370c      	adds	r7, #12
 80215a8:	46bd      	mov	sp, r7
 80215aa:	bc80      	pop	{r7}
 80215ac:	4770      	bx	lr
 80215ae:	bf00      	nop
 80215b0:	40022000 	.word	0x40022000
 80215b4:	45670123 	.word	0x45670123
 80215b8:	cdef89ab 	.word	0xcdef89ab

080215bc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80215bc:	b480      	push	{r7}
 80215be:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80215c0:	4b05      	ldr	r3, [pc, #20]	; (80215d8 <HAL_FLASH_Lock+0x1c>)
 80215c2:	691b      	ldr	r3, [r3, #16]
 80215c4:	4a04      	ldr	r2, [pc, #16]	; (80215d8 <HAL_FLASH_Lock+0x1c>)
 80215c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80215ca:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80215cc:	2300      	movs	r3, #0
}
 80215ce:	4618      	mov	r0, r3
 80215d0:	46bd      	mov	sp, r7
 80215d2:	bc80      	pop	{r7}
 80215d4:	4770      	bx	lr
 80215d6:	bf00      	nop
 80215d8:	40022000 	.word	0x40022000

080215dc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80215dc:	b580      	push	{r7, lr}
 80215de:	b084      	sub	sp, #16
 80215e0:	af00      	add	r7, sp, #0
 80215e2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80215e4:	f7ff fd46 	bl	8021074 <HAL_GetTick>
 80215e8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80215ea:	e010      	b.n	802160e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80215ec:	687b      	ldr	r3, [r7, #4]
 80215ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80215f2:	d00c      	beq.n	802160e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80215f4:	687b      	ldr	r3, [r7, #4]
 80215f6:	2b00      	cmp	r3, #0
 80215f8:	d007      	beq.n	802160a <FLASH_WaitForLastOperation+0x2e>
 80215fa:	f7ff fd3b 	bl	8021074 <HAL_GetTick>
 80215fe:	4602      	mov	r2, r0
 8021600:	68fb      	ldr	r3, [r7, #12]
 8021602:	1ad3      	subs	r3, r2, r3
 8021604:	687a      	ldr	r2, [r7, #4]
 8021606:	429a      	cmp	r2, r3
 8021608:	d201      	bcs.n	802160e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 802160a:	2303      	movs	r3, #3
 802160c:	e025      	b.n	802165a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 802160e:	4b15      	ldr	r3, [pc, #84]	; (8021664 <FLASH_WaitForLastOperation+0x88>)
 8021610:	68db      	ldr	r3, [r3, #12]
 8021612:	f003 0301 	and.w	r3, r3, #1
 8021616:	2b00      	cmp	r3, #0
 8021618:	d1e8      	bne.n	80215ec <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 802161a:	4b12      	ldr	r3, [pc, #72]	; (8021664 <FLASH_WaitForLastOperation+0x88>)
 802161c:	68db      	ldr	r3, [r3, #12]
 802161e:	f003 0320 	and.w	r3, r3, #32
 8021622:	2b00      	cmp	r3, #0
 8021624:	d002      	beq.n	802162c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8021626:	4b0f      	ldr	r3, [pc, #60]	; (8021664 <FLASH_WaitForLastOperation+0x88>)
 8021628:	2220      	movs	r2, #32
 802162a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 802162c:	4b0d      	ldr	r3, [pc, #52]	; (8021664 <FLASH_WaitForLastOperation+0x88>)
 802162e:	68db      	ldr	r3, [r3, #12]
 8021630:	f003 0310 	and.w	r3, r3, #16
 8021634:	2b00      	cmp	r3, #0
 8021636:	d10b      	bne.n	8021650 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8021638:	4b0a      	ldr	r3, [pc, #40]	; (8021664 <FLASH_WaitForLastOperation+0x88>)
 802163a:	69db      	ldr	r3, [r3, #28]
 802163c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8021640:	2b00      	cmp	r3, #0
 8021642:	d105      	bne.n	8021650 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8021644:	4b07      	ldr	r3, [pc, #28]	; (8021664 <FLASH_WaitForLastOperation+0x88>)
 8021646:	68db      	ldr	r3, [r3, #12]
 8021648:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 802164c:	2b00      	cmp	r3, #0
 802164e:	d003      	beq.n	8021658 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8021650:	f000 f80a 	bl	8021668 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8021654:	2301      	movs	r3, #1
 8021656:	e000      	b.n	802165a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8021658:	2300      	movs	r3, #0
}
 802165a:	4618      	mov	r0, r3
 802165c:	3710      	adds	r7, #16
 802165e:	46bd      	mov	sp, r7
 8021660:	bd80      	pop	{r7, pc}
 8021662:	bf00      	nop
 8021664:	40022000 	.word	0x40022000

08021668 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8021668:	b480      	push	{r7}
 802166a:	b083      	sub	sp, #12
 802166c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 802166e:	2300      	movs	r3, #0
 8021670:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8021672:	4b23      	ldr	r3, [pc, #140]	; (8021700 <FLASH_SetErrorCode+0x98>)
 8021674:	68db      	ldr	r3, [r3, #12]
 8021676:	f003 0310 	and.w	r3, r3, #16
 802167a:	2b00      	cmp	r3, #0
 802167c:	d009      	beq.n	8021692 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 802167e:	4b21      	ldr	r3, [pc, #132]	; (8021704 <FLASH_SetErrorCode+0x9c>)
 8021680:	69db      	ldr	r3, [r3, #28]
 8021682:	f043 0302 	orr.w	r3, r3, #2
 8021686:	4a1f      	ldr	r2, [pc, #124]	; (8021704 <FLASH_SetErrorCode+0x9c>)
 8021688:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 802168a:	687b      	ldr	r3, [r7, #4]
 802168c:	f043 0310 	orr.w	r3, r3, #16
 8021690:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8021692:	4b1b      	ldr	r3, [pc, #108]	; (8021700 <FLASH_SetErrorCode+0x98>)
 8021694:	68db      	ldr	r3, [r3, #12]
 8021696:	f003 0304 	and.w	r3, r3, #4
 802169a:	2b00      	cmp	r3, #0
 802169c:	d009      	beq.n	80216b2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 802169e:	4b19      	ldr	r3, [pc, #100]	; (8021704 <FLASH_SetErrorCode+0x9c>)
 80216a0:	69db      	ldr	r3, [r3, #28]
 80216a2:	f043 0301 	orr.w	r3, r3, #1
 80216a6:	4a17      	ldr	r2, [pc, #92]	; (8021704 <FLASH_SetErrorCode+0x9c>)
 80216a8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80216aa:	687b      	ldr	r3, [r7, #4]
 80216ac:	f043 0304 	orr.w	r3, r3, #4
 80216b0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80216b2:	4b13      	ldr	r3, [pc, #76]	; (8021700 <FLASH_SetErrorCode+0x98>)
 80216b4:	69db      	ldr	r3, [r3, #28]
 80216b6:	f003 0301 	and.w	r3, r3, #1
 80216ba:	2b00      	cmp	r3, #0
 80216bc:	d00b      	beq.n	80216d6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80216be:	4b11      	ldr	r3, [pc, #68]	; (8021704 <FLASH_SetErrorCode+0x9c>)
 80216c0:	69db      	ldr	r3, [r3, #28]
 80216c2:	f043 0304 	orr.w	r3, r3, #4
 80216c6:	4a0f      	ldr	r2, [pc, #60]	; (8021704 <FLASH_SetErrorCode+0x9c>)
 80216c8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80216ca:	4b0d      	ldr	r3, [pc, #52]	; (8021700 <FLASH_SetErrorCode+0x98>)
 80216cc:	69db      	ldr	r3, [r3, #28]
 80216ce:	4a0c      	ldr	r2, [pc, #48]	; (8021700 <FLASH_SetErrorCode+0x98>)
 80216d0:	f023 0301 	bic.w	r3, r3, #1
 80216d4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80216d6:	687b      	ldr	r3, [r7, #4]
 80216d8:	f240 1201 	movw	r2, #257	; 0x101
 80216dc:	4293      	cmp	r3, r2
 80216de:	d106      	bne.n	80216ee <FLASH_SetErrorCode+0x86>
 80216e0:	4b07      	ldr	r3, [pc, #28]	; (8021700 <FLASH_SetErrorCode+0x98>)
 80216e2:	69db      	ldr	r3, [r3, #28]
 80216e4:	4a06      	ldr	r2, [pc, #24]	; (8021700 <FLASH_SetErrorCode+0x98>)
 80216e6:	f023 0301 	bic.w	r3, r3, #1
 80216ea:	61d3      	str	r3, [r2, #28]
}  
 80216ec:	e002      	b.n	80216f4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80216ee:	4a04      	ldr	r2, [pc, #16]	; (8021700 <FLASH_SetErrorCode+0x98>)
 80216f0:	687b      	ldr	r3, [r7, #4]
 80216f2:	60d3      	str	r3, [r2, #12]
}  
 80216f4:	bf00      	nop
 80216f6:	370c      	adds	r7, #12
 80216f8:	46bd      	mov	sp, r7
 80216fa:	bc80      	pop	{r7}
 80216fc:	4770      	bx	lr
 80216fe:	bf00      	nop
 8021700:	40022000 	.word	0x40022000
 8021704:	200042f8 	.word	0x200042f8

08021708 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8021708:	b580      	push	{r7, lr}
 802170a:	b084      	sub	sp, #16
 802170c:	af00      	add	r7, sp, #0
 802170e:	6078      	str	r0, [r7, #4]
 8021710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8021712:	2301      	movs	r3, #1
 8021714:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8021716:	2300      	movs	r3, #0
 8021718:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 802171a:	4b2f      	ldr	r3, [pc, #188]	; (80217d8 <HAL_FLASHEx_Erase+0xd0>)
 802171c:	7e1b      	ldrb	r3, [r3, #24]
 802171e:	2b01      	cmp	r3, #1
 8021720:	d101      	bne.n	8021726 <HAL_FLASHEx_Erase+0x1e>
 8021722:	2302      	movs	r3, #2
 8021724:	e053      	b.n	80217ce <HAL_FLASHEx_Erase+0xc6>
 8021726:	4b2c      	ldr	r3, [pc, #176]	; (80217d8 <HAL_FLASHEx_Erase+0xd0>)
 8021728:	2201      	movs	r2, #1
 802172a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 802172c:	687b      	ldr	r3, [r7, #4]
 802172e:	681b      	ldr	r3, [r3, #0]
 8021730:	2b02      	cmp	r3, #2
 8021732:	d116      	bne.n	8021762 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8021734:	f24c 3050 	movw	r0, #50000	; 0xc350
 8021738:	f7ff ff50 	bl	80215dc <FLASH_WaitForLastOperation>
 802173c:	4603      	mov	r3, r0
 802173e:	2b00      	cmp	r3, #0
 8021740:	d141      	bne.n	80217c6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8021742:	2001      	movs	r0, #1
 8021744:	f000 f84c 	bl	80217e0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8021748:	f24c 3050 	movw	r0, #50000	; 0xc350
 802174c:	f7ff ff46 	bl	80215dc <FLASH_WaitForLastOperation>
 8021750:	4603      	mov	r3, r0
 8021752:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8021754:	4b21      	ldr	r3, [pc, #132]	; (80217dc <HAL_FLASHEx_Erase+0xd4>)
 8021756:	691b      	ldr	r3, [r3, #16]
 8021758:	4a20      	ldr	r2, [pc, #128]	; (80217dc <HAL_FLASHEx_Erase+0xd4>)
 802175a:	f023 0304 	bic.w	r3, r3, #4
 802175e:	6113      	str	r3, [r2, #16]
 8021760:	e031      	b.n	80217c6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8021762:	f24c 3050 	movw	r0, #50000	; 0xc350
 8021766:	f7ff ff39 	bl	80215dc <FLASH_WaitForLastOperation>
 802176a:	4603      	mov	r3, r0
 802176c:	2b00      	cmp	r3, #0
 802176e:	d12a      	bne.n	80217c6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8021770:	683b      	ldr	r3, [r7, #0]
 8021772:	f04f 32ff 	mov.w	r2, #4294967295
 8021776:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8021778:	687b      	ldr	r3, [r7, #4]
 802177a:	689b      	ldr	r3, [r3, #8]
 802177c:	60bb      	str	r3, [r7, #8]
 802177e:	e019      	b.n	80217b4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8021780:	68b8      	ldr	r0, [r7, #8]
 8021782:	f000 f849 	bl	8021818 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8021786:	f24c 3050 	movw	r0, #50000	; 0xc350
 802178a:	f7ff ff27 	bl	80215dc <FLASH_WaitForLastOperation>
 802178e:	4603      	mov	r3, r0
 8021790:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8021792:	4b12      	ldr	r3, [pc, #72]	; (80217dc <HAL_FLASHEx_Erase+0xd4>)
 8021794:	691b      	ldr	r3, [r3, #16]
 8021796:	4a11      	ldr	r2, [pc, #68]	; (80217dc <HAL_FLASHEx_Erase+0xd4>)
 8021798:	f023 0302 	bic.w	r3, r3, #2
 802179c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 802179e:	7bfb      	ldrb	r3, [r7, #15]
 80217a0:	2b00      	cmp	r3, #0
 80217a2:	d003      	beq.n	80217ac <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80217a4:	683b      	ldr	r3, [r7, #0]
 80217a6:	68ba      	ldr	r2, [r7, #8]
 80217a8:	601a      	str	r2, [r3, #0]
            break;
 80217aa:	e00c      	b.n	80217c6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80217ac:	68bb      	ldr	r3, [r7, #8]
 80217ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80217b2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80217b4:	687b      	ldr	r3, [r7, #4]
 80217b6:	68db      	ldr	r3, [r3, #12]
 80217b8:	02da      	lsls	r2, r3, #11
 80217ba:	687b      	ldr	r3, [r7, #4]
 80217bc:	689b      	ldr	r3, [r3, #8]
 80217be:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80217c0:	68ba      	ldr	r2, [r7, #8]
 80217c2:	429a      	cmp	r2, r3
 80217c4:	d3dc      	bcc.n	8021780 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80217c6:	4b04      	ldr	r3, [pc, #16]	; (80217d8 <HAL_FLASHEx_Erase+0xd0>)
 80217c8:	2200      	movs	r2, #0
 80217ca:	761a      	strb	r2, [r3, #24]

  return status;
 80217cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80217ce:	4618      	mov	r0, r3
 80217d0:	3710      	adds	r7, #16
 80217d2:	46bd      	mov	sp, r7
 80217d4:	bd80      	pop	{r7, pc}
 80217d6:	bf00      	nop
 80217d8:	200042f8 	.word	0x200042f8
 80217dc:	40022000 	.word	0x40022000

080217e0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80217e0:	b480      	push	{r7}
 80217e2:	b083      	sub	sp, #12
 80217e4:	af00      	add	r7, sp, #0
 80217e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80217e8:	4b09      	ldr	r3, [pc, #36]	; (8021810 <FLASH_MassErase+0x30>)
 80217ea:	2200      	movs	r2, #0
 80217ec:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80217ee:	4b09      	ldr	r3, [pc, #36]	; (8021814 <FLASH_MassErase+0x34>)
 80217f0:	691b      	ldr	r3, [r3, #16]
 80217f2:	4a08      	ldr	r2, [pc, #32]	; (8021814 <FLASH_MassErase+0x34>)
 80217f4:	f043 0304 	orr.w	r3, r3, #4
 80217f8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80217fa:	4b06      	ldr	r3, [pc, #24]	; (8021814 <FLASH_MassErase+0x34>)
 80217fc:	691b      	ldr	r3, [r3, #16]
 80217fe:	4a05      	ldr	r2, [pc, #20]	; (8021814 <FLASH_MassErase+0x34>)
 8021800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021804:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8021806:	bf00      	nop
 8021808:	370c      	adds	r7, #12
 802180a:	46bd      	mov	sp, r7
 802180c:	bc80      	pop	{r7}
 802180e:	4770      	bx	lr
 8021810:	200042f8 	.word	0x200042f8
 8021814:	40022000 	.word	0x40022000

08021818 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8021818:	b480      	push	{r7}
 802181a:	b083      	sub	sp, #12
 802181c:	af00      	add	r7, sp, #0
 802181e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8021820:	4b0b      	ldr	r3, [pc, #44]	; (8021850 <FLASH_PageErase+0x38>)
 8021822:	2200      	movs	r2, #0
 8021824:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8021826:	4b0b      	ldr	r3, [pc, #44]	; (8021854 <FLASH_PageErase+0x3c>)
 8021828:	691b      	ldr	r3, [r3, #16]
 802182a:	4a0a      	ldr	r2, [pc, #40]	; (8021854 <FLASH_PageErase+0x3c>)
 802182c:	f043 0302 	orr.w	r3, r3, #2
 8021830:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8021832:	4a08      	ldr	r2, [pc, #32]	; (8021854 <FLASH_PageErase+0x3c>)
 8021834:	687b      	ldr	r3, [r7, #4]
 8021836:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8021838:	4b06      	ldr	r3, [pc, #24]	; (8021854 <FLASH_PageErase+0x3c>)
 802183a:	691b      	ldr	r3, [r3, #16]
 802183c:	4a05      	ldr	r2, [pc, #20]	; (8021854 <FLASH_PageErase+0x3c>)
 802183e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021842:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8021844:	bf00      	nop
 8021846:	370c      	adds	r7, #12
 8021848:	46bd      	mov	sp, r7
 802184a:	bc80      	pop	{r7}
 802184c:	4770      	bx	lr
 802184e:	bf00      	nop
 8021850:	200042f8 	.word	0x200042f8
 8021854:	40022000 	.word	0x40022000

08021858 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8021858:	b480      	push	{r7}
 802185a:	b08b      	sub	sp, #44	; 0x2c
 802185c:	af00      	add	r7, sp, #0
 802185e:	6078      	str	r0, [r7, #4]
 8021860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8021862:	2300      	movs	r3, #0
 8021864:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8021866:	2300      	movs	r3, #0
 8021868:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 802186a:	e179      	b.n	8021b60 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 802186c:	2201      	movs	r2, #1
 802186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021870:	fa02 f303 	lsl.w	r3, r2, r3
 8021874:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8021876:	683b      	ldr	r3, [r7, #0]
 8021878:	681b      	ldr	r3, [r3, #0]
 802187a:	69fa      	ldr	r2, [r7, #28]
 802187c:	4013      	ands	r3, r2
 802187e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8021880:	69ba      	ldr	r2, [r7, #24]
 8021882:	69fb      	ldr	r3, [r7, #28]
 8021884:	429a      	cmp	r2, r3
 8021886:	f040 8168 	bne.w	8021b5a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 802188a:	683b      	ldr	r3, [r7, #0]
 802188c:	685b      	ldr	r3, [r3, #4]
 802188e:	4aa0      	ldr	r2, [pc, #640]	; (8021b10 <HAL_GPIO_Init+0x2b8>)
 8021890:	4293      	cmp	r3, r2
 8021892:	d05e      	beq.n	8021952 <HAL_GPIO_Init+0xfa>
 8021894:	4a9e      	ldr	r2, [pc, #632]	; (8021b10 <HAL_GPIO_Init+0x2b8>)
 8021896:	4293      	cmp	r3, r2
 8021898:	d875      	bhi.n	8021986 <HAL_GPIO_Init+0x12e>
 802189a:	4a9e      	ldr	r2, [pc, #632]	; (8021b14 <HAL_GPIO_Init+0x2bc>)
 802189c:	4293      	cmp	r3, r2
 802189e:	d058      	beq.n	8021952 <HAL_GPIO_Init+0xfa>
 80218a0:	4a9c      	ldr	r2, [pc, #624]	; (8021b14 <HAL_GPIO_Init+0x2bc>)
 80218a2:	4293      	cmp	r3, r2
 80218a4:	d86f      	bhi.n	8021986 <HAL_GPIO_Init+0x12e>
 80218a6:	4a9c      	ldr	r2, [pc, #624]	; (8021b18 <HAL_GPIO_Init+0x2c0>)
 80218a8:	4293      	cmp	r3, r2
 80218aa:	d052      	beq.n	8021952 <HAL_GPIO_Init+0xfa>
 80218ac:	4a9a      	ldr	r2, [pc, #616]	; (8021b18 <HAL_GPIO_Init+0x2c0>)
 80218ae:	4293      	cmp	r3, r2
 80218b0:	d869      	bhi.n	8021986 <HAL_GPIO_Init+0x12e>
 80218b2:	4a9a      	ldr	r2, [pc, #616]	; (8021b1c <HAL_GPIO_Init+0x2c4>)
 80218b4:	4293      	cmp	r3, r2
 80218b6:	d04c      	beq.n	8021952 <HAL_GPIO_Init+0xfa>
 80218b8:	4a98      	ldr	r2, [pc, #608]	; (8021b1c <HAL_GPIO_Init+0x2c4>)
 80218ba:	4293      	cmp	r3, r2
 80218bc:	d863      	bhi.n	8021986 <HAL_GPIO_Init+0x12e>
 80218be:	4a98      	ldr	r2, [pc, #608]	; (8021b20 <HAL_GPIO_Init+0x2c8>)
 80218c0:	4293      	cmp	r3, r2
 80218c2:	d046      	beq.n	8021952 <HAL_GPIO_Init+0xfa>
 80218c4:	4a96      	ldr	r2, [pc, #600]	; (8021b20 <HAL_GPIO_Init+0x2c8>)
 80218c6:	4293      	cmp	r3, r2
 80218c8:	d85d      	bhi.n	8021986 <HAL_GPIO_Init+0x12e>
 80218ca:	2b12      	cmp	r3, #18
 80218cc:	d82a      	bhi.n	8021924 <HAL_GPIO_Init+0xcc>
 80218ce:	2b12      	cmp	r3, #18
 80218d0:	d859      	bhi.n	8021986 <HAL_GPIO_Init+0x12e>
 80218d2:	a201      	add	r2, pc, #4	; (adr r2, 80218d8 <HAL_GPIO_Init+0x80>)
 80218d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80218d8:	08021953 	.word	0x08021953
 80218dc:	0802192d 	.word	0x0802192d
 80218e0:	0802193f 	.word	0x0802193f
 80218e4:	08021981 	.word	0x08021981
 80218e8:	08021987 	.word	0x08021987
 80218ec:	08021987 	.word	0x08021987
 80218f0:	08021987 	.word	0x08021987
 80218f4:	08021987 	.word	0x08021987
 80218f8:	08021987 	.word	0x08021987
 80218fc:	08021987 	.word	0x08021987
 8021900:	08021987 	.word	0x08021987
 8021904:	08021987 	.word	0x08021987
 8021908:	08021987 	.word	0x08021987
 802190c:	08021987 	.word	0x08021987
 8021910:	08021987 	.word	0x08021987
 8021914:	08021987 	.word	0x08021987
 8021918:	08021987 	.word	0x08021987
 802191c:	08021935 	.word	0x08021935
 8021920:	08021949 	.word	0x08021949
 8021924:	4a7f      	ldr	r2, [pc, #508]	; (8021b24 <HAL_GPIO_Init+0x2cc>)
 8021926:	4293      	cmp	r3, r2
 8021928:	d013      	beq.n	8021952 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 802192a:	e02c      	b.n	8021986 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 802192c:	683b      	ldr	r3, [r7, #0]
 802192e:	68db      	ldr	r3, [r3, #12]
 8021930:	623b      	str	r3, [r7, #32]
          break;
 8021932:	e029      	b.n	8021988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8021934:	683b      	ldr	r3, [r7, #0]
 8021936:	68db      	ldr	r3, [r3, #12]
 8021938:	3304      	adds	r3, #4
 802193a:	623b      	str	r3, [r7, #32]
          break;
 802193c:	e024      	b.n	8021988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 802193e:	683b      	ldr	r3, [r7, #0]
 8021940:	68db      	ldr	r3, [r3, #12]
 8021942:	3308      	adds	r3, #8
 8021944:	623b      	str	r3, [r7, #32]
          break;
 8021946:	e01f      	b.n	8021988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8021948:	683b      	ldr	r3, [r7, #0]
 802194a:	68db      	ldr	r3, [r3, #12]
 802194c:	330c      	adds	r3, #12
 802194e:	623b      	str	r3, [r7, #32]
          break;
 8021950:	e01a      	b.n	8021988 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8021952:	683b      	ldr	r3, [r7, #0]
 8021954:	689b      	ldr	r3, [r3, #8]
 8021956:	2b00      	cmp	r3, #0
 8021958:	d102      	bne.n	8021960 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 802195a:	2304      	movs	r3, #4
 802195c:	623b      	str	r3, [r7, #32]
          break;
 802195e:	e013      	b.n	8021988 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8021960:	683b      	ldr	r3, [r7, #0]
 8021962:	689b      	ldr	r3, [r3, #8]
 8021964:	2b01      	cmp	r3, #1
 8021966:	d105      	bne.n	8021974 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8021968:	2308      	movs	r3, #8
 802196a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 802196c:	687b      	ldr	r3, [r7, #4]
 802196e:	69fa      	ldr	r2, [r7, #28]
 8021970:	611a      	str	r2, [r3, #16]
          break;
 8021972:	e009      	b.n	8021988 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8021974:	2308      	movs	r3, #8
 8021976:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8021978:	687b      	ldr	r3, [r7, #4]
 802197a:	69fa      	ldr	r2, [r7, #28]
 802197c:	615a      	str	r2, [r3, #20]
          break;
 802197e:	e003      	b.n	8021988 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8021980:	2300      	movs	r3, #0
 8021982:	623b      	str	r3, [r7, #32]
          break;
 8021984:	e000      	b.n	8021988 <HAL_GPIO_Init+0x130>
          break;
 8021986:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8021988:	69bb      	ldr	r3, [r7, #24]
 802198a:	2bff      	cmp	r3, #255	; 0xff
 802198c:	d801      	bhi.n	8021992 <HAL_GPIO_Init+0x13a>
 802198e:	687b      	ldr	r3, [r7, #4]
 8021990:	e001      	b.n	8021996 <HAL_GPIO_Init+0x13e>
 8021992:	687b      	ldr	r3, [r7, #4]
 8021994:	3304      	adds	r3, #4
 8021996:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8021998:	69bb      	ldr	r3, [r7, #24]
 802199a:	2bff      	cmp	r3, #255	; 0xff
 802199c:	d802      	bhi.n	80219a4 <HAL_GPIO_Init+0x14c>
 802199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219a0:	009b      	lsls	r3, r3, #2
 80219a2:	e002      	b.n	80219aa <HAL_GPIO_Init+0x152>
 80219a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219a6:	3b08      	subs	r3, #8
 80219a8:	009b      	lsls	r3, r3, #2
 80219aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80219ac:	697b      	ldr	r3, [r7, #20]
 80219ae:	681a      	ldr	r2, [r3, #0]
 80219b0:	210f      	movs	r1, #15
 80219b2:	693b      	ldr	r3, [r7, #16]
 80219b4:	fa01 f303 	lsl.w	r3, r1, r3
 80219b8:	43db      	mvns	r3, r3
 80219ba:	401a      	ands	r2, r3
 80219bc:	6a39      	ldr	r1, [r7, #32]
 80219be:	693b      	ldr	r3, [r7, #16]
 80219c0:	fa01 f303 	lsl.w	r3, r1, r3
 80219c4:	431a      	orrs	r2, r3
 80219c6:	697b      	ldr	r3, [r7, #20]
 80219c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80219ca:	683b      	ldr	r3, [r7, #0]
 80219cc:	685b      	ldr	r3, [r3, #4]
 80219ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80219d2:	2b00      	cmp	r3, #0
 80219d4:	f000 80c1 	beq.w	8021b5a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80219d8:	4b53      	ldr	r3, [pc, #332]	; (8021b28 <HAL_GPIO_Init+0x2d0>)
 80219da:	699b      	ldr	r3, [r3, #24]
 80219dc:	4a52      	ldr	r2, [pc, #328]	; (8021b28 <HAL_GPIO_Init+0x2d0>)
 80219de:	f043 0301 	orr.w	r3, r3, #1
 80219e2:	6193      	str	r3, [r2, #24]
 80219e4:	4b50      	ldr	r3, [pc, #320]	; (8021b28 <HAL_GPIO_Init+0x2d0>)
 80219e6:	699b      	ldr	r3, [r3, #24]
 80219e8:	f003 0301 	and.w	r3, r3, #1
 80219ec:	60bb      	str	r3, [r7, #8]
 80219ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80219f0:	4a4e      	ldr	r2, [pc, #312]	; (8021b2c <HAL_GPIO_Init+0x2d4>)
 80219f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219f4:	089b      	lsrs	r3, r3, #2
 80219f6:	3302      	adds	r3, #2
 80219f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80219fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80219fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a00:	f003 0303 	and.w	r3, r3, #3
 8021a04:	009b      	lsls	r3, r3, #2
 8021a06:	220f      	movs	r2, #15
 8021a08:	fa02 f303 	lsl.w	r3, r2, r3
 8021a0c:	43db      	mvns	r3, r3
 8021a0e:	68fa      	ldr	r2, [r7, #12]
 8021a10:	4013      	ands	r3, r2
 8021a12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8021a14:	687b      	ldr	r3, [r7, #4]
 8021a16:	4a46      	ldr	r2, [pc, #280]	; (8021b30 <HAL_GPIO_Init+0x2d8>)
 8021a18:	4293      	cmp	r3, r2
 8021a1a:	d01f      	beq.n	8021a5c <HAL_GPIO_Init+0x204>
 8021a1c:	687b      	ldr	r3, [r7, #4]
 8021a1e:	4a45      	ldr	r2, [pc, #276]	; (8021b34 <HAL_GPIO_Init+0x2dc>)
 8021a20:	4293      	cmp	r3, r2
 8021a22:	d019      	beq.n	8021a58 <HAL_GPIO_Init+0x200>
 8021a24:	687b      	ldr	r3, [r7, #4]
 8021a26:	4a44      	ldr	r2, [pc, #272]	; (8021b38 <HAL_GPIO_Init+0x2e0>)
 8021a28:	4293      	cmp	r3, r2
 8021a2a:	d013      	beq.n	8021a54 <HAL_GPIO_Init+0x1fc>
 8021a2c:	687b      	ldr	r3, [r7, #4]
 8021a2e:	4a43      	ldr	r2, [pc, #268]	; (8021b3c <HAL_GPIO_Init+0x2e4>)
 8021a30:	4293      	cmp	r3, r2
 8021a32:	d00d      	beq.n	8021a50 <HAL_GPIO_Init+0x1f8>
 8021a34:	687b      	ldr	r3, [r7, #4]
 8021a36:	4a42      	ldr	r2, [pc, #264]	; (8021b40 <HAL_GPIO_Init+0x2e8>)
 8021a38:	4293      	cmp	r3, r2
 8021a3a:	d007      	beq.n	8021a4c <HAL_GPIO_Init+0x1f4>
 8021a3c:	687b      	ldr	r3, [r7, #4]
 8021a3e:	4a41      	ldr	r2, [pc, #260]	; (8021b44 <HAL_GPIO_Init+0x2ec>)
 8021a40:	4293      	cmp	r3, r2
 8021a42:	d101      	bne.n	8021a48 <HAL_GPIO_Init+0x1f0>
 8021a44:	2305      	movs	r3, #5
 8021a46:	e00a      	b.n	8021a5e <HAL_GPIO_Init+0x206>
 8021a48:	2306      	movs	r3, #6
 8021a4a:	e008      	b.n	8021a5e <HAL_GPIO_Init+0x206>
 8021a4c:	2304      	movs	r3, #4
 8021a4e:	e006      	b.n	8021a5e <HAL_GPIO_Init+0x206>
 8021a50:	2303      	movs	r3, #3
 8021a52:	e004      	b.n	8021a5e <HAL_GPIO_Init+0x206>
 8021a54:	2302      	movs	r3, #2
 8021a56:	e002      	b.n	8021a5e <HAL_GPIO_Init+0x206>
 8021a58:	2301      	movs	r3, #1
 8021a5a:	e000      	b.n	8021a5e <HAL_GPIO_Init+0x206>
 8021a5c:	2300      	movs	r3, #0
 8021a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021a60:	f002 0203 	and.w	r2, r2, #3
 8021a64:	0092      	lsls	r2, r2, #2
 8021a66:	4093      	lsls	r3, r2
 8021a68:	68fa      	ldr	r2, [r7, #12]
 8021a6a:	4313      	orrs	r3, r2
 8021a6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8021a6e:	492f      	ldr	r1, [pc, #188]	; (8021b2c <HAL_GPIO_Init+0x2d4>)
 8021a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a72:	089b      	lsrs	r3, r3, #2
 8021a74:	3302      	adds	r3, #2
 8021a76:	68fa      	ldr	r2, [r7, #12]
 8021a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8021a7c:	683b      	ldr	r3, [r7, #0]
 8021a7e:	685b      	ldr	r3, [r3, #4]
 8021a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8021a84:	2b00      	cmp	r3, #0
 8021a86:	d006      	beq.n	8021a96 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8021a88:	4b2f      	ldr	r3, [pc, #188]	; (8021b48 <HAL_GPIO_Init+0x2f0>)
 8021a8a:	681a      	ldr	r2, [r3, #0]
 8021a8c:	492e      	ldr	r1, [pc, #184]	; (8021b48 <HAL_GPIO_Init+0x2f0>)
 8021a8e:	69bb      	ldr	r3, [r7, #24]
 8021a90:	4313      	orrs	r3, r2
 8021a92:	600b      	str	r3, [r1, #0]
 8021a94:	e006      	b.n	8021aa4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8021a96:	4b2c      	ldr	r3, [pc, #176]	; (8021b48 <HAL_GPIO_Init+0x2f0>)
 8021a98:	681a      	ldr	r2, [r3, #0]
 8021a9a:	69bb      	ldr	r3, [r7, #24]
 8021a9c:	43db      	mvns	r3, r3
 8021a9e:	492a      	ldr	r1, [pc, #168]	; (8021b48 <HAL_GPIO_Init+0x2f0>)
 8021aa0:	4013      	ands	r3, r2
 8021aa2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8021aa4:	683b      	ldr	r3, [r7, #0]
 8021aa6:	685b      	ldr	r3, [r3, #4]
 8021aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021aac:	2b00      	cmp	r3, #0
 8021aae:	d006      	beq.n	8021abe <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8021ab0:	4b25      	ldr	r3, [pc, #148]	; (8021b48 <HAL_GPIO_Init+0x2f0>)
 8021ab2:	685a      	ldr	r2, [r3, #4]
 8021ab4:	4924      	ldr	r1, [pc, #144]	; (8021b48 <HAL_GPIO_Init+0x2f0>)
 8021ab6:	69bb      	ldr	r3, [r7, #24]
 8021ab8:	4313      	orrs	r3, r2
 8021aba:	604b      	str	r3, [r1, #4]
 8021abc:	e006      	b.n	8021acc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8021abe:	4b22      	ldr	r3, [pc, #136]	; (8021b48 <HAL_GPIO_Init+0x2f0>)
 8021ac0:	685a      	ldr	r2, [r3, #4]
 8021ac2:	69bb      	ldr	r3, [r7, #24]
 8021ac4:	43db      	mvns	r3, r3
 8021ac6:	4920      	ldr	r1, [pc, #128]	; (8021b48 <HAL_GPIO_Init+0x2f0>)
 8021ac8:	4013      	ands	r3, r2
 8021aca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8021acc:	683b      	ldr	r3, [r7, #0]
 8021ace:	685b      	ldr	r3, [r3, #4]
 8021ad0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8021ad4:	2b00      	cmp	r3, #0
 8021ad6:	d006      	beq.n	8021ae6 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8021ad8:	4b1b      	ldr	r3, [pc, #108]	; (8021b48 <HAL_GPIO_Init+0x2f0>)
 8021ada:	689a      	ldr	r2, [r3, #8]
 8021adc:	491a      	ldr	r1, [pc, #104]	; (8021b48 <HAL_GPIO_Init+0x2f0>)
 8021ade:	69bb      	ldr	r3, [r7, #24]
 8021ae0:	4313      	orrs	r3, r2
 8021ae2:	608b      	str	r3, [r1, #8]
 8021ae4:	e006      	b.n	8021af4 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8021ae6:	4b18      	ldr	r3, [pc, #96]	; (8021b48 <HAL_GPIO_Init+0x2f0>)
 8021ae8:	689a      	ldr	r2, [r3, #8]
 8021aea:	69bb      	ldr	r3, [r7, #24]
 8021aec:	43db      	mvns	r3, r3
 8021aee:	4916      	ldr	r1, [pc, #88]	; (8021b48 <HAL_GPIO_Init+0x2f0>)
 8021af0:	4013      	ands	r3, r2
 8021af2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8021af4:	683b      	ldr	r3, [r7, #0]
 8021af6:	685b      	ldr	r3, [r3, #4]
 8021af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8021afc:	2b00      	cmp	r3, #0
 8021afe:	d025      	beq.n	8021b4c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8021b00:	4b11      	ldr	r3, [pc, #68]	; (8021b48 <HAL_GPIO_Init+0x2f0>)
 8021b02:	68da      	ldr	r2, [r3, #12]
 8021b04:	4910      	ldr	r1, [pc, #64]	; (8021b48 <HAL_GPIO_Init+0x2f0>)
 8021b06:	69bb      	ldr	r3, [r7, #24]
 8021b08:	4313      	orrs	r3, r2
 8021b0a:	60cb      	str	r3, [r1, #12]
 8021b0c:	e025      	b.n	8021b5a <HAL_GPIO_Init+0x302>
 8021b0e:	bf00      	nop
 8021b10:	10320000 	.word	0x10320000
 8021b14:	10310000 	.word	0x10310000
 8021b18:	10220000 	.word	0x10220000
 8021b1c:	10210000 	.word	0x10210000
 8021b20:	10120000 	.word	0x10120000
 8021b24:	10110000 	.word	0x10110000
 8021b28:	40021000 	.word	0x40021000
 8021b2c:	40010000 	.word	0x40010000
 8021b30:	40010800 	.word	0x40010800
 8021b34:	40010c00 	.word	0x40010c00
 8021b38:	40011000 	.word	0x40011000
 8021b3c:	40011400 	.word	0x40011400
 8021b40:	40011800 	.word	0x40011800
 8021b44:	40011c00 	.word	0x40011c00
 8021b48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8021b4c:	4b0b      	ldr	r3, [pc, #44]	; (8021b7c <HAL_GPIO_Init+0x324>)
 8021b4e:	68da      	ldr	r2, [r3, #12]
 8021b50:	69bb      	ldr	r3, [r7, #24]
 8021b52:	43db      	mvns	r3, r3
 8021b54:	4909      	ldr	r1, [pc, #36]	; (8021b7c <HAL_GPIO_Init+0x324>)
 8021b56:	4013      	ands	r3, r2
 8021b58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8021b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021b5c:	3301      	adds	r3, #1
 8021b5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8021b60:	683b      	ldr	r3, [r7, #0]
 8021b62:	681a      	ldr	r2, [r3, #0]
 8021b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021b66:	fa22 f303 	lsr.w	r3, r2, r3
 8021b6a:	2b00      	cmp	r3, #0
 8021b6c:	f47f ae7e 	bne.w	802186c <HAL_GPIO_Init+0x14>
  }
}
 8021b70:	bf00      	nop
 8021b72:	bf00      	nop
 8021b74:	372c      	adds	r7, #44	; 0x2c
 8021b76:	46bd      	mov	sp, r7
 8021b78:	bc80      	pop	{r7}
 8021b7a:	4770      	bx	lr
 8021b7c:	40010400 	.word	0x40010400

08021b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8021b80:	b480      	push	{r7}
 8021b82:	b083      	sub	sp, #12
 8021b84:	af00      	add	r7, sp, #0
 8021b86:	6078      	str	r0, [r7, #4]
 8021b88:	460b      	mov	r3, r1
 8021b8a:	807b      	strh	r3, [r7, #2]
 8021b8c:	4613      	mov	r3, r2
 8021b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8021b90:	787b      	ldrb	r3, [r7, #1]
 8021b92:	2b00      	cmp	r3, #0
 8021b94:	d003      	beq.n	8021b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8021b96:	887a      	ldrh	r2, [r7, #2]
 8021b98:	687b      	ldr	r3, [r7, #4]
 8021b9a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8021b9c:	e003      	b.n	8021ba6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8021b9e:	887b      	ldrh	r3, [r7, #2]
 8021ba0:	041a      	lsls	r2, r3, #16
 8021ba2:	687b      	ldr	r3, [r7, #4]
 8021ba4:	611a      	str	r2, [r3, #16]
}
 8021ba6:	bf00      	nop
 8021ba8:	370c      	adds	r7, #12
 8021baa:	46bd      	mov	sp, r7
 8021bac:	bc80      	pop	{r7}
 8021bae:	4770      	bx	lr

08021bb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8021bb0:	b580      	push	{r7, lr}
 8021bb2:	b084      	sub	sp, #16
 8021bb4:	af00      	add	r7, sp, #0
 8021bb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8021bb8:	687b      	ldr	r3, [r7, #4]
 8021bba:	2b00      	cmp	r3, #0
 8021bbc:	d101      	bne.n	8021bc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8021bbe:	2301      	movs	r3, #1
 8021bc0:	e12b      	b.n	8021e1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8021bc2:	687b      	ldr	r3, [r7, #4]
 8021bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8021bc8:	b2db      	uxtb	r3, r3
 8021bca:	2b00      	cmp	r3, #0
 8021bcc:	d106      	bne.n	8021bdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8021bce:	687b      	ldr	r3, [r7, #4]
 8021bd0:	2200      	movs	r2, #0
 8021bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8021bd6:	6878      	ldr	r0, [r7, #4]
 8021bd8:	f7ff f81a 	bl	8020c10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8021bdc:	687b      	ldr	r3, [r7, #4]
 8021bde:	2224      	movs	r2, #36	; 0x24
 8021be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8021be4:	687b      	ldr	r3, [r7, #4]
 8021be6:	681b      	ldr	r3, [r3, #0]
 8021be8:	681a      	ldr	r2, [r3, #0]
 8021bea:	687b      	ldr	r3, [r7, #4]
 8021bec:	681b      	ldr	r3, [r3, #0]
 8021bee:	f022 0201 	bic.w	r2, r2, #1
 8021bf2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8021bf4:	687b      	ldr	r3, [r7, #4]
 8021bf6:	681b      	ldr	r3, [r3, #0]
 8021bf8:	681a      	ldr	r2, [r3, #0]
 8021bfa:	687b      	ldr	r3, [r7, #4]
 8021bfc:	681b      	ldr	r3, [r3, #0]
 8021bfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8021c02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8021c04:	687b      	ldr	r3, [r7, #4]
 8021c06:	681b      	ldr	r3, [r3, #0]
 8021c08:	681a      	ldr	r2, [r3, #0]
 8021c0a:	687b      	ldr	r3, [r7, #4]
 8021c0c:	681b      	ldr	r3, [r3, #0]
 8021c0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8021c12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8021c14:	f000 ffea 	bl	8022bec <HAL_RCC_GetPCLK1Freq>
 8021c18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8021c1a:	687b      	ldr	r3, [r7, #4]
 8021c1c:	685b      	ldr	r3, [r3, #4]
 8021c1e:	4a81      	ldr	r2, [pc, #516]	; (8021e24 <HAL_I2C_Init+0x274>)
 8021c20:	4293      	cmp	r3, r2
 8021c22:	d807      	bhi.n	8021c34 <HAL_I2C_Init+0x84>
 8021c24:	68fb      	ldr	r3, [r7, #12]
 8021c26:	4a80      	ldr	r2, [pc, #512]	; (8021e28 <HAL_I2C_Init+0x278>)
 8021c28:	4293      	cmp	r3, r2
 8021c2a:	bf94      	ite	ls
 8021c2c:	2301      	movls	r3, #1
 8021c2e:	2300      	movhi	r3, #0
 8021c30:	b2db      	uxtb	r3, r3
 8021c32:	e006      	b.n	8021c42 <HAL_I2C_Init+0x92>
 8021c34:	68fb      	ldr	r3, [r7, #12]
 8021c36:	4a7d      	ldr	r2, [pc, #500]	; (8021e2c <HAL_I2C_Init+0x27c>)
 8021c38:	4293      	cmp	r3, r2
 8021c3a:	bf94      	ite	ls
 8021c3c:	2301      	movls	r3, #1
 8021c3e:	2300      	movhi	r3, #0
 8021c40:	b2db      	uxtb	r3, r3
 8021c42:	2b00      	cmp	r3, #0
 8021c44:	d001      	beq.n	8021c4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8021c46:	2301      	movs	r3, #1
 8021c48:	e0e7      	b.n	8021e1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8021c4a:	68fb      	ldr	r3, [r7, #12]
 8021c4c:	4a78      	ldr	r2, [pc, #480]	; (8021e30 <HAL_I2C_Init+0x280>)
 8021c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8021c52:	0c9b      	lsrs	r3, r3, #18
 8021c54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8021c56:	687b      	ldr	r3, [r7, #4]
 8021c58:	681b      	ldr	r3, [r3, #0]
 8021c5a:	685b      	ldr	r3, [r3, #4]
 8021c5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8021c60:	687b      	ldr	r3, [r7, #4]
 8021c62:	681b      	ldr	r3, [r3, #0]
 8021c64:	68ba      	ldr	r2, [r7, #8]
 8021c66:	430a      	orrs	r2, r1
 8021c68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8021c6a:	687b      	ldr	r3, [r7, #4]
 8021c6c:	681b      	ldr	r3, [r3, #0]
 8021c6e:	6a1b      	ldr	r3, [r3, #32]
 8021c70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8021c74:	687b      	ldr	r3, [r7, #4]
 8021c76:	685b      	ldr	r3, [r3, #4]
 8021c78:	4a6a      	ldr	r2, [pc, #424]	; (8021e24 <HAL_I2C_Init+0x274>)
 8021c7a:	4293      	cmp	r3, r2
 8021c7c:	d802      	bhi.n	8021c84 <HAL_I2C_Init+0xd4>
 8021c7e:	68bb      	ldr	r3, [r7, #8]
 8021c80:	3301      	adds	r3, #1
 8021c82:	e009      	b.n	8021c98 <HAL_I2C_Init+0xe8>
 8021c84:	68bb      	ldr	r3, [r7, #8]
 8021c86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8021c8a:	fb02 f303 	mul.w	r3, r2, r3
 8021c8e:	4a69      	ldr	r2, [pc, #420]	; (8021e34 <HAL_I2C_Init+0x284>)
 8021c90:	fba2 2303 	umull	r2, r3, r2, r3
 8021c94:	099b      	lsrs	r3, r3, #6
 8021c96:	3301      	adds	r3, #1
 8021c98:	687a      	ldr	r2, [r7, #4]
 8021c9a:	6812      	ldr	r2, [r2, #0]
 8021c9c:	430b      	orrs	r3, r1
 8021c9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8021ca0:	687b      	ldr	r3, [r7, #4]
 8021ca2:	681b      	ldr	r3, [r3, #0]
 8021ca4:	69db      	ldr	r3, [r3, #28]
 8021ca6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8021caa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8021cae:	687b      	ldr	r3, [r7, #4]
 8021cb0:	685b      	ldr	r3, [r3, #4]
 8021cb2:	495c      	ldr	r1, [pc, #368]	; (8021e24 <HAL_I2C_Init+0x274>)
 8021cb4:	428b      	cmp	r3, r1
 8021cb6:	d819      	bhi.n	8021cec <HAL_I2C_Init+0x13c>
 8021cb8:	68fb      	ldr	r3, [r7, #12]
 8021cba:	1e59      	subs	r1, r3, #1
 8021cbc:	687b      	ldr	r3, [r7, #4]
 8021cbe:	685b      	ldr	r3, [r3, #4]
 8021cc0:	005b      	lsls	r3, r3, #1
 8021cc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8021cc6:	1c59      	adds	r1, r3, #1
 8021cc8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8021ccc:	400b      	ands	r3, r1
 8021cce:	2b00      	cmp	r3, #0
 8021cd0:	d00a      	beq.n	8021ce8 <HAL_I2C_Init+0x138>
 8021cd2:	68fb      	ldr	r3, [r7, #12]
 8021cd4:	1e59      	subs	r1, r3, #1
 8021cd6:	687b      	ldr	r3, [r7, #4]
 8021cd8:	685b      	ldr	r3, [r3, #4]
 8021cda:	005b      	lsls	r3, r3, #1
 8021cdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8021ce0:	3301      	adds	r3, #1
 8021ce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8021ce6:	e051      	b.n	8021d8c <HAL_I2C_Init+0x1dc>
 8021ce8:	2304      	movs	r3, #4
 8021cea:	e04f      	b.n	8021d8c <HAL_I2C_Init+0x1dc>
 8021cec:	687b      	ldr	r3, [r7, #4]
 8021cee:	689b      	ldr	r3, [r3, #8]
 8021cf0:	2b00      	cmp	r3, #0
 8021cf2:	d111      	bne.n	8021d18 <HAL_I2C_Init+0x168>
 8021cf4:	68fb      	ldr	r3, [r7, #12]
 8021cf6:	1e58      	subs	r0, r3, #1
 8021cf8:	687b      	ldr	r3, [r7, #4]
 8021cfa:	6859      	ldr	r1, [r3, #4]
 8021cfc:	460b      	mov	r3, r1
 8021cfe:	005b      	lsls	r3, r3, #1
 8021d00:	440b      	add	r3, r1
 8021d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8021d06:	3301      	adds	r3, #1
 8021d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8021d0c:	2b00      	cmp	r3, #0
 8021d0e:	bf0c      	ite	eq
 8021d10:	2301      	moveq	r3, #1
 8021d12:	2300      	movne	r3, #0
 8021d14:	b2db      	uxtb	r3, r3
 8021d16:	e012      	b.n	8021d3e <HAL_I2C_Init+0x18e>
 8021d18:	68fb      	ldr	r3, [r7, #12]
 8021d1a:	1e58      	subs	r0, r3, #1
 8021d1c:	687b      	ldr	r3, [r7, #4]
 8021d1e:	6859      	ldr	r1, [r3, #4]
 8021d20:	460b      	mov	r3, r1
 8021d22:	009b      	lsls	r3, r3, #2
 8021d24:	440b      	add	r3, r1
 8021d26:	0099      	lsls	r1, r3, #2
 8021d28:	440b      	add	r3, r1
 8021d2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8021d2e:	3301      	adds	r3, #1
 8021d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8021d34:	2b00      	cmp	r3, #0
 8021d36:	bf0c      	ite	eq
 8021d38:	2301      	moveq	r3, #1
 8021d3a:	2300      	movne	r3, #0
 8021d3c:	b2db      	uxtb	r3, r3
 8021d3e:	2b00      	cmp	r3, #0
 8021d40:	d001      	beq.n	8021d46 <HAL_I2C_Init+0x196>
 8021d42:	2301      	movs	r3, #1
 8021d44:	e022      	b.n	8021d8c <HAL_I2C_Init+0x1dc>
 8021d46:	687b      	ldr	r3, [r7, #4]
 8021d48:	689b      	ldr	r3, [r3, #8]
 8021d4a:	2b00      	cmp	r3, #0
 8021d4c:	d10e      	bne.n	8021d6c <HAL_I2C_Init+0x1bc>
 8021d4e:	68fb      	ldr	r3, [r7, #12]
 8021d50:	1e58      	subs	r0, r3, #1
 8021d52:	687b      	ldr	r3, [r7, #4]
 8021d54:	6859      	ldr	r1, [r3, #4]
 8021d56:	460b      	mov	r3, r1
 8021d58:	005b      	lsls	r3, r3, #1
 8021d5a:	440b      	add	r3, r1
 8021d5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8021d60:	3301      	adds	r3, #1
 8021d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8021d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8021d6a:	e00f      	b.n	8021d8c <HAL_I2C_Init+0x1dc>
 8021d6c:	68fb      	ldr	r3, [r7, #12]
 8021d6e:	1e58      	subs	r0, r3, #1
 8021d70:	687b      	ldr	r3, [r7, #4]
 8021d72:	6859      	ldr	r1, [r3, #4]
 8021d74:	460b      	mov	r3, r1
 8021d76:	009b      	lsls	r3, r3, #2
 8021d78:	440b      	add	r3, r1
 8021d7a:	0099      	lsls	r1, r3, #2
 8021d7c:	440b      	add	r3, r1
 8021d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8021d82:	3301      	adds	r3, #1
 8021d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8021d88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8021d8c:	6879      	ldr	r1, [r7, #4]
 8021d8e:	6809      	ldr	r1, [r1, #0]
 8021d90:	4313      	orrs	r3, r2
 8021d92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8021d94:	687b      	ldr	r3, [r7, #4]
 8021d96:	681b      	ldr	r3, [r3, #0]
 8021d98:	681b      	ldr	r3, [r3, #0]
 8021d9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8021d9e:	687b      	ldr	r3, [r7, #4]
 8021da0:	69da      	ldr	r2, [r3, #28]
 8021da2:	687b      	ldr	r3, [r7, #4]
 8021da4:	6a1b      	ldr	r3, [r3, #32]
 8021da6:	431a      	orrs	r2, r3
 8021da8:	687b      	ldr	r3, [r7, #4]
 8021daa:	681b      	ldr	r3, [r3, #0]
 8021dac:	430a      	orrs	r2, r1
 8021dae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8021db0:	687b      	ldr	r3, [r7, #4]
 8021db2:	681b      	ldr	r3, [r3, #0]
 8021db4:	689b      	ldr	r3, [r3, #8]
 8021db6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8021dba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8021dbe:	687a      	ldr	r2, [r7, #4]
 8021dc0:	6911      	ldr	r1, [r2, #16]
 8021dc2:	687a      	ldr	r2, [r7, #4]
 8021dc4:	68d2      	ldr	r2, [r2, #12]
 8021dc6:	4311      	orrs	r1, r2
 8021dc8:	687a      	ldr	r2, [r7, #4]
 8021dca:	6812      	ldr	r2, [r2, #0]
 8021dcc:	430b      	orrs	r3, r1
 8021dce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8021dd0:	687b      	ldr	r3, [r7, #4]
 8021dd2:	681b      	ldr	r3, [r3, #0]
 8021dd4:	68db      	ldr	r3, [r3, #12]
 8021dd6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8021dda:	687b      	ldr	r3, [r7, #4]
 8021ddc:	695a      	ldr	r2, [r3, #20]
 8021dde:	687b      	ldr	r3, [r7, #4]
 8021de0:	699b      	ldr	r3, [r3, #24]
 8021de2:	431a      	orrs	r2, r3
 8021de4:	687b      	ldr	r3, [r7, #4]
 8021de6:	681b      	ldr	r3, [r3, #0]
 8021de8:	430a      	orrs	r2, r1
 8021dea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8021dec:	687b      	ldr	r3, [r7, #4]
 8021dee:	681b      	ldr	r3, [r3, #0]
 8021df0:	681a      	ldr	r2, [r3, #0]
 8021df2:	687b      	ldr	r3, [r7, #4]
 8021df4:	681b      	ldr	r3, [r3, #0]
 8021df6:	f042 0201 	orr.w	r2, r2, #1
 8021dfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8021dfc:	687b      	ldr	r3, [r7, #4]
 8021dfe:	2200      	movs	r2, #0
 8021e00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8021e02:	687b      	ldr	r3, [r7, #4]
 8021e04:	2220      	movs	r2, #32
 8021e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8021e0a:	687b      	ldr	r3, [r7, #4]
 8021e0c:	2200      	movs	r2, #0
 8021e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8021e10:	687b      	ldr	r3, [r7, #4]
 8021e12:	2200      	movs	r2, #0
 8021e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8021e18:	2300      	movs	r3, #0
}
 8021e1a:	4618      	mov	r0, r3
 8021e1c:	3710      	adds	r7, #16
 8021e1e:	46bd      	mov	sp, r7
 8021e20:	bd80      	pop	{r7, pc}
 8021e22:	bf00      	nop
 8021e24:	000186a0 	.word	0x000186a0
 8021e28:	001e847f 	.word	0x001e847f
 8021e2c:	003d08ff 	.word	0x003d08ff
 8021e30:	431bde83 	.word	0x431bde83
 8021e34:	10624dd3 	.word	0x10624dd3

08021e38 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8021e38:	b580      	push	{r7, lr}
 8021e3a:	b088      	sub	sp, #32
 8021e3c:	af02      	add	r7, sp, #8
 8021e3e:	60f8      	str	r0, [r7, #12]
 8021e40:	607a      	str	r2, [r7, #4]
 8021e42:	461a      	mov	r2, r3
 8021e44:	460b      	mov	r3, r1
 8021e46:	817b      	strh	r3, [r7, #10]
 8021e48:	4613      	mov	r3, r2
 8021e4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8021e4c:	f7ff f912 	bl	8021074 <HAL_GetTick>
 8021e50:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8021e52:	68fb      	ldr	r3, [r7, #12]
 8021e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8021e58:	b2db      	uxtb	r3, r3
 8021e5a:	2b20      	cmp	r3, #32
 8021e5c:	f040 80e0 	bne.w	8022020 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8021e60:	697b      	ldr	r3, [r7, #20]
 8021e62:	9300      	str	r3, [sp, #0]
 8021e64:	2319      	movs	r3, #25
 8021e66:	2201      	movs	r2, #1
 8021e68:	4970      	ldr	r1, [pc, #448]	; (802202c <HAL_I2C_Master_Transmit+0x1f4>)
 8021e6a:	68f8      	ldr	r0, [r7, #12]
 8021e6c:	f000 f964 	bl	8022138 <I2C_WaitOnFlagUntilTimeout>
 8021e70:	4603      	mov	r3, r0
 8021e72:	2b00      	cmp	r3, #0
 8021e74:	d001      	beq.n	8021e7a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8021e76:	2302      	movs	r3, #2
 8021e78:	e0d3      	b.n	8022022 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8021e7a:	68fb      	ldr	r3, [r7, #12]
 8021e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021e80:	2b01      	cmp	r3, #1
 8021e82:	d101      	bne.n	8021e88 <HAL_I2C_Master_Transmit+0x50>
 8021e84:	2302      	movs	r3, #2
 8021e86:	e0cc      	b.n	8022022 <HAL_I2C_Master_Transmit+0x1ea>
 8021e88:	68fb      	ldr	r3, [r7, #12]
 8021e8a:	2201      	movs	r2, #1
 8021e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8021e90:	68fb      	ldr	r3, [r7, #12]
 8021e92:	681b      	ldr	r3, [r3, #0]
 8021e94:	681b      	ldr	r3, [r3, #0]
 8021e96:	f003 0301 	and.w	r3, r3, #1
 8021e9a:	2b01      	cmp	r3, #1
 8021e9c:	d007      	beq.n	8021eae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8021e9e:	68fb      	ldr	r3, [r7, #12]
 8021ea0:	681b      	ldr	r3, [r3, #0]
 8021ea2:	681a      	ldr	r2, [r3, #0]
 8021ea4:	68fb      	ldr	r3, [r7, #12]
 8021ea6:	681b      	ldr	r3, [r3, #0]
 8021ea8:	f042 0201 	orr.w	r2, r2, #1
 8021eac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8021eae:	68fb      	ldr	r3, [r7, #12]
 8021eb0:	681b      	ldr	r3, [r3, #0]
 8021eb2:	681a      	ldr	r2, [r3, #0]
 8021eb4:	68fb      	ldr	r3, [r7, #12]
 8021eb6:	681b      	ldr	r3, [r3, #0]
 8021eb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8021ebc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8021ebe:	68fb      	ldr	r3, [r7, #12]
 8021ec0:	2221      	movs	r2, #33	; 0x21
 8021ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8021ec6:	68fb      	ldr	r3, [r7, #12]
 8021ec8:	2210      	movs	r2, #16
 8021eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8021ece:	68fb      	ldr	r3, [r7, #12]
 8021ed0:	2200      	movs	r2, #0
 8021ed2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8021ed4:	68fb      	ldr	r3, [r7, #12]
 8021ed6:	687a      	ldr	r2, [r7, #4]
 8021ed8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8021eda:	68fb      	ldr	r3, [r7, #12]
 8021edc:	893a      	ldrh	r2, [r7, #8]
 8021ede:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8021ee0:	68fb      	ldr	r3, [r7, #12]
 8021ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8021ee4:	b29a      	uxth	r2, r3
 8021ee6:	68fb      	ldr	r3, [r7, #12]
 8021ee8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8021eea:	68fb      	ldr	r3, [r7, #12]
 8021eec:	4a50      	ldr	r2, [pc, #320]	; (8022030 <HAL_I2C_Master_Transmit+0x1f8>)
 8021eee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8021ef0:	8979      	ldrh	r1, [r7, #10]
 8021ef2:	697b      	ldr	r3, [r7, #20]
 8021ef4:	6a3a      	ldr	r2, [r7, #32]
 8021ef6:	68f8      	ldr	r0, [r7, #12]
 8021ef8:	f000 f89c 	bl	8022034 <I2C_MasterRequestWrite>
 8021efc:	4603      	mov	r3, r0
 8021efe:	2b00      	cmp	r3, #0
 8021f00:	d001      	beq.n	8021f06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8021f02:	2301      	movs	r3, #1
 8021f04:	e08d      	b.n	8022022 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8021f06:	2300      	movs	r3, #0
 8021f08:	613b      	str	r3, [r7, #16]
 8021f0a:	68fb      	ldr	r3, [r7, #12]
 8021f0c:	681b      	ldr	r3, [r3, #0]
 8021f0e:	695b      	ldr	r3, [r3, #20]
 8021f10:	613b      	str	r3, [r7, #16]
 8021f12:	68fb      	ldr	r3, [r7, #12]
 8021f14:	681b      	ldr	r3, [r3, #0]
 8021f16:	699b      	ldr	r3, [r3, #24]
 8021f18:	613b      	str	r3, [r7, #16]
 8021f1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8021f1c:	e066      	b.n	8021fec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8021f1e:	697a      	ldr	r2, [r7, #20]
 8021f20:	6a39      	ldr	r1, [r7, #32]
 8021f22:	68f8      	ldr	r0, [r7, #12]
 8021f24:	f000 f9de 	bl	80222e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8021f28:	4603      	mov	r3, r0
 8021f2a:	2b00      	cmp	r3, #0
 8021f2c:	d00d      	beq.n	8021f4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8021f2e:	68fb      	ldr	r3, [r7, #12]
 8021f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021f32:	2b04      	cmp	r3, #4
 8021f34:	d107      	bne.n	8021f46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8021f36:	68fb      	ldr	r3, [r7, #12]
 8021f38:	681b      	ldr	r3, [r3, #0]
 8021f3a:	681a      	ldr	r2, [r3, #0]
 8021f3c:	68fb      	ldr	r3, [r7, #12]
 8021f3e:	681b      	ldr	r3, [r3, #0]
 8021f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8021f44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8021f46:	2301      	movs	r3, #1
 8021f48:	e06b      	b.n	8022022 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8021f4a:	68fb      	ldr	r3, [r7, #12]
 8021f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021f4e:	781a      	ldrb	r2, [r3, #0]
 8021f50:	68fb      	ldr	r3, [r7, #12]
 8021f52:	681b      	ldr	r3, [r3, #0]
 8021f54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8021f56:	68fb      	ldr	r3, [r7, #12]
 8021f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021f5a:	1c5a      	adds	r2, r3, #1
 8021f5c:	68fb      	ldr	r3, [r7, #12]
 8021f5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8021f60:	68fb      	ldr	r3, [r7, #12]
 8021f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8021f64:	b29b      	uxth	r3, r3
 8021f66:	3b01      	subs	r3, #1
 8021f68:	b29a      	uxth	r2, r3
 8021f6a:	68fb      	ldr	r3, [r7, #12]
 8021f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8021f6e:	68fb      	ldr	r3, [r7, #12]
 8021f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8021f72:	3b01      	subs	r3, #1
 8021f74:	b29a      	uxth	r2, r3
 8021f76:	68fb      	ldr	r3, [r7, #12]
 8021f78:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8021f7a:	68fb      	ldr	r3, [r7, #12]
 8021f7c:	681b      	ldr	r3, [r3, #0]
 8021f7e:	695b      	ldr	r3, [r3, #20]
 8021f80:	f003 0304 	and.w	r3, r3, #4
 8021f84:	2b04      	cmp	r3, #4
 8021f86:	d11b      	bne.n	8021fc0 <HAL_I2C_Master_Transmit+0x188>
 8021f88:	68fb      	ldr	r3, [r7, #12]
 8021f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8021f8c:	2b00      	cmp	r3, #0
 8021f8e:	d017      	beq.n	8021fc0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8021f90:	68fb      	ldr	r3, [r7, #12]
 8021f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021f94:	781a      	ldrb	r2, [r3, #0]
 8021f96:	68fb      	ldr	r3, [r7, #12]
 8021f98:	681b      	ldr	r3, [r3, #0]
 8021f9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8021f9c:	68fb      	ldr	r3, [r7, #12]
 8021f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021fa0:	1c5a      	adds	r2, r3, #1
 8021fa2:	68fb      	ldr	r3, [r7, #12]
 8021fa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8021fa6:	68fb      	ldr	r3, [r7, #12]
 8021fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8021faa:	b29b      	uxth	r3, r3
 8021fac:	3b01      	subs	r3, #1
 8021fae:	b29a      	uxth	r2, r3
 8021fb0:	68fb      	ldr	r3, [r7, #12]
 8021fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8021fb4:	68fb      	ldr	r3, [r7, #12]
 8021fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8021fb8:	3b01      	subs	r3, #1
 8021fba:	b29a      	uxth	r2, r3
 8021fbc:	68fb      	ldr	r3, [r7, #12]
 8021fbe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8021fc0:	697a      	ldr	r2, [r7, #20]
 8021fc2:	6a39      	ldr	r1, [r7, #32]
 8021fc4:	68f8      	ldr	r0, [r7, #12]
 8021fc6:	f000 f9ce 	bl	8022366 <I2C_WaitOnBTFFlagUntilTimeout>
 8021fca:	4603      	mov	r3, r0
 8021fcc:	2b00      	cmp	r3, #0
 8021fce:	d00d      	beq.n	8021fec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8021fd0:	68fb      	ldr	r3, [r7, #12]
 8021fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021fd4:	2b04      	cmp	r3, #4
 8021fd6:	d107      	bne.n	8021fe8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8021fd8:	68fb      	ldr	r3, [r7, #12]
 8021fda:	681b      	ldr	r3, [r3, #0]
 8021fdc:	681a      	ldr	r2, [r3, #0]
 8021fde:	68fb      	ldr	r3, [r7, #12]
 8021fe0:	681b      	ldr	r3, [r3, #0]
 8021fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8021fe6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8021fe8:	2301      	movs	r3, #1
 8021fea:	e01a      	b.n	8022022 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8021fec:	68fb      	ldr	r3, [r7, #12]
 8021fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8021ff0:	2b00      	cmp	r3, #0
 8021ff2:	d194      	bne.n	8021f1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8021ff4:	68fb      	ldr	r3, [r7, #12]
 8021ff6:	681b      	ldr	r3, [r3, #0]
 8021ff8:	681a      	ldr	r2, [r3, #0]
 8021ffa:	68fb      	ldr	r3, [r7, #12]
 8021ffc:	681b      	ldr	r3, [r3, #0]
 8021ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8022002:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8022004:	68fb      	ldr	r3, [r7, #12]
 8022006:	2220      	movs	r2, #32
 8022008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 802200c:	68fb      	ldr	r3, [r7, #12]
 802200e:	2200      	movs	r2, #0
 8022010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8022014:	68fb      	ldr	r3, [r7, #12]
 8022016:	2200      	movs	r2, #0
 8022018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 802201c:	2300      	movs	r3, #0
 802201e:	e000      	b.n	8022022 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8022020:	2302      	movs	r3, #2
  }
}
 8022022:	4618      	mov	r0, r3
 8022024:	3718      	adds	r7, #24
 8022026:	46bd      	mov	sp, r7
 8022028:	bd80      	pop	{r7, pc}
 802202a:	bf00      	nop
 802202c:	00100002 	.word	0x00100002
 8022030:	ffff0000 	.word	0xffff0000

08022034 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8022034:	b580      	push	{r7, lr}
 8022036:	b088      	sub	sp, #32
 8022038:	af02      	add	r7, sp, #8
 802203a:	60f8      	str	r0, [r7, #12]
 802203c:	607a      	str	r2, [r7, #4]
 802203e:	603b      	str	r3, [r7, #0]
 8022040:	460b      	mov	r3, r1
 8022042:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8022044:	68fb      	ldr	r3, [r7, #12]
 8022046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022048:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 802204a:	697b      	ldr	r3, [r7, #20]
 802204c:	2b08      	cmp	r3, #8
 802204e:	d006      	beq.n	802205e <I2C_MasterRequestWrite+0x2a>
 8022050:	697b      	ldr	r3, [r7, #20]
 8022052:	2b01      	cmp	r3, #1
 8022054:	d003      	beq.n	802205e <I2C_MasterRequestWrite+0x2a>
 8022056:	697b      	ldr	r3, [r7, #20]
 8022058:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 802205c:	d108      	bne.n	8022070 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 802205e:	68fb      	ldr	r3, [r7, #12]
 8022060:	681b      	ldr	r3, [r3, #0]
 8022062:	681a      	ldr	r2, [r3, #0]
 8022064:	68fb      	ldr	r3, [r7, #12]
 8022066:	681b      	ldr	r3, [r3, #0]
 8022068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802206c:	601a      	str	r2, [r3, #0]
 802206e:	e00b      	b.n	8022088 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8022070:	68fb      	ldr	r3, [r7, #12]
 8022072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022074:	2b12      	cmp	r3, #18
 8022076:	d107      	bne.n	8022088 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8022078:	68fb      	ldr	r3, [r7, #12]
 802207a:	681b      	ldr	r3, [r3, #0]
 802207c:	681a      	ldr	r2, [r3, #0]
 802207e:	68fb      	ldr	r3, [r7, #12]
 8022080:	681b      	ldr	r3, [r3, #0]
 8022082:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8022086:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8022088:	683b      	ldr	r3, [r7, #0]
 802208a:	9300      	str	r3, [sp, #0]
 802208c:	687b      	ldr	r3, [r7, #4]
 802208e:	2200      	movs	r2, #0
 8022090:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8022094:	68f8      	ldr	r0, [r7, #12]
 8022096:	f000 f84f 	bl	8022138 <I2C_WaitOnFlagUntilTimeout>
 802209a:	4603      	mov	r3, r0
 802209c:	2b00      	cmp	r3, #0
 802209e:	d00d      	beq.n	80220bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80220a0:	68fb      	ldr	r3, [r7, #12]
 80220a2:	681b      	ldr	r3, [r3, #0]
 80220a4:	681b      	ldr	r3, [r3, #0]
 80220a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80220aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80220ae:	d103      	bne.n	80220b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80220b0:	68fb      	ldr	r3, [r7, #12]
 80220b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80220b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80220b8:	2303      	movs	r3, #3
 80220ba:	e035      	b.n	8022128 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80220bc:	68fb      	ldr	r3, [r7, #12]
 80220be:	691b      	ldr	r3, [r3, #16]
 80220c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80220c4:	d108      	bne.n	80220d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80220c6:	897b      	ldrh	r3, [r7, #10]
 80220c8:	b2db      	uxtb	r3, r3
 80220ca:	461a      	mov	r2, r3
 80220cc:	68fb      	ldr	r3, [r7, #12]
 80220ce:	681b      	ldr	r3, [r3, #0]
 80220d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80220d4:	611a      	str	r2, [r3, #16]
 80220d6:	e01b      	b.n	8022110 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80220d8:	897b      	ldrh	r3, [r7, #10]
 80220da:	11db      	asrs	r3, r3, #7
 80220dc:	b2db      	uxtb	r3, r3
 80220de:	f003 0306 	and.w	r3, r3, #6
 80220e2:	b2db      	uxtb	r3, r3
 80220e4:	f063 030f 	orn	r3, r3, #15
 80220e8:	b2da      	uxtb	r2, r3
 80220ea:	68fb      	ldr	r3, [r7, #12]
 80220ec:	681b      	ldr	r3, [r3, #0]
 80220ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80220f0:	683b      	ldr	r3, [r7, #0]
 80220f2:	687a      	ldr	r2, [r7, #4]
 80220f4:	490e      	ldr	r1, [pc, #56]	; (8022130 <I2C_MasterRequestWrite+0xfc>)
 80220f6:	68f8      	ldr	r0, [r7, #12]
 80220f8:	f000 f875 	bl	80221e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80220fc:	4603      	mov	r3, r0
 80220fe:	2b00      	cmp	r3, #0
 8022100:	d001      	beq.n	8022106 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8022102:	2301      	movs	r3, #1
 8022104:	e010      	b.n	8022128 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8022106:	897b      	ldrh	r3, [r7, #10]
 8022108:	b2da      	uxtb	r2, r3
 802210a:	68fb      	ldr	r3, [r7, #12]
 802210c:	681b      	ldr	r3, [r3, #0]
 802210e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8022110:	683b      	ldr	r3, [r7, #0]
 8022112:	687a      	ldr	r2, [r7, #4]
 8022114:	4907      	ldr	r1, [pc, #28]	; (8022134 <I2C_MasterRequestWrite+0x100>)
 8022116:	68f8      	ldr	r0, [r7, #12]
 8022118:	f000 f865 	bl	80221e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 802211c:	4603      	mov	r3, r0
 802211e:	2b00      	cmp	r3, #0
 8022120:	d001      	beq.n	8022126 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8022122:	2301      	movs	r3, #1
 8022124:	e000      	b.n	8022128 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8022126:	2300      	movs	r3, #0
}
 8022128:	4618      	mov	r0, r3
 802212a:	3718      	adds	r7, #24
 802212c:	46bd      	mov	sp, r7
 802212e:	bd80      	pop	{r7, pc}
 8022130:	00010008 	.word	0x00010008
 8022134:	00010002 	.word	0x00010002

08022138 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8022138:	b580      	push	{r7, lr}
 802213a:	b084      	sub	sp, #16
 802213c:	af00      	add	r7, sp, #0
 802213e:	60f8      	str	r0, [r7, #12]
 8022140:	60b9      	str	r1, [r7, #8]
 8022142:	603b      	str	r3, [r7, #0]
 8022144:	4613      	mov	r3, r2
 8022146:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8022148:	e025      	b.n	8022196 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802214a:	683b      	ldr	r3, [r7, #0]
 802214c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022150:	d021      	beq.n	8022196 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8022152:	f7fe ff8f 	bl	8021074 <HAL_GetTick>
 8022156:	4602      	mov	r2, r0
 8022158:	69bb      	ldr	r3, [r7, #24]
 802215a:	1ad3      	subs	r3, r2, r3
 802215c:	683a      	ldr	r2, [r7, #0]
 802215e:	429a      	cmp	r2, r3
 8022160:	d302      	bcc.n	8022168 <I2C_WaitOnFlagUntilTimeout+0x30>
 8022162:	683b      	ldr	r3, [r7, #0]
 8022164:	2b00      	cmp	r3, #0
 8022166:	d116      	bne.n	8022196 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8022168:	68fb      	ldr	r3, [r7, #12]
 802216a:	2200      	movs	r2, #0
 802216c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 802216e:	68fb      	ldr	r3, [r7, #12]
 8022170:	2220      	movs	r2, #32
 8022172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8022176:	68fb      	ldr	r3, [r7, #12]
 8022178:	2200      	movs	r2, #0
 802217a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 802217e:	68fb      	ldr	r3, [r7, #12]
 8022180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022182:	f043 0220 	orr.w	r2, r3, #32
 8022186:	68fb      	ldr	r3, [r7, #12]
 8022188:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 802218a:	68fb      	ldr	r3, [r7, #12]
 802218c:	2200      	movs	r2, #0
 802218e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8022192:	2301      	movs	r3, #1
 8022194:	e023      	b.n	80221de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8022196:	68bb      	ldr	r3, [r7, #8]
 8022198:	0c1b      	lsrs	r3, r3, #16
 802219a:	b2db      	uxtb	r3, r3
 802219c:	2b01      	cmp	r3, #1
 802219e:	d10d      	bne.n	80221bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80221a0:	68fb      	ldr	r3, [r7, #12]
 80221a2:	681b      	ldr	r3, [r3, #0]
 80221a4:	695b      	ldr	r3, [r3, #20]
 80221a6:	43da      	mvns	r2, r3
 80221a8:	68bb      	ldr	r3, [r7, #8]
 80221aa:	4013      	ands	r3, r2
 80221ac:	b29b      	uxth	r3, r3
 80221ae:	2b00      	cmp	r3, #0
 80221b0:	bf0c      	ite	eq
 80221b2:	2301      	moveq	r3, #1
 80221b4:	2300      	movne	r3, #0
 80221b6:	b2db      	uxtb	r3, r3
 80221b8:	461a      	mov	r2, r3
 80221ba:	e00c      	b.n	80221d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80221bc:	68fb      	ldr	r3, [r7, #12]
 80221be:	681b      	ldr	r3, [r3, #0]
 80221c0:	699b      	ldr	r3, [r3, #24]
 80221c2:	43da      	mvns	r2, r3
 80221c4:	68bb      	ldr	r3, [r7, #8]
 80221c6:	4013      	ands	r3, r2
 80221c8:	b29b      	uxth	r3, r3
 80221ca:	2b00      	cmp	r3, #0
 80221cc:	bf0c      	ite	eq
 80221ce:	2301      	moveq	r3, #1
 80221d0:	2300      	movne	r3, #0
 80221d2:	b2db      	uxtb	r3, r3
 80221d4:	461a      	mov	r2, r3
 80221d6:	79fb      	ldrb	r3, [r7, #7]
 80221d8:	429a      	cmp	r2, r3
 80221da:	d0b6      	beq.n	802214a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80221dc:	2300      	movs	r3, #0
}
 80221de:	4618      	mov	r0, r3
 80221e0:	3710      	adds	r7, #16
 80221e2:	46bd      	mov	sp, r7
 80221e4:	bd80      	pop	{r7, pc}

080221e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80221e6:	b580      	push	{r7, lr}
 80221e8:	b084      	sub	sp, #16
 80221ea:	af00      	add	r7, sp, #0
 80221ec:	60f8      	str	r0, [r7, #12]
 80221ee:	60b9      	str	r1, [r7, #8]
 80221f0:	607a      	str	r2, [r7, #4]
 80221f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80221f4:	e051      	b.n	802229a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80221f6:	68fb      	ldr	r3, [r7, #12]
 80221f8:	681b      	ldr	r3, [r3, #0]
 80221fa:	695b      	ldr	r3, [r3, #20]
 80221fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8022200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8022204:	d123      	bne.n	802224e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8022206:	68fb      	ldr	r3, [r7, #12]
 8022208:	681b      	ldr	r3, [r3, #0]
 802220a:	681a      	ldr	r2, [r3, #0]
 802220c:	68fb      	ldr	r3, [r7, #12]
 802220e:	681b      	ldr	r3, [r3, #0]
 8022210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8022214:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8022216:	68fb      	ldr	r3, [r7, #12]
 8022218:	681b      	ldr	r3, [r3, #0]
 802221a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 802221e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8022220:	68fb      	ldr	r3, [r7, #12]
 8022222:	2200      	movs	r2, #0
 8022224:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8022226:	68fb      	ldr	r3, [r7, #12]
 8022228:	2220      	movs	r2, #32
 802222a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 802222e:	68fb      	ldr	r3, [r7, #12]
 8022230:	2200      	movs	r2, #0
 8022232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8022236:	68fb      	ldr	r3, [r7, #12]
 8022238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802223a:	f043 0204 	orr.w	r2, r3, #4
 802223e:	68fb      	ldr	r3, [r7, #12]
 8022240:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8022242:	68fb      	ldr	r3, [r7, #12]
 8022244:	2200      	movs	r2, #0
 8022246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 802224a:	2301      	movs	r3, #1
 802224c:	e046      	b.n	80222dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802224e:	687b      	ldr	r3, [r7, #4]
 8022250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022254:	d021      	beq.n	802229a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8022256:	f7fe ff0d 	bl	8021074 <HAL_GetTick>
 802225a:	4602      	mov	r2, r0
 802225c:	683b      	ldr	r3, [r7, #0]
 802225e:	1ad3      	subs	r3, r2, r3
 8022260:	687a      	ldr	r2, [r7, #4]
 8022262:	429a      	cmp	r2, r3
 8022264:	d302      	bcc.n	802226c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8022266:	687b      	ldr	r3, [r7, #4]
 8022268:	2b00      	cmp	r3, #0
 802226a:	d116      	bne.n	802229a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 802226c:	68fb      	ldr	r3, [r7, #12]
 802226e:	2200      	movs	r2, #0
 8022270:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8022272:	68fb      	ldr	r3, [r7, #12]
 8022274:	2220      	movs	r2, #32
 8022276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 802227a:	68fb      	ldr	r3, [r7, #12]
 802227c:	2200      	movs	r2, #0
 802227e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8022282:	68fb      	ldr	r3, [r7, #12]
 8022284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022286:	f043 0220 	orr.w	r2, r3, #32
 802228a:	68fb      	ldr	r3, [r7, #12]
 802228c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 802228e:	68fb      	ldr	r3, [r7, #12]
 8022290:	2200      	movs	r2, #0
 8022292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8022296:	2301      	movs	r3, #1
 8022298:	e020      	b.n	80222dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 802229a:	68bb      	ldr	r3, [r7, #8]
 802229c:	0c1b      	lsrs	r3, r3, #16
 802229e:	b2db      	uxtb	r3, r3
 80222a0:	2b01      	cmp	r3, #1
 80222a2:	d10c      	bne.n	80222be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80222a4:	68fb      	ldr	r3, [r7, #12]
 80222a6:	681b      	ldr	r3, [r3, #0]
 80222a8:	695b      	ldr	r3, [r3, #20]
 80222aa:	43da      	mvns	r2, r3
 80222ac:	68bb      	ldr	r3, [r7, #8]
 80222ae:	4013      	ands	r3, r2
 80222b0:	b29b      	uxth	r3, r3
 80222b2:	2b00      	cmp	r3, #0
 80222b4:	bf14      	ite	ne
 80222b6:	2301      	movne	r3, #1
 80222b8:	2300      	moveq	r3, #0
 80222ba:	b2db      	uxtb	r3, r3
 80222bc:	e00b      	b.n	80222d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80222be:	68fb      	ldr	r3, [r7, #12]
 80222c0:	681b      	ldr	r3, [r3, #0]
 80222c2:	699b      	ldr	r3, [r3, #24]
 80222c4:	43da      	mvns	r2, r3
 80222c6:	68bb      	ldr	r3, [r7, #8]
 80222c8:	4013      	ands	r3, r2
 80222ca:	b29b      	uxth	r3, r3
 80222cc:	2b00      	cmp	r3, #0
 80222ce:	bf14      	ite	ne
 80222d0:	2301      	movne	r3, #1
 80222d2:	2300      	moveq	r3, #0
 80222d4:	b2db      	uxtb	r3, r3
 80222d6:	2b00      	cmp	r3, #0
 80222d8:	d18d      	bne.n	80221f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80222da:	2300      	movs	r3, #0
}
 80222dc:	4618      	mov	r0, r3
 80222de:	3710      	adds	r7, #16
 80222e0:	46bd      	mov	sp, r7
 80222e2:	bd80      	pop	{r7, pc}

080222e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80222e4:	b580      	push	{r7, lr}
 80222e6:	b084      	sub	sp, #16
 80222e8:	af00      	add	r7, sp, #0
 80222ea:	60f8      	str	r0, [r7, #12]
 80222ec:	60b9      	str	r1, [r7, #8]
 80222ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80222f0:	e02d      	b.n	802234e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80222f2:	68f8      	ldr	r0, [r7, #12]
 80222f4:	f000 f878 	bl	80223e8 <I2C_IsAcknowledgeFailed>
 80222f8:	4603      	mov	r3, r0
 80222fa:	2b00      	cmp	r3, #0
 80222fc:	d001      	beq.n	8022302 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80222fe:	2301      	movs	r3, #1
 8022300:	e02d      	b.n	802235e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8022302:	68bb      	ldr	r3, [r7, #8]
 8022304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022308:	d021      	beq.n	802234e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802230a:	f7fe feb3 	bl	8021074 <HAL_GetTick>
 802230e:	4602      	mov	r2, r0
 8022310:	687b      	ldr	r3, [r7, #4]
 8022312:	1ad3      	subs	r3, r2, r3
 8022314:	68ba      	ldr	r2, [r7, #8]
 8022316:	429a      	cmp	r2, r3
 8022318:	d302      	bcc.n	8022320 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 802231a:	68bb      	ldr	r3, [r7, #8]
 802231c:	2b00      	cmp	r3, #0
 802231e:	d116      	bne.n	802234e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8022320:	68fb      	ldr	r3, [r7, #12]
 8022322:	2200      	movs	r2, #0
 8022324:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8022326:	68fb      	ldr	r3, [r7, #12]
 8022328:	2220      	movs	r2, #32
 802232a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 802232e:	68fb      	ldr	r3, [r7, #12]
 8022330:	2200      	movs	r2, #0
 8022332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8022336:	68fb      	ldr	r3, [r7, #12]
 8022338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802233a:	f043 0220 	orr.w	r2, r3, #32
 802233e:	68fb      	ldr	r3, [r7, #12]
 8022340:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8022342:	68fb      	ldr	r3, [r7, #12]
 8022344:	2200      	movs	r2, #0
 8022346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 802234a:	2301      	movs	r3, #1
 802234c:	e007      	b.n	802235e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 802234e:	68fb      	ldr	r3, [r7, #12]
 8022350:	681b      	ldr	r3, [r3, #0]
 8022352:	695b      	ldr	r3, [r3, #20]
 8022354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022358:	2b80      	cmp	r3, #128	; 0x80
 802235a:	d1ca      	bne.n	80222f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 802235c:	2300      	movs	r3, #0
}
 802235e:	4618      	mov	r0, r3
 8022360:	3710      	adds	r7, #16
 8022362:	46bd      	mov	sp, r7
 8022364:	bd80      	pop	{r7, pc}

08022366 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8022366:	b580      	push	{r7, lr}
 8022368:	b084      	sub	sp, #16
 802236a:	af00      	add	r7, sp, #0
 802236c:	60f8      	str	r0, [r7, #12]
 802236e:	60b9      	str	r1, [r7, #8]
 8022370:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8022372:	e02d      	b.n	80223d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8022374:	68f8      	ldr	r0, [r7, #12]
 8022376:	f000 f837 	bl	80223e8 <I2C_IsAcknowledgeFailed>
 802237a:	4603      	mov	r3, r0
 802237c:	2b00      	cmp	r3, #0
 802237e:	d001      	beq.n	8022384 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8022380:	2301      	movs	r3, #1
 8022382:	e02d      	b.n	80223e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8022384:	68bb      	ldr	r3, [r7, #8]
 8022386:	f1b3 3fff 	cmp.w	r3, #4294967295
 802238a:	d021      	beq.n	80223d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802238c:	f7fe fe72 	bl	8021074 <HAL_GetTick>
 8022390:	4602      	mov	r2, r0
 8022392:	687b      	ldr	r3, [r7, #4]
 8022394:	1ad3      	subs	r3, r2, r3
 8022396:	68ba      	ldr	r2, [r7, #8]
 8022398:	429a      	cmp	r2, r3
 802239a:	d302      	bcc.n	80223a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 802239c:	68bb      	ldr	r3, [r7, #8]
 802239e:	2b00      	cmp	r3, #0
 80223a0:	d116      	bne.n	80223d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80223a2:	68fb      	ldr	r3, [r7, #12]
 80223a4:	2200      	movs	r2, #0
 80223a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80223a8:	68fb      	ldr	r3, [r7, #12]
 80223aa:	2220      	movs	r2, #32
 80223ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80223b0:	68fb      	ldr	r3, [r7, #12]
 80223b2:	2200      	movs	r2, #0
 80223b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80223b8:	68fb      	ldr	r3, [r7, #12]
 80223ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80223bc:	f043 0220 	orr.w	r2, r3, #32
 80223c0:	68fb      	ldr	r3, [r7, #12]
 80223c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80223c4:	68fb      	ldr	r3, [r7, #12]
 80223c6:	2200      	movs	r2, #0
 80223c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80223cc:	2301      	movs	r3, #1
 80223ce:	e007      	b.n	80223e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80223d0:	68fb      	ldr	r3, [r7, #12]
 80223d2:	681b      	ldr	r3, [r3, #0]
 80223d4:	695b      	ldr	r3, [r3, #20]
 80223d6:	f003 0304 	and.w	r3, r3, #4
 80223da:	2b04      	cmp	r3, #4
 80223dc:	d1ca      	bne.n	8022374 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80223de:	2300      	movs	r3, #0
}
 80223e0:	4618      	mov	r0, r3
 80223e2:	3710      	adds	r7, #16
 80223e4:	46bd      	mov	sp, r7
 80223e6:	bd80      	pop	{r7, pc}

080223e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80223e8:	b480      	push	{r7}
 80223ea:	b083      	sub	sp, #12
 80223ec:	af00      	add	r7, sp, #0
 80223ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80223f0:	687b      	ldr	r3, [r7, #4]
 80223f2:	681b      	ldr	r3, [r3, #0]
 80223f4:	695b      	ldr	r3, [r3, #20]
 80223f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80223fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80223fe:	d11b      	bne.n	8022438 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8022400:	687b      	ldr	r3, [r7, #4]
 8022402:	681b      	ldr	r3, [r3, #0]
 8022404:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8022408:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 802240a:	687b      	ldr	r3, [r7, #4]
 802240c:	2200      	movs	r2, #0
 802240e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8022410:	687b      	ldr	r3, [r7, #4]
 8022412:	2220      	movs	r2, #32
 8022414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8022418:	687b      	ldr	r3, [r7, #4]
 802241a:	2200      	movs	r2, #0
 802241c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8022420:	687b      	ldr	r3, [r7, #4]
 8022422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022424:	f043 0204 	orr.w	r2, r3, #4
 8022428:	687b      	ldr	r3, [r7, #4]
 802242a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802242c:	687b      	ldr	r3, [r7, #4]
 802242e:	2200      	movs	r2, #0
 8022430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8022434:	2301      	movs	r3, #1
 8022436:	e000      	b.n	802243a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8022438:	2300      	movs	r3, #0
}
 802243a:	4618      	mov	r0, r3
 802243c:	370c      	adds	r7, #12
 802243e:	46bd      	mov	sp, r7
 8022440:	bc80      	pop	{r7}
 8022442:	4770      	bx	lr

08022444 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8022444:	b580      	push	{r7, lr}
 8022446:	b086      	sub	sp, #24
 8022448:	af00      	add	r7, sp, #0
 802244a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 802244c:	687b      	ldr	r3, [r7, #4]
 802244e:	2b00      	cmp	r3, #0
 8022450:	d101      	bne.n	8022456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8022452:	2301      	movs	r3, #1
 8022454:	e26c      	b.n	8022930 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8022456:	687b      	ldr	r3, [r7, #4]
 8022458:	681b      	ldr	r3, [r3, #0]
 802245a:	f003 0301 	and.w	r3, r3, #1
 802245e:	2b00      	cmp	r3, #0
 8022460:	f000 8087 	beq.w	8022572 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8022464:	4b92      	ldr	r3, [pc, #584]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 8022466:	685b      	ldr	r3, [r3, #4]
 8022468:	f003 030c 	and.w	r3, r3, #12
 802246c:	2b04      	cmp	r3, #4
 802246e:	d00c      	beq.n	802248a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8022470:	4b8f      	ldr	r3, [pc, #572]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 8022472:	685b      	ldr	r3, [r3, #4]
 8022474:	f003 030c 	and.w	r3, r3, #12
 8022478:	2b08      	cmp	r3, #8
 802247a:	d112      	bne.n	80224a2 <HAL_RCC_OscConfig+0x5e>
 802247c:	4b8c      	ldr	r3, [pc, #560]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 802247e:	685b      	ldr	r3, [r3, #4]
 8022480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8022484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8022488:	d10b      	bne.n	80224a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802248a:	4b89      	ldr	r3, [pc, #548]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 802248c:	681b      	ldr	r3, [r3, #0]
 802248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8022492:	2b00      	cmp	r3, #0
 8022494:	d06c      	beq.n	8022570 <HAL_RCC_OscConfig+0x12c>
 8022496:	687b      	ldr	r3, [r7, #4]
 8022498:	685b      	ldr	r3, [r3, #4]
 802249a:	2b00      	cmp	r3, #0
 802249c:	d168      	bne.n	8022570 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 802249e:	2301      	movs	r3, #1
 80224a0:	e246      	b.n	8022930 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80224a2:	687b      	ldr	r3, [r7, #4]
 80224a4:	685b      	ldr	r3, [r3, #4]
 80224a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80224aa:	d106      	bne.n	80224ba <HAL_RCC_OscConfig+0x76>
 80224ac:	4b80      	ldr	r3, [pc, #512]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 80224ae:	681b      	ldr	r3, [r3, #0]
 80224b0:	4a7f      	ldr	r2, [pc, #508]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 80224b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80224b6:	6013      	str	r3, [r2, #0]
 80224b8:	e02e      	b.n	8022518 <HAL_RCC_OscConfig+0xd4>
 80224ba:	687b      	ldr	r3, [r7, #4]
 80224bc:	685b      	ldr	r3, [r3, #4]
 80224be:	2b00      	cmp	r3, #0
 80224c0:	d10c      	bne.n	80224dc <HAL_RCC_OscConfig+0x98>
 80224c2:	4b7b      	ldr	r3, [pc, #492]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 80224c4:	681b      	ldr	r3, [r3, #0]
 80224c6:	4a7a      	ldr	r2, [pc, #488]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 80224c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80224cc:	6013      	str	r3, [r2, #0]
 80224ce:	4b78      	ldr	r3, [pc, #480]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 80224d0:	681b      	ldr	r3, [r3, #0]
 80224d2:	4a77      	ldr	r2, [pc, #476]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 80224d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80224d8:	6013      	str	r3, [r2, #0]
 80224da:	e01d      	b.n	8022518 <HAL_RCC_OscConfig+0xd4>
 80224dc:	687b      	ldr	r3, [r7, #4]
 80224de:	685b      	ldr	r3, [r3, #4]
 80224e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80224e4:	d10c      	bne.n	8022500 <HAL_RCC_OscConfig+0xbc>
 80224e6:	4b72      	ldr	r3, [pc, #456]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 80224e8:	681b      	ldr	r3, [r3, #0]
 80224ea:	4a71      	ldr	r2, [pc, #452]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 80224ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80224f0:	6013      	str	r3, [r2, #0]
 80224f2:	4b6f      	ldr	r3, [pc, #444]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 80224f4:	681b      	ldr	r3, [r3, #0]
 80224f6:	4a6e      	ldr	r2, [pc, #440]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 80224f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80224fc:	6013      	str	r3, [r2, #0]
 80224fe:	e00b      	b.n	8022518 <HAL_RCC_OscConfig+0xd4>
 8022500:	4b6b      	ldr	r3, [pc, #428]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 8022502:	681b      	ldr	r3, [r3, #0]
 8022504:	4a6a      	ldr	r2, [pc, #424]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 8022506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802250a:	6013      	str	r3, [r2, #0]
 802250c:	4b68      	ldr	r3, [pc, #416]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 802250e:	681b      	ldr	r3, [r3, #0]
 8022510:	4a67      	ldr	r2, [pc, #412]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 8022512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8022516:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8022518:	687b      	ldr	r3, [r7, #4]
 802251a:	685b      	ldr	r3, [r3, #4]
 802251c:	2b00      	cmp	r3, #0
 802251e:	d013      	beq.n	8022548 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8022520:	f7fe fda8 	bl	8021074 <HAL_GetTick>
 8022524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8022526:	e008      	b.n	802253a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8022528:	f7fe fda4 	bl	8021074 <HAL_GetTick>
 802252c:	4602      	mov	r2, r0
 802252e:	693b      	ldr	r3, [r7, #16]
 8022530:	1ad3      	subs	r3, r2, r3
 8022532:	2b64      	cmp	r3, #100	; 0x64
 8022534:	d901      	bls.n	802253a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8022536:	2303      	movs	r3, #3
 8022538:	e1fa      	b.n	8022930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802253a:	4b5d      	ldr	r3, [pc, #372]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 802253c:	681b      	ldr	r3, [r3, #0]
 802253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8022542:	2b00      	cmp	r3, #0
 8022544:	d0f0      	beq.n	8022528 <HAL_RCC_OscConfig+0xe4>
 8022546:	e014      	b.n	8022572 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8022548:	f7fe fd94 	bl	8021074 <HAL_GetTick>
 802254c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802254e:	e008      	b.n	8022562 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8022550:	f7fe fd90 	bl	8021074 <HAL_GetTick>
 8022554:	4602      	mov	r2, r0
 8022556:	693b      	ldr	r3, [r7, #16]
 8022558:	1ad3      	subs	r3, r2, r3
 802255a:	2b64      	cmp	r3, #100	; 0x64
 802255c:	d901      	bls.n	8022562 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 802255e:	2303      	movs	r3, #3
 8022560:	e1e6      	b.n	8022930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8022562:	4b53      	ldr	r3, [pc, #332]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 8022564:	681b      	ldr	r3, [r3, #0]
 8022566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802256a:	2b00      	cmp	r3, #0
 802256c:	d1f0      	bne.n	8022550 <HAL_RCC_OscConfig+0x10c>
 802256e:	e000      	b.n	8022572 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8022570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8022572:	687b      	ldr	r3, [r7, #4]
 8022574:	681b      	ldr	r3, [r3, #0]
 8022576:	f003 0302 	and.w	r3, r3, #2
 802257a:	2b00      	cmp	r3, #0
 802257c:	d063      	beq.n	8022646 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 802257e:	4b4c      	ldr	r3, [pc, #304]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 8022580:	685b      	ldr	r3, [r3, #4]
 8022582:	f003 030c 	and.w	r3, r3, #12
 8022586:	2b00      	cmp	r3, #0
 8022588:	d00b      	beq.n	80225a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 802258a:	4b49      	ldr	r3, [pc, #292]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 802258c:	685b      	ldr	r3, [r3, #4]
 802258e:	f003 030c 	and.w	r3, r3, #12
 8022592:	2b08      	cmp	r3, #8
 8022594:	d11c      	bne.n	80225d0 <HAL_RCC_OscConfig+0x18c>
 8022596:	4b46      	ldr	r3, [pc, #280]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 8022598:	685b      	ldr	r3, [r3, #4]
 802259a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802259e:	2b00      	cmp	r3, #0
 80225a0:	d116      	bne.n	80225d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80225a2:	4b43      	ldr	r3, [pc, #268]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 80225a4:	681b      	ldr	r3, [r3, #0]
 80225a6:	f003 0302 	and.w	r3, r3, #2
 80225aa:	2b00      	cmp	r3, #0
 80225ac:	d005      	beq.n	80225ba <HAL_RCC_OscConfig+0x176>
 80225ae:	687b      	ldr	r3, [r7, #4]
 80225b0:	691b      	ldr	r3, [r3, #16]
 80225b2:	2b01      	cmp	r3, #1
 80225b4:	d001      	beq.n	80225ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80225b6:	2301      	movs	r3, #1
 80225b8:	e1ba      	b.n	8022930 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80225ba:	4b3d      	ldr	r3, [pc, #244]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 80225bc:	681b      	ldr	r3, [r3, #0]
 80225be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80225c2:	687b      	ldr	r3, [r7, #4]
 80225c4:	695b      	ldr	r3, [r3, #20]
 80225c6:	00db      	lsls	r3, r3, #3
 80225c8:	4939      	ldr	r1, [pc, #228]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 80225ca:	4313      	orrs	r3, r2
 80225cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80225ce:	e03a      	b.n	8022646 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80225d0:	687b      	ldr	r3, [r7, #4]
 80225d2:	691b      	ldr	r3, [r3, #16]
 80225d4:	2b00      	cmp	r3, #0
 80225d6:	d020      	beq.n	802261a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80225d8:	4b36      	ldr	r3, [pc, #216]	; (80226b4 <HAL_RCC_OscConfig+0x270>)
 80225da:	2201      	movs	r2, #1
 80225dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80225de:	f7fe fd49 	bl	8021074 <HAL_GetTick>
 80225e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80225e4:	e008      	b.n	80225f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80225e6:	f7fe fd45 	bl	8021074 <HAL_GetTick>
 80225ea:	4602      	mov	r2, r0
 80225ec:	693b      	ldr	r3, [r7, #16]
 80225ee:	1ad3      	subs	r3, r2, r3
 80225f0:	2b02      	cmp	r3, #2
 80225f2:	d901      	bls.n	80225f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80225f4:	2303      	movs	r3, #3
 80225f6:	e19b      	b.n	8022930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80225f8:	4b2d      	ldr	r3, [pc, #180]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 80225fa:	681b      	ldr	r3, [r3, #0]
 80225fc:	f003 0302 	and.w	r3, r3, #2
 8022600:	2b00      	cmp	r3, #0
 8022602:	d0f0      	beq.n	80225e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8022604:	4b2a      	ldr	r3, [pc, #168]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 8022606:	681b      	ldr	r3, [r3, #0]
 8022608:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802260c:	687b      	ldr	r3, [r7, #4]
 802260e:	695b      	ldr	r3, [r3, #20]
 8022610:	00db      	lsls	r3, r3, #3
 8022612:	4927      	ldr	r1, [pc, #156]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 8022614:	4313      	orrs	r3, r2
 8022616:	600b      	str	r3, [r1, #0]
 8022618:	e015      	b.n	8022646 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802261a:	4b26      	ldr	r3, [pc, #152]	; (80226b4 <HAL_RCC_OscConfig+0x270>)
 802261c:	2200      	movs	r2, #0
 802261e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8022620:	f7fe fd28 	bl	8021074 <HAL_GetTick>
 8022624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8022626:	e008      	b.n	802263a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8022628:	f7fe fd24 	bl	8021074 <HAL_GetTick>
 802262c:	4602      	mov	r2, r0
 802262e:	693b      	ldr	r3, [r7, #16]
 8022630:	1ad3      	subs	r3, r2, r3
 8022632:	2b02      	cmp	r3, #2
 8022634:	d901      	bls.n	802263a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8022636:	2303      	movs	r3, #3
 8022638:	e17a      	b.n	8022930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802263a:	4b1d      	ldr	r3, [pc, #116]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 802263c:	681b      	ldr	r3, [r3, #0]
 802263e:	f003 0302 	and.w	r3, r3, #2
 8022642:	2b00      	cmp	r3, #0
 8022644:	d1f0      	bne.n	8022628 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8022646:	687b      	ldr	r3, [r7, #4]
 8022648:	681b      	ldr	r3, [r3, #0]
 802264a:	f003 0308 	and.w	r3, r3, #8
 802264e:	2b00      	cmp	r3, #0
 8022650:	d03a      	beq.n	80226c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8022652:	687b      	ldr	r3, [r7, #4]
 8022654:	699b      	ldr	r3, [r3, #24]
 8022656:	2b00      	cmp	r3, #0
 8022658:	d019      	beq.n	802268e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802265a:	4b17      	ldr	r3, [pc, #92]	; (80226b8 <HAL_RCC_OscConfig+0x274>)
 802265c:	2201      	movs	r2, #1
 802265e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8022660:	f7fe fd08 	bl	8021074 <HAL_GetTick>
 8022664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8022666:	e008      	b.n	802267a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8022668:	f7fe fd04 	bl	8021074 <HAL_GetTick>
 802266c:	4602      	mov	r2, r0
 802266e:	693b      	ldr	r3, [r7, #16]
 8022670:	1ad3      	subs	r3, r2, r3
 8022672:	2b02      	cmp	r3, #2
 8022674:	d901      	bls.n	802267a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8022676:	2303      	movs	r3, #3
 8022678:	e15a      	b.n	8022930 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802267a:	4b0d      	ldr	r3, [pc, #52]	; (80226b0 <HAL_RCC_OscConfig+0x26c>)
 802267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802267e:	f003 0302 	and.w	r3, r3, #2
 8022682:	2b00      	cmp	r3, #0
 8022684:	d0f0      	beq.n	8022668 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8022686:	2001      	movs	r0, #1
 8022688:	f000 fad8 	bl	8022c3c <RCC_Delay>
 802268c:	e01c      	b.n	80226c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 802268e:	4b0a      	ldr	r3, [pc, #40]	; (80226b8 <HAL_RCC_OscConfig+0x274>)
 8022690:	2200      	movs	r2, #0
 8022692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8022694:	f7fe fcee 	bl	8021074 <HAL_GetTick>
 8022698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802269a:	e00f      	b.n	80226bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 802269c:	f7fe fcea 	bl	8021074 <HAL_GetTick>
 80226a0:	4602      	mov	r2, r0
 80226a2:	693b      	ldr	r3, [r7, #16]
 80226a4:	1ad3      	subs	r3, r2, r3
 80226a6:	2b02      	cmp	r3, #2
 80226a8:	d908      	bls.n	80226bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80226aa:	2303      	movs	r3, #3
 80226ac:	e140      	b.n	8022930 <HAL_RCC_OscConfig+0x4ec>
 80226ae:	bf00      	nop
 80226b0:	40021000 	.word	0x40021000
 80226b4:	42420000 	.word	0x42420000
 80226b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80226bc:	4b9e      	ldr	r3, [pc, #632]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 80226be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80226c0:	f003 0302 	and.w	r3, r3, #2
 80226c4:	2b00      	cmp	r3, #0
 80226c6:	d1e9      	bne.n	802269c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80226c8:	687b      	ldr	r3, [r7, #4]
 80226ca:	681b      	ldr	r3, [r3, #0]
 80226cc:	f003 0304 	and.w	r3, r3, #4
 80226d0:	2b00      	cmp	r3, #0
 80226d2:	f000 80a6 	beq.w	8022822 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80226d6:	2300      	movs	r3, #0
 80226d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80226da:	4b97      	ldr	r3, [pc, #604]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 80226dc:	69db      	ldr	r3, [r3, #28]
 80226de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80226e2:	2b00      	cmp	r3, #0
 80226e4:	d10d      	bne.n	8022702 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80226e6:	4b94      	ldr	r3, [pc, #592]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 80226e8:	69db      	ldr	r3, [r3, #28]
 80226ea:	4a93      	ldr	r2, [pc, #588]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 80226ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80226f0:	61d3      	str	r3, [r2, #28]
 80226f2:	4b91      	ldr	r3, [pc, #580]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 80226f4:	69db      	ldr	r3, [r3, #28]
 80226f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80226fa:	60bb      	str	r3, [r7, #8]
 80226fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80226fe:	2301      	movs	r3, #1
 8022700:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8022702:	4b8e      	ldr	r3, [pc, #568]	; (802293c <HAL_RCC_OscConfig+0x4f8>)
 8022704:	681b      	ldr	r3, [r3, #0]
 8022706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802270a:	2b00      	cmp	r3, #0
 802270c:	d118      	bne.n	8022740 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 802270e:	4b8b      	ldr	r3, [pc, #556]	; (802293c <HAL_RCC_OscConfig+0x4f8>)
 8022710:	681b      	ldr	r3, [r3, #0]
 8022712:	4a8a      	ldr	r2, [pc, #552]	; (802293c <HAL_RCC_OscConfig+0x4f8>)
 8022714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8022718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 802271a:	f7fe fcab 	bl	8021074 <HAL_GetTick>
 802271e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8022720:	e008      	b.n	8022734 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8022722:	f7fe fca7 	bl	8021074 <HAL_GetTick>
 8022726:	4602      	mov	r2, r0
 8022728:	693b      	ldr	r3, [r7, #16]
 802272a:	1ad3      	subs	r3, r2, r3
 802272c:	2b64      	cmp	r3, #100	; 0x64
 802272e:	d901      	bls.n	8022734 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8022730:	2303      	movs	r3, #3
 8022732:	e0fd      	b.n	8022930 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8022734:	4b81      	ldr	r3, [pc, #516]	; (802293c <HAL_RCC_OscConfig+0x4f8>)
 8022736:	681b      	ldr	r3, [r3, #0]
 8022738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802273c:	2b00      	cmp	r3, #0
 802273e:	d0f0      	beq.n	8022722 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8022740:	687b      	ldr	r3, [r7, #4]
 8022742:	68db      	ldr	r3, [r3, #12]
 8022744:	2b01      	cmp	r3, #1
 8022746:	d106      	bne.n	8022756 <HAL_RCC_OscConfig+0x312>
 8022748:	4b7b      	ldr	r3, [pc, #492]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 802274a:	6a1b      	ldr	r3, [r3, #32]
 802274c:	4a7a      	ldr	r2, [pc, #488]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 802274e:	f043 0301 	orr.w	r3, r3, #1
 8022752:	6213      	str	r3, [r2, #32]
 8022754:	e02d      	b.n	80227b2 <HAL_RCC_OscConfig+0x36e>
 8022756:	687b      	ldr	r3, [r7, #4]
 8022758:	68db      	ldr	r3, [r3, #12]
 802275a:	2b00      	cmp	r3, #0
 802275c:	d10c      	bne.n	8022778 <HAL_RCC_OscConfig+0x334>
 802275e:	4b76      	ldr	r3, [pc, #472]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 8022760:	6a1b      	ldr	r3, [r3, #32]
 8022762:	4a75      	ldr	r2, [pc, #468]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 8022764:	f023 0301 	bic.w	r3, r3, #1
 8022768:	6213      	str	r3, [r2, #32]
 802276a:	4b73      	ldr	r3, [pc, #460]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 802276c:	6a1b      	ldr	r3, [r3, #32]
 802276e:	4a72      	ldr	r2, [pc, #456]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 8022770:	f023 0304 	bic.w	r3, r3, #4
 8022774:	6213      	str	r3, [r2, #32]
 8022776:	e01c      	b.n	80227b2 <HAL_RCC_OscConfig+0x36e>
 8022778:	687b      	ldr	r3, [r7, #4]
 802277a:	68db      	ldr	r3, [r3, #12]
 802277c:	2b05      	cmp	r3, #5
 802277e:	d10c      	bne.n	802279a <HAL_RCC_OscConfig+0x356>
 8022780:	4b6d      	ldr	r3, [pc, #436]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 8022782:	6a1b      	ldr	r3, [r3, #32]
 8022784:	4a6c      	ldr	r2, [pc, #432]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 8022786:	f043 0304 	orr.w	r3, r3, #4
 802278a:	6213      	str	r3, [r2, #32]
 802278c:	4b6a      	ldr	r3, [pc, #424]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 802278e:	6a1b      	ldr	r3, [r3, #32]
 8022790:	4a69      	ldr	r2, [pc, #420]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 8022792:	f043 0301 	orr.w	r3, r3, #1
 8022796:	6213      	str	r3, [r2, #32]
 8022798:	e00b      	b.n	80227b2 <HAL_RCC_OscConfig+0x36e>
 802279a:	4b67      	ldr	r3, [pc, #412]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 802279c:	6a1b      	ldr	r3, [r3, #32]
 802279e:	4a66      	ldr	r2, [pc, #408]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 80227a0:	f023 0301 	bic.w	r3, r3, #1
 80227a4:	6213      	str	r3, [r2, #32]
 80227a6:	4b64      	ldr	r3, [pc, #400]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 80227a8:	6a1b      	ldr	r3, [r3, #32]
 80227aa:	4a63      	ldr	r2, [pc, #396]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 80227ac:	f023 0304 	bic.w	r3, r3, #4
 80227b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80227b2:	687b      	ldr	r3, [r7, #4]
 80227b4:	68db      	ldr	r3, [r3, #12]
 80227b6:	2b00      	cmp	r3, #0
 80227b8:	d015      	beq.n	80227e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80227ba:	f7fe fc5b 	bl	8021074 <HAL_GetTick>
 80227be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80227c0:	e00a      	b.n	80227d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80227c2:	f7fe fc57 	bl	8021074 <HAL_GetTick>
 80227c6:	4602      	mov	r2, r0
 80227c8:	693b      	ldr	r3, [r7, #16]
 80227ca:	1ad3      	subs	r3, r2, r3
 80227cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80227d0:	4293      	cmp	r3, r2
 80227d2:	d901      	bls.n	80227d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80227d4:	2303      	movs	r3, #3
 80227d6:	e0ab      	b.n	8022930 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80227d8:	4b57      	ldr	r3, [pc, #348]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 80227da:	6a1b      	ldr	r3, [r3, #32]
 80227dc:	f003 0302 	and.w	r3, r3, #2
 80227e0:	2b00      	cmp	r3, #0
 80227e2:	d0ee      	beq.n	80227c2 <HAL_RCC_OscConfig+0x37e>
 80227e4:	e014      	b.n	8022810 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80227e6:	f7fe fc45 	bl	8021074 <HAL_GetTick>
 80227ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80227ec:	e00a      	b.n	8022804 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80227ee:	f7fe fc41 	bl	8021074 <HAL_GetTick>
 80227f2:	4602      	mov	r2, r0
 80227f4:	693b      	ldr	r3, [r7, #16]
 80227f6:	1ad3      	subs	r3, r2, r3
 80227f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80227fc:	4293      	cmp	r3, r2
 80227fe:	d901      	bls.n	8022804 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8022800:	2303      	movs	r3, #3
 8022802:	e095      	b.n	8022930 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8022804:	4b4c      	ldr	r3, [pc, #304]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 8022806:	6a1b      	ldr	r3, [r3, #32]
 8022808:	f003 0302 	and.w	r3, r3, #2
 802280c:	2b00      	cmp	r3, #0
 802280e:	d1ee      	bne.n	80227ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8022810:	7dfb      	ldrb	r3, [r7, #23]
 8022812:	2b01      	cmp	r3, #1
 8022814:	d105      	bne.n	8022822 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8022816:	4b48      	ldr	r3, [pc, #288]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 8022818:	69db      	ldr	r3, [r3, #28]
 802281a:	4a47      	ldr	r2, [pc, #284]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 802281c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8022820:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8022822:	687b      	ldr	r3, [r7, #4]
 8022824:	69db      	ldr	r3, [r3, #28]
 8022826:	2b00      	cmp	r3, #0
 8022828:	f000 8081 	beq.w	802292e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 802282c:	4b42      	ldr	r3, [pc, #264]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 802282e:	685b      	ldr	r3, [r3, #4]
 8022830:	f003 030c 	and.w	r3, r3, #12
 8022834:	2b08      	cmp	r3, #8
 8022836:	d061      	beq.n	80228fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8022838:	687b      	ldr	r3, [r7, #4]
 802283a:	69db      	ldr	r3, [r3, #28]
 802283c:	2b02      	cmp	r3, #2
 802283e:	d146      	bne.n	80228ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8022840:	4b3f      	ldr	r3, [pc, #252]	; (8022940 <HAL_RCC_OscConfig+0x4fc>)
 8022842:	2200      	movs	r2, #0
 8022844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8022846:	f7fe fc15 	bl	8021074 <HAL_GetTick>
 802284a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 802284c:	e008      	b.n	8022860 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802284e:	f7fe fc11 	bl	8021074 <HAL_GetTick>
 8022852:	4602      	mov	r2, r0
 8022854:	693b      	ldr	r3, [r7, #16]
 8022856:	1ad3      	subs	r3, r2, r3
 8022858:	2b02      	cmp	r3, #2
 802285a:	d901      	bls.n	8022860 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 802285c:	2303      	movs	r3, #3
 802285e:	e067      	b.n	8022930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8022860:	4b35      	ldr	r3, [pc, #212]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 8022862:	681b      	ldr	r3, [r3, #0]
 8022864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8022868:	2b00      	cmp	r3, #0
 802286a:	d1f0      	bne.n	802284e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 802286c:	687b      	ldr	r3, [r7, #4]
 802286e:	6a1b      	ldr	r3, [r3, #32]
 8022870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8022874:	d108      	bne.n	8022888 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8022876:	4b30      	ldr	r3, [pc, #192]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 8022878:	685b      	ldr	r3, [r3, #4]
 802287a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 802287e:	687b      	ldr	r3, [r7, #4]
 8022880:	689b      	ldr	r3, [r3, #8]
 8022882:	492d      	ldr	r1, [pc, #180]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 8022884:	4313      	orrs	r3, r2
 8022886:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8022888:	4b2b      	ldr	r3, [pc, #172]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 802288a:	685b      	ldr	r3, [r3, #4]
 802288c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8022890:	687b      	ldr	r3, [r7, #4]
 8022892:	6a19      	ldr	r1, [r3, #32]
 8022894:	687b      	ldr	r3, [r7, #4]
 8022896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022898:	430b      	orrs	r3, r1
 802289a:	4927      	ldr	r1, [pc, #156]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 802289c:	4313      	orrs	r3, r2
 802289e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80228a0:	4b27      	ldr	r3, [pc, #156]	; (8022940 <HAL_RCC_OscConfig+0x4fc>)
 80228a2:	2201      	movs	r2, #1
 80228a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80228a6:	f7fe fbe5 	bl	8021074 <HAL_GetTick>
 80228aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80228ac:	e008      	b.n	80228c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80228ae:	f7fe fbe1 	bl	8021074 <HAL_GetTick>
 80228b2:	4602      	mov	r2, r0
 80228b4:	693b      	ldr	r3, [r7, #16]
 80228b6:	1ad3      	subs	r3, r2, r3
 80228b8:	2b02      	cmp	r3, #2
 80228ba:	d901      	bls.n	80228c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80228bc:	2303      	movs	r3, #3
 80228be:	e037      	b.n	8022930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80228c0:	4b1d      	ldr	r3, [pc, #116]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 80228c2:	681b      	ldr	r3, [r3, #0]
 80228c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80228c8:	2b00      	cmp	r3, #0
 80228ca:	d0f0      	beq.n	80228ae <HAL_RCC_OscConfig+0x46a>
 80228cc:	e02f      	b.n	802292e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80228ce:	4b1c      	ldr	r3, [pc, #112]	; (8022940 <HAL_RCC_OscConfig+0x4fc>)
 80228d0:	2200      	movs	r2, #0
 80228d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80228d4:	f7fe fbce 	bl	8021074 <HAL_GetTick>
 80228d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80228da:	e008      	b.n	80228ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80228dc:	f7fe fbca 	bl	8021074 <HAL_GetTick>
 80228e0:	4602      	mov	r2, r0
 80228e2:	693b      	ldr	r3, [r7, #16]
 80228e4:	1ad3      	subs	r3, r2, r3
 80228e6:	2b02      	cmp	r3, #2
 80228e8:	d901      	bls.n	80228ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80228ea:	2303      	movs	r3, #3
 80228ec:	e020      	b.n	8022930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80228ee:	4b12      	ldr	r3, [pc, #72]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 80228f0:	681b      	ldr	r3, [r3, #0]
 80228f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80228f6:	2b00      	cmp	r3, #0
 80228f8:	d1f0      	bne.n	80228dc <HAL_RCC_OscConfig+0x498>
 80228fa:	e018      	b.n	802292e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80228fc:	687b      	ldr	r3, [r7, #4]
 80228fe:	69db      	ldr	r3, [r3, #28]
 8022900:	2b01      	cmp	r3, #1
 8022902:	d101      	bne.n	8022908 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8022904:	2301      	movs	r3, #1
 8022906:	e013      	b.n	8022930 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8022908:	4b0b      	ldr	r3, [pc, #44]	; (8022938 <HAL_RCC_OscConfig+0x4f4>)
 802290a:	685b      	ldr	r3, [r3, #4]
 802290c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802290e:	68fb      	ldr	r3, [r7, #12]
 8022910:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8022914:	687b      	ldr	r3, [r7, #4]
 8022916:	6a1b      	ldr	r3, [r3, #32]
 8022918:	429a      	cmp	r2, r3
 802291a:	d106      	bne.n	802292a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 802291c:	68fb      	ldr	r3, [r7, #12]
 802291e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8022922:	687b      	ldr	r3, [r7, #4]
 8022924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8022926:	429a      	cmp	r2, r3
 8022928:	d001      	beq.n	802292e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 802292a:	2301      	movs	r3, #1
 802292c:	e000      	b.n	8022930 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 802292e:	2300      	movs	r3, #0
}
 8022930:	4618      	mov	r0, r3
 8022932:	3718      	adds	r7, #24
 8022934:	46bd      	mov	sp, r7
 8022936:	bd80      	pop	{r7, pc}
 8022938:	40021000 	.word	0x40021000
 802293c:	40007000 	.word	0x40007000
 8022940:	42420060 	.word	0x42420060

08022944 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8022944:	b580      	push	{r7, lr}
 8022946:	b084      	sub	sp, #16
 8022948:	af00      	add	r7, sp, #0
 802294a:	6078      	str	r0, [r7, #4]
 802294c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 802294e:	687b      	ldr	r3, [r7, #4]
 8022950:	2b00      	cmp	r3, #0
 8022952:	d101      	bne.n	8022958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8022954:	2301      	movs	r3, #1
 8022956:	e0d0      	b.n	8022afa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8022958:	4b6a      	ldr	r3, [pc, #424]	; (8022b04 <HAL_RCC_ClockConfig+0x1c0>)
 802295a:	681b      	ldr	r3, [r3, #0]
 802295c:	f003 0307 	and.w	r3, r3, #7
 8022960:	683a      	ldr	r2, [r7, #0]
 8022962:	429a      	cmp	r2, r3
 8022964:	d910      	bls.n	8022988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8022966:	4b67      	ldr	r3, [pc, #412]	; (8022b04 <HAL_RCC_ClockConfig+0x1c0>)
 8022968:	681b      	ldr	r3, [r3, #0]
 802296a:	f023 0207 	bic.w	r2, r3, #7
 802296e:	4965      	ldr	r1, [pc, #404]	; (8022b04 <HAL_RCC_ClockConfig+0x1c0>)
 8022970:	683b      	ldr	r3, [r7, #0]
 8022972:	4313      	orrs	r3, r2
 8022974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8022976:	4b63      	ldr	r3, [pc, #396]	; (8022b04 <HAL_RCC_ClockConfig+0x1c0>)
 8022978:	681b      	ldr	r3, [r3, #0]
 802297a:	f003 0307 	and.w	r3, r3, #7
 802297e:	683a      	ldr	r2, [r7, #0]
 8022980:	429a      	cmp	r2, r3
 8022982:	d001      	beq.n	8022988 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8022984:	2301      	movs	r3, #1
 8022986:	e0b8      	b.n	8022afa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8022988:	687b      	ldr	r3, [r7, #4]
 802298a:	681b      	ldr	r3, [r3, #0]
 802298c:	f003 0302 	and.w	r3, r3, #2
 8022990:	2b00      	cmp	r3, #0
 8022992:	d020      	beq.n	80229d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8022994:	687b      	ldr	r3, [r7, #4]
 8022996:	681b      	ldr	r3, [r3, #0]
 8022998:	f003 0304 	and.w	r3, r3, #4
 802299c:	2b00      	cmp	r3, #0
 802299e:	d005      	beq.n	80229ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80229a0:	4b59      	ldr	r3, [pc, #356]	; (8022b08 <HAL_RCC_ClockConfig+0x1c4>)
 80229a2:	685b      	ldr	r3, [r3, #4]
 80229a4:	4a58      	ldr	r2, [pc, #352]	; (8022b08 <HAL_RCC_ClockConfig+0x1c4>)
 80229a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80229aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80229ac:	687b      	ldr	r3, [r7, #4]
 80229ae:	681b      	ldr	r3, [r3, #0]
 80229b0:	f003 0308 	and.w	r3, r3, #8
 80229b4:	2b00      	cmp	r3, #0
 80229b6:	d005      	beq.n	80229c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80229b8:	4b53      	ldr	r3, [pc, #332]	; (8022b08 <HAL_RCC_ClockConfig+0x1c4>)
 80229ba:	685b      	ldr	r3, [r3, #4]
 80229bc:	4a52      	ldr	r2, [pc, #328]	; (8022b08 <HAL_RCC_ClockConfig+0x1c4>)
 80229be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80229c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80229c4:	4b50      	ldr	r3, [pc, #320]	; (8022b08 <HAL_RCC_ClockConfig+0x1c4>)
 80229c6:	685b      	ldr	r3, [r3, #4]
 80229c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80229cc:	687b      	ldr	r3, [r7, #4]
 80229ce:	689b      	ldr	r3, [r3, #8]
 80229d0:	494d      	ldr	r1, [pc, #308]	; (8022b08 <HAL_RCC_ClockConfig+0x1c4>)
 80229d2:	4313      	orrs	r3, r2
 80229d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80229d6:	687b      	ldr	r3, [r7, #4]
 80229d8:	681b      	ldr	r3, [r3, #0]
 80229da:	f003 0301 	and.w	r3, r3, #1
 80229de:	2b00      	cmp	r3, #0
 80229e0:	d040      	beq.n	8022a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80229e2:	687b      	ldr	r3, [r7, #4]
 80229e4:	685b      	ldr	r3, [r3, #4]
 80229e6:	2b01      	cmp	r3, #1
 80229e8:	d107      	bne.n	80229fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80229ea:	4b47      	ldr	r3, [pc, #284]	; (8022b08 <HAL_RCC_ClockConfig+0x1c4>)
 80229ec:	681b      	ldr	r3, [r3, #0]
 80229ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80229f2:	2b00      	cmp	r3, #0
 80229f4:	d115      	bne.n	8022a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80229f6:	2301      	movs	r3, #1
 80229f8:	e07f      	b.n	8022afa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80229fa:	687b      	ldr	r3, [r7, #4]
 80229fc:	685b      	ldr	r3, [r3, #4]
 80229fe:	2b02      	cmp	r3, #2
 8022a00:	d107      	bne.n	8022a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8022a02:	4b41      	ldr	r3, [pc, #260]	; (8022b08 <HAL_RCC_ClockConfig+0x1c4>)
 8022a04:	681b      	ldr	r3, [r3, #0]
 8022a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8022a0a:	2b00      	cmp	r3, #0
 8022a0c:	d109      	bne.n	8022a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8022a0e:	2301      	movs	r3, #1
 8022a10:	e073      	b.n	8022afa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8022a12:	4b3d      	ldr	r3, [pc, #244]	; (8022b08 <HAL_RCC_ClockConfig+0x1c4>)
 8022a14:	681b      	ldr	r3, [r3, #0]
 8022a16:	f003 0302 	and.w	r3, r3, #2
 8022a1a:	2b00      	cmp	r3, #0
 8022a1c:	d101      	bne.n	8022a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8022a1e:	2301      	movs	r3, #1
 8022a20:	e06b      	b.n	8022afa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8022a22:	4b39      	ldr	r3, [pc, #228]	; (8022b08 <HAL_RCC_ClockConfig+0x1c4>)
 8022a24:	685b      	ldr	r3, [r3, #4]
 8022a26:	f023 0203 	bic.w	r2, r3, #3
 8022a2a:	687b      	ldr	r3, [r7, #4]
 8022a2c:	685b      	ldr	r3, [r3, #4]
 8022a2e:	4936      	ldr	r1, [pc, #216]	; (8022b08 <HAL_RCC_ClockConfig+0x1c4>)
 8022a30:	4313      	orrs	r3, r2
 8022a32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8022a34:	f7fe fb1e 	bl	8021074 <HAL_GetTick>
 8022a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8022a3a:	e00a      	b.n	8022a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8022a3c:	f7fe fb1a 	bl	8021074 <HAL_GetTick>
 8022a40:	4602      	mov	r2, r0
 8022a42:	68fb      	ldr	r3, [r7, #12]
 8022a44:	1ad3      	subs	r3, r2, r3
 8022a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8022a4a:	4293      	cmp	r3, r2
 8022a4c:	d901      	bls.n	8022a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8022a4e:	2303      	movs	r3, #3
 8022a50:	e053      	b.n	8022afa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8022a52:	4b2d      	ldr	r3, [pc, #180]	; (8022b08 <HAL_RCC_ClockConfig+0x1c4>)
 8022a54:	685b      	ldr	r3, [r3, #4]
 8022a56:	f003 020c 	and.w	r2, r3, #12
 8022a5a:	687b      	ldr	r3, [r7, #4]
 8022a5c:	685b      	ldr	r3, [r3, #4]
 8022a5e:	009b      	lsls	r3, r3, #2
 8022a60:	429a      	cmp	r2, r3
 8022a62:	d1eb      	bne.n	8022a3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8022a64:	4b27      	ldr	r3, [pc, #156]	; (8022b04 <HAL_RCC_ClockConfig+0x1c0>)
 8022a66:	681b      	ldr	r3, [r3, #0]
 8022a68:	f003 0307 	and.w	r3, r3, #7
 8022a6c:	683a      	ldr	r2, [r7, #0]
 8022a6e:	429a      	cmp	r2, r3
 8022a70:	d210      	bcs.n	8022a94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8022a72:	4b24      	ldr	r3, [pc, #144]	; (8022b04 <HAL_RCC_ClockConfig+0x1c0>)
 8022a74:	681b      	ldr	r3, [r3, #0]
 8022a76:	f023 0207 	bic.w	r2, r3, #7
 8022a7a:	4922      	ldr	r1, [pc, #136]	; (8022b04 <HAL_RCC_ClockConfig+0x1c0>)
 8022a7c:	683b      	ldr	r3, [r7, #0]
 8022a7e:	4313      	orrs	r3, r2
 8022a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8022a82:	4b20      	ldr	r3, [pc, #128]	; (8022b04 <HAL_RCC_ClockConfig+0x1c0>)
 8022a84:	681b      	ldr	r3, [r3, #0]
 8022a86:	f003 0307 	and.w	r3, r3, #7
 8022a8a:	683a      	ldr	r2, [r7, #0]
 8022a8c:	429a      	cmp	r2, r3
 8022a8e:	d001      	beq.n	8022a94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8022a90:	2301      	movs	r3, #1
 8022a92:	e032      	b.n	8022afa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8022a94:	687b      	ldr	r3, [r7, #4]
 8022a96:	681b      	ldr	r3, [r3, #0]
 8022a98:	f003 0304 	and.w	r3, r3, #4
 8022a9c:	2b00      	cmp	r3, #0
 8022a9e:	d008      	beq.n	8022ab2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8022aa0:	4b19      	ldr	r3, [pc, #100]	; (8022b08 <HAL_RCC_ClockConfig+0x1c4>)
 8022aa2:	685b      	ldr	r3, [r3, #4]
 8022aa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8022aa8:	687b      	ldr	r3, [r7, #4]
 8022aaa:	68db      	ldr	r3, [r3, #12]
 8022aac:	4916      	ldr	r1, [pc, #88]	; (8022b08 <HAL_RCC_ClockConfig+0x1c4>)
 8022aae:	4313      	orrs	r3, r2
 8022ab0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8022ab2:	687b      	ldr	r3, [r7, #4]
 8022ab4:	681b      	ldr	r3, [r3, #0]
 8022ab6:	f003 0308 	and.w	r3, r3, #8
 8022aba:	2b00      	cmp	r3, #0
 8022abc:	d009      	beq.n	8022ad2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8022abe:	4b12      	ldr	r3, [pc, #72]	; (8022b08 <HAL_RCC_ClockConfig+0x1c4>)
 8022ac0:	685b      	ldr	r3, [r3, #4]
 8022ac2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8022ac6:	687b      	ldr	r3, [r7, #4]
 8022ac8:	691b      	ldr	r3, [r3, #16]
 8022aca:	00db      	lsls	r3, r3, #3
 8022acc:	490e      	ldr	r1, [pc, #56]	; (8022b08 <HAL_RCC_ClockConfig+0x1c4>)
 8022ace:	4313      	orrs	r3, r2
 8022ad0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8022ad2:	f000 f821 	bl	8022b18 <HAL_RCC_GetSysClockFreq>
 8022ad6:	4602      	mov	r2, r0
 8022ad8:	4b0b      	ldr	r3, [pc, #44]	; (8022b08 <HAL_RCC_ClockConfig+0x1c4>)
 8022ada:	685b      	ldr	r3, [r3, #4]
 8022adc:	091b      	lsrs	r3, r3, #4
 8022ade:	f003 030f 	and.w	r3, r3, #15
 8022ae2:	490a      	ldr	r1, [pc, #40]	; (8022b0c <HAL_RCC_ClockConfig+0x1c8>)
 8022ae4:	5ccb      	ldrb	r3, [r1, r3]
 8022ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8022aea:	4a09      	ldr	r2, [pc, #36]	; (8022b10 <HAL_RCC_ClockConfig+0x1cc>)
 8022aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8022aee:	4b09      	ldr	r3, [pc, #36]	; (8022b14 <HAL_RCC_ClockConfig+0x1d0>)
 8022af0:	681b      	ldr	r3, [r3, #0]
 8022af2:	4618      	mov	r0, r3
 8022af4:	f7fe fa7c 	bl	8020ff0 <HAL_InitTick>

  return HAL_OK;
 8022af8:	2300      	movs	r3, #0
}
 8022afa:	4618      	mov	r0, r3
 8022afc:	3710      	adds	r7, #16
 8022afe:	46bd      	mov	sp, r7
 8022b00:	bd80      	pop	{r7, pc}
 8022b02:	bf00      	nop
 8022b04:	40022000 	.word	0x40022000
 8022b08:	40021000 	.word	0x40021000
 8022b0c:	08025088 	.word	0x08025088
 8022b10:	200000fc 	.word	0x200000fc
 8022b14:	20000100 	.word	0x20000100

08022b18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8022b18:	b490      	push	{r4, r7}
 8022b1a:	b08a      	sub	sp, #40	; 0x28
 8022b1c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8022b1e:	4b2a      	ldr	r3, [pc, #168]	; (8022bc8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8022b20:	1d3c      	adds	r4, r7, #4
 8022b22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8022b24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8022b28:	f240 2301 	movw	r3, #513	; 0x201
 8022b2c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8022b2e:	2300      	movs	r3, #0
 8022b30:	61fb      	str	r3, [r7, #28]
 8022b32:	2300      	movs	r3, #0
 8022b34:	61bb      	str	r3, [r7, #24]
 8022b36:	2300      	movs	r3, #0
 8022b38:	627b      	str	r3, [r7, #36]	; 0x24
 8022b3a:	2300      	movs	r3, #0
 8022b3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8022b3e:	2300      	movs	r3, #0
 8022b40:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8022b42:	4b22      	ldr	r3, [pc, #136]	; (8022bcc <HAL_RCC_GetSysClockFreq+0xb4>)
 8022b44:	685b      	ldr	r3, [r3, #4]
 8022b46:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8022b48:	69fb      	ldr	r3, [r7, #28]
 8022b4a:	f003 030c 	and.w	r3, r3, #12
 8022b4e:	2b04      	cmp	r3, #4
 8022b50:	d002      	beq.n	8022b58 <HAL_RCC_GetSysClockFreq+0x40>
 8022b52:	2b08      	cmp	r3, #8
 8022b54:	d003      	beq.n	8022b5e <HAL_RCC_GetSysClockFreq+0x46>
 8022b56:	e02d      	b.n	8022bb4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8022b58:	4b1d      	ldr	r3, [pc, #116]	; (8022bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8022b5a:	623b      	str	r3, [r7, #32]
      break;
 8022b5c:	e02d      	b.n	8022bba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8022b5e:	69fb      	ldr	r3, [r7, #28]
 8022b60:	0c9b      	lsrs	r3, r3, #18
 8022b62:	f003 030f 	and.w	r3, r3, #15
 8022b66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8022b6a:	4413      	add	r3, r2
 8022b6c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8022b70:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8022b72:	69fb      	ldr	r3, [r7, #28]
 8022b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8022b78:	2b00      	cmp	r3, #0
 8022b7a:	d013      	beq.n	8022ba4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8022b7c:	4b13      	ldr	r3, [pc, #76]	; (8022bcc <HAL_RCC_GetSysClockFreq+0xb4>)
 8022b7e:	685b      	ldr	r3, [r3, #4]
 8022b80:	0c5b      	lsrs	r3, r3, #17
 8022b82:	f003 0301 	and.w	r3, r3, #1
 8022b86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8022b8a:	4413      	add	r3, r2
 8022b8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8022b90:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8022b92:	697b      	ldr	r3, [r7, #20]
 8022b94:	4a0e      	ldr	r2, [pc, #56]	; (8022bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8022b96:	fb02 f203 	mul.w	r2, r2, r3
 8022b9a:	69bb      	ldr	r3, [r7, #24]
 8022b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8022ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8022ba2:	e004      	b.n	8022bae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8022ba4:	697b      	ldr	r3, [r7, #20]
 8022ba6:	4a0b      	ldr	r2, [pc, #44]	; (8022bd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8022ba8:	fb02 f303 	mul.w	r3, r2, r3
 8022bac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8022bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022bb0:	623b      	str	r3, [r7, #32]
      break;
 8022bb2:	e002      	b.n	8022bba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8022bb4:	4b06      	ldr	r3, [pc, #24]	; (8022bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8022bb6:	623b      	str	r3, [r7, #32]
      break;
 8022bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8022bba:	6a3b      	ldr	r3, [r7, #32]
}
 8022bbc:	4618      	mov	r0, r3
 8022bbe:	3728      	adds	r7, #40	; 0x28
 8022bc0:	46bd      	mov	sp, r7
 8022bc2:	bc90      	pop	{r4, r7}
 8022bc4:	4770      	bx	lr
 8022bc6:	bf00      	nop
 8022bc8:	0802502c 	.word	0x0802502c
 8022bcc:	40021000 	.word	0x40021000
 8022bd0:	007a1200 	.word	0x007a1200
 8022bd4:	003d0900 	.word	0x003d0900

08022bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8022bd8:	b480      	push	{r7}
 8022bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8022bdc:	4b02      	ldr	r3, [pc, #8]	; (8022be8 <HAL_RCC_GetHCLKFreq+0x10>)
 8022bde:	681b      	ldr	r3, [r3, #0]
}
 8022be0:	4618      	mov	r0, r3
 8022be2:	46bd      	mov	sp, r7
 8022be4:	bc80      	pop	{r7}
 8022be6:	4770      	bx	lr
 8022be8:	200000fc 	.word	0x200000fc

08022bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8022bec:	b580      	push	{r7, lr}
 8022bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8022bf0:	f7ff fff2 	bl	8022bd8 <HAL_RCC_GetHCLKFreq>
 8022bf4:	4602      	mov	r2, r0
 8022bf6:	4b05      	ldr	r3, [pc, #20]	; (8022c0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8022bf8:	685b      	ldr	r3, [r3, #4]
 8022bfa:	0a1b      	lsrs	r3, r3, #8
 8022bfc:	f003 0307 	and.w	r3, r3, #7
 8022c00:	4903      	ldr	r1, [pc, #12]	; (8022c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8022c02:	5ccb      	ldrb	r3, [r1, r3]
 8022c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8022c08:	4618      	mov	r0, r3
 8022c0a:	bd80      	pop	{r7, pc}
 8022c0c:	40021000 	.word	0x40021000
 8022c10:	08025098 	.word	0x08025098

08022c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8022c14:	b580      	push	{r7, lr}
 8022c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8022c18:	f7ff ffde 	bl	8022bd8 <HAL_RCC_GetHCLKFreq>
 8022c1c:	4602      	mov	r2, r0
 8022c1e:	4b05      	ldr	r3, [pc, #20]	; (8022c34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8022c20:	685b      	ldr	r3, [r3, #4]
 8022c22:	0adb      	lsrs	r3, r3, #11
 8022c24:	f003 0307 	and.w	r3, r3, #7
 8022c28:	4903      	ldr	r1, [pc, #12]	; (8022c38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8022c2a:	5ccb      	ldrb	r3, [r1, r3]
 8022c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8022c30:	4618      	mov	r0, r3
 8022c32:	bd80      	pop	{r7, pc}
 8022c34:	40021000 	.word	0x40021000
 8022c38:	08025098 	.word	0x08025098

08022c3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8022c3c:	b480      	push	{r7}
 8022c3e:	b085      	sub	sp, #20
 8022c40:	af00      	add	r7, sp, #0
 8022c42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8022c44:	4b0a      	ldr	r3, [pc, #40]	; (8022c70 <RCC_Delay+0x34>)
 8022c46:	681b      	ldr	r3, [r3, #0]
 8022c48:	4a0a      	ldr	r2, [pc, #40]	; (8022c74 <RCC_Delay+0x38>)
 8022c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8022c4e:	0a5b      	lsrs	r3, r3, #9
 8022c50:	687a      	ldr	r2, [r7, #4]
 8022c52:	fb02 f303 	mul.w	r3, r2, r3
 8022c56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8022c58:	bf00      	nop
  }
  while (Delay --);
 8022c5a:	68fb      	ldr	r3, [r7, #12]
 8022c5c:	1e5a      	subs	r2, r3, #1
 8022c5e:	60fa      	str	r2, [r7, #12]
 8022c60:	2b00      	cmp	r3, #0
 8022c62:	d1f9      	bne.n	8022c58 <RCC_Delay+0x1c>
}
 8022c64:	bf00      	nop
 8022c66:	bf00      	nop
 8022c68:	3714      	adds	r7, #20
 8022c6a:	46bd      	mov	sp, r7
 8022c6c:	bc80      	pop	{r7}
 8022c6e:	4770      	bx	lr
 8022c70:	200000fc 	.word	0x200000fc
 8022c74:	10624dd3 	.word	0x10624dd3

08022c78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8022c78:	b580      	push	{r7, lr}
 8022c7a:	b082      	sub	sp, #8
 8022c7c:	af00      	add	r7, sp, #0
 8022c7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8022c80:	687b      	ldr	r3, [r7, #4]
 8022c82:	2b00      	cmp	r3, #0
 8022c84:	d101      	bne.n	8022c8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8022c86:	2301      	movs	r3, #1
 8022c88:	e076      	b.n	8022d78 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8022c8a:	687b      	ldr	r3, [r7, #4]
 8022c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022c8e:	2b00      	cmp	r3, #0
 8022c90:	d108      	bne.n	8022ca4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8022c92:	687b      	ldr	r3, [r7, #4]
 8022c94:	685b      	ldr	r3, [r3, #4]
 8022c96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8022c9a:	d009      	beq.n	8022cb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8022c9c:	687b      	ldr	r3, [r7, #4]
 8022c9e:	2200      	movs	r2, #0
 8022ca0:	61da      	str	r2, [r3, #28]
 8022ca2:	e005      	b.n	8022cb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8022ca4:	687b      	ldr	r3, [r7, #4]
 8022ca6:	2200      	movs	r2, #0
 8022ca8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8022caa:	687b      	ldr	r3, [r7, #4]
 8022cac:	2200      	movs	r2, #0
 8022cae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8022cb0:	687b      	ldr	r3, [r7, #4]
 8022cb2:	2200      	movs	r2, #0
 8022cb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8022cb6:	687b      	ldr	r3, [r7, #4]
 8022cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8022cbc:	b2db      	uxtb	r3, r3
 8022cbe:	2b00      	cmp	r3, #0
 8022cc0:	d106      	bne.n	8022cd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8022cc2:	687b      	ldr	r3, [r7, #4]
 8022cc4:	2200      	movs	r2, #0
 8022cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8022cca:	6878      	ldr	r0, [r7, #4]
 8022ccc:	f7fd ffde 	bl	8020c8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8022cd0:	687b      	ldr	r3, [r7, #4]
 8022cd2:	2202      	movs	r2, #2
 8022cd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8022cd8:	687b      	ldr	r3, [r7, #4]
 8022cda:	681b      	ldr	r3, [r3, #0]
 8022cdc:	681a      	ldr	r2, [r3, #0]
 8022cde:	687b      	ldr	r3, [r7, #4]
 8022ce0:	681b      	ldr	r3, [r3, #0]
 8022ce2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8022ce6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8022ce8:	687b      	ldr	r3, [r7, #4]
 8022cea:	685b      	ldr	r3, [r3, #4]
 8022cec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8022cf0:	687b      	ldr	r3, [r7, #4]
 8022cf2:	689b      	ldr	r3, [r3, #8]
 8022cf4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8022cf8:	431a      	orrs	r2, r3
 8022cfa:	687b      	ldr	r3, [r7, #4]
 8022cfc:	68db      	ldr	r3, [r3, #12]
 8022cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8022d02:	431a      	orrs	r2, r3
 8022d04:	687b      	ldr	r3, [r7, #4]
 8022d06:	691b      	ldr	r3, [r3, #16]
 8022d08:	f003 0302 	and.w	r3, r3, #2
 8022d0c:	431a      	orrs	r2, r3
 8022d0e:	687b      	ldr	r3, [r7, #4]
 8022d10:	695b      	ldr	r3, [r3, #20]
 8022d12:	f003 0301 	and.w	r3, r3, #1
 8022d16:	431a      	orrs	r2, r3
 8022d18:	687b      	ldr	r3, [r7, #4]
 8022d1a:	699b      	ldr	r3, [r3, #24]
 8022d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8022d20:	431a      	orrs	r2, r3
 8022d22:	687b      	ldr	r3, [r7, #4]
 8022d24:	69db      	ldr	r3, [r3, #28]
 8022d26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8022d2a:	431a      	orrs	r2, r3
 8022d2c:	687b      	ldr	r3, [r7, #4]
 8022d2e:	6a1b      	ldr	r3, [r3, #32]
 8022d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022d34:	ea42 0103 	orr.w	r1, r2, r3
 8022d38:	687b      	ldr	r3, [r7, #4]
 8022d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022d3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8022d40:	687b      	ldr	r3, [r7, #4]
 8022d42:	681b      	ldr	r3, [r3, #0]
 8022d44:	430a      	orrs	r2, r1
 8022d46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8022d48:	687b      	ldr	r3, [r7, #4]
 8022d4a:	699b      	ldr	r3, [r3, #24]
 8022d4c:	0c1a      	lsrs	r2, r3, #16
 8022d4e:	687b      	ldr	r3, [r7, #4]
 8022d50:	681b      	ldr	r3, [r3, #0]
 8022d52:	f002 0204 	and.w	r2, r2, #4
 8022d56:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8022d58:	687b      	ldr	r3, [r7, #4]
 8022d5a:	681b      	ldr	r3, [r3, #0]
 8022d5c:	69da      	ldr	r2, [r3, #28]
 8022d5e:	687b      	ldr	r3, [r7, #4]
 8022d60:	681b      	ldr	r3, [r3, #0]
 8022d62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8022d66:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8022d68:	687b      	ldr	r3, [r7, #4]
 8022d6a:	2200      	movs	r2, #0
 8022d6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8022d6e:	687b      	ldr	r3, [r7, #4]
 8022d70:	2201      	movs	r2, #1
 8022d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8022d76:	2300      	movs	r3, #0
}
 8022d78:	4618      	mov	r0, r3
 8022d7a:	3708      	adds	r7, #8
 8022d7c:	46bd      	mov	sp, r7
 8022d7e:	bd80      	pop	{r7, pc}

08022d80 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8022d80:	b580      	push	{r7, lr}
 8022d82:	b088      	sub	sp, #32
 8022d84:	af00      	add	r7, sp, #0
 8022d86:	60f8      	str	r0, [r7, #12]
 8022d88:	60b9      	str	r1, [r7, #8]
 8022d8a:	603b      	str	r3, [r7, #0]
 8022d8c:	4613      	mov	r3, r2
 8022d8e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8022d90:	2300      	movs	r3, #0
 8022d92:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8022d94:	68fb      	ldr	r3, [r7, #12]
 8022d96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8022d9a:	2b01      	cmp	r3, #1
 8022d9c:	d101      	bne.n	8022da2 <HAL_SPI_Transmit+0x22>
 8022d9e:	2302      	movs	r3, #2
 8022da0:	e126      	b.n	8022ff0 <HAL_SPI_Transmit+0x270>
 8022da2:	68fb      	ldr	r3, [r7, #12]
 8022da4:	2201      	movs	r2, #1
 8022da6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8022daa:	f7fe f963 	bl	8021074 <HAL_GetTick>
 8022dae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8022db0:	88fb      	ldrh	r3, [r7, #6]
 8022db2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8022db4:	68fb      	ldr	r3, [r7, #12]
 8022db6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8022dba:	b2db      	uxtb	r3, r3
 8022dbc:	2b01      	cmp	r3, #1
 8022dbe:	d002      	beq.n	8022dc6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8022dc0:	2302      	movs	r3, #2
 8022dc2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8022dc4:	e10b      	b.n	8022fde <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8022dc6:	68bb      	ldr	r3, [r7, #8]
 8022dc8:	2b00      	cmp	r3, #0
 8022dca:	d002      	beq.n	8022dd2 <HAL_SPI_Transmit+0x52>
 8022dcc:	88fb      	ldrh	r3, [r7, #6]
 8022dce:	2b00      	cmp	r3, #0
 8022dd0:	d102      	bne.n	8022dd8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8022dd2:	2301      	movs	r3, #1
 8022dd4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8022dd6:	e102      	b.n	8022fde <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8022dd8:	68fb      	ldr	r3, [r7, #12]
 8022dda:	2203      	movs	r2, #3
 8022ddc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8022de0:	68fb      	ldr	r3, [r7, #12]
 8022de2:	2200      	movs	r2, #0
 8022de4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8022de6:	68fb      	ldr	r3, [r7, #12]
 8022de8:	68ba      	ldr	r2, [r7, #8]
 8022dea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8022dec:	68fb      	ldr	r3, [r7, #12]
 8022dee:	88fa      	ldrh	r2, [r7, #6]
 8022df0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8022df2:	68fb      	ldr	r3, [r7, #12]
 8022df4:	88fa      	ldrh	r2, [r7, #6]
 8022df6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8022df8:	68fb      	ldr	r3, [r7, #12]
 8022dfa:	2200      	movs	r2, #0
 8022dfc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8022dfe:	68fb      	ldr	r3, [r7, #12]
 8022e00:	2200      	movs	r2, #0
 8022e02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8022e04:	68fb      	ldr	r3, [r7, #12]
 8022e06:	2200      	movs	r2, #0
 8022e08:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8022e0a:	68fb      	ldr	r3, [r7, #12]
 8022e0c:	2200      	movs	r2, #0
 8022e0e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8022e10:	68fb      	ldr	r3, [r7, #12]
 8022e12:	2200      	movs	r2, #0
 8022e14:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8022e16:	68fb      	ldr	r3, [r7, #12]
 8022e18:	689b      	ldr	r3, [r3, #8]
 8022e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8022e1e:	d10f      	bne.n	8022e40 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8022e20:	68fb      	ldr	r3, [r7, #12]
 8022e22:	681b      	ldr	r3, [r3, #0]
 8022e24:	681a      	ldr	r2, [r3, #0]
 8022e26:	68fb      	ldr	r3, [r7, #12]
 8022e28:	681b      	ldr	r3, [r3, #0]
 8022e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8022e2e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8022e30:	68fb      	ldr	r3, [r7, #12]
 8022e32:	681b      	ldr	r3, [r3, #0]
 8022e34:	681a      	ldr	r2, [r3, #0]
 8022e36:	68fb      	ldr	r3, [r7, #12]
 8022e38:	681b      	ldr	r3, [r3, #0]
 8022e3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8022e3e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8022e40:	68fb      	ldr	r3, [r7, #12]
 8022e42:	681b      	ldr	r3, [r3, #0]
 8022e44:	681b      	ldr	r3, [r3, #0]
 8022e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022e4a:	2b40      	cmp	r3, #64	; 0x40
 8022e4c:	d007      	beq.n	8022e5e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8022e4e:	68fb      	ldr	r3, [r7, #12]
 8022e50:	681b      	ldr	r3, [r3, #0]
 8022e52:	681a      	ldr	r2, [r3, #0]
 8022e54:	68fb      	ldr	r3, [r7, #12]
 8022e56:	681b      	ldr	r3, [r3, #0]
 8022e58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8022e5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8022e5e:	68fb      	ldr	r3, [r7, #12]
 8022e60:	68db      	ldr	r3, [r3, #12]
 8022e62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8022e66:	d14b      	bne.n	8022f00 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8022e68:	68fb      	ldr	r3, [r7, #12]
 8022e6a:	685b      	ldr	r3, [r3, #4]
 8022e6c:	2b00      	cmp	r3, #0
 8022e6e:	d002      	beq.n	8022e76 <HAL_SPI_Transmit+0xf6>
 8022e70:	8afb      	ldrh	r3, [r7, #22]
 8022e72:	2b01      	cmp	r3, #1
 8022e74:	d13e      	bne.n	8022ef4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8022e76:	68fb      	ldr	r3, [r7, #12]
 8022e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022e7a:	881a      	ldrh	r2, [r3, #0]
 8022e7c:	68fb      	ldr	r3, [r7, #12]
 8022e7e:	681b      	ldr	r3, [r3, #0]
 8022e80:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8022e82:	68fb      	ldr	r3, [r7, #12]
 8022e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022e86:	1c9a      	adds	r2, r3, #2
 8022e88:	68fb      	ldr	r3, [r7, #12]
 8022e8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8022e8c:	68fb      	ldr	r3, [r7, #12]
 8022e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8022e90:	b29b      	uxth	r3, r3
 8022e92:	3b01      	subs	r3, #1
 8022e94:	b29a      	uxth	r2, r3
 8022e96:	68fb      	ldr	r3, [r7, #12]
 8022e98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8022e9a:	e02b      	b.n	8022ef4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8022e9c:	68fb      	ldr	r3, [r7, #12]
 8022e9e:	681b      	ldr	r3, [r3, #0]
 8022ea0:	689b      	ldr	r3, [r3, #8]
 8022ea2:	f003 0302 	and.w	r3, r3, #2
 8022ea6:	2b02      	cmp	r3, #2
 8022ea8:	d112      	bne.n	8022ed0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8022eaa:	68fb      	ldr	r3, [r7, #12]
 8022eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022eae:	881a      	ldrh	r2, [r3, #0]
 8022eb0:	68fb      	ldr	r3, [r7, #12]
 8022eb2:	681b      	ldr	r3, [r3, #0]
 8022eb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8022eb6:	68fb      	ldr	r3, [r7, #12]
 8022eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022eba:	1c9a      	adds	r2, r3, #2
 8022ebc:	68fb      	ldr	r3, [r7, #12]
 8022ebe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8022ec0:	68fb      	ldr	r3, [r7, #12]
 8022ec2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8022ec4:	b29b      	uxth	r3, r3
 8022ec6:	3b01      	subs	r3, #1
 8022ec8:	b29a      	uxth	r2, r3
 8022eca:	68fb      	ldr	r3, [r7, #12]
 8022ecc:	86da      	strh	r2, [r3, #54]	; 0x36
 8022ece:	e011      	b.n	8022ef4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8022ed0:	f7fe f8d0 	bl	8021074 <HAL_GetTick>
 8022ed4:	4602      	mov	r2, r0
 8022ed6:	69bb      	ldr	r3, [r7, #24]
 8022ed8:	1ad3      	subs	r3, r2, r3
 8022eda:	683a      	ldr	r2, [r7, #0]
 8022edc:	429a      	cmp	r2, r3
 8022ede:	d803      	bhi.n	8022ee8 <HAL_SPI_Transmit+0x168>
 8022ee0:	683b      	ldr	r3, [r7, #0]
 8022ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022ee6:	d102      	bne.n	8022eee <HAL_SPI_Transmit+0x16e>
 8022ee8:	683b      	ldr	r3, [r7, #0]
 8022eea:	2b00      	cmp	r3, #0
 8022eec:	d102      	bne.n	8022ef4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8022eee:	2303      	movs	r3, #3
 8022ef0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8022ef2:	e074      	b.n	8022fde <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8022ef4:	68fb      	ldr	r3, [r7, #12]
 8022ef6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8022ef8:	b29b      	uxth	r3, r3
 8022efa:	2b00      	cmp	r3, #0
 8022efc:	d1ce      	bne.n	8022e9c <HAL_SPI_Transmit+0x11c>
 8022efe:	e04c      	b.n	8022f9a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8022f00:	68fb      	ldr	r3, [r7, #12]
 8022f02:	685b      	ldr	r3, [r3, #4]
 8022f04:	2b00      	cmp	r3, #0
 8022f06:	d002      	beq.n	8022f0e <HAL_SPI_Transmit+0x18e>
 8022f08:	8afb      	ldrh	r3, [r7, #22]
 8022f0a:	2b01      	cmp	r3, #1
 8022f0c:	d140      	bne.n	8022f90 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8022f0e:	68fb      	ldr	r3, [r7, #12]
 8022f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8022f12:	68fb      	ldr	r3, [r7, #12]
 8022f14:	681b      	ldr	r3, [r3, #0]
 8022f16:	330c      	adds	r3, #12
 8022f18:	7812      	ldrb	r2, [r2, #0]
 8022f1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8022f1c:	68fb      	ldr	r3, [r7, #12]
 8022f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f20:	1c5a      	adds	r2, r3, #1
 8022f22:	68fb      	ldr	r3, [r7, #12]
 8022f24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8022f26:	68fb      	ldr	r3, [r7, #12]
 8022f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8022f2a:	b29b      	uxth	r3, r3
 8022f2c:	3b01      	subs	r3, #1
 8022f2e:	b29a      	uxth	r2, r3
 8022f30:	68fb      	ldr	r3, [r7, #12]
 8022f32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8022f34:	e02c      	b.n	8022f90 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8022f36:	68fb      	ldr	r3, [r7, #12]
 8022f38:	681b      	ldr	r3, [r3, #0]
 8022f3a:	689b      	ldr	r3, [r3, #8]
 8022f3c:	f003 0302 	and.w	r3, r3, #2
 8022f40:	2b02      	cmp	r3, #2
 8022f42:	d113      	bne.n	8022f6c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8022f44:	68fb      	ldr	r3, [r7, #12]
 8022f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8022f48:	68fb      	ldr	r3, [r7, #12]
 8022f4a:	681b      	ldr	r3, [r3, #0]
 8022f4c:	330c      	adds	r3, #12
 8022f4e:	7812      	ldrb	r2, [r2, #0]
 8022f50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8022f52:	68fb      	ldr	r3, [r7, #12]
 8022f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f56:	1c5a      	adds	r2, r3, #1
 8022f58:	68fb      	ldr	r3, [r7, #12]
 8022f5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8022f5c:	68fb      	ldr	r3, [r7, #12]
 8022f5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8022f60:	b29b      	uxth	r3, r3
 8022f62:	3b01      	subs	r3, #1
 8022f64:	b29a      	uxth	r2, r3
 8022f66:	68fb      	ldr	r3, [r7, #12]
 8022f68:	86da      	strh	r2, [r3, #54]	; 0x36
 8022f6a:	e011      	b.n	8022f90 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8022f6c:	f7fe f882 	bl	8021074 <HAL_GetTick>
 8022f70:	4602      	mov	r2, r0
 8022f72:	69bb      	ldr	r3, [r7, #24]
 8022f74:	1ad3      	subs	r3, r2, r3
 8022f76:	683a      	ldr	r2, [r7, #0]
 8022f78:	429a      	cmp	r2, r3
 8022f7a:	d803      	bhi.n	8022f84 <HAL_SPI_Transmit+0x204>
 8022f7c:	683b      	ldr	r3, [r7, #0]
 8022f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022f82:	d102      	bne.n	8022f8a <HAL_SPI_Transmit+0x20a>
 8022f84:	683b      	ldr	r3, [r7, #0]
 8022f86:	2b00      	cmp	r3, #0
 8022f88:	d102      	bne.n	8022f90 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8022f8a:	2303      	movs	r3, #3
 8022f8c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8022f8e:	e026      	b.n	8022fde <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8022f90:	68fb      	ldr	r3, [r7, #12]
 8022f92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8022f94:	b29b      	uxth	r3, r3
 8022f96:	2b00      	cmp	r3, #0
 8022f98:	d1cd      	bne.n	8022f36 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8022f9a:	69ba      	ldr	r2, [r7, #24]
 8022f9c:	6839      	ldr	r1, [r7, #0]
 8022f9e:	68f8      	ldr	r0, [r7, #12]
 8022fa0:	f000 f8b2 	bl	8023108 <SPI_EndRxTxTransaction>
 8022fa4:	4603      	mov	r3, r0
 8022fa6:	2b00      	cmp	r3, #0
 8022fa8:	d002      	beq.n	8022fb0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8022faa:	68fb      	ldr	r3, [r7, #12]
 8022fac:	2220      	movs	r2, #32
 8022fae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8022fb0:	68fb      	ldr	r3, [r7, #12]
 8022fb2:	689b      	ldr	r3, [r3, #8]
 8022fb4:	2b00      	cmp	r3, #0
 8022fb6:	d10a      	bne.n	8022fce <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8022fb8:	2300      	movs	r3, #0
 8022fba:	613b      	str	r3, [r7, #16]
 8022fbc:	68fb      	ldr	r3, [r7, #12]
 8022fbe:	681b      	ldr	r3, [r3, #0]
 8022fc0:	68db      	ldr	r3, [r3, #12]
 8022fc2:	613b      	str	r3, [r7, #16]
 8022fc4:	68fb      	ldr	r3, [r7, #12]
 8022fc6:	681b      	ldr	r3, [r3, #0]
 8022fc8:	689b      	ldr	r3, [r3, #8]
 8022fca:	613b      	str	r3, [r7, #16]
 8022fcc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8022fce:	68fb      	ldr	r3, [r7, #12]
 8022fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8022fd2:	2b00      	cmp	r3, #0
 8022fd4:	d002      	beq.n	8022fdc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8022fd6:	2301      	movs	r3, #1
 8022fd8:	77fb      	strb	r3, [r7, #31]
 8022fda:	e000      	b.n	8022fde <HAL_SPI_Transmit+0x25e>
  }

error:
 8022fdc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8022fde:	68fb      	ldr	r3, [r7, #12]
 8022fe0:	2201      	movs	r2, #1
 8022fe2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8022fe6:	68fb      	ldr	r3, [r7, #12]
 8022fe8:	2200      	movs	r2, #0
 8022fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8022fee:	7ffb      	ldrb	r3, [r7, #31]
}
 8022ff0:	4618      	mov	r0, r3
 8022ff2:	3720      	adds	r7, #32
 8022ff4:	46bd      	mov	sp, r7
 8022ff6:	bd80      	pop	{r7, pc}

08022ff8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8022ff8:	b580      	push	{r7, lr}
 8022ffa:	b088      	sub	sp, #32
 8022ffc:	af00      	add	r7, sp, #0
 8022ffe:	60f8      	str	r0, [r7, #12]
 8023000:	60b9      	str	r1, [r7, #8]
 8023002:	603b      	str	r3, [r7, #0]
 8023004:	4613      	mov	r3, r2
 8023006:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8023008:	f7fe f834 	bl	8021074 <HAL_GetTick>
 802300c:	4602      	mov	r2, r0
 802300e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023010:	1a9b      	subs	r3, r3, r2
 8023012:	683a      	ldr	r2, [r7, #0]
 8023014:	4413      	add	r3, r2
 8023016:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8023018:	f7fe f82c 	bl	8021074 <HAL_GetTick>
 802301c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 802301e:	4b39      	ldr	r3, [pc, #228]	; (8023104 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8023020:	681b      	ldr	r3, [r3, #0]
 8023022:	015b      	lsls	r3, r3, #5
 8023024:	0d1b      	lsrs	r3, r3, #20
 8023026:	69fa      	ldr	r2, [r7, #28]
 8023028:	fb02 f303 	mul.w	r3, r2, r3
 802302c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802302e:	e054      	b.n	80230da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8023030:	683b      	ldr	r3, [r7, #0]
 8023032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023036:	d050      	beq.n	80230da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8023038:	f7fe f81c 	bl	8021074 <HAL_GetTick>
 802303c:	4602      	mov	r2, r0
 802303e:	69bb      	ldr	r3, [r7, #24]
 8023040:	1ad3      	subs	r3, r2, r3
 8023042:	69fa      	ldr	r2, [r7, #28]
 8023044:	429a      	cmp	r2, r3
 8023046:	d902      	bls.n	802304e <SPI_WaitFlagStateUntilTimeout+0x56>
 8023048:	69fb      	ldr	r3, [r7, #28]
 802304a:	2b00      	cmp	r3, #0
 802304c:	d13d      	bne.n	80230ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 802304e:	68fb      	ldr	r3, [r7, #12]
 8023050:	681b      	ldr	r3, [r3, #0]
 8023052:	685a      	ldr	r2, [r3, #4]
 8023054:	68fb      	ldr	r3, [r7, #12]
 8023056:	681b      	ldr	r3, [r3, #0]
 8023058:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 802305c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802305e:	68fb      	ldr	r3, [r7, #12]
 8023060:	685b      	ldr	r3, [r3, #4]
 8023062:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8023066:	d111      	bne.n	802308c <SPI_WaitFlagStateUntilTimeout+0x94>
 8023068:	68fb      	ldr	r3, [r7, #12]
 802306a:	689b      	ldr	r3, [r3, #8]
 802306c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8023070:	d004      	beq.n	802307c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8023072:	68fb      	ldr	r3, [r7, #12]
 8023074:	689b      	ldr	r3, [r3, #8]
 8023076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802307a:	d107      	bne.n	802308c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 802307c:	68fb      	ldr	r3, [r7, #12]
 802307e:	681b      	ldr	r3, [r3, #0]
 8023080:	681a      	ldr	r2, [r3, #0]
 8023082:	68fb      	ldr	r3, [r7, #12]
 8023084:	681b      	ldr	r3, [r3, #0]
 8023086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802308a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 802308c:	68fb      	ldr	r3, [r7, #12]
 802308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8023094:	d10f      	bne.n	80230b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8023096:	68fb      	ldr	r3, [r7, #12]
 8023098:	681b      	ldr	r3, [r3, #0]
 802309a:	681a      	ldr	r2, [r3, #0]
 802309c:	68fb      	ldr	r3, [r7, #12]
 802309e:	681b      	ldr	r3, [r3, #0]
 80230a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80230a4:	601a      	str	r2, [r3, #0]
 80230a6:	68fb      	ldr	r3, [r7, #12]
 80230a8:	681b      	ldr	r3, [r3, #0]
 80230aa:	681a      	ldr	r2, [r3, #0]
 80230ac:	68fb      	ldr	r3, [r7, #12]
 80230ae:	681b      	ldr	r3, [r3, #0]
 80230b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80230b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80230b6:	68fb      	ldr	r3, [r7, #12]
 80230b8:	2201      	movs	r2, #1
 80230ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80230be:	68fb      	ldr	r3, [r7, #12]
 80230c0:	2200      	movs	r2, #0
 80230c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80230c6:	2303      	movs	r3, #3
 80230c8:	e017      	b.n	80230fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80230ca:	697b      	ldr	r3, [r7, #20]
 80230cc:	2b00      	cmp	r3, #0
 80230ce:	d101      	bne.n	80230d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80230d0:	2300      	movs	r3, #0
 80230d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80230d4:	697b      	ldr	r3, [r7, #20]
 80230d6:	3b01      	subs	r3, #1
 80230d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80230da:	68fb      	ldr	r3, [r7, #12]
 80230dc:	681b      	ldr	r3, [r3, #0]
 80230de:	689a      	ldr	r2, [r3, #8]
 80230e0:	68bb      	ldr	r3, [r7, #8]
 80230e2:	4013      	ands	r3, r2
 80230e4:	68ba      	ldr	r2, [r7, #8]
 80230e6:	429a      	cmp	r2, r3
 80230e8:	bf0c      	ite	eq
 80230ea:	2301      	moveq	r3, #1
 80230ec:	2300      	movne	r3, #0
 80230ee:	b2db      	uxtb	r3, r3
 80230f0:	461a      	mov	r2, r3
 80230f2:	79fb      	ldrb	r3, [r7, #7]
 80230f4:	429a      	cmp	r2, r3
 80230f6:	d19b      	bne.n	8023030 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80230f8:	2300      	movs	r3, #0
}
 80230fa:	4618      	mov	r0, r3
 80230fc:	3720      	adds	r7, #32
 80230fe:	46bd      	mov	sp, r7
 8023100:	bd80      	pop	{r7, pc}
 8023102:	bf00      	nop
 8023104:	200000fc 	.word	0x200000fc

08023108 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8023108:	b580      	push	{r7, lr}
 802310a:	b086      	sub	sp, #24
 802310c:	af02      	add	r7, sp, #8
 802310e:	60f8      	str	r0, [r7, #12]
 8023110:	60b9      	str	r1, [r7, #8]
 8023112:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8023114:	687b      	ldr	r3, [r7, #4]
 8023116:	9300      	str	r3, [sp, #0]
 8023118:	68bb      	ldr	r3, [r7, #8]
 802311a:	2200      	movs	r2, #0
 802311c:	2180      	movs	r1, #128	; 0x80
 802311e:	68f8      	ldr	r0, [r7, #12]
 8023120:	f7ff ff6a 	bl	8022ff8 <SPI_WaitFlagStateUntilTimeout>
 8023124:	4603      	mov	r3, r0
 8023126:	2b00      	cmp	r3, #0
 8023128:	d007      	beq.n	802313a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802312a:	68fb      	ldr	r3, [r7, #12]
 802312c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802312e:	f043 0220 	orr.w	r2, r3, #32
 8023132:	68fb      	ldr	r3, [r7, #12]
 8023134:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8023136:	2303      	movs	r3, #3
 8023138:	e000      	b.n	802313c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 802313a:	2300      	movs	r3, #0
}
 802313c:	4618      	mov	r0, r3
 802313e:	3710      	adds	r7, #16
 8023140:	46bd      	mov	sp, r7
 8023142:	bd80      	pop	{r7, pc}

08023144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8023144:	b580      	push	{r7, lr}
 8023146:	b082      	sub	sp, #8
 8023148:	af00      	add	r7, sp, #0
 802314a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 802314c:	687b      	ldr	r3, [r7, #4]
 802314e:	2b00      	cmp	r3, #0
 8023150:	d101      	bne.n	8023156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8023152:	2301      	movs	r3, #1
 8023154:	e041      	b.n	80231da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8023156:	687b      	ldr	r3, [r7, #4]
 8023158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802315c:	b2db      	uxtb	r3, r3
 802315e:	2b00      	cmp	r3, #0
 8023160:	d106      	bne.n	8023170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8023162:	687b      	ldr	r3, [r7, #4]
 8023164:	2200      	movs	r2, #0
 8023166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 802316a:	6878      	ldr	r0, [r7, #4]
 802316c:	f7fd fdce 	bl	8020d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8023170:	687b      	ldr	r3, [r7, #4]
 8023172:	2202      	movs	r2, #2
 8023174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8023178:	687b      	ldr	r3, [r7, #4]
 802317a:	681a      	ldr	r2, [r3, #0]
 802317c:	687b      	ldr	r3, [r7, #4]
 802317e:	3304      	adds	r3, #4
 8023180:	4619      	mov	r1, r3
 8023182:	4610      	mov	r0, r2
 8023184:	f000 f9ba 	bl	80234fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8023188:	687b      	ldr	r3, [r7, #4]
 802318a:	2201      	movs	r2, #1
 802318c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8023190:	687b      	ldr	r3, [r7, #4]
 8023192:	2201      	movs	r2, #1
 8023194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8023198:	687b      	ldr	r3, [r7, #4]
 802319a:	2201      	movs	r2, #1
 802319c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80231a0:	687b      	ldr	r3, [r7, #4]
 80231a2:	2201      	movs	r2, #1
 80231a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80231a8:	687b      	ldr	r3, [r7, #4]
 80231aa:	2201      	movs	r2, #1
 80231ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80231b0:	687b      	ldr	r3, [r7, #4]
 80231b2:	2201      	movs	r2, #1
 80231b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80231b8:	687b      	ldr	r3, [r7, #4]
 80231ba:	2201      	movs	r2, #1
 80231bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80231c0:	687b      	ldr	r3, [r7, #4]
 80231c2:	2201      	movs	r2, #1
 80231c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80231c8:	687b      	ldr	r3, [r7, #4]
 80231ca:	2201      	movs	r2, #1
 80231cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80231d0:	687b      	ldr	r3, [r7, #4]
 80231d2:	2201      	movs	r2, #1
 80231d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80231d8:	2300      	movs	r3, #0
}
 80231da:	4618      	mov	r0, r3
 80231dc:	3708      	adds	r7, #8
 80231de:	46bd      	mov	sp, r7
 80231e0:	bd80      	pop	{r7, pc}
	...

080231e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80231e4:	b480      	push	{r7}
 80231e6:	b085      	sub	sp, #20
 80231e8:	af00      	add	r7, sp, #0
 80231ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80231ec:	687b      	ldr	r3, [r7, #4]
 80231ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80231f2:	b2db      	uxtb	r3, r3
 80231f4:	2b01      	cmp	r3, #1
 80231f6:	d001      	beq.n	80231fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80231f8:	2301      	movs	r3, #1
 80231fa:	e044      	b.n	8023286 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80231fc:	687b      	ldr	r3, [r7, #4]
 80231fe:	2202      	movs	r2, #2
 8023200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8023204:	687b      	ldr	r3, [r7, #4]
 8023206:	681b      	ldr	r3, [r3, #0]
 8023208:	68da      	ldr	r2, [r3, #12]
 802320a:	687b      	ldr	r3, [r7, #4]
 802320c:	681b      	ldr	r3, [r3, #0]
 802320e:	f042 0201 	orr.w	r2, r2, #1
 8023212:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8023214:	687b      	ldr	r3, [r7, #4]
 8023216:	681b      	ldr	r3, [r3, #0]
 8023218:	4a1d      	ldr	r2, [pc, #116]	; (8023290 <HAL_TIM_Base_Start_IT+0xac>)
 802321a:	4293      	cmp	r3, r2
 802321c:	d018      	beq.n	8023250 <HAL_TIM_Base_Start_IT+0x6c>
 802321e:	687b      	ldr	r3, [r7, #4]
 8023220:	681b      	ldr	r3, [r3, #0]
 8023222:	4a1c      	ldr	r2, [pc, #112]	; (8023294 <HAL_TIM_Base_Start_IT+0xb0>)
 8023224:	4293      	cmp	r3, r2
 8023226:	d013      	beq.n	8023250 <HAL_TIM_Base_Start_IT+0x6c>
 8023228:	687b      	ldr	r3, [r7, #4]
 802322a:	681b      	ldr	r3, [r3, #0]
 802322c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023230:	d00e      	beq.n	8023250 <HAL_TIM_Base_Start_IT+0x6c>
 8023232:	687b      	ldr	r3, [r7, #4]
 8023234:	681b      	ldr	r3, [r3, #0]
 8023236:	4a18      	ldr	r2, [pc, #96]	; (8023298 <HAL_TIM_Base_Start_IT+0xb4>)
 8023238:	4293      	cmp	r3, r2
 802323a:	d009      	beq.n	8023250 <HAL_TIM_Base_Start_IT+0x6c>
 802323c:	687b      	ldr	r3, [r7, #4]
 802323e:	681b      	ldr	r3, [r3, #0]
 8023240:	4a16      	ldr	r2, [pc, #88]	; (802329c <HAL_TIM_Base_Start_IT+0xb8>)
 8023242:	4293      	cmp	r3, r2
 8023244:	d004      	beq.n	8023250 <HAL_TIM_Base_Start_IT+0x6c>
 8023246:	687b      	ldr	r3, [r7, #4]
 8023248:	681b      	ldr	r3, [r3, #0]
 802324a:	4a15      	ldr	r2, [pc, #84]	; (80232a0 <HAL_TIM_Base_Start_IT+0xbc>)
 802324c:	4293      	cmp	r3, r2
 802324e:	d111      	bne.n	8023274 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8023250:	687b      	ldr	r3, [r7, #4]
 8023252:	681b      	ldr	r3, [r3, #0]
 8023254:	689b      	ldr	r3, [r3, #8]
 8023256:	f003 0307 	and.w	r3, r3, #7
 802325a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802325c:	68fb      	ldr	r3, [r7, #12]
 802325e:	2b06      	cmp	r3, #6
 8023260:	d010      	beq.n	8023284 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8023262:	687b      	ldr	r3, [r7, #4]
 8023264:	681b      	ldr	r3, [r3, #0]
 8023266:	681a      	ldr	r2, [r3, #0]
 8023268:	687b      	ldr	r3, [r7, #4]
 802326a:	681b      	ldr	r3, [r3, #0]
 802326c:	f042 0201 	orr.w	r2, r2, #1
 8023270:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8023272:	e007      	b.n	8023284 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8023274:	687b      	ldr	r3, [r7, #4]
 8023276:	681b      	ldr	r3, [r3, #0]
 8023278:	681a      	ldr	r2, [r3, #0]
 802327a:	687b      	ldr	r3, [r7, #4]
 802327c:	681b      	ldr	r3, [r3, #0]
 802327e:	f042 0201 	orr.w	r2, r2, #1
 8023282:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8023284:	2300      	movs	r3, #0
}
 8023286:	4618      	mov	r0, r3
 8023288:	3714      	adds	r7, #20
 802328a:	46bd      	mov	sp, r7
 802328c:	bc80      	pop	{r7}
 802328e:	4770      	bx	lr
 8023290:	40012c00 	.word	0x40012c00
 8023294:	40013400 	.word	0x40013400
 8023298:	40000400 	.word	0x40000400
 802329c:	40000800 	.word	0x40000800
 80232a0:	40000c00 	.word	0x40000c00

080232a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80232a4:	b580      	push	{r7, lr}
 80232a6:	b082      	sub	sp, #8
 80232a8:	af00      	add	r7, sp, #0
 80232aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80232ac:	687b      	ldr	r3, [r7, #4]
 80232ae:	681b      	ldr	r3, [r3, #0]
 80232b0:	691b      	ldr	r3, [r3, #16]
 80232b2:	f003 0302 	and.w	r3, r3, #2
 80232b6:	2b02      	cmp	r3, #2
 80232b8:	d122      	bne.n	8023300 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80232ba:	687b      	ldr	r3, [r7, #4]
 80232bc:	681b      	ldr	r3, [r3, #0]
 80232be:	68db      	ldr	r3, [r3, #12]
 80232c0:	f003 0302 	and.w	r3, r3, #2
 80232c4:	2b02      	cmp	r3, #2
 80232c6:	d11b      	bne.n	8023300 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80232c8:	687b      	ldr	r3, [r7, #4]
 80232ca:	681b      	ldr	r3, [r3, #0]
 80232cc:	f06f 0202 	mvn.w	r2, #2
 80232d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80232d2:	687b      	ldr	r3, [r7, #4]
 80232d4:	2201      	movs	r2, #1
 80232d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80232d8:	687b      	ldr	r3, [r7, #4]
 80232da:	681b      	ldr	r3, [r3, #0]
 80232dc:	699b      	ldr	r3, [r3, #24]
 80232de:	f003 0303 	and.w	r3, r3, #3
 80232e2:	2b00      	cmp	r3, #0
 80232e4:	d003      	beq.n	80232ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80232e6:	6878      	ldr	r0, [r7, #4]
 80232e8:	f000 f8ed 	bl	80234c6 <HAL_TIM_IC_CaptureCallback>
 80232ec:	e005      	b.n	80232fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80232ee:	6878      	ldr	r0, [r7, #4]
 80232f0:	f000 f8e0 	bl	80234b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80232f4:	6878      	ldr	r0, [r7, #4]
 80232f6:	f000 f8ef 	bl	80234d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80232fa:	687b      	ldr	r3, [r7, #4]
 80232fc:	2200      	movs	r2, #0
 80232fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8023300:	687b      	ldr	r3, [r7, #4]
 8023302:	681b      	ldr	r3, [r3, #0]
 8023304:	691b      	ldr	r3, [r3, #16]
 8023306:	f003 0304 	and.w	r3, r3, #4
 802330a:	2b04      	cmp	r3, #4
 802330c:	d122      	bne.n	8023354 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 802330e:	687b      	ldr	r3, [r7, #4]
 8023310:	681b      	ldr	r3, [r3, #0]
 8023312:	68db      	ldr	r3, [r3, #12]
 8023314:	f003 0304 	and.w	r3, r3, #4
 8023318:	2b04      	cmp	r3, #4
 802331a:	d11b      	bne.n	8023354 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 802331c:	687b      	ldr	r3, [r7, #4]
 802331e:	681b      	ldr	r3, [r3, #0]
 8023320:	f06f 0204 	mvn.w	r2, #4
 8023324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8023326:	687b      	ldr	r3, [r7, #4]
 8023328:	2202      	movs	r2, #2
 802332a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 802332c:	687b      	ldr	r3, [r7, #4]
 802332e:	681b      	ldr	r3, [r3, #0]
 8023330:	699b      	ldr	r3, [r3, #24]
 8023332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8023336:	2b00      	cmp	r3, #0
 8023338:	d003      	beq.n	8023342 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802333a:	6878      	ldr	r0, [r7, #4]
 802333c:	f000 f8c3 	bl	80234c6 <HAL_TIM_IC_CaptureCallback>
 8023340:	e005      	b.n	802334e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8023342:	6878      	ldr	r0, [r7, #4]
 8023344:	f000 f8b6 	bl	80234b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8023348:	6878      	ldr	r0, [r7, #4]
 802334a:	f000 f8c5 	bl	80234d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802334e:	687b      	ldr	r3, [r7, #4]
 8023350:	2200      	movs	r2, #0
 8023352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8023354:	687b      	ldr	r3, [r7, #4]
 8023356:	681b      	ldr	r3, [r3, #0]
 8023358:	691b      	ldr	r3, [r3, #16]
 802335a:	f003 0308 	and.w	r3, r3, #8
 802335e:	2b08      	cmp	r3, #8
 8023360:	d122      	bne.n	80233a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8023362:	687b      	ldr	r3, [r7, #4]
 8023364:	681b      	ldr	r3, [r3, #0]
 8023366:	68db      	ldr	r3, [r3, #12]
 8023368:	f003 0308 	and.w	r3, r3, #8
 802336c:	2b08      	cmp	r3, #8
 802336e:	d11b      	bne.n	80233a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8023370:	687b      	ldr	r3, [r7, #4]
 8023372:	681b      	ldr	r3, [r3, #0]
 8023374:	f06f 0208 	mvn.w	r2, #8
 8023378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 802337a:	687b      	ldr	r3, [r7, #4]
 802337c:	2204      	movs	r2, #4
 802337e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8023380:	687b      	ldr	r3, [r7, #4]
 8023382:	681b      	ldr	r3, [r3, #0]
 8023384:	69db      	ldr	r3, [r3, #28]
 8023386:	f003 0303 	and.w	r3, r3, #3
 802338a:	2b00      	cmp	r3, #0
 802338c:	d003      	beq.n	8023396 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802338e:	6878      	ldr	r0, [r7, #4]
 8023390:	f000 f899 	bl	80234c6 <HAL_TIM_IC_CaptureCallback>
 8023394:	e005      	b.n	80233a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8023396:	6878      	ldr	r0, [r7, #4]
 8023398:	f000 f88c 	bl	80234b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802339c:	6878      	ldr	r0, [r7, #4]
 802339e:	f000 f89b 	bl	80234d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80233a2:	687b      	ldr	r3, [r7, #4]
 80233a4:	2200      	movs	r2, #0
 80233a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80233a8:	687b      	ldr	r3, [r7, #4]
 80233aa:	681b      	ldr	r3, [r3, #0]
 80233ac:	691b      	ldr	r3, [r3, #16]
 80233ae:	f003 0310 	and.w	r3, r3, #16
 80233b2:	2b10      	cmp	r3, #16
 80233b4:	d122      	bne.n	80233fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80233b6:	687b      	ldr	r3, [r7, #4]
 80233b8:	681b      	ldr	r3, [r3, #0]
 80233ba:	68db      	ldr	r3, [r3, #12]
 80233bc:	f003 0310 	and.w	r3, r3, #16
 80233c0:	2b10      	cmp	r3, #16
 80233c2:	d11b      	bne.n	80233fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80233c4:	687b      	ldr	r3, [r7, #4]
 80233c6:	681b      	ldr	r3, [r3, #0]
 80233c8:	f06f 0210 	mvn.w	r2, #16
 80233cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80233ce:	687b      	ldr	r3, [r7, #4]
 80233d0:	2208      	movs	r2, #8
 80233d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80233d4:	687b      	ldr	r3, [r7, #4]
 80233d6:	681b      	ldr	r3, [r3, #0]
 80233d8:	69db      	ldr	r3, [r3, #28]
 80233da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80233de:	2b00      	cmp	r3, #0
 80233e0:	d003      	beq.n	80233ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80233e2:	6878      	ldr	r0, [r7, #4]
 80233e4:	f000 f86f 	bl	80234c6 <HAL_TIM_IC_CaptureCallback>
 80233e8:	e005      	b.n	80233f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80233ea:	6878      	ldr	r0, [r7, #4]
 80233ec:	f000 f862 	bl	80234b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80233f0:	6878      	ldr	r0, [r7, #4]
 80233f2:	f000 f871 	bl	80234d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80233f6:	687b      	ldr	r3, [r7, #4]
 80233f8:	2200      	movs	r2, #0
 80233fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80233fc:	687b      	ldr	r3, [r7, #4]
 80233fe:	681b      	ldr	r3, [r3, #0]
 8023400:	691b      	ldr	r3, [r3, #16]
 8023402:	f003 0301 	and.w	r3, r3, #1
 8023406:	2b01      	cmp	r3, #1
 8023408:	d10e      	bne.n	8023428 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 802340a:	687b      	ldr	r3, [r7, #4]
 802340c:	681b      	ldr	r3, [r3, #0]
 802340e:	68db      	ldr	r3, [r3, #12]
 8023410:	f003 0301 	and.w	r3, r3, #1
 8023414:	2b01      	cmp	r3, #1
 8023416:	d107      	bne.n	8023428 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8023418:	687b      	ldr	r3, [r7, #4]
 802341a:	681b      	ldr	r3, [r3, #0]
 802341c:	f06f 0201 	mvn.w	r2, #1
 8023420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8023422:	6878      	ldr	r0, [r7, #4]
 8023424:	f7fb fd1a 	bl	801ee5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8023428:	687b      	ldr	r3, [r7, #4]
 802342a:	681b      	ldr	r3, [r3, #0]
 802342c:	691b      	ldr	r3, [r3, #16]
 802342e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023432:	2b80      	cmp	r3, #128	; 0x80
 8023434:	d10e      	bne.n	8023454 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8023436:	687b      	ldr	r3, [r7, #4]
 8023438:	681b      	ldr	r3, [r3, #0]
 802343a:	68db      	ldr	r3, [r3, #12]
 802343c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023440:	2b80      	cmp	r3, #128	; 0x80
 8023442:	d107      	bne.n	8023454 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8023444:	687b      	ldr	r3, [r7, #4]
 8023446:	681b      	ldr	r3, [r3, #0]
 8023448:	f06f 0280 	mvn.w	r2, #128	; 0x80
 802344c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 802344e:	6878      	ldr	r0, [r7, #4]
 8023450:	f000 f8d7 	bl	8023602 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8023454:	687b      	ldr	r3, [r7, #4]
 8023456:	681b      	ldr	r3, [r3, #0]
 8023458:	691b      	ldr	r3, [r3, #16]
 802345a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802345e:	2b40      	cmp	r3, #64	; 0x40
 8023460:	d10e      	bne.n	8023480 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8023462:	687b      	ldr	r3, [r7, #4]
 8023464:	681b      	ldr	r3, [r3, #0]
 8023466:	68db      	ldr	r3, [r3, #12]
 8023468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802346c:	2b40      	cmp	r3, #64	; 0x40
 802346e:	d107      	bne.n	8023480 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8023470:	687b      	ldr	r3, [r7, #4]
 8023472:	681b      	ldr	r3, [r3, #0]
 8023474:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8023478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 802347a:	6878      	ldr	r0, [r7, #4]
 802347c:	f000 f835 	bl	80234ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8023480:	687b      	ldr	r3, [r7, #4]
 8023482:	681b      	ldr	r3, [r3, #0]
 8023484:	691b      	ldr	r3, [r3, #16]
 8023486:	f003 0320 	and.w	r3, r3, #32
 802348a:	2b20      	cmp	r3, #32
 802348c:	d10e      	bne.n	80234ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 802348e:	687b      	ldr	r3, [r7, #4]
 8023490:	681b      	ldr	r3, [r3, #0]
 8023492:	68db      	ldr	r3, [r3, #12]
 8023494:	f003 0320 	and.w	r3, r3, #32
 8023498:	2b20      	cmp	r3, #32
 802349a:	d107      	bne.n	80234ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 802349c:	687b      	ldr	r3, [r7, #4]
 802349e:	681b      	ldr	r3, [r3, #0]
 80234a0:	f06f 0220 	mvn.w	r2, #32
 80234a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80234a6:	6878      	ldr	r0, [r7, #4]
 80234a8:	f000 f8a2 	bl	80235f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80234ac:	bf00      	nop
 80234ae:	3708      	adds	r7, #8
 80234b0:	46bd      	mov	sp, r7
 80234b2:	bd80      	pop	{r7, pc}

080234b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80234b4:	b480      	push	{r7}
 80234b6:	b083      	sub	sp, #12
 80234b8:	af00      	add	r7, sp, #0
 80234ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80234bc:	bf00      	nop
 80234be:	370c      	adds	r7, #12
 80234c0:	46bd      	mov	sp, r7
 80234c2:	bc80      	pop	{r7}
 80234c4:	4770      	bx	lr

080234c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80234c6:	b480      	push	{r7}
 80234c8:	b083      	sub	sp, #12
 80234ca:	af00      	add	r7, sp, #0
 80234cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80234ce:	bf00      	nop
 80234d0:	370c      	adds	r7, #12
 80234d2:	46bd      	mov	sp, r7
 80234d4:	bc80      	pop	{r7}
 80234d6:	4770      	bx	lr

080234d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80234d8:	b480      	push	{r7}
 80234da:	b083      	sub	sp, #12
 80234dc:	af00      	add	r7, sp, #0
 80234de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80234e0:	bf00      	nop
 80234e2:	370c      	adds	r7, #12
 80234e4:	46bd      	mov	sp, r7
 80234e6:	bc80      	pop	{r7}
 80234e8:	4770      	bx	lr

080234ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80234ea:	b480      	push	{r7}
 80234ec:	b083      	sub	sp, #12
 80234ee:	af00      	add	r7, sp, #0
 80234f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80234f2:	bf00      	nop
 80234f4:	370c      	adds	r7, #12
 80234f6:	46bd      	mov	sp, r7
 80234f8:	bc80      	pop	{r7}
 80234fa:	4770      	bx	lr

080234fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80234fc:	b480      	push	{r7}
 80234fe:	b085      	sub	sp, #20
 8023500:	af00      	add	r7, sp, #0
 8023502:	6078      	str	r0, [r7, #4]
 8023504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8023506:	687b      	ldr	r3, [r7, #4]
 8023508:	681b      	ldr	r3, [r3, #0]
 802350a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 802350c:	687b      	ldr	r3, [r7, #4]
 802350e:	4a33      	ldr	r2, [pc, #204]	; (80235dc <TIM_Base_SetConfig+0xe0>)
 8023510:	4293      	cmp	r3, r2
 8023512:	d013      	beq.n	802353c <TIM_Base_SetConfig+0x40>
 8023514:	687b      	ldr	r3, [r7, #4]
 8023516:	4a32      	ldr	r2, [pc, #200]	; (80235e0 <TIM_Base_SetConfig+0xe4>)
 8023518:	4293      	cmp	r3, r2
 802351a:	d00f      	beq.n	802353c <TIM_Base_SetConfig+0x40>
 802351c:	687b      	ldr	r3, [r7, #4]
 802351e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023522:	d00b      	beq.n	802353c <TIM_Base_SetConfig+0x40>
 8023524:	687b      	ldr	r3, [r7, #4]
 8023526:	4a2f      	ldr	r2, [pc, #188]	; (80235e4 <TIM_Base_SetConfig+0xe8>)
 8023528:	4293      	cmp	r3, r2
 802352a:	d007      	beq.n	802353c <TIM_Base_SetConfig+0x40>
 802352c:	687b      	ldr	r3, [r7, #4]
 802352e:	4a2e      	ldr	r2, [pc, #184]	; (80235e8 <TIM_Base_SetConfig+0xec>)
 8023530:	4293      	cmp	r3, r2
 8023532:	d003      	beq.n	802353c <TIM_Base_SetConfig+0x40>
 8023534:	687b      	ldr	r3, [r7, #4]
 8023536:	4a2d      	ldr	r2, [pc, #180]	; (80235ec <TIM_Base_SetConfig+0xf0>)
 8023538:	4293      	cmp	r3, r2
 802353a:	d108      	bne.n	802354e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 802353c:	68fb      	ldr	r3, [r7, #12]
 802353e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8023542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8023544:	683b      	ldr	r3, [r7, #0]
 8023546:	685b      	ldr	r3, [r3, #4]
 8023548:	68fa      	ldr	r2, [r7, #12]
 802354a:	4313      	orrs	r3, r2
 802354c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802354e:	687b      	ldr	r3, [r7, #4]
 8023550:	4a22      	ldr	r2, [pc, #136]	; (80235dc <TIM_Base_SetConfig+0xe0>)
 8023552:	4293      	cmp	r3, r2
 8023554:	d013      	beq.n	802357e <TIM_Base_SetConfig+0x82>
 8023556:	687b      	ldr	r3, [r7, #4]
 8023558:	4a21      	ldr	r2, [pc, #132]	; (80235e0 <TIM_Base_SetConfig+0xe4>)
 802355a:	4293      	cmp	r3, r2
 802355c:	d00f      	beq.n	802357e <TIM_Base_SetConfig+0x82>
 802355e:	687b      	ldr	r3, [r7, #4]
 8023560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023564:	d00b      	beq.n	802357e <TIM_Base_SetConfig+0x82>
 8023566:	687b      	ldr	r3, [r7, #4]
 8023568:	4a1e      	ldr	r2, [pc, #120]	; (80235e4 <TIM_Base_SetConfig+0xe8>)
 802356a:	4293      	cmp	r3, r2
 802356c:	d007      	beq.n	802357e <TIM_Base_SetConfig+0x82>
 802356e:	687b      	ldr	r3, [r7, #4]
 8023570:	4a1d      	ldr	r2, [pc, #116]	; (80235e8 <TIM_Base_SetConfig+0xec>)
 8023572:	4293      	cmp	r3, r2
 8023574:	d003      	beq.n	802357e <TIM_Base_SetConfig+0x82>
 8023576:	687b      	ldr	r3, [r7, #4]
 8023578:	4a1c      	ldr	r2, [pc, #112]	; (80235ec <TIM_Base_SetConfig+0xf0>)
 802357a:	4293      	cmp	r3, r2
 802357c:	d108      	bne.n	8023590 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 802357e:	68fb      	ldr	r3, [r7, #12]
 8023580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8023584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8023586:	683b      	ldr	r3, [r7, #0]
 8023588:	68db      	ldr	r3, [r3, #12]
 802358a:	68fa      	ldr	r2, [r7, #12]
 802358c:	4313      	orrs	r3, r2
 802358e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8023590:	68fb      	ldr	r3, [r7, #12]
 8023592:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8023596:	683b      	ldr	r3, [r7, #0]
 8023598:	695b      	ldr	r3, [r3, #20]
 802359a:	4313      	orrs	r3, r2
 802359c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802359e:	687b      	ldr	r3, [r7, #4]
 80235a0:	68fa      	ldr	r2, [r7, #12]
 80235a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80235a4:	683b      	ldr	r3, [r7, #0]
 80235a6:	689a      	ldr	r2, [r3, #8]
 80235a8:	687b      	ldr	r3, [r7, #4]
 80235aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80235ac:	683b      	ldr	r3, [r7, #0]
 80235ae:	681a      	ldr	r2, [r3, #0]
 80235b0:	687b      	ldr	r3, [r7, #4]
 80235b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80235b4:	687b      	ldr	r3, [r7, #4]
 80235b6:	4a09      	ldr	r2, [pc, #36]	; (80235dc <TIM_Base_SetConfig+0xe0>)
 80235b8:	4293      	cmp	r3, r2
 80235ba:	d003      	beq.n	80235c4 <TIM_Base_SetConfig+0xc8>
 80235bc:	687b      	ldr	r3, [r7, #4]
 80235be:	4a08      	ldr	r2, [pc, #32]	; (80235e0 <TIM_Base_SetConfig+0xe4>)
 80235c0:	4293      	cmp	r3, r2
 80235c2:	d103      	bne.n	80235cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80235c4:	683b      	ldr	r3, [r7, #0]
 80235c6:	691a      	ldr	r2, [r3, #16]
 80235c8:	687b      	ldr	r3, [r7, #4]
 80235ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80235cc:	687b      	ldr	r3, [r7, #4]
 80235ce:	2201      	movs	r2, #1
 80235d0:	615a      	str	r2, [r3, #20]
}
 80235d2:	bf00      	nop
 80235d4:	3714      	adds	r7, #20
 80235d6:	46bd      	mov	sp, r7
 80235d8:	bc80      	pop	{r7}
 80235da:	4770      	bx	lr
 80235dc:	40012c00 	.word	0x40012c00
 80235e0:	40013400 	.word	0x40013400
 80235e4:	40000400 	.word	0x40000400
 80235e8:	40000800 	.word	0x40000800
 80235ec:	40000c00 	.word	0x40000c00

080235f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80235f0:	b480      	push	{r7}
 80235f2:	b083      	sub	sp, #12
 80235f4:	af00      	add	r7, sp, #0
 80235f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80235f8:	bf00      	nop
 80235fa:	370c      	adds	r7, #12
 80235fc:	46bd      	mov	sp, r7
 80235fe:	bc80      	pop	{r7}
 8023600:	4770      	bx	lr

08023602 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8023602:	b480      	push	{r7}
 8023604:	b083      	sub	sp, #12
 8023606:	af00      	add	r7, sp, #0
 8023608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 802360a:	bf00      	nop
 802360c:	370c      	adds	r7, #12
 802360e:	46bd      	mov	sp, r7
 8023610:	bc80      	pop	{r7}
 8023612:	4770      	bx	lr

08023614 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8023614:	b580      	push	{r7, lr}
 8023616:	b082      	sub	sp, #8
 8023618:	af00      	add	r7, sp, #0
 802361a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802361c:	687b      	ldr	r3, [r7, #4]
 802361e:	2b00      	cmp	r3, #0
 8023620:	d101      	bne.n	8023626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8023622:	2301      	movs	r3, #1
 8023624:	e03f      	b.n	80236a6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8023626:	687b      	ldr	r3, [r7, #4]
 8023628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802362c:	b2db      	uxtb	r3, r3
 802362e:	2b00      	cmp	r3, #0
 8023630:	d106      	bne.n	8023640 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8023632:	687b      	ldr	r3, [r7, #4]
 8023634:	2200      	movs	r2, #0
 8023636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802363a:	6878      	ldr	r0, [r7, #4]
 802363c:	f7fd fb8c 	bl	8020d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8023640:	687b      	ldr	r3, [r7, #4]
 8023642:	2224      	movs	r2, #36	; 0x24
 8023644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8023648:	687b      	ldr	r3, [r7, #4]
 802364a:	681b      	ldr	r3, [r3, #0]
 802364c:	68da      	ldr	r2, [r3, #12]
 802364e:	687b      	ldr	r3, [r7, #4]
 8023650:	681b      	ldr	r3, [r3, #0]
 8023652:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8023656:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8023658:	6878      	ldr	r0, [r7, #4]
 802365a:	f000 fcc1 	bl	8023fe0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802365e:	687b      	ldr	r3, [r7, #4]
 8023660:	681b      	ldr	r3, [r3, #0]
 8023662:	691a      	ldr	r2, [r3, #16]
 8023664:	687b      	ldr	r3, [r7, #4]
 8023666:	681b      	ldr	r3, [r3, #0]
 8023668:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 802366c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802366e:	687b      	ldr	r3, [r7, #4]
 8023670:	681b      	ldr	r3, [r3, #0]
 8023672:	695a      	ldr	r2, [r3, #20]
 8023674:	687b      	ldr	r3, [r7, #4]
 8023676:	681b      	ldr	r3, [r3, #0]
 8023678:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 802367c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 802367e:	687b      	ldr	r3, [r7, #4]
 8023680:	681b      	ldr	r3, [r3, #0]
 8023682:	68da      	ldr	r2, [r3, #12]
 8023684:	687b      	ldr	r3, [r7, #4]
 8023686:	681b      	ldr	r3, [r3, #0]
 8023688:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802368c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802368e:	687b      	ldr	r3, [r7, #4]
 8023690:	2200      	movs	r2, #0
 8023692:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8023694:	687b      	ldr	r3, [r7, #4]
 8023696:	2220      	movs	r2, #32
 8023698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 802369c:	687b      	ldr	r3, [r7, #4]
 802369e:	2220      	movs	r2, #32
 80236a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80236a4:	2300      	movs	r3, #0
}
 80236a6:	4618      	mov	r0, r3
 80236a8:	3708      	adds	r7, #8
 80236aa:	46bd      	mov	sp, r7
 80236ac:	bd80      	pop	{r7, pc}

080236ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80236ae:	b580      	push	{r7, lr}
 80236b0:	b08a      	sub	sp, #40	; 0x28
 80236b2:	af02      	add	r7, sp, #8
 80236b4:	60f8      	str	r0, [r7, #12]
 80236b6:	60b9      	str	r1, [r7, #8]
 80236b8:	603b      	str	r3, [r7, #0]
 80236ba:	4613      	mov	r3, r2
 80236bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80236be:	2300      	movs	r3, #0
 80236c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80236c2:	68fb      	ldr	r3, [r7, #12]
 80236c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80236c8:	b2db      	uxtb	r3, r3
 80236ca:	2b20      	cmp	r3, #32
 80236cc:	d17c      	bne.n	80237c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80236ce:	68bb      	ldr	r3, [r7, #8]
 80236d0:	2b00      	cmp	r3, #0
 80236d2:	d002      	beq.n	80236da <HAL_UART_Transmit+0x2c>
 80236d4:	88fb      	ldrh	r3, [r7, #6]
 80236d6:	2b00      	cmp	r3, #0
 80236d8:	d101      	bne.n	80236de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80236da:	2301      	movs	r3, #1
 80236dc:	e075      	b.n	80237ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80236de:	68fb      	ldr	r3, [r7, #12]
 80236e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80236e4:	2b01      	cmp	r3, #1
 80236e6:	d101      	bne.n	80236ec <HAL_UART_Transmit+0x3e>
 80236e8:	2302      	movs	r3, #2
 80236ea:	e06e      	b.n	80237ca <HAL_UART_Transmit+0x11c>
 80236ec:	68fb      	ldr	r3, [r7, #12]
 80236ee:	2201      	movs	r2, #1
 80236f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80236f4:	68fb      	ldr	r3, [r7, #12]
 80236f6:	2200      	movs	r2, #0
 80236f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80236fa:	68fb      	ldr	r3, [r7, #12]
 80236fc:	2221      	movs	r2, #33	; 0x21
 80236fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8023702:	f7fd fcb7 	bl	8021074 <HAL_GetTick>
 8023706:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8023708:	68fb      	ldr	r3, [r7, #12]
 802370a:	88fa      	ldrh	r2, [r7, #6]
 802370c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 802370e:	68fb      	ldr	r3, [r7, #12]
 8023710:	88fa      	ldrh	r2, [r7, #6]
 8023712:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8023714:	68fb      	ldr	r3, [r7, #12]
 8023716:	689b      	ldr	r3, [r3, #8]
 8023718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802371c:	d108      	bne.n	8023730 <HAL_UART_Transmit+0x82>
 802371e:	68fb      	ldr	r3, [r7, #12]
 8023720:	691b      	ldr	r3, [r3, #16]
 8023722:	2b00      	cmp	r3, #0
 8023724:	d104      	bne.n	8023730 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8023726:	2300      	movs	r3, #0
 8023728:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 802372a:	68bb      	ldr	r3, [r7, #8]
 802372c:	61bb      	str	r3, [r7, #24]
 802372e:	e003      	b.n	8023738 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8023730:	68bb      	ldr	r3, [r7, #8]
 8023732:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8023734:	2300      	movs	r3, #0
 8023736:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8023738:	68fb      	ldr	r3, [r7, #12]
 802373a:	2200      	movs	r2, #0
 802373c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8023740:	e02a      	b.n	8023798 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8023742:	683b      	ldr	r3, [r7, #0]
 8023744:	9300      	str	r3, [sp, #0]
 8023746:	697b      	ldr	r3, [r7, #20]
 8023748:	2200      	movs	r2, #0
 802374a:	2180      	movs	r1, #128	; 0x80
 802374c:	68f8      	ldr	r0, [r7, #12]
 802374e:	f000 fa73 	bl	8023c38 <UART_WaitOnFlagUntilTimeout>
 8023752:	4603      	mov	r3, r0
 8023754:	2b00      	cmp	r3, #0
 8023756:	d001      	beq.n	802375c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8023758:	2303      	movs	r3, #3
 802375a:	e036      	b.n	80237ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 802375c:	69fb      	ldr	r3, [r7, #28]
 802375e:	2b00      	cmp	r3, #0
 8023760:	d10b      	bne.n	802377a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8023762:	69bb      	ldr	r3, [r7, #24]
 8023764:	881b      	ldrh	r3, [r3, #0]
 8023766:	461a      	mov	r2, r3
 8023768:	68fb      	ldr	r3, [r7, #12]
 802376a:	681b      	ldr	r3, [r3, #0]
 802376c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8023770:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8023772:	69bb      	ldr	r3, [r7, #24]
 8023774:	3302      	adds	r3, #2
 8023776:	61bb      	str	r3, [r7, #24]
 8023778:	e007      	b.n	802378a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 802377a:	69fb      	ldr	r3, [r7, #28]
 802377c:	781a      	ldrb	r2, [r3, #0]
 802377e:	68fb      	ldr	r3, [r7, #12]
 8023780:	681b      	ldr	r3, [r3, #0]
 8023782:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8023784:	69fb      	ldr	r3, [r7, #28]
 8023786:	3301      	adds	r3, #1
 8023788:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 802378a:	68fb      	ldr	r3, [r7, #12]
 802378c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802378e:	b29b      	uxth	r3, r3
 8023790:	3b01      	subs	r3, #1
 8023792:	b29a      	uxth	r2, r3
 8023794:	68fb      	ldr	r3, [r7, #12]
 8023796:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8023798:	68fb      	ldr	r3, [r7, #12]
 802379a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802379c:	b29b      	uxth	r3, r3
 802379e:	2b00      	cmp	r3, #0
 80237a0:	d1cf      	bne.n	8023742 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80237a2:	683b      	ldr	r3, [r7, #0]
 80237a4:	9300      	str	r3, [sp, #0]
 80237a6:	697b      	ldr	r3, [r7, #20]
 80237a8:	2200      	movs	r2, #0
 80237aa:	2140      	movs	r1, #64	; 0x40
 80237ac:	68f8      	ldr	r0, [r7, #12]
 80237ae:	f000 fa43 	bl	8023c38 <UART_WaitOnFlagUntilTimeout>
 80237b2:	4603      	mov	r3, r0
 80237b4:	2b00      	cmp	r3, #0
 80237b6:	d001      	beq.n	80237bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80237b8:	2303      	movs	r3, #3
 80237ba:	e006      	b.n	80237ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80237bc:	68fb      	ldr	r3, [r7, #12]
 80237be:	2220      	movs	r2, #32
 80237c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80237c4:	2300      	movs	r3, #0
 80237c6:	e000      	b.n	80237ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80237c8:	2302      	movs	r3, #2
  }
}
 80237ca:	4618      	mov	r0, r3
 80237cc:	3720      	adds	r7, #32
 80237ce:	46bd      	mov	sp, r7
 80237d0:	bd80      	pop	{r7, pc}

080237d2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80237d2:	b480      	push	{r7}
 80237d4:	b085      	sub	sp, #20
 80237d6:	af00      	add	r7, sp, #0
 80237d8:	60f8      	str	r0, [r7, #12]
 80237da:	60b9      	str	r1, [r7, #8]
 80237dc:	4613      	mov	r3, r2
 80237de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80237e0:	68fb      	ldr	r3, [r7, #12]
 80237e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80237e6:	b2db      	uxtb	r3, r3
 80237e8:	2b20      	cmp	r3, #32
 80237ea:	d130      	bne.n	802384e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80237ec:	68bb      	ldr	r3, [r7, #8]
 80237ee:	2b00      	cmp	r3, #0
 80237f0:	d002      	beq.n	80237f8 <HAL_UART_Transmit_IT+0x26>
 80237f2:	88fb      	ldrh	r3, [r7, #6]
 80237f4:	2b00      	cmp	r3, #0
 80237f6:	d101      	bne.n	80237fc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80237f8:	2301      	movs	r3, #1
 80237fa:	e029      	b.n	8023850 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80237fc:	68fb      	ldr	r3, [r7, #12]
 80237fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8023802:	2b01      	cmp	r3, #1
 8023804:	d101      	bne.n	802380a <HAL_UART_Transmit_IT+0x38>
 8023806:	2302      	movs	r3, #2
 8023808:	e022      	b.n	8023850 <HAL_UART_Transmit_IT+0x7e>
 802380a:	68fb      	ldr	r3, [r7, #12]
 802380c:	2201      	movs	r2, #1
 802380e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8023812:	68fb      	ldr	r3, [r7, #12]
 8023814:	68ba      	ldr	r2, [r7, #8]
 8023816:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8023818:	68fb      	ldr	r3, [r7, #12]
 802381a:	88fa      	ldrh	r2, [r7, #6]
 802381c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 802381e:	68fb      	ldr	r3, [r7, #12]
 8023820:	88fa      	ldrh	r2, [r7, #6]
 8023822:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8023824:	68fb      	ldr	r3, [r7, #12]
 8023826:	2200      	movs	r2, #0
 8023828:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802382a:	68fb      	ldr	r3, [r7, #12]
 802382c:	2221      	movs	r2, #33	; 0x21
 802382e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8023832:	68fb      	ldr	r3, [r7, #12]
 8023834:	2200      	movs	r2, #0
 8023836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 802383a:	68fb      	ldr	r3, [r7, #12]
 802383c:	681b      	ldr	r3, [r3, #0]
 802383e:	68da      	ldr	r2, [r3, #12]
 8023840:	68fb      	ldr	r3, [r7, #12]
 8023842:	681b      	ldr	r3, [r3, #0]
 8023844:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8023848:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 802384a:	2300      	movs	r3, #0
 802384c:	e000      	b.n	8023850 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 802384e:	2302      	movs	r3, #2
  }
}
 8023850:	4618      	mov	r0, r3
 8023852:	3714      	adds	r7, #20
 8023854:	46bd      	mov	sp, r7
 8023856:	bc80      	pop	{r7}
 8023858:	4770      	bx	lr

0802385a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 802385a:	b580      	push	{r7, lr}
 802385c:	b084      	sub	sp, #16
 802385e:	af00      	add	r7, sp, #0
 8023860:	60f8      	str	r0, [r7, #12]
 8023862:	60b9      	str	r1, [r7, #8]
 8023864:	4613      	mov	r3, r2
 8023866:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8023868:	68fb      	ldr	r3, [r7, #12]
 802386a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802386e:	b2db      	uxtb	r3, r3
 8023870:	2b20      	cmp	r3, #32
 8023872:	d11d      	bne.n	80238b0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8023874:	68bb      	ldr	r3, [r7, #8]
 8023876:	2b00      	cmp	r3, #0
 8023878:	d002      	beq.n	8023880 <HAL_UART_Receive_IT+0x26>
 802387a:	88fb      	ldrh	r3, [r7, #6]
 802387c:	2b00      	cmp	r3, #0
 802387e:	d101      	bne.n	8023884 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8023880:	2301      	movs	r3, #1
 8023882:	e016      	b.n	80238b2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8023884:	68fb      	ldr	r3, [r7, #12]
 8023886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802388a:	2b01      	cmp	r3, #1
 802388c:	d101      	bne.n	8023892 <HAL_UART_Receive_IT+0x38>
 802388e:	2302      	movs	r3, #2
 8023890:	e00f      	b.n	80238b2 <HAL_UART_Receive_IT+0x58>
 8023892:	68fb      	ldr	r3, [r7, #12]
 8023894:	2201      	movs	r2, #1
 8023896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802389a:	68fb      	ldr	r3, [r7, #12]
 802389c:	2200      	movs	r2, #0
 802389e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80238a0:	88fb      	ldrh	r3, [r7, #6]
 80238a2:	461a      	mov	r2, r3
 80238a4:	68b9      	ldr	r1, [r7, #8]
 80238a6:	68f8      	ldr	r0, [r7, #12]
 80238a8:	f000 fa10 	bl	8023ccc <UART_Start_Receive_IT>
 80238ac:	4603      	mov	r3, r0
 80238ae:	e000      	b.n	80238b2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80238b0:	2302      	movs	r3, #2
  }
}
 80238b2:	4618      	mov	r0, r3
 80238b4:	3710      	adds	r7, #16
 80238b6:	46bd      	mov	sp, r7
 80238b8:	bd80      	pop	{r7, pc}
	...

080238bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80238bc:	b580      	push	{r7, lr}
 80238be:	b08a      	sub	sp, #40	; 0x28
 80238c0:	af00      	add	r7, sp, #0
 80238c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80238c4:	687b      	ldr	r3, [r7, #4]
 80238c6:	681b      	ldr	r3, [r3, #0]
 80238c8:	681b      	ldr	r3, [r3, #0]
 80238ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80238cc:	687b      	ldr	r3, [r7, #4]
 80238ce:	681b      	ldr	r3, [r3, #0]
 80238d0:	68db      	ldr	r3, [r3, #12]
 80238d2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80238d4:	687b      	ldr	r3, [r7, #4]
 80238d6:	681b      	ldr	r3, [r3, #0]
 80238d8:	695b      	ldr	r3, [r3, #20]
 80238da:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80238dc:	2300      	movs	r3, #0
 80238de:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80238e0:	2300      	movs	r3, #0
 80238e2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80238e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80238e6:	f003 030f 	and.w	r3, r3, #15
 80238ea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80238ec:	69bb      	ldr	r3, [r7, #24]
 80238ee:	2b00      	cmp	r3, #0
 80238f0:	d10d      	bne.n	802390e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80238f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80238f4:	f003 0320 	and.w	r3, r3, #32
 80238f8:	2b00      	cmp	r3, #0
 80238fa:	d008      	beq.n	802390e <HAL_UART_IRQHandler+0x52>
 80238fc:	6a3b      	ldr	r3, [r7, #32]
 80238fe:	f003 0320 	and.w	r3, r3, #32
 8023902:	2b00      	cmp	r3, #0
 8023904:	d003      	beq.n	802390e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8023906:	6878      	ldr	r0, [r7, #4]
 8023908:	f000 fac0 	bl	8023e8c <UART_Receive_IT>
      return;
 802390c:	e17b      	b.n	8023c06 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 802390e:	69bb      	ldr	r3, [r7, #24]
 8023910:	2b00      	cmp	r3, #0
 8023912:	f000 80b1 	beq.w	8023a78 <HAL_UART_IRQHandler+0x1bc>
 8023916:	69fb      	ldr	r3, [r7, #28]
 8023918:	f003 0301 	and.w	r3, r3, #1
 802391c:	2b00      	cmp	r3, #0
 802391e:	d105      	bne.n	802392c <HAL_UART_IRQHandler+0x70>
 8023920:	6a3b      	ldr	r3, [r7, #32]
 8023922:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8023926:	2b00      	cmp	r3, #0
 8023928:	f000 80a6 	beq.w	8023a78 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 802392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802392e:	f003 0301 	and.w	r3, r3, #1
 8023932:	2b00      	cmp	r3, #0
 8023934:	d00a      	beq.n	802394c <HAL_UART_IRQHandler+0x90>
 8023936:	6a3b      	ldr	r3, [r7, #32]
 8023938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802393c:	2b00      	cmp	r3, #0
 802393e:	d005      	beq.n	802394c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8023940:	687b      	ldr	r3, [r7, #4]
 8023942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023944:	f043 0201 	orr.w	r2, r3, #1
 8023948:	687b      	ldr	r3, [r7, #4]
 802394a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802394e:	f003 0304 	and.w	r3, r3, #4
 8023952:	2b00      	cmp	r3, #0
 8023954:	d00a      	beq.n	802396c <HAL_UART_IRQHandler+0xb0>
 8023956:	69fb      	ldr	r3, [r7, #28]
 8023958:	f003 0301 	and.w	r3, r3, #1
 802395c:	2b00      	cmp	r3, #0
 802395e:	d005      	beq.n	802396c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8023960:	687b      	ldr	r3, [r7, #4]
 8023962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023964:	f043 0202 	orr.w	r2, r3, #2
 8023968:	687b      	ldr	r3, [r7, #4]
 802396a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802396e:	f003 0302 	and.w	r3, r3, #2
 8023972:	2b00      	cmp	r3, #0
 8023974:	d00a      	beq.n	802398c <HAL_UART_IRQHandler+0xd0>
 8023976:	69fb      	ldr	r3, [r7, #28]
 8023978:	f003 0301 	and.w	r3, r3, #1
 802397c:	2b00      	cmp	r3, #0
 802397e:	d005      	beq.n	802398c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8023980:	687b      	ldr	r3, [r7, #4]
 8023982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023984:	f043 0204 	orr.w	r2, r3, #4
 8023988:	687b      	ldr	r3, [r7, #4]
 802398a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 802398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802398e:	f003 0308 	and.w	r3, r3, #8
 8023992:	2b00      	cmp	r3, #0
 8023994:	d00f      	beq.n	80239b6 <HAL_UART_IRQHandler+0xfa>
 8023996:	6a3b      	ldr	r3, [r7, #32]
 8023998:	f003 0320 	and.w	r3, r3, #32
 802399c:	2b00      	cmp	r3, #0
 802399e:	d104      	bne.n	80239aa <HAL_UART_IRQHandler+0xee>
 80239a0:	69fb      	ldr	r3, [r7, #28]
 80239a2:	f003 0301 	and.w	r3, r3, #1
 80239a6:	2b00      	cmp	r3, #0
 80239a8:	d005      	beq.n	80239b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80239aa:	687b      	ldr	r3, [r7, #4]
 80239ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80239ae:	f043 0208 	orr.w	r2, r3, #8
 80239b2:	687b      	ldr	r3, [r7, #4]
 80239b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80239b6:	687b      	ldr	r3, [r7, #4]
 80239b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80239ba:	2b00      	cmp	r3, #0
 80239bc:	f000 811e 	beq.w	8023bfc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80239c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80239c2:	f003 0320 	and.w	r3, r3, #32
 80239c6:	2b00      	cmp	r3, #0
 80239c8:	d007      	beq.n	80239da <HAL_UART_IRQHandler+0x11e>
 80239ca:	6a3b      	ldr	r3, [r7, #32]
 80239cc:	f003 0320 	and.w	r3, r3, #32
 80239d0:	2b00      	cmp	r3, #0
 80239d2:	d002      	beq.n	80239da <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80239d4:	6878      	ldr	r0, [r7, #4]
 80239d6:	f000 fa59 	bl	8023e8c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80239da:	687b      	ldr	r3, [r7, #4]
 80239dc:	681b      	ldr	r3, [r3, #0]
 80239de:	695b      	ldr	r3, [r3, #20]
 80239e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80239e4:	2b00      	cmp	r3, #0
 80239e6:	bf14      	ite	ne
 80239e8:	2301      	movne	r3, #1
 80239ea:	2300      	moveq	r3, #0
 80239ec:	b2db      	uxtb	r3, r3
 80239ee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80239f0:	687b      	ldr	r3, [r7, #4]
 80239f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80239f4:	f003 0308 	and.w	r3, r3, #8
 80239f8:	2b00      	cmp	r3, #0
 80239fa:	d102      	bne.n	8023a02 <HAL_UART_IRQHandler+0x146>
 80239fc:	697b      	ldr	r3, [r7, #20]
 80239fe:	2b00      	cmp	r3, #0
 8023a00:	d031      	beq.n	8023a66 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8023a02:	6878      	ldr	r0, [r7, #4]
 8023a04:	f000 f99b 	bl	8023d3e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8023a08:	687b      	ldr	r3, [r7, #4]
 8023a0a:	681b      	ldr	r3, [r3, #0]
 8023a0c:	695b      	ldr	r3, [r3, #20]
 8023a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023a12:	2b00      	cmp	r3, #0
 8023a14:	d023      	beq.n	8023a5e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8023a16:	687b      	ldr	r3, [r7, #4]
 8023a18:	681b      	ldr	r3, [r3, #0]
 8023a1a:	695a      	ldr	r2, [r3, #20]
 8023a1c:	687b      	ldr	r3, [r7, #4]
 8023a1e:	681b      	ldr	r3, [r3, #0]
 8023a20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8023a24:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8023a26:	687b      	ldr	r3, [r7, #4]
 8023a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023a2a:	2b00      	cmp	r3, #0
 8023a2c:	d013      	beq.n	8023a56 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8023a2e:	687b      	ldr	r3, [r7, #4]
 8023a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023a32:	4a76      	ldr	r2, [pc, #472]	; (8023c0c <HAL_UART_IRQHandler+0x350>)
 8023a34:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8023a36:	687b      	ldr	r3, [r7, #4]
 8023a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023a3a:	4618      	mov	r0, r3
 8023a3c:	f7fd fc90 	bl	8021360 <HAL_DMA_Abort_IT>
 8023a40:	4603      	mov	r3, r0
 8023a42:	2b00      	cmp	r3, #0
 8023a44:	d016      	beq.n	8023a74 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8023a46:	687b      	ldr	r3, [r7, #4]
 8023a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023a4c:	687a      	ldr	r2, [r7, #4]
 8023a4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8023a50:	4610      	mov	r0, r2
 8023a52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8023a54:	e00e      	b.n	8023a74 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8023a56:	6878      	ldr	r0, [r7, #4]
 8023a58:	f000 f8da 	bl	8023c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8023a5c:	e00a      	b.n	8023a74 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8023a5e:	6878      	ldr	r0, [r7, #4]
 8023a60:	f000 f8d6 	bl	8023c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8023a64:	e006      	b.n	8023a74 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8023a66:	6878      	ldr	r0, [r7, #4]
 8023a68:	f000 f8d2 	bl	8023c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8023a6c:	687b      	ldr	r3, [r7, #4]
 8023a6e:	2200      	movs	r2, #0
 8023a70:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8023a72:	e0c3      	b.n	8023bfc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8023a74:	bf00      	nop
    return;
 8023a76:	e0c1      	b.n	8023bfc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8023a78:	687b      	ldr	r3, [r7, #4]
 8023a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023a7c:	2b01      	cmp	r3, #1
 8023a7e:	f040 80a1 	bne.w	8023bc4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8023a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023a84:	f003 0310 	and.w	r3, r3, #16
 8023a88:	2b00      	cmp	r3, #0
 8023a8a:	f000 809b 	beq.w	8023bc4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8023a8e:	6a3b      	ldr	r3, [r7, #32]
 8023a90:	f003 0310 	and.w	r3, r3, #16
 8023a94:	2b00      	cmp	r3, #0
 8023a96:	f000 8095 	beq.w	8023bc4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8023a9a:	2300      	movs	r3, #0
 8023a9c:	60fb      	str	r3, [r7, #12]
 8023a9e:	687b      	ldr	r3, [r7, #4]
 8023aa0:	681b      	ldr	r3, [r3, #0]
 8023aa2:	681b      	ldr	r3, [r3, #0]
 8023aa4:	60fb      	str	r3, [r7, #12]
 8023aa6:	687b      	ldr	r3, [r7, #4]
 8023aa8:	681b      	ldr	r3, [r3, #0]
 8023aaa:	685b      	ldr	r3, [r3, #4]
 8023aac:	60fb      	str	r3, [r7, #12]
 8023aae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8023ab0:	687b      	ldr	r3, [r7, #4]
 8023ab2:	681b      	ldr	r3, [r3, #0]
 8023ab4:	695b      	ldr	r3, [r3, #20]
 8023ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023aba:	2b00      	cmp	r3, #0
 8023abc:	d04e      	beq.n	8023b5c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8023abe:	687b      	ldr	r3, [r7, #4]
 8023ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023ac2:	681b      	ldr	r3, [r3, #0]
 8023ac4:	685b      	ldr	r3, [r3, #4]
 8023ac6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8023ac8:	8a3b      	ldrh	r3, [r7, #16]
 8023aca:	2b00      	cmp	r3, #0
 8023acc:	f000 8098 	beq.w	8023c00 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8023ad0:	687b      	ldr	r3, [r7, #4]
 8023ad2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8023ad4:	8a3a      	ldrh	r2, [r7, #16]
 8023ad6:	429a      	cmp	r2, r3
 8023ad8:	f080 8092 	bcs.w	8023c00 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8023adc:	687b      	ldr	r3, [r7, #4]
 8023ade:	8a3a      	ldrh	r2, [r7, #16]
 8023ae0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8023ae2:	687b      	ldr	r3, [r7, #4]
 8023ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023ae6:	699b      	ldr	r3, [r3, #24]
 8023ae8:	2b20      	cmp	r3, #32
 8023aea:	d02b      	beq.n	8023b44 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8023aec:	687b      	ldr	r3, [r7, #4]
 8023aee:	681b      	ldr	r3, [r3, #0]
 8023af0:	68da      	ldr	r2, [r3, #12]
 8023af2:	687b      	ldr	r3, [r7, #4]
 8023af4:	681b      	ldr	r3, [r3, #0]
 8023af6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8023afa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8023afc:	687b      	ldr	r3, [r7, #4]
 8023afe:	681b      	ldr	r3, [r3, #0]
 8023b00:	695a      	ldr	r2, [r3, #20]
 8023b02:	687b      	ldr	r3, [r7, #4]
 8023b04:	681b      	ldr	r3, [r3, #0]
 8023b06:	f022 0201 	bic.w	r2, r2, #1
 8023b0a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8023b0c:	687b      	ldr	r3, [r7, #4]
 8023b0e:	681b      	ldr	r3, [r3, #0]
 8023b10:	695a      	ldr	r2, [r3, #20]
 8023b12:	687b      	ldr	r3, [r7, #4]
 8023b14:	681b      	ldr	r3, [r3, #0]
 8023b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8023b1a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8023b1c:	687b      	ldr	r3, [r7, #4]
 8023b1e:	2220      	movs	r2, #32
 8023b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8023b24:	687b      	ldr	r3, [r7, #4]
 8023b26:	2200      	movs	r2, #0
 8023b28:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8023b2a:	687b      	ldr	r3, [r7, #4]
 8023b2c:	681b      	ldr	r3, [r3, #0]
 8023b2e:	68da      	ldr	r2, [r3, #12]
 8023b30:	687b      	ldr	r3, [r7, #4]
 8023b32:	681b      	ldr	r3, [r3, #0]
 8023b34:	f022 0210 	bic.w	r2, r2, #16
 8023b38:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8023b3a:	687b      	ldr	r3, [r7, #4]
 8023b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023b3e:	4618      	mov	r0, r3
 8023b40:	f7fd fbd3 	bl	80212ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8023b44:	687b      	ldr	r3, [r7, #4]
 8023b46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8023b48:	687b      	ldr	r3, [r7, #4]
 8023b4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8023b4c:	b29b      	uxth	r3, r3
 8023b4e:	1ad3      	subs	r3, r2, r3
 8023b50:	b29b      	uxth	r3, r3
 8023b52:	4619      	mov	r1, r3
 8023b54:	6878      	ldr	r0, [r7, #4]
 8023b56:	f000 f864 	bl	8023c22 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8023b5a:	e051      	b.n	8023c00 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8023b5c:	687b      	ldr	r3, [r7, #4]
 8023b5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8023b60:	687b      	ldr	r3, [r7, #4]
 8023b62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8023b64:	b29b      	uxth	r3, r3
 8023b66:	1ad3      	subs	r3, r2, r3
 8023b68:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8023b6a:	687b      	ldr	r3, [r7, #4]
 8023b6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8023b6e:	b29b      	uxth	r3, r3
 8023b70:	2b00      	cmp	r3, #0
 8023b72:	d047      	beq.n	8023c04 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8023b74:	8a7b      	ldrh	r3, [r7, #18]
 8023b76:	2b00      	cmp	r3, #0
 8023b78:	d044      	beq.n	8023c04 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8023b7a:	687b      	ldr	r3, [r7, #4]
 8023b7c:	681b      	ldr	r3, [r3, #0]
 8023b7e:	68da      	ldr	r2, [r3, #12]
 8023b80:	687b      	ldr	r3, [r7, #4]
 8023b82:	681b      	ldr	r3, [r3, #0]
 8023b84:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8023b88:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8023b8a:	687b      	ldr	r3, [r7, #4]
 8023b8c:	681b      	ldr	r3, [r3, #0]
 8023b8e:	695a      	ldr	r2, [r3, #20]
 8023b90:	687b      	ldr	r3, [r7, #4]
 8023b92:	681b      	ldr	r3, [r3, #0]
 8023b94:	f022 0201 	bic.w	r2, r2, #1
 8023b98:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8023b9a:	687b      	ldr	r3, [r7, #4]
 8023b9c:	2220      	movs	r2, #32
 8023b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8023ba2:	687b      	ldr	r3, [r7, #4]
 8023ba4:	2200      	movs	r2, #0
 8023ba6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8023ba8:	687b      	ldr	r3, [r7, #4]
 8023baa:	681b      	ldr	r3, [r3, #0]
 8023bac:	68da      	ldr	r2, [r3, #12]
 8023bae:	687b      	ldr	r3, [r7, #4]
 8023bb0:	681b      	ldr	r3, [r3, #0]
 8023bb2:	f022 0210 	bic.w	r2, r2, #16
 8023bb6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8023bb8:	8a7b      	ldrh	r3, [r7, #18]
 8023bba:	4619      	mov	r1, r3
 8023bbc:	6878      	ldr	r0, [r7, #4]
 8023bbe:	f000 f830 	bl	8023c22 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8023bc2:	e01f      	b.n	8023c04 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8023bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023bca:	2b00      	cmp	r3, #0
 8023bcc:	d008      	beq.n	8023be0 <HAL_UART_IRQHandler+0x324>
 8023bce:	6a3b      	ldr	r3, [r7, #32]
 8023bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023bd4:	2b00      	cmp	r3, #0
 8023bd6:	d003      	beq.n	8023be0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8023bd8:	6878      	ldr	r0, [r7, #4]
 8023bda:	f000 f8f0 	bl	8023dbe <UART_Transmit_IT>
    return;
 8023bde:	e012      	b.n	8023c06 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8023be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023be6:	2b00      	cmp	r3, #0
 8023be8:	d00d      	beq.n	8023c06 <HAL_UART_IRQHandler+0x34a>
 8023bea:	6a3b      	ldr	r3, [r7, #32]
 8023bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023bf0:	2b00      	cmp	r3, #0
 8023bf2:	d008      	beq.n	8023c06 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8023bf4:	6878      	ldr	r0, [r7, #4]
 8023bf6:	f000 f931 	bl	8023e5c <UART_EndTransmit_IT>
    return;
 8023bfa:	e004      	b.n	8023c06 <HAL_UART_IRQHandler+0x34a>
    return;
 8023bfc:	bf00      	nop
 8023bfe:	e002      	b.n	8023c06 <HAL_UART_IRQHandler+0x34a>
      return;
 8023c00:	bf00      	nop
 8023c02:	e000      	b.n	8023c06 <HAL_UART_IRQHandler+0x34a>
      return;
 8023c04:	bf00      	nop
  }
}
 8023c06:	3728      	adds	r7, #40	; 0x28
 8023c08:	46bd      	mov	sp, r7
 8023c0a:	bd80      	pop	{r7, pc}
 8023c0c:	08023d97 	.word	0x08023d97

08023c10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8023c10:	b480      	push	{r7}
 8023c12:	b083      	sub	sp, #12
 8023c14:	af00      	add	r7, sp, #0
 8023c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8023c18:	bf00      	nop
 8023c1a:	370c      	adds	r7, #12
 8023c1c:	46bd      	mov	sp, r7
 8023c1e:	bc80      	pop	{r7}
 8023c20:	4770      	bx	lr

08023c22 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8023c22:	b480      	push	{r7}
 8023c24:	b083      	sub	sp, #12
 8023c26:	af00      	add	r7, sp, #0
 8023c28:	6078      	str	r0, [r7, #4]
 8023c2a:	460b      	mov	r3, r1
 8023c2c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8023c2e:	bf00      	nop
 8023c30:	370c      	adds	r7, #12
 8023c32:	46bd      	mov	sp, r7
 8023c34:	bc80      	pop	{r7}
 8023c36:	4770      	bx	lr

08023c38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8023c38:	b580      	push	{r7, lr}
 8023c3a:	b084      	sub	sp, #16
 8023c3c:	af00      	add	r7, sp, #0
 8023c3e:	60f8      	str	r0, [r7, #12]
 8023c40:	60b9      	str	r1, [r7, #8]
 8023c42:	603b      	str	r3, [r7, #0]
 8023c44:	4613      	mov	r3, r2
 8023c46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8023c48:	e02c      	b.n	8023ca4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8023c4a:	69bb      	ldr	r3, [r7, #24]
 8023c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023c50:	d028      	beq.n	8023ca4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8023c52:	69bb      	ldr	r3, [r7, #24]
 8023c54:	2b00      	cmp	r3, #0
 8023c56:	d007      	beq.n	8023c68 <UART_WaitOnFlagUntilTimeout+0x30>
 8023c58:	f7fd fa0c 	bl	8021074 <HAL_GetTick>
 8023c5c:	4602      	mov	r2, r0
 8023c5e:	683b      	ldr	r3, [r7, #0]
 8023c60:	1ad3      	subs	r3, r2, r3
 8023c62:	69ba      	ldr	r2, [r7, #24]
 8023c64:	429a      	cmp	r2, r3
 8023c66:	d21d      	bcs.n	8023ca4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8023c68:	68fb      	ldr	r3, [r7, #12]
 8023c6a:	681b      	ldr	r3, [r3, #0]
 8023c6c:	68da      	ldr	r2, [r3, #12]
 8023c6e:	68fb      	ldr	r3, [r7, #12]
 8023c70:	681b      	ldr	r3, [r3, #0]
 8023c72:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8023c76:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8023c78:	68fb      	ldr	r3, [r7, #12]
 8023c7a:	681b      	ldr	r3, [r3, #0]
 8023c7c:	695a      	ldr	r2, [r3, #20]
 8023c7e:	68fb      	ldr	r3, [r7, #12]
 8023c80:	681b      	ldr	r3, [r3, #0]
 8023c82:	f022 0201 	bic.w	r2, r2, #1
 8023c86:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8023c88:	68fb      	ldr	r3, [r7, #12]
 8023c8a:	2220      	movs	r2, #32
 8023c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8023c90:	68fb      	ldr	r3, [r7, #12]
 8023c92:	2220      	movs	r2, #32
 8023c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8023c98:	68fb      	ldr	r3, [r7, #12]
 8023c9a:	2200      	movs	r2, #0
 8023c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8023ca0:	2303      	movs	r3, #3
 8023ca2:	e00f      	b.n	8023cc4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8023ca4:	68fb      	ldr	r3, [r7, #12]
 8023ca6:	681b      	ldr	r3, [r3, #0]
 8023ca8:	681a      	ldr	r2, [r3, #0]
 8023caa:	68bb      	ldr	r3, [r7, #8]
 8023cac:	4013      	ands	r3, r2
 8023cae:	68ba      	ldr	r2, [r7, #8]
 8023cb0:	429a      	cmp	r2, r3
 8023cb2:	bf0c      	ite	eq
 8023cb4:	2301      	moveq	r3, #1
 8023cb6:	2300      	movne	r3, #0
 8023cb8:	b2db      	uxtb	r3, r3
 8023cba:	461a      	mov	r2, r3
 8023cbc:	79fb      	ldrb	r3, [r7, #7]
 8023cbe:	429a      	cmp	r2, r3
 8023cc0:	d0c3      	beq.n	8023c4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8023cc2:	2300      	movs	r3, #0
}
 8023cc4:	4618      	mov	r0, r3
 8023cc6:	3710      	adds	r7, #16
 8023cc8:	46bd      	mov	sp, r7
 8023cca:	bd80      	pop	{r7, pc}

08023ccc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8023ccc:	b480      	push	{r7}
 8023cce:	b085      	sub	sp, #20
 8023cd0:	af00      	add	r7, sp, #0
 8023cd2:	60f8      	str	r0, [r7, #12]
 8023cd4:	60b9      	str	r1, [r7, #8]
 8023cd6:	4613      	mov	r3, r2
 8023cd8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8023cda:	68fb      	ldr	r3, [r7, #12]
 8023cdc:	68ba      	ldr	r2, [r7, #8]
 8023cde:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8023ce0:	68fb      	ldr	r3, [r7, #12]
 8023ce2:	88fa      	ldrh	r2, [r7, #6]
 8023ce4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8023ce6:	68fb      	ldr	r3, [r7, #12]
 8023ce8:	88fa      	ldrh	r2, [r7, #6]
 8023cea:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8023cec:	68fb      	ldr	r3, [r7, #12]
 8023cee:	2200      	movs	r2, #0
 8023cf0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8023cf2:	68fb      	ldr	r3, [r7, #12]
 8023cf4:	2222      	movs	r2, #34	; 0x22
 8023cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8023cfa:	68fb      	ldr	r3, [r7, #12]
 8023cfc:	2200      	movs	r2, #0
 8023cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8023d02:	68fb      	ldr	r3, [r7, #12]
 8023d04:	681b      	ldr	r3, [r3, #0]
 8023d06:	68da      	ldr	r2, [r3, #12]
 8023d08:	68fb      	ldr	r3, [r7, #12]
 8023d0a:	681b      	ldr	r3, [r3, #0]
 8023d0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8023d10:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8023d12:	68fb      	ldr	r3, [r7, #12]
 8023d14:	681b      	ldr	r3, [r3, #0]
 8023d16:	695a      	ldr	r2, [r3, #20]
 8023d18:	68fb      	ldr	r3, [r7, #12]
 8023d1a:	681b      	ldr	r3, [r3, #0]
 8023d1c:	f042 0201 	orr.w	r2, r2, #1
 8023d20:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8023d22:	68fb      	ldr	r3, [r7, #12]
 8023d24:	681b      	ldr	r3, [r3, #0]
 8023d26:	68da      	ldr	r2, [r3, #12]
 8023d28:	68fb      	ldr	r3, [r7, #12]
 8023d2a:	681b      	ldr	r3, [r3, #0]
 8023d2c:	f042 0220 	orr.w	r2, r2, #32
 8023d30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8023d32:	2300      	movs	r3, #0
}
 8023d34:	4618      	mov	r0, r3
 8023d36:	3714      	adds	r7, #20
 8023d38:	46bd      	mov	sp, r7
 8023d3a:	bc80      	pop	{r7}
 8023d3c:	4770      	bx	lr

08023d3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8023d3e:	b480      	push	{r7}
 8023d40:	b083      	sub	sp, #12
 8023d42:	af00      	add	r7, sp, #0
 8023d44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8023d46:	687b      	ldr	r3, [r7, #4]
 8023d48:	681b      	ldr	r3, [r3, #0]
 8023d4a:	68da      	ldr	r2, [r3, #12]
 8023d4c:	687b      	ldr	r3, [r7, #4]
 8023d4e:	681b      	ldr	r3, [r3, #0]
 8023d50:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8023d54:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8023d56:	687b      	ldr	r3, [r7, #4]
 8023d58:	681b      	ldr	r3, [r3, #0]
 8023d5a:	695a      	ldr	r2, [r3, #20]
 8023d5c:	687b      	ldr	r3, [r7, #4]
 8023d5e:	681b      	ldr	r3, [r3, #0]
 8023d60:	f022 0201 	bic.w	r2, r2, #1
 8023d64:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8023d66:	687b      	ldr	r3, [r7, #4]
 8023d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023d6a:	2b01      	cmp	r3, #1
 8023d6c:	d107      	bne.n	8023d7e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8023d6e:	687b      	ldr	r3, [r7, #4]
 8023d70:	681b      	ldr	r3, [r3, #0]
 8023d72:	68da      	ldr	r2, [r3, #12]
 8023d74:	687b      	ldr	r3, [r7, #4]
 8023d76:	681b      	ldr	r3, [r3, #0]
 8023d78:	f022 0210 	bic.w	r2, r2, #16
 8023d7c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8023d7e:	687b      	ldr	r3, [r7, #4]
 8023d80:	2220      	movs	r2, #32
 8023d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8023d86:	687b      	ldr	r3, [r7, #4]
 8023d88:	2200      	movs	r2, #0
 8023d8a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8023d8c:	bf00      	nop
 8023d8e:	370c      	adds	r7, #12
 8023d90:	46bd      	mov	sp, r7
 8023d92:	bc80      	pop	{r7}
 8023d94:	4770      	bx	lr

08023d96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8023d96:	b580      	push	{r7, lr}
 8023d98:	b084      	sub	sp, #16
 8023d9a:	af00      	add	r7, sp, #0
 8023d9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8023d9e:	687b      	ldr	r3, [r7, #4]
 8023da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023da2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8023da4:	68fb      	ldr	r3, [r7, #12]
 8023da6:	2200      	movs	r2, #0
 8023da8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8023daa:	68fb      	ldr	r3, [r7, #12]
 8023dac:	2200      	movs	r2, #0
 8023dae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8023db0:	68f8      	ldr	r0, [r7, #12]
 8023db2:	f7ff ff2d 	bl	8023c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8023db6:	bf00      	nop
 8023db8:	3710      	adds	r7, #16
 8023dba:	46bd      	mov	sp, r7
 8023dbc:	bd80      	pop	{r7, pc}

08023dbe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8023dbe:	b480      	push	{r7}
 8023dc0:	b085      	sub	sp, #20
 8023dc2:	af00      	add	r7, sp, #0
 8023dc4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8023dc6:	687b      	ldr	r3, [r7, #4]
 8023dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8023dcc:	b2db      	uxtb	r3, r3
 8023dce:	2b21      	cmp	r3, #33	; 0x21
 8023dd0:	d13e      	bne.n	8023e50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8023dd2:	687b      	ldr	r3, [r7, #4]
 8023dd4:	689b      	ldr	r3, [r3, #8]
 8023dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8023dda:	d114      	bne.n	8023e06 <UART_Transmit_IT+0x48>
 8023ddc:	687b      	ldr	r3, [r7, #4]
 8023dde:	691b      	ldr	r3, [r3, #16]
 8023de0:	2b00      	cmp	r3, #0
 8023de2:	d110      	bne.n	8023e06 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8023de4:	687b      	ldr	r3, [r7, #4]
 8023de6:	6a1b      	ldr	r3, [r3, #32]
 8023de8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8023dea:	68fb      	ldr	r3, [r7, #12]
 8023dec:	881b      	ldrh	r3, [r3, #0]
 8023dee:	461a      	mov	r2, r3
 8023df0:	687b      	ldr	r3, [r7, #4]
 8023df2:	681b      	ldr	r3, [r3, #0]
 8023df4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8023df8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8023dfa:	687b      	ldr	r3, [r7, #4]
 8023dfc:	6a1b      	ldr	r3, [r3, #32]
 8023dfe:	1c9a      	adds	r2, r3, #2
 8023e00:	687b      	ldr	r3, [r7, #4]
 8023e02:	621a      	str	r2, [r3, #32]
 8023e04:	e008      	b.n	8023e18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8023e06:	687b      	ldr	r3, [r7, #4]
 8023e08:	6a1b      	ldr	r3, [r3, #32]
 8023e0a:	1c59      	adds	r1, r3, #1
 8023e0c:	687a      	ldr	r2, [r7, #4]
 8023e0e:	6211      	str	r1, [r2, #32]
 8023e10:	781a      	ldrb	r2, [r3, #0]
 8023e12:	687b      	ldr	r3, [r7, #4]
 8023e14:	681b      	ldr	r3, [r3, #0]
 8023e16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8023e18:	687b      	ldr	r3, [r7, #4]
 8023e1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8023e1c:	b29b      	uxth	r3, r3
 8023e1e:	3b01      	subs	r3, #1
 8023e20:	b29b      	uxth	r3, r3
 8023e22:	687a      	ldr	r2, [r7, #4]
 8023e24:	4619      	mov	r1, r3
 8023e26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8023e28:	2b00      	cmp	r3, #0
 8023e2a:	d10f      	bne.n	8023e4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8023e2c:	687b      	ldr	r3, [r7, #4]
 8023e2e:	681b      	ldr	r3, [r3, #0]
 8023e30:	68da      	ldr	r2, [r3, #12]
 8023e32:	687b      	ldr	r3, [r7, #4]
 8023e34:	681b      	ldr	r3, [r3, #0]
 8023e36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8023e3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8023e3c:	687b      	ldr	r3, [r7, #4]
 8023e3e:	681b      	ldr	r3, [r3, #0]
 8023e40:	68da      	ldr	r2, [r3, #12]
 8023e42:	687b      	ldr	r3, [r7, #4]
 8023e44:	681b      	ldr	r3, [r3, #0]
 8023e46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8023e4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8023e4c:	2300      	movs	r3, #0
 8023e4e:	e000      	b.n	8023e52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8023e50:	2302      	movs	r3, #2
  }
}
 8023e52:	4618      	mov	r0, r3
 8023e54:	3714      	adds	r7, #20
 8023e56:	46bd      	mov	sp, r7
 8023e58:	bc80      	pop	{r7}
 8023e5a:	4770      	bx	lr

08023e5c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8023e5c:	b580      	push	{r7, lr}
 8023e5e:	b082      	sub	sp, #8
 8023e60:	af00      	add	r7, sp, #0
 8023e62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8023e64:	687b      	ldr	r3, [r7, #4]
 8023e66:	681b      	ldr	r3, [r3, #0]
 8023e68:	68da      	ldr	r2, [r3, #12]
 8023e6a:	687b      	ldr	r3, [r7, #4]
 8023e6c:	681b      	ldr	r3, [r3, #0]
 8023e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8023e72:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8023e74:	687b      	ldr	r3, [r7, #4]
 8023e76:	2220      	movs	r2, #32
 8023e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8023e7c:	6878      	ldr	r0, [r7, #4]
 8023e7e:	f7fb f935 	bl	801f0ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8023e82:	2300      	movs	r3, #0
}
 8023e84:	4618      	mov	r0, r3
 8023e86:	3708      	adds	r7, #8
 8023e88:	46bd      	mov	sp, r7
 8023e8a:	bd80      	pop	{r7, pc}

08023e8c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8023e8c:	b580      	push	{r7, lr}
 8023e8e:	b086      	sub	sp, #24
 8023e90:	af00      	add	r7, sp, #0
 8023e92:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8023e94:	687b      	ldr	r3, [r7, #4]
 8023e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8023e9a:	b2db      	uxtb	r3, r3
 8023e9c:	2b22      	cmp	r3, #34	; 0x22
 8023e9e:	f040 8099 	bne.w	8023fd4 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8023ea2:	687b      	ldr	r3, [r7, #4]
 8023ea4:	689b      	ldr	r3, [r3, #8]
 8023ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8023eaa:	d117      	bne.n	8023edc <UART_Receive_IT+0x50>
 8023eac:	687b      	ldr	r3, [r7, #4]
 8023eae:	691b      	ldr	r3, [r3, #16]
 8023eb0:	2b00      	cmp	r3, #0
 8023eb2:	d113      	bne.n	8023edc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8023eb4:	2300      	movs	r3, #0
 8023eb6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8023eb8:	687b      	ldr	r3, [r7, #4]
 8023eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023ebc:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8023ebe:	687b      	ldr	r3, [r7, #4]
 8023ec0:	681b      	ldr	r3, [r3, #0]
 8023ec2:	685b      	ldr	r3, [r3, #4]
 8023ec4:	b29b      	uxth	r3, r3
 8023ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8023eca:	b29a      	uxth	r2, r3
 8023ecc:	693b      	ldr	r3, [r7, #16]
 8023ece:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8023ed0:	687b      	ldr	r3, [r7, #4]
 8023ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023ed4:	1c9a      	adds	r2, r3, #2
 8023ed6:	687b      	ldr	r3, [r7, #4]
 8023ed8:	629a      	str	r2, [r3, #40]	; 0x28
 8023eda:	e026      	b.n	8023f2a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8023edc:	687b      	ldr	r3, [r7, #4]
 8023ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023ee0:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8023ee2:	2300      	movs	r3, #0
 8023ee4:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8023ee6:	687b      	ldr	r3, [r7, #4]
 8023ee8:	689b      	ldr	r3, [r3, #8]
 8023eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8023eee:	d007      	beq.n	8023f00 <UART_Receive_IT+0x74>
 8023ef0:	687b      	ldr	r3, [r7, #4]
 8023ef2:	689b      	ldr	r3, [r3, #8]
 8023ef4:	2b00      	cmp	r3, #0
 8023ef6:	d10a      	bne.n	8023f0e <UART_Receive_IT+0x82>
 8023ef8:	687b      	ldr	r3, [r7, #4]
 8023efa:	691b      	ldr	r3, [r3, #16]
 8023efc:	2b00      	cmp	r3, #0
 8023efe:	d106      	bne.n	8023f0e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8023f00:	687b      	ldr	r3, [r7, #4]
 8023f02:	681b      	ldr	r3, [r3, #0]
 8023f04:	685b      	ldr	r3, [r3, #4]
 8023f06:	b2da      	uxtb	r2, r3
 8023f08:	697b      	ldr	r3, [r7, #20]
 8023f0a:	701a      	strb	r2, [r3, #0]
 8023f0c:	e008      	b.n	8023f20 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8023f0e:	687b      	ldr	r3, [r7, #4]
 8023f10:	681b      	ldr	r3, [r3, #0]
 8023f12:	685b      	ldr	r3, [r3, #4]
 8023f14:	b2db      	uxtb	r3, r3
 8023f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8023f1a:	b2da      	uxtb	r2, r3
 8023f1c:	697b      	ldr	r3, [r7, #20]
 8023f1e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8023f20:	687b      	ldr	r3, [r7, #4]
 8023f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023f24:	1c5a      	adds	r2, r3, #1
 8023f26:	687b      	ldr	r3, [r7, #4]
 8023f28:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8023f2a:	687b      	ldr	r3, [r7, #4]
 8023f2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8023f2e:	b29b      	uxth	r3, r3
 8023f30:	3b01      	subs	r3, #1
 8023f32:	b29b      	uxth	r3, r3
 8023f34:	687a      	ldr	r2, [r7, #4]
 8023f36:	4619      	mov	r1, r3
 8023f38:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8023f3a:	2b00      	cmp	r3, #0
 8023f3c:	d148      	bne.n	8023fd0 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8023f3e:	687b      	ldr	r3, [r7, #4]
 8023f40:	681b      	ldr	r3, [r3, #0]
 8023f42:	68da      	ldr	r2, [r3, #12]
 8023f44:	687b      	ldr	r3, [r7, #4]
 8023f46:	681b      	ldr	r3, [r3, #0]
 8023f48:	f022 0220 	bic.w	r2, r2, #32
 8023f4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8023f4e:	687b      	ldr	r3, [r7, #4]
 8023f50:	681b      	ldr	r3, [r3, #0]
 8023f52:	68da      	ldr	r2, [r3, #12]
 8023f54:	687b      	ldr	r3, [r7, #4]
 8023f56:	681b      	ldr	r3, [r3, #0]
 8023f58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8023f5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8023f5e:	687b      	ldr	r3, [r7, #4]
 8023f60:	681b      	ldr	r3, [r3, #0]
 8023f62:	695a      	ldr	r2, [r3, #20]
 8023f64:	687b      	ldr	r3, [r7, #4]
 8023f66:	681b      	ldr	r3, [r3, #0]
 8023f68:	f022 0201 	bic.w	r2, r2, #1
 8023f6c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8023f6e:	687b      	ldr	r3, [r7, #4]
 8023f70:	2220      	movs	r2, #32
 8023f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8023f76:	687b      	ldr	r3, [r7, #4]
 8023f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023f7a:	2b01      	cmp	r3, #1
 8023f7c:	d123      	bne.n	8023fc6 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8023f7e:	687b      	ldr	r3, [r7, #4]
 8023f80:	2200      	movs	r2, #0
 8023f82:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8023f84:	687b      	ldr	r3, [r7, #4]
 8023f86:	681b      	ldr	r3, [r3, #0]
 8023f88:	68da      	ldr	r2, [r3, #12]
 8023f8a:	687b      	ldr	r3, [r7, #4]
 8023f8c:	681b      	ldr	r3, [r3, #0]
 8023f8e:	f022 0210 	bic.w	r2, r2, #16
 8023f92:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8023f94:	687b      	ldr	r3, [r7, #4]
 8023f96:	681b      	ldr	r3, [r3, #0]
 8023f98:	681b      	ldr	r3, [r3, #0]
 8023f9a:	f003 0310 	and.w	r3, r3, #16
 8023f9e:	2b10      	cmp	r3, #16
 8023fa0:	d10a      	bne.n	8023fb8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8023fa2:	2300      	movs	r3, #0
 8023fa4:	60fb      	str	r3, [r7, #12]
 8023fa6:	687b      	ldr	r3, [r7, #4]
 8023fa8:	681b      	ldr	r3, [r3, #0]
 8023faa:	681b      	ldr	r3, [r3, #0]
 8023fac:	60fb      	str	r3, [r7, #12]
 8023fae:	687b      	ldr	r3, [r7, #4]
 8023fb0:	681b      	ldr	r3, [r3, #0]
 8023fb2:	685b      	ldr	r3, [r3, #4]
 8023fb4:	60fb      	str	r3, [r7, #12]
 8023fb6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8023fb8:	687b      	ldr	r3, [r7, #4]
 8023fba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8023fbc:	4619      	mov	r1, r3
 8023fbe:	6878      	ldr	r0, [r7, #4]
 8023fc0:	f7ff fe2f 	bl	8023c22 <HAL_UARTEx_RxEventCallback>
 8023fc4:	e002      	b.n	8023fcc <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8023fc6:	6878      	ldr	r0, [r7, #4]
 8023fc8:	f7fb f860 	bl	801f08c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8023fcc:	2300      	movs	r3, #0
 8023fce:	e002      	b.n	8023fd6 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8023fd0:	2300      	movs	r3, #0
 8023fd2:	e000      	b.n	8023fd6 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8023fd4:	2302      	movs	r3, #2
  }
}
 8023fd6:	4618      	mov	r0, r3
 8023fd8:	3718      	adds	r7, #24
 8023fda:	46bd      	mov	sp, r7
 8023fdc:	bd80      	pop	{r7, pc}
	...

08023fe0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8023fe0:	b580      	push	{r7, lr}
 8023fe2:	b084      	sub	sp, #16
 8023fe4:	af00      	add	r7, sp, #0
 8023fe6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8023fe8:	687b      	ldr	r3, [r7, #4]
 8023fea:	681b      	ldr	r3, [r3, #0]
 8023fec:	691b      	ldr	r3, [r3, #16]
 8023fee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8023ff2:	687b      	ldr	r3, [r7, #4]
 8023ff4:	68da      	ldr	r2, [r3, #12]
 8023ff6:	687b      	ldr	r3, [r7, #4]
 8023ff8:	681b      	ldr	r3, [r3, #0]
 8023ffa:	430a      	orrs	r2, r1
 8023ffc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8023ffe:	687b      	ldr	r3, [r7, #4]
 8024000:	689a      	ldr	r2, [r3, #8]
 8024002:	687b      	ldr	r3, [r7, #4]
 8024004:	691b      	ldr	r3, [r3, #16]
 8024006:	431a      	orrs	r2, r3
 8024008:	687b      	ldr	r3, [r7, #4]
 802400a:	695b      	ldr	r3, [r3, #20]
 802400c:	4313      	orrs	r3, r2
 802400e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8024010:	687b      	ldr	r3, [r7, #4]
 8024012:	681b      	ldr	r3, [r3, #0]
 8024014:	68db      	ldr	r3, [r3, #12]
 8024016:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 802401a:	f023 030c 	bic.w	r3, r3, #12
 802401e:	687a      	ldr	r2, [r7, #4]
 8024020:	6812      	ldr	r2, [r2, #0]
 8024022:	68b9      	ldr	r1, [r7, #8]
 8024024:	430b      	orrs	r3, r1
 8024026:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8024028:	687b      	ldr	r3, [r7, #4]
 802402a:	681b      	ldr	r3, [r3, #0]
 802402c:	695b      	ldr	r3, [r3, #20]
 802402e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8024032:	687b      	ldr	r3, [r7, #4]
 8024034:	699a      	ldr	r2, [r3, #24]
 8024036:	687b      	ldr	r3, [r7, #4]
 8024038:	681b      	ldr	r3, [r3, #0]
 802403a:	430a      	orrs	r2, r1
 802403c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 802403e:	687b      	ldr	r3, [r7, #4]
 8024040:	681b      	ldr	r3, [r3, #0]
 8024042:	4a2c      	ldr	r2, [pc, #176]	; (80240f4 <UART_SetConfig+0x114>)
 8024044:	4293      	cmp	r3, r2
 8024046:	d103      	bne.n	8024050 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8024048:	f7fe fde4 	bl	8022c14 <HAL_RCC_GetPCLK2Freq>
 802404c:	60f8      	str	r0, [r7, #12]
 802404e:	e002      	b.n	8024056 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8024050:	f7fe fdcc 	bl	8022bec <HAL_RCC_GetPCLK1Freq>
 8024054:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8024056:	68fa      	ldr	r2, [r7, #12]
 8024058:	4613      	mov	r3, r2
 802405a:	009b      	lsls	r3, r3, #2
 802405c:	4413      	add	r3, r2
 802405e:	009a      	lsls	r2, r3, #2
 8024060:	441a      	add	r2, r3
 8024062:	687b      	ldr	r3, [r7, #4]
 8024064:	685b      	ldr	r3, [r3, #4]
 8024066:	009b      	lsls	r3, r3, #2
 8024068:	fbb2 f3f3 	udiv	r3, r2, r3
 802406c:	4a22      	ldr	r2, [pc, #136]	; (80240f8 <UART_SetConfig+0x118>)
 802406e:	fba2 2303 	umull	r2, r3, r2, r3
 8024072:	095b      	lsrs	r3, r3, #5
 8024074:	0119      	lsls	r1, r3, #4
 8024076:	68fa      	ldr	r2, [r7, #12]
 8024078:	4613      	mov	r3, r2
 802407a:	009b      	lsls	r3, r3, #2
 802407c:	4413      	add	r3, r2
 802407e:	009a      	lsls	r2, r3, #2
 8024080:	441a      	add	r2, r3
 8024082:	687b      	ldr	r3, [r7, #4]
 8024084:	685b      	ldr	r3, [r3, #4]
 8024086:	009b      	lsls	r3, r3, #2
 8024088:	fbb2 f2f3 	udiv	r2, r2, r3
 802408c:	4b1a      	ldr	r3, [pc, #104]	; (80240f8 <UART_SetConfig+0x118>)
 802408e:	fba3 0302 	umull	r0, r3, r3, r2
 8024092:	095b      	lsrs	r3, r3, #5
 8024094:	2064      	movs	r0, #100	; 0x64
 8024096:	fb00 f303 	mul.w	r3, r0, r3
 802409a:	1ad3      	subs	r3, r2, r3
 802409c:	011b      	lsls	r3, r3, #4
 802409e:	3332      	adds	r3, #50	; 0x32
 80240a0:	4a15      	ldr	r2, [pc, #84]	; (80240f8 <UART_SetConfig+0x118>)
 80240a2:	fba2 2303 	umull	r2, r3, r2, r3
 80240a6:	095b      	lsrs	r3, r3, #5
 80240a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80240ac:	4419      	add	r1, r3
 80240ae:	68fa      	ldr	r2, [r7, #12]
 80240b0:	4613      	mov	r3, r2
 80240b2:	009b      	lsls	r3, r3, #2
 80240b4:	4413      	add	r3, r2
 80240b6:	009a      	lsls	r2, r3, #2
 80240b8:	441a      	add	r2, r3
 80240ba:	687b      	ldr	r3, [r7, #4]
 80240bc:	685b      	ldr	r3, [r3, #4]
 80240be:	009b      	lsls	r3, r3, #2
 80240c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80240c4:	4b0c      	ldr	r3, [pc, #48]	; (80240f8 <UART_SetConfig+0x118>)
 80240c6:	fba3 0302 	umull	r0, r3, r3, r2
 80240ca:	095b      	lsrs	r3, r3, #5
 80240cc:	2064      	movs	r0, #100	; 0x64
 80240ce:	fb00 f303 	mul.w	r3, r0, r3
 80240d2:	1ad3      	subs	r3, r2, r3
 80240d4:	011b      	lsls	r3, r3, #4
 80240d6:	3332      	adds	r3, #50	; 0x32
 80240d8:	4a07      	ldr	r2, [pc, #28]	; (80240f8 <UART_SetConfig+0x118>)
 80240da:	fba2 2303 	umull	r2, r3, r2, r3
 80240de:	095b      	lsrs	r3, r3, #5
 80240e0:	f003 020f 	and.w	r2, r3, #15
 80240e4:	687b      	ldr	r3, [r7, #4]
 80240e6:	681b      	ldr	r3, [r3, #0]
 80240e8:	440a      	add	r2, r1
 80240ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80240ec:	bf00      	nop
 80240ee:	3710      	adds	r7, #16
 80240f0:	46bd      	mov	sp, r7
 80240f2:	bd80      	pop	{r7, pc}
 80240f4:	40013800 	.word	0x40013800
 80240f8:	51eb851f 	.word	0x51eb851f

080240fc <__errno>:
 80240fc:	4b01      	ldr	r3, [pc, #4]	; (8024104 <__errno+0x8>)
 80240fe:	6818      	ldr	r0, [r3, #0]
 8024100:	4770      	bx	lr
 8024102:	bf00      	nop
 8024104:	20000108 	.word	0x20000108

08024108 <__libc_init_array>:
 8024108:	b570      	push	{r4, r5, r6, lr}
 802410a:	2600      	movs	r6, #0
 802410c:	4d0c      	ldr	r5, [pc, #48]	; (8024140 <__libc_init_array+0x38>)
 802410e:	4c0d      	ldr	r4, [pc, #52]	; (8024144 <__libc_init_array+0x3c>)
 8024110:	1b64      	subs	r4, r4, r5
 8024112:	10a4      	asrs	r4, r4, #2
 8024114:	42a6      	cmp	r6, r4
 8024116:	d109      	bne.n	802412c <__libc_init_array+0x24>
 8024118:	f000 fc5c 	bl	80249d4 <_init>
 802411c:	2600      	movs	r6, #0
 802411e:	4d0a      	ldr	r5, [pc, #40]	; (8024148 <__libc_init_array+0x40>)
 8024120:	4c0a      	ldr	r4, [pc, #40]	; (802414c <__libc_init_array+0x44>)
 8024122:	1b64      	subs	r4, r4, r5
 8024124:	10a4      	asrs	r4, r4, #2
 8024126:	42a6      	cmp	r6, r4
 8024128:	d105      	bne.n	8024136 <__libc_init_array+0x2e>
 802412a:	bd70      	pop	{r4, r5, r6, pc}
 802412c:	f855 3b04 	ldr.w	r3, [r5], #4
 8024130:	4798      	blx	r3
 8024132:	3601      	adds	r6, #1
 8024134:	e7ee      	b.n	8024114 <__libc_init_array+0xc>
 8024136:	f855 3b04 	ldr.w	r3, [r5], #4
 802413a:	4798      	blx	r3
 802413c:	3601      	adds	r6, #1
 802413e:	e7f2      	b.n	8024126 <__libc_init_array+0x1e>
 8024140:	080250d4 	.word	0x080250d4
 8024144:	080250d4 	.word	0x080250d4
 8024148:	080250d4 	.word	0x080250d4
 802414c:	080250d8 	.word	0x080250d8

08024150 <memset>:
 8024150:	4603      	mov	r3, r0
 8024152:	4402      	add	r2, r0
 8024154:	4293      	cmp	r3, r2
 8024156:	d100      	bne.n	802415a <memset+0xa>
 8024158:	4770      	bx	lr
 802415a:	f803 1b01 	strb.w	r1, [r3], #1
 802415e:	e7f9      	b.n	8024154 <memset+0x4>

08024160 <siprintf>:
 8024160:	b40e      	push	{r1, r2, r3}
 8024162:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8024166:	b500      	push	{lr}
 8024168:	b09c      	sub	sp, #112	; 0x70
 802416a:	ab1d      	add	r3, sp, #116	; 0x74
 802416c:	9002      	str	r0, [sp, #8]
 802416e:	9006      	str	r0, [sp, #24]
 8024170:	9107      	str	r1, [sp, #28]
 8024172:	9104      	str	r1, [sp, #16]
 8024174:	4808      	ldr	r0, [pc, #32]	; (8024198 <siprintf+0x38>)
 8024176:	4909      	ldr	r1, [pc, #36]	; (802419c <siprintf+0x3c>)
 8024178:	f853 2b04 	ldr.w	r2, [r3], #4
 802417c:	9105      	str	r1, [sp, #20]
 802417e:	6800      	ldr	r0, [r0, #0]
 8024180:	a902      	add	r1, sp, #8
 8024182:	9301      	str	r3, [sp, #4]
 8024184:	f000 f868 	bl	8024258 <_svfiprintf_r>
 8024188:	2200      	movs	r2, #0
 802418a:	9b02      	ldr	r3, [sp, #8]
 802418c:	701a      	strb	r2, [r3, #0]
 802418e:	b01c      	add	sp, #112	; 0x70
 8024190:	f85d eb04 	ldr.w	lr, [sp], #4
 8024194:	b003      	add	sp, #12
 8024196:	4770      	bx	lr
 8024198:	20000108 	.word	0x20000108
 802419c:	ffff0208 	.word	0xffff0208

080241a0 <__ssputs_r>:
 80241a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80241a4:	688e      	ldr	r6, [r1, #8]
 80241a6:	4682      	mov	sl, r0
 80241a8:	429e      	cmp	r6, r3
 80241aa:	460c      	mov	r4, r1
 80241ac:	4690      	mov	r8, r2
 80241ae:	461f      	mov	r7, r3
 80241b0:	d838      	bhi.n	8024224 <__ssputs_r+0x84>
 80241b2:	898a      	ldrh	r2, [r1, #12]
 80241b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80241b8:	d032      	beq.n	8024220 <__ssputs_r+0x80>
 80241ba:	6825      	ldr	r5, [r4, #0]
 80241bc:	6909      	ldr	r1, [r1, #16]
 80241be:	3301      	adds	r3, #1
 80241c0:	eba5 0901 	sub.w	r9, r5, r1
 80241c4:	6965      	ldr	r5, [r4, #20]
 80241c6:	444b      	add	r3, r9
 80241c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80241cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80241d0:	106d      	asrs	r5, r5, #1
 80241d2:	429d      	cmp	r5, r3
 80241d4:	bf38      	it	cc
 80241d6:	461d      	movcc	r5, r3
 80241d8:	0553      	lsls	r3, r2, #21
 80241da:	d531      	bpl.n	8024240 <__ssputs_r+0xa0>
 80241dc:	4629      	mov	r1, r5
 80241de:	f000 fb53 	bl	8024888 <_malloc_r>
 80241e2:	4606      	mov	r6, r0
 80241e4:	b950      	cbnz	r0, 80241fc <__ssputs_r+0x5c>
 80241e6:	230c      	movs	r3, #12
 80241e8:	f04f 30ff 	mov.w	r0, #4294967295
 80241ec:	f8ca 3000 	str.w	r3, [sl]
 80241f0:	89a3      	ldrh	r3, [r4, #12]
 80241f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80241f6:	81a3      	strh	r3, [r4, #12]
 80241f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80241fc:	464a      	mov	r2, r9
 80241fe:	6921      	ldr	r1, [r4, #16]
 8024200:	f000 face 	bl	80247a0 <memcpy>
 8024204:	89a3      	ldrh	r3, [r4, #12]
 8024206:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802420a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802420e:	81a3      	strh	r3, [r4, #12]
 8024210:	6126      	str	r6, [r4, #16]
 8024212:	444e      	add	r6, r9
 8024214:	6026      	str	r6, [r4, #0]
 8024216:	463e      	mov	r6, r7
 8024218:	6165      	str	r5, [r4, #20]
 802421a:	eba5 0509 	sub.w	r5, r5, r9
 802421e:	60a5      	str	r5, [r4, #8]
 8024220:	42be      	cmp	r6, r7
 8024222:	d900      	bls.n	8024226 <__ssputs_r+0x86>
 8024224:	463e      	mov	r6, r7
 8024226:	4632      	mov	r2, r6
 8024228:	4641      	mov	r1, r8
 802422a:	6820      	ldr	r0, [r4, #0]
 802422c:	f000 fac6 	bl	80247bc <memmove>
 8024230:	68a3      	ldr	r3, [r4, #8]
 8024232:	6822      	ldr	r2, [r4, #0]
 8024234:	1b9b      	subs	r3, r3, r6
 8024236:	4432      	add	r2, r6
 8024238:	2000      	movs	r0, #0
 802423a:	60a3      	str	r3, [r4, #8]
 802423c:	6022      	str	r2, [r4, #0]
 802423e:	e7db      	b.n	80241f8 <__ssputs_r+0x58>
 8024240:	462a      	mov	r2, r5
 8024242:	f000 fb7b 	bl	802493c <_realloc_r>
 8024246:	4606      	mov	r6, r0
 8024248:	2800      	cmp	r0, #0
 802424a:	d1e1      	bne.n	8024210 <__ssputs_r+0x70>
 802424c:	4650      	mov	r0, sl
 802424e:	6921      	ldr	r1, [r4, #16]
 8024250:	f000 face 	bl	80247f0 <_free_r>
 8024254:	e7c7      	b.n	80241e6 <__ssputs_r+0x46>
	...

08024258 <_svfiprintf_r>:
 8024258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802425c:	4698      	mov	r8, r3
 802425e:	898b      	ldrh	r3, [r1, #12]
 8024260:	4607      	mov	r7, r0
 8024262:	061b      	lsls	r3, r3, #24
 8024264:	460d      	mov	r5, r1
 8024266:	4614      	mov	r4, r2
 8024268:	b09d      	sub	sp, #116	; 0x74
 802426a:	d50e      	bpl.n	802428a <_svfiprintf_r+0x32>
 802426c:	690b      	ldr	r3, [r1, #16]
 802426e:	b963      	cbnz	r3, 802428a <_svfiprintf_r+0x32>
 8024270:	2140      	movs	r1, #64	; 0x40
 8024272:	f000 fb09 	bl	8024888 <_malloc_r>
 8024276:	6028      	str	r0, [r5, #0]
 8024278:	6128      	str	r0, [r5, #16]
 802427a:	b920      	cbnz	r0, 8024286 <_svfiprintf_r+0x2e>
 802427c:	230c      	movs	r3, #12
 802427e:	603b      	str	r3, [r7, #0]
 8024280:	f04f 30ff 	mov.w	r0, #4294967295
 8024284:	e0d1      	b.n	802442a <_svfiprintf_r+0x1d2>
 8024286:	2340      	movs	r3, #64	; 0x40
 8024288:	616b      	str	r3, [r5, #20]
 802428a:	2300      	movs	r3, #0
 802428c:	9309      	str	r3, [sp, #36]	; 0x24
 802428e:	2320      	movs	r3, #32
 8024290:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024294:	2330      	movs	r3, #48	; 0x30
 8024296:	f04f 0901 	mov.w	r9, #1
 802429a:	f8cd 800c 	str.w	r8, [sp, #12]
 802429e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8024444 <_svfiprintf_r+0x1ec>
 80242a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80242a6:	4623      	mov	r3, r4
 80242a8:	469a      	mov	sl, r3
 80242aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80242ae:	b10a      	cbz	r2, 80242b4 <_svfiprintf_r+0x5c>
 80242b0:	2a25      	cmp	r2, #37	; 0x25
 80242b2:	d1f9      	bne.n	80242a8 <_svfiprintf_r+0x50>
 80242b4:	ebba 0b04 	subs.w	fp, sl, r4
 80242b8:	d00b      	beq.n	80242d2 <_svfiprintf_r+0x7a>
 80242ba:	465b      	mov	r3, fp
 80242bc:	4622      	mov	r2, r4
 80242be:	4629      	mov	r1, r5
 80242c0:	4638      	mov	r0, r7
 80242c2:	f7ff ff6d 	bl	80241a0 <__ssputs_r>
 80242c6:	3001      	adds	r0, #1
 80242c8:	f000 80aa 	beq.w	8024420 <_svfiprintf_r+0x1c8>
 80242cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80242ce:	445a      	add	r2, fp
 80242d0:	9209      	str	r2, [sp, #36]	; 0x24
 80242d2:	f89a 3000 	ldrb.w	r3, [sl]
 80242d6:	2b00      	cmp	r3, #0
 80242d8:	f000 80a2 	beq.w	8024420 <_svfiprintf_r+0x1c8>
 80242dc:	2300      	movs	r3, #0
 80242de:	f04f 32ff 	mov.w	r2, #4294967295
 80242e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80242e6:	f10a 0a01 	add.w	sl, sl, #1
 80242ea:	9304      	str	r3, [sp, #16]
 80242ec:	9307      	str	r3, [sp, #28]
 80242ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80242f2:	931a      	str	r3, [sp, #104]	; 0x68
 80242f4:	4654      	mov	r4, sl
 80242f6:	2205      	movs	r2, #5
 80242f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80242fc:	4851      	ldr	r0, [pc, #324]	; (8024444 <_svfiprintf_r+0x1ec>)
 80242fe:	f000 fa41 	bl	8024784 <memchr>
 8024302:	9a04      	ldr	r2, [sp, #16]
 8024304:	b9d8      	cbnz	r0, 802433e <_svfiprintf_r+0xe6>
 8024306:	06d0      	lsls	r0, r2, #27
 8024308:	bf44      	itt	mi
 802430a:	2320      	movmi	r3, #32
 802430c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024310:	0711      	lsls	r1, r2, #28
 8024312:	bf44      	itt	mi
 8024314:	232b      	movmi	r3, #43	; 0x2b
 8024316:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802431a:	f89a 3000 	ldrb.w	r3, [sl]
 802431e:	2b2a      	cmp	r3, #42	; 0x2a
 8024320:	d015      	beq.n	802434e <_svfiprintf_r+0xf6>
 8024322:	4654      	mov	r4, sl
 8024324:	2000      	movs	r0, #0
 8024326:	f04f 0c0a 	mov.w	ip, #10
 802432a:	9a07      	ldr	r2, [sp, #28]
 802432c:	4621      	mov	r1, r4
 802432e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024332:	3b30      	subs	r3, #48	; 0x30
 8024334:	2b09      	cmp	r3, #9
 8024336:	d94e      	bls.n	80243d6 <_svfiprintf_r+0x17e>
 8024338:	b1b0      	cbz	r0, 8024368 <_svfiprintf_r+0x110>
 802433a:	9207      	str	r2, [sp, #28]
 802433c:	e014      	b.n	8024368 <_svfiprintf_r+0x110>
 802433e:	eba0 0308 	sub.w	r3, r0, r8
 8024342:	fa09 f303 	lsl.w	r3, r9, r3
 8024346:	4313      	orrs	r3, r2
 8024348:	46a2      	mov	sl, r4
 802434a:	9304      	str	r3, [sp, #16]
 802434c:	e7d2      	b.n	80242f4 <_svfiprintf_r+0x9c>
 802434e:	9b03      	ldr	r3, [sp, #12]
 8024350:	1d19      	adds	r1, r3, #4
 8024352:	681b      	ldr	r3, [r3, #0]
 8024354:	9103      	str	r1, [sp, #12]
 8024356:	2b00      	cmp	r3, #0
 8024358:	bfbb      	ittet	lt
 802435a:	425b      	neglt	r3, r3
 802435c:	f042 0202 	orrlt.w	r2, r2, #2
 8024360:	9307      	strge	r3, [sp, #28]
 8024362:	9307      	strlt	r3, [sp, #28]
 8024364:	bfb8      	it	lt
 8024366:	9204      	strlt	r2, [sp, #16]
 8024368:	7823      	ldrb	r3, [r4, #0]
 802436a:	2b2e      	cmp	r3, #46	; 0x2e
 802436c:	d10c      	bne.n	8024388 <_svfiprintf_r+0x130>
 802436e:	7863      	ldrb	r3, [r4, #1]
 8024370:	2b2a      	cmp	r3, #42	; 0x2a
 8024372:	d135      	bne.n	80243e0 <_svfiprintf_r+0x188>
 8024374:	9b03      	ldr	r3, [sp, #12]
 8024376:	3402      	adds	r4, #2
 8024378:	1d1a      	adds	r2, r3, #4
 802437a:	681b      	ldr	r3, [r3, #0]
 802437c:	9203      	str	r2, [sp, #12]
 802437e:	2b00      	cmp	r3, #0
 8024380:	bfb8      	it	lt
 8024382:	f04f 33ff 	movlt.w	r3, #4294967295
 8024386:	9305      	str	r3, [sp, #20]
 8024388:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8024454 <_svfiprintf_r+0x1fc>
 802438c:	2203      	movs	r2, #3
 802438e:	4650      	mov	r0, sl
 8024390:	7821      	ldrb	r1, [r4, #0]
 8024392:	f000 f9f7 	bl	8024784 <memchr>
 8024396:	b140      	cbz	r0, 80243aa <_svfiprintf_r+0x152>
 8024398:	2340      	movs	r3, #64	; 0x40
 802439a:	eba0 000a 	sub.w	r0, r0, sl
 802439e:	fa03 f000 	lsl.w	r0, r3, r0
 80243a2:	9b04      	ldr	r3, [sp, #16]
 80243a4:	3401      	adds	r4, #1
 80243a6:	4303      	orrs	r3, r0
 80243a8:	9304      	str	r3, [sp, #16]
 80243aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80243ae:	2206      	movs	r2, #6
 80243b0:	4825      	ldr	r0, [pc, #148]	; (8024448 <_svfiprintf_r+0x1f0>)
 80243b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80243b6:	f000 f9e5 	bl	8024784 <memchr>
 80243ba:	2800      	cmp	r0, #0
 80243bc:	d038      	beq.n	8024430 <_svfiprintf_r+0x1d8>
 80243be:	4b23      	ldr	r3, [pc, #140]	; (802444c <_svfiprintf_r+0x1f4>)
 80243c0:	bb1b      	cbnz	r3, 802440a <_svfiprintf_r+0x1b2>
 80243c2:	9b03      	ldr	r3, [sp, #12]
 80243c4:	3307      	adds	r3, #7
 80243c6:	f023 0307 	bic.w	r3, r3, #7
 80243ca:	3308      	adds	r3, #8
 80243cc:	9303      	str	r3, [sp, #12]
 80243ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80243d0:	4433      	add	r3, r6
 80243d2:	9309      	str	r3, [sp, #36]	; 0x24
 80243d4:	e767      	b.n	80242a6 <_svfiprintf_r+0x4e>
 80243d6:	460c      	mov	r4, r1
 80243d8:	2001      	movs	r0, #1
 80243da:	fb0c 3202 	mla	r2, ip, r2, r3
 80243de:	e7a5      	b.n	802432c <_svfiprintf_r+0xd4>
 80243e0:	2300      	movs	r3, #0
 80243e2:	f04f 0c0a 	mov.w	ip, #10
 80243e6:	4619      	mov	r1, r3
 80243e8:	3401      	adds	r4, #1
 80243ea:	9305      	str	r3, [sp, #20]
 80243ec:	4620      	mov	r0, r4
 80243ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80243f2:	3a30      	subs	r2, #48	; 0x30
 80243f4:	2a09      	cmp	r2, #9
 80243f6:	d903      	bls.n	8024400 <_svfiprintf_r+0x1a8>
 80243f8:	2b00      	cmp	r3, #0
 80243fa:	d0c5      	beq.n	8024388 <_svfiprintf_r+0x130>
 80243fc:	9105      	str	r1, [sp, #20]
 80243fe:	e7c3      	b.n	8024388 <_svfiprintf_r+0x130>
 8024400:	4604      	mov	r4, r0
 8024402:	2301      	movs	r3, #1
 8024404:	fb0c 2101 	mla	r1, ip, r1, r2
 8024408:	e7f0      	b.n	80243ec <_svfiprintf_r+0x194>
 802440a:	ab03      	add	r3, sp, #12
 802440c:	9300      	str	r3, [sp, #0]
 802440e:	462a      	mov	r2, r5
 8024410:	4638      	mov	r0, r7
 8024412:	4b0f      	ldr	r3, [pc, #60]	; (8024450 <_svfiprintf_r+0x1f8>)
 8024414:	a904      	add	r1, sp, #16
 8024416:	f3af 8000 	nop.w
 802441a:	1c42      	adds	r2, r0, #1
 802441c:	4606      	mov	r6, r0
 802441e:	d1d6      	bne.n	80243ce <_svfiprintf_r+0x176>
 8024420:	89ab      	ldrh	r3, [r5, #12]
 8024422:	065b      	lsls	r3, r3, #25
 8024424:	f53f af2c 	bmi.w	8024280 <_svfiprintf_r+0x28>
 8024428:	9809      	ldr	r0, [sp, #36]	; 0x24
 802442a:	b01d      	add	sp, #116	; 0x74
 802442c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024430:	ab03      	add	r3, sp, #12
 8024432:	9300      	str	r3, [sp, #0]
 8024434:	462a      	mov	r2, r5
 8024436:	4638      	mov	r0, r7
 8024438:	4b05      	ldr	r3, [pc, #20]	; (8024450 <_svfiprintf_r+0x1f8>)
 802443a:	a904      	add	r1, sp, #16
 802443c:	f000 f87c 	bl	8024538 <_printf_i>
 8024440:	e7eb      	b.n	802441a <_svfiprintf_r+0x1c2>
 8024442:	bf00      	nop
 8024444:	080250a0 	.word	0x080250a0
 8024448:	080250aa 	.word	0x080250aa
 802444c:	00000000 	.word	0x00000000
 8024450:	080241a1 	.word	0x080241a1
 8024454:	080250a6 	.word	0x080250a6

08024458 <_printf_common>:
 8024458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802445c:	4616      	mov	r6, r2
 802445e:	4699      	mov	r9, r3
 8024460:	688a      	ldr	r2, [r1, #8]
 8024462:	690b      	ldr	r3, [r1, #16]
 8024464:	4607      	mov	r7, r0
 8024466:	4293      	cmp	r3, r2
 8024468:	bfb8      	it	lt
 802446a:	4613      	movlt	r3, r2
 802446c:	6033      	str	r3, [r6, #0]
 802446e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8024472:	460c      	mov	r4, r1
 8024474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8024478:	b10a      	cbz	r2, 802447e <_printf_common+0x26>
 802447a:	3301      	adds	r3, #1
 802447c:	6033      	str	r3, [r6, #0]
 802447e:	6823      	ldr	r3, [r4, #0]
 8024480:	0699      	lsls	r1, r3, #26
 8024482:	bf42      	ittt	mi
 8024484:	6833      	ldrmi	r3, [r6, #0]
 8024486:	3302      	addmi	r3, #2
 8024488:	6033      	strmi	r3, [r6, #0]
 802448a:	6825      	ldr	r5, [r4, #0]
 802448c:	f015 0506 	ands.w	r5, r5, #6
 8024490:	d106      	bne.n	80244a0 <_printf_common+0x48>
 8024492:	f104 0a19 	add.w	sl, r4, #25
 8024496:	68e3      	ldr	r3, [r4, #12]
 8024498:	6832      	ldr	r2, [r6, #0]
 802449a:	1a9b      	subs	r3, r3, r2
 802449c:	42ab      	cmp	r3, r5
 802449e:	dc28      	bgt.n	80244f2 <_printf_common+0x9a>
 80244a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80244a4:	1e13      	subs	r3, r2, #0
 80244a6:	6822      	ldr	r2, [r4, #0]
 80244a8:	bf18      	it	ne
 80244aa:	2301      	movne	r3, #1
 80244ac:	0692      	lsls	r2, r2, #26
 80244ae:	d42d      	bmi.n	802450c <_printf_common+0xb4>
 80244b0:	4649      	mov	r1, r9
 80244b2:	4638      	mov	r0, r7
 80244b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80244b8:	47c0      	blx	r8
 80244ba:	3001      	adds	r0, #1
 80244bc:	d020      	beq.n	8024500 <_printf_common+0xa8>
 80244be:	6823      	ldr	r3, [r4, #0]
 80244c0:	68e5      	ldr	r5, [r4, #12]
 80244c2:	f003 0306 	and.w	r3, r3, #6
 80244c6:	2b04      	cmp	r3, #4
 80244c8:	bf18      	it	ne
 80244ca:	2500      	movne	r5, #0
 80244cc:	6832      	ldr	r2, [r6, #0]
 80244ce:	f04f 0600 	mov.w	r6, #0
 80244d2:	68a3      	ldr	r3, [r4, #8]
 80244d4:	bf08      	it	eq
 80244d6:	1aad      	subeq	r5, r5, r2
 80244d8:	6922      	ldr	r2, [r4, #16]
 80244da:	bf08      	it	eq
 80244dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80244e0:	4293      	cmp	r3, r2
 80244e2:	bfc4      	itt	gt
 80244e4:	1a9b      	subgt	r3, r3, r2
 80244e6:	18ed      	addgt	r5, r5, r3
 80244e8:	341a      	adds	r4, #26
 80244ea:	42b5      	cmp	r5, r6
 80244ec:	d11a      	bne.n	8024524 <_printf_common+0xcc>
 80244ee:	2000      	movs	r0, #0
 80244f0:	e008      	b.n	8024504 <_printf_common+0xac>
 80244f2:	2301      	movs	r3, #1
 80244f4:	4652      	mov	r2, sl
 80244f6:	4649      	mov	r1, r9
 80244f8:	4638      	mov	r0, r7
 80244fa:	47c0      	blx	r8
 80244fc:	3001      	adds	r0, #1
 80244fe:	d103      	bne.n	8024508 <_printf_common+0xb0>
 8024500:	f04f 30ff 	mov.w	r0, #4294967295
 8024504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024508:	3501      	adds	r5, #1
 802450a:	e7c4      	b.n	8024496 <_printf_common+0x3e>
 802450c:	2030      	movs	r0, #48	; 0x30
 802450e:	18e1      	adds	r1, r4, r3
 8024510:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8024514:	1c5a      	adds	r2, r3, #1
 8024516:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802451a:	4422      	add	r2, r4
 802451c:	3302      	adds	r3, #2
 802451e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8024522:	e7c5      	b.n	80244b0 <_printf_common+0x58>
 8024524:	2301      	movs	r3, #1
 8024526:	4622      	mov	r2, r4
 8024528:	4649      	mov	r1, r9
 802452a:	4638      	mov	r0, r7
 802452c:	47c0      	blx	r8
 802452e:	3001      	adds	r0, #1
 8024530:	d0e6      	beq.n	8024500 <_printf_common+0xa8>
 8024532:	3601      	adds	r6, #1
 8024534:	e7d9      	b.n	80244ea <_printf_common+0x92>
	...

08024538 <_printf_i>:
 8024538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802453c:	460c      	mov	r4, r1
 802453e:	7e27      	ldrb	r7, [r4, #24]
 8024540:	4691      	mov	r9, r2
 8024542:	2f78      	cmp	r7, #120	; 0x78
 8024544:	4680      	mov	r8, r0
 8024546:	469a      	mov	sl, r3
 8024548:	990c      	ldr	r1, [sp, #48]	; 0x30
 802454a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802454e:	d807      	bhi.n	8024560 <_printf_i+0x28>
 8024550:	2f62      	cmp	r7, #98	; 0x62
 8024552:	d80a      	bhi.n	802456a <_printf_i+0x32>
 8024554:	2f00      	cmp	r7, #0
 8024556:	f000 80d9 	beq.w	802470c <_printf_i+0x1d4>
 802455a:	2f58      	cmp	r7, #88	; 0x58
 802455c:	f000 80a4 	beq.w	80246a8 <_printf_i+0x170>
 8024560:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8024564:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8024568:	e03a      	b.n	80245e0 <_printf_i+0xa8>
 802456a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802456e:	2b15      	cmp	r3, #21
 8024570:	d8f6      	bhi.n	8024560 <_printf_i+0x28>
 8024572:	a001      	add	r0, pc, #4	; (adr r0, 8024578 <_printf_i+0x40>)
 8024574:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8024578:	080245d1 	.word	0x080245d1
 802457c:	080245e5 	.word	0x080245e5
 8024580:	08024561 	.word	0x08024561
 8024584:	08024561 	.word	0x08024561
 8024588:	08024561 	.word	0x08024561
 802458c:	08024561 	.word	0x08024561
 8024590:	080245e5 	.word	0x080245e5
 8024594:	08024561 	.word	0x08024561
 8024598:	08024561 	.word	0x08024561
 802459c:	08024561 	.word	0x08024561
 80245a0:	08024561 	.word	0x08024561
 80245a4:	080246f3 	.word	0x080246f3
 80245a8:	08024615 	.word	0x08024615
 80245ac:	080246d5 	.word	0x080246d5
 80245b0:	08024561 	.word	0x08024561
 80245b4:	08024561 	.word	0x08024561
 80245b8:	08024715 	.word	0x08024715
 80245bc:	08024561 	.word	0x08024561
 80245c0:	08024615 	.word	0x08024615
 80245c4:	08024561 	.word	0x08024561
 80245c8:	08024561 	.word	0x08024561
 80245cc:	080246dd 	.word	0x080246dd
 80245d0:	680b      	ldr	r3, [r1, #0]
 80245d2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80245d6:	1d1a      	adds	r2, r3, #4
 80245d8:	681b      	ldr	r3, [r3, #0]
 80245da:	600a      	str	r2, [r1, #0]
 80245dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80245e0:	2301      	movs	r3, #1
 80245e2:	e0a4      	b.n	802472e <_printf_i+0x1f6>
 80245e4:	6825      	ldr	r5, [r4, #0]
 80245e6:	6808      	ldr	r0, [r1, #0]
 80245e8:	062e      	lsls	r6, r5, #24
 80245ea:	f100 0304 	add.w	r3, r0, #4
 80245ee:	d50a      	bpl.n	8024606 <_printf_i+0xce>
 80245f0:	6805      	ldr	r5, [r0, #0]
 80245f2:	600b      	str	r3, [r1, #0]
 80245f4:	2d00      	cmp	r5, #0
 80245f6:	da03      	bge.n	8024600 <_printf_i+0xc8>
 80245f8:	232d      	movs	r3, #45	; 0x2d
 80245fa:	426d      	negs	r5, r5
 80245fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024600:	230a      	movs	r3, #10
 8024602:	485e      	ldr	r0, [pc, #376]	; (802477c <_printf_i+0x244>)
 8024604:	e019      	b.n	802463a <_printf_i+0x102>
 8024606:	f015 0f40 	tst.w	r5, #64	; 0x40
 802460a:	6805      	ldr	r5, [r0, #0]
 802460c:	600b      	str	r3, [r1, #0]
 802460e:	bf18      	it	ne
 8024610:	b22d      	sxthne	r5, r5
 8024612:	e7ef      	b.n	80245f4 <_printf_i+0xbc>
 8024614:	680b      	ldr	r3, [r1, #0]
 8024616:	6825      	ldr	r5, [r4, #0]
 8024618:	1d18      	adds	r0, r3, #4
 802461a:	6008      	str	r0, [r1, #0]
 802461c:	0628      	lsls	r0, r5, #24
 802461e:	d501      	bpl.n	8024624 <_printf_i+0xec>
 8024620:	681d      	ldr	r5, [r3, #0]
 8024622:	e002      	b.n	802462a <_printf_i+0xf2>
 8024624:	0669      	lsls	r1, r5, #25
 8024626:	d5fb      	bpl.n	8024620 <_printf_i+0xe8>
 8024628:	881d      	ldrh	r5, [r3, #0]
 802462a:	2f6f      	cmp	r7, #111	; 0x6f
 802462c:	bf0c      	ite	eq
 802462e:	2308      	moveq	r3, #8
 8024630:	230a      	movne	r3, #10
 8024632:	4852      	ldr	r0, [pc, #328]	; (802477c <_printf_i+0x244>)
 8024634:	2100      	movs	r1, #0
 8024636:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802463a:	6866      	ldr	r6, [r4, #4]
 802463c:	2e00      	cmp	r6, #0
 802463e:	bfa8      	it	ge
 8024640:	6821      	ldrge	r1, [r4, #0]
 8024642:	60a6      	str	r6, [r4, #8]
 8024644:	bfa4      	itt	ge
 8024646:	f021 0104 	bicge.w	r1, r1, #4
 802464a:	6021      	strge	r1, [r4, #0]
 802464c:	b90d      	cbnz	r5, 8024652 <_printf_i+0x11a>
 802464e:	2e00      	cmp	r6, #0
 8024650:	d04d      	beq.n	80246ee <_printf_i+0x1b6>
 8024652:	4616      	mov	r6, r2
 8024654:	fbb5 f1f3 	udiv	r1, r5, r3
 8024658:	fb03 5711 	mls	r7, r3, r1, r5
 802465c:	5dc7      	ldrb	r7, [r0, r7]
 802465e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8024662:	462f      	mov	r7, r5
 8024664:	42bb      	cmp	r3, r7
 8024666:	460d      	mov	r5, r1
 8024668:	d9f4      	bls.n	8024654 <_printf_i+0x11c>
 802466a:	2b08      	cmp	r3, #8
 802466c:	d10b      	bne.n	8024686 <_printf_i+0x14e>
 802466e:	6823      	ldr	r3, [r4, #0]
 8024670:	07df      	lsls	r7, r3, #31
 8024672:	d508      	bpl.n	8024686 <_printf_i+0x14e>
 8024674:	6923      	ldr	r3, [r4, #16]
 8024676:	6861      	ldr	r1, [r4, #4]
 8024678:	4299      	cmp	r1, r3
 802467a:	bfde      	ittt	le
 802467c:	2330      	movle	r3, #48	; 0x30
 802467e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8024682:	f106 36ff 	addle.w	r6, r6, #4294967295
 8024686:	1b92      	subs	r2, r2, r6
 8024688:	6122      	str	r2, [r4, #16]
 802468a:	464b      	mov	r3, r9
 802468c:	4621      	mov	r1, r4
 802468e:	4640      	mov	r0, r8
 8024690:	f8cd a000 	str.w	sl, [sp]
 8024694:	aa03      	add	r2, sp, #12
 8024696:	f7ff fedf 	bl	8024458 <_printf_common>
 802469a:	3001      	adds	r0, #1
 802469c:	d14c      	bne.n	8024738 <_printf_i+0x200>
 802469e:	f04f 30ff 	mov.w	r0, #4294967295
 80246a2:	b004      	add	sp, #16
 80246a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80246a8:	4834      	ldr	r0, [pc, #208]	; (802477c <_printf_i+0x244>)
 80246aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80246ae:	680e      	ldr	r6, [r1, #0]
 80246b0:	6823      	ldr	r3, [r4, #0]
 80246b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80246b6:	061f      	lsls	r7, r3, #24
 80246b8:	600e      	str	r6, [r1, #0]
 80246ba:	d514      	bpl.n	80246e6 <_printf_i+0x1ae>
 80246bc:	07d9      	lsls	r1, r3, #31
 80246be:	bf44      	itt	mi
 80246c0:	f043 0320 	orrmi.w	r3, r3, #32
 80246c4:	6023      	strmi	r3, [r4, #0]
 80246c6:	b91d      	cbnz	r5, 80246d0 <_printf_i+0x198>
 80246c8:	6823      	ldr	r3, [r4, #0]
 80246ca:	f023 0320 	bic.w	r3, r3, #32
 80246ce:	6023      	str	r3, [r4, #0]
 80246d0:	2310      	movs	r3, #16
 80246d2:	e7af      	b.n	8024634 <_printf_i+0xfc>
 80246d4:	6823      	ldr	r3, [r4, #0]
 80246d6:	f043 0320 	orr.w	r3, r3, #32
 80246da:	6023      	str	r3, [r4, #0]
 80246dc:	2378      	movs	r3, #120	; 0x78
 80246de:	4828      	ldr	r0, [pc, #160]	; (8024780 <_printf_i+0x248>)
 80246e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80246e4:	e7e3      	b.n	80246ae <_printf_i+0x176>
 80246e6:	065e      	lsls	r6, r3, #25
 80246e8:	bf48      	it	mi
 80246ea:	b2ad      	uxthmi	r5, r5
 80246ec:	e7e6      	b.n	80246bc <_printf_i+0x184>
 80246ee:	4616      	mov	r6, r2
 80246f0:	e7bb      	b.n	802466a <_printf_i+0x132>
 80246f2:	680b      	ldr	r3, [r1, #0]
 80246f4:	6826      	ldr	r6, [r4, #0]
 80246f6:	1d1d      	adds	r5, r3, #4
 80246f8:	6960      	ldr	r0, [r4, #20]
 80246fa:	600d      	str	r5, [r1, #0]
 80246fc:	0635      	lsls	r5, r6, #24
 80246fe:	681b      	ldr	r3, [r3, #0]
 8024700:	d501      	bpl.n	8024706 <_printf_i+0x1ce>
 8024702:	6018      	str	r0, [r3, #0]
 8024704:	e002      	b.n	802470c <_printf_i+0x1d4>
 8024706:	0671      	lsls	r1, r6, #25
 8024708:	d5fb      	bpl.n	8024702 <_printf_i+0x1ca>
 802470a:	8018      	strh	r0, [r3, #0]
 802470c:	2300      	movs	r3, #0
 802470e:	4616      	mov	r6, r2
 8024710:	6123      	str	r3, [r4, #16]
 8024712:	e7ba      	b.n	802468a <_printf_i+0x152>
 8024714:	680b      	ldr	r3, [r1, #0]
 8024716:	1d1a      	adds	r2, r3, #4
 8024718:	600a      	str	r2, [r1, #0]
 802471a:	681e      	ldr	r6, [r3, #0]
 802471c:	2100      	movs	r1, #0
 802471e:	4630      	mov	r0, r6
 8024720:	6862      	ldr	r2, [r4, #4]
 8024722:	f000 f82f 	bl	8024784 <memchr>
 8024726:	b108      	cbz	r0, 802472c <_printf_i+0x1f4>
 8024728:	1b80      	subs	r0, r0, r6
 802472a:	6060      	str	r0, [r4, #4]
 802472c:	6863      	ldr	r3, [r4, #4]
 802472e:	6123      	str	r3, [r4, #16]
 8024730:	2300      	movs	r3, #0
 8024732:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024736:	e7a8      	b.n	802468a <_printf_i+0x152>
 8024738:	4632      	mov	r2, r6
 802473a:	4649      	mov	r1, r9
 802473c:	4640      	mov	r0, r8
 802473e:	6923      	ldr	r3, [r4, #16]
 8024740:	47d0      	blx	sl
 8024742:	3001      	adds	r0, #1
 8024744:	d0ab      	beq.n	802469e <_printf_i+0x166>
 8024746:	6823      	ldr	r3, [r4, #0]
 8024748:	079b      	lsls	r3, r3, #30
 802474a:	d413      	bmi.n	8024774 <_printf_i+0x23c>
 802474c:	68e0      	ldr	r0, [r4, #12]
 802474e:	9b03      	ldr	r3, [sp, #12]
 8024750:	4298      	cmp	r0, r3
 8024752:	bfb8      	it	lt
 8024754:	4618      	movlt	r0, r3
 8024756:	e7a4      	b.n	80246a2 <_printf_i+0x16a>
 8024758:	2301      	movs	r3, #1
 802475a:	4632      	mov	r2, r6
 802475c:	4649      	mov	r1, r9
 802475e:	4640      	mov	r0, r8
 8024760:	47d0      	blx	sl
 8024762:	3001      	adds	r0, #1
 8024764:	d09b      	beq.n	802469e <_printf_i+0x166>
 8024766:	3501      	adds	r5, #1
 8024768:	68e3      	ldr	r3, [r4, #12]
 802476a:	9903      	ldr	r1, [sp, #12]
 802476c:	1a5b      	subs	r3, r3, r1
 802476e:	42ab      	cmp	r3, r5
 8024770:	dcf2      	bgt.n	8024758 <_printf_i+0x220>
 8024772:	e7eb      	b.n	802474c <_printf_i+0x214>
 8024774:	2500      	movs	r5, #0
 8024776:	f104 0619 	add.w	r6, r4, #25
 802477a:	e7f5      	b.n	8024768 <_printf_i+0x230>
 802477c:	080250b1 	.word	0x080250b1
 8024780:	080250c2 	.word	0x080250c2

08024784 <memchr>:
 8024784:	4603      	mov	r3, r0
 8024786:	b510      	push	{r4, lr}
 8024788:	b2c9      	uxtb	r1, r1
 802478a:	4402      	add	r2, r0
 802478c:	4293      	cmp	r3, r2
 802478e:	4618      	mov	r0, r3
 8024790:	d101      	bne.n	8024796 <memchr+0x12>
 8024792:	2000      	movs	r0, #0
 8024794:	e003      	b.n	802479e <memchr+0x1a>
 8024796:	7804      	ldrb	r4, [r0, #0]
 8024798:	3301      	adds	r3, #1
 802479a:	428c      	cmp	r4, r1
 802479c:	d1f6      	bne.n	802478c <memchr+0x8>
 802479e:	bd10      	pop	{r4, pc}

080247a0 <memcpy>:
 80247a0:	440a      	add	r2, r1
 80247a2:	4291      	cmp	r1, r2
 80247a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80247a8:	d100      	bne.n	80247ac <memcpy+0xc>
 80247aa:	4770      	bx	lr
 80247ac:	b510      	push	{r4, lr}
 80247ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80247b2:	4291      	cmp	r1, r2
 80247b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80247b8:	d1f9      	bne.n	80247ae <memcpy+0xe>
 80247ba:	bd10      	pop	{r4, pc}

080247bc <memmove>:
 80247bc:	4288      	cmp	r0, r1
 80247be:	b510      	push	{r4, lr}
 80247c0:	eb01 0402 	add.w	r4, r1, r2
 80247c4:	d902      	bls.n	80247cc <memmove+0x10>
 80247c6:	4284      	cmp	r4, r0
 80247c8:	4623      	mov	r3, r4
 80247ca:	d807      	bhi.n	80247dc <memmove+0x20>
 80247cc:	1e43      	subs	r3, r0, #1
 80247ce:	42a1      	cmp	r1, r4
 80247d0:	d008      	beq.n	80247e4 <memmove+0x28>
 80247d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80247d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80247da:	e7f8      	b.n	80247ce <memmove+0x12>
 80247dc:	4601      	mov	r1, r0
 80247de:	4402      	add	r2, r0
 80247e0:	428a      	cmp	r2, r1
 80247e2:	d100      	bne.n	80247e6 <memmove+0x2a>
 80247e4:	bd10      	pop	{r4, pc}
 80247e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80247ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80247ee:	e7f7      	b.n	80247e0 <memmove+0x24>

080247f0 <_free_r>:
 80247f0:	b538      	push	{r3, r4, r5, lr}
 80247f2:	4605      	mov	r5, r0
 80247f4:	2900      	cmp	r1, #0
 80247f6:	d043      	beq.n	8024880 <_free_r+0x90>
 80247f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80247fc:	1f0c      	subs	r4, r1, #4
 80247fe:	2b00      	cmp	r3, #0
 8024800:	bfb8      	it	lt
 8024802:	18e4      	addlt	r4, r4, r3
 8024804:	f000 f8d0 	bl	80249a8 <__malloc_lock>
 8024808:	4a1e      	ldr	r2, [pc, #120]	; (8024884 <_free_r+0x94>)
 802480a:	6813      	ldr	r3, [r2, #0]
 802480c:	4610      	mov	r0, r2
 802480e:	b933      	cbnz	r3, 802481e <_free_r+0x2e>
 8024810:	6063      	str	r3, [r4, #4]
 8024812:	6014      	str	r4, [r2, #0]
 8024814:	4628      	mov	r0, r5
 8024816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802481a:	f000 b8cb 	b.w	80249b4 <__malloc_unlock>
 802481e:	42a3      	cmp	r3, r4
 8024820:	d90a      	bls.n	8024838 <_free_r+0x48>
 8024822:	6821      	ldr	r1, [r4, #0]
 8024824:	1862      	adds	r2, r4, r1
 8024826:	4293      	cmp	r3, r2
 8024828:	bf01      	itttt	eq
 802482a:	681a      	ldreq	r2, [r3, #0]
 802482c:	685b      	ldreq	r3, [r3, #4]
 802482e:	1852      	addeq	r2, r2, r1
 8024830:	6022      	streq	r2, [r4, #0]
 8024832:	6063      	str	r3, [r4, #4]
 8024834:	6004      	str	r4, [r0, #0]
 8024836:	e7ed      	b.n	8024814 <_free_r+0x24>
 8024838:	461a      	mov	r2, r3
 802483a:	685b      	ldr	r3, [r3, #4]
 802483c:	b10b      	cbz	r3, 8024842 <_free_r+0x52>
 802483e:	42a3      	cmp	r3, r4
 8024840:	d9fa      	bls.n	8024838 <_free_r+0x48>
 8024842:	6811      	ldr	r1, [r2, #0]
 8024844:	1850      	adds	r0, r2, r1
 8024846:	42a0      	cmp	r0, r4
 8024848:	d10b      	bne.n	8024862 <_free_r+0x72>
 802484a:	6820      	ldr	r0, [r4, #0]
 802484c:	4401      	add	r1, r0
 802484e:	1850      	adds	r0, r2, r1
 8024850:	4283      	cmp	r3, r0
 8024852:	6011      	str	r1, [r2, #0]
 8024854:	d1de      	bne.n	8024814 <_free_r+0x24>
 8024856:	6818      	ldr	r0, [r3, #0]
 8024858:	685b      	ldr	r3, [r3, #4]
 802485a:	4401      	add	r1, r0
 802485c:	6011      	str	r1, [r2, #0]
 802485e:	6053      	str	r3, [r2, #4]
 8024860:	e7d8      	b.n	8024814 <_free_r+0x24>
 8024862:	d902      	bls.n	802486a <_free_r+0x7a>
 8024864:	230c      	movs	r3, #12
 8024866:	602b      	str	r3, [r5, #0]
 8024868:	e7d4      	b.n	8024814 <_free_r+0x24>
 802486a:	6820      	ldr	r0, [r4, #0]
 802486c:	1821      	adds	r1, r4, r0
 802486e:	428b      	cmp	r3, r1
 8024870:	bf01      	itttt	eq
 8024872:	6819      	ldreq	r1, [r3, #0]
 8024874:	685b      	ldreq	r3, [r3, #4]
 8024876:	1809      	addeq	r1, r1, r0
 8024878:	6021      	streq	r1, [r4, #0]
 802487a:	6063      	str	r3, [r4, #4]
 802487c:	6054      	str	r4, [r2, #4]
 802487e:	e7c9      	b.n	8024814 <_free_r+0x24>
 8024880:	bd38      	pop	{r3, r4, r5, pc}
 8024882:	bf00      	nop
 8024884:	200011d0 	.word	0x200011d0

08024888 <_malloc_r>:
 8024888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802488a:	1ccd      	adds	r5, r1, #3
 802488c:	f025 0503 	bic.w	r5, r5, #3
 8024890:	3508      	adds	r5, #8
 8024892:	2d0c      	cmp	r5, #12
 8024894:	bf38      	it	cc
 8024896:	250c      	movcc	r5, #12
 8024898:	2d00      	cmp	r5, #0
 802489a:	4606      	mov	r6, r0
 802489c:	db01      	blt.n	80248a2 <_malloc_r+0x1a>
 802489e:	42a9      	cmp	r1, r5
 80248a0:	d903      	bls.n	80248aa <_malloc_r+0x22>
 80248a2:	230c      	movs	r3, #12
 80248a4:	6033      	str	r3, [r6, #0]
 80248a6:	2000      	movs	r0, #0
 80248a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80248aa:	f000 f87d 	bl	80249a8 <__malloc_lock>
 80248ae:	4921      	ldr	r1, [pc, #132]	; (8024934 <_malloc_r+0xac>)
 80248b0:	680a      	ldr	r2, [r1, #0]
 80248b2:	4614      	mov	r4, r2
 80248b4:	b99c      	cbnz	r4, 80248de <_malloc_r+0x56>
 80248b6:	4f20      	ldr	r7, [pc, #128]	; (8024938 <_malloc_r+0xb0>)
 80248b8:	683b      	ldr	r3, [r7, #0]
 80248ba:	b923      	cbnz	r3, 80248c6 <_malloc_r+0x3e>
 80248bc:	4621      	mov	r1, r4
 80248be:	4630      	mov	r0, r6
 80248c0:	f000 f862 	bl	8024988 <_sbrk_r>
 80248c4:	6038      	str	r0, [r7, #0]
 80248c6:	4629      	mov	r1, r5
 80248c8:	4630      	mov	r0, r6
 80248ca:	f000 f85d 	bl	8024988 <_sbrk_r>
 80248ce:	1c43      	adds	r3, r0, #1
 80248d0:	d123      	bne.n	802491a <_malloc_r+0x92>
 80248d2:	230c      	movs	r3, #12
 80248d4:	4630      	mov	r0, r6
 80248d6:	6033      	str	r3, [r6, #0]
 80248d8:	f000 f86c 	bl	80249b4 <__malloc_unlock>
 80248dc:	e7e3      	b.n	80248a6 <_malloc_r+0x1e>
 80248de:	6823      	ldr	r3, [r4, #0]
 80248e0:	1b5b      	subs	r3, r3, r5
 80248e2:	d417      	bmi.n	8024914 <_malloc_r+0x8c>
 80248e4:	2b0b      	cmp	r3, #11
 80248e6:	d903      	bls.n	80248f0 <_malloc_r+0x68>
 80248e8:	6023      	str	r3, [r4, #0]
 80248ea:	441c      	add	r4, r3
 80248ec:	6025      	str	r5, [r4, #0]
 80248ee:	e004      	b.n	80248fa <_malloc_r+0x72>
 80248f0:	6863      	ldr	r3, [r4, #4]
 80248f2:	42a2      	cmp	r2, r4
 80248f4:	bf0c      	ite	eq
 80248f6:	600b      	streq	r3, [r1, #0]
 80248f8:	6053      	strne	r3, [r2, #4]
 80248fa:	4630      	mov	r0, r6
 80248fc:	f000 f85a 	bl	80249b4 <__malloc_unlock>
 8024900:	f104 000b 	add.w	r0, r4, #11
 8024904:	1d23      	adds	r3, r4, #4
 8024906:	f020 0007 	bic.w	r0, r0, #7
 802490a:	1ac2      	subs	r2, r0, r3
 802490c:	d0cc      	beq.n	80248a8 <_malloc_r+0x20>
 802490e:	1a1b      	subs	r3, r3, r0
 8024910:	50a3      	str	r3, [r4, r2]
 8024912:	e7c9      	b.n	80248a8 <_malloc_r+0x20>
 8024914:	4622      	mov	r2, r4
 8024916:	6864      	ldr	r4, [r4, #4]
 8024918:	e7cc      	b.n	80248b4 <_malloc_r+0x2c>
 802491a:	1cc4      	adds	r4, r0, #3
 802491c:	f024 0403 	bic.w	r4, r4, #3
 8024920:	42a0      	cmp	r0, r4
 8024922:	d0e3      	beq.n	80248ec <_malloc_r+0x64>
 8024924:	1a21      	subs	r1, r4, r0
 8024926:	4630      	mov	r0, r6
 8024928:	f000 f82e 	bl	8024988 <_sbrk_r>
 802492c:	3001      	adds	r0, #1
 802492e:	d1dd      	bne.n	80248ec <_malloc_r+0x64>
 8024930:	e7cf      	b.n	80248d2 <_malloc_r+0x4a>
 8024932:	bf00      	nop
 8024934:	200011d0 	.word	0x200011d0
 8024938:	200011d4 	.word	0x200011d4

0802493c <_realloc_r>:
 802493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802493e:	4607      	mov	r7, r0
 8024940:	4614      	mov	r4, r2
 8024942:	460e      	mov	r6, r1
 8024944:	b921      	cbnz	r1, 8024950 <_realloc_r+0x14>
 8024946:	4611      	mov	r1, r2
 8024948:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802494c:	f7ff bf9c 	b.w	8024888 <_malloc_r>
 8024950:	b922      	cbnz	r2, 802495c <_realloc_r+0x20>
 8024952:	f7ff ff4d 	bl	80247f0 <_free_r>
 8024956:	4625      	mov	r5, r4
 8024958:	4628      	mov	r0, r5
 802495a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802495c:	f000 f830 	bl	80249c0 <_malloc_usable_size_r>
 8024960:	42a0      	cmp	r0, r4
 8024962:	d20f      	bcs.n	8024984 <_realloc_r+0x48>
 8024964:	4621      	mov	r1, r4
 8024966:	4638      	mov	r0, r7
 8024968:	f7ff ff8e 	bl	8024888 <_malloc_r>
 802496c:	4605      	mov	r5, r0
 802496e:	2800      	cmp	r0, #0
 8024970:	d0f2      	beq.n	8024958 <_realloc_r+0x1c>
 8024972:	4631      	mov	r1, r6
 8024974:	4622      	mov	r2, r4
 8024976:	f7ff ff13 	bl	80247a0 <memcpy>
 802497a:	4631      	mov	r1, r6
 802497c:	4638      	mov	r0, r7
 802497e:	f7ff ff37 	bl	80247f0 <_free_r>
 8024982:	e7e9      	b.n	8024958 <_realloc_r+0x1c>
 8024984:	4635      	mov	r5, r6
 8024986:	e7e7      	b.n	8024958 <_realloc_r+0x1c>

08024988 <_sbrk_r>:
 8024988:	b538      	push	{r3, r4, r5, lr}
 802498a:	2300      	movs	r3, #0
 802498c:	4d05      	ldr	r5, [pc, #20]	; (80249a4 <_sbrk_r+0x1c>)
 802498e:	4604      	mov	r4, r0
 8024990:	4608      	mov	r0, r1
 8024992:	602b      	str	r3, [r5, #0]
 8024994:	f7fc faac 	bl	8020ef0 <_sbrk>
 8024998:	1c43      	adds	r3, r0, #1
 802499a:	d102      	bne.n	80249a2 <_sbrk_r+0x1a>
 802499c:	682b      	ldr	r3, [r5, #0]
 802499e:	b103      	cbz	r3, 80249a2 <_sbrk_r+0x1a>
 80249a0:	6023      	str	r3, [r4, #0]
 80249a2:	bd38      	pop	{r3, r4, r5, pc}
 80249a4:	20004318 	.word	0x20004318

080249a8 <__malloc_lock>:
 80249a8:	4801      	ldr	r0, [pc, #4]	; (80249b0 <__malloc_lock+0x8>)
 80249aa:	f000 b811 	b.w	80249d0 <__retarget_lock_acquire_recursive>
 80249ae:	bf00      	nop
 80249b0:	20004320 	.word	0x20004320

080249b4 <__malloc_unlock>:
 80249b4:	4801      	ldr	r0, [pc, #4]	; (80249bc <__malloc_unlock+0x8>)
 80249b6:	f000 b80c 	b.w	80249d2 <__retarget_lock_release_recursive>
 80249ba:	bf00      	nop
 80249bc:	20004320 	.word	0x20004320

080249c0 <_malloc_usable_size_r>:
 80249c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80249c4:	1f18      	subs	r0, r3, #4
 80249c6:	2b00      	cmp	r3, #0
 80249c8:	bfbc      	itt	lt
 80249ca:	580b      	ldrlt	r3, [r1, r0]
 80249cc:	18c0      	addlt	r0, r0, r3
 80249ce:	4770      	bx	lr

080249d0 <__retarget_lock_acquire_recursive>:
 80249d0:	4770      	bx	lr

080249d2 <__retarget_lock_release_recursive>:
 80249d2:	4770      	bx	lr

080249d4 <_init>:
 80249d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80249d6:	bf00      	nop
 80249d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80249da:	bc08      	pop	{r3}
 80249dc:	469e      	mov	lr, r3
 80249de:	4770      	bx	lr

080249e0 <_fini>:
 80249e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80249e2:	bf00      	nop
 80249e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80249e6:	bc08      	pop	{r3}
 80249e8:	469e      	mov	lr, r3
 80249ea:	4770      	bx	lr
