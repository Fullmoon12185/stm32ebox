
fota-f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  0801e000  0801e000  0000e000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056f0  0801e1e4  0801e1e4  0000e1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f4  080238d4  080238d4  000138d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023fc8  08023fc8  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  08023fc8  08023fc8  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08023fc8  08023fc8  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023fc8  08023fc8  00013fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023fcc  08023fcc  00013fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08023fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004120  20000168  08024134  00020168  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004288  08024134  00024288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015937  00000000  00000000  0002018d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fa1  00000000  00000000  00035ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  00039a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c8  00000000  00000000  0003af28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8ea  00000000  00000000  0003c2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000182f5  00000000  00000000  00058bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f0a2  00000000  00000000  00070ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010ff71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000554c  00000000  00000000  0010ffc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0801e1e4 <__do_global_dtors_aux>:
 801e1e4:	b510      	push	{r4, lr}
 801e1e6:	4c05      	ldr	r4, [pc, #20]	; (801e1fc <__do_global_dtors_aux+0x18>)
 801e1e8:	7823      	ldrb	r3, [r4, #0]
 801e1ea:	b933      	cbnz	r3, 801e1fa <__do_global_dtors_aux+0x16>
 801e1ec:	4b04      	ldr	r3, [pc, #16]	; (801e200 <__do_global_dtors_aux+0x1c>)
 801e1ee:	b113      	cbz	r3, 801e1f6 <__do_global_dtors_aux+0x12>
 801e1f0:	4804      	ldr	r0, [pc, #16]	; (801e204 <__do_global_dtors_aux+0x20>)
 801e1f2:	f3af 8000 	nop.w
 801e1f6:	2301      	movs	r3, #1
 801e1f8:	7023      	strb	r3, [r4, #0]
 801e1fa:	bd10      	pop	{r4, pc}
 801e1fc:	20000168 	.word	0x20000168
 801e200:	00000000 	.word	0x00000000
 801e204:	080238bc 	.word	0x080238bc

0801e208 <frame_dummy>:
 801e208:	b508      	push	{r3, lr}
 801e20a:	4b03      	ldr	r3, [pc, #12]	; (801e218 <frame_dummy+0x10>)
 801e20c:	b11b      	cbz	r3, 801e216 <frame_dummy+0xe>
 801e20e:	4903      	ldr	r1, [pc, #12]	; (801e21c <frame_dummy+0x14>)
 801e210:	4803      	ldr	r0, [pc, #12]	; (801e220 <frame_dummy+0x18>)
 801e212:	f3af 8000 	nop.w
 801e216:	bd08      	pop	{r3, pc}
 801e218:	00000000 	.word	0x00000000
 801e21c:	2000016c 	.word	0x2000016c
 801e220:	080238bc 	.word	0x080238bc

0801e224 <strlen>:
 801e224:	4603      	mov	r3, r0
 801e226:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e22a:	2a00      	cmp	r2, #0
 801e22c:	d1fb      	bne.n	801e226 <strlen+0x2>
 801e22e:	1a18      	subs	r0, r3, r0
 801e230:	3801      	subs	r0, #1
 801e232:	4770      	bx	lr

0801e234 <MC25LC512_CS>:
unsigned char MC25LC512_ReleaseDeepPowerDownMode(void);



void MC25LC512_CS(uint8_t CS_Status)
{
 801e234:	b580      	push	{r7, lr}
 801e236:	b082      	sub	sp, #8
 801e238:	af00      	add	r7, sp, #0
 801e23a:	4603      	mov	r3, r0
 801e23c:	71fb      	strb	r3, [r7, #7]
	// For Cs of the EEprom
	if(CS_Status == EEPROM_CS_PIN_RESET)
 801e23e:	79fb      	ldrb	r3, [r7, #7]
 801e240:	2b00      	cmp	r3, #0
 801e242:	d102      	bne.n	801e24a <MC25LC512_CS+0x16>
	{
		ResetChipSelect();
 801e244:	f000 fb32 	bl	801e8ac <ResetChipSelect>
	{
		SetChipSelect();

	}

}
 801e248:	e001      	b.n	801e24e <MC25LC512_CS+0x1a>
		SetChipSelect();
 801e24a:	f000 fb3b 	bl	801e8c4 <SetChipSelect>
}
 801e24e:	bf00      	nop
 801e250:	3708      	adds	r7, #8
 801e252:	46bd      	mov	sp, r7
 801e254:	bd80      	pop	{r7, pc}
	...

0801e258 <MC25LC512_WriteEnableOrDisable>:
void MC25LC512_WriteEnableOrDisable(uint8_t EnableOrDisable)
{
 801e258:	b580      	push	{r7, lr}
 801e25a:	b084      	sub	sp, #16
 801e25c:	af00      	add	r7, sp, #0
 801e25e:	4603      	mov	r3, r0
 801e260:	71fb      	strb	r3, [r7, #7]
	uint8_t SendOneByte = 0;
 801e262:	2300      	movs	r3, #0
 801e264:	72fb      	strb	r3, [r7, #11]
	MC25LC512_CS(EEPROM_CS_PIN_RESET);// Reset The spi Chip //Reset means Enable
 801e266:	2000      	movs	r0, #0
 801e268:	f7ff ffe4 	bl	801e234 <MC25LC512_CS>
	for(uint16_t i = 0; i < 10; i ++);
 801e26c:	2300      	movs	r3, #0
 801e26e:	81fb      	strh	r3, [r7, #14]
 801e270:	e002      	b.n	801e278 <MC25LC512_WriteEnableOrDisable+0x20>
 801e272:	89fb      	ldrh	r3, [r7, #14]
 801e274:	3301      	adds	r3, #1
 801e276:	81fb      	strh	r3, [r7, #14]
 801e278:	89fb      	ldrh	r3, [r7, #14]
 801e27a:	2b09      	cmp	r3, #9
 801e27c:	d9f9      	bls.n	801e272 <MC25LC512_WriteEnableOrDisable+0x1a>
	if(EnableOrDisable==EEPROM_Enable)
 801e27e:	79fb      	ldrb	r3, [r7, #7]
 801e280:	2b01      	cmp	r3, #1
 801e282:	d102      	bne.n	801e28a <MC25LC512_WriteEnableOrDisable+0x32>
	{
			SendOneByte = MC25LCxxx_SPI_WREN;
 801e284:	2306      	movs	r3, #6
 801e286:	72fb      	strb	r3, [r7, #11]
 801e288:	e001      	b.n	801e28e <MC25LC512_WriteEnableOrDisable+0x36>
	}
	else
	{
			SendOneByte = MC25LCxxx_SPI_WRDI;
 801e28a:	2304      	movs	r3, #4
 801e28c:	72fb      	strb	r3, [r7, #11]
	}
	HAL_SPI_Transmit(&Spi2Handle , &SendOneByte, 1, 200) ;
 801e28e:	f107 010b 	add.w	r1, r7, #11
 801e292:	23c8      	movs	r3, #200	; 0xc8
 801e294:	2201      	movs	r2, #1
 801e296:	4809      	ldr	r0, [pc, #36]	; (801e2bc <MC25LC512_WriteEnableOrDisable+0x64>)
 801e298:	f003 fce6 	bl	8021c68 <HAL_SPI_Transmit>
	for(uint16_t i = 0; i < 10; i ++);
 801e29c:	2300      	movs	r3, #0
 801e29e:	81bb      	strh	r3, [r7, #12]
 801e2a0:	e002      	b.n	801e2a8 <MC25LC512_WriteEnableOrDisable+0x50>
 801e2a2:	89bb      	ldrh	r3, [r7, #12]
 801e2a4:	3301      	adds	r3, #1
 801e2a6:	81bb      	strh	r3, [r7, #12]
 801e2a8:	89bb      	ldrh	r3, [r7, #12]
 801e2aa:	2b09      	cmp	r3, #9
 801e2ac:	d9f9      	bls.n	801e2a2 <MC25LC512_WriteEnableOrDisable+0x4a>
	MC25LC512_CS(EEPROM_CS_PIN_SET);// Set The spi Chip //Set means Disable
 801e2ae:	2001      	movs	r0, #1
 801e2b0:	f7ff ffc0 	bl	801e234 <MC25LC512_CS>
}
 801e2b4:	bf00      	nop
 801e2b6:	3710      	adds	r7, #16
 801e2b8:	46bd      	mov	sp, r7
 801e2ba:	bd80      	pop	{r7, pc}
 801e2bc:	200011f0 	.word	0x200011f0

0801e2c0 <MC25LC512_Initialize>:
	return RecieveByteOfReleaseDeepPowerMode;

}

void MC25LC512_Initialize(void)
{
 801e2c0:	b580      	push	{r7, lr}
 801e2c2:	af00      	add	r7, sp, #0
	MC25LC512_CS(EEPROM_CS_PIN_SET);// Reset The spi Chip //Reset means Enable
 801e2c4:	2001      	movs	r0, #1
 801e2c6:	f7ff ffb5 	bl	801e234 <MC25LC512_CS>
	MC25LC512_WriteEnableOrDisable(EEPROM_Enable);
 801e2ca:	2001      	movs	r0, #1
 801e2cc:	f7ff ffc4 	bl	801e258 <MC25LC512_WriteEnableOrDisable>

}
 801e2d0:	bf00      	nop
 801e2d2:	bd80      	pop	{r7, pc}

0801e2d4 <is_Sim7600_TimeOutFlag>:
 * is_Sim7600_TimeOutFlag()
 * @param None.
 * @retval Flagstatus: SET or RESET
 * @brief This function return sim7600_timeout_flag.
 */
FlagStatus is_Sim7600_TimeOutFlag(){
 801e2d4:	b480      	push	{r7}
 801e2d6:	af00      	add	r7, sp, #0
	return sim7600_timeout_flag;
 801e2d8:	4b02      	ldr	r3, [pc, #8]	; (801e2e4 <is_Sim7600_TimeOutFlag+0x10>)
 801e2da:	781b      	ldrb	r3, [r3, #0]
}
 801e2dc:	4618      	mov	r0, r3
 801e2de:	46bd      	mov	sp, r7
 801e2e0:	bc80      	pop	{r7}
 801e2e2:	4770      	bx	lr
 801e2e4:	20000185 	.word	0x20000185

0801e2e8 <Set_Sim7600_Timeout_Flag>:
 * Set_Sim7600_Timeout_Flag()
 * @param None.
 * @retval None
 * @brief This function set sim7600_timeout_flag to SET.
 */
void Set_Sim7600_Timeout_Flag(void){
 801e2e8:	b480      	push	{r7}
 801e2ea:	af00      	add	r7, sp, #0
	sim7600_timeout_flag = SET;
 801e2ec:	4b03      	ldr	r3, [pc, #12]	; (801e2fc <Set_Sim7600_Timeout_Flag+0x14>)
 801e2ee:	2201      	movs	r2, #1
 801e2f0:	701a      	strb	r2, [r3, #0]
}
 801e2f2:	bf00      	nop
 801e2f4:	46bd      	mov	sp, r7
 801e2f6:	bc80      	pop	{r7}
 801e2f8:	4770      	bx	lr
 801e2fa:	bf00      	nop
 801e2fc:	20000185 	.word	0x20000185

0801e300 <Clear_Sim7600_Timeout_Flag>:
 * Clear_Sim7600_Timeout_Flag()
 * @param None.
 * @retval None
 * @brief This function set sim7600_timeout_flag to RESET.
 */
void Clear_Sim7600_Timeout_Flag(void){
 801e300:	b480      	push	{r7}
 801e302:	af00      	add	r7, sp, #0
	sim7600_timeout_flag = RESET;
 801e304:	4b03      	ldr	r3, [pc, #12]	; (801e314 <Clear_Sim7600_Timeout_Flag+0x14>)
 801e306:	2200      	movs	r2, #0
 801e308:	701a      	strb	r2, [r3, #0]
}
 801e30a:	bf00      	nop
 801e30c:	46bd      	mov	sp, r7
 801e30e:	bc80      	pop	{r7}
 801e310:	4770      	bx	lr
 801e312:	bf00      	nop
 801e314:	20000185 	.word	0x20000185

0801e318 <Sim7600_State_Display>:

/**
 * Sim7600_State_Display()
 * @brief This is function for display state of State Machine. It only show State when having a state changation.
 */
void Sim7600_State_Display(void){
 801e318:	b580      	push	{r7, lr}
 801e31a:	af00      	add	r7, sp, #0
	if(sim7600_state!=prev_sim7600_state){
 801e31c:	4b2a      	ldr	r3, [pc, #168]	; (801e3c8 <Sim7600_State_Display+0xb0>)
 801e31e:	781a      	ldrb	r2, [r3, #0]
 801e320:	4b2a      	ldr	r3, [pc, #168]	; (801e3cc <Sim7600_State_Display+0xb4>)
 801e322:	781b      	ldrb	r3, [r3, #0]
 801e324:	429a      	cmp	r2, r3
 801e326:	d049      	beq.n	801e3bc <Sim7600_State_Display+0xa4>
		switch(sim7600_state){
 801e328:	4b27      	ldr	r3, [pc, #156]	; (801e3c8 <Sim7600_State_Display+0xb0>)
 801e32a:	781b      	ldrb	r3, [r3, #0]
 801e32c:	2b0a      	cmp	r3, #10
 801e32e:	d847      	bhi.n	801e3c0 <Sim7600_State_Display+0xa8>
 801e330:	a201      	add	r2, pc, #4	; (adr r2, 801e338 <Sim7600_State_Display+0x20>)
 801e332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e336:	bf00      	nop
 801e338:	0801e365 	.word	0x0801e365
 801e33c:	0801e36d 	.word	0x0801e36d
 801e340:	0801e375 	.word	0x0801e375
 801e344:	0801e37d 	.word	0x0801e37d
 801e348:	0801e385 	.word	0x0801e385
 801e34c:	0801e38d 	.word	0x0801e38d
 801e350:	0801e395 	.word	0x0801e395
 801e354:	0801e39d 	.word	0x0801e39d
 801e358:	0801e3a5 	.word	0x0801e3a5
 801e35c:	0801e3ad 	.word	0x0801e3ad
 801e360:	0801e3b5 	.word	0x0801e3b5
		case SIM7600_POWER_ON:
			LOG("\r\nSIM7600 POWER ON\r\n");
 801e364:	481a      	ldr	r0, [pc, #104]	; (801e3d0 <Sim7600_State_Display+0xb8>)
 801e366:	f000 fc0d 	bl	801eb84 <UART_DEBUG_Transmit>
			break;
 801e36a:	e02a      	b.n	801e3c2 <Sim7600_State_Display+0xaa>
		case SIM7600_WAIT_FOR_POWER_ON_RESPONE:
			LOG((uint8_t*)"\r\nSIM7600 WAIT FOR POWER ON RESPONE\r\n");
 801e36c:	4819      	ldr	r0, [pc, #100]	; (801e3d4 <Sim7600_State_Display+0xbc>)
 801e36e:	f000 fc09 	bl	801eb84 <UART_DEBUG_Transmit>
			break;
 801e372:	e026      	b.n	801e3c2 <Sim7600_State_Display+0xaa>
		case SIM7600_RESET:
			LOG((uint8_t*)"\r\nSIM7600 RESET\r\n");
 801e374:	4818      	ldr	r0, [pc, #96]	; (801e3d8 <Sim7600_State_Display+0xc0>)
 801e376:	f000 fc05 	bl	801eb84 <UART_DEBUG_Transmit>
			break;
 801e37a:	e022      	b.n	801e3c2 <Sim7600_State_Display+0xaa>
		case SIM7600_WAIT_FOR_RESET_RESPONE:
			LOG((uint8_t*)"\r\nSIM7600 WAIT FOR RESET RESPONE\r\n");
 801e37c:	4817      	ldr	r0, [pc, #92]	; (801e3dc <Sim7600_State_Display+0xc4>)
 801e37e:	f000 fc01 	bl	801eb84 <UART_DEBUG_Transmit>
			break;
 801e382:	e01e      	b.n	801e3c2 <Sim7600_State_Display+0xaa>
		case SIM7600_START_UP:
			LOG((uint8_t*)"\r\nSIM7600 START UP\r\n");
 801e384:	4816      	ldr	r0, [pc, #88]	; (801e3e0 <Sim7600_State_Display+0xc8>)
 801e386:	f000 fbfd 	bl	801eb84 <UART_DEBUG_Transmit>
			break;
 801e38a:	e01a      	b.n	801e3c2 <Sim7600_State_Display+0xaa>
		case SIM7600_WAIT_FOR_START_UP_RESPONE:
			LOG((uint8_t*)"\r\nSIM7600 WAIT FOR START UP RESPONE\r\n");
 801e38c:	4815      	ldr	r0, [pc, #84]	; (801e3e4 <Sim7600_State_Display+0xcc>)
 801e38e:	f000 fbf9 	bl	801eb84 <UART_DEBUG_Transmit>
			break;
 801e392:	e016      	b.n	801e3c2 <Sim7600_State_Display+0xaa>
		case SIM7600_SETTING:
			LOG((uint8_t*)"\r\nSIM7600 SETTING\r\n");
 801e394:	4814      	ldr	r0, [pc, #80]	; (801e3e8 <Sim7600_State_Display+0xd0>)
 801e396:	f000 fbf5 	bl	801eb84 <UART_DEBUG_Transmit>
			break;
 801e39a:	e012      	b.n	801e3c2 <Sim7600_State_Display+0xaa>
		case SIM7600_WAIT_FOR_SETTING_RESPONE:
			LOG((uint8_t*)"\r\nSIM7600 WAIT FOR SETTING RESPONE\r\n");
 801e39c:	4813      	ldr	r0, [pc, #76]	; (801e3ec <Sim7600_State_Display+0xd4>)
 801e39e:	f000 fbf1 	bl	801eb84 <UART_DEBUG_Transmit>
			break;
 801e3a2:	e00e      	b.n	801e3c2 <Sim7600_State_Display+0xaa>
		case SIM7600_GET_IMEI:
			LOG((uint8_t*)"\r\nSIM7600 GET IMEI\r\n");
 801e3a4:	4812      	ldr	r0, [pc, #72]	; (801e3f0 <Sim7600_State_Display+0xd8>)
 801e3a6:	f000 fbed 	bl	801eb84 <UART_DEBUG_Transmit>
			break;
 801e3aa:	e00a      	b.n	801e3c2 <Sim7600_State_Display+0xaa>
		case SIM7600_WAIT_FOR_GET_IMEI_RESPONE:
			LOG((uint8_t*)"\r\nSIM7600 WAIT FOR GET IMEI RESPONE\r\n");
 801e3ac:	4811      	ldr	r0, [pc, #68]	; (801e3f4 <Sim7600_State_Display+0xdc>)
 801e3ae:	f000 fbe9 	bl	801eb84 <UART_DEBUG_Transmit>
			break;
 801e3b2:	e006      	b.n	801e3c2 <Sim7600_State_Display+0xaa>
		case SIM7600_MAX_STATE:
			LOG((uint8_t*)"\r\nSIM7600 MAX STATE\r\n");
 801e3b4:	4810      	ldr	r0, [pc, #64]	; (801e3f8 <Sim7600_State_Display+0xe0>)
 801e3b6:	f000 fbe5 	bl	801eb84 <UART_DEBUG_Transmit>
			break;
 801e3ba:	e002      	b.n	801e3c2 <Sim7600_State_Display+0xaa>
		default:
			break;
		}
	}
 801e3bc:	bf00      	nop
 801e3be:	e000      	b.n	801e3c2 <Sim7600_State_Display+0xaa>
			break;
 801e3c0:	bf00      	nop
}
 801e3c2:	bf00      	nop
 801e3c4:	bd80      	pop	{r7, pc}
 801e3c6:	bf00      	nop
 801e3c8:	20000000 	.word	0x20000000
 801e3cc:	200011de 	.word	0x200011de
 801e3d0:	08023978 	.word	0x08023978
 801e3d4:	08023990 	.word	0x08023990
 801e3d8:	080239b8 	.word	0x080239b8
 801e3dc:	080239cc 	.word	0x080239cc
 801e3e0:	080239f0 	.word	0x080239f0
 801e3e4:	08023a08 	.word	0x08023a08
 801e3e8:	08023a30 	.word	0x08023a30
 801e3ec:	08023a44 	.word	0x08023a44
 801e3f0:	08023a6c 	.word	0x08023a6c
 801e3f4:	08023a84 	.word	0x08023a84
 801e3f8:	08023aac 	.word	0x08023aac

0801e3fc <Sim7600_Run>:
 * Sim7600_Run()
 * @param None
 * @retval 0 if state < SIM7600_MAX_STATE else return 1
 * @brief This is function can be called from external file. It run follow state machine method. Not have param.
 */
uint8_t Sim7600_Run(void){
 801e3fc:	b580      	push	{r7, lr}
 801e3fe:	af00      	add	r7, sp, #0
	Sim7600_State_Display();
 801e400:	f7ff ff8a 	bl	801e318 <Sim7600_State_Display>
	prev_sim7600_state = sim7600_state;
 801e404:	4b09      	ldr	r3, [pc, #36]	; (801e42c <Sim7600_Run+0x30>)
 801e406:	781a      	ldrb	r2, [r3, #0]
 801e408:	4b09      	ldr	r3, [pc, #36]	; (801e430 <Sim7600_Run+0x34>)
 801e40a:	701a      	strb	r2, [r3, #0]
	if(sim7600_state < SIM7600_MAX_STATE){
 801e40c:	4b07      	ldr	r3, [pc, #28]	; (801e42c <Sim7600_Run+0x30>)
 801e40e:	781b      	ldrb	r3, [r3, #0]
 801e410:	2b09      	cmp	r3, #9
 801e412:	d808      	bhi.n	801e426 <Sim7600_Run+0x2a>
		(*Sim7600_State_Machine[sim7600_state].func)();
 801e414:	4b05      	ldr	r3, [pc, #20]	; (801e42c <Sim7600_Run+0x30>)
 801e416:	781b      	ldrb	r3, [r3, #0]
 801e418:	4a06      	ldr	r2, [pc, #24]	; (801e434 <Sim7600_Run+0x38>)
 801e41a:	00db      	lsls	r3, r3, #3
 801e41c:	4413      	add	r3, r2
 801e41e:	685b      	ldr	r3, [r3, #4]
 801e420:	4798      	blx	r3
		return 0;
 801e422:	2300      	movs	r3, #0
 801e424:	e000      	b.n	801e428 <Sim7600_Run+0x2c>
	} else {
		return 1;
 801e426:	2301      	movs	r3, #1
	}
}
 801e428:	4618      	mov	r0, r3
 801e42a:	bd80      	pop	{r7, pc}
 801e42c:	20000000 	.word	0x20000000
 801e430:	200011de 	.word	0x200011de
 801e434:	20000028 	.word	0x20000028

0801e438 <Power_Signal_Low>:
 * Power_Signal_Low()
 * @param None
 * @retval None
 * @brief This is function set Power Signal to RESET
 */
void Power_Signal_Low(void){
 801e438:	b580      	push	{r7, lr}
 801e43a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIM7600_4G_PWRON_PORT, SIM7600_4G_PWRON, GPIO_PIN_RESET);
 801e43c:	2200      	movs	r2, #0
 801e43e:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e442:	4802      	ldr	r0, [pc, #8]	; (801e44c <Power_Signal_Low+0x14>)
 801e444:	f002 ff5a 	bl	80212fc <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(SIM7600_4G_PWRON_PORT, SIM7600_4G_PWRON, GPIO_PIN_SET);
}
 801e448:	bf00      	nop
 801e44a:	bd80      	pop	{r7, pc}
 801e44c:	40011000 	.word	0x40011000

0801e450 <Power_Signal_High>:
 * Power_Signal_High()
 * @param None
 * @retval None
 * @brief This is function set Power Signal to SET
 */
void Power_Signal_High(void){
 801e450:	b580      	push	{r7, lr}
 801e452:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIM7600_4G_PWRON_PORT, SIM7600_4G_PWRON, GPIO_PIN_SET);
 801e454:	2201      	movs	r2, #1
 801e456:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e45a:	4802      	ldr	r0, [pc, #8]	; (801e464 <Power_Signal_High+0x14>)
 801e45c:	f002 ff4e 	bl	80212fc <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(SIM7600_4G_PWRON_PORT, SIM7600_4G_PWRON, GPIO_PIN_RESET);
}
 801e460:	bf00      	nop
 801e462:	bd80      	pop	{r7, pc}
 801e464:	40011000 	.word	0x40011000

0801e468 <Reset_Signal_Low>:
 * Reset_Signal_Low()
 * @param None
 * @retval None
 * @brief This is function set Reset Signal to RESET
 */
void Reset_Signal_Low(void){
 801e468:	b580      	push	{r7, lr}
 801e46a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIM7600_4G_PERST_PORT, SIM7600_4G_PERST, GPIO_PIN_RESET);
 801e46c:	2200      	movs	r2, #0
 801e46e:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e472:	4802      	ldr	r0, [pc, #8]	; (801e47c <Reset_Signal_Low+0x14>)
 801e474:	f002 ff42 	bl	80212fc <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(SIM7600_4G_PERST_PORT, SIM7600_4G_PERST, GPIO_PIN_SET);
}
 801e478:	bf00      	nop
 801e47a:	bd80      	pop	{r7, pc}
 801e47c:	40011000 	.word	0x40011000

0801e480 <Reset_Signal_High>:
 * Reset_Signal_High()
 * @param None
 * @retval None
 * @brief This is function set Reset Signal to SET
 */
void Reset_Signal_High(void){
 801e480:	b580      	push	{r7, lr}
 801e482:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIM7600_4G_PERST_PORT, SIM7600_4G_PERST, GPIO_PIN_SET);
 801e484:	2201      	movs	r2, #1
 801e486:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e48a:	4802      	ldr	r0, [pc, #8]	; (801e494 <Reset_Signal_High+0x14>)
 801e48c:	f002 ff36 	bl	80212fc <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(SIM7600_4G_PERST_PORT, SIM7600_4G_PERST, GPIO_PIN_RESET);

}
 801e490:	bf00      	nop
 801e492:	bd80      	pop	{r7, pc}
 801e494:	40011000 	.word	0x40011000

0801e498 <Sim7600_Power_On>:
 * Sim7600_Power_On()
 * @param None
 * @retval None
 * @brief This is function for control POWER_ON signal in Simcom7600 module
 */
void Sim7600_Power_On(void){
 801e498:	b580      	push	{r7, lr}
 801e49a:	af00      	add	r7, sp, #0
	SCH_Add_Task(Power_Signal_Low, 0, 0);
 801e49c:	2200      	movs	r2, #0
 801e49e:	2100      	movs	r1, #0
 801e4a0:	4809      	ldr	r0, [pc, #36]	; (801e4c8 <Sim7600_Power_On+0x30>)
 801e4a2:	f001 fb77 	bl	801fb94 <SCH_Add_Task>
	SCH_Add_Task(Power_Signal_High, TIMER_TO_POWER_ON_SIM7600, 0);
 801e4a6:	2200      	movs	r2, #0
 801e4a8:	21c8      	movs	r1, #200	; 0xc8
 801e4aa:	4808      	ldr	r0, [pc, #32]	; (801e4cc <Sim7600_Power_On+0x34>)
 801e4ac:	f001 fb72 	bl	801fb94 <SCH_Add_Task>
	Clear_Sim7600_Timeout_Flag();
 801e4b0:	f7ff ff26 	bl	801e300 <Clear_Sim7600_Timeout_Flag>
	SCH_Add_Task(Set_Sim7600_Timeout_Flag, TIMER_TO_POWER_ON_SIM7600_TIMEOUT, 0);
 801e4b4:	2200      	movs	r2, #0
 801e4b6:	21c8      	movs	r1, #200	; 0xc8
 801e4b8:	4805      	ldr	r0, [pc, #20]	; (801e4d0 <Sim7600_Power_On+0x38>)
 801e4ba:	f001 fb6b 	bl	801fb94 <SCH_Add_Task>
	sim7600_state = SIM7600_WAIT_FOR_POWER_ON_RESPONE;
 801e4be:	4b05      	ldr	r3, [pc, #20]	; (801e4d4 <Sim7600_Power_On+0x3c>)
 801e4c0:	2201      	movs	r2, #1
 801e4c2:	701a      	strb	r2, [r3, #0]
}
 801e4c4:	bf00      	nop
 801e4c6:	bd80      	pop	{r7, pc}
 801e4c8:	0801e439 	.word	0x0801e439
 801e4cc:	0801e451 	.word	0x0801e451
 801e4d0:	0801e2e9 	.word	0x0801e2e9
 801e4d4:	20000000 	.word	0x20000000

0801e4d8 <Sim7600_Wait_For_Power_On_Respone>:
 * Sim7600_Wait_For_Power_On_Respone()
 * @param None
 * @retval None
 * @brief This is function for waiting POWER_ON State respone, after timeout TIMER_TO_POWER_ON_SIM7600_TIMEOUT
 */
void Sim7600_Wait_For_Power_On_Respone(void){
 801e4d8:	b580      	push	{r7, lr}
 801e4da:	af00      	add	r7, sp, #0
	if(is_Sim7600_TimeOutFlag()){
 801e4dc:	f7ff fefa 	bl	801e2d4 <is_Sim7600_TimeOutFlag>
 801e4e0:	4603      	mov	r3, r0
 801e4e2:	2b00      	cmp	r3, #0
 801e4e4:	d002      	beq.n	801e4ec <Sim7600_Wait_For_Power_On_Respone+0x14>
		sim7600_state = SIM7600_START_UP;
 801e4e6:	4b02      	ldr	r3, [pc, #8]	; (801e4f0 <Sim7600_Wait_For_Power_On_Respone+0x18>)
 801e4e8:	2204      	movs	r2, #4
 801e4ea:	701a      	strb	r2, [r3, #0]
	}
}
 801e4ec:	bf00      	nop
 801e4ee:	bd80      	pop	{r7, pc}
 801e4f0:	20000000 	.word	0x20000000

0801e4f4 <Sim7600_Reset>:
 * @param None
 * @retval None
 * @brief This is function for control RESET signal in Simcom7600 module
 * @brief Keep RESET signal LOW during TIMER_TO_RESET_SIM7600
 */
void Sim7600_Reset(void){
 801e4f4:	b580      	push	{r7, lr}
 801e4f6:	af00      	add	r7, sp, #0
	SCH_Add_Task(Reset_Signal_High, 0, 0);
 801e4f8:	2200      	movs	r2, #0
 801e4fa:	2100      	movs	r1, #0
 801e4fc:	480a      	ldr	r0, [pc, #40]	; (801e528 <Sim7600_Reset+0x34>)
 801e4fe:	f001 fb49 	bl	801fb94 <SCH_Add_Task>
	SCH_Add_Task(Reset_Signal_Low, TIMER_TO_RESET_SIM7600, 0);
 801e502:	2200      	movs	r2, #0
 801e504:	21c8      	movs	r1, #200	; 0xc8
 801e506:	4809      	ldr	r0, [pc, #36]	; (801e52c <Sim7600_Reset+0x38>)
 801e508:	f001 fb44 	bl	801fb94 <SCH_Add_Task>
	Clear_Sim7600_Timeout_Flag();
 801e50c:	f7ff fef8 	bl	801e300 <Clear_Sim7600_Timeout_Flag>
	SCH_Add_Task(Set_Sim7600_Timeout_Flag, TIMER_TO_RESET_SIM7600_TIMEOUT, 0);
 801e510:	2200      	movs	r2, #0
 801e512:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801e516:	4806      	ldr	r0, [pc, #24]	; (801e530 <Sim7600_Reset+0x3c>)
 801e518:	f001 fb3c 	bl	801fb94 <SCH_Add_Task>
	sim7600_state = SIM7600_WAIT_FOR_RESET_RESPONE;
 801e51c:	4b05      	ldr	r3, [pc, #20]	; (801e534 <Sim7600_Reset+0x40>)
 801e51e:	2203      	movs	r2, #3
 801e520:	701a      	strb	r2, [r3, #0]
}
 801e522:	bf00      	nop
 801e524:	bd80      	pop	{r7, pc}
 801e526:	bf00      	nop
 801e528:	0801e481 	.word	0x0801e481
 801e52c:	0801e469 	.word	0x0801e469
 801e530:	0801e2e9 	.word	0x0801e2e9
 801e534:	20000000 	.word	0x20000000

0801e538 <Sim7600_Wait_For_Reset_Respone>:
 * Sim7600_Wait_For_Reset_Respone()
 * @param None
 * @retval None
 * @brief This is function for waiting simcom7600_timeout_flag is SET
 */
void Sim7600_Wait_For_Reset_Respone(void){
 801e538:	b580      	push	{r7, lr}
 801e53a:	af00      	add	r7, sp, #0
	if(is_Sim7600_TimeOutFlag()){
 801e53c:	f7ff feca 	bl	801e2d4 <is_Sim7600_TimeOutFlag>
 801e540:	4603      	mov	r3, r0
 801e542:	2b00      	cmp	r3, #0
 801e544:	d002      	beq.n	801e54c <Sim7600_Wait_For_Reset_Respone+0x14>
		sim7600_state = SIM7600_POWER_ON;
 801e546:	4b02      	ldr	r3, [pc, #8]	; (801e550 <Sim7600_Wait_For_Reset_Respone+0x18>)
 801e548:	2200      	movs	r2, #0
 801e54a:	701a      	strb	r2, [r3, #0]
	}
}
 801e54c:	bf00      	nop
 801e54e:	bd80      	pop	{r7, pc}
 801e550:	20000000 	.word	0x20000000

0801e554 <Sim7600_Start_Up>:
 * Sim7600_Start_Up()
 * @param None
 * @retval None
 * @brief This is function for start up Simcom7600 module. Timeout is TIMEOUT_STARTUP_RESET.
 */
void Sim7600_Start_Up(void){
 801e554:	b580      	push	{r7, lr}
 801e556:	af00      	add	r7, sp, #0
	sim7600_state = SIM7600_WAIT_FOR_START_UP_RESPONE;
 801e558:	4b06      	ldr	r3, [pc, #24]	; (801e574 <Sim7600_Start_Up+0x20>)
 801e55a:	2205      	movs	r2, #5
 801e55c:	701a      	strb	r2, [r3, #0]
	Clear_Sim7600_Timeout_Flag();
 801e55e:	f7ff fecf 	bl	801e300 <Clear_Sim7600_Timeout_Flag>
	SCH_Add_Task(Set_Sim7600_Timeout_Flag, TIMEOUT_STARTUP_RESET, 0);
 801e562:	2200      	movs	r2, #0
 801e564:	f644 6120 	movw	r1, #20000	; 0x4e20
 801e568:	4803      	ldr	r0, [pc, #12]	; (801e578 <Sim7600_Start_Up+0x24>)
 801e56a:	f001 fb13 	bl	801fb94 <SCH_Add_Task>
}
 801e56e:	bf00      	nop
 801e570:	bd80      	pop	{r7, pc}
 801e572:	bf00      	nop
 801e574:	20000000 	.word	0x20000000
 801e578:	0801e2e9 	.word	0x0801e2e9

0801e57c <Sim7600_Wait_For_Start_Up_Respone>:
 * @param None
 * @retval None
 * @brief This is function for waiting start up respond.
 * @brief If Timeout so Reset Simcom7600 else AT_Result = AT_PB_DONE switch to SIM7600_GET_IMEI
 */
void Sim7600_Wait_For_Start_Up_Respone(void){
 801e57c:	b580      	push	{r7, lr}
 801e57e:	af00      	add	r7, sp, #0
	// Time out if too long time cannot receive PB_DONE
	if(is_Sim7600_TimeOutFlag()){
 801e580:	f7ff fea8 	bl	801e2d4 <is_Sim7600_TimeOutFlag>
 801e584:	4603      	mov	r3, r0
 801e586:	2b00      	cmp	r3, #0
 801e588:	d002      	beq.n	801e590 <Sim7600_Wait_For_Start_Up_Respone+0x14>
		sim7600_state = SIM7600_RESET;
 801e58a:	4b0a      	ldr	r3, [pc, #40]	; (801e5b4 <Sim7600_Wait_For_Start_Up_Respone+0x38>)
 801e58c:	2202      	movs	r2, #2
 801e58e:	701a      	strb	r2, [r3, #0]
	}
//	Wait_For_Respone(AT_PB_DONE);
	switch (Get_AT_Result()){
 801e590:	f001 faaa 	bl	801fae8 <Get_AT_Result>
 801e594:	4603      	mov	r3, r0
 801e596:	2b03      	cmp	r3, #3
 801e598:	d107      	bne.n	801e5aa <Sim7600_Wait_For_Start_Up_Respone+0x2e>
		case AT_PB_DONE:
			Clear_AT_Result();
 801e59a:	f001 faaf 	bl	801fafc <Clear_AT_Result>
			Set_Sim7600_Timeout_Flag();
 801e59e:	f7ff fea3 	bl	801e2e8 <Set_Sim7600_Timeout_Flag>
			sim7600_state = SIM7600_SETTING;//SIM7600_GET_IMEI;
 801e5a2:	4b04      	ldr	r3, [pc, #16]	; (801e5b4 <Sim7600_Wait_For_Start_Up_Respone+0x38>)
 801e5a4:	2206      	movs	r2, #6
 801e5a6:	701a      	strb	r2, [r3, #0]
			break;
 801e5a8:	e002      	b.n	801e5b0 <Sim7600_Wait_For_Start_Up_Respone+0x34>
		default:
			Clear_AT_Result();
 801e5aa:	f001 faa7 	bl	801fafc <Clear_AT_Result>
			break;
 801e5ae:	bf00      	nop
	}
}
 801e5b0:	bf00      	nop
 801e5b2:	bd80      	pop	{r7, pc}
 801e5b4:	20000000 	.word	0x20000000

0801e5b8 <Sim7600_Setting>:
 * Sim7600_Get_Imei()
 * @param None
 * @retval None
 * @brief This is function for Get IMEI from Simcomo7600 to set LockerID.
 */
void Sim7600_Setting(void){
 801e5b8:	b580      	push	{r7, lr}
 801e5ba:	af00      	add	r7, sp, #0
	// Clear_Reiceive_Buffer();
	UART_SIM7600_Transmit(setting_command[setting_index]);
 801e5bc:	4b06      	ldr	r3, [pc, #24]	; (801e5d8 <Sim7600_Setting+0x20>)
 801e5be:	781b      	ldrb	r3, [r3, #0]
 801e5c0:	461a      	mov	r2, r3
 801e5c2:	4b06      	ldr	r3, [pc, #24]	; (801e5dc <Sim7600_Setting+0x24>)
 801e5c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e5c8:	4618      	mov	r0, r3
 801e5ca:	f000 fa41 	bl	801ea50 <UART_SIM7600_Transmit>
	sim7600_state = SIM7600_WAIT_FOR_SETTING_RESPONE;
 801e5ce:	4b04      	ldr	r3, [pc, #16]	; (801e5e0 <Sim7600_Setting+0x28>)
 801e5d0:	2207      	movs	r2, #7
 801e5d2:	701a      	strb	r2, [r3, #0]
}
 801e5d4:	bf00      	nop
 801e5d6:	bd80      	pop	{r7, pc}
 801e5d8:	20000186 	.word	0x20000186
 801e5dc:	20000004 	.word	0x20000004
 801e5e0:	20000000 	.word	0x20000000

0801e5e4 <Sim7600_Wait_For_Setting_Respone>:
 * Sim7600_Wait_For_Get_Imei_Respone()
 * @param None
 * @retval None
 * @brief This is function for waiting respone from GET IMEI State.
 */
void Sim7600_Wait_For_Setting_Respone(void){
 801e5e4:	b580      	push	{r7, lr}
 801e5e6:	af00      	add	r7, sp, #0
	if(is_Sim7600_TimeOutFlag()){
 801e5e8:	f7ff fe74 	bl	801e2d4 <is_Sim7600_TimeOutFlag>
 801e5ec:	4603      	mov	r3, r0
 801e5ee:	2b00      	cmp	r3, #0
 801e5f0:	d030      	beq.n	801e654 <Sim7600_Wait_For_Setting_Respone+0x70>
		switch (Get_AT_Result()){
 801e5f2:	f001 fa79 	bl	801fae8 <Get_AT_Result>
 801e5f6:	4603      	mov	r3, r0
 801e5f8:	2b00      	cmp	r3, #0
 801e5fa:	d002      	beq.n	801e602 <Sim7600_Wait_For_Setting_Respone+0x1e>
 801e5fc:	2b01      	cmp	r3, #1
 801e5fe:	d023      	beq.n	801e648 <Sim7600_Wait_For_Setting_Respone+0x64>
			case AT_ERROR:
				Clear_AT_Result();
				sim7600_state = SIM7600_MAX_STATE;
				break;
			default:
				break;
 801e600:	e02b      	b.n	801e65a <Sim7600_Wait_For_Setting_Respone+0x76>
				Clear_AT_Result();
 801e602:	f001 fa7b 	bl	801fafc <Clear_AT_Result>
				if(setting_index >= (NO_SETTING_COMMAND - 1) ){
 801e606:	4b16      	ldr	r3, [pc, #88]	; (801e660 <Sim7600_Wait_For_Setting_Respone+0x7c>)
 801e608:	781b      	ldrb	r3, [r3, #0]
 801e60a:	2b07      	cmp	r3, #7
 801e60c:	d906      	bls.n	801e61c <Sim7600_Wait_For_Setting_Respone+0x38>
					setting_index = 0;
 801e60e:	4b14      	ldr	r3, [pc, #80]	; (801e660 <Sim7600_Wait_For_Setting_Respone+0x7c>)
 801e610:	2200      	movs	r2, #0
 801e612:	701a      	strb	r2, [r3, #0]
					sim7600_state = SIM7600_GET_IMEI;
 801e614:	4b13      	ldr	r3, [pc, #76]	; (801e664 <Sim7600_Wait_For_Setting_Respone+0x80>)
 801e616:	2208      	movs	r2, #8
 801e618:	701a      	strb	r2, [r3, #0]
 801e61a:	e008      	b.n	801e62e <Sim7600_Wait_For_Setting_Respone+0x4a>
					setting_index ++;
 801e61c:	4b10      	ldr	r3, [pc, #64]	; (801e660 <Sim7600_Wait_For_Setting_Respone+0x7c>)
 801e61e:	781b      	ldrb	r3, [r3, #0]
 801e620:	3301      	adds	r3, #1
 801e622:	b2da      	uxtb	r2, r3
 801e624:	4b0e      	ldr	r3, [pc, #56]	; (801e660 <Sim7600_Wait_For_Setting_Respone+0x7c>)
 801e626:	701a      	strb	r2, [r3, #0]
					sim7600_state = SIM7600_SETTING;
 801e628:	4b0e      	ldr	r3, [pc, #56]	; (801e664 <Sim7600_Wait_For_Setting_Respone+0x80>)
 801e62a:	2206      	movs	r2, #6
 801e62c:	701a      	strb	r2, [r3, #0]
				if(setting_index == 6){
 801e62e:	4b0c      	ldr	r3, [pc, #48]	; (801e660 <Sim7600_Wait_For_Setting_Respone+0x7c>)
 801e630:	781b      	ldrb	r3, [r3, #0]
 801e632:	2b06      	cmp	r3, #6
 801e634:	d110      	bne.n	801e658 <Sim7600_Wait_For_Setting_Respone+0x74>
					Clear_Sim7600_Timeout_Flag();
 801e636:	f7ff fe63 	bl	801e300 <Clear_Sim7600_Timeout_Flag>
					SCH_Add_Task(Set_Sim7600_Timeout_Flag, 500, 0);
 801e63a:	2200      	movs	r2, #0
 801e63c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801e640:	4809      	ldr	r0, [pc, #36]	; (801e668 <Sim7600_Wait_For_Setting_Respone+0x84>)
 801e642:	f001 faa7 	bl	801fb94 <SCH_Add_Task>
				break;
 801e646:	e007      	b.n	801e658 <Sim7600_Wait_For_Setting_Respone+0x74>
				Clear_AT_Result();
 801e648:	f001 fa58 	bl	801fafc <Clear_AT_Result>
				sim7600_state = SIM7600_MAX_STATE;
 801e64c:	4b05      	ldr	r3, [pc, #20]	; (801e664 <Sim7600_Wait_For_Setting_Respone+0x80>)
 801e64e:	220a      	movs	r2, #10
 801e650:	701a      	strb	r2, [r3, #0]
				break;
 801e652:	e002      	b.n	801e65a <Sim7600_Wait_For_Setting_Respone+0x76>
		}
	}
 801e654:	bf00      	nop
 801e656:	e000      	b.n	801e65a <Sim7600_Wait_For_Setting_Respone+0x76>
				break;
 801e658:	bf00      	nop
}
 801e65a:	bf00      	nop
 801e65c:	bd80      	pop	{r7, pc}
 801e65e:	bf00      	nop
 801e660:	20000186 	.word	0x20000186
 801e664:	20000000 	.word	0x20000000
 801e668:	0801e2e9 	.word	0x0801e2e9

0801e66c <Sim7600_Get_Imei>:
 * Sim7600_Get_Imei()
 * @param None
 * @retval None
 * @brief This is function for Get IMEI from Simcomo7600 to set LockerID.
 */
void Sim7600_Get_Imei(void){
 801e66c:	b580      	push	{r7, lr}
 801e66e:	af00      	add	r7, sp, #0
	// Clear_Reiceive_Buffer();
	UART_SIM7600_Transmit((uint8_t*)"AT+SIMEI?\r\n");
 801e670:	4803      	ldr	r0, [pc, #12]	; (801e680 <Sim7600_Get_Imei+0x14>)
 801e672:	f000 f9ed 	bl	801ea50 <UART_SIM7600_Transmit>
	sim7600_state = SIM7600_WAIT_FOR_GET_IMEI_RESPONE;
 801e676:	4b03      	ldr	r3, [pc, #12]	; (801e684 <Sim7600_Get_Imei+0x18>)
 801e678:	2209      	movs	r2, #9
 801e67a:	701a      	strb	r2, [r3, #0]
}
 801e67c:	bf00      	nop
 801e67e:	bd80      	pop	{r7, pc}
 801e680:	08023ac4 	.word	0x08023ac4
 801e684:	20000000 	.word	0x20000000

0801e688 <Sim7600_Wait_For_Get_Imei_Respone>:
 * Sim7600_Wait_For_Get_Imei_Respone()
 * @param None
 * @retval None
 * @brief This is function for waiting respone from GET IMEI State.
 */
void Sim7600_Wait_For_Get_Imei_Respone(void){
 801e688:	b580      	push	{r7, lr}
 801e68a:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_IMEI);
	switch (Get_AT_Result()){
 801e68c:	f001 fa2c 	bl	801fae8 <Get_AT_Result>
 801e690:	4603      	mov	r3, r0
 801e692:	2b01      	cmp	r3, #1
 801e694:	d010      	beq.n	801e6b8 <Sim7600_Wait_For_Get_Imei_Respone+0x30>
 801e696:	2b06      	cmp	r3, #6
 801e698:	d113      	bne.n	801e6c2 <Sim7600_Wait_For_Get_Imei_Respone+0x3a>
		case AT_IMEI:
			if(Get_Imei()){
 801e69a:	f000 f82b 	bl	801e6f4 <Get_Imei>
 801e69e:	4603      	mov	r3, r0
 801e6a0:	2b00      	cmp	r3, #0
 801e6a2:	d010      	beq.n	801e6c6 <Sim7600_Wait_For_Get_Imei_Respone+0x3e>
				Clear_AT_Result();
 801e6a4:	f001 fa2a 	bl	801fafc <Clear_AT_Result>
				sim7600_state = SIM7600_MAX_STATE;
 801e6a8:	4b08      	ldr	r3, [pc, #32]	; (801e6cc <Sim7600_Wait_For_Get_Imei_Respone+0x44>)
 801e6aa:	220a      	movs	r2, #10
 801e6ac:	701a      	strb	r2, [r3, #0]
				UART_DEBUG_Transmit_Size(imei_buffer, IMEI_LENGTH);
 801e6ae:	210f      	movs	r1, #15
 801e6b0:	4807      	ldr	r0, [pc, #28]	; (801e6d0 <Sim7600_Wait_For_Get_Imei_Respone+0x48>)
 801e6b2:	f000 fa85 	bl	801ebc0 <UART_DEBUG_Transmit_Size>
			}
			break;
 801e6b6:	e006      	b.n	801e6c6 <Sim7600_Wait_For_Get_Imei_Respone+0x3e>
		case AT_ERROR:
			Clear_AT_Result();
 801e6b8:	f001 fa20 	bl	801fafc <Clear_AT_Result>
			sim7600_state = SIM7600_MAX_STATE;
 801e6bc:	4b03      	ldr	r3, [pc, #12]	; (801e6cc <Sim7600_Wait_For_Get_Imei_Respone+0x44>)
 801e6be:	220a      	movs	r2, #10
 801e6c0:	701a      	strb	r2, [r3, #0]
		default:
			break;
 801e6c2:	bf00      	nop
 801e6c4:	e000      	b.n	801e6c8 <Sim7600_Wait_For_Get_Imei_Respone+0x40>
			break;
 801e6c6:	bf00      	nop
	}
}
 801e6c8:	bf00      	nop
 801e6ca:	bd80      	pop	{r7, pc}
 801e6cc:	20000000 	.word	0x20000000
 801e6d0:	200011e0 	.word	0x200011e0

0801e6d4 <SIM7600_Set_State>:
 * SIM7600_Set_State()
 * @param sim7600_state
 * @retval None
 * @brief This function set mqtt_state.
 */
void SIM7600_Set_State(Sim7600_State newState){
 801e6d4:	b480      	push	{r7}
 801e6d6:	b083      	sub	sp, #12
 801e6d8:	af00      	add	r7, sp, #0
 801e6da:	4603      	mov	r3, r0
 801e6dc:	71fb      	strb	r3, [r7, #7]
	sim7600_state = newState;
 801e6de:	4a04      	ldr	r2, [pc, #16]	; (801e6f0 <SIM7600_Set_State+0x1c>)
 801e6e0:	79fb      	ldrb	r3, [r7, #7]
 801e6e2:	7013      	strb	r3, [r2, #0]
}
 801e6e4:	bf00      	nop
 801e6e6:	370c      	adds	r7, #12
 801e6e8:	46bd      	mov	sp, r7
 801e6ea:	bc80      	pop	{r7}
 801e6ec:	4770      	bx	lr
 801e6ee:	bf00      	nop
 801e6f0:	20000000 	.word	0x20000000

0801e6f4 <Get_Imei>:





FlagStatus Get_Imei(){
 801e6f4:	b598      	push	{r3, r4, r7, lr}
 801e6f6:	af00      	add	r7, sp, #0
	if(imei_count == IMEI_LENGTH){
 801e6f8:	4b0e      	ldr	r3, [pc, #56]	; (801e734 <Get_Imei+0x40>)
 801e6fa:	781b      	ldrb	r3, [r3, #0]
 801e6fc:	2b0f      	cmp	r3, #15
 801e6fe:	d104      	bne.n	801e70a <Get_Imei+0x16>
		imei_count = 0;
 801e700:	4b0c      	ldr	r3, [pc, #48]	; (801e734 <Get_Imei+0x40>)
 801e702:	2200      	movs	r2, #0
 801e704:	701a      	strb	r2, [r3, #0]
		return SET;
 801e706:	2301      	movs	r3, #1
 801e708:	e012      	b.n	801e730 <Get_Imei+0x3c>
	}
	if(UART_SIM7600_Received_Buffer_Available()){
 801e70a:	f000 f9cd 	bl	801eaa8 <UART_SIM7600_Received_Buffer_Available>
 801e70e:	4603      	mov	r3, r0
 801e710:	2b00      	cmp	r3, #0
 801e712:	d00c      	beq.n	801e72e <Get_Imei+0x3a>
		imei_buffer[imei_count++] = UART_SIM7600_Read_Received_Buffer();
 801e714:	4b07      	ldr	r3, [pc, #28]	; (801e734 <Get_Imei+0x40>)
 801e716:	781b      	ldrb	r3, [r3, #0]
 801e718:	1c5a      	adds	r2, r3, #1
 801e71a:	b2d1      	uxtb	r1, r2
 801e71c:	4a05      	ldr	r2, [pc, #20]	; (801e734 <Get_Imei+0x40>)
 801e71e:	7011      	strb	r1, [r2, #0]
 801e720:	461c      	mov	r4, r3
 801e722:	f000 f9d7 	bl	801ead4 <UART_SIM7600_Read_Received_Buffer>
 801e726:	4603      	mov	r3, r0
 801e728:	461a      	mov	r2, r3
 801e72a:	4b03      	ldr	r3, [pc, #12]	; (801e738 <Get_Imei+0x44>)
 801e72c:	551a      	strb	r2, [r3, r4]
	}
	return RESET;
 801e72e:	2300      	movs	r3, #0
}
 801e730:	4618      	mov	r0, r3
 801e732:	bd98      	pop	{r3, r4, r7, pc}
 801e734:	20000184 	.word	0x20000184
 801e738:	200011e0 	.word	0x200011e0

0801e73c <Reset_SimConfiguration_State>:

void Reset_SimConfiguration_State(){
 801e73c:	b580      	push	{r7, lr}
 801e73e:	af00      	add	r7, sp, #0
	SIM7600_Set_State(SIM7600_RESET);
 801e740:	2002      	movs	r0, #2
 801e742:	f7ff ffc7 	bl	801e6d4 <SIM7600_Set_State>
}
 801e746:	bf00      	nop
 801e748:	bd80      	pop	{r7, pc}
	...

0801e74c <GPIO_Init>:
  * @brief 	GPIO Initialization Function: 74HC245, LED, Buzzer, SPI_CS, SwitchID, SIM7600_GPIO
  * @param 	None
  * @retval None
  */
void GPIO_Init(void)
{
 801e74c:	b580      	push	{r7, lr}
 801e74e:	b084      	sub	sp, #16
 801e750:	af00      	add	r7, sp, #0
//	GPIO_InitTypeDef GPIO_InitStruct = {0};

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801e752:	4b1b      	ldr	r3, [pc, #108]	; (801e7c0 <GPIO_Init+0x74>)
 801e754:	699b      	ldr	r3, [r3, #24]
 801e756:	4a1a      	ldr	r2, [pc, #104]	; (801e7c0 <GPIO_Init+0x74>)
 801e758:	f043 0310 	orr.w	r3, r3, #16
 801e75c:	6193      	str	r3, [r2, #24]
 801e75e:	4b18      	ldr	r3, [pc, #96]	; (801e7c0 <GPIO_Init+0x74>)
 801e760:	699b      	ldr	r3, [r3, #24]
 801e762:	f003 0310 	and.w	r3, r3, #16
 801e766:	60fb      	str	r3, [r7, #12]
 801e768:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 801e76a:	4b15      	ldr	r3, [pc, #84]	; (801e7c0 <GPIO_Init+0x74>)
 801e76c:	699b      	ldr	r3, [r3, #24]
 801e76e:	4a14      	ldr	r2, [pc, #80]	; (801e7c0 <GPIO_Init+0x74>)
 801e770:	f043 0320 	orr.w	r3, r3, #32
 801e774:	6193      	str	r3, [r2, #24]
 801e776:	4b12      	ldr	r3, [pc, #72]	; (801e7c0 <GPIO_Init+0x74>)
 801e778:	699b      	ldr	r3, [r3, #24]
 801e77a:	f003 0320 	and.w	r3, r3, #32
 801e77e:	60bb      	str	r3, [r7, #8]
 801e780:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801e782:	4b0f      	ldr	r3, [pc, #60]	; (801e7c0 <GPIO_Init+0x74>)
 801e784:	699b      	ldr	r3, [r3, #24]
 801e786:	4a0e      	ldr	r2, [pc, #56]	; (801e7c0 <GPIO_Init+0x74>)
 801e788:	f043 0304 	orr.w	r3, r3, #4
 801e78c:	6193      	str	r3, [r2, #24]
 801e78e:	4b0c      	ldr	r3, [pc, #48]	; (801e7c0 <GPIO_Init+0x74>)
 801e790:	699b      	ldr	r3, [r3, #24]
 801e792:	f003 0304 	and.w	r3, r3, #4
 801e796:	607b      	str	r3, [r7, #4]
 801e798:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801e79a:	4b09      	ldr	r3, [pc, #36]	; (801e7c0 <GPIO_Init+0x74>)
 801e79c:	699b      	ldr	r3, [r3, #24]
 801e79e:	4a08      	ldr	r2, [pc, #32]	; (801e7c0 <GPIO_Init+0x74>)
 801e7a0:	f043 0308 	orr.w	r3, r3, #8
 801e7a4:	6193      	str	r3, [r2, #24]
 801e7a6:	4b06      	ldr	r3, [pc, #24]	; (801e7c0 <GPIO_Init+0x74>)
 801e7a8:	699b      	ldr	r3, [r3, #24]
 801e7aa:	f003 0308 	and.w	r3, r3, #8
 801e7ae:	603b      	str	r3, [r7, #0]
 801e7b0:	683b      	ldr	r3, [r7, #0]
//	urgent_init();
//	LED_Init();
//	Buzzer_Init();
//	SPI_CS_Init();
//	Switch_Init();
	Sim7600_GPIO_Init();
 801e7b2:	f000 f807 	bl	801e7c4 <Sim7600_GPIO_Init>
//	Read_BoardID();
}
 801e7b6:	bf00      	nop
 801e7b8:	3710      	adds	r7, #16
 801e7ba:	46bd      	mov	sp, r7
 801e7bc:	bd80      	pop	{r7, pc}
 801e7be:	bf00      	nop
 801e7c0:	40021000 	.word	0x40021000

0801e7c4 <Sim7600_GPIO_Init>:

	GPIO_InitStruct.Pin = BUZZER_PIN;
	HAL_GPIO_Init(BUZZER_PORT, &GPIO_InitStruct);
}

void Sim7600_GPIO_Init(void){
 801e7c4:	b580      	push	{r7, lr}
 801e7c6:	b084      	sub	sp, #16
 801e7c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 801e7ca:	463b      	mov	r3, r7
 801e7cc:	2200      	movs	r2, #0
 801e7ce:	601a      	str	r2, [r3, #0]
 801e7d0:	605a      	str	r2, [r3, #4]
 801e7d2:	609a      	str	r2, [r3, #8]
 801e7d4:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 801e7d6:	2301      	movs	r3, #1
 801e7d8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull  = GPIO_PULLUP;
 801e7da:	2301      	movs	r3, #1
 801e7dc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801e7de:	2303      	movs	r3, #3
 801e7e0:	60fb      	str	r3, [r7, #12]

	GPIO_InitStruct.Pin = SIM7600_4G_PWRON;
 801e7e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 801e7e6:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(SIM7600_4G_PWRON_PORT, &GPIO_InitStruct);
 801e7e8:	463b      	mov	r3, r7
 801e7ea:	4619      	mov	r1, r3
 801e7ec:	480d      	ldr	r0, [pc, #52]	; (801e824 <Sim7600_GPIO_Init+0x60>)
 801e7ee:	f002 fbf1 	bl	8020fd4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SIM7600_4G_PERST;
 801e7f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 801e7f6:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(SIM7600_4G_PERST_PORT, &GPIO_InitStruct);
 801e7f8:	463b      	mov	r3, r7
 801e7fa:	4619      	mov	r1, r3
 801e7fc:	4809      	ldr	r0, [pc, #36]	; (801e824 <Sim7600_GPIO_Init+0x60>)
 801e7fe:	f002 fbe9 	bl	8020fd4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(SIM7600_4G_PWRON_PORT, SIM7600_4G_PWRON, SET);
 801e802:	2201      	movs	r2, #1
 801e804:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e808:	4806      	ldr	r0, [pc, #24]	; (801e824 <Sim7600_GPIO_Init+0x60>)
 801e80a:	f002 fd77 	bl	80212fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SIM7600_4G_PERST_PORT, SIM7600_4G_PERST, SET);
 801e80e:	2201      	movs	r2, #1
 801e810:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e814:	4803      	ldr	r0, [pc, #12]	; (801e824 <Sim7600_GPIO_Init+0x60>)
 801e816:	f002 fd71 	bl	80212fc <HAL_GPIO_WritePin>
}
 801e81a:	bf00      	nop
 801e81c:	3710      	adds	r7, #16
 801e81e:	46bd      	mov	sp, r7
 801e820:	bd80      	pop	{r7, pc}
 801e822:	bf00      	nop
 801e824:	40011000 	.word	0x40011000

0801e828 <SPI2_Init>:





HAL_StatusTypeDef SPI2_Init(void){
 801e828:	b580      	push	{r7, lr}
 801e82a:	af00      	add	r7, sp, #0
	/*##-1- Configure the SPI peripheral #######################################*/
		  /* Set the SPI parameters */
		  Spi2Handle.Instance               = SPI2;
 801e82c:	4b1d      	ldr	r3, [pc, #116]	; (801e8a4 <SPI2_Init+0x7c>)
 801e82e:	4a1e      	ldr	r2, [pc, #120]	; (801e8a8 <SPI2_Init+0x80>)
 801e830:	601a      	str	r2, [r3, #0]
		  Spi2Handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 801e832:	4b1c      	ldr	r3, [pc, #112]	; (801e8a4 <SPI2_Init+0x7c>)
 801e834:	2228      	movs	r2, #40	; 0x28
 801e836:	61da      	str	r2, [r3, #28]
		  Spi2Handle.Init.Direction         = SPI_DIRECTION_2LINES;
 801e838:	4b1a      	ldr	r3, [pc, #104]	; (801e8a4 <SPI2_Init+0x7c>)
 801e83a:	2200      	movs	r2, #0
 801e83c:	609a      	str	r2, [r3, #8]
		  Spi2Handle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 801e83e:	4b19      	ldr	r3, [pc, #100]	; (801e8a4 <SPI2_Init+0x7c>)
 801e840:	2200      	movs	r2, #0
 801e842:	615a      	str	r2, [r3, #20]
		  Spi2Handle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 801e844:	4b17      	ldr	r3, [pc, #92]	; (801e8a4 <SPI2_Init+0x7c>)
 801e846:	2200      	movs	r2, #0
 801e848:	611a      	str	r2, [r3, #16]
		  Spi2Handle.Init.DataSize          = SPI_DATASIZE_8BIT;
 801e84a:	4b16      	ldr	r3, [pc, #88]	; (801e8a4 <SPI2_Init+0x7c>)
 801e84c:	2200      	movs	r2, #0
 801e84e:	60da      	str	r2, [r3, #12]
		  Spi2Handle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 801e850:	4b14      	ldr	r3, [pc, #80]	; (801e8a4 <SPI2_Init+0x7c>)
 801e852:	2200      	movs	r2, #0
 801e854:	621a      	str	r2, [r3, #32]
		  Spi2Handle.Init.TIMode            = SPI_TIMODE_DISABLE;
 801e856:	4b13      	ldr	r3, [pc, #76]	; (801e8a4 <SPI2_Init+0x7c>)
 801e858:	2200      	movs	r2, #0
 801e85a:	625a      	str	r2, [r3, #36]	; 0x24
		  Spi2Handle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 801e85c:	4b11      	ldr	r3, [pc, #68]	; (801e8a4 <SPI2_Init+0x7c>)
 801e85e:	2200      	movs	r2, #0
 801e860:	629a      	str	r2, [r3, #40]	; 0x28
		  Spi2Handle.Init.CRCPolynomial     = 7;
 801e862:	4b10      	ldr	r3, [pc, #64]	; (801e8a4 <SPI2_Init+0x7c>)
 801e864:	2207      	movs	r2, #7
 801e866:	62da      	str	r2, [r3, #44]	; 0x2c
//		  Spi2Handle.Init.NSS               = SPI_NSS_SOFT;
		  Spi2Handle.Init.NSS               = SPI_NSS_HARD_OUTPUT;
 801e868:	4b0e      	ldr	r3, [pc, #56]	; (801e8a4 <SPI2_Init+0x7c>)
 801e86a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801e86e:	619a      	str	r2, [r3, #24]
		  Spi2Handle.Init.Mode = SPI_MODE_MASTER;
 801e870:	4b0c      	ldr	r3, [pc, #48]	; (801e8a4 <SPI2_Init+0x7c>)
 801e872:	f44f 7282 	mov.w	r2, #260	; 0x104
 801e876:	605a      	str	r2, [r3, #4]

		  if(HAL_SPI_Init(&Spi2Handle) != HAL_OK)
 801e878:	480a      	ldr	r0, [pc, #40]	; (801e8a4 <SPI2_Init+0x7c>)
 801e87a:	f003 f971 	bl	8021b60 <HAL_SPI_Init>
 801e87e:	4603      	mov	r3, r0
 801e880:	2b00      	cmp	r3, #0
 801e882:	d003      	beq.n	801e88c <SPI2_Init+0x64>
		  {
		    /* Initialization Error */
		    Error_Handler();
 801e884:	f001 fd88 	bl	8020398 <Error_Handler>
		    return HAL_ERROR;
 801e888:	2301      	movs	r3, #1
 801e88a:	e008      	b.n	801e89e <SPI2_Init+0x76>
		  }
		  /* SPI block is enabled prior calling SPI transmit/receive functions, in order to get CLK signal properly pulled down.
		     Otherwise, SPI CLK signal is not clean on this board and leads to errors during transfer */
		  __HAL_SPI_ENABLE(&Spi2Handle);
 801e88c:	4b05      	ldr	r3, [pc, #20]	; (801e8a4 <SPI2_Init+0x7c>)
 801e88e:	681b      	ldr	r3, [r3, #0]
 801e890:	681a      	ldr	r2, [r3, #0]
 801e892:	4b04      	ldr	r3, [pc, #16]	; (801e8a4 <SPI2_Init+0x7c>)
 801e894:	681b      	ldr	r3, [r3, #0]
 801e896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801e89a:	601a      	str	r2, [r3, #0]
		  return HAL_OK;
 801e89c:	2300      	movs	r3, #0
}
 801e89e:	4618      	mov	r0, r3
 801e8a0:	bd80      	pop	{r7, pc}
 801e8a2:	bf00      	nop
 801e8a4:	200011f0 	.word	0x200011f0
 801e8a8:	40003800 	.word	0x40003800

0801e8ac <ResetChipSelect>:

void ResetChipSelect(void){
 801e8ac:	b580      	push	{r7, lr}
 801e8ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_PORT,SPI2_NSS_PIN, GPIO_PIN_RESET);
 801e8b0:	2200      	movs	r2, #0
 801e8b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801e8b6:	4802      	ldr	r0, [pc, #8]	; (801e8c0 <ResetChipSelect+0x14>)
 801e8b8:	f002 fd20 	bl	80212fc <HAL_GPIO_WritePin>
}
 801e8bc:	bf00      	nop
 801e8be:	bd80      	pop	{r7, pc}
 801e8c0:	40010c00 	.word	0x40010c00

0801e8c4 <SetChipSelect>:

void SetChipSelect(void){
 801e8c4:	b580      	push	{r7, lr}
 801e8c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_PORT,SPI2_NSS_PIN, GPIO_PIN_SET);
 801e8c8:	2201      	movs	r2, #1
 801e8ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801e8ce:	4802      	ldr	r0, [pc, #8]	; (801e8d8 <SetChipSelect+0x14>)
 801e8d0:	f002 fd14 	bl	80212fc <HAL_GPIO_WritePin>
}
 801e8d4:	bf00      	nop
 801e8d6:	bd80      	pop	{r7, pc}
 801e8d8:	40010c00 	.word	0x40010c00

0801e8dc <SystemClock_Config>:
 * @author thodo
 */
#include <Peripheral/app_system_clock_config.h>

HAL_StatusTypeDef SystemClock_Config(void)
{
 801e8dc:	b580      	push	{r7, lr}
 801e8de:	b090      	sub	sp, #64	; 0x40
 801e8e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801e8e2:	f107 0318 	add.w	r3, r7, #24
 801e8e6:	2228      	movs	r2, #40	; 0x28
 801e8e8:	2100      	movs	r1, #0
 801e8ea:	4618      	mov	r0, r3
 801e8ec:	f004 fbb2 	bl	8023054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801e8f0:	1d3b      	adds	r3, r7, #4
 801e8f2:	2200      	movs	r2, #0
 801e8f4:	601a      	str	r2, [r3, #0]
 801e8f6:	605a      	str	r2, [r3, #4]
 801e8f8:	609a      	str	r2, [r3, #8]
 801e8fa:	60da      	str	r2, [r3, #12]
 801e8fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 801e8fe:	230a      	movs	r3, #10
 801e900:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801e902:	2301      	movs	r3, #1
 801e904:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 801e906:	2310      	movs	r3, #16
 801e908:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 801e90a:	2301      	movs	r3, #1
 801e90c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801e90e:	2302      	movs	r3, #2
 801e910:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 801e912:	2300      	movs	r3, #0
 801e914:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 801e916:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 801e91a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801e91c:	f107 0318 	add.w	r3, r7, #24
 801e920:	4618      	mov	r0, r3
 801e922:	f002 fd03 	bl	802132c <HAL_RCC_OscConfig>
 801e926:	4603      	mov	r3, r0
 801e928:	2b00      	cmp	r3, #0
 801e92a:	d001      	beq.n	801e930 <SystemClock_Config+0x54>
  {
	  return HAL_ERROR;
 801e92c:	2301      	movs	r3, #1
 801e92e:	e017      	b.n	801e960 <SystemClock_Config+0x84>
	  Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801e930:	230f      	movs	r3, #15
 801e932:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801e934:	2302      	movs	r3, #2
 801e936:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801e938:	2300      	movs	r3, #0
 801e93a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 801e93c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e940:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801e942:	2300      	movs	r3, #0
 801e944:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 801e946:	1d3b      	adds	r3, r7, #4
 801e948:	2102      	movs	r1, #2
 801e94a:	4618      	mov	r0, r3
 801e94c:	f002 ff6e 	bl	802182c <HAL_RCC_ClockConfig>
 801e950:	4603      	mov	r3, r0
 801e952:	2b00      	cmp	r3, #0
 801e954:	d003      	beq.n	801e95e <SystemClock_Config+0x82>
  {
    Error_Handler();
 801e956:	f001 fd1f 	bl	8020398 <Error_Handler>
    return HAL_ERROR;
 801e95a:	2301      	movs	r3, #1
 801e95c:	e000      	b.n	801e960 <SystemClock_Config+0x84>
  }
  return HAL_OK;
 801e95e:	2300      	movs	r3, #0
}
 801e960:	4618      	mov	r0, r3
 801e962:	3740      	adds	r7, #64	; 0x40
 801e964:	46bd      	mov	sp, r7
 801e966:	bd80      	pop	{r7, pc}

0801e968 <Timer_Init>:

/* Prescaler declaration */
uint32_t uwPrescalerValue = 0;


HAL_StatusTypeDef Timer_Init(void){
 801e968:	b580      	push	{r7, lr}
 801e96a:	af00      	add	r7, sp, #0
	      2) by calling HAL API function HAL_RCC_GetSysClockFreq()
	      3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
	  ----------------------------------------------------------------------- */

	  /* Compute the prescaler value to have TIMx counter clock equal to 10000 Hz */
	  uwPrescalerValue = (uint32_t)(SystemCoreClock / 10000) - 1;
 801e96c:	4b18      	ldr	r3, [pc, #96]	; (801e9d0 <Timer_Init+0x68>)
 801e96e:	681b      	ldr	r3, [r3, #0]
 801e970:	4a18      	ldr	r2, [pc, #96]	; (801e9d4 <Timer_Init+0x6c>)
 801e972:	fba2 2303 	umull	r2, r3, r2, r3
 801e976:	0b5b      	lsrs	r3, r3, #13
 801e978:	3b01      	subs	r3, #1
 801e97a:	4a17      	ldr	r2, [pc, #92]	; (801e9d8 <Timer_Init+0x70>)
 801e97c:	6013      	str	r3, [r2, #0]

	  /* Set TIMx instance */
	  htim3.Instance = TIM3;
 801e97e:	4b17      	ldr	r3, [pc, #92]	; (801e9dc <Timer_Init+0x74>)
 801e980:	4a17      	ldr	r2, [pc, #92]	; (801e9e0 <Timer_Init+0x78>)
 801e982:	601a      	str	r2, [r3, #0]
	       + Period = 10000 - 1
	       + Prescaler = (SystemCoreClock/10000) - 1
	       + ClockDivision = 0
	       + Counter direction = Up
	  */
	  htim3.Init.Period            = TIMER_CYCLE*10-1;
 801e984:	4b15      	ldr	r3, [pc, #84]	; (801e9dc <Timer_Init+0x74>)
 801e986:	2263      	movs	r2, #99	; 0x63
 801e988:	60da      	str	r2, [r3, #12]
	  htim3.Init.Prescaler         = uwPrescalerValue;
 801e98a:	4b13      	ldr	r3, [pc, #76]	; (801e9d8 <Timer_Init+0x70>)
 801e98c:	681b      	ldr	r3, [r3, #0]
 801e98e:	4a13      	ldr	r2, [pc, #76]	; (801e9dc <Timer_Init+0x74>)
 801e990:	6053      	str	r3, [r2, #4]
	  htim3.Init.ClockDivision     = 0;
 801e992:	4b12      	ldr	r3, [pc, #72]	; (801e9dc <Timer_Init+0x74>)
 801e994:	2200      	movs	r2, #0
 801e996:	611a      	str	r2, [r3, #16]
	  htim3.Init.CounterMode       = TIM_COUNTERMODE_UP;
 801e998:	4b10      	ldr	r3, [pc, #64]	; (801e9dc <Timer_Init+0x74>)
 801e99a:	2200      	movs	r2, #0
 801e99c:	609a      	str	r2, [r3, #8]
	  htim3.Init.RepetitionCounter = 0;
 801e99e:	4b0f      	ldr	r3, [pc, #60]	; (801e9dc <Timer_Init+0x74>)
 801e9a0:	2200      	movs	r2, #0
 801e9a2:	615a      	str	r2, [r3, #20]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801e9a4:	4b0d      	ldr	r3, [pc, #52]	; (801e9dc <Timer_Init+0x74>)
 801e9a6:	2200      	movs	r2, #0
 801e9a8:	619a      	str	r2, [r3, #24]

	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 801e9aa:	480c      	ldr	r0, [pc, #48]	; (801e9dc <Timer_Init+0x74>)
 801e9ac:	f003 fb3e 	bl	802202c <HAL_TIM_Base_Init>
 801e9b0:	4603      	mov	r3, r0
 801e9b2:	2b00      	cmp	r3, #0
 801e9b4:	d001      	beq.n	801e9ba <Timer_Init+0x52>
	  {
	    /* Initialization Error */
		  return HAL_ERROR;
 801e9b6:	2301      	movs	r3, #1
 801e9b8:	e008      	b.n	801e9cc <Timer_Init+0x64>
	    Error_Handler();
	  }

	  /*##-2- Start the TIM Base generation in interrupt mode ####################*/
	  /* Start Channel1 */
	  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 801e9ba:	4808      	ldr	r0, [pc, #32]	; (801e9dc <Timer_Init+0x74>)
 801e9bc:	f003 fb86 	bl	80220cc <HAL_TIM_Base_Start_IT>
 801e9c0:	4603      	mov	r3, r0
 801e9c2:	2b00      	cmp	r3, #0
 801e9c4:	d001      	beq.n	801e9ca <Timer_Init+0x62>
	  {
	    /* Starting Error */
		  return HAL_ERROR;
 801e9c6:	2301      	movs	r3, #1
 801e9c8:	e000      	b.n	801e9cc <Timer_Init+0x64>
	    Error_Handler();
	  }
	  return HAL_OK;
 801e9ca:	2300      	movs	r3, #0
}
 801e9cc:	4618      	mov	r0, r3
 801e9ce:	bd80      	pop	{r7, pc}
 801e9d0:	200000f4 	.word	0x200000f4
 801e9d4:	d1b71759 	.word	0xd1b71759
 801e9d8:	20000188 	.word	0x20000188
 801e9dc:	20001254 	.word	0x20001254
 801e9e0:	40000400 	.word	0x40000400

0801e9e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801e9e4:	b580      	push	{r7, lr}
 801e9e6:	b082      	sub	sp, #8
 801e9e8:	af00      	add	r7, sp, #0
 801e9ea:	6078      	str	r0, [r7, #4]
	SCH_Update();
 801e9ec:	f001 f8aa 	bl	801fb44 <SCH_Update>
}
 801e9f0:	bf00      	nop
 801e9f2:	3708      	adds	r7, #8
 801e9f4:	46bd      	mov	sp, r7
 801e9f6:	bd80      	pop	{r7, pc}

0801e9f8 <UART_SIM7600_Init>:
  * @brief USART SIMCOM7600 Initialization Function
  * @param None
  * @retval None
  */
HAL_StatusTypeDef UART_SIM7600_Init(void)
{
 801e9f8:	b580      	push	{r7, lr}
 801e9fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 801e9fc:	4b12      	ldr	r3, [pc, #72]	; (801ea48 <UART_SIM7600_Init+0x50>)
 801e9fe:	4a13      	ldr	r2, [pc, #76]	; (801ea4c <UART_SIM7600_Init+0x54>)
 801ea00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 801ea02:	4b11      	ldr	r3, [pc, #68]	; (801ea48 <UART_SIM7600_Init+0x50>)
 801ea04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801ea08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801ea0a:	4b0f      	ldr	r3, [pc, #60]	; (801ea48 <UART_SIM7600_Init+0x50>)
 801ea0c:	2200      	movs	r2, #0
 801ea0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 801ea10:	4b0d      	ldr	r3, [pc, #52]	; (801ea48 <UART_SIM7600_Init+0x50>)
 801ea12:	2200      	movs	r2, #0
 801ea14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801ea16:	4b0c      	ldr	r3, [pc, #48]	; (801ea48 <UART_SIM7600_Init+0x50>)
 801ea18:	2200      	movs	r2, #0
 801ea1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 801ea1c:	4b0a      	ldr	r3, [pc, #40]	; (801ea48 <UART_SIM7600_Init+0x50>)
 801ea1e:	220c      	movs	r2, #12
 801ea20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801ea22:	4b09      	ldr	r3, [pc, #36]	; (801ea48 <UART_SIM7600_Init+0x50>)
 801ea24:	2200      	movs	r2, #0
 801ea26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801ea28:	4b07      	ldr	r3, [pc, #28]	; (801ea48 <UART_SIM7600_Init+0x50>)
 801ea2a:	2200      	movs	r2, #0
 801ea2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801ea2e:	4806      	ldr	r0, [pc, #24]	; (801ea48 <UART_SIM7600_Init+0x50>)
 801ea30:	f003 fd64 	bl	80224fc <HAL_UART_Init>
 801ea34:	4603      	mov	r3, r0
 801ea36:	2b00      	cmp	r3, #0
 801ea38:	d001      	beq.n	801ea3e <UART_SIM7600_Init+0x46>
  {
	  return HAL_ERROR;
 801ea3a:	2301      	movs	r3, #1
 801ea3c:	e002      	b.n	801ea44 <UART_SIM7600_Init+0x4c>
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */
  Start_Receive_IT();
 801ea3e:	f000 f8d7 	bl	801ebf0 <Start_Receive_IT>
  /* USER CODE END USART1_Init 2 */
  return HAL_OK;
 801ea42:	2300      	movs	r3, #0
}
 801ea44:	4618      	mov	r0, r3
 801ea46:	bd80      	pop	{r7, pc}
 801ea48:	200022e4 	.word	0x200022e4
 801ea4c:	40013800 	.word	0x40013800

0801ea50 <UART_SIM7600_Transmit>:
/**
  * @brief UART_SIM7600_Transmit Initialization Function
  * @param None
  * @retval None
  */
void UART_SIM7600_Transmit(uint8_t *buffer){
 801ea50:	b580      	push	{r7, lr}
 801ea52:	b084      	sub	sp, #16
 801ea54:	af00      	add	r7, sp, #0
 801ea56:	6078      	str	r0, [r7, #4]
	uint16_t tmpLen = strlen((char*)buffer);
 801ea58:	6878      	ldr	r0, [r7, #4]
 801ea5a:	f7ff fbe3 	bl	801e224 <strlen>
 801ea5e:	4603      	mov	r3, r0
 801ea60:	81fb      	strh	r3, [r7, #14]
	if(tmpLen == 0) {
 801ea62:	89fb      	ldrh	r3, [r7, #14]
 801ea64:	2b00      	cmp	r3, #0
 801ea66:	d017      	beq.n	801ea98 <UART_SIM7600_Transmit+0x48>
		return;
	} else {
#ifdef DEBUG
		LOG(buffer);
 801ea68:	6878      	ldr	r0, [r7, #4]
 801ea6a:	f000 f88b 	bl	801eb84 <UART_DEBUG_Transmit>
//		if (DEBUG){
////			while(!UartTransmitReady);
//			UART_DEBUG_Transmit(buffer);
//		}
		//TODO: never do while in state machine
		while(!UartTransmitReady);
 801ea6e:	bf00      	nop
 801ea70:	4b0b      	ldr	r3, [pc, #44]	; (801eaa0 <UART_SIM7600_Transmit+0x50>)
 801ea72:	781b      	ldrb	r3, [r3, #0]
 801ea74:	b2db      	uxtb	r3, r3
 801ea76:	2b00      	cmp	r3, #0
 801ea78:	d0fa      	beq.n	801ea70 <UART_SIM7600_Transmit+0x20>
		if(HAL_UART_Transmit_IT(&huart1, buffer, tmpLen)!= HAL_OK){
 801ea7a:	89fb      	ldrh	r3, [r7, #14]
 801ea7c:	461a      	mov	r2, r3
 801ea7e:	6879      	ldr	r1, [r7, #4]
 801ea80:	4808      	ldr	r0, [pc, #32]	; (801eaa4 <UART_SIM7600_Transmit+0x54>)
 801ea82:	f003 fe1a 	bl	80226ba <HAL_UART_Transmit_IT>
 801ea86:	4603      	mov	r3, r0
 801ea88:	2b00      	cmp	r3, #0
 801ea8a:	d001      	beq.n	801ea90 <UART_SIM7600_Transmit+0x40>
			Error_Handler();
 801ea8c:	f001 fc84 	bl	8020398 <Error_Handler>
		}
		UartTransmitReady = RESET;
 801ea90:	4b03      	ldr	r3, [pc, #12]	; (801eaa0 <UART_SIM7600_Transmit+0x50>)
 801ea92:	2200      	movs	r2, #0
 801ea94:	701a      	strb	r2, [r3, #0]
	}
	return;
 801ea96:	e000      	b.n	801ea9a <UART_SIM7600_Transmit+0x4a>
		return;
 801ea98:	bf00      	nop
}
 801ea9a:	3710      	adds	r7, #16
 801ea9c:	46bd      	mov	sp, r7
 801ea9e:	bd80      	pop	{r7, pc}
 801eaa0:	20000078 	.word	0x20000078
 801eaa4:	200022e4 	.word	0x200022e4

0801eaa8 <UART_SIM7600_Received_Buffer_Available>:
  * @brief UART_SIM7600_Received_Buffer_Available Initialization Function
  * @param None
  * @param None
  * @retval None
  */
uint8_t UART_SIM7600_Received_Buffer_Available(void){
 801eaa8:	b480      	push	{r7}
 801eaaa:	af00      	add	r7, sp, #0
	if(receiveBufferIndexTail != receiveBufferIndexHead){
 801eaac:	4b07      	ldr	r3, [pc, #28]	; (801eacc <UART_SIM7600_Received_Buffer_Available+0x24>)
 801eaae:	881b      	ldrh	r3, [r3, #0]
 801eab0:	b29a      	uxth	r2, r3
 801eab2:	4b07      	ldr	r3, [pc, #28]	; (801ead0 <UART_SIM7600_Received_Buffer_Available+0x28>)
 801eab4:	881b      	ldrh	r3, [r3, #0]
 801eab6:	b29b      	uxth	r3, r3
 801eab8:	429a      	cmp	r2, r3
 801eaba:	d001      	beq.n	801eac0 <UART_SIM7600_Received_Buffer_Available+0x18>
		return 1;
 801eabc:	2301      	movs	r3, #1
 801eabe:	e000      	b.n	801eac2 <UART_SIM7600_Received_Buffer_Available+0x1a>
	} else {
		return 0;
 801eac0:	2300      	movs	r3, #0
	}
}
 801eac2:	4618      	mov	r0, r3
 801eac4:	46bd      	mov	sp, r7
 801eac6:	bc80      	pop	{r7}
 801eac8:	4770      	bx	lr
 801eaca:	bf00      	nop
 801eacc:	2000018e 	.word	0x2000018e
 801ead0:	2000018c 	.word	0x2000018c

0801ead4 <UART_SIM7600_Read_Received_Buffer>:
  * @param None
  * @param None
  * @retval ch character at Tail index of buffer and Tail will increase 1
  */
char log[10];
uint8_t UART_SIM7600_Read_Received_Buffer(void){
 801ead4:	b480      	push	{r7}
 801ead6:	b083      	sub	sp, #12
 801ead8:	af00      	add	r7, sp, #0
	if(receiveBufferIndexTail == receiveBufferIndexHead) return 0xff;
 801eada:	4b12      	ldr	r3, [pc, #72]	; (801eb24 <UART_SIM7600_Read_Received_Buffer+0x50>)
 801eadc:	881b      	ldrh	r3, [r3, #0]
 801eade:	b29a      	uxth	r2, r3
 801eae0:	4b11      	ldr	r3, [pc, #68]	; (801eb28 <UART_SIM7600_Read_Received_Buffer+0x54>)
 801eae2:	881b      	ldrh	r3, [r3, #0]
 801eae4:	b29b      	uxth	r3, r3
 801eae6:	429a      	cmp	r2, r3
 801eae8:	d101      	bne.n	801eaee <UART_SIM7600_Read_Received_Buffer+0x1a>
 801eaea:	23ff      	movs	r3, #255	; 0xff
 801eaec:	e015      	b.n	801eb1a <UART_SIM7600_Read_Received_Buffer+0x46>
	uint8_t ch = aUART_RxBuffer[receiveBufferIndexTail];
 801eaee:	4b0d      	ldr	r3, [pc, #52]	; (801eb24 <UART_SIM7600_Read_Received_Buffer+0x50>)
 801eaf0:	881b      	ldrh	r3, [r3, #0]
 801eaf2:	b29b      	uxth	r3, r3
 801eaf4:	461a      	mov	r2, r3
 801eaf6:	4b0d      	ldr	r3, [pc, #52]	; (801eb2c <UART_SIM7600_Read_Received_Buffer+0x58>)
 801eaf8:	5c9b      	ldrb	r3, [r3, r2]
 801eafa:	71fb      	strb	r3, [r7, #7]
	receiveBufferIndexTail = (receiveBufferIndexTail + 1) % UART_RX_BUFFERSIZE;
 801eafc:	4b09      	ldr	r3, [pc, #36]	; (801eb24 <UART_SIM7600_Read_Received_Buffer+0x50>)
 801eafe:	881b      	ldrh	r3, [r3, #0]
 801eb00:	b29b      	uxth	r3, r3
 801eb02:	3301      	adds	r3, #1
 801eb04:	425a      	negs	r2, r3
 801eb06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801eb0a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801eb0e:	bf58      	it	pl
 801eb10:	4253      	negpl	r3, r2
 801eb12:	b29a      	uxth	r2, r3
 801eb14:	4b03      	ldr	r3, [pc, #12]	; (801eb24 <UART_SIM7600_Read_Received_Buffer+0x50>)
 801eb16:	801a      	strh	r2, [r3, #0]
//	sprintf(log,"%d\r\n",receiveBufferIndexTail,receiveBufferIndexHead);
//	LOG("1111");
	return ch;
 801eb18:	79fb      	ldrb	r3, [r7, #7]
}
 801eb1a:	4618      	mov	r0, r3
 801eb1c:	370c      	adds	r7, #12
 801eb1e:	46bd      	mov	sp, r7
 801eb20:	bc80      	pop	{r7}
 801eb22:	4770      	bx	lr
 801eb24:	2000018e 	.word	0x2000018e
 801eb28:	2000018c 	.word	0x2000018c
 801eb2c:	200012e4 	.word	0x200012e4

0801eb30 <UART_DEBUG_Init>:
  * @brief UART_DEBUG_Init Initialization Function
  * @param None
  * @retval None
  */
HAL_StatusTypeDef UART_DEBUG_Init(void)
{
 801eb30:	b580      	push	{r7, lr}
 801eb32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 801eb34:	4b11      	ldr	r3, [pc, #68]	; (801eb7c <UART_DEBUG_Init+0x4c>)
 801eb36:	4a12      	ldr	r2, [pc, #72]	; (801eb80 <UART_DEBUG_Init+0x50>)
 801eb38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 801eb3a:	4b10      	ldr	r3, [pc, #64]	; (801eb7c <UART_DEBUG_Init+0x4c>)
 801eb3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801eb40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 801eb42:	4b0e      	ldr	r3, [pc, #56]	; (801eb7c <UART_DEBUG_Init+0x4c>)
 801eb44:	2200      	movs	r2, #0
 801eb46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 801eb48:	4b0c      	ldr	r3, [pc, #48]	; (801eb7c <UART_DEBUG_Init+0x4c>)
 801eb4a:	2200      	movs	r2, #0
 801eb4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 801eb4e:	4b0b      	ldr	r3, [pc, #44]	; (801eb7c <UART_DEBUG_Init+0x4c>)
 801eb50:	2200      	movs	r2, #0
 801eb52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 801eb54:	4b09      	ldr	r3, [pc, #36]	; (801eb7c <UART_DEBUG_Init+0x4c>)
 801eb56:	220c      	movs	r2, #12
 801eb58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801eb5a:	4b08      	ldr	r3, [pc, #32]	; (801eb7c <UART_DEBUG_Init+0x4c>)
 801eb5c:	2200      	movs	r2, #0
 801eb5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 801eb60:	4b06      	ldr	r3, [pc, #24]	; (801eb7c <UART_DEBUG_Init+0x4c>)
 801eb62:	2200      	movs	r2, #0
 801eb64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 801eb66:	4805      	ldr	r0, [pc, #20]	; (801eb7c <UART_DEBUG_Init+0x4c>)
 801eb68:	f003 fcc8 	bl	80224fc <HAL_UART_Init>
 801eb6c:	4603      	mov	r3, r0
 801eb6e:	2b00      	cmp	r3, #0
 801eb70:	d001      	beq.n	801eb76 <UART_DEBUG_Init+0x46>
  {
	  return HAL_ERROR;
 801eb72:	2301      	movs	r3, #1
 801eb74:	e000      	b.n	801eb78 <UART_DEBUG_Init+0x48>
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
  return HAL_OK;
 801eb76:	2300      	movs	r3, #0
}
 801eb78:	4618      	mov	r0, r3
 801eb7a:	bd80      	pop	{r7, pc}
 801eb7c:	2000129c 	.word	0x2000129c
 801eb80:	40004800 	.word	0x40004800

0801eb84 <UART_DEBUG_Transmit>:
/**
  * @brief USART Transmit Initialization Function
  * @param buffer buffer to transmit via UART DEBUG without known size, it will use strlen(buffer) to get size.
  * @retval None
  */
void UART_DEBUG_Transmit(uint8_t *buffer){
 801eb84:	b580      	push	{r7, lr}
 801eb86:	b084      	sub	sp, #16
 801eb88:	af00      	add	r7, sp, #0
 801eb8a:	6078      	str	r0, [r7, #4]
	uint16_t tmpLen = strlen((char*)buffer);
 801eb8c:	6878      	ldr	r0, [r7, #4]
 801eb8e:	f7ff fb49 	bl	801e224 <strlen>
 801eb92:	4603      	mov	r3, r0
 801eb94:	81fb      	strh	r3, [r7, #14]
	if(tmpLen == 0){
 801eb96:	89fb      	ldrh	r3, [r7, #14]
 801eb98:	2b00      	cmp	r3, #0
 801eb9a:	d00b      	beq.n	801ebb4 <UART_DEBUG_Transmit+0x30>
		return;
	}
	if(HAL_UART_Transmit(&huart3, (uint8_t*)buffer, tmpLen ,0xFF)!= HAL_OK){
 801eb9c:	89fa      	ldrh	r2, [r7, #14]
 801eb9e:	23ff      	movs	r3, #255	; 0xff
 801eba0:	6879      	ldr	r1, [r7, #4]
 801eba2:	4806      	ldr	r0, [pc, #24]	; (801ebbc <UART_DEBUG_Transmit+0x38>)
 801eba4:	f003 fcf7 	bl	8022596 <HAL_UART_Transmit>
 801eba8:	4603      	mov	r3, r0
 801ebaa:	2b00      	cmp	r3, #0
 801ebac:	d003      	beq.n	801ebb6 <UART_DEBUG_Transmit+0x32>
		Error_Handler();
 801ebae:	f001 fbf3 	bl	8020398 <Error_Handler>
 801ebb2:	e000      	b.n	801ebb6 <UART_DEBUG_Transmit+0x32>
		return;
 801ebb4:	bf00      	nop
	}
//	UartTransmitReady = RESET;
}
 801ebb6:	3710      	adds	r7, #16
 801ebb8:	46bd      	mov	sp, r7
 801ebba:	bd80      	pop	{r7, pc}
 801ebbc:	2000129c 	.word	0x2000129c

0801ebc0 <UART_DEBUG_Transmit_Size>:
  * @brief UART_DEBUG_Transmit_Size Initialization Function
  * @param buffer: buffer contain data for transmit
  * @param buffer_size: size of data to transmit
  * @retval None
  */
void UART_DEBUG_Transmit_Size(uint8_t *buffer ,uint16_t buffer_size){
 801ebc0:	b580      	push	{r7, lr}
 801ebc2:	b082      	sub	sp, #8
 801ebc4:	af00      	add	r7, sp, #0
 801ebc6:	6078      	str	r0, [r7, #4]
 801ebc8:	460b      	mov	r3, r1
 801ebca:	807b      	strh	r3, [r7, #2]
	if(HAL_UART_Transmit(&huart3, (uint8_t*)buffer, buffer_size,200)!= HAL_OK){
 801ebcc:	887a      	ldrh	r2, [r7, #2]
 801ebce:	23c8      	movs	r3, #200	; 0xc8
 801ebd0:	6879      	ldr	r1, [r7, #4]
 801ebd2:	4806      	ldr	r0, [pc, #24]	; (801ebec <UART_DEBUG_Transmit_Size+0x2c>)
 801ebd4:	f003 fcdf 	bl	8022596 <HAL_UART_Transmit>
 801ebd8:	4603      	mov	r3, r0
 801ebda:	2b00      	cmp	r3, #0
 801ebdc:	d001      	beq.n	801ebe2 <UART_DEBUG_Transmit_Size+0x22>
		Error_Handler();
 801ebde:	f001 fbdb 	bl	8020398 <Error_Handler>
	}
//	UartTransmitReady = RESET;
}
 801ebe2:	bf00      	nop
 801ebe4:	3708      	adds	r7, #8
 801ebe6:	46bd      	mov	sp, r7
 801ebe8:	bd80      	pop	{r7, pc}
 801ebea:	bf00      	nop
 801ebec:	2000129c 	.word	0x2000129c

0801ebf0 <Start_Receive_IT>:
  * @brief Setup_Receive_IT Initialization Function
  * It will receive 1 bytes.
  * @param None
  * @retval None
  */
void Start_Receive_IT(void){
 801ebf0:	b580      	push	{r7, lr}
 801ebf2:	af00      	add	r7, sp, #0
	if(HAL_UART_Receive_IT(&huart1, &temp, 1)!= HAL_OK){
 801ebf4:	2201      	movs	r2, #1
 801ebf6:	4905      	ldr	r1, [pc, #20]	; (801ec0c <Start_Receive_IT+0x1c>)
 801ebf8:	4805      	ldr	r0, [pc, #20]	; (801ec10 <Start_Receive_IT+0x20>)
 801ebfa:	f003 fda2 	bl	8022742 <HAL_UART_Receive_IT>
 801ebfe:	4603      	mov	r3, r0
 801ec00:	2b00      	cmp	r3, #0
 801ec02:	d001      	beq.n	801ec08 <Start_Receive_IT+0x18>
		Error_Handler();
 801ec04:	f001 fbc8 	bl	8020398 <Error_Handler>
	}
}
 801ec08:	bf00      	nop
 801ec0a:	bd80      	pop	{r7, pc}
 801ec0c:	200012e0 	.word	0x200012e0
 801ec10:	200022e4 	.word	0x200022e4

0801ec14 <HAL_UART_RxCpltCallback>:
  * When Simcom7600 transmit data to UART, so HAL_UART_RxCpltCallback will be called.
  * HAL_UART_RxCpltCallback will recalled HAL_UART_Receive_IT to continous UART Interrupt Service.
  * @param huart UART_HandleTypeDef be handled in Callback
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 801ec14:	b580      	push	{r7, lr}
 801ec16:	b082      	sub	sp, #8
 801ec18:	af00      	add	r7, sp, #0
 801ec1a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 801ec1c:	687b      	ldr	r3, [r7, #4]
 801ec1e:	681b      	ldr	r3, [r3, #0]
 801ec20:	4a10      	ldr	r2, [pc, #64]	; (801ec64 <HAL_UART_RxCpltCallback+0x50>)
 801ec22:	4293      	cmp	r3, r2
 801ec24:	d11a      	bne.n	801ec5c <HAL_UART_RxCpltCallback+0x48>
		aUART_RxBuffer[receiveBufferIndexHead] = temp;
 801ec26:	4b10      	ldr	r3, [pc, #64]	; (801ec68 <HAL_UART_RxCpltCallback+0x54>)
 801ec28:	881b      	ldrh	r3, [r3, #0]
 801ec2a:	b29b      	uxth	r3, r3
 801ec2c:	461a      	mov	r2, r3
 801ec2e:	4b0f      	ldr	r3, [pc, #60]	; (801ec6c <HAL_UART_RxCpltCallback+0x58>)
 801ec30:	7819      	ldrb	r1, [r3, #0]
 801ec32:	4b0f      	ldr	r3, [pc, #60]	; (801ec70 <HAL_UART_RxCpltCallback+0x5c>)
 801ec34:	5499      	strb	r1, [r3, r2]
		receiveBufferIndexHead = (receiveBufferIndexHead + 1) % UART_RX_BUFFERSIZE;
 801ec36:	4b0c      	ldr	r3, [pc, #48]	; (801ec68 <HAL_UART_RxCpltCallback+0x54>)
 801ec38:	881b      	ldrh	r3, [r3, #0]
 801ec3a:	b29b      	uxth	r3, r3
 801ec3c:	3301      	adds	r3, #1
 801ec3e:	425a      	negs	r2, r3
 801ec40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ec44:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801ec48:	bf58      	it	pl
 801ec4a:	4253      	negpl	r3, r2
 801ec4c:	b29a      	uxth	r2, r3
 801ec4e:	4b06      	ldr	r3, [pc, #24]	; (801ec68 <HAL_UART_RxCpltCallback+0x54>)
 801ec50:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(huart, &temp, 1);
 801ec52:	2201      	movs	r2, #1
 801ec54:	4905      	ldr	r1, [pc, #20]	; (801ec6c <HAL_UART_RxCpltCallback+0x58>)
 801ec56:	6878      	ldr	r0, [r7, #4]
 801ec58:	f003 fd73 	bl	8022742 <HAL_UART_Receive_IT>
	}
}
 801ec5c:	bf00      	nop
 801ec5e:	3708      	adds	r7, #8
 801ec60:	46bd      	mov	sp, r7
 801ec62:	bd80      	pop	{r7, pc}
 801ec64:	40013800 	.word	0x40013800
 801ec68:	2000018c 	.word	0x2000018c
 801ec6c:	200012e0 	.word	0x200012e0
 801ec70:	200012e4 	.word	0x200012e4

0801ec74 <HAL_UART_TxCpltCallback>:
/**
  * @brief HAL_UART_TxCpltCallback Initialization Function
  * @param UartHandle UART_HandleTypeDef be handled in Callback
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 801ec74:	b480      	push	{r7}
 801ec76:	b083      	sub	sp, #12
 801ec78:	af00      	add	r7, sp, #0
 801ec7a:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartTransmitReady = SET;
 801ec7c:	4b03      	ldr	r3, [pc, #12]	; (801ec8c <HAL_UART_TxCpltCallback+0x18>)
 801ec7e:	2201      	movs	r2, #1
 801ec80:	701a      	strb	r2, [r3, #0]
}
 801ec82:	bf00      	nop
 801ec84:	370c      	adds	r7, #12
 801ec86:	46bd      	mov	sp, r7
 801ec88:	bc80      	pop	{r7}
 801ec8a:	4770      	bx	lr
 801ec8c:	20000078 	.word	0x20000078

0801ec90 <Clear_Reiceive_Buffer>:
  * @brief Clear_Reiceive_Buffer Initialization Function
  * Clear all data in RX buffer.
  * @param None
  * @retval None
  */
void Clear_Reiceive_Buffer(void){
 801ec90:	b580      	push	{r7, lr}
 801ec92:	af00      	add	r7, sp, #0
	memset(aUART_RxBuffer,0,UART_RX_BUFFERSIZE);
 801ec94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ec98:	2100      	movs	r1, #0
 801ec9a:	4805      	ldr	r0, [pc, #20]	; (801ecb0 <Clear_Reiceive_Buffer+0x20>)
 801ec9c:	f004 f9da 	bl	8023054 <memset>
	receiveBufferIndexHead = 0;
 801eca0:	4b04      	ldr	r3, [pc, #16]	; (801ecb4 <Clear_Reiceive_Buffer+0x24>)
 801eca2:	2200      	movs	r2, #0
 801eca4:	801a      	strh	r2, [r3, #0]
	receiveBufferIndexTail = 0;
 801eca6:	4b04      	ldr	r3, [pc, #16]	; (801ecb8 <Clear_Reiceive_Buffer+0x28>)
 801eca8:	2200      	movs	r2, #0
 801ecaa:	801a      	strh	r2, [r3, #0]
}
 801ecac:	bf00      	nop
 801ecae:	bd80      	pop	{r7, pc}
 801ecb0:	200012e4 	.word	0x200012e4
 801ecb4:	2000018c 	.word	0x2000018c
 801ecb8:	2000018e 	.word	0x2000018e

0801ecbc <HTTP_Display_State>:

/**
 * HTTP_Display_State()
 * @brief This is function for display state of State Machine. It only show State when having a state changation.
 */
void HTTP_Display_State(void){
 801ecbc:	b580      	push	{r7, lr}
 801ecbe:	af00      	add	r7, sp, #0
	if(prev_http_state!=http_state){
 801ecc0:	4b2c      	ldr	r3, [pc, #176]	; (801ed74 <HTTP_Display_State+0xb8>)
 801ecc2:	781a      	ldrb	r2, [r3, #0]
 801ecc4:	4b2c      	ldr	r3, [pc, #176]	; (801ed78 <HTTP_Display_State+0xbc>)
 801ecc6:	781b      	ldrb	r3, [r3, #0]
 801ecc8:	429a      	cmp	r2, r3
 801ecca:	d04d      	beq.n	801ed68 <HTTP_Display_State+0xac>
		prev_http_state = http_state;
 801eccc:	4b2a      	ldr	r3, [pc, #168]	; (801ed78 <HTTP_Display_State+0xbc>)
 801ecce:	781a      	ldrb	r2, [r3, #0]
 801ecd0:	4b28      	ldr	r3, [pc, #160]	; (801ed74 <HTTP_Display_State+0xb8>)
 801ecd2:	701a      	strb	r2, [r3, #0]
		switch (http_state) {
 801ecd4:	4b28      	ldr	r3, [pc, #160]	; (801ed78 <HTTP_Display_State+0xbc>)
 801ecd6:	781b      	ldrb	r3, [r3, #0]
 801ecd8:	2b0a      	cmp	r3, #10
 801ecda:	d847      	bhi.n	801ed6c <HTTP_Display_State+0xb0>
 801ecdc:	a201      	add	r2, pc, #4	; (adr r2, 801ece4 <HTTP_Display_State+0x28>)
 801ecde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ece2:	bf00      	nop
 801ece4:	0801ed11 	.word	0x0801ed11
 801ece8:	0801ed19 	.word	0x0801ed19
 801ecec:	0801ed21 	.word	0x0801ed21
 801ecf0:	0801ed29 	.word	0x0801ed29
 801ecf4:	0801ed31 	.word	0x0801ed31
 801ecf8:	0801ed39 	.word	0x0801ed39
 801ecfc:	0801ed41 	.word	0x0801ed41
 801ed00:	0801ed49 	.word	0x0801ed49
 801ed04:	0801ed51 	.word	0x0801ed51
 801ed08:	0801ed59 	.word	0x0801ed59
 801ed0c:	0801ed61 	.word	0x0801ed61
			case HTTP_INIT:
				LOG("\r\nHTTP INIT\r\n");
 801ed10:	481a      	ldr	r0, [pc, #104]	; (801ed7c <HTTP_Display_State+0xc0>)
 801ed12:	f7ff ff37 	bl	801eb84 <UART_DEBUG_Transmit>
				break;
 801ed16:	e02a      	b.n	801ed6e <HTTP_Display_State+0xb2>
			case HTTP_WAIT_FOR_INIT:
				LOG("\r\nHTTP WAIT FOR INIT\r\n");
 801ed18:	4819      	ldr	r0, [pc, #100]	; (801ed80 <HTTP_Display_State+0xc4>)
 801ed1a:	f7ff ff33 	bl	801eb84 <UART_DEBUG_Transmit>
				break;
 801ed1e:	e026      	b.n	801ed6e <HTTP_Display_State+0xb2>
			case HTTP_PARA:
				LOG("\r\nHTTP PARA\r\n");
 801ed20:	4818      	ldr	r0, [pc, #96]	; (801ed84 <HTTP_Display_State+0xc8>)
 801ed22:	f7ff ff2f 	bl	801eb84 <UART_DEBUG_Transmit>
				break;
 801ed26:	e022      	b.n	801ed6e <HTTP_Display_State+0xb2>
			case HTTP_WAIT_FOR_PARA:
				LOG("\r\nHTTP WAIT FOR PARA\r\n");
 801ed28:	4817      	ldr	r0, [pc, #92]	; (801ed88 <HTTP_Display_State+0xcc>)
 801ed2a:	f7ff ff2b 	bl	801eb84 <UART_DEBUG_Transmit>
				break;
 801ed2e:	e01e      	b.n	801ed6e <HTTP_Display_State+0xb2>
			case HTTP_ACTION:
				LOG("\r\nHTTP ACTION\r\n");
 801ed30:	4816      	ldr	r0, [pc, #88]	; (801ed8c <HTTP_Display_State+0xd0>)
 801ed32:	f7ff ff27 	bl	801eb84 <UART_DEBUG_Transmit>
				break;
 801ed36:	e01a      	b.n	801ed6e <HTTP_Display_State+0xb2>
			case HTTP_WAIT_FOR_ACTION:
				LOG("\r\nHTTP WAIT FOR ACTION\r\n");
 801ed38:	4815      	ldr	r0, [pc, #84]	; (801ed90 <HTTP_Display_State+0xd4>)
 801ed3a:	f7ff ff23 	bl	801eb84 <UART_DEBUG_Transmit>
				//TODO recheck, break or not ?
				break;
 801ed3e:	e016      	b.n	801ed6e <HTTP_Display_State+0xb2>
			case HTTP_READ:
				LOG("\r\nHTTP READ\r\n");
 801ed40:	4814      	ldr	r0, [pc, #80]	; (801ed94 <HTTP_Display_State+0xd8>)
 801ed42:	f7ff ff1f 	bl	801eb84 <UART_DEBUG_Transmit>
				break;
 801ed46:	e012      	b.n	801ed6e <HTTP_Display_State+0xb2>
			case HTTP_WAIT_FOR_READ:
				LOG("\r\nHTTP WAIT FOR READ\r\n");
 801ed48:	4813      	ldr	r0, [pc, #76]	; (801ed98 <HTTP_Display_State+0xdc>)
 801ed4a:	f7ff ff1b 	bl	801eb84 <UART_DEBUG_Transmit>
				break;
 801ed4e:	e00e      	b.n	801ed6e <HTTP_Display_State+0xb2>
			case HTTP_TERM:
				LOG("\r\nHTTP TERM\r\n");
 801ed50:	4812      	ldr	r0, [pc, #72]	; (801ed9c <HTTP_Display_State+0xe0>)
 801ed52:	f7ff ff17 	bl	801eb84 <UART_DEBUG_Transmit>
				break;
 801ed56:	e00a      	b.n	801ed6e <HTTP_Display_State+0xb2>
			case HTTP_WAIT_FOR_TERM:
				LOG("\r\nHTTP WAIT FOR TERM\r\n");
 801ed58:	4811      	ldr	r0, [pc, #68]	; (801eda0 <HTTP_Display_State+0xe4>)
 801ed5a:	f7ff ff13 	bl	801eb84 <UART_DEBUG_Transmit>
				break;
 801ed5e:	e006      	b.n	801ed6e <HTTP_Display_State+0xb2>
			case HTTP_DONE:
				LOG("\r\nHTTP DONE\r\n");
 801ed60:	4810      	ldr	r0, [pc, #64]	; (801eda4 <HTTP_Display_State+0xe8>)
 801ed62:	f7ff ff0f 	bl	801eb84 <UART_DEBUG_Transmit>
				break;
 801ed66:	e002      	b.n	801ed6e <HTTP_Display_State+0xb2>
			default:
				break;
		}
	}
 801ed68:	bf00      	nop
 801ed6a:	e000      	b.n	801ed6e <HTTP_Display_State+0xb2>
				break;
 801ed6c:	bf00      	nop

}
 801ed6e:	bf00      	nop
 801ed70:	bd80      	pop	{r7, pc}
 801ed72:	bf00      	nop
 801ed74:	20000198 	.word	0x20000198
 801ed78:	20000199 	.word	0x20000199
 801ed7c:	08023ae0 	.word	0x08023ae0
 801ed80:	08023af0 	.word	0x08023af0
 801ed84:	08023b08 	.word	0x08023b08
 801ed88:	08023b18 	.word	0x08023b18
 801ed8c:	08023b30 	.word	0x08023b30
 801ed90:	08023b40 	.word	0x08023b40
 801ed94:	08023b5c 	.word	0x08023b5c
 801ed98:	08023b6c 	.word	0x08023b6c
 801ed9c:	08023b84 	.word	0x08023b84
 801eda0:	08023b94 	.word	0x08023b94
 801eda4:	08023bac 	.word	0x08023bac

0801eda8 <HTTP_Run>:

/**
 * HTTP_Run()
 * @brief This is function can be called from external file. It run follow state machine method. Not have param.
 */
uint8_t HTTP_Run(){
 801eda8:	b580      	push	{r7, lr}
 801edaa:	af00      	add	r7, sp, #0
	HTTP_Display_State();
 801edac:	f7ff ff86 	bl	801ecbc <HTTP_Display_State>
	if(http_state < HTTP_DONE){
 801edb0:	4b0c      	ldr	r3, [pc, #48]	; (801ede4 <HTTP_Run+0x3c>)
 801edb2:	781b      	ldrb	r3, [r3, #0]
 801edb4:	2b09      	cmp	r3, #9
 801edb6:	d808      	bhi.n	801edca <HTTP_Run+0x22>
		(*http_state_machine[http_state].func)();
 801edb8:	4b0a      	ldr	r3, [pc, #40]	; (801ede4 <HTTP_Run+0x3c>)
 801edba:	781b      	ldrb	r3, [r3, #0]
 801edbc:	4a0a      	ldr	r2, [pc, #40]	; (801ede8 <HTTP_Run+0x40>)
 801edbe:	00db      	lsls	r3, r3, #3
 801edc0:	4413      	add	r3, r2
 801edc2:	685b      	ldr	r3, [r3, #4]
 801edc4:	4798      	blx	r3
		return 0;
 801edc6:	2300      	movs	r3, #0
 801edc8:	e009      	b.n	801edde <HTTP_Run+0x36>
	}
	else if(http_state == HTTP_DONE){
 801edca:	4b06      	ldr	r3, [pc, #24]	; (801ede4 <HTTP_Run+0x3c>)
 801edcc:	781b      	ldrb	r3, [r3, #0]
 801edce:	2b0a      	cmp	r3, #10
 801edd0:	d104      	bne.n	801eddc <HTTP_Run+0x34>
		LOG("Get into HTTP DONE");
 801edd2:	4806      	ldr	r0, [pc, #24]	; (801edec <HTTP_Run+0x44>)
 801edd4:	f7ff fed6 	bl	801eb84 <UART_DEBUG_Transmit>
		return 1;
 801edd8:	2301      	movs	r3, #1
 801edda:	e000      	b.n	801edde <HTTP_Run+0x36>
	}
	else{
		//HTTP Error
		return 2;
 801eddc:	2302      	movs	r3, #2
	}
}
 801edde:	4618      	mov	r0, r3
 801ede0:	bd80      	pop	{r7, pc}
 801ede2:	bf00      	nop
 801ede4:	20000199 	.word	0x20000199
 801ede8:	20000084 	.word	0x20000084
 801edec:	08023bbc 	.word	0x08023bbc

0801edf0 <HTTP_Init>:

/**
 * HTTP_Init()
 * @brief This is function for initiating Http service
 */
void HTTP_Init(){
 801edf0:	b580      	push	{r7, lr}
 801edf2:	af00      	add	r7, sp, #0
	content_length = 0;
 801edf4:	4b0b      	ldr	r3, [pc, #44]	; (801ee24 <HTTP_Init+0x34>)
 801edf6:	2200      	movs	r2, #0
 801edf8:	601a      	str	r2, [r3, #0]
	Clear_Reiceive_Buffer();
 801edfa:	f7ff ff49 	bl	801ec90 <Clear_Reiceive_Buffer>
	if(default_atcommand){
 801edfe:	4b0a      	ldr	r3, [pc, #40]	; (801ee28 <HTTP_Init+0x38>)
 801ee00:	781b      	ldrb	r3, [r3, #0]
 801ee02:	2b00      	cmp	r3, #0
 801ee04:	d003      	beq.n	801ee0e <HTTP_Init+0x1e>
		sprintf(http_at_command,"AT+HTTPINIT\r\n");
 801ee06:	4909      	ldr	r1, [pc, #36]	; (801ee2c <HTTP_Init+0x3c>)
 801ee08:	4809      	ldr	r0, [pc, #36]	; (801ee30 <HTTP_Init+0x40>)
 801ee0a:	f004 f92b 	bl	8023064 <siprintf>
	}
	UART_SIM7600_Transmit((uint8_t *)http_at_command);
 801ee0e:	4808      	ldr	r0, [pc, #32]	; (801ee30 <HTTP_Init+0x40>)
 801ee10:	f7ff fe1e 	bl	801ea50 <UART_SIM7600_Transmit>
	Clear_Http_Command();
 801ee14:	f000 fca2 	bl	801f75c <Clear_Http_Command>
	http_state = HTTP_WAIT_FOR_INIT;
 801ee18:	4b06      	ldr	r3, [pc, #24]	; (801ee34 <HTTP_Init+0x44>)
 801ee1a:	2201      	movs	r2, #1
 801ee1c:	701a      	strb	r2, [r3, #0]
}
 801ee1e:	bf00      	nop
 801ee20:	bd80      	pop	{r7, pc}
 801ee22:	bf00      	nop
 801ee24:	20000194 	.word	0x20000194
 801ee28:	2000007a 	.word	0x2000007a
 801ee2c:	08023bd0 	.word	0x08023bd0
 801ee30:	200034ac 	.word	0x200034ac
 801ee34:	20000199 	.word	0x20000199

0801ee38 <HTTP_Wait_For_Init>:

/**
 * HTTP_Wait_For_Init()
 * @brief This is function for waiting respond from initiating Http service
 */
void HTTP_Wait_For_Init(){
 801ee38:	b580      	push	{r7, lr}
 801ee3a:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_OK);
	switch (Get_AT_Result()){
 801ee3c:	f000 fe54 	bl	801fae8 <Get_AT_Result>
 801ee40:	4603      	mov	r3, r0
 801ee42:	2b00      	cmp	r3, #0
 801ee44:	d002      	beq.n	801ee4c <HTTP_Wait_For_Init+0x14>
 801ee46:	2b01      	cmp	r3, #1
 801ee48:	d006      	beq.n	801ee58 <HTTP_Wait_For_Init+0x20>
		case AT_ERROR:
			Clear_AT_Result();
			http_state=HTTP_MAX_STATE;
			break;
		default:
			break;
 801ee4a:	e00b      	b.n	801ee64 <HTTP_Wait_For_Init+0x2c>
			Clear_AT_Result();
 801ee4c:	f000 fe56 	bl	801fafc <Clear_AT_Result>
			http_state=HTTP_PARA;
 801ee50:	4b05      	ldr	r3, [pc, #20]	; (801ee68 <HTTP_Wait_For_Init+0x30>)
 801ee52:	2202      	movs	r2, #2
 801ee54:	701a      	strb	r2, [r3, #0]
			break;
 801ee56:	e005      	b.n	801ee64 <HTTP_Wait_For_Init+0x2c>
			Clear_AT_Result();
 801ee58:	f000 fe50 	bl	801fafc <Clear_AT_Result>
			http_state=HTTP_MAX_STATE;
 801ee5c:	4b02      	ldr	r3, [pc, #8]	; (801ee68 <HTTP_Wait_For_Init+0x30>)
 801ee5e:	220b      	movs	r2, #11
 801ee60:	701a      	strb	r2, [r3, #0]
			break;
 801ee62:	bf00      	nop
	}
}
 801ee64:	bf00      	nop
 801ee66:	bd80      	pop	{r7, pc}
 801ee68:	20000199 	.word	0x20000199

0801ee6c <HTTP_Para>:

/**
 * HTTP_Para()
 * @brief This is function for passing parameter to HTTP Request
 */
void HTTP_Para(){
 801ee6c:	b580      	push	{r7, lr}
 801ee6e:	af00      	add	r7, sp, #0
	if (default_atcommand) {
 801ee70:	4b0d      	ldr	r3, [pc, #52]	; (801eea8 <HTTP_Para+0x3c>)
 801ee72:	781b      	ldrb	r3, [r3, #0]
 801ee74:	2b00      	cmp	r3, #0
 801ee76:	d00d      	beq.n	801ee94 <HTTP_Para+0x28>
		if(fota_check_version){
 801ee78:	4b0c      	ldr	r3, [pc, #48]	; (801eeac <HTTP_Para+0x40>)
 801ee7a:	781b      	ldrb	r3, [r3, #0]
 801ee7c:	2b00      	cmp	r3, #0
 801ee7e:	d004      	beq.n	801ee8a <HTTP_Para+0x1e>
			sprintf(http_at_command,"AT+HTTPPARA=\"URL\",\"http://ota.chipfc.com/ebox_firmware/version.txt\"\r\n");
 801ee80:	490b      	ldr	r1, [pc, #44]	; (801eeb0 <HTTP_Para+0x44>)
 801ee82:	480c      	ldr	r0, [pc, #48]	; (801eeb4 <HTTP_Para+0x48>)
 801ee84:	f004 f8ee 	bl	8023064 <siprintf>
 801ee88:	e004      	b.n	801ee94 <HTTP_Para+0x28>
		}
		else{
			sprintf(http_at_command,"AT+HTTPPARA=\"URL\",\"http://ota.chipfc.com/ebox_firmware/%s/eBoxK2.hex\"\r\n",version);
 801ee8a:	4a0b      	ldr	r2, [pc, #44]	; (801eeb8 <HTTP_Para+0x4c>)
 801ee8c:	490b      	ldr	r1, [pc, #44]	; (801eebc <HTTP_Para+0x50>)
 801ee8e:	4809      	ldr	r0, [pc, #36]	; (801eeb4 <HTTP_Para+0x48>)
 801ee90:	f004 f8e8 	bl	8023064 <siprintf>
		}
	}
	UART_SIM7600_Transmit((uint8_t*)http_at_command);
 801ee94:	4807      	ldr	r0, [pc, #28]	; (801eeb4 <HTTP_Para+0x48>)
 801ee96:	f7ff fddb 	bl	801ea50 <UART_SIM7600_Transmit>
	Clear_Http_Command();
 801ee9a:	f000 fc5f 	bl	801f75c <Clear_Http_Command>
	http_state = HTTP_WAIT_FOR_PARA;
 801ee9e:	4b08      	ldr	r3, [pc, #32]	; (801eec0 <HTTP_Para+0x54>)
 801eea0:	2203      	movs	r2, #3
 801eea2:	701a      	strb	r2, [r3, #0]
}
 801eea4:	bf00      	nop
 801eea6:	bd80      	pop	{r7, pc}
 801eea8:	2000007a 	.word	0x2000007a
 801eeac:	2000007b 	.word	0x2000007b
 801eeb0:	08023be0 	.word	0x08023be0
 801eeb4:	200034ac 	.word	0x200034ac
 801eeb8:	2000248c 	.word	0x2000248c
 801eebc:	08023c28 	.word	0x08023c28
 801eec0:	20000199 	.word	0x20000199

0801eec4 <HTTP_Wait_For_Para>:
/**
 * HTTP_Wait_For_Para()
 * @brief This is function for waiting respone from  HTTP_PARA state
 * If AT_Result is AT_OK so switch to HTTP_ACTION else it's AT_ERROR so switch to HTTP_MAX_STATE
 */
void HTTP_Wait_For_Para(){
 801eec4:	b580      	push	{r7, lr}
 801eec6:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_OK);
	switch (Get_AT_Result()){
 801eec8:	f000 fe0e 	bl	801fae8 <Get_AT_Result>
 801eecc:	4603      	mov	r3, r0
 801eece:	2b00      	cmp	r3, #0
 801eed0:	d002      	beq.n	801eed8 <HTTP_Wait_For_Para+0x14>
 801eed2:	2b01      	cmp	r3, #1
 801eed4:	d006      	beq.n	801eee4 <HTTP_Wait_For_Para+0x20>
		case AT_ERROR:
			Clear_AT_Result();
			http_state=HTTP_MAX_STATE;
			break;
		default:
			break;
 801eed6:	e00b      	b.n	801eef0 <HTTP_Wait_For_Para+0x2c>
			Clear_AT_Result();
 801eed8:	f000 fe10 	bl	801fafc <Clear_AT_Result>
			http_state=HTTP_ACTION;
 801eedc:	4b05      	ldr	r3, [pc, #20]	; (801eef4 <HTTP_Wait_For_Para+0x30>)
 801eede:	2204      	movs	r2, #4
 801eee0:	701a      	strb	r2, [r3, #0]
			break;
 801eee2:	e005      	b.n	801eef0 <HTTP_Wait_For_Para+0x2c>
			Clear_AT_Result();
 801eee4:	f000 fe0a 	bl	801fafc <Clear_AT_Result>
			http_state=HTTP_MAX_STATE;
 801eee8:	4b02      	ldr	r3, [pc, #8]	; (801eef4 <HTTP_Wait_For_Para+0x30>)
 801eeea:	220b      	movs	r2, #11
 801eeec:	701a      	strb	r2, [r3, #0]
			break;
 801eeee:	bf00      	nop
	}
}
 801eef0:	bf00      	nop
 801eef2:	bd80      	pop	{r7, pc}
 801eef4:	20000199 	.word	0x20000199

0801eef8 <HTTP_Action>:
/**
 * HTTP_Action()
 * @brief This is function for create request with method : GET,POST,PUT
 * Passing 0 :GET ,1:POST ,...
 */
void HTTP_Action(){
 801eef8:	b580      	push	{r7, lr}
 801eefa:	af00      	add	r7, sp, #0
//	Clear_Reiceive_Buffer();
	if (default_atcommand) {
 801eefc:	4b0c      	ldr	r3, [pc, #48]	; (801ef30 <HTTP_Action+0x38>)
 801eefe:	781b      	ldrb	r3, [r3, #0]
 801ef00:	2b00      	cmp	r3, #0
 801ef02:	d003      	beq.n	801ef0c <HTTP_Action+0x14>
		sprintf(http_at_command,"AT+HTTPACTION=0\r\n");
 801ef04:	490b      	ldr	r1, [pc, #44]	; (801ef34 <HTTP_Action+0x3c>)
 801ef06:	480c      	ldr	r0, [pc, #48]	; (801ef38 <HTTP_Action+0x40>)
 801ef08:	f004 f8ac 	bl	8023064 <siprintf>
	}
	UART_SIM7600_Transmit((uint8_t*)http_at_command);
 801ef0c:	480a      	ldr	r0, [pc, #40]	; (801ef38 <HTTP_Action+0x40>)
 801ef0e:	f7ff fd9f 	bl	801ea50 <UART_SIM7600_Transmit>
	Clear_Http_Command();
 801ef12:	f000 fc23 	bl	801f75c <Clear_Http_Command>
	Clear_Http_Timeout_Flag();
 801ef16:	f000 f97b 	bl	801f210 <Clear_Http_Timeout_Flag>
	SCH_Add_Task(Set_Http_Timeout_Flag, ACTION_TIMEOUT, 0);
 801ef1a:	2200      	movs	r2, #0
 801ef1c:	21c8      	movs	r1, #200	; 0xc8
 801ef1e:	4807      	ldr	r0, [pc, #28]	; (801ef3c <HTTP_Action+0x44>)
 801ef20:	f000 fe38 	bl	801fb94 <SCH_Add_Task>
	http_state = HTTP_WAIT_FOR_ACTION;
 801ef24:	4b06      	ldr	r3, [pc, #24]	; (801ef40 <HTTP_Action+0x48>)
 801ef26:	2205      	movs	r2, #5
 801ef28:	701a      	strb	r2, [r3, #0]
}
 801ef2a:	bf00      	nop
 801ef2c:	bd80      	pop	{r7, pc}
 801ef2e:	bf00      	nop
 801ef30:	2000007a 	.word	0x2000007a
 801ef34:	08023c70 	.word	0x08023c70
 801ef38:	200034ac 	.word	0x200034ac
 801ef3c:	0801f1f9 	.word	0x0801f1f9
 801ef40:	20000199 	.word	0x20000199

0801ef44 <HTTP_Wait_For_Action>:
 * HTTP_Wait_For_Action()
 * @brief This is function for waiting HTTP_ACTION respone
 * If AT_Result is AT_OK so switch to HTTP_READ to read HTTP Respone body
 * else AT_ERROR so switch to HTTP_MAX_STATE to reset Simcom7600
 */
void HTTP_Wait_For_Action(){
 801ef44:	b580      	push	{r7, lr}
 801ef46:	af00      	add	r7, sp, #0
	if(is_Http_TimeOutFlag()){
 801ef48:	f000 f94c 	bl	801f1e4 <is_Http_TimeOutFlag>
 801ef4c:	4603      	mov	r3, r0
 801ef4e:	2b00      	cmp	r3, #0
 801ef50:	d031      	beq.n	801efb6 <HTTP_Wait_For_Action+0x72>
//		Wait_For_Respone(AT_OK);
		switch (Get_AT_Result()){
 801ef52:	f000 fdc9 	bl	801fae8 <Get_AT_Result>
 801ef56:	4603      	mov	r3, r0
 801ef58:	2b05      	cmp	r3, #5
 801ef5a:	d009      	beq.n	801ef70 <HTTP_Wait_For_Action+0x2c>
 801ef5c:	2b05      	cmp	r3, #5
 801ef5e:	dc2c      	bgt.n	801efba <HTTP_Wait_For_Action+0x76>
 801ef60:	2b00      	cmp	r3, #0
 801ef62:	d002      	beq.n	801ef6a <HTTP_Wait_For_Action+0x26>
 801ef64:	2b01      	cmp	r3, #1
 801ef66:	d020      	beq.n	801efaa <HTTP_Wait_For_Action+0x66>
			case AT_ERROR:
				Clear_AT_Result();
				http_state = HTTP_MAX_STATE;
				break;
			default:
				break;
 801ef68:	e027      	b.n	801efba <HTTP_Wait_For_Action+0x76>
				Clear_AT_Result();
 801ef6a:	f000 fdc7 	bl	801fafc <Clear_AT_Result>
				break;
 801ef6e:	e027      	b.n	801efc0 <HTTP_Wait_For_Action+0x7c>
				if(HTTP_Get_Content_Length()){
 801ef70:	f000 fbaa 	bl	801f6c8 <HTTP_Get_Content_Length>
 801ef74:	4603      	mov	r3, r0
 801ef76:	2b00      	cmp	r3, #0
 801ef78:	d021      	beq.n	801efbe <HTTP_Wait_For_Action+0x7a>
					http_response_remain = HTTP_Return_Content_Length();
 801ef7a:	f000 fbfb 	bl	801f774 <HTTP_Return_Content_Length>
 801ef7e:	4603      	mov	r3, r0
 801ef80:	4a10      	ldr	r2, [pc, #64]	; (801efc4 <HTTP_Wait_For_Action+0x80>)
 801ef82:	6013      	str	r3, [r2, #0]
					content_length = 0;
 801ef84:	4b10      	ldr	r3, [pc, #64]	; (801efc8 <HTTP_Wait_For_Action+0x84>)
 801ef86:	2200      	movs	r2, #0
 801ef88:	601a      	str	r2, [r3, #0]
					sprintf(logMsg,"\r\n%d\r\n",http_response_remain);
 801ef8a:	4b0e      	ldr	r3, [pc, #56]	; (801efc4 <HTTP_Wait_For_Action+0x80>)
 801ef8c:	681b      	ldr	r3, [r3, #0]
 801ef8e:	461a      	mov	r2, r3
 801ef90:	490e      	ldr	r1, [pc, #56]	; (801efcc <HTTP_Wait_For_Action+0x88>)
 801ef92:	480f      	ldr	r0, [pc, #60]	; (801efd0 <HTTP_Wait_For_Action+0x8c>)
 801ef94:	f004 f866 	bl	8023064 <siprintf>
					LOG(logMsg);
 801ef98:	480d      	ldr	r0, [pc, #52]	; (801efd0 <HTTP_Wait_For_Action+0x8c>)
 801ef9a:	f7ff fdf3 	bl	801eb84 <UART_DEBUG_Transmit>
					Clear_AT_Result();
 801ef9e:	f000 fdad 	bl	801fafc <Clear_AT_Result>
					http_state = HTTP_READ;
 801efa2:	4b0c      	ldr	r3, [pc, #48]	; (801efd4 <HTTP_Wait_For_Action+0x90>)
 801efa4:	2206      	movs	r2, #6
 801efa6:	701a      	strb	r2, [r3, #0]
				break;
 801efa8:	e009      	b.n	801efbe <HTTP_Wait_For_Action+0x7a>
				Clear_AT_Result();
 801efaa:	f000 fda7 	bl	801fafc <Clear_AT_Result>
				http_state = HTTP_MAX_STATE;
 801efae:	4b09      	ldr	r3, [pc, #36]	; (801efd4 <HTTP_Wait_For_Action+0x90>)
 801efb0:	220b      	movs	r2, #11
 801efb2:	701a      	strb	r2, [r3, #0]
				break;
 801efb4:	e004      	b.n	801efc0 <HTTP_Wait_For_Action+0x7c>
		}
	}
 801efb6:	bf00      	nop
 801efb8:	e002      	b.n	801efc0 <HTTP_Wait_For_Action+0x7c>
				break;
 801efba:	bf00      	nop
 801efbc:	e000      	b.n	801efc0 <HTTP_Wait_For_Action+0x7c>
				break;
 801efbe:	bf00      	nop
}
 801efc0:	bf00      	nop
 801efc2:	bd80      	pop	{r7, pc}
 801efc4:	2000019c 	.word	0x2000019c
 801efc8:	20000194 	.word	0x20000194
 801efcc:	08023c84 	.word	0x08023c84
 801efd0:	20003ed8 	.word	0x20003ed8
 801efd4:	20000199 	.word	0x20000199

0801efd8 <HTTP_Read>:

/**
 * HTTP_Read()
 * @brief This is function for read HTTP respone body, passing for AT number of read data. Default is MAX_HTTP_BODY = 400
 */
void HTTP_Read(){
 801efd8:	b580      	push	{r7, lr}
 801efda:	b082      	sub	sp, #8
 801efdc:	af00      	add	r7, sp, #0
	uint32_t read_size;
	if(fota_check_version){
 801efde:	4b2c      	ldr	r3, [pc, #176]	; (801f090 <HTTP_Read+0xb8>)
 801efe0:	781b      	ldrb	r3, [r3, #0]
 801efe2:	2b00      	cmp	r3, #0
 801efe4:	d003      	beq.n	801efee <HTTP_Read+0x16>
		read_size = http_response_remain;
 801efe6:	4b2b      	ldr	r3, [pc, #172]	; (801f094 <HTTP_Read+0xbc>)
 801efe8:	681b      	ldr	r3, [r3, #0]
 801efea:	607b      	str	r3, [r7, #4]
 801efec:	e01d      	b.n	801f02a <HTTP_Read+0x52>
	}
	else{
		if(http_response_remain > (FIRMWARE_READ_SIZE_PER_TIME)){
 801efee:	4b29      	ldr	r3, [pc, #164]	; (801f094 <HTTP_Read+0xbc>)
 801eff0:	681b      	ldr	r3, [r3, #0]
 801eff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801eff6:	d909      	bls.n	801f00c <HTTP_Read+0x34>
			read_size = FIRMWARE_READ_SIZE_PER_TIME;
 801eff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801effc:	607b      	str	r3, [r7, #4]
			http_response_remain = http_response_remain -  (FIRMWARE_READ_SIZE_PER_TIME);
 801effe:	4b25      	ldr	r3, [pc, #148]	; (801f094 <HTTP_Read+0xbc>)
 801f000:	681b      	ldr	r3, [r3, #0]
 801f002:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801f006:	4a23      	ldr	r2, [pc, #140]	; (801f094 <HTTP_Read+0xbc>)
 801f008:	6013      	str	r3, [r2, #0]
 801f00a:	e00e      	b.n	801f02a <HTTP_Read+0x52>
		}
		else if (http_response_remain > 0 && http_response_remain < (FIRMWARE_READ_SIZE_PER_TIME)){
 801f00c:	4b21      	ldr	r3, [pc, #132]	; (801f094 <HTTP_Read+0xbc>)
 801f00e:	681b      	ldr	r3, [r3, #0]
 801f010:	2b00      	cmp	r3, #0
 801f012:	d00a      	beq.n	801f02a <HTTP_Read+0x52>
 801f014:	4b1f      	ldr	r3, [pc, #124]	; (801f094 <HTTP_Read+0xbc>)
 801f016:	681b      	ldr	r3, [r3, #0]
 801f018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f01c:	d205      	bcs.n	801f02a <HTTP_Read+0x52>
			read_size = http_response_remain;
 801f01e:	4b1d      	ldr	r3, [pc, #116]	; (801f094 <HTTP_Read+0xbc>)
 801f020:	681b      	ldr	r3, [r3, #0]
 801f022:	607b      	str	r3, [r7, #4]
			http_response_remain = 0;
 801f024:	4b1b      	ldr	r3, [pc, #108]	; (801f094 <HTTP_Read+0xbc>)
 801f026:	2200      	movs	r2, #0
 801f028:	601a      	str	r2, [r3, #0]
		}
	}
	if (default_atcommand) {
 801f02a:	4b1b      	ldr	r3, [pc, #108]	; (801f098 <HTTP_Read+0xc0>)
 801f02c:	781b      	ldrb	r3, [r3, #0]
 801f02e:	2b00      	cmp	r3, #0
 801f030:	d004      	beq.n	801f03c <HTTP_Read+0x64>
		sprintf(http_at_command,"AT+HTTPREAD=0,%d\r\n",read_size);
 801f032:	687a      	ldr	r2, [r7, #4]
 801f034:	4919      	ldr	r1, [pc, #100]	; (801f09c <HTTP_Read+0xc4>)
 801f036:	481a      	ldr	r0, [pc, #104]	; (801f0a0 <HTTP_Read+0xc8>)
 801f038:	f004 f814 	bl	8023064 <siprintf>
	}
//	Clear_Reiceive_Buffer();
	sprintf(logMsg,"http_response_remain: %ld\r\n",http_response_remain);
 801f03c:	4b15      	ldr	r3, [pc, #84]	; (801f094 <HTTP_Read+0xbc>)
 801f03e:	681b      	ldr	r3, [r3, #0]
 801f040:	461a      	mov	r2, r3
 801f042:	4918      	ldr	r1, [pc, #96]	; (801f0a4 <HTTP_Read+0xcc>)
 801f044:	4818      	ldr	r0, [pc, #96]	; (801f0a8 <HTTP_Read+0xd0>)
 801f046:	f004 f80d 	bl	8023064 <siprintf>
	LOG(logMsg);
 801f04a:	4817      	ldr	r0, [pc, #92]	; (801f0a8 <HTTP_Read+0xd0>)
 801f04c:	f7ff fd9a 	bl	801eb84 <UART_DEBUG_Transmit>
	sprintf(logMsg,"firmware_index: %ld\r\n",firmware_index);
 801f050:	4b16      	ldr	r3, [pc, #88]	; (801f0ac <HTTP_Read+0xd4>)
 801f052:	881b      	ldrh	r3, [r3, #0]
 801f054:	461a      	mov	r2, r3
 801f056:	4916      	ldr	r1, [pc, #88]	; (801f0b0 <HTTP_Read+0xd8>)
 801f058:	4813      	ldr	r0, [pc, #76]	; (801f0a8 <HTTP_Read+0xd0>)
 801f05a:	f004 f803 	bl	8023064 <siprintf>
	LOG(logMsg);
 801f05e:	4812      	ldr	r0, [pc, #72]	; (801f0a8 <HTTP_Read+0xd0>)
 801f060:	f7ff fd90 	bl	801eb84 <UART_DEBUG_Transmit>
	UART_SIM7600_Transmit((uint8_t *)http_at_command);
 801f064:	480e      	ldr	r0, [pc, #56]	; (801f0a0 <HTTP_Read+0xc8>)
 801f066:	f7ff fcf3 	bl	801ea50 <UART_SIM7600_Transmit>
	Clear_Http_Timeout_Flag();
 801f06a:	f000 f8d1 	bl	801f210 <Clear_Http_Timeout_Flag>
	SCH_Add_Task(Set_Http_Timeout_Flag, 100, 0);
 801f06e:	2200      	movs	r2, #0
 801f070:	2164      	movs	r1, #100	; 0x64
 801f072:	4810      	ldr	r0, [pc, #64]	; (801f0b4 <HTTP_Read+0xdc>)
 801f074:	f000 fd8e 	bl	801fb94 <SCH_Add_Task>
	Clear_Http_Command();
 801f078:	f000 fb70 	bl	801f75c <Clear_Http_Command>
	HAL_Delay(100);
 801f07c:	2064      	movs	r0, #100	; 0x64
 801f07e:	f001 fbc1 	bl	8020804 <HAL_Delay>
	http_state = HTTP_WAIT_FOR_READ;
 801f082:	4b0d      	ldr	r3, [pc, #52]	; (801f0b8 <HTTP_Read+0xe0>)
 801f084:	2207      	movs	r2, #7
 801f086:	701a      	strb	r2, [r3, #0]
}
 801f088:	bf00      	nop
 801f08a:	3708      	adds	r7, #8
 801f08c:	46bd      	mov	sp, r7
 801f08e:	bd80      	pop	{r7, pc}
 801f090:	2000007b 	.word	0x2000007b
 801f094:	2000019c 	.word	0x2000019c
 801f098:	2000007a 	.word	0x2000007a
 801f09c:	08023c8c 	.word	0x08023c8c
 801f0a0:	200034ac 	.word	0x200034ac
 801f0a4:	08023ca0 	.word	0x08023ca0
 801f0a8:	20003ed8 	.word	0x20003ed8
 801f0ac:	200001a0 	.word	0x200001a0
 801f0b0:	08023cbc 	.word	0x08023cbc
 801f0b4:	0801f1f9 	.word	0x0801f1f9
 801f0b8:	20000199 	.word	0x20000199

0801f0bc <HTTP_Wait_For_Read>:
 * else if AT_Result = AT_NOT_FOUND switch to HTTP_PARA every timeout
 * else if AT_Result = AT_ERROR switch to HTTP_MAX_STATE to reset Simcom7600
 */
char log[50];
uint32_t firmware_index_end;
void HTTP_Wait_For_Read(){
 801f0bc:	b580      	push	{r7, lr}
 801f0be:	b082      	sub	sp, #8
 801f0c0:	af00      	add	r7, sp, #0
	FlagStatus flag_ret;
	if(fota_check_version){
 801f0c2:	4b24      	ldr	r3, [pc, #144]	; (801f154 <HTTP_Wait_For_Read+0x98>)
 801f0c4:	781b      	ldrb	r3, [r3, #0]
 801f0c6:	2b00      	cmp	r3, #0
 801f0c8:	d014      	beq.n	801f0f4 <HTTP_Wait_For_Read+0x38>
		switch (Get_AT_Result()) {
 801f0ca:	f000 fd0d 	bl	801fae8 <Get_AT_Result>
 801f0ce:	4603      	mov	r3, r0
 801f0d0:	2b00      	cmp	r3, #0
 801f0d2:	d134      	bne.n	801f13e <HTTP_Wait_For_Read+0x82>
			case AT_OK:
				flag_ret = HTTP_Firmware_Version();
 801f0d4:	f000 f8a8 	bl	801f228 <HTTP_Firmware_Version>
 801f0d8:	4603      	mov	r3, r0
 801f0da:	71fb      	strb	r3, [r7, #7]
				if(flag_ret){
 801f0dc:	79fb      	ldrb	r3, [r7, #7]
 801f0de:	2b00      	cmp	r3, #0
 801f0e0:	d02f      	beq.n	801f142 <HTTP_Wait_For_Read+0x86>
					fota_check_version = RESET;
 801f0e2:	4b1c      	ldr	r3, [pc, #112]	; (801f154 <HTTP_Wait_For_Read+0x98>)
 801f0e4:	2200      	movs	r2, #0
 801f0e6:	701a      	strb	r2, [r3, #0]
					Clear_AT_Result();
 801f0e8:	f000 fd08 	bl	801fafc <Clear_AT_Result>
					http_state = HTTP_PARA;
 801f0ec:	4b1a      	ldr	r3, [pc, #104]	; (801f158 <HTTP_Wait_For_Read+0x9c>)
 801f0ee:	2202      	movs	r2, #2
 801f0f0:	701a      	strb	r2, [r3, #0]
					return;
 801f0f2:	e02b      	b.n	801f14c <HTTP_Wait_For_Read+0x90>
			default:
				break;
		}
	}
	else{
		switch (Get_AT_Result()) {
 801f0f4:	f000 fcf8 	bl	801fae8 <Get_AT_Result>
 801f0f8:	4603      	mov	r3, r0
 801f0fa:	2b00      	cmp	r3, #0
 801f0fc:	d123      	bne.n	801f146 <HTTP_Wait_For_Read+0x8a>
			case AT_OK:
				flag_ret = HTTP_Firmware_Data();
 801f0fe:	f000 f99b 	bl	801f438 <HTTP_Firmware_Data>
 801f102:	4603      	mov	r3, r0
 801f104:	71fb      	strb	r3, [r7, #7]
				if(flag_ret){
 801f106:	79fb      	ldrb	r3, [r7, #7]
 801f108:	2b00      	cmp	r3, #0
 801f10a:	d01e      	beq.n	801f14a <HTTP_Wait_For_Read+0x8e>
					if(checksum_correct){
 801f10c:	4b13      	ldr	r3, [pc, #76]	; (801f15c <HTTP_Wait_For_Read+0xa0>)
 801f10e:	781b      	ldrb	r3, [r3, #0]
 801f110:	2b00      	cmp	r3, #0
 801f112:	d009      	beq.n	801f128 <HTTP_Wait_For_Read+0x6c>
						if(http_response_remain == 0){
 801f114:	4b12      	ldr	r3, [pc, #72]	; (801f160 <HTTP_Wait_For_Read+0xa4>)
 801f116:	681b      	ldr	r3, [r3, #0]
 801f118:	2b00      	cmp	r3, #0
 801f11a:	d10a      	bne.n	801f132 <HTTP_Wait_For_Read+0x76>
							LOG("Jump To Current Firmware");
 801f11c:	4811      	ldr	r0, [pc, #68]	; (801f164 <HTTP_Wait_For_Read+0xa8>)
 801f11e:	f7ff fd31 	bl	801eb84 <UART_DEBUG_Transmit>
							Jump_To_Current_Firmware();
 801f122:	f000 ffbf 	bl	80200a4 <Jump_To_Current_Firmware>
 801f126:	e004      	b.n	801f132 <HTTP_Wait_For_Read+0x76>
						}
					}
					else{
						LOG("Jump To Factory Firmware");
 801f128:	480f      	ldr	r0, [pc, #60]	; (801f168 <HTTP_Wait_For_Read+0xac>)
 801f12a:	f7ff fd2b 	bl	801eb84 <UART_DEBUG_Transmit>
						Jump_To_Factory_Firmware();
 801f12e:	f000 ffc7 	bl	80200c0 <Jump_To_Factory_Firmware>
					}

					Clear_AT_Result();
 801f132:	f000 fce3 	bl	801fafc <Clear_AT_Result>
					http_state = HTTP_READ;
 801f136:	4b08      	ldr	r3, [pc, #32]	; (801f158 <HTTP_Wait_For_Read+0x9c>)
 801f138:	2206      	movs	r2, #6
 801f13a:	701a      	strb	r2, [r3, #0]
				}
				break;
 801f13c:	e005      	b.n	801f14a <HTTP_Wait_For_Read+0x8e>
				break;
 801f13e:	bf00      	nop
 801f140:	e004      	b.n	801f14c <HTTP_Wait_For_Read+0x90>
				break;
 801f142:	bf00      	nop
 801f144:	e002      	b.n	801f14c <HTTP_Wait_For_Read+0x90>
			default:
				break;
 801f146:	bf00      	nop
 801f148:	e000      	b.n	801f14c <HTTP_Wait_For_Read+0x90>
				break;
 801f14a:	bf00      	nop
		}
	}

}
 801f14c:	3708      	adds	r7, #8
 801f14e:	46bd      	mov	sp, r7
 801f150:	bd80      	pop	{r7, pc}
 801f152:	bf00      	nop
 801f154:	2000007b 	.word	0x2000007b
 801f158:	20000199 	.word	0x20000199
 801f15c:	2000007c 	.word	0x2000007c
 801f160:	2000019c 	.word	0x2000019c
 801f164:	08023cd4 	.word	0x08023cd4
 801f168:	08023cf0 	.word	0x08023cf0

0801f16c <HTTP_Term>:

/**
 * HTTP_Term()
 * @brief This is function for terminaring HTTP Service
 */
void HTTP_Term(){
 801f16c:	b580      	push	{r7, lr}
 801f16e:	af00      	add	r7, sp, #0
//	Clear_Reiceive_Buffer();
	if (default_atcommand) {
 801f170:	4b08      	ldr	r3, [pc, #32]	; (801f194 <HTTP_Term+0x28>)
 801f172:	781b      	ldrb	r3, [r3, #0]
 801f174:	2b00      	cmp	r3, #0
 801f176:	d003      	beq.n	801f180 <HTTP_Term+0x14>
		sprintf(http_at_command,"AT+HTTPTERM\r\n");
 801f178:	4907      	ldr	r1, [pc, #28]	; (801f198 <HTTP_Term+0x2c>)
 801f17a:	4808      	ldr	r0, [pc, #32]	; (801f19c <HTTP_Term+0x30>)
 801f17c:	f003 ff72 	bl	8023064 <siprintf>
	}
	UART_SIM7600_Transmit((uint8_t*)http_at_command);
 801f180:	4806      	ldr	r0, [pc, #24]	; (801f19c <HTTP_Term+0x30>)
 801f182:	f7ff fc65 	bl	801ea50 <UART_SIM7600_Transmit>
	Clear_Http_Command();
 801f186:	f000 fae9 	bl	801f75c <Clear_Http_Command>
	http_state = HTTP_WAIT_FOR_TERM;
 801f18a:	4b05      	ldr	r3, [pc, #20]	; (801f1a0 <HTTP_Term+0x34>)
 801f18c:	2209      	movs	r2, #9
 801f18e:	701a      	strb	r2, [r3, #0]
}
 801f190:	bf00      	nop
 801f192:	bd80      	pop	{r7, pc}
 801f194:	2000007a 	.word	0x2000007a
 801f198:	08023d0c 	.word	0x08023d0c
 801f19c:	200034ac 	.word	0x200034ac
 801f1a0:	20000199 	.word	0x20000199

0801f1a4 <HTTP_Wait_For_Term>:
 * HTTP_Wait_For_Term()
 * @brief This is function for waiting HTTP_TERM state respone
 * If AT_Result is AT_OK so switch to HTTP_DONE
 * else switch to HTTP_MAX_STATE and reset Simcom7600
 */
void HTTP_Wait_For_Term(){
 801f1a4:	b580      	push	{r7, lr}
 801f1a6:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_OK);
	switch (Get_AT_Result()){
 801f1a8:	f000 fc9e 	bl	801fae8 <Get_AT_Result>
 801f1ac:	4603      	mov	r3, r0
 801f1ae:	2b00      	cmp	r3, #0
 801f1b0:	d002      	beq.n	801f1b8 <HTTP_Wait_For_Term+0x14>
 801f1b2:	2b01      	cmp	r3, #1
 801f1b4:	d006      	beq.n	801f1c4 <HTTP_Wait_For_Term+0x20>
		case AT_ERROR:
			Clear_AT_Result();
			http_state=HTTP_MAX_STATE;
			break;
		default:
			break;
 801f1b6:	e00b      	b.n	801f1d0 <HTTP_Wait_For_Term+0x2c>
			Clear_AT_Result();
 801f1b8:	f000 fca0 	bl	801fafc <Clear_AT_Result>
			http_state=HTTP_INIT;
 801f1bc:	4b05      	ldr	r3, [pc, #20]	; (801f1d4 <HTTP_Wait_For_Term+0x30>)
 801f1be:	2200      	movs	r2, #0
 801f1c0:	701a      	strb	r2, [r3, #0]
			break;
 801f1c2:	e005      	b.n	801f1d0 <HTTP_Wait_For_Term+0x2c>
			Clear_AT_Result();
 801f1c4:	f000 fc9a 	bl	801fafc <Clear_AT_Result>
			http_state=HTTP_MAX_STATE;
 801f1c8:	4b02      	ldr	r3, [pc, #8]	; (801f1d4 <HTTP_Wait_For_Term+0x30>)
 801f1ca:	220b      	movs	r2, #11
 801f1cc:	701a      	strb	r2, [r3, #0]
			break;
 801f1ce:	bf00      	nop
	}
}
 801f1d0:	bf00      	nop
 801f1d2:	bd80      	pop	{r7, pc}
 801f1d4:	20000199 	.word	0x20000199

0801f1d8 <HTTP_Done>:

/**
 * HTTP_Done()
 * @brief This is function for waiting FSM get out of HTTP Operation
 */
void HTTP_Done(){
 801f1d8:	b480      	push	{r7}
 801f1da:	af00      	add	r7, sp, #0
	return;
 801f1dc:	bf00      	nop
}
 801f1de:	46bd      	mov	sp, r7
 801f1e0:	bc80      	pop	{r7}
 801f1e2:	4770      	bx	lr

0801f1e4 <is_Http_TimeOutFlag>:
/**
 * is_Http_TimeOutFlag()
 * @brief Get http_timeout_flag
 * @return http_timeout_flag
 */
FlagStatus is_Http_TimeOutFlag(void){
 801f1e4:	b480      	push	{r7}
 801f1e6:	af00      	add	r7, sp, #0
	return http_timeout_flag;
 801f1e8:	4b02      	ldr	r3, [pc, #8]	; (801f1f4 <is_Http_TimeOutFlag+0x10>)
 801f1ea:	781b      	ldrb	r3, [r3, #0]
}
 801f1ec:	4618      	mov	r0, r3
 801f1ee:	46bd      	mov	sp, r7
 801f1f0:	bc80      	pop	{r7}
 801f1f2:	4770      	bx	lr
 801f1f4:	20000079 	.word	0x20000079

0801f1f8 <Set_Http_Timeout_Flag>:

/**
 * Set_Http_Timeout_Flag()
 * @brief Set http_timeout_flag to SET
 */
void Set_Http_Timeout_Flag(void){
 801f1f8:	b480      	push	{r7}
 801f1fa:	af00      	add	r7, sp, #0
	http_timeout_flag = SET;
 801f1fc:	4b03      	ldr	r3, [pc, #12]	; (801f20c <Set_Http_Timeout_Flag+0x14>)
 801f1fe:	2201      	movs	r2, #1
 801f200:	701a      	strb	r2, [r3, #0]
}
 801f202:	bf00      	nop
 801f204:	46bd      	mov	sp, r7
 801f206:	bc80      	pop	{r7}
 801f208:	4770      	bx	lr
 801f20a:	bf00      	nop
 801f20c:	20000079 	.word	0x20000079

0801f210 <Clear_Http_Timeout_Flag>:

/**
 * Clear_Http_Timeout_Flag()
 * @brief Clear http_timeout_flag to RESET
 */
void Clear_Http_Timeout_Flag(void){
 801f210:	b480      	push	{r7}
 801f212:	af00      	add	r7, sp, #0
	http_timeout_flag = RESET;
 801f214:	4b03      	ldr	r3, [pc, #12]	; (801f224 <Clear_Http_Timeout_Flag+0x14>)
 801f216:	2200      	movs	r2, #0
 801f218:	701a      	strb	r2, [r3, #0]
}
 801f21a:	bf00      	nop
 801f21c:	46bd      	mov	sp, r7
 801f21e:	bc80      	pop	{r7}
 801f220:	4770      	bx	lr
 801f222:	bf00      	nop
 801f224:	20000079 	.word	0x20000079

0801f228 <HTTP_Firmware_Version>:

uint8_t temp_version_name_buffer[TEMP_VERSION_BUFFER_LENGTH];
uint8_t temp_version_name_index = 0;
FlagStatus prepare_record_version_name = RESET;
FlagStatus start_record_version_name = RESET;
FlagStatus HTTP_Firmware_Version(){
 801f228:	b598      	push	{r3, r4, r7, lr}
 801f22a:	af00      	add	r7, sp, #0
	if(UART_SIM7600_Received_Buffer_Available()){
 801f22c:	f7ff fc3c 	bl	801eaa8 <UART_SIM7600_Received_Buffer_Available>
 801f230:	4603      	mov	r3, r0
 801f232:	2b00      	cmp	r3, #0
 801f234:	d059      	beq.n	801f2ea <HTTP_Firmware_Version+0xc2>
		temp_version_name_buffer[temp_version_name_index] = UART_SIM7600_Read_Received_Buffer();
 801f236:	4b2e      	ldr	r3, [pc, #184]	; (801f2f0 <HTTP_Firmware_Version+0xc8>)
 801f238:	781b      	ldrb	r3, [r3, #0]
 801f23a:	461c      	mov	r4, r3
 801f23c:	f7ff fc4a 	bl	801ead4 <UART_SIM7600_Read_Received_Buffer>
 801f240:	4603      	mov	r3, r0
 801f242:	461a      	mov	r2, r3
 801f244:	4b2b      	ldr	r3, [pc, #172]	; (801f2f4 <HTTP_Firmware_Version+0xcc>)
 801f246:	551a      	strb	r2, [r3, r4]
//		UART_DEBUG_Transmit_Size(temp_version_name_buffer + temp_version_name_index, 1);
		if(isReceiveData_New(temp_version_name_buffer, temp_version_name_index + 1, TEMP_VERSION_BUFFER_LENGTH, "+HTTPREAD: DATA")){
 801f248:	4b29      	ldr	r3, [pc, #164]	; (801f2f0 <HTTP_Firmware_Version+0xc8>)
 801f24a:	781b      	ldrb	r3, [r3, #0]
 801f24c:	1c59      	adds	r1, r3, #1
 801f24e:	4b2a      	ldr	r3, [pc, #168]	; (801f2f8 <HTTP_Firmware_Version+0xd0>)
 801f250:	2264      	movs	r2, #100	; 0x64
 801f252:	4828      	ldr	r0, [pc, #160]	; (801f2f4 <HTTP_Firmware_Version+0xcc>)
 801f254:	f000 fad0 	bl	801f7f8 <isReceiveData_New>
 801f258:	4603      	mov	r3, r0
 801f25a:	2b00      	cmp	r3, #0
 801f25c:	d002      	beq.n	801f264 <HTTP_Firmware_Version+0x3c>
			prepare_record_version_name = SET;
 801f25e:	4b27      	ldr	r3, [pc, #156]	; (801f2fc <HTTP_Firmware_Version+0xd4>)
 801f260:	2201      	movs	r2, #1
 801f262:	701a      	strb	r2, [r3, #0]
		}
		if(prepare_record_version_name){
 801f264:	4b25      	ldr	r3, [pc, #148]	; (801f2fc <HTTP_Firmware_Version+0xd4>)
 801f266:	781b      	ldrb	r3, [r3, #0]
 801f268:	2b00      	cmp	r3, #0
 801f26a:	d02e      	beq.n	801f2ca <HTTP_Firmware_Version+0xa2>
			if(start_record_version_name){
 801f26c:	4b24      	ldr	r3, [pc, #144]	; (801f300 <HTTP_Firmware_Version+0xd8>)
 801f26e:	781b      	ldrb	r3, [r3, #0]
 801f270:	2b00      	cmp	r3, #0
 801f272:	d01c      	beq.n	801f2ae <HTTP_Firmware_Version+0x86>
				//Check whether stop record version name
				if(temp_version_name_buffer[temp_version_name_index]=='\r'){
 801f274:	4b1e      	ldr	r3, [pc, #120]	; (801f2f0 <HTTP_Firmware_Version+0xc8>)
 801f276:	781b      	ldrb	r3, [r3, #0]
 801f278:	461a      	mov	r2, r3
 801f27a:	4b1e      	ldr	r3, [pc, #120]	; (801f2f4 <HTTP_Firmware_Version+0xcc>)
 801f27c:	5c9b      	ldrb	r3, [r3, r2]
 801f27e:	2b0d      	cmp	r3, #13
 801f280:	d107      	bne.n	801f292 <HTTP_Firmware_Version+0x6a>
					start_record_version_name = RESET;
 801f282:	4b1f      	ldr	r3, [pc, #124]	; (801f300 <HTTP_Firmware_Version+0xd8>)
 801f284:	2200      	movs	r2, #0
 801f286:	701a      	strb	r2, [r3, #0]
					prepare_record_version_name = RESET;
 801f288:	4b1c      	ldr	r3, [pc, #112]	; (801f2fc <HTTP_Firmware_Version+0xd4>)
 801f28a:	2200      	movs	r2, #0
 801f28c:	701a      	strb	r2, [r3, #0]
					return SET;
 801f28e:	2301      	movs	r3, #1
 801f290:	e02c      	b.n	801f2ec <HTTP_Firmware_Version+0xc4>
				}
				else{
					version[version_index++] = temp_version_name_buffer[temp_version_name_index];
 801f292:	4b17      	ldr	r3, [pc, #92]	; (801f2f0 <HTTP_Firmware_Version+0xc8>)
 801f294:	781b      	ldrb	r3, [r3, #0]
 801f296:	4619      	mov	r1, r3
 801f298:	4b1a      	ldr	r3, [pc, #104]	; (801f304 <HTTP_Firmware_Version+0xdc>)
 801f29a:	781b      	ldrb	r3, [r3, #0]
 801f29c:	1c5a      	adds	r2, r3, #1
 801f29e:	b2d0      	uxtb	r0, r2
 801f2a0:	4a18      	ldr	r2, [pc, #96]	; (801f304 <HTTP_Firmware_Version+0xdc>)
 801f2a2:	7010      	strb	r0, [r2, #0]
 801f2a4:	461a      	mov	r2, r3
 801f2a6:	4b13      	ldr	r3, [pc, #76]	; (801f2f4 <HTTP_Firmware_Version+0xcc>)
 801f2a8:	5c59      	ldrb	r1, [r3, r1]
 801f2aa:	4b17      	ldr	r3, [pc, #92]	; (801f308 <HTTP_Firmware_Version+0xe0>)
 801f2ac:	5499      	strb	r1, [r3, r2]
				}
			}
			if(isReceiveData_New(temp_version_name_buffer, temp_version_name_index + 1, TEMP_VERSION_BUFFER_LENGTH, "\r\n")){
 801f2ae:	4b10      	ldr	r3, [pc, #64]	; (801f2f0 <HTTP_Firmware_Version+0xc8>)
 801f2b0:	781b      	ldrb	r3, [r3, #0]
 801f2b2:	1c59      	adds	r1, r3, #1
 801f2b4:	4b15      	ldr	r3, [pc, #84]	; (801f30c <HTTP_Firmware_Version+0xe4>)
 801f2b6:	2264      	movs	r2, #100	; 0x64
 801f2b8:	480e      	ldr	r0, [pc, #56]	; (801f2f4 <HTTP_Firmware_Version+0xcc>)
 801f2ba:	f000 fa9d 	bl	801f7f8 <isReceiveData_New>
 801f2be:	4603      	mov	r3, r0
 801f2c0:	2b00      	cmp	r3, #0
 801f2c2:	d002      	beq.n	801f2ca <HTTP_Firmware_Version+0xa2>
				start_record_version_name = SET;
 801f2c4:	4b0e      	ldr	r3, [pc, #56]	; (801f300 <HTTP_Firmware_Version+0xd8>)
 801f2c6:	2201      	movs	r2, #1
 801f2c8:	701a      	strb	r2, [r3, #0]
			}

		}
		temp_version_name_index = (temp_version_name_index + 1)% TEMP_VERSION_BUFFER_LENGTH;
 801f2ca:	4b09      	ldr	r3, [pc, #36]	; (801f2f0 <HTTP_Firmware_Version+0xc8>)
 801f2cc:	781b      	ldrb	r3, [r3, #0]
 801f2ce:	3301      	adds	r3, #1
 801f2d0:	4a0f      	ldr	r2, [pc, #60]	; (801f310 <HTTP_Firmware_Version+0xe8>)
 801f2d2:	fb82 1203 	smull	r1, r2, r2, r3
 801f2d6:	1151      	asrs	r1, r2, #5
 801f2d8:	17da      	asrs	r2, r3, #31
 801f2da:	1a8a      	subs	r2, r1, r2
 801f2dc:	2164      	movs	r1, #100	; 0x64
 801f2de:	fb01 f202 	mul.w	r2, r1, r2
 801f2e2:	1a9a      	subs	r2, r3, r2
 801f2e4:	b2d2      	uxtb	r2, r2
 801f2e6:	4b02      	ldr	r3, [pc, #8]	; (801f2f0 <HTTP_Firmware_Version+0xc8>)
 801f2e8:	701a      	strb	r2, [r3, #0]
	}
	return RESET;
 801f2ea:	2300      	movs	r3, #0
}
 801f2ec:	4618      	mov	r0, r3
 801f2ee:	bd98      	pop	{r3, r4, r7, pc}
 801f2f0:	200001a2 	.word	0x200001a2
 801f2f4:	20003e74 	.word	0x20003e74
 801f2f8:	08023d30 	.word	0x08023d30
 801f2fc:	200001a3 	.word	0x200001a3
 801f300:	200001a4 	.word	0x200001a4
 801f304:	20000190 	.word	0x20000190
 801f308:	2000248c 	.word	0x2000248c
 801f30c:	08023d40 	.word	0x08023d40
 801f310:	51eb851f 	.word	0x51eb851f

0801f314 <is_Firmware_Line_Data_Correct>:

/*
 * Line is: ":0101010101010 and checksum :01, last is "\r\n""
 * We ignore ':' character and calculate checksum from 01....010 and ignore checksum value
 */
FlagStatus is_Firmware_Line_Data_Correct(uint8_t *buffer, uint16_t buffer_len){
 801f314:	b590      	push	{r4, r7, lr}
 801f316:	b085      	sub	sp, #20
 801f318:	af00      	add	r7, sp, #0
 801f31a:	6078      	str	r0, [r7, #4]
 801f31c:	460b      	mov	r3, r1
 801f31e:	807b      	strh	r3, [r7, #2]
	FlagStatus flag_ret;
	checksum = 0;
 801f320:	4b40      	ldr	r3, [pc, #256]	; (801f424 <is_Firmware_Line_Data_Correct+0x110>)
 801f322:	2200      	movs	r2, #0
 801f324:	701a      	strb	r2, [r3, #0]

	for (uint16_t var = 0; var < buffer_len - 3 - 2; var=var+2) {
 801f326:	2300      	movs	r3, #0
 801f328:	81fb      	strh	r3, [r7, #14]
 801f32a:	e031      	b.n	801f390 <is_Firmware_Line_Data_Correct+0x7c>
		sprintf(log,"%c-%c\r\n",buffer[var],buffer[var+1]);
 801f32c:	89fb      	ldrh	r3, [r7, #14]
 801f32e:	687a      	ldr	r2, [r7, #4]
 801f330:	4413      	add	r3, r2
 801f332:	781b      	ldrb	r3, [r3, #0]
 801f334:	4619      	mov	r1, r3
 801f336:	89fb      	ldrh	r3, [r7, #14]
 801f338:	3301      	adds	r3, #1
 801f33a:	687a      	ldr	r2, [r7, #4]
 801f33c:	4413      	add	r3, r2
 801f33e:	781b      	ldrb	r3, [r3, #0]
 801f340:	460a      	mov	r2, r1
 801f342:	4939      	ldr	r1, [pc, #228]	; (801f428 <is_Firmware_Line_Data_Correct+0x114>)
 801f344:	4839      	ldr	r0, [pc, #228]	; (801f42c <is_Firmware_Line_Data_Correct+0x118>)
 801f346:	f003 fe8d 	bl	8023064 <siprintf>
		LOG(log);
 801f34a:	4838      	ldr	r0, [pc, #224]	; (801f42c <is_Firmware_Line_Data_Correct+0x118>)
 801f34c:	f7ff fc1a 	bl	801eb84 <UART_DEBUG_Transmit>
		checksum = checksum + (Char2Hex(buffer[var]) << 4) + Char2Hex(buffer[var+1]);
 801f350:	89fb      	ldrh	r3, [r7, #14]
 801f352:	687a      	ldr	r2, [r7, #4]
 801f354:	4413      	add	r3, r2
 801f356:	781b      	ldrb	r3, [r3, #0]
 801f358:	4618      	mov	r0, r3
 801f35a:	f000 fa95 	bl	801f888 <Char2Hex>
 801f35e:	4603      	mov	r3, r0
 801f360:	b2db      	uxtb	r3, r3
 801f362:	011b      	lsls	r3, r3, #4
 801f364:	b2da      	uxtb	r2, r3
 801f366:	4b2f      	ldr	r3, [pc, #188]	; (801f424 <is_Firmware_Line_Data_Correct+0x110>)
 801f368:	781b      	ldrb	r3, [r3, #0]
 801f36a:	4413      	add	r3, r2
 801f36c:	b2dc      	uxtb	r4, r3
 801f36e:	89fb      	ldrh	r3, [r7, #14]
 801f370:	3301      	adds	r3, #1
 801f372:	687a      	ldr	r2, [r7, #4]
 801f374:	4413      	add	r3, r2
 801f376:	781b      	ldrb	r3, [r3, #0]
 801f378:	4618      	mov	r0, r3
 801f37a:	f000 fa85 	bl	801f888 <Char2Hex>
 801f37e:	4603      	mov	r3, r0
 801f380:	b2db      	uxtb	r3, r3
 801f382:	4423      	add	r3, r4
 801f384:	b2da      	uxtb	r2, r3
 801f386:	4b27      	ldr	r3, [pc, #156]	; (801f424 <is_Firmware_Line_Data_Correct+0x110>)
 801f388:	701a      	strb	r2, [r3, #0]
	for (uint16_t var = 0; var < buffer_len - 3 - 2; var=var+2) {
 801f38a:	89fb      	ldrh	r3, [r7, #14]
 801f38c:	3302      	adds	r3, #2
 801f38e:	81fb      	strh	r3, [r7, #14]
 801f390:	89fa      	ldrh	r2, [r7, #14]
 801f392:	887b      	ldrh	r3, [r7, #2]
 801f394:	3b05      	subs	r3, #5
 801f396:	429a      	cmp	r2, r3
 801f398:	dbc8      	blt.n	801f32c <is_Firmware_Line_Data_Correct+0x18>
	}
	checksum =~checksum;
 801f39a:	4b22      	ldr	r3, [pc, #136]	; (801f424 <is_Firmware_Line_Data_Correct+0x110>)
 801f39c:	781b      	ldrb	r3, [r3, #0]
 801f39e:	43db      	mvns	r3, r3
 801f3a0:	b2da      	uxtb	r2, r3
 801f3a2:	4b20      	ldr	r3, [pc, #128]	; (801f424 <is_Firmware_Line_Data_Correct+0x110>)
 801f3a4:	701a      	strb	r2, [r3, #0]
	checksum += 1;
 801f3a6:	4b1f      	ldr	r3, [pc, #124]	; (801f424 <is_Firmware_Line_Data_Correct+0x110>)
 801f3a8:	781b      	ldrb	r3, [r3, #0]
 801f3aa:	3301      	adds	r3, #1
 801f3ac:	b2da      	uxtb	r2, r3
 801f3ae:	4b1d      	ldr	r3, [pc, #116]	; (801f424 <is_Firmware_Line_Data_Correct+0x110>)
 801f3b0:	701a      	strb	r2, [r3, #0]
	uint8_t checksum_inline = (Char2Hex(buffer[buffer_len -3-2 ]) << 4) + Char2Hex(buffer[buffer_len -3-2 +1 ]);
 801f3b2:	887b      	ldrh	r3, [r7, #2]
 801f3b4:	3b05      	subs	r3, #5
 801f3b6:	687a      	ldr	r2, [r7, #4]
 801f3b8:	4413      	add	r3, r2
 801f3ba:	781b      	ldrb	r3, [r3, #0]
 801f3bc:	4618      	mov	r0, r3
 801f3be:	f000 fa63 	bl	801f888 <Char2Hex>
 801f3c2:	4603      	mov	r3, r0
 801f3c4:	b2db      	uxtb	r3, r3
 801f3c6:	011b      	lsls	r3, r3, #4
 801f3c8:	b2dc      	uxtb	r4, r3
 801f3ca:	887b      	ldrh	r3, [r7, #2]
 801f3cc:	3b04      	subs	r3, #4
 801f3ce:	687a      	ldr	r2, [r7, #4]
 801f3d0:	4413      	add	r3, r2
 801f3d2:	781b      	ldrb	r3, [r3, #0]
 801f3d4:	4618      	mov	r0, r3
 801f3d6:	f000 fa57 	bl	801f888 <Char2Hex>
 801f3da:	4603      	mov	r3, r0
 801f3dc:	b2db      	uxtb	r3, r3
 801f3de:	4423      	add	r3, r4
 801f3e0:	737b      	strb	r3, [r7, #13]
	sprintf(log,"Check sum %x\r\n",checksum);
 801f3e2:	4b10      	ldr	r3, [pc, #64]	; (801f424 <is_Firmware_Line_Data_Correct+0x110>)
 801f3e4:	781b      	ldrb	r3, [r3, #0]
 801f3e6:	461a      	mov	r2, r3
 801f3e8:	4911      	ldr	r1, [pc, #68]	; (801f430 <is_Firmware_Line_Data_Correct+0x11c>)
 801f3ea:	4810      	ldr	r0, [pc, #64]	; (801f42c <is_Firmware_Line_Data_Correct+0x118>)
 801f3ec:	f003 fe3a 	bl	8023064 <siprintf>
	LOG(log);
 801f3f0:	480e      	ldr	r0, [pc, #56]	; (801f42c <is_Firmware_Line_Data_Correct+0x118>)
 801f3f2:	f7ff fbc7 	bl	801eb84 <UART_DEBUG_Transmit>
	sprintf(log,"Calculated Check sum %x\r\n",checksum_inline);
 801f3f6:	7b7b      	ldrb	r3, [r7, #13]
 801f3f8:	461a      	mov	r2, r3
 801f3fa:	490e      	ldr	r1, [pc, #56]	; (801f434 <is_Firmware_Line_Data_Correct+0x120>)
 801f3fc:	480b      	ldr	r0, [pc, #44]	; (801f42c <is_Firmware_Line_Data_Correct+0x118>)
 801f3fe:	f003 fe31 	bl	8023064 <siprintf>
	LOG(log);
 801f402:	480a      	ldr	r0, [pc, #40]	; (801f42c <is_Firmware_Line_Data_Correct+0x118>)
 801f404:	f7ff fbbe 	bl	801eb84 <UART_DEBUG_Transmit>
	flag_ret = (checksum == checksum_inline);
 801f408:	4b06      	ldr	r3, [pc, #24]	; (801f424 <is_Firmware_Line_Data_Correct+0x110>)
 801f40a:	781b      	ldrb	r3, [r3, #0]
 801f40c:	7b7a      	ldrb	r2, [r7, #13]
 801f40e:	429a      	cmp	r2, r3
 801f410:	bf0c      	ite	eq
 801f412:	2301      	moveq	r3, #1
 801f414:	2300      	movne	r3, #0
 801f416:	b2db      	uxtb	r3, r3
 801f418:	733b      	strb	r3, [r7, #12]
	return flag_ret;
 801f41a:	7b3b      	ldrb	r3, [r7, #12]
}
 801f41c:	4618      	mov	r0, r3
 801f41e:	3714      	adds	r7, #20
 801f420:	46bd      	mov	sp, r7
 801f422:	bd90      	pop	{r4, r7, pc}
 801f424:	2000019a 	.word	0x2000019a
 801f428:	08023d44 	.word	0x08023d44
 801f42c:	20002328 	.word	0x20002328
 801f430:	08023d4c 	.word	0x08023d4c
 801f434:	08023d5c 	.word	0x08023d5c

0801f438 <HTTP_Firmware_Data>:
uint8_t temp_at_response_buffer[LINE_BUFFER_LENGTH];
uint16_t temp_at_response_index = 0;
uint8_t temp_char;
char new_log[10];
FlagStatus first_http_read = SET;
FlagStatus HTTP_Firmware_Data(){
 801f438:	b590      	push	{r4, r7, lr}
 801f43a:	b083      	sub	sp, #12
 801f43c:	af00      	add	r7, sp, #0
	 *  	"data": "0ABCDGEGGASD...
	 *  			ASDB12312512412...
	 *  			01231291512925192"
	 *  So We need seperate "new_version" and "checksum" field out of "data"
	 */
	if(UART_SIM7600_Received_Buffer_Available()){
 801f43e:	f7ff fb33 	bl	801eaa8 <UART_SIM7600_Received_Buffer_Available>
 801f442:	4603      	mov	r3, r0
 801f444:	2b00      	cmp	r3, #0
 801f446:	f000 8111 	beq.w	801f66c <HTTP_Firmware_Data+0x234>
		temp_at_response_buffer[temp_at_response_index] = UART_SIM7600_Read_Received_Buffer();
 801f44a:	4b8b      	ldr	r3, [pc, #556]	; (801f678 <HTTP_Firmware_Data+0x240>)
 801f44c:	881b      	ldrh	r3, [r3, #0]
 801f44e:	461c      	mov	r4, r3
 801f450:	f7ff fb40 	bl	801ead4 <UART_SIM7600_Read_Received_Buffer>
 801f454:	4603      	mov	r3, r0
 801f456:	461a      	mov	r2, r3
 801f458:	4b88      	ldr	r3, [pc, #544]	; (801f67c <HTTP_Firmware_Data+0x244>)
 801f45a:	551a      	strb	r2, [r3, r4]
//		UART_DEBUG_Transmit_Size(line_buffer + line_buffer_index, 1);
		//Check if end of SIM respond
		if(isReceiveData_New(temp_at_response_buffer, temp_at_response_index+1, LINE_BUFFER_LENGTH, "\r\n+HTTPREAD: 0")){
 801f45c:	4b86      	ldr	r3, [pc, #536]	; (801f678 <HTTP_Firmware_Data+0x240>)
 801f45e:	881b      	ldrh	r3, [r3, #0]
 801f460:	1c59      	adds	r1, r3, #1
 801f462:	4b87      	ldr	r3, [pc, #540]	; (801f680 <HTTP_Firmware_Data+0x248>)
 801f464:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801f468:	4884      	ldr	r0, [pc, #528]	; (801f67c <HTTP_Firmware_Data+0x244>)
 801f46a:	f000 f9c5 	bl	801f7f8 <isReceiveData_New>
 801f46e:	4603      	mov	r3, r0
 801f470:	2b00      	cmp	r3, #0
 801f472:	d048      	beq.n	801f506 <HTTP_Firmware_Data+0xce>
//			LOG("1");
			if(firmware_index >= PAGESIZE){
 801f474:	4b83      	ldr	r3, [pc, #524]	; (801f684 <HTTP_Firmware_Data+0x24c>)
 801f476:	881b      	ldrh	r3, [r3, #0]
 801f478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f47c:	d321      	bcc.n	801f4c2 <HTTP_Firmware_Data+0x8a>
				Flash_Write_Char(firmware_address, firmware_data, PAGESIZE);
 801f47e:	4b82      	ldr	r3, [pc, #520]	; (801f688 <HTTP_Firmware_Data+0x250>)
 801f480:	681b      	ldr	r3, [r3, #0]
 801f482:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801f486:	4981      	ldr	r1, [pc, #516]	; (801f68c <HTTP_Firmware_Data+0x254>)
 801f488:	4618      	mov	r0, r3
 801f48a:	f000 fe8f 	bl	80201ac <Flash_Write_Char>
//				LOG("3");
				firmware_address+= PAGESIZE;
 801f48e:	4b7e      	ldr	r3, [pc, #504]	; (801f688 <HTTP_Firmware_Data+0x250>)
 801f490:	681b      	ldr	r3, [r3, #0]
 801f492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f496:	4a7c      	ldr	r2, [pc, #496]	; (801f688 <HTTP_Firmware_Data+0x250>)
 801f498:	6013      	str	r3, [r2, #0]
				memcpy(firmware_data,firmware_data+PAGESIZE,firmware_index-PAGESIZE);
 801f49a:	497d      	ldr	r1, [pc, #500]	; (801f690 <HTTP_Firmware_Data+0x258>)
 801f49c:	4b79      	ldr	r3, [pc, #484]	; (801f684 <HTTP_Firmware_Data+0x24c>)
 801f49e:	881b      	ldrh	r3, [r3, #0]
 801f4a0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801f4a4:	461a      	mov	r2, r3
 801f4a6:	4879      	ldr	r0, [pc, #484]	; (801f68c <HTTP_Firmware_Data+0x254>)
 801f4a8:	f003 fdc6 	bl	8023038 <memcpy>
				firmware_index-=PAGESIZE;
 801f4ac:	4b75      	ldr	r3, [pc, #468]	; (801f684 <HTTP_Firmware_Data+0x24c>)
 801f4ae:	881b      	ldrh	r3, [r3, #0]
 801f4b0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801f4b4:	b29a      	uxth	r2, r3
 801f4b6:	4b73      	ldr	r3, [pc, #460]	; (801f684 <HTTP_Firmware_Data+0x24c>)
 801f4b8:	801a      	strh	r2, [r3, #0]
//				for (int var = PAGESIZE; var < firmware_index; ++var) {
//					firmware_data[var-PAGESIZE] = firmware_data[var];
//				}
				LOG("4");
 801f4ba:	4876      	ldr	r0, [pc, #472]	; (801f694 <HTTP_Firmware_Data+0x25c>)
 801f4bc:	f7ff fb62 	bl	801eb84 <UART_DEBUG_Transmit>
 801f4c0:	e016      	b.n	801f4f0 <HTTP_Firmware_Data+0xb8>
			}
			else if(http_response_remain == 0){
 801f4c2:	4b75      	ldr	r3, [pc, #468]	; (801f698 <HTTP_Firmware_Data+0x260>)
 801f4c4:	681b      	ldr	r3, [r3, #0]
 801f4c6:	2b00      	cmp	r3, #0
 801f4c8:	d112      	bne.n	801f4f0 <HTTP_Firmware_Data+0xb8>
				Flash_Write_Char(firmware_address, firmware_data, firmware_index);
 801f4ca:	4b6f      	ldr	r3, [pc, #444]	; (801f688 <HTTP_Firmware_Data+0x250>)
 801f4cc:	681b      	ldr	r3, [r3, #0]
 801f4ce:	4a6d      	ldr	r2, [pc, #436]	; (801f684 <HTTP_Firmware_Data+0x24c>)
 801f4d0:	8812      	ldrh	r2, [r2, #0]
 801f4d2:	496e      	ldr	r1, [pc, #440]	; (801f68c <HTTP_Firmware_Data+0x254>)
 801f4d4:	4618      	mov	r0, r3
 801f4d6:	f000 fe69 	bl	80201ac <Flash_Write_Char>
				firmware_address+= firmware_index;
 801f4da:	4b6a      	ldr	r3, [pc, #424]	; (801f684 <HTTP_Firmware_Data+0x24c>)
 801f4dc:	881b      	ldrh	r3, [r3, #0]
 801f4de:	461a      	mov	r2, r3
 801f4e0:	4b69      	ldr	r3, [pc, #420]	; (801f688 <HTTP_Firmware_Data+0x250>)
 801f4e2:	681b      	ldr	r3, [r3, #0]
 801f4e4:	4413      	add	r3, r2
 801f4e6:	4a68      	ldr	r2, [pc, #416]	; (801f688 <HTTP_Firmware_Data+0x250>)
 801f4e8:	6013      	str	r3, [r2, #0]
				firmware_index = 0;
 801f4ea:	4b66      	ldr	r3, [pc, #408]	; (801f684 <HTTP_Firmware_Data+0x24c>)
 801f4ec:	2200      	movs	r2, #0
 801f4ee:	801a      	strh	r2, [r3, #0]
			}
			line_buffer_index = line_buffer_index - strlen("\r\n+HTTPREAD: 0");
 801f4f0:	4b6a      	ldr	r3, [pc, #424]	; (801f69c <HTTP_Firmware_Data+0x264>)
 801f4f2:	881b      	ldrh	r3, [r3, #0]
 801f4f4:	3b0e      	subs	r3, #14
 801f4f6:	b29a      	uxth	r2, r3
 801f4f8:	4b68      	ldr	r3, [pc, #416]	; (801f69c <HTTP_Firmware_Data+0x264>)
 801f4fa:	801a      	strh	r2, [r3, #0]
			start_record_firmware_data = RESET;
 801f4fc:	4b68      	ldr	r3, [pc, #416]	; (801f6a0 <HTTP_Firmware_Data+0x268>)
 801f4fe:	2200      	movs	r2, #0
 801f500:	701a      	strb	r2, [r3, #0]
			return SET;
 801f502:	2301      	movs	r3, #1
 801f504:	e0b3      	b.n	801f66e <HTTP_Firmware_Data+0x236>
		}
		// Check whether start of SIM Respond
		if(isReceiveData_New(temp_at_response_buffer, temp_at_response_index+1, LINE_BUFFER_LENGTH, "HTTPREAD: DATA")){
 801f506:	4b5c      	ldr	r3, [pc, #368]	; (801f678 <HTTP_Firmware_Data+0x240>)
 801f508:	881b      	ldrh	r3, [r3, #0]
 801f50a:	1c59      	adds	r1, r3, #1
 801f50c:	4b65      	ldr	r3, [pc, #404]	; (801f6a4 <HTTP_Firmware_Data+0x26c>)
 801f50e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801f512:	485a      	ldr	r0, [pc, #360]	; (801f67c <HTTP_Firmware_Data+0x244>)
 801f514:	f000 f970 	bl	801f7f8 <isReceiveData_New>
 801f518:	4603      	mov	r3, r0
 801f51a:	2b00      	cmp	r3, #0
 801f51c:	d002      	beq.n	801f524 <HTTP_Firmware_Data+0xec>
//			LOG("2");
			prepare_record_firmware_data = SET;
 801f51e:	4b62      	ldr	r3, [pc, #392]	; (801f6a8 <HTTP_Firmware_Data+0x270>)
 801f520:	2201      	movs	r2, #1
 801f522:	701a      	strb	r2, [r3, #0]
		}
		if(prepare_record_firmware_data){
 801f524:	4b60      	ldr	r3, [pc, #384]	; (801f6a8 <HTTP_Firmware_Data+0x270>)
 801f526:	781b      	ldrb	r3, [r3, #0]
 801f528:	2b00      	cmp	r3, #0
 801f52a:	d014      	beq.n	801f556 <HTTP_Firmware_Data+0x11e>
//			LOG("3");
			if(isReceiveData_New(temp_at_response_buffer, temp_at_response_index+1, LINE_BUFFER_LENGTH, "\r\n")){
 801f52c:	4b52      	ldr	r3, [pc, #328]	; (801f678 <HTTP_Firmware_Data+0x240>)
 801f52e:	881b      	ldrh	r3, [r3, #0]
 801f530:	1c59      	adds	r1, r3, #1
 801f532:	4b5e      	ldr	r3, [pc, #376]	; (801f6ac <HTTP_Firmware_Data+0x274>)
 801f534:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801f538:	4850      	ldr	r0, [pc, #320]	; (801f67c <HTTP_Firmware_Data+0x244>)
 801f53a:	f000 f95d 	bl	801f7f8 <isReceiveData_New>
 801f53e:	4603      	mov	r3, r0
 801f540:	2b00      	cmp	r3, #0
 801f542:	d008      	beq.n	801f556 <HTTP_Firmware_Data+0x11e>
				start_record_firmware_data = SET;
 801f544:	4b56      	ldr	r3, [pc, #344]	; (801f6a0 <HTTP_Firmware_Data+0x268>)
 801f546:	2201      	movs	r2, #1
 801f548:	701a      	strb	r2, [r3, #0]
				prepare_record_firmware_data = RESET;
 801f54a:	4b57      	ldr	r3, [pc, #348]	; (801f6a8 <HTTP_Firmware_Data+0x270>)
 801f54c:	2200      	movs	r2, #0
 801f54e:	701a      	strb	r2, [r3, #0]
				temp_at_response_index = 0;
 801f550:	4b49      	ldr	r3, [pc, #292]	; (801f678 <HTTP_Firmware_Data+0x240>)
 801f552:	2200      	movs	r2, #0
 801f554:	801a      	strh	r2, [r3, #0]
				// reset line_index
			}
		}
		if(start_record_firmware_data){
 801f556:	4b52      	ldr	r3, [pc, #328]	; (801f6a0 <HTTP_Firmware_Data+0x268>)
 801f558:	781b      	ldrb	r3, [r3, #0]
 801f55a:	2b00      	cmp	r3, #0
 801f55c:	d075      	beq.n	801f64a <HTTP_Firmware_Data+0x212>
//			LOG("4");
			// Check whether that data is not end of HTTP READ
			line_buffer[line_buffer_index] = temp_at_response_buffer[temp_at_response_index];
 801f55e:	4b46      	ldr	r3, [pc, #280]	; (801f678 <HTTP_Firmware_Data+0x240>)
 801f560:	881b      	ldrh	r3, [r3, #0]
 801f562:	4619      	mov	r1, r3
 801f564:	4b4d      	ldr	r3, [pc, #308]	; (801f69c <HTTP_Firmware_Data+0x264>)
 801f566:	881b      	ldrh	r3, [r3, #0]
 801f568:	461a      	mov	r2, r3
 801f56a:	4b44      	ldr	r3, [pc, #272]	; (801f67c <HTTP_Firmware_Data+0x244>)
 801f56c:	5c59      	ldrb	r1, [r3, r1]
 801f56e:	4b50      	ldr	r3, [pc, #320]	; (801f6b0 <HTTP_Firmware_Data+0x278>)
 801f570:	5499      	strb	r1, [r3, r2]
			line_buffer_index = (line_buffer_index +1)%LINE_BUFFER_LENGTH;
 801f572:	4b4a      	ldr	r3, [pc, #296]	; (801f69c <HTTP_Firmware_Data+0x264>)
 801f574:	881b      	ldrh	r3, [r3, #0]
 801f576:	3301      	adds	r3, #1
 801f578:	4a4e      	ldr	r2, [pc, #312]	; (801f6b4 <HTTP_Firmware_Data+0x27c>)
 801f57a:	fb82 1203 	smull	r1, r2, r2, r3
 801f57e:	1151      	asrs	r1, r2, #5
 801f580:	17da      	asrs	r2, r3, #31
 801f582:	1a8a      	subs	r2, r1, r2
 801f584:	f44f 7196 	mov.w	r1, #300	; 0x12c
 801f588:	fb01 f202 	mul.w	r2, r1, r2
 801f58c:	1a9a      	subs	r2, r3, r2
 801f58e:	b292      	uxth	r2, r2
 801f590:	4b42      	ldr	r3, [pc, #264]	; (801f69c <HTTP_Firmware_Data+0x264>)
 801f592:	801a      	strh	r2, [r3, #0]
			if(isReceiveData_New(temp_at_response_buffer, temp_at_response_index +1, LINE_BUFFER_LENGTH, "\r\n:")){
 801f594:	4b38      	ldr	r3, [pc, #224]	; (801f678 <HTTP_Firmware_Data+0x240>)
 801f596:	881b      	ldrh	r3, [r3, #0]
 801f598:	1c59      	adds	r1, r3, #1
 801f59a:	4b47      	ldr	r3, [pc, #284]	; (801f6b8 <HTTP_Firmware_Data+0x280>)
 801f59c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801f5a0:	4836      	ldr	r0, [pc, #216]	; (801f67c <HTTP_Firmware_Data+0x244>)
 801f5a2:	f000 f929 	bl	801f7f8 <isReceiveData_New>
 801f5a6:	4603      	mov	r3, r0
 801f5a8:	2b00      	cmp	r3, #0
 801f5aa:	d04e      	beq.n	801f64a <HTTP_Firmware_Data+0x212>
//				UART_DEBUG_Transmit_Size(line_buffer, line_buffer_index+1);
				// Calculator checksum
				if(first_http_read){
 801f5ac:	4b43      	ldr	r3, [pc, #268]	; (801f6bc <HTTP_Firmware_Data+0x284>)
 801f5ae:	781b      	ldrb	r3, [r3, #0]
 801f5b0:	2b00      	cmp	r3, #0
 801f5b2:	d006      	beq.n	801f5c2 <HTTP_Firmware_Data+0x18a>
					first_http_read = RESET;
 801f5b4:	4b41      	ldr	r3, [pc, #260]	; (801f6bc <HTTP_Firmware_Data+0x284>)
 801f5b6:	2200      	movs	r2, #0
 801f5b8:	701a      	strb	r2, [r3, #0]
					line_buffer_index = 0;
 801f5ba:	4b38      	ldr	r3, [pc, #224]	; (801f69c <HTTP_Firmware_Data+0x264>)
 801f5bc:	2200      	movs	r2, #0
 801f5be:	801a      	strh	r2, [r3, #0]
 801f5c0:	e043      	b.n	801f64a <HTTP_Firmware_Data+0x212>
				}
				else{
					if(is_Firmware_Line_Data_Correct(line_buffer, line_buffer_index)){
 801f5c2:	4b36      	ldr	r3, [pc, #216]	; (801f69c <HTTP_Firmware_Data+0x264>)
 801f5c4:	881b      	ldrh	r3, [r3, #0]
 801f5c6:	4619      	mov	r1, r3
 801f5c8:	4839      	ldr	r0, [pc, #228]	; (801f6b0 <HTTP_Firmware_Data+0x278>)
 801f5ca:	f7ff fea3 	bl	801f314 <is_Firmware_Line_Data_Correct>
 801f5ce:	4603      	mov	r3, r0
 801f5d0:	2b00      	cmp	r3, #0
 801f5d2:	d034      	beq.n	801f63e <HTTP_Firmware_Data+0x206>
						// Check whether that line is the firmware data or not
						if(Char2Hex(line_buffer[9])==0){
 801f5d4:	4b36      	ldr	r3, [pc, #216]	; (801f6b0 <HTTP_Firmware_Data+0x278>)
 801f5d6:	7a5b      	ldrb	r3, [r3, #9]
 801f5d8:	4618      	mov	r0, r3
 801f5da:	f000 f955 	bl	801f888 <Char2Hex>
 801f5de:	4603      	mov	r3, r0
 801f5e0:	2b00      	cmp	r3, #0
 801f5e2:	d128      	bne.n	801f636 <HTTP_Firmware_Data+0x1fe>
							for (int var = 10; var < line_buffer_index -4 -2; var=var+2) {
 801f5e4:	230a      	movs	r3, #10
 801f5e6:	607b      	str	r3, [r7, #4]
 801f5e8:	e01f      	b.n	801f62a <HTTP_Firmware_Data+0x1f2>
								//Save line to firmware data
								firmware_data[firmware_index++] = Char2Hex(line_buffer[var])<<4 + Char2Hex(line_buffer[var+1]);
 801f5ea:	4a31      	ldr	r2, [pc, #196]	; (801f6b0 <HTTP_Firmware_Data+0x278>)
 801f5ec:	687b      	ldr	r3, [r7, #4]
 801f5ee:	4413      	add	r3, r2
 801f5f0:	781b      	ldrb	r3, [r3, #0]
 801f5f2:	4618      	mov	r0, r3
 801f5f4:	f000 f948 	bl	801f888 <Char2Hex>
 801f5f8:	4604      	mov	r4, r0
 801f5fa:	687b      	ldr	r3, [r7, #4]
 801f5fc:	3301      	adds	r3, #1
 801f5fe:	4a2c      	ldr	r2, [pc, #176]	; (801f6b0 <HTTP_Firmware_Data+0x278>)
 801f600:	5cd3      	ldrb	r3, [r2, r3]
 801f602:	4618      	mov	r0, r3
 801f604:	f000 f940 	bl	801f888 <Char2Hex>
 801f608:	4603      	mov	r3, r0
 801f60a:	3304      	adds	r3, #4
 801f60c:	fa04 f103 	lsl.w	r1, r4, r3
 801f610:	4b1c      	ldr	r3, [pc, #112]	; (801f684 <HTTP_Firmware_Data+0x24c>)
 801f612:	881b      	ldrh	r3, [r3, #0]
 801f614:	1c5a      	adds	r2, r3, #1
 801f616:	b290      	uxth	r0, r2
 801f618:	4a1a      	ldr	r2, [pc, #104]	; (801f684 <HTTP_Firmware_Data+0x24c>)
 801f61a:	8010      	strh	r0, [r2, #0]
 801f61c:	461a      	mov	r2, r3
 801f61e:	b2c9      	uxtb	r1, r1
 801f620:	4b1a      	ldr	r3, [pc, #104]	; (801f68c <HTTP_Firmware_Data+0x254>)
 801f622:	5499      	strb	r1, [r3, r2]
							for (int var = 10; var < line_buffer_index -4 -2; var=var+2) {
 801f624:	687b      	ldr	r3, [r7, #4]
 801f626:	3302      	adds	r3, #2
 801f628:	607b      	str	r3, [r7, #4]
 801f62a:	4b1c      	ldr	r3, [pc, #112]	; (801f69c <HTTP_Firmware_Data+0x264>)
 801f62c:	881b      	ldrh	r3, [r3, #0]
 801f62e:	3b06      	subs	r3, #6
 801f630:	687a      	ldr	r2, [r7, #4]
 801f632:	429a      	cmp	r2, r3
 801f634:	dbd9      	blt.n	801f5ea <HTTP_Firmware_Data+0x1b2>
							}
						}
						line_buffer_index = 0;
 801f636:	4b19      	ldr	r3, [pc, #100]	; (801f69c <HTTP_Firmware_Data+0x264>)
 801f638:	2200      	movs	r2, #0
 801f63a:	801a      	strh	r2, [r3, #0]
 801f63c:	e005      	b.n	801f64a <HTTP_Firmware_Data+0x212>
					}
					else{
						checksum_correct = RESET;
 801f63e:	4b20      	ldr	r3, [pc, #128]	; (801f6c0 <HTTP_Firmware_Data+0x288>)
 801f640:	2200      	movs	r2, #0
 801f642:	701a      	strb	r2, [r3, #0]
						LOG("Checksum is Wrong");
 801f644:	481f      	ldr	r0, [pc, #124]	; (801f6c4 <HTTP_Firmware_Data+0x28c>)
 801f646:	f7ff fa9d 	bl	801eb84 <UART_DEBUG_Transmit>
					}
				}
			}
		}
		temp_at_response_index = (temp_at_response_index +1)%LINE_BUFFER_LENGTH;
 801f64a:	4b0b      	ldr	r3, [pc, #44]	; (801f678 <HTTP_Firmware_Data+0x240>)
 801f64c:	881b      	ldrh	r3, [r3, #0]
 801f64e:	3301      	adds	r3, #1
 801f650:	4a18      	ldr	r2, [pc, #96]	; (801f6b4 <HTTP_Firmware_Data+0x27c>)
 801f652:	fb82 1203 	smull	r1, r2, r2, r3
 801f656:	1151      	asrs	r1, r2, #5
 801f658:	17da      	asrs	r2, r3, #31
 801f65a:	1a8a      	subs	r2, r1, r2
 801f65c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 801f660:	fb01 f202 	mul.w	r2, r1, r2
 801f664:	1a9a      	subs	r2, r3, r2
 801f666:	b292      	uxth	r2, r2
 801f668:	4b03      	ldr	r3, [pc, #12]	; (801f678 <HTTP_Firmware_Data+0x240>)
 801f66a:	801a      	strh	r2, [r3, #0]
	}
	return RESET;
 801f66c:	2300      	movs	r3, #0
}
 801f66e:	4618      	mov	r0, r3
 801f670:	370c      	adds	r7, #12
 801f672:	46bd      	mov	sp, r7
 801f674:	bd90      	pop	{r4, r7, pc}
 801f676:	bf00      	nop
 801f678:	200001a8 	.word	0x200001a8
 801f67c:	2000235c 	.word	0x2000235c
 801f680:	08023d78 	.word	0x08023d78
 801f684:	200001a0 	.word	0x200001a0
 801f688:	20000080 	.word	0x20000080
 801f68c:	200024a8 	.word	0x200024a8
 801f690:	20002ca8 	.word	0x20002ca8
 801f694:	08023d88 	.word	0x08023d88
 801f698:	2000019c 	.word	0x2000019c
 801f69c:	20003542 	.word	0x20003542
 801f6a0:	200001a6 	.word	0x200001a6
 801f6a4:	08023d8c 	.word	0x08023d8c
 801f6a8:	200001a5 	.word	0x200001a5
 801f6ac:	08023d40 	.word	0x08023d40
 801f6b0:	20003548 	.word	0x20003548
 801f6b4:	1b4e81b5 	.word	0x1b4e81b5
 801f6b8:	08023d9c 	.word	0x08023d9c
 801f6bc:	200000dc 	.word	0x200000dc
 801f6c0:	2000007c 	.word	0x2000007c
 801f6c4:	08023da0 	.word	0x08023da0

0801f6c8 <HTTP_Get_Content_Length>:



FlagStatus HTTP_Get_Content_Length(){
 801f6c8:	b580      	push	{r7, lr}
 801f6ca:	af00      	add	r7, sp, #0
	if(UART_SIM7600_Received_Buffer_Available()){
 801f6cc:	f7ff f9ec 	bl	801eaa8 <UART_SIM7600_Received_Buffer_Available>
 801f6d0:	4603      	mov	r3, r0
 801f6d2:	2b00      	cmp	r3, #0
 801f6d4:	d029      	beq.n	801f72a <HTTP_Get_Content_Length+0x62>
		temp = UART_SIM7600_Read_Received_Buffer();
 801f6d6:	f7ff f9fd 	bl	801ead4 <UART_SIM7600_Read_Received_Buffer>
 801f6da:	4603      	mov	r3, r0
 801f6dc:	461a      	mov	r2, r3
 801f6de:	4b14      	ldr	r3, [pc, #80]	; (801f730 <HTTP_Get_Content_Length+0x68>)
 801f6e0:	701a      	strb	r2, [r3, #0]
		if(temp == '\r'){
 801f6e2:	4b13      	ldr	r3, [pc, #76]	; (801f730 <HTTP_Get_Content_Length+0x68>)
 801f6e4:	781b      	ldrb	r3, [r3, #0]
 801f6e6:	2b0d      	cmp	r3, #13
 801f6e8:	d104      	bne.n	801f6f4 <HTTP_Get_Content_Length+0x2c>
			http_num_ignore = 0;
 801f6ea:	4b12      	ldr	r3, [pc, #72]	; (801f734 <HTTP_Get_Content_Length+0x6c>)
 801f6ec:	2200      	movs	r2, #0
 801f6ee:	701a      	strb	r2, [r3, #0]
			return SET;
 801f6f0:	2301      	movs	r3, #1
 801f6f2:	e01b      	b.n	801f72c <HTTP_Get_Content_Length+0x64>
		}
		if(http_num_ignore==2){
 801f6f4:	4b0f      	ldr	r3, [pc, #60]	; (801f734 <HTTP_Get_Content_Length+0x6c>)
 801f6f6:	781b      	ldrb	r3, [r3, #0]
 801f6f8:	2b02      	cmp	r3, #2
 801f6fa:	d10c      	bne.n	801f716 <HTTP_Get_Content_Length+0x4e>
			content_length = content_length*10 + (uint32_t)temp - (uint32_t)48;
 801f6fc:	4b0e      	ldr	r3, [pc, #56]	; (801f738 <HTTP_Get_Content_Length+0x70>)
 801f6fe:	681a      	ldr	r2, [r3, #0]
 801f700:	4613      	mov	r3, r2
 801f702:	009b      	lsls	r3, r3, #2
 801f704:	4413      	add	r3, r2
 801f706:	005b      	lsls	r3, r3, #1
 801f708:	461a      	mov	r2, r3
 801f70a:	4b09      	ldr	r3, [pc, #36]	; (801f730 <HTTP_Get_Content_Length+0x68>)
 801f70c:	781b      	ldrb	r3, [r3, #0]
 801f70e:	4413      	add	r3, r2
 801f710:	3b30      	subs	r3, #48	; 0x30
 801f712:	4a09      	ldr	r2, [pc, #36]	; (801f738 <HTTP_Get_Content_Length+0x70>)
 801f714:	6013      	str	r3, [r2, #0]
		}
		if(temp == ','){
 801f716:	4b06      	ldr	r3, [pc, #24]	; (801f730 <HTTP_Get_Content_Length+0x68>)
 801f718:	781b      	ldrb	r3, [r3, #0]
 801f71a:	2b2c      	cmp	r3, #44	; 0x2c
 801f71c:	d105      	bne.n	801f72a <HTTP_Get_Content_Length+0x62>
			http_num_ignore ++;
 801f71e:	4b05      	ldr	r3, [pc, #20]	; (801f734 <HTTP_Get_Content_Length+0x6c>)
 801f720:	781b      	ldrb	r3, [r3, #0]
 801f722:	3301      	adds	r3, #1
 801f724:	b2da      	uxtb	r2, r3
 801f726:	4b03      	ldr	r3, [pc, #12]	; (801f734 <HTTP_Get_Content_Length+0x6c>)
 801f728:	701a      	strb	r2, [r3, #0]
		}
	}
	return RESET;
 801f72a:	2300      	movs	r3, #0
}
 801f72c:	4618      	mov	r0, r3
 801f72e:	bd80      	pop	{r7, pc}
 801f730:	200012e0 	.word	0x200012e0
 801f734:	20000191 	.word	0x20000191
 801f738:	20000194 	.word	0x20000194

0801f73c <HTTP_Set_State>:

/**
 * HTTP_Set_State()
 * @brief This is function for setting state to HTTP State Machine
 */
void HTTP_Set_State(HTTP_State _http_state){
 801f73c:	b480      	push	{r7}
 801f73e:	b083      	sub	sp, #12
 801f740:	af00      	add	r7, sp, #0
 801f742:	4603      	mov	r3, r0
 801f744:	71fb      	strb	r3, [r7, #7]
	http_state = _http_state;
 801f746:	4a04      	ldr	r2, [pc, #16]	; (801f758 <HTTP_Set_State+0x1c>)
 801f748:	79fb      	ldrb	r3, [r7, #7]
 801f74a:	7013      	strb	r3, [r2, #0]
}
 801f74c:	bf00      	nop
 801f74e:	370c      	adds	r7, #12
 801f750:	46bd      	mov	sp, r7
 801f752:	bc80      	pop	{r7}
 801f754:	4770      	bx	lr
 801f756:	bf00      	nop
 801f758:	20000199 	.word	0x20000199

0801f75c <Clear_Http_Command>:
void Reset_HttpConfiguration_State(){
	Reset_No_Board();
	HTTP_Set_State(HTTP_INIT);
}

void Clear_Http_Command(){
 801f75c:	b480      	push	{r7}
 801f75e:	af00      	add	r7, sp, #0
	default_atcommand = SET;
 801f760:	4b03      	ldr	r3, [pc, #12]	; (801f770 <Clear_Http_Command+0x14>)
 801f762:	2201      	movs	r2, #1
 801f764:	701a      	strb	r2, [r3, #0]
}
 801f766:	bf00      	nop
 801f768:	46bd      	mov	sp, r7
 801f76a:	bc80      	pop	{r7}
 801f76c:	4770      	bx	lr
 801f76e:	bf00      	nop
 801f770:	2000007a 	.word	0x2000007a

0801f774 <HTTP_Return_Content_Length>:
void Set_Http_Command(char * atcommand){
	sprintf(http_at_command,"%s",atcommand);
	default_atcommand = RESET;
}

uint32_t HTTP_Return_Content_Length(){
 801f774:	b480      	push	{r7}
 801f776:	af00      	add	r7, sp, #0
	return content_length;
 801f778:	4b02      	ldr	r3, [pc, #8]	; (801f784 <HTTP_Return_Content_Length+0x10>)
 801f77a:	681b      	ldr	r3, [r3, #0]
}
 801f77c:	4618      	mov	r0, r3
 801f77e:	46bd      	mov	sp, r7
 801f780:	bc80      	pop	{r7}
 801f782:	4770      	bx	lr
 801f784:	20000194 	.word	0x20000194

0801f788 <isReceiveData>:
 * 			buffer_len = 6 => It just point to "I love"
 * 			data = "love"
 *
 * 			=> return SET ~ True
 */
FlagStatus isReceiveData(char *buffer , uint16_t buffer_len , const char * data){
 801f788:	b580      	push	{r7, lr}
 801f78a:	b086      	sub	sp, #24
 801f78c:	af00      	add	r7, sp, #0
 801f78e:	60f8      	str	r0, [r7, #12]
 801f790:	460b      	mov	r3, r1
 801f792:	607a      	str	r2, [r7, #4]
 801f794:	817b      	strh	r3, [r7, #10]
	uint8_t tmpLen = strlen((char*)data);
 801f796:	6878      	ldr	r0, [r7, #4]
 801f798:	f7fe fd44 	bl	801e224 <strlen>
 801f79c:	4603      	mov	r3, r0
 801f79e:	75bb      	strb	r3, [r7, #22]
	if(buffer_len < tmpLen ){
 801f7a0:	7dbb      	ldrb	r3, [r7, #22]
 801f7a2:	b29b      	uxth	r3, r3
 801f7a4:	897a      	ldrh	r2, [r7, #10]
 801f7a6:	429a      	cmp	r2, r3
 801f7a8:	d201      	bcs.n	801f7ae <isReceiveData+0x26>
		return RESET;
 801f7aa:	2300      	movs	r3, #0
 801f7ac:	e020      	b.n	801f7f0 <isReceiveData+0x68>
	}
	else{
		uint8_t tmpLen = strlen((char*)data);
 801f7ae:	6878      	ldr	r0, [r7, #4]
 801f7b0:	f7fe fd38 	bl	801e224 <strlen>
 801f7b4:	4603      	mov	r3, r0
 801f7b6:	757b      	strb	r3, [r7, #21]
		for (uint8_t index = 0; index < tmpLen; index++) {
 801f7b8:	2300      	movs	r3, #0
 801f7ba:	75fb      	strb	r3, [r7, #23]
 801f7bc:	e013      	b.n	801f7e6 <isReceiveData+0x5e>
			if(buffer[buffer_len -tmpLen + index] != data[index]){
 801f7be:	897a      	ldrh	r2, [r7, #10]
 801f7c0:	7d7b      	ldrb	r3, [r7, #21]
 801f7c2:	1ad2      	subs	r2, r2, r3
 801f7c4:	7dfb      	ldrb	r3, [r7, #23]
 801f7c6:	4413      	add	r3, r2
 801f7c8:	461a      	mov	r2, r3
 801f7ca:	68fb      	ldr	r3, [r7, #12]
 801f7cc:	4413      	add	r3, r2
 801f7ce:	781a      	ldrb	r2, [r3, #0]
 801f7d0:	7dfb      	ldrb	r3, [r7, #23]
 801f7d2:	6879      	ldr	r1, [r7, #4]
 801f7d4:	440b      	add	r3, r1
 801f7d6:	781b      	ldrb	r3, [r3, #0]
 801f7d8:	429a      	cmp	r2, r3
 801f7da:	d001      	beq.n	801f7e0 <isReceiveData+0x58>
				return RESET;
 801f7dc:	2300      	movs	r3, #0
 801f7de:	e007      	b.n	801f7f0 <isReceiveData+0x68>
		for (uint8_t index = 0; index < tmpLen; index++) {
 801f7e0:	7dfb      	ldrb	r3, [r7, #23]
 801f7e2:	3301      	adds	r3, #1
 801f7e4:	75fb      	strb	r3, [r7, #23]
 801f7e6:	7dfa      	ldrb	r2, [r7, #23]
 801f7e8:	7d7b      	ldrb	r3, [r7, #21]
 801f7ea:	429a      	cmp	r2, r3
 801f7ec:	d3e7      	bcc.n	801f7be <isReceiveData+0x36>
			}
		}
	}
	return SET;
 801f7ee:	2301      	movs	r3, #1
}
 801f7f0:	4618      	mov	r0, r3
 801f7f2:	3718      	adds	r7, #24
 801f7f4:	46bd      	mov	sp, r7
 801f7f6:	bd80      	pop	{r7, pc}

0801f7f8 <isReceiveData_New>:


FlagStatus isReceiveData_New(char *buffer , uint16_t buffer_len , uint16_t buffer_size , const char * data){
 801f7f8:	b580      	push	{r7, lr}
 801f7fa:	b086      	sub	sp, #24
 801f7fc:	af00      	add	r7, sp, #0
 801f7fe:	60f8      	str	r0, [r7, #12]
 801f800:	607b      	str	r3, [r7, #4]
 801f802:	460b      	mov	r3, r1
 801f804:	817b      	strh	r3, [r7, #10]
 801f806:	4613      	mov	r3, r2
 801f808:	813b      	strh	r3, [r7, #8]
	uint16_t tmpLen = strlen((char*)data);
 801f80a:	6878      	ldr	r0, [r7, #4]
 801f80c:	f7fe fd0a 	bl	801e224 <strlen>
 801f810:	4603      	mov	r3, r0
 801f812:	82bb      	strh	r3, [r7, #20]
	for (uint16_t index = 0; index < tmpLen; index++) {
 801f814:	2300      	movs	r3, #0
 801f816:	82fb      	strh	r3, [r7, #22]
 801f818:	e02d      	b.n	801f876 <isReceiveData_New+0x7e>
		if(buffer[buffer_len -tmpLen <0 ? (buffer_size + buffer_len - tmpLen + index)%buffer_size :(buffer_len - tmpLen + index)%buffer_size ] != data[index]){
 801f81a:	897a      	ldrh	r2, [r7, #10]
 801f81c:	8abb      	ldrh	r3, [r7, #20]
 801f81e:	1ad3      	subs	r3, r2, r3
 801f820:	2b00      	cmp	r3, #0
 801f822:	da0e      	bge.n	801f842 <isReceiveData_New+0x4a>
 801f824:	893a      	ldrh	r2, [r7, #8]
 801f826:	897b      	ldrh	r3, [r7, #10]
 801f828:	441a      	add	r2, r3
 801f82a:	8abb      	ldrh	r3, [r7, #20]
 801f82c:	1ad2      	subs	r2, r2, r3
 801f82e:	8afb      	ldrh	r3, [r7, #22]
 801f830:	4413      	add	r3, r2
 801f832:	893a      	ldrh	r2, [r7, #8]
 801f834:	fb93 f1f2 	sdiv	r1, r3, r2
 801f838:	fb02 f201 	mul.w	r2, r2, r1
 801f83c:	1a9b      	subs	r3, r3, r2
 801f83e:	461a      	mov	r2, r3
 801f840:	e00b      	b.n	801f85a <isReceiveData_New+0x62>
 801f842:	897a      	ldrh	r2, [r7, #10]
 801f844:	8abb      	ldrh	r3, [r7, #20]
 801f846:	1ad2      	subs	r2, r2, r3
 801f848:	8afb      	ldrh	r3, [r7, #22]
 801f84a:	4413      	add	r3, r2
 801f84c:	893a      	ldrh	r2, [r7, #8]
 801f84e:	fb93 f1f2 	sdiv	r1, r3, r2
 801f852:	fb02 f201 	mul.w	r2, r2, r1
 801f856:	1a9b      	subs	r3, r3, r2
 801f858:	461a      	mov	r2, r3
 801f85a:	68fb      	ldr	r3, [r7, #12]
 801f85c:	4413      	add	r3, r2
 801f85e:	781a      	ldrb	r2, [r3, #0]
 801f860:	8afb      	ldrh	r3, [r7, #22]
 801f862:	6879      	ldr	r1, [r7, #4]
 801f864:	440b      	add	r3, r1
 801f866:	781b      	ldrb	r3, [r3, #0]
 801f868:	429a      	cmp	r2, r3
 801f86a:	d001      	beq.n	801f870 <isReceiveData_New+0x78>
			return RESET;
 801f86c:	2300      	movs	r3, #0
 801f86e:	e007      	b.n	801f880 <isReceiveData_New+0x88>
	for (uint16_t index = 0; index < tmpLen; index++) {
 801f870:	8afb      	ldrh	r3, [r7, #22]
 801f872:	3301      	adds	r3, #1
 801f874:	82fb      	strh	r3, [r7, #22]
 801f876:	8afa      	ldrh	r2, [r7, #22]
 801f878:	8abb      	ldrh	r3, [r7, #20]
 801f87a:	429a      	cmp	r2, r3
 801f87c:	d3cd      	bcc.n	801f81a <isReceiveData_New+0x22>
		}
	}
	return SET;
 801f87e:	2301      	movs	r3, #1
}
 801f880:	4618      	mov	r0, r3
 801f882:	3718      	adds	r7, #24
 801f884:	46bd      	mov	sp, r7
 801f886:	bd80      	pop	{r7, pc}

0801f888 <Char2Hex>:
	}
	return result;
}


uint8_t Char2Hex(char character){
 801f888:	b480      	push	{r7}
 801f88a:	b085      	sub	sp, #20
 801f88c:	af00      	add	r7, sp, #0
 801f88e:	4603      	mov	r3, r0
 801f890:	71fb      	strb	r3, [r7, #7]
	uint8_t result;
	if( character >='0' && character <= '9'){
 801f892:	79fb      	ldrb	r3, [r7, #7]
 801f894:	2b2f      	cmp	r3, #47	; 0x2f
 801f896:	d906      	bls.n	801f8a6 <Char2Hex+0x1e>
 801f898:	79fb      	ldrb	r3, [r7, #7]
 801f89a:	2b39      	cmp	r3, #57	; 0x39
 801f89c:	d803      	bhi.n	801f8a6 <Char2Hex+0x1e>
		result = character - (uint8_t)('0') ;
 801f89e:	79fb      	ldrb	r3, [r7, #7]
 801f8a0:	3b30      	subs	r3, #48	; 0x30
 801f8a2:	73fb      	strb	r3, [r7, #15]
 801f8a4:	e008      	b.n	801f8b8 <Char2Hex+0x30>
	}
	else if(character >='A' && character <= 'F'){
 801f8a6:	79fb      	ldrb	r3, [r7, #7]
 801f8a8:	2b40      	cmp	r3, #64	; 0x40
 801f8aa:	d905      	bls.n	801f8b8 <Char2Hex+0x30>
 801f8ac:	79fb      	ldrb	r3, [r7, #7]
 801f8ae:	2b46      	cmp	r3, #70	; 0x46
 801f8b0:	d802      	bhi.n	801f8b8 <Char2Hex+0x30>
		result = character - (uint8_t)('A') + 10;
 801f8b2:	79fb      	ldrb	r3, [r7, #7]
 801f8b4:	3b37      	subs	r3, #55	; 0x37
 801f8b6:	73fb      	strb	r3, [r7, #15]
	}
	return result;
 801f8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 801f8ba:	4618      	mov	r0, r3
 801f8bc:	3714      	adds	r7, #20
 801f8be:	46bd      	mov	sp, r7
 801f8c0:	bc80      	pop	{r7}
 801f8c2:	4770      	bx	lr

0801f8c4 <AT_Processing>:
  * If Available It will Read 1 byte and add to temp buffer.
  * Then Temp buffer will be compared to pattern being passed in isReceiveData function.
  * @param None
  * @retval None
  */
void AT_Processing(){
 801f8c4:	b580      	push	{r7, lr}
 801f8c6:	af00      	add	r7, sp, #0
	if(at_result != AT_NONE){
 801f8c8:	4b73      	ldr	r3, [pc, #460]	; (801fa98 <AT_Processing+0x1d4>)
 801f8ca:	781b      	ldrb	r3, [r3, #0]
 801f8cc:	2b0a      	cmp	r3, #10
 801f8ce:	f040 80de 	bne.w	801fa8e <AT_Processing+0x1ca>
		return;
	}
	else if(UART_SIM7600_Received_Buffer_Available()){
 801f8d2:	f7ff f8e9 	bl	801eaa8 <UART_SIM7600_Received_Buffer_Available>
 801f8d6:	4603      	mov	r3, r0
 801f8d8:	2b00      	cmp	r3, #0
 801f8da:	f000 80da 	beq.w	801fa92 <AT_Processing+0x1ce>
		data_respone[data_respone_index]=UART_SIM7600_Read_Received_Buffer();
 801f8de:	f7ff f8f9 	bl	801ead4 <UART_SIM7600_Read_Received_Buffer>
 801f8e2:	4601      	mov	r1, r0
 801f8e4:	4b6d      	ldr	r3, [pc, #436]	; (801fa9c <AT_Processing+0x1d8>)
 801f8e6:	781b      	ldrb	r3, [r3, #0]
 801f8e8:	461a      	mov	r2, r3
 801f8ea:	b2c9      	uxtb	r1, r1
 801f8ec:	4b6c      	ldr	r3, [pc, #432]	; (801faa0 <AT_Processing+0x1dc>)
 801f8ee:	5499      	strb	r1, [r3, r2]
//		UART_DEBUG_Transmit_Size(data_respone + data_respone_index, 1);
//		LOG("1");
		data_respone_index++;
 801f8f0:	4b6a      	ldr	r3, [pc, #424]	; (801fa9c <AT_Processing+0x1d8>)
 801f8f2:	781b      	ldrb	r3, [r3, #0]
 801f8f4:	3301      	adds	r3, #1
 801f8f6:	b2da      	uxtb	r2, r3
 801f8f8:	4b68      	ldr	r3, [pc, #416]	; (801fa9c <AT_Processing+0x1d8>)
 801f8fa:	701a      	strb	r2, [r3, #0]

		if(isReceiveData((char*)data_respone, (uint16_t)data_respone_index, OK)){
 801f8fc:	4b67      	ldr	r3, [pc, #412]	; (801fa9c <AT_Processing+0x1d8>)
 801f8fe:	781b      	ldrb	r3, [r3, #0]
 801f900:	b29b      	uxth	r3, r3
 801f902:	4a68      	ldr	r2, [pc, #416]	; (801faa4 <AT_Processing+0x1e0>)
 801f904:	6812      	ldr	r2, [r2, #0]
 801f906:	4619      	mov	r1, r3
 801f908:	4865      	ldr	r0, [pc, #404]	; (801faa0 <AT_Processing+0x1dc>)
 801f90a:	f7ff ff3d 	bl	801f788 <isReceiveData>
 801f90e:	4603      	mov	r3, r0
 801f910:	2b00      	cmp	r3, #0
 801f912:	d00d      	beq.n	801f930 <AT_Processing+0x6c>
			LOG("\r\nOK\r\n");
 801f914:	4864      	ldr	r0, [pc, #400]	; (801faa8 <AT_Processing+0x1e4>)
 801f916:	f7ff f935 	bl	801eb84 <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 801f91a:	4b60      	ldr	r3, [pc, #384]	; (801fa9c <AT_Processing+0x1d8>)
 801f91c:	781a      	ldrb	r2, [r3, #0]
 801f91e:	4b63      	ldr	r3, [pc, #396]	; (801faac <AT_Processing+0x1e8>)
 801f920:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 801f922:	4b5e      	ldr	r3, [pc, #376]	; (801fa9c <AT_Processing+0x1d8>)
 801f924:	2200      	movs	r2, #0
 801f926:	701a      	strb	r2, [r3, #0]
			at_result = AT_OK;
 801f928:	4b5b      	ldr	r3, [pc, #364]	; (801fa98 <AT_Processing+0x1d4>)
 801f92a:	2200      	movs	r2, #0
 801f92c:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
			at_result = AT_FIRMWARE_CHECKSUM;
		}
	}
//	UART_DEBUG_Transmit_Size(aUART_RxBuffer, RXBUFFERSIZE);
	return;
 801f92e:	e0b0      	b.n	801fa92 <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)ERROR_1/*ERROR_1*/)){
 801f930:	4b5a      	ldr	r3, [pc, #360]	; (801fa9c <AT_Processing+0x1d8>)
 801f932:	781b      	ldrb	r3, [r3, #0]
 801f934:	b29b      	uxth	r3, r3
 801f936:	4a5e      	ldr	r2, [pc, #376]	; (801fab0 <AT_Processing+0x1ec>)
 801f938:	4619      	mov	r1, r3
 801f93a:	4859      	ldr	r0, [pc, #356]	; (801faa0 <AT_Processing+0x1dc>)
 801f93c:	f7ff ff24 	bl	801f788 <isReceiveData>
 801f940:	4603      	mov	r3, r0
 801f942:	2b00      	cmp	r3, #0
 801f944:	d00d      	beq.n	801f962 <AT_Processing+0x9e>
			LOG("\r\nERROR\r\n");
 801f946:	485b      	ldr	r0, [pc, #364]	; (801fab4 <AT_Processing+0x1f0>)
 801f948:	f7ff f91c 	bl	801eb84 <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 801f94c:	4b53      	ldr	r3, [pc, #332]	; (801fa9c <AT_Processing+0x1d8>)
 801f94e:	781a      	ldrb	r2, [r3, #0]
 801f950:	4b56      	ldr	r3, [pc, #344]	; (801faac <AT_Processing+0x1e8>)
 801f952:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 801f954:	4b51      	ldr	r3, [pc, #324]	; (801fa9c <AT_Processing+0x1d8>)
 801f956:	2200      	movs	r2, #0
 801f958:	701a      	strb	r2, [r3, #0]
			at_result = AT_ERROR;
 801f95a:	4b4f      	ldr	r3, [pc, #316]	; (801fa98 <AT_Processing+0x1d4>)
 801f95c:	2201      	movs	r2, #1
 801f95e:	701a      	strb	r2, [r3, #0]
	return;
 801f960:	e097      	b.n	801fa92 <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)PB_DONE /*PB_DONE*/)){
 801f962:	4b4e      	ldr	r3, [pc, #312]	; (801fa9c <AT_Processing+0x1d8>)
 801f964:	781b      	ldrb	r3, [r3, #0]
 801f966:	b29b      	uxth	r3, r3
 801f968:	4a53      	ldr	r2, [pc, #332]	; (801fab8 <AT_Processing+0x1f4>)
 801f96a:	4619      	mov	r1, r3
 801f96c:	484c      	ldr	r0, [pc, #304]	; (801faa0 <AT_Processing+0x1dc>)
 801f96e:	f7ff ff0b 	bl	801f788 <isReceiveData>
 801f972:	4603      	mov	r3, r0
 801f974:	2b00      	cmp	r3, #0
 801f976:	d00d      	beq.n	801f994 <AT_Processing+0xd0>
			LOG("\r\nPB DONE\r\n");
 801f978:	4850      	ldr	r0, [pc, #320]	; (801fabc <AT_Processing+0x1f8>)
 801f97a:	f7ff f903 	bl	801eb84 <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 801f97e:	4b47      	ldr	r3, [pc, #284]	; (801fa9c <AT_Processing+0x1d8>)
 801f980:	781a      	ldrb	r2, [r3, #0]
 801f982:	4b4a      	ldr	r3, [pc, #296]	; (801faac <AT_Processing+0x1e8>)
 801f984:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 801f986:	4b45      	ldr	r3, [pc, #276]	; (801fa9c <AT_Processing+0x1d8>)
 801f988:	2200      	movs	r2, #0
 801f98a:	701a      	strb	r2, [r3, #0]
			at_result = AT_PB_DONE;
 801f98c:	4b42      	ldr	r3, [pc, #264]	; (801fa98 <AT_Processing+0x1d4>)
 801f98e:	2203      	movs	r2, #3
 801f990:	701a      	strb	r2, [r3, #0]
	return;
 801f992:	e07e      	b.n	801fa92 <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)IMEI_CHECK)){
 801f994:	4b41      	ldr	r3, [pc, #260]	; (801fa9c <AT_Processing+0x1d8>)
 801f996:	781b      	ldrb	r3, [r3, #0]
 801f998:	b29b      	uxth	r3, r3
 801f99a:	4a49      	ldr	r2, [pc, #292]	; (801fac0 <AT_Processing+0x1fc>)
 801f99c:	4619      	mov	r1, r3
 801f99e:	4840      	ldr	r0, [pc, #256]	; (801faa0 <AT_Processing+0x1dc>)
 801f9a0:	f7ff fef2 	bl	801f788 <isReceiveData>
 801f9a4:	4603      	mov	r3, r0
 801f9a6:	2b00      	cmp	r3, #0
 801f9a8:	d00d      	beq.n	801f9c6 <AT_Processing+0x102>
			LOG("\r\nRECEIVE IMEI\r\n");
 801f9aa:	4846      	ldr	r0, [pc, #280]	; (801fac4 <AT_Processing+0x200>)
 801f9ac:	f7ff f8ea 	bl	801eb84 <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 801f9b0:	4b3a      	ldr	r3, [pc, #232]	; (801fa9c <AT_Processing+0x1d8>)
 801f9b2:	781a      	ldrb	r2, [r3, #0]
 801f9b4:	4b3d      	ldr	r3, [pc, #244]	; (801faac <AT_Processing+0x1e8>)
 801f9b6:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 801f9b8:	4b38      	ldr	r3, [pc, #224]	; (801fa9c <AT_Processing+0x1d8>)
 801f9ba:	2200      	movs	r2, #0
 801f9bc:	701a      	strb	r2, [r3, #0]
			at_result = AT_IMEI;
 801f9be:	4b36      	ldr	r3, [pc, #216]	; (801fa98 <AT_Processing+0x1d4>)
 801f9c0:	2206      	movs	r2, #6
 801f9c2:	701a      	strb	r2, [r3, #0]
	return;
 801f9c4:	e065      	b.n	801fa92 <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)RECEIVE_RESPONSE)){
 801f9c6:	4b35      	ldr	r3, [pc, #212]	; (801fa9c <AT_Processing+0x1d8>)
 801f9c8:	781b      	ldrb	r3, [r3, #0]
 801f9ca:	b29b      	uxth	r3, r3
 801f9cc:	4a3e      	ldr	r2, [pc, #248]	; (801fac8 <AT_Processing+0x204>)
 801f9ce:	4619      	mov	r1, r3
 801f9d0:	4833      	ldr	r0, [pc, #204]	; (801faa0 <AT_Processing+0x1dc>)
 801f9d2:	f7ff fed9 	bl	801f788 <isReceiveData>
 801f9d6:	4603      	mov	r3, r0
 801f9d8:	2b00      	cmp	r3, #0
 801f9da:	d00d      	beq.n	801f9f8 <AT_Processing+0x134>
			LOG("\r\nRECEIVE HTTP RESPONSE\r\n");
 801f9dc:	483b      	ldr	r0, [pc, #236]	; (801facc <AT_Processing+0x208>)
 801f9de:	f7ff f8d1 	bl	801eb84 <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 801f9e2:	4b2e      	ldr	r3, [pc, #184]	; (801fa9c <AT_Processing+0x1d8>)
 801f9e4:	781a      	ldrb	r2, [r3, #0]
 801f9e6:	4b31      	ldr	r3, [pc, #196]	; (801faac <AT_Processing+0x1e8>)
 801f9e8:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 801f9ea:	4b2c      	ldr	r3, [pc, #176]	; (801fa9c <AT_Processing+0x1d8>)
 801f9ec:	2200      	movs	r2, #0
 801f9ee:	701a      	strb	r2, [r3, #0]
			at_result = AT_HTTP_RESPONSE;
 801f9f0:	4b29      	ldr	r3, [pc, #164]	; (801fa98 <AT_Processing+0x1d4>)
 801f9f2:	2205      	movs	r2, #5
 801f9f4:	701a      	strb	r2, [r3, #0]
	return;
 801f9f6:	e04c      	b.n	801fa92 <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)FIRMWARE_VERSION)){
 801f9f8:	4b28      	ldr	r3, [pc, #160]	; (801fa9c <AT_Processing+0x1d8>)
 801f9fa:	781b      	ldrb	r3, [r3, #0]
 801f9fc:	b29b      	uxth	r3, r3
 801f9fe:	4a34      	ldr	r2, [pc, #208]	; (801fad0 <AT_Processing+0x20c>)
 801fa00:	4619      	mov	r1, r3
 801fa02:	4827      	ldr	r0, [pc, #156]	; (801faa0 <AT_Processing+0x1dc>)
 801fa04:	f7ff fec0 	bl	801f788 <isReceiveData>
 801fa08:	4603      	mov	r3, r0
 801fa0a:	2b00      	cmp	r3, #0
 801fa0c:	d00d      	beq.n	801fa2a <AT_Processing+0x166>
			LOG("\r\nRECEIVE VERSION RESPONSE\r\n");
 801fa0e:	4831      	ldr	r0, [pc, #196]	; (801fad4 <AT_Processing+0x210>)
 801fa10:	f7ff f8b8 	bl	801eb84 <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 801fa14:	4b21      	ldr	r3, [pc, #132]	; (801fa9c <AT_Processing+0x1d8>)
 801fa16:	781a      	ldrb	r2, [r3, #0]
 801fa18:	4b24      	ldr	r3, [pc, #144]	; (801faac <AT_Processing+0x1e8>)
 801fa1a:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 801fa1c:	4b1f      	ldr	r3, [pc, #124]	; (801fa9c <AT_Processing+0x1d8>)
 801fa1e:	2200      	movs	r2, #0
 801fa20:	701a      	strb	r2, [r3, #0]
			at_result = AT_FIRMWARE_VERSION;
 801fa22:	4b1d      	ldr	r3, [pc, #116]	; (801fa98 <AT_Processing+0x1d4>)
 801fa24:	2207      	movs	r2, #7
 801fa26:	701a      	strb	r2, [r3, #0]
	return;
 801fa28:	e033      	b.n	801fa92 <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)FIRMWARE_DATA)){
 801fa2a:	4b1c      	ldr	r3, [pc, #112]	; (801fa9c <AT_Processing+0x1d8>)
 801fa2c:	781b      	ldrb	r3, [r3, #0]
 801fa2e:	b29b      	uxth	r3, r3
 801fa30:	4a29      	ldr	r2, [pc, #164]	; (801fad8 <AT_Processing+0x214>)
 801fa32:	4619      	mov	r1, r3
 801fa34:	481a      	ldr	r0, [pc, #104]	; (801faa0 <AT_Processing+0x1dc>)
 801fa36:	f7ff fea7 	bl	801f788 <isReceiveData>
 801fa3a:	4603      	mov	r3, r0
 801fa3c:	2b00      	cmp	r3, #0
 801fa3e:	d00d      	beq.n	801fa5c <AT_Processing+0x198>
			LOG("\r\nRECEIVE FIRMWARE DATA\r\n");
 801fa40:	4826      	ldr	r0, [pc, #152]	; (801fadc <AT_Processing+0x218>)
 801fa42:	f7ff f89f 	bl	801eb84 <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 801fa46:	4b15      	ldr	r3, [pc, #84]	; (801fa9c <AT_Processing+0x1d8>)
 801fa48:	781a      	ldrb	r2, [r3, #0]
 801fa4a:	4b18      	ldr	r3, [pc, #96]	; (801faac <AT_Processing+0x1e8>)
 801fa4c:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 801fa4e:	4b13      	ldr	r3, [pc, #76]	; (801fa9c <AT_Processing+0x1d8>)
 801fa50:	2200      	movs	r2, #0
 801fa52:	701a      	strb	r2, [r3, #0]
			at_result = AT_FIRMWARE_DATA;
 801fa54:	4b10      	ldr	r3, [pc, #64]	; (801fa98 <AT_Processing+0x1d4>)
 801fa56:	2208      	movs	r2, #8
 801fa58:	701a      	strb	r2, [r3, #0]
	return;
 801fa5a:	e01a      	b.n	801fa92 <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)FIRMWARE_CHECKSUM)){
 801fa5c:	4b0f      	ldr	r3, [pc, #60]	; (801fa9c <AT_Processing+0x1d8>)
 801fa5e:	781b      	ldrb	r3, [r3, #0]
 801fa60:	b29b      	uxth	r3, r3
 801fa62:	4a1f      	ldr	r2, [pc, #124]	; (801fae0 <AT_Processing+0x21c>)
 801fa64:	4619      	mov	r1, r3
 801fa66:	480e      	ldr	r0, [pc, #56]	; (801faa0 <AT_Processing+0x1dc>)
 801fa68:	f7ff fe8e 	bl	801f788 <isReceiveData>
 801fa6c:	4603      	mov	r3, r0
 801fa6e:	2b00      	cmp	r3, #0
 801fa70:	d00f      	beq.n	801fa92 <AT_Processing+0x1ce>
			LOG("\r\nRECEIVE FIRMWARE CHECKSUM\r\n");
 801fa72:	481c      	ldr	r0, [pc, #112]	; (801fae4 <AT_Processing+0x220>)
 801fa74:	f7ff f886 	bl	801eb84 <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 801fa78:	4b08      	ldr	r3, [pc, #32]	; (801fa9c <AT_Processing+0x1d8>)
 801fa7a:	781a      	ldrb	r2, [r3, #0]
 801fa7c:	4b0b      	ldr	r3, [pc, #44]	; (801faac <AT_Processing+0x1e8>)
 801fa7e:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 801fa80:	4b06      	ldr	r3, [pc, #24]	; (801fa9c <AT_Processing+0x1d8>)
 801fa82:	2200      	movs	r2, #0
 801fa84:	701a      	strb	r2, [r3, #0]
			at_result = AT_FIRMWARE_CHECKSUM;
 801fa86:	4b04      	ldr	r3, [pc, #16]	; (801fa98 <AT_Processing+0x1d4>)
 801fa88:	2209      	movs	r2, #9
 801fa8a:	701a      	strb	r2, [r3, #0]
	return;
 801fa8c:	e001      	b.n	801fa92 <AT_Processing+0x1ce>
		return;
 801fa8e:	bf00      	nop
 801fa90:	e000      	b.n	801fa94 <AT_Processing+0x1d0>
	return;
 801fa92:	bf00      	nop
}
 801fa94:	bd80      	pop	{r7, pc}
 801fa96:	bf00      	nop
 801fa98:	200000dd 	.word	0x200000dd
 801fa9c:	200011ad 	.word	0x200011ad
 801faa0:	200001ac 	.word	0x200001ac
 801faa4:	200000e0 	.word	0x200000e0
 801faa8:	08023dbc 	.word	0x08023dbc
 801faac:	200011ac 	.word	0x200011ac
 801fab0:	08023f38 	.word	0x08023f38
 801fab4:	08023dc4 	.word	0x08023dc4
 801fab8:	08023f30 	.word	0x08023f30
 801fabc:	08023dd0 	.word	0x08023dd0
 801fac0:	08023f40 	.word	0x08023f40
 801fac4:	08023ddc 	.word	0x08023ddc
 801fac8:	08023f4c 	.word	0x08023f4c
 801facc:	08023df0 	.word	0x08023df0
 801fad0:	08023f5c 	.word	0x08023f5c
 801fad4:	08023e0c 	.word	0x08023e0c
 801fad8:	08023f74 	.word	0x08023f74
 801fadc:	08023e2c 	.word	0x08023e2c
 801fae0:	08023f68 	.word	0x08023f68
 801fae4:	08023e48 	.word	0x08023e48

0801fae8 <Get_AT_Result>:
/**
  * @brief Get_AT_Result Initialization Function
  * @param None
  * @retval at_result
  */
AT_Result Get_AT_Result(){
 801fae8:	b480      	push	{r7}
 801faea:	af00      	add	r7, sp, #0
	return at_result;
 801faec:	4b02      	ldr	r3, [pc, #8]	; (801faf8 <Get_AT_Result+0x10>)
 801faee:	781b      	ldrb	r3, [r3, #0]
}
 801faf0:	4618      	mov	r0, r3
 801faf2:	46bd      	mov	sp, r7
 801faf4:	bc80      	pop	{r7}
 801faf6:	4770      	bx	lr
 801faf8:	200000dd 	.word	0x200000dd

0801fafc <Clear_AT_Result>:
/**
  * @brief Clear_AT_Result Initialization Function
  * @param None
  * @retval None
  */
void Clear_AT_Result(){
 801fafc:	b480      	push	{r7}
 801fafe:	af00      	add	r7, sp, #0
	at_result = AT_NONE;
 801fb00:	4b03      	ldr	r3, [pc, #12]	; (801fb10 <Clear_AT_Result+0x14>)
 801fb02:	220a      	movs	r2, #10
 801fb04:	701a      	strb	r2, [r3, #0]
}
 801fb06:	bf00      	nop
 801fb08:	46bd      	mov	sp, r7
 801fb0a:	bc80      	pop	{r7}
 801fb0c:	4770      	bx	lr
 801fb0e:	bf00      	nop
 801fb10:	200000dd 	.word	0x200000dd

0801fb14 <Get_New_Task_ID>:

uint32_t count_SCH_Update = 0;
uint8_t testFlag = 0;
uint8_t strScheduler[] = "                                                                    ";

uint32_t Get_New_Task_ID(void){
 801fb14:	b480      	push	{r7}
 801fb16:	af00      	add	r7, sp, #0
	newTaskID++;
 801fb18:	4b09      	ldr	r3, [pc, #36]	; (801fb40 <Get_New_Task_ID+0x2c>)
 801fb1a:	681b      	ldr	r3, [r3, #0]
 801fb1c:	3301      	adds	r3, #1
 801fb1e:	4a08      	ldr	r2, [pc, #32]	; (801fb40 <Get_New_Task_ID+0x2c>)
 801fb20:	6013      	str	r3, [r2, #0]
	if(newTaskID == NO_TASK_ID){
 801fb22:	4b07      	ldr	r3, [pc, #28]	; (801fb40 <Get_New_Task_ID+0x2c>)
 801fb24:	681b      	ldr	r3, [r3, #0]
 801fb26:	2b00      	cmp	r3, #0
 801fb28:	d104      	bne.n	801fb34 <Get_New_Task_ID+0x20>
		newTaskID++;
 801fb2a:	4b05      	ldr	r3, [pc, #20]	; (801fb40 <Get_New_Task_ID+0x2c>)
 801fb2c:	681b      	ldr	r3, [r3, #0]
 801fb2e:	3301      	adds	r3, #1
 801fb30:	4a03      	ldr	r2, [pc, #12]	; (801fb40 <Get_New_Task_ID+0x2c>)
 801fb32:	6013      	str	r3, [r2, #0]
	}
	return newTaskID;
 801fb34:	4b02      	ldr	r3, [pc, #8]	; (801fb40 <Get_New_Task_ID+0x2c>)
 801fb36:	681b      	ldr	r3, [r3, #0]
}
 801fb38:	4618      	mov	r0, r3
 801fb3a:	46bd      	mov	sp, r7
 801fb3c:	bc80      	pop	{r7}
 801fb3e:	4770      	bx	lr
 801fb40:	200011b0 	.word	0x200011b0

0801fb44 <SCH_Update>:


void SCH_Update(void){
 801fb44:	b480      	push	{r7}
 801fb46:	af00      	add	r7, sp, #0
	// Check if there is a task at this location
	count_SCH_Update ++;
 801fb48:	4b10      	ldr	r3, [pc, #64]	; (801fb8c <SCH_Update+0x48>)
 801fb4a:	681b      	ldr	r3, [r3, #0]
 801fb4c:	3301      	adds	r3, #1
 801fb4e:	4a0f      	ldr	r2, [pc, #60]	; (801fb8c <SCH_Update+0x48>)
 801fb50:	6013      	str	r3, [r2, #0]
	if (SCH_tasks_G[0].pTask && SCH_tasks_G[0].RunMe == 0) {
 801fb52:	4b0f      	ldr	r3, [pc, #60]	; (801fb90 <SCH_Update+0x4c>)
 801fb54:	681b      	ldr	r3, [r3, #0]
 801fb56:	2b00      	cmp	r3, #0
 801fb58:	d013      	beq.n	801fb82 <SCH_Update+0x3e>
 801fb5a:	4b0d      	ldr	r3, [pc, #52]	; (801fb90 <SCH_Update+0x4c>)
 801fb5c:	7b1b      	ldrb	r3, [r3, #12]
 801fb5e:	2b00      	cmp	r3, #0
 801fb60:	d10f      	bne.n	801fb82 <SCH_Update+0x3e>
		if(SCH_tasks_G[0].Delay > 0){
 801fb62:	4b0b      	ldr	r3, [pc, #44]	; (801fb90 <SCH_Update+0x4c>)
 801fb64:	685b      	ldr	r3, [r3, #4]
 801fb66:	2b00      	cmp	r3, #0
 801fb68:	d004      	beq.n	801fb74 <SCH_Update+0x30>
			SCH_tasks_G[0].Delay = SCH_tasks_G[0].Delay - 1;
 801fb6a:	4b09      	ldr	r3, [pc, #36]	; (801fb90 <SCH_Update+0x4c>)
 801fb6c:	685b      	ldr	r3, [r3, #4]
 801fb6e:	3b01      	subs	r3, #1
 801fb70:	4a07      	ldr	r2, [pc, #28]	; (801fb90 <SCH_Update+0x4c>)
 801fb72:	6053      	str	r3, [r2, #4]
		}
		if (SCH_tasks_G[0].Delay == 0) {
 801fb74:	4b06      	ldr	r3, [pc, #24]	; (801fb90 <SCH_Update+0x4c>)
 801fb76:	685b      	ldr	r3, [r3, #4]
 801fb78:	2b00      	cmp	r3, #0
 801fb7a:	d102      	bne.n	801fb82 <SCH_Update+0x3e>
			SCH_tasks_G[0].RunMe = 1;
 801fb7c:	4b04      	ldr	r3, [pc, #16]	; (801fb90 <SCH_Update+0x4c>)
 801fb7e:	2201      	movs	r2, #1
 801fb80:	731a      	strb	r2, [r3, #12]
		}
	}
}
 801fb82:	bf00      	nop
 801fb84:	46bd      	mov	sp, r7
 801fb86:	bc80      	pop	{r7}
 801fb88:	4770      	bx	lr
 801fb8a:	bf00      	nop
 801fb8c:	200011b4 	.word	0x200011b4
 801fb90:	20003f34 	.word	0x20003f34

0801fb94 <SCH_Add_Task>:
uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 801fb94:	b590      	push	{r4, r7, lr}
 801fb96:	b089      	sub	sp, #36	; 0x24
 801fb98:	af00      	add	r7, sp, #0
 801fb9a:	60f8      	str	r0, [r7, #12]
 801fb9c:	60b9      	str	r1, [r7, #8]
 801fb9e:	607a      	str	r2, [r7, #4]
	uint8_t newTaskIndex = 0;
 801fba0:	2300      	movs	r3, #0
 801fba2:	77fb      	strb	r3, [r7, #31]
	uint32_t sumDelay = 0;
 801fba4:	2300      	movs	r3, #0
 801fba6:	61bb      	str	r3, [r7, #24]
	uint32_t newDelay = 0;
 801fba8:	2300      	movs	r3, #0
 801fbaa:	613b      	str	r3, [r7, #16]

	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 801fbac:	2300      	movs	r3, #0
 801fbae:	77fb      	strb	r3, [r7, #31]
 801fbb0:	e133      	b.n	801fe1a <SCH_Add_Task+0x286>
		sumDelay = sumDelay + SCH_tasks_G[newTaskIndex].Delay;
 801fbb2:	7ffa      	ldrb	r2, [r7, #31]
 801fbb4:	49a1      	ldr	r1, [pc, #644]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fbb6:	4613      	mov	r3, r2
 801fbb8:	009b      	lsls	r3, r3, #2
 801fbba:	4413      	add	r3, r2
 801fbbc:	009b      	lsls	r3, r3, #2
 801fbbe:	440b      	add	r3, r1
 801fbc0:	3304      	adds	r3, #4
 801fbc2:	681b      	ldr	r3, [r3, #0]
 801fbc4:	69ba      	ldr	r2, [r7, #24]
 801fbc6:	4413      	add	r3, r2
 801fbc8:	61bb      	str	r3, [r7, #24]
		if(sumDelay > DELAY){
 801fbca:	69ba      	ldr	r2, [r7, #24]
 801fbcc:	68bb      	ldr	r3, [r7, #8]
 801fbce:	429a      	cmp	r2, r3
 801fbd0:	f240 80c1 	bls.w	801fd56 <SCH_Add_Task+0x1c2>
			newDelay = DELAY - (sumDelay - SCH_tasks_G[newTaskIndex].Delay);
 801fbd4:	7ffa      	ldrb	r2, [r7, #31]
 801fbd6:	4999      	ldr	r1, [pc, #612]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fbd8:	4613      	mov	r3, r2
 801fbda:	009b      	lsls	r3, r3, #2
 801fbdc:	4413      	add	r3, r2
 801fbde:	009b      	lsls	r3, r3, #2
 801fbe0:	440b      	add	r3, r1
 801fbe2:	3304      	adds	r3, #4
 801fbe4:	681a      	ldr	r2, [r3, #0]
 801fbe6:	69bb      	ldr	r3, [r7, #24]
 801fbe8:	1ad3      	subs	r3, r2, r3
 801fbea:	68ba      	ldr	r2, [r7, #8]
 801fbec:	4413      	add	r3, r2
 801fbee:	613b      	str	r3, [r7, #16]
			SCH_tasks_G[newTaskIndex].Delay = sumDelay - DELAY;
 801fbf0:	7ffa      	ldrb	r2, [r7, #31]
 801fbf2:	69b9      	ldr	r1, [r7, #24]
 801fbf4:	68bb      	ldr	r3, [r7, #8]
 801fbf6:	1ac9      	subs	r1, r1, r3
 801fbf8:	4890      	ldr	r0, [pc, #576]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fbfa:	4613      	mov	r3, r2
 801fbfc:	009b      	lsls	r3, r3, #2
 801fbfe:	4413      	add	r3, r2
 801fc00:	009b      	lsls	r3, r3, #2
 801fc02:	4403      	add	r3, r0
 801fc04:	3304      	adds	r3, #4
 801fc06:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 801fc08:	2327      	movs	r3, #39	; 0x27
 801fc0a:	75fb      	strb	r3, [r7, #23]
 801fc0c:	e04c      	b.n	801fca8 <SCH_Add_Task+0x114>
//				if(SCH_tasks_G[i - 1].pTask != 0)
				{
					SCH_tasks_G[i].pTask = SCH_tasks_G[i - 1].pTask;
 801fc0e:	7dfb      	ldrb	r3, [r7, #23]
 801fc10:	1e59      	subs	r1, r3, #1
 801fc12:	7dfa      	ldrb	r2, [r7, #23]
 801fc14:	4889      	ldr	r0, [pc, #548]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fc16:	460b      	mov	r3, r1
 801fc18:	009b      	lsls	r3, r3, #2
 801fc1a:	440b      	add	r3, r1
 801fc1c:	009b      	lsls	r3, r3, #2
 801fc1e:	4403      	add	r3, r0
 801fc20:	6819      	ldr	r1, [r3, #0]
 801fc22:	4886      	ldr	r0, [pc, #536]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fc24:	4613      	mov	r3, r2
 801fc26:	009b      	lsls	r3, r3, #2
 801fc28:	4413      	add	r3, r2
 801fc2a:	009b      	lsls	r3, r3, #2
 801fc2c:	4403      	add	r3, r0
 801fc2e:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].Period = SCH_tasks_G[i - 1].Period;
 801fc30:	7dfb      	ldrb	r3, [r7, #23]
 801fc32:	1e59      	subs	r1, r3, #1
 801fc34:	7dfa      	ldrb	r2, [r7, #23]
 801fc36:	4881      	ldr	r0, [pc, #516]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fc38:	460b      	mov	r3, r1
 801fc3a:	009b      	lsls	r3, r3, #2
 801fc3c:	440b      	add	r3, r1
 801fc3e:	009b      	lsls	r3, r3, #2
 801fc40:	4403      	add	r3, r0
 801fc42:	3308      	adds	r3, #8
 801fc44:	6819      	ldr	r1, [r3, #0]
 801fc46:	487d      	ldr	r0, [pc, #500]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fc48:	4613      	mov	r3, r2
 801fc4a:	009b      	lsls	r3, r3, #2
 801fc4c:	4413      	add	r3, r2
 801fc4e:	009b      	lsls	r3, r3, #2
 801fc50:	4403      	add	r3, r0
 801fc52:	3308      	adds	r3, #8
 801fc54:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].Delay = SCH_tasks_G[i - 1].Delay;
 801fc56:	7dfb      	ldrb	r3, [r7, #23]
 801fc58:	1e59      	subs	r1, r3, #1
 801fc5a:	7dfa      	ldrb	r2, [r7, #23]
 801fc5c:	4877      	ldr	r0, [pc, #476]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fc5e:	460b      	mov	r3, r1
 801fc60:	009b      	lsls	r3, r3, #2
 801fc62:	440b      	add	r3, r1
 801fc64:	009b      	lsls	r3, r3, #2
 801fc66:	4403      	add	r3, r0
 801fc68:	3304      	adds	r3, #4
 801fc6a:	6819      	ldr	r1, [r3, #0]
 801fc6c:	4873      	ldr	r0, [pc, #460]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fc6e:	4613      	mov	r3, r2
 801fc70:	009b      	lsls	r3, r3, #2
 801fc72:	4413      	add	r3, r2
 801fc74:	009b      	lsls	r3, r3, #2
 801fc76:	4403      	add	r3, r0
 801fc78:	3304      	adds	r3, #4
 801fc7a:	6019      	str	r1, [r3, #0]
//					SCH_tasks_G[i].RunMe = SCH_tasks_G[i - 1].RunMe;
					SCH_tasks_G[i].TaskID = SCH_tasks_G[i - 1].TaskID;
 801fc7c:	7dfb      	ldrb	r3, [r7, #23]
 801fc7e:	1e59      	subs	r1, r3, #1
 801fc80:	7dfa      	ldrb	r2, [r7, #23]
 801fc82:	486e      	ldr	r0, [pc, #440]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fc84:	460b      	mov	r3, r1
 801fc86:	009b      	lsls	r3, r3, #2
 801fc88:	440b      	add	r3, r1
 801fc8a:	009b      	lsls	r3, r3, #2
 801fc8c:	4403      	add	r3, r0
 801fc8e:	3310      	adds	r3, #16
 801fc90:	6819      	ldr	r1, [r3, #0]
 801fc92:	486a      	ldr	r0, [pc, #424]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fc94:	4613      	mov	r3, r2
 801fc96:	009b      	lsls	r3, r3, #2
 801fc98:	4413      	add	r3, r2
 801fc9a:	009b      	lsls	r3, r3, #2
 801fc9c:	4403      	add	r3, r0
 801fc9e:	3310      	adds	r3, #16
 801fca0:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 801fca2:	7dfb      	ldrb	r3, [r7, #23]
 801fca4:	3b01      	subs	r3, #1
 801fca6:	75fb      	strb	r3, [r7, #23]
 801fca8:	7dfa      	ldrb	r2, [r7, #23]
 801fcaa:	7ffb      	ldrb	r3, [r7, #31]
 801fcac:	429a      	cmp	r2, r3
 801fcae:	d8ae      	bhi.n	801fc0e <SCH_Add_Task+0x7a>
				}
			}
			SCH_tasks_G[newTaskIndex].pTask = pFunction;
 801fcb0:	7ffa      	ldrb	r2, [r7, #31]
 801fcb2:	4962      	ldr	r1, [pc, #392]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fcb4:	4613      	mov	r3, r2
 801fcb6:	009b      	lsls	r3, r3, #2
 801fcb8:	4413      	add	r3, r2
 801fcba:	009b      	lsls	r3, r3, #2
 801fcbc:	440b      	add	r3, r1
 801fcbe:	68fa      	ldr	r2, [r7, #12]
 801fcc0:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Delay = newDelay;
 801fcc2:	7ffa      	ldrb	r2, [r7, #31]
 801fcc4:	495d      	ldr	r1, [pc, #372]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fcc6:	4613      	mov	r3, r2
 801fcc8:	009b      	lsls	r3, r3, #2
 801fcca:	4413      	add	r3, r2
 801fccc:	009b      	lsls	r3, r3, #2
 801fcce:	440b      	add	r3, r1
 801fcd0:	3304      	adds	r3, #4
 801fcd2:	693a      	ldr	r2, [r7, #16]
 801fcd4:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Period = PERIOD;
 801fcd6:	7ffa      	ldrb	r2, [r7, #31]
 801fcd8:	4958      	ldr	r1, [pc, #352]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fcda:	4613      	mov	r3, r2
 801fcdc:	009b      	lsls	r3, r3, #2
 801fcde:	4413      	add	r3, r2
 801fce0:	009b      	lsls	r3, r3, #2
 801fce2:	440b      	add	r3, r1
 801fce4:	3308      	adds	r3, #8
 801fce6:	687a      	ldr	r2, [r7, #4]
 801fce8:	601a      	str	r2, [r3, #0]
			if(SCH_tasks_G[newTaskIndex].Delay == 0){
 801fcea:	7ffa      	ldrb	r2, [r7, #31]
 801fcec:	4953      	ldr	r1, [pc, #332]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fcee:	4613      	mov	r3, r2
 801fcf0:	009b      	lsls	r3, r3, #2
 801fcf2:	4413      	add	r3, r2
 801fcf4:	009b      	lsls	r3, r3, #2
 801fcf6:	440b      	add	r3, r1
 801fcf8:	3304      	adds	r3, #4
 801fcfa:	681b      	ldr	r3, [r3, #0]
 801fcfc:	2b00      	cmp	r3, #0
 801fcfe:	d10a      	bne.n	801fd16 <SCH_Add_Task+0x182>
				SCH_tasks_G[newTaskIndex].RunMe = 1;
 801fd00:	7ffa      	ldrb	r2, [r7, #31]
 801fd02:	494e      	ldr	r1, [pc, #312]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fd04:	4613      	mov	r3, r2
 801fd06:	009b      	lsls	r3, r3, #2
 801fd08:	4413      	add	r3, r2
 801fd0a:	009b      	lsls	r3, r3, #2
 801fd0c:	440b      	add	r3, r1
 801fd0e:	330c      	adds	r3, #12
 801fd10:	2201      	movs	r2, #1
 801fd12:	701a      	strb	r2, [r3, #0]
 801fd14:	e009      	b.n	801fd2a <SCH_Add_Task+0x196>
			} else {
				SCH_tasks_G[newTaskIndex].RunMe = 0;
 801fd16:	7ffa      	ldrb	r2, [r7, #31]
 801fd18:	4948      	ldr	r1, [pc, #288]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fd1a:	4613      	mov	r3, r2
 801fd1c:	009b      	lsls	r3, r3, #2
 801fd1e:	4413      	add	r3, r2
 801fd20:	009b      	lsls	r3, r3, #2
 801fd22:	440b      	add	r3, r1
 801fd24:	330c      	adds	r3, #12
 801fd26:	2200      	movs	r2, #0
 801fd28:	701a      	strb	r2, [r3, #0]
			}
			SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 801fd2a:	7ffc      	ldrb	r4, [r7, #31]
 801fd2c:	f7ff fef2 	bl	801fb14 <Get_New_Task_ID>
 801fd30:	4602      	mov	r2, r0
 801fd32:	4942      	ldr	r1, [pc, #264]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fd34:	4623      	mov	r3, r4
 801fd36:	009b      	lsls	r3, r3, #2
 801fd38:	4423      	add	r3, r4
 801fd3a:	009b      	lsls	r3, r3, #2
 801fd3c:	440b      	add	r3, r1
 801fd3e:	3310      	adds	r3, #16
 801fd40:	601a      	str	r2, [r3, #0]
			return SCH_tasks_G[newTaskIndex].TaskID;
 801fd42:	7ffa      	ldrb	r2, [r7, #31]
 801fd44:	493d      	ldr	r1, [pc, #244]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fd46:	4613      	mov	r3, r2
 801fd48:	009b      	lsls	r3, r3, #2
 801fd4a:	4413      	add	r3, r2
 801fd4c:	009b      	lsls	r3, r3, #2
 801fd4e:	440b      	add	r3, r1
 801fd50:	3310      	adds	r3, #16
 801fd52:	681b      	ldr	r3, [r3, #0]
 801fd54:	e06e      	b.n	801fe34 <SCH_Add_Task+0x2a0>
		} else {
			if(SCH_tasks_G[newTaskIndex].pTask == 0x0000){
 801fd56:	7ffa      	ldrb	r2, [r7, #31]
 801fd58:	4938      	ldr	r1, [pc, #224]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fd5a:	4613      	mov	r3, r2
 801fd5c:	009b      	lsls	r3, r3, #2
 801fd5e:	4413      	add	r3, r2
 801fd60:	009b      	lsls	r3, r3, #2
 801fd62:	440b      	add	r3, r1
 801fd64:	681b      	ldr	r3, [r3, #0]
 801fd66:	2b00      	cmp	r3, #0
 801fd68:	d154      	bne.n	801fe14 <SCH_Add_Task+0x280>
				SCH_tasks_G[newTaskIndex].pTask = pFunction;
 801fd6a:	7ffa      	ldrb	r2, [r7, #31]
 801fd6c:	4933      	ldr	r1, [pc, #204]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fd6e:	4613      	mov	r3, r2
 801fd70:	009b      	lsls	r3, r3, #2
 801fd72:	4413      	add	r3, r2
 801fd74:	009b      	lsls	r3, r3, #2
 801fd76:	440b      	add	r3, r1
 801fd78:	68fa      	ldr	r2, [r7, #12]
 801fd7a:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[newTaskIndex].Delay = DELAY - sumDelay;
 801fd7c:	7ffa      	ldrb	r2, [r7, #31]
 801fd7e:	68b9      	ldr	r1, [r7, #8]
 801fd80:	69bb      	ldr	r3, [r7, #24]
 801fd82:	1ac9      	subs	r1, r1, r3
 801fd84:	482d      	ldr	r0, [pc, #180]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fd86:	4613      	mov	r3, r2
 801fd88:	009b      	lsls	r3, r3, #2
 801fd8a:	4413      	add	r3, r2
 801fd8c:	009b      	lsls	r3, r3, #2
 801fd8e:	4403      	add	r3, r0
 801fd90:	3304      	adds	r3, #4
 801fd92:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[newTaskIndex].Period = PERIOD;
 801fd94:	7ffa      	ldrb	r2, [r7, #31]
 801fd96:	4929      	ldr	r1, [pc, #164]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fd98:	4613      	mov	r3, r2
 801fd9a:	009b      	lsls	r3, r3, #2
 801fd9c:	4413      	add	r3, r2
 801fd9e:	009b      	lsls	r3, r3, #2
 801fda0:	440b      	add	r3, r1
 801fda2:	3308      	adds	r3, #8
 801fda4:	687a      	ldr	r2, [r7, #4]
 801fda6:	601a      	str	r2, [r3, #0]
				if(SCH_tasks_G[newTaskIndex].Delay == 0){
 801fda8:	7ffa      	ldrb	r2, [r7, #31]
 801fdaa:	4924      	ldr	r1, [pc, #144]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fdac:	4613      	mov	r3, r2
 801fdae:	009b      	lsls	r3, r3, #2
 801fdb0:	4413      	add	r3, r2
 801fdb2:	009b      	lsls	r3, r3, #2
 801fdb4:	440b      	add	r3, r1
 801fdb6:	3304      	adds	r3, #4
 801fdb8:	681b      	ldr	r3, [r3, #0]
 801fdba:	2b00      	cmp	r3, #0
 801fdbc:	d10a      	bne.n	801fdd4 <SCH_Add_Task+0x240>
					SCH_tasks_G[newTaskIndex].RunMe = 1;
 801fdbe:	7ffa      	ldrb	r2, [r7, #31]
 801fdc0:	491e      	ldr	r1, [pc, #120]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fdc2:	4613      	mov	r3, r2
 801fdc4:	009b      	lsls	r3, r3, #2
 801fdc6:	4413      	add	r3, r2
 801fdc8:	009b      	lsls	r3, r3, #2
 801fdca:	440b      	add	r3, r1
 801fdcc:	330c      	adds	r3, #12
 801fdce:	2201      	movs	r2, #1
 801fdd0:	701a      	strb	r2, [r3, #0]
 801fdd2:	e009      	b.n	801fde8 <SCH_Add_Task+0x254>
				} else {
					SCH_tasks_G[newTaskIndex].RunMe = 0;
 801fdd4:	7ffa      	ldrb	r2, [r7, #31]
 801fdd6:	4919      	ldr	r1, [pc, #100]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fdd8:	4613      	mov	r3, r2
 801fdda:	009b      	lsls	r3, r3, #2
 801fddc:	4413      	add	r3, r2
 801fdde:	009b      	lsls	r3, r3, #2
 801fde0:	440b      	add	r3, r1
 801fde2:	330c      	adds	r3, #12
 801fde4:	2200      	movs	r2, #0
 801fde6:	701a      	strb	r2, [r3, #0]
				}
				SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 801fde8:	7ffc      	ldrb	r4, [r7, #31]
 801fdea:	f7ff fe93 	bl	801fb14 <Get_New_Task_ID>
 801fdee:	4602      	mov	r2, r0
 801fdf0:	4912      	ldr	r1, [pc, #72]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fdf2:	4623      	mov	r3, r4
 801fdf4:	009b      	lsls	r3, r3, #2
 801fdf6:	4423      	add	r3, r4
 801fdf8:	009b      	lsls	r3, r3, #2
 801fdfa:	440b      	add	r3, r1
 801fdfc:	3310      	adds	r3, #16
 801fdfe:	601a      	str	r2, [r3, #0]
				return SCH_tasks_G[newTaskIndex].TaskID;
 801fe00:	7ffa      	ldrb	r2, [r7, #31]
 801fe02:	490e      	ldr	r1, [pc, #56]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fe04:	4613      	mov	r3, r2
 801fe06:	009b      	lsls	r3, r3, #2
 801fe08:	4413      	add	r3, r2
 801fe0a:	009b      	lsls	r3, r3, #2
 801fe0c:	440b      	add	r3, r1
 801fe0e:	3310      	adds	r3, #16
 801fe10:	681b      	ldr	r3, [r3, #0]
 801fe12:	e00f      	b.n	801fe34 <SCH_Add_Task+0x2a0>
	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 801fe14:	7ffb      	ldrb	r3, [r7, #31]
 801fe16:	3301      	adds	r3, #1
 801fe18:	77fb      	strb	r3, [r7, #31]
 801fe1a:	7ffb      	ldrb	r3, [r7, #31]
 801fe1c:	2b27      	cmp	r3, #39	; 0x27
 801fe1e:	f67f aec8 	bls.w	801fbb2 <SCH_Add_Task+0x1e>
			}
		}
	}
	return SCH_tasks_G[newTaskIndex].TaskID;
 801fe22:	7ffa      	ldrb	r2, [r7, #31]
 801fe24:	4905      	ldr	r1, [pc, #20]	; (801fe3c <SCH_Add_Task+0x2a8>)
 801fe26:	4613      	mov	r3, r2
 801fe28:	009b      	lsls	r3, r3, #2
 801fe2a:	4413      	add	r3, r2
 801fe2c:	009b      	lsls	r3, r3, #2
 801fe2e:	440b      	add	r3, r1
 801fe30:	3310      	adds	r3, #16
 801fe32:	681b      	ldr	r3, [r3, #0]
}
 801fe34:	4618      	mov	r0, r3
 801fe36:	3724      	adds	r7, #36	; 0x24
 801fe38:	46bd      	mov	sp, r7
 801fe3a:	bd90      	pop	{r4, r7, pc}
 801fe3c:	20003f34 	.word	0x20003f34

0801fe40 <SCH_Delete_Task>:


uint8_t SCH_Delete_Task(uint32_t taskID){
 801fe40:	b480      	push	{r7}
 801fe42:	b085      	sub	sp, #20
 801fe44:	af00      	add	r7, sp, #0
 801fe46:	6078      	str	r0, [r7, #4]
	uint8_t Return_code  = 0;
 801fe48:	2300      	movs	r3, #0
 801fe4a:	737b      	strb	r3, [r7, #13]
	uint8_t taskIndex;
	uint8_t j;
	if(taskID != NO_TASK_ID){
 801fe4c:	687b      	ldr	r3, [r7, #4]
 801fe4e:	2b00      	cmp	r3, #0
 801fe50:	f000 80e2 	beq.w	8020018 <SCH_Delete_Task+0x1d8>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 801fe54:	2300      	movs	r3, #0
 801fe56:	73fb      	strb	r3, [r7, #15]
 801fe58:	e0da      	b.n	8020010 <SCH_Delete_Task+0x1d0>
			if(SCH_tasks_G[taskIndex].TaskID == taskID){
 801fe5a:	7bfa      	ldrb	r2, [r7, #15]
 801fe5c:	4971      	ldr	r1, [pc, #452]	; (8020024 <SCH_Delete_Task+0x1e4>)
 801fe5e:	4613      	mov	r3, r2
 801fe60:	009b      	lsls	r3, r3, #2
 801fe62:	4413      	add	r3, r2
 801fe64:	009b      	lsls	r3, r3, #2
 801fe66:	440b      	add	r3, r1
 801fe68:	3310      	adds	r3, #16
 801fe6a:	681b      	ldr	r3, [r3, #0]
 801fe6c:	687a      	ldr	r2, [r7, #4]
 801fe6e:	429a      	cmp	r2, r3
 801fe70:	f040 80cb 	bne.w	802000a <SCH_Delete_Task+0x1ca>
				Return_code = 1;
 801fe74:	2301      	movs	r3, #1
 801fe76:	737b      	strb	r3, [r7, #13]
				if(taskIndex != 0 && taskIndex < SCH_MAX_TASKS - 1){
 801fe78:	7bfb      	ldrb	r3, [r7, #15]
 801fe7a:	2b00      	cmp	r3, #0
 801fe7c:	d02b      	beq.n	801fed6 <SCH_Delete_Task+0x96>
 801fe7e:	7bfb      	ldrb	r3, [r7, #15]
 801fe80:	2b26      	cmp	r3, #38	; 0x26
 801fe82:	d828      	bhi.n	801fed6 <SCH_Delete_Task+0x96>
					if(SCH_tasks_G[taskIndex+1].pTask != 0x0000){
 801fe84:	7bfb      	ldrb	r3, [r7, #15]
 801fe86:	1c5a      	adds	r2, r3, #1
 801fe88:	4966      	ldr	r1, [pc, #408]	; (8020024 <SCH_Delete_Task+0x1e4>)
 801fe8a:	4613      	mov	r3, r2
 801fe8c:	009b      	lsls	r3, r3, #2
 801fe8e:	4413      	add	r3, r2
 801fe90:	009b      	lsls	r3, r3, #2
 801fe92:	440b      	add	r3, r1
 801fe94:	681b      	ldr	r3, [r3, #0]
 801fe96:	2b00      	cmp	r3, #0
 801fe98:	d01d      	beq.n	801fed6 <SCH_Delete_Task+0x96>
						SCH_tasks_G[taskIndex+1].Delay += SCH_tasks_G[taskIndex].Delay;
 801fe9a:	7bfb      	ldrb	r3, [r7, #15]
 801fe9c:	1c5a      	adds	r2, r3, #1
 801fe9e:	4961      	ldr	r1, [pc, #388]	; (8020024 <SCH_Delete_Task+0x1e4>)
 801fea0:	4613      	mov	r3, r2
 801fea2:	009b      	lsls	r3, r3, #2
 801fea4:	4413      	add	r3, r2
 801fea6:	009b      	lsls	r3, r3, #2
 801fea8:	440b      	add	r3, r1
 801feaa:	3304      	adds	r3, #4
 801feac:	6819      	ldr	r1, [r3, #0]
 801feae:	7bfa      	ldrb	r2, [r7, #15]
 801feb0:	485c      	ldr	r0, [pc, #368]	; (8020024 <SCH_Delete_Task+0x1e4>)
 801feb2:	4613      	mov	r3, r2
 801feb4:	009b      	lsls	r3, r3, #2
 801feb6:	4413      	add	r3, r2
 801feb8:	009b      	lsls	r3, r3, #2
 801feba:	4403      	add	r3, r0
 801febc:	3304      	adds	r3, #4
 801febe:	681b      	ldr	r3, [r3, #0]
 801fec0:	7bfa      	ldrb	r2, [r7, #15]
 801fec2:	3201      	adds	r2, #1
 801fec4:	4419      	add	r1, r3
 801fec6:	4857      	ldr	r0, [pc, #348]	; (8020024 <SCH_Delete_Task+0x1e4>)
 801fec8:	4613      	mov	r3, r2
 801feca:	009b      	lsls	r3, r3, #2
 801fecc:	4413      	add	r3, r2
 801fece:	009b      	lsls	r3, r3, #2
 801fed0:	4403      	add	r3, r0
 801fed2:	3304      	adds	r3, #4
 801fed4:	6019      	str	r1, [r3, #0]
					}
				}

				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 801fed6:	7bfb      	ldrb	r3, [r7, #15]
 801fed8:	73bb      	strb	r3, [r7, #14]
 801feda:	e060      	b.n	801ff9e <SCH_Delete_Task+0x15e>
					SCH_tasks_G[j].pTask = SCH_tasks_G[j+1].pTask;
 801fedc:	7bbb      	ldrb	r3, [r7, #14]
 801fede:	1c59      	adds	r1, r3, #1
 801fee0:	7bba      	ldrb	r2, [r7, #14]
 801fee2:	4850      	ldr	r0, [pc, #320]	; (8020024 <SCH_Delete_Task+0x1e4>)
 801fee4:	460b      	mov	r3, r1
 801fee6:	009b      	lsls	r3, r3, #2
 801fee8:	440b      	add	r3, r1
 801feea:	009b      	lsls	r3, r3, #2
 801feec:	4403      	add	r3, r0
 801feee:	6819      	ldr	r1, [r3, #0]
 801fef0:	484c      	ldr	r0, [pc, #304]	; (8020024 <SCH_Delete_Task+0x1e4>)
 801fef2:	4613      	mov	r3, r2
 801fef4:	009b      	lsls	r3, r3, #2
 801fef6:	4413      	add	r3, r2
 801fef8:	009b      	lsls	r3, r3, #2
 801fefa:	4403      	add	r3, r0
 801fefc:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Period = SCH_tasks_G[j+1].Period;
 801fefe:	7bbb      	ldrb	r3, [r7, #14]
 801ff00:	1c59      	adds	r1, r3, #1
 801ff02:	7bba      	ldrb	r2, [r7, #14]
 801ff04:	4847      	ldr	r0, [pc, #284]	; (8020024 <SCH_Delete_Task+0x1e4>)
 801ff06:	460b      	mov	r3, r1
 801ff08:	009b      	lsls	r3, r3, #2
 801ff0a:	440b      	add	r3, r1
 801ff0c:	009b      	lsls	r3, r3, #2
 801ff0e:	4403      	add	r3, r0
 801ff10:	3308      	adds	r3, #8
 801ff12:	6819      	ldr	r1, [r3, #0]
 801ff14:	4843      	ldr	r0, [pc, #268]	; (8020024 <SCH_Delete_Task+0x1e4>)
 801ff16:	4613      	mov	r3, r2
 801ff18:	009b      	lsls	r3, r3, #2
 801ff1a:	4413      	add	r3, r2
 801ff1c:	009b      	lsls	r3, r3, #2
 801ff1e:	4403      	add	r3, r0
 801ff20:	3308      	adds	r3, #8
 801ff22:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Delay = SCH_tasks_G[j+1].Delay;
 801ff24:	7bbb      	ldrb	r3, [r7, #14]
 801ff26:	1c59      	adds	r1, r3, #1
 801ff28:	7bba      	ldrb	r2, [r7, #14]
 801ff2a:	483e      	ldr	r0, [pc, #248]	; (8020024 <SCH_Delete_Task+0x1e4>)
 801ff2c:	460b      	mov	r3, r1
 801ff2e:	009b      	lsls	r3, r3, #2
 801ff30:	440b      	add	r3, r1
 801ff32:	009b      	lsls	r3, r3, #2
 801ff34:	4403      	add	r3, r0
 801ff36:	3304      	adds	r3, #4
 801ff38:	6819      	ldr	r1, [r3, #0]
 801ff3a:	483a      	ldr	r0, [pc, #232]	; (8020024 <SCH_Delete_Task+0x1e4>)
 801ff3c:	4613      	mov	r3, r2
 801ff3e:	009b      	lsls	r3, r3, #2
 801ff40:	4413      	add	r3, r2
 801ff42:	009b      	lsls	r3, r3, #2
 801ff44:	4403      	add	r3, r0
 801ff46:	3304      	adds	r3, #4
 801ff48:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].RunMe = SCH_tasks_G[j+1].RunMe;
 801ff4a:	7bbb      	ldrb	r3, [r7, #14]
 801ff4c:	1c59      	adds	r1, r3, #1
 801ff4e:	7bba      	ldrb	r2, [r7, #14]
 801ff50:	4834      	ldr	r0, [pc, #208]	; (8020024 <SCH_Delete_Task+0x1e4>)
 801ff52:	460b      	mov	r3, r1
 801ff54:	009b      	lsls	r3, r3, #2
 801ff56:	440b      	add	r3, r1
 801ff58:	009b      	lsls	r3, r3, #2
 801ff5a:	4403      	add	r3, r0
 801ff5c:	330c      	adds	r3, #12
 801ff5e:	7818      	ldrb	r0, [r3, #0]
 801ff60:	4930      	ldr	r1, [pc, #192]	; (8020024 <SCH_Delete_Task+0x1e4>)
 801ff62:	4613      	mov	r3, r2
 801ff64:	009b      	lsls	r3, r3, #2
 801ff66:	4413      	add	r3, r2
 801ff68:	009b      	lsls	r3, r3, #2
 801ff6a:	440b      	add	r3, r1
 801ff6c:	330c      	adds	r3, #12
 801ff6e:	4602      	mov	r2, r0
 801ff70:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[j].TaskID = SCH_tasks_G[j+1].TaskID;
 801ff72:	7bbb      	ldrb	r3, [r7, #14]
 801ff74:	1c59      	adds	r1, r3, #1
 801ff76:	7bba      	ldrb	r2, [r7, #14]
 801ff78:	482a      	ldr	r0, [pc, #168]	; (8020024 <SCH_Delete_Task+0x1e4>)
 801ff7a:	460b      	mov	r3, r1
 801ff7c:	009b      	lsls	r3, r3, #2
 801ff7e:	440b      	add	r3, r1
 801ff80:	009b      	lsls	r3, r3, #2
 801ff82:	4403      	add	r3, r0
 801ff84:	3310      	adds	r3, #16
 801ff86:	6819      	ldr	r1, [r3, #0]
 801ff88:	4826      	ldr	r0, [pc, #152]	; (8020024 <SCH_Delete_Task+0x1e4>)
 801ff8a:	4613      	mov	r3, r2
 801ff8c:	009b      	lsls	r3, r3, #2
 801ff8e:	4413      	add	r3, r2
 801ff90:	009b      	lsls	r3, r3, #2
 801ff92:	4403      	add	r3, r0
 801ff94:	3310      	adds	r3, #16
 801ff96:	6019      	str	r1, [r3, #0]
				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 801ff98:	7bbb      	ldrb	r3, [r7, #14]
 801ff9a:	3301      	adds	r3, #1
 801ff9c:	73bb      	strb	r3, [r7, #14]
 801ff9e:	7bbb      	ldrb	r3, [r7, #14]
 801ffa0:	2b26      	cmp	r3, #38	; 0x26
 801ffa2:	d99b      	bls.n	801fedc <SCH_Delete_Task+0x9c>
				}
				SCH_tasks_G[j].pTask = 0;
 801ffa4:	7bba      	ldrb	r2, [r7, #14]
 801ffa6:	491f      	ldr	r1, [pc, #124]	; (8020024 <SCH_Delete_Task+0x1e4>)
 801ffa8:	4613      	mov	r3, r2
 801ffaa:	009b      	lsls	r3, r3, #2
 801ffac:	4413      	add	r3, r2
 801ffae:	009b      	lsls	r3, r3, #2
 801ffb0:	440b      	add	r3, r1
 801ffb2:	2200      	movs	r2, #0
 801ffb4:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Period = 0;
 801ffb6:	7bba      	ldrb	r2, [r7, #14]
 801ffb8:	491a      	ldr	r1, [pc, #104]	; (8020024 <SCH_Delete_Task+0x1e4>)
 801ffba:	4613      	mov	r3, r2
 801ffbc:	009b      	lsls	r3, r3, #2
 801ffbe:	4413      	add	r3, r2
 801ffc0:	009b      	lsls	r3, r3, #2
 801ffc2:	440b      	add	r3, r1
 801ffc4:	3308      	adds	r3, #8
 801ffc6:	2200      	movs	r2, #0
 801ffc8:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Delay = 0;
 801ffca:	7bba      	ldrb	r2, [r7, #14]
 801ffcc:	4915      	ldr	r1, [pc, #84]	; (8020024 <SCH_Delete_Task+0x1e4>)
 801ffce:	4613      	mov	r3, r2
 801ffd0:	009b      	lsls	r3, r3, #2
 801ffd2:	4413      	add	r3, r2
 801ffd4:	009b      	lsls	r3, r3, #2
 801ffd6:	440b      	add	r3, r1
 801ffd8:	3304      	adds	r3, #4
 801ffda:	2200      	movs	r2, #0
 801ffdc:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].RunMe = 0;
 801ffde:	7bba      	ldrb	r2, [r7, #14]
 801ffe0:	4910      	ldr	r1, [pc, #64]	; (8020024 <SCH_Delete_Task+0x1e4>)
 801ffe2:	4613      	mov	r3, r2
 801ffe4:	009b      	lsls	r3, r3, #2
 801ffe6:	4413      	add	r3, r2
 801ffe8:	009b      	lsls	r3, r3, #2
 801ffea:	440b      	add	r3, r1
 801ffec:	330c      	adds	r3, #12
 801ffee:	2200      	movs	r2, #0
 801fff0:	701a      	strb	r2, [r3, #0]
				SCH_tasks_G[j].TaskID = 0;
 801fff2:	7bba      	ldrb	r2, [r7, #14]
 801fff4:	490b      	ldr	r1, [pc, #44]	; (8020024 <SCH_Delete_Task+0x1e4>)
 801fff6:	4613      	mov	r3, r2
 801fff8:	009b      	lsls	r3, r3, #2
 801fffa:	4413      	add	r3, r2
 801fffc:	009b      	lsls	r3, r3, #2
 801fffe:	440b      	add	r3, r1
 8020000:	3310      	adds	r3, #16
 8020002:	2200      	movs	r2, #0
 8020004:	601a      	str	r2, [r3, #0]
				return Return_code;
 8020006:	7b7b      	ldrb	r3, [r7, #13]
 8020008:	e007      	b.n	802001a <SCH_Delete_Task+0x1da>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 802000a:	7bfb      	ldrb	r3, [r7, #15]
 802000c:	3301      	adds	r3, #1
 802000e:	73fb      	strb	r3, [r7, #15]
 8020010:	7bfb      	ldrb	r3, [r7, #15]
 8020012:	2b27      	cmp	r3, #39	; 0x27
 8020014:	f67f af21 	bls.w	801fe5a <SCH_Delete_Task+0x1a>
			}
		}
	}
	return Return_code; // return status
 8020018:	7b7b      	ldrb	r3, [r7, #13]
}
 802001a:	4618      	mov	r0, r3
 802001c:	3714      	adds	r7, #20
 802001e:	46bd      	mov	sp, r7
 8020020:	bc80      	pop	{r7}
 8020022:	4770      	bx	lr
 8020024:	20003f34 	.word	0x20003f34

08020028 <SCH_Dispatch_Tasks>:



void SCH_Dispatch_Tasks(void){
 8020028:	b5b0      	push	{r4, r5, r7, lr}
 802002a:	b086      	sub	sp, #24
 802002c:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].RunMe > 0) {
 802002e:	4b11      	ldr	r3, [pc, #68]	; (8020074 <SCH_Dispatch_Tasks+0x4c>)
 8020030:	7b1b      	ldrb	r3, [r3, #12]
 8020032:	2b00      	cmp	r3, #0
 8020034:	d019      	beq.n	802006a <SCH_Dispatch_Tasks+0x42>
//		sprintf((char*) strScheduler, "count=%d\r\n", (int) count_SCH_Update);
//		UART3_SendToHost((uint8_t *)strScheduler);
		(*SCH_tasks_G[0].pTask)(); // Run the task
 8020036:	4b0f      	ldr	r3, [pc, #60]	; (8020074 <SCH_Dispatch_Tasks+0x4c>)
 8020038:	681b      	ldr	r3, [r3, #0]
 802003a:	4798      	blx	r3
		SCH_tasks_G[0].RunMe = 0; // Reset / reduce RunMe flag
 802003c:	4b0d      	ldr	r3, [pc, #52]	; (8020074 <SCH_Dispatch_Tasks+0x4c>)
 802003e:	2200      	movs	r2, #0
 8020040:	731a      	strb	r2, [r3, #12]
		sTask temtask = SCH_tasks_G[0];
 8020042:	4b0c      	ldr	r3, [pc, #48]	; (8020074 <SCH_Dispatch_Tasks+0x4c>)
 8020044:	1d3c      	adds	r4, r7, #4
 8020046:	461d      	mov	r5, r3
 8020048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802004a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802004c:	682b      	ldr	r3, [r5, #0]
 802004e:	6023      	str	r3, [r4, #0]
		SCH_Delete_Task(temtask.TaskID);
 8020050:	697b      	ldr	r3, [r7, #20]
 8020052:	4618      	mov	r0, r3
 8020054:	f7ff fef4 	bl	801fe40 <SCH_Delete_Task>
		if (temtask.Period != 0) {
 8020058:	68fb      	ldr	r3, [r7, #12]
 802005a:	2b00      	cmp	r3, #0
 802005c:	d005      	beq.n	802006a <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(temtask.pTask, temtask.Period, temtask.Period);
 802005e:	687b      	ldr	r3, [r7, #4]
 8020060:	68f9      	ldr	r1, [r7, #12]
 8020062:	68fa      	ldr	r2, [r7, #12]
 8020064:	4618      	mov	r0, r3
 8020066:	f7ff fd95 	bl	801fb94 <SCH_Add_Task>
		}
	}
}
 802006a:	bf00      	nop
 802006c:	3718      	adds	r7, #24
 802006e:	46bd      	mov	sp, r7
 8020070:	bdb0      	pop	{r4, r5, r7, pc}
 8020072:	bf00      	nop
 8020074:	20003f34 	.word	0x20003f34

08020078 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8020078:	b480      	push	{r7}
 802007a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 802007c:	f3bf 8f4f 	dsb	sy
}
 8020080:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8020082:	4b06      	ldr	r3, [pc, #24]	; (802009c <__NVIC_SystemReset+0x24>)
 8020084:	68db      	ldr	r3, [r3, #12]
 8020086:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 802008a:	4904      	ldr	r1, [pc, #16]	; (802009c <__NVIC_SystemReset+0x24>)
 802008c:	4b04      	ldr	r3, [pc, #16]	; (80200a0 <__NVIC_SystemReset+0x28>)
 802008e:	4313      	orrs	r3, r2
 8020090:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8020092:	f3bf 8f4f 	dsb	sy
}
 8020096:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8020098:	bf00      	nop
 802009a:	e7fd      	b.n	8020098 <__NVIC_SystemReset+0x20>
 802009c:	e000ed00 	.word	0xe000ed00
 80200a0:	05fa0004 	.word	0x05fa0004

080200a4 <Jump_To_Current_Firmware>:
	Flash_Erase(CURRENT_VERSION_ADDR,1);
	Flash_Write_Char(CURRENT_VERSION_ADDR, version,strlen(VERSION));
}


void Jump_To_Current_Firmware(){
 80200a4:	b580      	push	{r7, lr}
 80200a6:	af00      	add	r7, sp, #0
	Flash_Erase(FIRMWARE_CHOOSEN,1);
 80200a8:	2101      	movs	r1, #1
 80200aa:	4804      	ldr	r0, [pc, #16]	; (80200bc <Jump_To_Current_Firmware+0x18>)
 80200ac:	f000 f82c 	bl	8020108 <Flash_Erase>
    Flash_Write_Int(FIRMWARE_CHOOSEN, CURRENT_FIRMWARE_CHOOSEN);
 80200b0:	2102      	movs	r1, #2
 80200b2:	4802      	ldr	r0, [pc, #8]	; (80200bc <Jump_To_Current_Firmware+0x18>)
 80200b4:	f000 f84c 	bl	8020150 <Flash_Write_Int>
//	void (*app_reset_handler)(void) = (void*)(*(volatile uint32_t*) (CURRENT_FIRMWARE_ADDR + 4));
//	app_reset_handler();
	NVIC_SystemReset();
 80200b8:	f7ff ffde 	bl	8020078 <__NVIC_SystemReset>
 80200bc:	08060000 	.word	0x08060000

080200c0 <Jump_To_Factory_Firmware>:
}

void Jump_To_Factory_Firmware(){
 80200c0:	b580      	push	{r7, lr}
 80200c2:	af00      	add	r7, sp, #0
	Flash_Erase(FIRMWARE_CHOOSEN,1);
 80200c4:	2101      	movs	r1, #1
 80200c6:	4804      	ldr	r0, [pc, #16]	; (80200d8 <Jump_To_Factory_Firmware+0x18>)
 80200c8:	f000 f81e 	bl	8020108 <Flash_Erase>
    Flash_Write_Int(FIRMWARE_CHOOSEN, FACTORY_FIRMWARE_CHOOSEN);
 80200cc:	2101      	movs	r1, #1
 80200ce:	4802      	ldr	r0, [pc, #8]	; (80200d8 <Jump_To_Factory_Firmware+0x18>)
 80200d0:	f000 f83e 	bl	8020150 <Flash_Write_Int>
//	void (*app_reset_handler)(void) = (void*)(*(volatile uint32_t*) (FOTA_FIRMWARE_ADDR + 4));
//	app_reset_handler();
	NVIC_SystemReset();
 80200d4:	f7ff ffd0 	bl	8020078 <__NVIC_SystemReset>
 80200d8:	08060000 	.word	0x08060000

080200dc <Get_Update_Firmware_Status>:
void Update_Firmware_Success(){
	Flash_Erase(UPDATE_STATUS_ADDR,1);
    Flash_Write_Int(UPDATE_STATUS_ADDR, UPDATE_SUCCESS);
}

uint8_t Get_Update_Firmware_Status(){
 80200dc:	b480      	push	{r7}
 80200de:	af00      	add	r7, sp, #0
	return update_status;
 80200e0:	4b02      	ldr	r3, [pc, #8]	; (80200ec <Get_Update_Firmware_Status+0x10>)
 80200e2:	781b      	ldrb	r3, [r3, #0]
}
 80200e4:	4618      	mov	r0, r3
 80200e6:	46bd      	mov	sp, r7
 80200e8:	bc80      	pop	{r7}
 80200ea:	4770      	bx	lr
 80200ec:	20002488 	.word	0x20002488

080200f0 <Flash_Lock>:
		data[i] = 0;
	}
}

void Flash_Lock()
{
 80200f0:	b580      	push	{r7, lr}
 80200f2:	af00      	add	r7, sp, #0
	HAL_FLASH_Lock();
 80200f4:	f000 fe20 	bl	8020d38 <HAL_FLASH_Lock>
}
 80200f8:	bf00      	nop
 80200fa:	bd80      	pop	{r7, pc}

080200fc <Flash_Unlock>:

void Flash_Unlock()
{
 80200fc:	b580      	push	{r7, lr}
 80200fe:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8020100:	f000 fdf4 	bl	8020cec <HAL_FLASH_Unlock>
}
 8020104:	bf00      	nop
 8020106:	bd80      	pop	{r7, pc}

08020108 <Flash_Erase>:

void Flash_Erase(uint32_t addr,uint32_t num_bytes)
{
 8020108:	b580      	push	{r7, lr}
 802010a:	b088      	sub	sp, #32
 802010c:	af00      	add	r7, sp, #0
 802010e:	6078      	str	r0, [r7, #4]
 8020110:	6039      	str	r1, [r7, #0]
	uint32_t num_page = (uint32_t)(num_bytes/FLASH_PAGE_SIZE)+1;
 8020112:	683b      	ldr	r3, [r7, #0]
 8020114:	0adb      	lsrs	r3, r3, #11
 8020116:	3301      	adds	r3, #1
 8020118:	61fb      	str	r3, [r7, #28]
	uint32_t page_error;
	Flash_Unlock();
 802011a:	f7ff ffef 	bl	80200fc <Flash_Unlock>
	FLASH_EraseInitTypeDef erase_instance;
	erase_instance.TypeErase = FLASH_TYPEERASE_PAGES;
 802011e:	2300      	movs	r3, #0
 8020120:	60bb      	str	r3, [r7, #8]
	erase_instance.NbPages = num_page;
 8020122:	69fb      	ldr	r3, [r7, #28]
 8020124:	617b      	str	r3, [r7, #20]
	erase_instance.PageAddress = addr;
 8020126:	687b      	ldr	r3, [r7, #4]
 8020128:	613b      	str	r3, [r7, #16]
	HAL_FLASHEx_Erase(&erase_instance, &page_error);
 802012a:	f107 0218 	add.w	r2, r7, #24
 802012e:	f107 0308 	add.w	r3, r7, #8
 8020132:	4611      	mov	r1, r2
 8020134:	4618      	mov	r0, r3
 8020136:	f000 fea5 	bl	8020e84 <HAL_FLASHEx_Erase>
	Flash_Lock();
 802013a:	f7ff ffd9 	bl	80200f0 <Flash_Lock>
	LOG("Erase done\r\n");
 802013e:	4803      	ldr	r0, [pc, #12]	; (802014c <Flash_Erase+0x44>)
 8020140:	f7fe fd20 	bl	801eb84 <UART_DEBUG_Transmit>
}
 8020144:	bf00      	nop
 8020146:	3720      	adds	r7, #32
 8020148:	46bd      	mov	sp, r7
 802014a:	bd80      	pop	{r7, pc}
 802014c:	08023e68 	.word	0x08023e68

08020150 <Flash_Write_Int>:

void Flash_Write_Int(uint32_t addr, int data)
{
 8020150:	b580      	push	{r7, lr}
 8020152:	b082      	sub	sp, #8
 8020154:	af00      	add	r7, sp, #0
 8020156:	6078      	str	r0, [r7, #4]
 8020158:	6039      	str	r1, [r7, #0]
	Flash_Unlock();
 802015a:	f7ff ffcf 	bl	80200fc <Flash_Unlock>
	FLASH->CR |= FLASH_CR_PG;				/*!< Programming */
 802015e:	4b12      	ldr	r3, [pc, #72]	; (80201a8 <Flash_Write_Int+0x58>)
 8020160:	691b      	ldr	r3, [r3, #16]
 8020162:	4a11      	ldr	r2, [pc, #68]	; (80201a8 <Flash_Write_Int+0x58>)
 8020164:	f043 0301 	orr.w	r3, r3, #1
 8020168:	6113      	str	r3, [r2, #16]
	while((FLASH->SR&FLASH_SR_BSY));
 802016a:	bf00      	nop
 802016c:	4b0e      	ldr	r3, [pc, #56]	; (80201a8 <Flash_Write_Int+0x58>)
 802016e:	68db      	ldr	r3, [r3, #12]
 8020170:	f003 0301 	and.w	r3, r3, #1
 8020174:	2b00      	cmp	r3, #0
 8020176:	d1f9      	bne.n	802016c <Flash_Write_Int+0x1c>
	*(__IO uint16_t*)addr = data;
 8020178:	687b      	ldr	r3, [r7, #4]
 802017a:	683a      	ldr	r2, [r7, #0]
 802017c:	b292      	uxth	r2, r2
 802017e:	801a      	strh	r2, [r3, #0]
	while((FLASH->SR&FLASH_SR_BSY));
 8020180:	bf00      	nop
 8020182:	4b09      	ldr	r3, [pc, #36]	; (80201a8 <Flash_Write_Int+0x58>)
 8020184:	68db      	ldr	r3, [r3, #12]
 8020186:	f003 0301 	and.w	r3, r3, #1
 802018a:	2b00      	cmp	r3, #0
 802018c:	d1f9      	bne.n	8020182 <Flash_Write_Int+0x32>
	FLASH->CR &= ~FLASH_CR_PG;
 802018e:	4b06      	ldr	r3, [pc, #24]	; (80201a8 <Flash_Write_Int+0x58>)
 8020190:	691b      	ldr	r3, [r3, #16]
 8020192:	4a05      	ldr	r2, [pc, #20]	; (80201a8 <Flash_Write_Int+0x58>)
 8020194:	f023 0301 	bic.w	r3, r3, #1
 8020198:	6113      	str	r3, [r2, #16]
	Flash_Lock();
 802019a:	f7ff ffa9 	bl	80200f0 <Flash_Lock>
}
 802019e:	bf00      	nop
 80201a0:	3708      	adds	r7, #8
 80201a2:	46bd      	mov	sp, r7
 80201a4:	bd80      	pop	{r7, pc}
 80201a6:	bf00      	nop
 80201a8:	40022000 	.word	0x40022000

080201ac <Flash_Write_Char>:
	return *val;
}


void Flash_Write_Char(uint32_t addr, uint8_t* data ,uint32_t data_len)
{
 80201ac:	b580      	push	{r7, lr}
 80201ae:	b08a      	sub	sp, #40	; 0x28
 80201b0:	af00      	add	r7, sp, #0
 80201b2:	60f8      	str	r0, [r7, #12]
 80201b4:	60b9      	str	r1, [r7, #8]
 80201b6:	607a      	str	r2, [r7, #4]
	char log[20];
	sprintf(log,"leng_char: %d\r\n",data_len);
 80201b8:	f107 0310 	add.w	r3, r7, #16
 80201bc:	687a      	ldr	r2, [r7, #4]
 80201be:	4920      	ldr	r1, [pc, #128]	; (8020240 <Flash_Write_Char+0x94>)
 80201c0:	4618      	mov	r0, r3
 80201c2:	f002 ff4f 	bl	8023064 <siprintf>
	LOG(log);
 80201c6:	f107 0310 	add.w	r3, r7, #16
 80201ca:	4618      	mov	r0, r3
 80201cc:	f7fe fcda 	bl	801eb84 <UART_DEBUG_Transmit>
	int i;
	uint16_t temp;
	Flash_Unlock();
 80201d0:	f7ff ff94 	bl	80200fc <Flash_Unlock>
	FLASH->CR |= FLASH_CR_PG;
 80201d4:	4b1b      	ldr	r3, [pc, #108]	; (8020244 <Flash_Write_Char+0x98>)
 80201d6:	691b      	ldr	r3, [r3, #16]
 80201d8:	4a1a      	ldr	r2, [pc, #104]	; (8020244 <Flash_Write_Char+0x98>)
 80201da:	f043 0301 	orr.w	r3, r3, #1
 80201de:	6113      	str	r3, [r2, #16]
	for(i=0; i<data_len; i+=2)
 80201e0:	2300      	movs	r3, #0
 80201e2:	627b      	str	r3, [r7, #36]	; 0x24
 80201e4:	e011      	b.n	802020a <Flash_Write_Char+0x5e>
	{
	  while((FLASH->SR&FLASH_SR_BSY));
 80201e6:	bf00      	nop
 80201e8:	4b16      	ldr	r3, [pc, #88]	; (8020244 <Flash_Write_Char+0x98>)
 80201ea:	68db      	ldr	r3, [r3, #12]
 80201ec:	f003 0301 	and.w	r3, r3, #1
 80201f0:	2b00      	cmp	r3, #0
 80201f2:	d1f9      	bne.n	80201e8 <Flash_Write_Char+0x3c>
	  *(__IO uint16_t*)(addr + i) = *(uint16_t*)(data+i);
 80201f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80201f6:	68ba      	ldr	r2, [r7, #8]
 80201f8:	4413      	add	r3, r2
 80201fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80201fc:	68fa      	ldr	r2, [r7, #12]
 80201fe:	440a      	add	r2, r1
 8020200:	881b      	ldrh	r3, [r3, #0]
 8020202:	8013      	strh	r3, [r2, #0]
	for(i=0; i<data_len; i+=2)
 8020204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020206:	3302      	adds	r3, #2
 8020208:	627b      	str	r3, [r7, #36]	; 0x24
 802020a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802020c:	687a      	ldr	r2, [r7, #4]
 802020e:	429a      	cmp	r2, r3
 8020210:	d8e9      	bhi.n	80201e6 <Flash_Write_Char+0x3a>
	}
	while((FLASH->SR&FLASH_SR_BSY));
 8020212:	bf00      	nop
 8020214:	4b0b      	ldr	r3, [pc, #44]	; (8020244 <Flash_Write_Char+0x98>)
 8020216:	68db      	ldr	r3, [r3, #12]
 8020218:	f003 0301 	and.w	r3, r3, #1
 802021c:	2b00      	cmp	r3, #0
 802021e:	d1f9      	bne.n	8020214 <Flash_Write_Char+0x68>
	FLASH->CR &= ~FLASH_CR_PG;
 8020220:	4b08      	ldr	r3, [pc, #32]	; (8020244 <Flash_Write_Char+0x98>)
 8020222:	691b      	ldr	r3, [r3, #16]
 8020224:	4a07      	ldr	r2, [pc, #28]	; (8020244 <Flash_Write_Char+0x98>)
 8020226:	f023 0301 	bic.w	r3, r3, #1
 802022a:	6113      	str	r3, [r2, #16]
	Flash_Lock();
 802022c:	f7ff ff60 	bl	80200f0 <Flash_Lock>
	LOG("Write DOne");
 8020230:	4805      	ldr	r0, [pc, #20]	; (8020248 <Flash_Write_Char+0x9c>)
 8020232:	f7fe fca7 	bl	801eb84 <UART_DEBUG_Transmit>
}
 8020236:	bf00      	nop
 8020238:	3728      	adds	r7, #40	; 0x28
 802023a:	46bd      	mov	sp, r7
 802023c:	bd80      	pop	{r7, pc}
 802023e:	bf00      	nop
 8020240:	08023e78 	.word	0x08023e78
 8020244:	40022000 	.word	0x40022000
 8020248:	08023e88 	.word	0x08023e88

0802024c <FSM_Display_State>:

/**
 * HTTP_Display_State()
 * @brief This is function for display state of State Machine. It only show State when having a state changation.
 */
void FSM_Display_State(void){
 802024c:	b580      	push	{r7, lr}
 802024e:	af00      	add	r7, sp, #0
	if(fsm_curr_state!=fsm_prev_state){
 8020250:	4b0d      	ldr	r3, [pc, #52]	; (8020288 <FSM_Display_State+0x3c>)
 8020252:	781a      	ldrb	r2, [r3, #0]
 8020254:	4b0d      	ldr	r3, [pc, #52]	; (802028c <FSM_Display_State+0x40>)
 8020256:	781b      	ldrb	r3, [r3, #0]
 8020258:	429a      	cmp	r2, r3
 802025a:	d012      	beq.n	8020282 <FSM_Display_State+0x36>
		fsm_prev_state = fsm_curr_state;
 802025c:	4b0a      	ldr	r3, [pc, #40]	; (8020288 <FSM_Display_State+0x3c>)
 802025e:	781a      	ldrb	r2, [r3, #0]
 8020260:	4b0a      	ldr	r3, [pc, #40]	; (802028c <FSM_Display_State+0x40>)
 8020262:	701a      	strb	r2, [r3, #0]
		switch (fsm_curr_state) {
 8020264:	4b08      	ldr	r3, [pc, #32]	; (8020288 <FSM_Display_State+0x3c>)
 8020266:	781b      	ldrb	r3, [r3, #0]
 8020268:	2b00      	cmp	r3, #0
 802026a:	d002      	beq.n	8020272 <FSM_Display_State+0x26>
 802026c:	2b01      	cmp	r3, #1
 802026e:	d004      	beq.n	802027a <FSM_Display_State+0x2e>
				break;
			case VERSION_CHECKING_HTTP:
				LOG("\r\nVERSION CHECKING HTTP\r\n");
				break;
			default:
				break;
 8020270:	e008      	b.n	8020284 <FSM_Display_State+0x38>
				LOG("\r\nSTART SIMCOM\r\n");
 8020272:	4807      	ldr	r0, [pc, #28]	; (8020290 <FSM_Display_State+0x44>)
 8020274:	f7fe fc86 	bl	801eb84 <UART_DEBUG_Transmit>
				break;
 8020278:	e004      	b.n	8020284 <FSM_Display_State+0x38>
				LOG("\r\nVERSION CHECKING HTTP\r\n");
 802027a:	4806      	ldr	r0, [pc, #24]	; (8020294 <FSM_Display_State+0x48>)
 802027c:	f7fe fc82 	bl	801eb84 <UART_DEBUG_Transmit>
				break;
 8020280:	e000      	b.n	8020284 <FSM_Display_State+0x38>
		}
	}
 8020282:	bf00      	nop

}
 8020284:	bf00      	nop
 8020286:	bd80      	pop	{r7, pc}
 8020288:	200011b8 	.word	0x200011b8
 802028c:	200011b9 	.word	0x200011b9
 8020290:	08023e94 	.word	0x08023e94
 8020294:	08023ea8 	.word	0x08023ea8

08020298 <FSM_Run>:

/**
 * HTTP_Run()
 * @brief This is function can be called from external file. It run follow state machine method. Not have param.
 */
uint8_t FSM_Run(void){
 8020298:	b580      	push	{r7, lr}
 802029a:	af00      	add	r7, sp, #0
	FSM_Display_State();
 802029c:	f7ff ffd6 	bl	802024c <FSM_Display_State>
	if(fsm_curr_state < FSM_MAX_STATE){
 80202a0:	4b07      	ldr	r3, [pc, #28]	; (80202c0 <FSM_Run+0x28>)
 80202a2:	781b      	ldrb	r3, [r3, #0]
 80202a4:	2b02      	cmp	r3, #2
 80202a6:	d808      	bhi.n	80202ba <FSM_Run+0x22>
		(*fsm_state_machine[fsm_curr_state].func)();
 80202a8:	4b05      	ldr	r3, [pc, #20]	; (80202c0 <FSM_Run+0x28>)
 80202aa:	781b      	ldrb	r3, [r3, #0]
 80202ac:	4a05      	ldr	r2, [pc, #20]	; (80202c4 <FSM_Run+0x2c>)
 80202ae:	00db      	lsls	r3, r3, #3
 80202b0:	4413      	add	r3, r2
 80202b2:	685b      	ldr	r3, [r3, #4]
 80202b4:	4798      	blx	r3
		return 0;
 80202b6:	2300      	movs	r3, #0
 80202b8:	e000      	b.n	80202bc <FSM_Run+0x24>
	}
	else{
		return 1;
 80202ba:	2301      	movs	r3, #1
	}
}
 80202bc:	4618      	mov	r0, r3
 80202be:	bd80      	pop	{r7, pc}
 80202c0:	200011b8 	.word	0x200011b8
 80202c4:	200000e4 	.word	0x200000e4

080202c8 <Start_Simcom>:


void Start_Simcom(){
 80202c8:	b580      	push	{r7, lr}
 80202ca:	af00      	add	r7, sp, #0
	if(Sim7600_Run()){
 80202cc:	f7fe f896 	bl	801e3fc <Sim7600_Run>
 80202d0:	4603      	mov	r3, r0
 80202d2:	2b00      	cmp	r3, #0
 80202d4:	d002      	beq.n	80202dc <Start_Simcom+0x14>
		fsm_curr_state = VERSION_CHECKING_HTTP;
 80202d6:	4b02      	ldr	r3, [pc, #8]	; (80202e0 <Start_Simcom+0x18>)
 80202d8:	2201      	movs	r2, #1
 80202da:	701a      	strb	r2, [r3, #0]
	}
}
 80202dc:	bf00      	nop
 80202de:	bd80      	pop	{r7, pc}
 80202e0:	200011b8 	.word	0x200011b8

080202e4 <Version_Checking_Http>:
void Version_Checking_Http(){
 80202e4:	b580      	push	{r7, lr}
 80202e6:	af00      	add	r7, sp, #0
	ret = HTTP_Run();
 80202e8:	f7fe fd5e 	bl	801eda8 <HTTP_Run>
 80202ec:	4603      	mov	r3, r0
 80202ee:	461a      	mov	r2, r3
 80202f0:	4b15      	ldr	r3, [pc, #84]	; (8020348 <Version_Checking_Http+0x64>)
 80202f2:	701a      	strb	r2, [r3, #0]
	if(ret == 1){
 80202f4:	4b14      	ldr	r3, [pc, #80]	; (8020348 <Version_Checking_Http+0x64>)
 80202f6:	781b      	ldrb	r3, [r3, #0]
 80202f8:	2b01      	cmp	r3, #1
 80202fa:	d116      	bne.n	802032a <Version_Checking_Http+0x46>
		LOG("Get into\r\n");
 80202fc:	4813      	ldr	r0, [pc, #76]	; (802034c <Version_Checking_Http+0x68>)
 80202fe:	f7fe fc41 	bl	801eb84 <UART_DEBUG_Transmit>
		if(Get_Update_Firmware_Status() == UPDATE_FAILED){
 8020302:	f7ff feeb 	bl	80200dc <Get_Update_Firmware_Status>
 8020306:	4603      	mov	r3, r0
 8020308:	2b01      	cmp	r3, #1
 802030a:	d105      	bne.n	8020318 <Version_Checking_Http+0x34>
			LOG("Get into Update Failed\r\n");
 802030c:	4810      	ldr	r0, [pc, #64]	; (8020350 <Version_Checking_Http+0x6c>)
 802030e:	f7fe fc39 	bl	801eb84 <UART_DEBUG_Transmit>
			Jump_To_Factory_Firmware();
 8020312:	f7ff fed5 	bl	80200c0 <Jump_To_Factory_Firmware>
	else if(ret == 2){
		Reset_SimConfiguration_State();
		HTTP_Set_State(HTTP_INIT);
		fsm_curr_state = START_SIMCOM;
	}
}
 8020316:	e014      	b.n	8020342 <Version_Checking_Http+0x5e>
			LOG("Get into Update Success\r\n");
 8020318:	480e      	ldr	r0, [pc, #56]	; (8020354 <Version_Checking_Http+0x70>)
 802031a:	f7fe fc33 	bl	801eb84 <UART_DEBUG_Transmit>
			fsm_curr_state = COPY_NEW_FIRMWARE;
 802031e:	4b0e      	ldr	r3, [pc, #56]	; (8020358 <Version_Checking_Http+0x74>)
 8020320:	2202      	movs	r2, #2
 8020322:	701a      	strb	r2, [r3, #0]
			Jump_To_Current_Firmware();
 8020324:	f7ff febe 	bl	80200a4 <Jump_To_Current_Firmware>
}
 8020328:	e00b      	b.n	8020342 <Version_Checking_Http+0x5e>
	else if(ret == 2){
 802032a:	4b07      	ldr	r3, [pc, #28]	; (8020348 <Version_Checking_Http+0x64>)
 802032c:	781b      	ldrb	r3, [r3, #0]
 802032e:	2b02      	cmp	r3, #2
 8020330:	d107      	bne.n	8020342 <Version_Checking_Http+0x5e>
		Reset_SimConfiguration_State();
 8020332:	f7fe fa03 	bl	801e73c <Reset_SimConfiguration_State>
		HTTP_Set_State(HTTP_INIT);
 8020336:	2000      	movs	r0, #0
 8020338:	f7ff fa00 	bl	801f73c <HTTP_Set_State>
		fsm_curr_state = START_SIMCOM;
 802033c:	4b06      	ldr	r3, [pc, #24]	; (8020358 <Version_Checking_Http+0x74>)
 802033e:	2200      	movs	r2, #0
 8020340:	701a      	strb	r2, [r3, #0]
}
 8020342:	bf00      	nop
 8020344:	bd80      	pop	{r7, pc}
 8020346:	bf00      	nop
 8020348:	200011ba 	.word	0x200011ba
 802034c:	08023ec4 	.word	0x08023ec4
 8020350:	08023ed0 	.word	0x08023ed0
 8020354:	08023eec 	.word	0x08023eec
 8020358:	200011b8 	.word	0x200011b8

0802035c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 802035c:	b580      	push	{r7, lr}
 802035e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020360:	f000 f9ee 	bl	8020740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8020364:	f7fe faba 	bl	801e8dc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  UART_SIM7600_Init();
 8020368:	f7fe fb46 	bl	801e9f8 <UART_SIM7600_Init>
  UART_DEBUG_Init();
 802036c:	f7fe fbe0 	bl	801eb30 <UART_DEBUG_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  GPIO_Init();
 8020370:	f7fe f9ec 	bl	801e74c <GPIO_Init>
  Timer_Init();
 8020374:	f7fe faf8 	bl	801e968 <Timer_Init>
  SPI2_Init();
 8020378:	f7fe fa56 	bl	801e828 <SPI2_Init>
  MC25LC512_Initialize();
 802037c:	f7fd ffa0 	bl	801e2c0 <MC25LC512_Initialize>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  UART_DEBUG_Transmit("Fota Firmware Start\r\n");
 8020380:	4804      	ldr	r0, [pc, #16]	; (8020394 <main+0x38>)
 8020382:	f7fe fbff 	bl	801eb84 <UART_DEBUG_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */
	  FSM_Run();
 8020386:	f7ff ff87 	bl	8020298 <FSM_Run>
	  SCH_Dispatch_Tasks();
 802038a:	f7ff fe4d 	bl	8020028 <SCH_Dispatch_Tasks>
	  AT_Processing();
 802038e:	f7ff fa99 	bl	801f8c4 <AT_Processing>
  {
 8020392:	e7f8      	b.n	8020386 <main+0x2a>
 8020394:	08023f08 	.word	0x08023f08

08020398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020398:	b480      	push	{r7}
 802039a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 802039c:	b672      	cpsid	i
}
 802039e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80203a0:	e7fe      	b.n	80203a0 <Error_Handler+0x8>
	...

080203a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80203a4:	b480      	push	{r7}
 80203a6:	b085      	sub	sp, #20
 80203a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80203aa:	4b15      	ldr	r3, [pc, #84]	; (8020400 <HAL_MspInit+0x5c>)
 80203ac:	699b      	ldr	r3, [r3, #24]
 80203ae:	4a14      	ldr	r2, [pc, #80]	; (8020400 <HAL_MspInit+0x5c>)
 80203b0:	f043 0301 	orr.w	r3, r3, #1
 80203b4:	6193      	str	r3, [r2, #24]
 80203b6:	4b12      	ldr	r3, [pc, #72]	; (8020400 <HAL_MspInit+0x5c>)
 80203b8:	699b      	ldr	r3, [r3, #24]
 80203ba:	f003 0301 	and.w	r3, r3, #1
 80203be:	60bb      	str	r3, [r7, #8]
 80203c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80203c2:	4b0f      	ldr	r3, [pc, #60]	; (8020400 <HAL_MspInit+0x5c>)
 80203c4:	69db      	ldr	r3, [r3, #28]
 80203c6:	4a0e      	ldr	r2, [pc, #56]	; (8020400 <HAL_MspInit+0x5c>)
 80203c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80203cc:	61d3      	str	r3, [r2, #28]
 80203ce:	4b0c      	ldr	r3, [pc, #48]	; (8020400 <HAL_MspInit+0x5c>)
 80203d0:	69db      	ldr	r3, [r3, #28]
 80203d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80203d6:	607b      	str	r3, [r7, #4]
 80203d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80203da:	4b0a      	ldr	r3, [pc, #40]	; (8020404 <HAL_MspInit+0x60>)
 80203dc:	685b      	ldr	r3, [r3, #4]
 80203de:	60fb      	str	r3, [r7, #12]
 80203e0:	68fb      	ldr	r3, [r7, #12]
 80203e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80203e6:	60fb      	str	r3, [r7, #12]
 80203e8:	68fb      	ldr	r3, [r7, #12]
 80203ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80203ee:	60fb      	str	r3, [r7, #12]
 80203f0:	4a04      	ldr	r2, [pc, #16]	; (8020404 <HAL_MspInit+0x60>)
 80203f2:	68fb      	ldr	r3, [r7, #12]
 80203f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80203f6:	bf00      	nop
 80203f8:	3714      	adds	r7, #20
 80203fa:	46bd      	mov	sp, r7
 80203fc:	bc80      	pop	{r7}
 80203fe:	4770      	bx	lr
 8020400:	40021000 	.word	0x40021000
 8020404:	40010000 	.word	0x40010000

08020408 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8020408:	b580      	push	{r7, lr}
 802040a:	b088      	sub	sp, #32
 802040c:	af00      	add	r7, sp, #0
 802040e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020410:	f107 0310 	add.w	r3, r7, #16
 8020414:	2200      	movs	r2, #0
 8020416:	601a      	str	r2, [r3, #0]
 8020418:	605a      	str	r2, [r3, #4]
 802041a:	609a      	str	r2, [r3, #8]
 802041c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 802041e:	687b      	ldr	r3, [r7, #4]
 8020420:	681b      	ldr	r3, [r3, #0]
 8020422:	4a16      	ldr	r2, [pc, #88]	; (802047c <HAL_SPI_MspInit+0x74>)
 8020424:	4293      	cmp	r3, r2
 8020426:	d124      	bne.n	8020472 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8020428:	4b15      	ldr	r3, [pc, #84]	; (8020480 <HAL_SPI_MspInit+0x78>)
 802042a:	69db      	ldr	r3, [r3, #28]
 802042c:	4a14      	ldr	r2, [pc, #80]	; (8020480 <HAL_SPI_MspInit+0x78>)
 802042e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020432:	61d3      	str	r3, [r2, #28]
 8020434:	4b12      	ldr	r3, [pc, #72]	; (8020480 <HAL_SPI_MspInit+0x78>)
 8020436:	69db      	ldr	r3, [r3, #28]
 8020438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802043c:	60fb      	str	r3, [r7, #12]
 802043e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8020440:	4b0f      	ldr	r3, [pc, #60]	; (8020480 <HAL_SPI_MspInit+0x78>)
 8020442:	699b      	ldr	r3, [r3, #24]
 8020444:	4a0e      	ldr	r2, [pc, #56]	; (8020480 <HAL_SPI_MspInit+0x78>)
 8020446:	f043 0308 	orr.w	r3, r3, #8
 802044a:	6193      	str	r3, [r2, #24]
 802044c:	4b0c      	ldr	r3, [pc, #48]	; (8020480 <HAL_SPI_MspInit+0x78>)
 802044e:	699b      	ldr	r3, [r3, #24]
 8020450:	f003 0308 	and.w	r3, r3, #8
 8020454:	60bb      	str	r3, [r7, #8]
 8020456:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8020458:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 802045c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802045e:	2302      	movs	r3, #2
 8020460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8020462:	2303      	movs	r3, #3
 8020464:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8020466:	f107 0310 	add.w	r3, r7, #16
 802046a:	4619      	mov	r1, r3
 802046c:	4805      	ldr	r0, [pc, #20]	; (8020484 <HAL_SPI_MspInit+0x7c>)
 802046e:	f000 fdb1 	bl	8020fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8020472:	bf00      	nop
 8020474:	3720      	adds	r7, #32
 8020476:	46bd      	mov	sp, r7
 8020478:	bd80      	pop	{r7, pc}
 802047a:	bf00      	nop
 802047c:	40003800 	.word	0x40003800
 8020480:	40021000 	.word	0x40021000
 8020484:	40010c00 	.word	0x40010c00

08020488 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8020488:	b580      	push	{r7, lr}
 802048a:	b084      	sub	sp, #16
 802048c:	af00      	add	r7, sp, #0
 802048e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8020490:	687b      	ldr	r3, [r7, #4]
 8020492:	681b      	ldr	r3, [r3, #0]
 8020494:	4a0d      	ldr	r2, [pc, #52]	; (80204cc <HAL_TIM_Base_MspInit+0x44>)
 8020496:	4293      	cmp	r3, r2
 8020498:	d113      	bne.n	80204c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 802049a:	4b0d      	ldr	r3, [pc, #52]	; (80204d0 <HAL_TIM_Base_MspInit+0x48>)
 802049c:	69db      	ldr	r3, [r3, #28]
 802049e:	4a0c      	ldr	r2, [pc, #48]	; (80204d0 <HAL_TIM_Base_MspInit+0x48>)
 80204a0:	f043 0302 	orr.w	r3, r3, #2
 80204a4:	61d3      	str	r3, [r2, #28]
 80204a6:	4b0a      	ldr	r3, [pc, #40]	; (80204d0 <HAL_TIM_Base_MspInit+0x48>)
 80204a8:	69db      	ldr	r3, [r3, #28]
 80204aa:	f003 0302 	and.w	r3, r3, #2
 80204ae:	60fb      	str	r3, [r7, #12]
 80204b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80204b2:	2200      	movs	r2, #0
 80204b4:	2100      	movs	r1, #0
 80204b6:	201d      	movs	r0, #29
 80204b8:	f000 fa9f 	bl	80209fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80204bc:	201d      	movs	r0, #29
 80204be:	f000 fab8 	bl	8020a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80204c2:	bf00      	nop
 80204c4:	3710      	adds	r7, #16
 80204c6:	46bd      	mov	sp, r7
 80204c8:	bd80      	pop	{r7, pc}
 80204ca:	bf00      	nop
 80204cc:	40000400 	.word	0x40000400
 80204d0:	40021000 	.word	0x40021000

080204d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80204d4:	b580      	push	{r7, lr}
 80204d6:	b08a      	sub	sp, #40	; 0x28
 80204d8:	af00      	add	r7, sp, #0
 80204da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80204dc:	f107 0318 	add.w	r3, r7, #24
 80204e0:	2200      	movs	r2, #0
 80204e2:	601a      	str	r2, [r3, #0]
 80204e4:	605a      	str	r2, [r3, #4]
 80204e6:	609a      	str	r2, [r3, #8]
 80204e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80204ea:	687b      	ldr	r3, [r7, #4]
 80204ec:	681b      	ldr	r3, [r3, #0]
 80204ee:	4a3c      	ldr	r2, [pc, #240]	; (80205e0 <HAL_UART_MspInit+0x10c>)
 80204f0:	4293      	cmp	r3, r2
 80204f2:	d13a      	bne.n	802056a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80204f4:	4b3b      	ldr	r3, [pc, #236]	; (80205e4 <HAL_UART_MspInit+0x110>)
 80204f6:	699b      	ldr	r3, [r3, #24]
 80204f8:	4a3a      	ldr	r2, [pc, #232]	; (80205e4 <HAL_UART_MspInit+0x110>)
 80204fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80204fe:	6193      	str	r3, [r2, #24]
 8020500:	4b38      	ldr	r3, [pc, #224]	; (80205e4 <HAL_UART_MspInit+0x110>)
 8020502:	699b      	ldr	r3, [r3, #24]
 8020504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020508:	617b      	str	r3, [r7, #20]
 802050a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802050c:	4b35      	ldr	r3, [pc, #212]	; (80205e4 <HAL_UART_MspInit+0x110>)
 802050e:	699b      	ldr	r3, [r3, #24]
 8020510:	4a34      	ldr	r2, [pc, #208]	; (80205e4 <HAL_UART_MspInit+0x110>)
 8020512:	f043 0304 	orr.w	r3, r3, #4
 8020516:	6193      	str	r3, [r2, #24]
 8020518:	4b32      	ldr	r3, [pc, #200]	; (80205e4 <HAL_UART_MspInit+0x110>)
 802051a:	699b      	ldr	r3, [r3, #24]
 802051c:	f003 0304 	and.w	r3, r3, #4
 8020520:	613b      	str	r3, [r7, #16]
 8020522:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8020524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8020528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802052a:	2302      	movs	r3, #2
 802052c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 802052e:	2303      	movs	r3, #3
 8020530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020532:	f107 0318 	add.w	r3, r7, #24
 8020536:	4619      	mov	r1, r3
 8020538:	482b      	ldr	r0, [pc, #172]	; (80205e8 <HAL_UART_MspInit+0x114>)
 802053a:	f000 fd4b 	bl	8020fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 802053e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020544:	2300      	movs	r3, #0
 8020546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020548:	2300      	movs	r3, #0
 802054a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802054c:	f107 0318 	add.w	r3, r7, #24
 8020550:	4619      	mov	r1, r3
 8020552:	4825      	ldr	r0, [pc, #148]	; (80205e8 <HAL_UART_MspInit+0x114>)
 8020554:	f000 fd3e 	bl	8020fd4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8020558:	2200      	movs	r2, #0
 802055a:	2100      	movs	r1, #0
 802055c:	2025      	movs	r0, #37	; 0x25
 802055e:	f000 fa4c 	bl	80209fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8020562:	2025      	movs	r0, #37	; 0x25
 8020564:	f000 fa65 	bl	8020a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8020568:	e036      	b.n	80205d8 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 802056a:	687b      	ldr	r3, [r7, #4]
 802056c:	681b      	ldr	r3, [r3, #0]
 802056e:	4a1f      	ldr	r2, [pc, #124]	; (80205ec <HAL_UART_MspInit+0x118>)
 8020570:	4293      	cmp	r3, r2
 8020572:	d131      	bne.n	80205d8 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8020574:	4b1b      	ldr	r3, [pc, #108]	; (80205e4 <HAL_UART_MspInit+0x110>)
 8020576:	69db      	ldr	r3, [r3, #28]
 8020578:	4a1a      	ldr	r2, [pc, #104]	; (80205e4 <HAL_UART_MspInit+0x110>)
 802057a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802057e:	61d3      	str	r3, [r2, #28]
 8020580:	4b18      	ldr	r3, [pc, #96]	; (80205e4 <HAL_UART_MspInit+0x110>)
 8020582:	69db      	ldr	r3, [r3, #28]
 8020584:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8020588:	60fb      	str	r3, [r7, #12]
 802058a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 802058c:	4b15      	ldr	r3, [pc, #84]	; (80205e4 <HAL_UART_MspInit+0x110>)
 802058e:	699b      	ldr	r3, [r3, #24]
 8020590:	4a14      	ldr	r2, [pc, #80]	; (80205e4 <HAL_UART_MspInit+0x110>)
 8020592:	f043 0308 	orr.w	r3, r3, #8
 8020596:	6193      	str	r3, [r2, #24]
 8020598:	4b12      	ldr	r3, [pc, #72]	; (80205e4 <HAL_UART_MspInit+0x110>)
 802059a:	699b      	ldr	r3, [r3, #24]
 802059c:	f003 0308 	and.w	r3, r3, #8
 80205a0:	60bb      	str	r3, [r7, #8]
 80205a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80205a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80205a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80205aa:	2302      	movs	r3, #2
 80205ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80205ae:	2303      	movs	r3, #3
 80205b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80205b2:	f107 0318 	add.w	r3, r7, #24
 80205b6:	4619      	mov	r1, r3
 80205b8:	480d      	ldr	r0, [pc, #52]	; (80205f0 <HAL_UART_MspInit+0x11c>)
 80205ba:	f000 fd0b 	bl	8020fd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80205be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80205c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80205c4:	2300      	movs	r3, #0
 80205c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80205c8:	2300      	movs	r3, #0
 80205ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80205cc:	f107 0318 	add.w	r3, r7, #24
 80205d0:	4619      	mov	r1, r3
 80205d2:	4807      	ldr	r0, [pc, #28]	; (80205f0 <HAL_UART_MspInit+0x11c>)
 80205d4:	f000 fcfe 	bl	8020fd4 <HAL_GPIO_Init>
}
 80205d8:	bf00      	nop
 80205da:	3728      	adds	r7, #40	; 0x28
 80205dc:	46bd      	mov	sp, r7
 80205de:	bd80      	pop	{r7, pc}
 80205e0:	40013800 	.word	0x40013800
 80205e4:	40021000 	.word	0x40021000
 80205e8:	40010800 	.word	0x40010800
 80205ec:	40004800 	.word	0x40004800
 80205f0:	40010c00 	.word	0x40010c00

080205f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80205f4:	b480      	push	{r7}
 80205f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80205f8:	e7fe      	b.n	80205f8 <NMI_Handler+0x4>

080205fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80205fa:	b480      	push	{r7}
 80205fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80205fe:	e7fe      	b.n	80205fe <HardFault_Handler+0x4>

08020600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8020600:	b480      	push	{r7}
 8020602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8020604:	e7fe      	b.n	8020604 <MemManage_Handler+0x4>

08020606 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8020606:	b480      	push	{r7}
 8020608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 802060a:	e7fe      	b.n	802060a <BusFault_Handler+0x4>

0802060c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 802060c:	b480      	push	{r7}
 802060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8020610:	e7fe      	b.n	8020610 <UsageFault_Handler+0x4>

08020612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8020612:	b480      	push	{r7}
 8020614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8020616:	bf00      	nop
 8020618:	46bd      	mov	sp, r7
 802061a:	bc80      	pop	{r7}
 802061c:	4770      	bx	lr

0802061e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 802061e:	b480      	push	{r7}
 8020620:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8020622:	bf00      	nop
 8020624:	46bd      	mov	sp, r7
 8020626:	bc80      	pop	{r7}
 8020628:	4770      	bx	lr

0802062a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 802062a:	b480      	push	{r7}
 802062c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 802062e:	bf00      	nop
 8020630:	46bd      	mov	sp, r7
 8020632:	bc80      	pop	{r7}
 8020634:	4770      	bx	lr

08020636 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8020636:	b580      	push	{r7, lr}
 8020638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 802063a:	f000 f8c7 	bl	80207cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 802063e:	bf00      	nop
 8020640:	bd80      	pop	{r7, pc}
	...

08020644 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8020644:	b580      	push	{r7, lr}
 8020646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8020648:	4802      	ldr	r0, [pc, #8]	; (8020654 <TIM3_IRQHandler+0x10>)
 802064a:	f001 fd9f 	bl	802218c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 802064e:	bf00      	nop
 8020650:	bd80      	pop	{r7, pc}
 8020652:	bf00      	nop
 8020654:	20001254 	.word	0x20001254

08020658 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8020658:	b580      	push	{r7, lr}
 802065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 802065c:	4802      	ldr	r0, [pc, #8]	; (8020668 <USART1_IRQHandler+0x10>)
 802065e:	f002 f8a1 	bl	80227a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8020662:	bf00      	nop
 8020664:	bd80      	pop	{r7, pc}
 8020666:	bf00      	nop
 8020668:	200022e4 	.word	0x200022e4

0802066c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 802066c:	b580      	push	{r7, lr}
 802066e:	b086      	sub	sp, #24
 8020670:	af00      	add	r7, sp, #0
 8020672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8020674:	4a14      	ldr	r2, [pc, #80]	; (80206c8 <_sbrk+0x5c>)
 8020676:	4b15      	ldr	r3, [pc, #84]	; (80206cc <_sbrk+0x60>)
 8020678:	1ad3      	subs	r3, r2, r3
 802067a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 802067c:	697b      	ldr	r3, [r7, #20]
 802067e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8020680:	4b13      	ldr	r3, [pc, #76]	; (80206d0 <_sbrk+0x64>)
 8020682:	681b      	ldr	r3, [r3, #0]
 8020684:	2b00      	cmp	r3, #0
 8020686:	d102      	bne.n	802068e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8020688:	4b11      	ldr	r3, [pc, #68]	; (80206d0 <_sbrk+0x64>)
 802068a:	4a12      	ldr	r2, [pc, #72]	; (80206d4 <_sbrk+0x68>)
 802068c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 802068e:	4b10      	ldr	r3, [pc, #64]	; (80206d0 <_sbrk+0x64>)
 8020690:	681a      	ldr	r2, [r3, #0]
 8020692:	687b      	ldr	r3, [r7, #4]
 8020694:	4413      	add	r3, r2
 8020696:	693a      	ldr	r2, [r7, #16]
 8020698:	429a      	cmp	r2, r3
 802069a:	d207      	bcs.n	80206ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 802069c:	f002 fca2 	bl	8022fe4 <__errno>
 80206a0:	4603      	mov	r3, r0
 80206a2:	220c      	movs	r2, #12
 80206a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80206a6:	f04f 33ff 	mov.w	r3, #4294967295
 80206aa:	e009      	b.n	80206c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80206ac:	4b08      	ldr	r3, [pc, #32]	; (80206d0 <_sbrk+0x64>)
 80206ae:	681b      	ldr	r3, [r3, #0]
 80206b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80206b2:	4b07      	ldr	r3, [pc, #28]	; (80206d0 <_sbrk+0x64>)
 80206b4:	681a      	ldr	r2, [r3, #0]
 80206b6:	687b      	ldr	r3, [r7, #4]
 80206b8:	4413      	add	r3, r2
 80206ba:	4a05      	ldr	r2, [pc, #20]	; (80206d0 <_sbrk+0x64>)
 80206bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80206be:	68fb      	ldr	r3, [r7, #12]
}
 80206c0:	4618      	mov	r0, r3
 80206c2:	3718      	adds	r7, #24
 80206c4:	46bd      	mov	sp, r7
 80206c6:	bd80      	pop	{r7, pc}
 80206c8:	20010000 	.word	0x20010000
 80206cc:	00000400 	.word	0x00000400
 80206d0:	200011bc 	.word	0x200011bc
 80206d4:	20004288 	.word	0x20004288

080206d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80206d8:	b480      	push	{r7}
 80206da:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 80206dc:	4b03      	ldr	r3, [pc, #12]	; (80206ec <SystemInit+0x14>)
 80206de:	4a04      	ldr	r2, [pc, #16]	; (80206f0 <SystemInit+0x18>)
 80206e0:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80206e2:	bf00      	nop
 80206e4:	46bd      	mov	sp, r7
 80206e6:	bc80      	pop	{r7}
 80206e8:	4770      	bx	lr
 80206ea:	bf00      	nop
 80206ec:	e000ed00 	.word	0xe000ed00
 80206f0:	0801e000 	.word	0x0801e000

080206f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80206f4:	480c      	ldr	r0, [pc, #48]	; (8020728 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80206f6:	490d      	ldr	r1, [pc, #52]	; (802072c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80206f8:	4a0d      	ldr	r2, [pc, #52]	; (8020730 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80206fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80206fc:	e002      	b.n	8020704 <LoopCopyDataInit>

080206fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80206fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8020700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8020702:	3304      	adds	r3, #4

08020704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8020704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8020706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8020708:	d3f9      	bcc.n	80206fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802070a:	4a0a      	ldr	r2, [pc, #40]	; (8020734 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 802070c:	4c0a      	ldr	r4, [pc, #40]	; (8020738 <LoopFillZerobss+0x22>)
  movs r3, #0
 802070e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8020710:	e001      	b.n	8020716 <LoopFillZerobss>

08020712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8020712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8020714:	3204      	adds	r2, #4

08020716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8020716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8020718:	d3fb      	bcc.n	8020712 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 802071a:	f7ff ffdd 	bl	80206d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 802071e:	f002 fc67 	bl	8022ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8020722:	f7ff fe1b 	bl	802035c <main>
  bx lr
 8020726:	4770      	bx	lr
  ldr r0, =_sdata
 8020728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 802072c:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8020730:	08023fd0 	.word	0x08023fd0
  ldr r2, =_sbss
 8020734:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8020738:	20004288 	.word	0x20004288

0802073c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 802073c:	e7fe      	b.n	802073c <ADC1_2_IRQHandler>
	...

08020740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8020740:	b580      	push	{r7, lr}
 8020742:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8020744:	4b08      	ldr	r3, [pc, #32]	; (8020768 <HAL_Init+0x28>)
 8020746:	681b      	ldr	r3, [r3, #0]
 8020748:	4a07      	ldr	r2, [pc, #28]	; (8020768 <HAL_Init+0x28>)
 802074a:	f043 0310 	orr.w	r3, r3, #16
 802074e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8020750:	2003      	movs	r0, #3
 8020752:	f000 f947 	bl	80209e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8020756:	200f      	movs	r0, #15
 8020758:	f000 f808 	bl	802076c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 802075c:	f7ff fe22 	bl	80203a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8020760:	2300      	movs	r3, #0
}
 8020762:	4618      	mov	r0, r3
 8020764:	bd80      	pop	{r7, pc}
 8020766:	bf00      	nop
 8020768:	40022000 	.word	0x40022000

0802076c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 802076c:	b580      	push	{r7, lr}
 802076e:	b082      	sub	sp, #8
 8020770:	af00      	add	r7, sp, #0
 8020772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8020774:	4b12      	ldr	r3, [pc, #72]	; (80207c0 <HAL_InitTick+0x54>)
 8020776:	681a      	ldr	r2, [r3, #0]
 8020778:	4b12      	ldr	r3, [pc, #72]	; (80207c4 <HAL_InitTick+0x58>)
 802077a:	781b      	ldrb	r3, [r3, #0]
 802077c:	4619      	mov	r1, r3
 802077e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8020782:	fbb3 f3f1 	udiv	r3, r3, r1
 8020786:	fbb2 f3f3 	udiv	r3, r2, r3
 802078a:	4618      	mov	r0, r3
 802078c:	f000 f95f 	bl	8020a4e <HAL_SYSTICK_Config>
 8020790:	4603      	mov	r3, r0
 8020792:	2b00      	cmp	r3, #0
 8020794:	d001      	beq.n	802079a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8020796:	2301      	movs	r3, #1
 8020798:	e00e      	b.n	80207b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802079a:	687b      	ldr	r3, [r7, #4]
 802079c:	2b0f      	cmp	r3, #15
 802079e:	d80a      	bhi.n	80207b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80207a0:	2200      	movs	r2, #0
 80207a2:	6879      	ldr	r1, [r7, #4]
 80207a4:	f04f 30ff 	mov.w	r0, #4294967295
 80207a8:	f000 f927 	bl	80209fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80207ac:	4a06      	ldr	r2, [pc, #24]	; (80207c8 <HAL_InitTick+0x5c>)
 80207ae:	687b      	ldr	r3, [r7, #4]
 80207b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80207b2:	2300      	movs	r3, #0
 80207b4:	e000      	b.n	80207b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80207b6:	2301      	movs	r3, #1
}
 80207b8:	4618      	mov	r0, r3
 80207ba:	3708      	adds	r7, #8
 80207bc:	46bd      	mov	sp, r7
 80207be:	bd80      	pop	{r7, pc}
 80207c0:	200000f4 	.word	0x200000f4
 80207c4:	200000fc 	.word	0x200000fc
 80207c8:	200000f8 	.word	0x200000f8

080207cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80207cc:	b480      	push	{r7}
 80207ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80207d0:	4b05      	ldr	r3, [pc, #20]	; (80207e8 <HAL_IncTick+0x1c>)
 80207d2:	781b      	ldrb	r3, [r3, #0]
 80207d4:	461a      	mov	r2, r3
 80207d6:	4b05      	ldr	r3, [pc, #20]	; (80207ec <HAL_IncTick+0x20>)
 80207d8:	681b      	ldr	r3, [r3, #0]
 80207da:	4413      	add	r3, r2
 80207dc:	4a03      	ldr	r2, [pc, #12]	; (80207ec <HAL_IncTick+0x20>)
 80207de:	6013      	str	r3, [r2, #0]
}
 80207e0:	bf00      	nop
 80207e2:	46bd      	mov	sp, r7
 80207e4:	bc80      	pop	{r7}
 80207e6:	4770      	bx	lr
 80207e8:	200000fc 	.word	0x200000fc
 80207ec:	20004254 	.word	0x20004254

080207f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80207f0:	b480      	push	{r7}
 80207f2:	af00      	add	r7, sp, #0
  return uwTick;
 80207f4:	4b02      	ldr	r3, [pc, #8]	; (8020800 <HAL_GetTick+0x10>)
 80207f6:	681b      	ldr	r3, [r3, #0]
}
 80207f8:	4618      	mov	r0, r3
 80207fa:	46bd      	mov	sp, r7
 80207fc:	bc80      	pop	{r7}
 80207fe:	4770      	bx	lr
 8020800:	20004254 	.word	0x20004254

08020804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8020804:	b580      	push	{r7, lr}
 8020806:	b084      	sub	sp, #16
 8020808:	af00      	add	r7, sp, #0
 802080a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 802080c:	f7ff fff0 	bl	80207f0 <HAL_GetTick>
 8020810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8020812:	687b      	ldr	r3, [r7, #4]
 8020814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8020816:	68fb      	ldr	r3, [r7, #12]
 8020818:	f1b3 3fff 	cmp.w	r3, #4294967295
 802081c:	d005      	beq.n	802082a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802081e:	4b0a      	ldr	r3, [pc, #40]	; (8020848 <HAL_Delay+0x44>)
 8020820:	781b      	ldrb	r3, [r3, #0]
 8020822:	461a      	mov	r2, r3
 8020824:	68fb      	ldr	r3, [r7, #12]
 8020826:	4413      	add	r3, r2
 8020828:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 802082a:	bf00      	nop
 802082c:	f7ff ffe0 	bl	80207f0 <HAL_GetTick>
 8020830:	4602      	mov	r2, r0
 8020832:	68bb      	ldr	r3, [r7, #8]
 8020834:	1ad3      	subs	r3, r2, r3
 8020836:	68fa      	ldr	r2, [r7, #12]
 8020838:	429a      	cmp	r2, r3
 802083a:	d8f7      	bhi.n	802082c <HAL_Delay+0x28>
  {
  }
}
 802083c:	bf00      	nop
 802083e:	bf00      	nop
 8020840:	3710      	adds	r7, #16
 8020842:	46bd      	mov	sp, r7
 8020844:	bd80      	pop	{r7, pc}
 8020846:	bf00      	nop
 8020848:	200000fc 	.word	0x200000fc

0802084c <__NVIC_SetPriorityGrouping>:
{
 802084c:	b480      	push	{r7}
 802084e:	b085      	sub	sp, #20
 8020850:	af00      	add	r7, sp, #0
 8020852:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8020854:	687b      	ldr	r3, [r7, #4]
 8020856:	f003 0307 	and.w	r3, r3, #7
 802085a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802085c:	4b0c      	ldr	r3, [pc, #48]	; (8020890 <__NVIC_SetPriorityGrouping+0x44>)
 802085e:	68db      	ldr	r3, [r3, #12]
 8020860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8020862:	68ba      	ldr	r2, [r7, #8]
 8020864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8020868:	4013      	ands	r3, r2
 802086a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 802086c:	68fb      	ldr	r3, [r7, #12]
 802086e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8020870:	68bb      	ldr	r3, [r7, #8]
 8020872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8020874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8020878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802087c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802087e:	4a04      	ldr	r2, [pc, #16]	; (8020890 <__NVIC_SetPriorityGrouping+0x44>)
 8020880:	68bb      	ldr	r3, [r7, #8]
 8020882:	60d3      	str	r3, [r2, #12]
}
 8020884:	bf00      	nop
 8020886:	3714      	adds	r7, #20
 8020888:	46bd      	mov	sp, r7
 802088a:	bc80      	pop	{r7}
 802088c:	4770      	bx	lr
 802088e:	bf00      	nop
 8020890:	e000ed00 	.word	0xe000ed00

08020894 <__NVIC_GetPriorityGrouping>:
{
 8020894:	b480      	push	{r7}
 8020896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020898:	4b04      	ldr	r3, [pc, #16]	; (80208ac <__NVIC_GetPriorityGrouping+0x18>)
 802089a:	68db      	ldr	r3, [r3, #12]
 802089c:	0a1b      	lsrs	r3, r3, #8
 802089e:	f003 0307 	and.w	r3, r3, #7
}
 80208a2:	4618      	mov	r0, r3
 80208a4:	46bd      	mov	sp, r7
 80208a6:	bc80      	pop	{r7}
 80208a8:	4770      	bx	lr
 80208aa:	bf00      	nop
 80208ac:	e000ed00 	.word	0xe000ed00

080208b0 <__NVIC_EnableIRQ>:
{
 80208b0:	b480      	push	{r7}
 80208b2:	b083      	sub	sp, #12
 80208b4:	af00      	add	r7, sp, #0
 80208b6:	4603      	mov	r3, r0
 80208b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80208ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80208be:	2b00      	cmp	r3, #0
 80208c0:	db0b      	blt.n	80208da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80208c2:	79fb      	ldrb	r3, [r7, #7]
 80208c4:	f003 021f 	and.w	r2, r3, #31
 80208c8:	4906      	ldr	r1, [pc, #24]	; (80208e4 <__NVIC_EnableIRQ+0x34>)
 80208ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80208ce:	095b      	lsrs	r3, r3, #5
 80208d0:	2001      	movs	r0, #1
 80208d2:	fa00 f202 	lsl.w	r2, r0, r2
 80208d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80208da:	bf00      	nop
 80208dc:	370c      	adds	r7, #12
 80208de:	46bd      	mov	sp, r7
 80208e0:	bc80      	pop	{r7}
 80208e2:	4770      	bx	lr
 80208e4:	e000e100 	.word	0xe000e100

080208e8 <__NVIC_SetPriority>:
{
 80208e8:	b480      	push	{r7}
 80208ea:	b083      	sub	sp, #12
 80208ec:	af00      	add	r7, sp, #0
 80208ee:	4603      	mov	r3, r0
 80208f0:	6039      	str	r1, [r7, #0]
 80208f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80208f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80208f8:	2b00      	cmp	r3, #0
 80208fa:	db0a      	blt.n	8020912 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80208fc:	683b      	ldr	r3, [r7, #0]
 80208fe:	b2da      	uxtb	r2, r3
 8020900:	490c      	ldr	r1, [pc, #48]	; (8020934 <__NVIC_SetPriority+0x4c>)
 8020902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020906:	0112      	lsls	r2, r2, #4
 8020908:	b2d2      	uxtb	r2, r2
 802090a:	440b      	add	r3, r1
 802090c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8020910:	e00a      	b.n	8020928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020912:	683b      	ldr	r3, [r7, #0]
 8020914:	b2da      	uxtb	r2, r3
 8020916:	4908      	ldr	r1, [pc, #32]	; (8020938 <__NVIC_SetPriority+0x50>)
 8020918:	79fb      	ldrb	r3, [r7, #7]
 802091a:	f003 030f 	and.w	r3, r3, #15
 802091e:	3b04      	subs	r3, #4
 8020920:	0112      	lsls	r2, r2, #4
 8020922:	b2d2      	uxtb	r2, r2
 8020924:	440b      	add	r3, r1
 8020926:	761a      	strb	r2, [r3, #24]
}
 8020928:	bf00      	nop
 802092a:	370c      	adds	r7, #12
 802092c:	46bd      	mov	sp, r7
 802092e:	bc80      	pop	{r7}
 8020930:	4770      	bx	lr
 8020932:	bf00      	nop
 8020934:	e000e100 	.word	0xe000e100
 8020938:	e000ed00 	.word	0xe000ed00

0802093c <NVIC_EncodePriority>:
{
 802093c:	b480      	push	{r7}
 802093e:	b089      	sub	sp, #36	; 0x24
 8020940:	af00      	add	r7, sp, #0
 8020942:	60f8      	str	r0, [r7, #12]
 8020944:	60b9      	str	r1, [r7, #8]
 8020946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8020948:	68fb      	ldr	r3, [r7, #12]
 802094a:	f003 0307 	and.w	r3, r3, #7
 802094e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020950:	69fb      	ldr	r3, [r7, #28]
 8020952:	f1c3 0307 	rsb	r3, r3, #7
 8020956:	2b04      	cmp	r3, #4
 8020958:	bf28      	it	cs
 802095a:	2304      	movcs	r3, #4
 802095c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802095e:	69fb      	ldr	r3, [r7, #28]
 8020960:	3304      	adds	r3, #4
 8020962:	2b06      	cmp	r3, #6
 8020964:	d902      	bls.n	802096c <NVIC_EncodePriority+0x30>
 8020966:	69fb      	ldr	r3, [r7, #28]
 8020968:	3b03      	subs	r3, #3
 802096a:	e000      	b.n	802096e <NVIC_EncodePriority+0x32>
 802096c:	2300      	movs	r3, #0
 802096e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020970:	f04f 32ff 	mov.w	r2, #4294967295
 8020974:	69bb      	ldr	r3, [r7, #24]
 8020976:	fa02 f303 	lsl.w	r3, r2, r3
 802097a:	43da      	mvns	r2, r3
 802097c:	68bb      	ldr	r3, [r7, #8]
 802097e:	401a      	ands	r2, r3
 8020980:	697b      	ldr	r3, [r7, #20]
 8020982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8020984:	f04f 31ff 	mov.w	r1, #4294967295
 8020988:	697b      	ldr	r3, [r7, #20]
 802098a:	fa01 f303 	lsl.w	r3, r1, r3
 802098e:	43d9      	mvns	r1, r3
 8020990:	687b      	ldr	r3, [r7, #4]
 8020992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020994:	4313      	orrs	r3, r2
}
 8020996:	4618      	mov	r0, r3
 8020998:	3724      	adds	r7, #36	; 0x24
 802099a:	46bd      	mov	sp, r7
 802099c:	bc80      	pop	{r7}
 802099e:	4770      	bx	lr

080209a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80209a0:	b580      	push	{r7, lr}
 80209a2:	b082      	sub	sp, #8
 80209a4:	af00      	add	r7, sp, #0
 80209a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80209a8:	687b      	ldr	r3, [r7, #4]
 80209aa:	3b01      	subs	r3, #1
 80209ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80209b0:	d301      	bcc.n	80209b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80209b2:	2301      	movs	r3, #1
 80209b4:	e00f      	b.n	80209d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80209b6:	4a0a      	ldr	r2, [pc, #40]	; (80209e0 <SysTick_Config+0x40>)
 80209b8:	687b      	ldr	r3, [r7, #4]
 80209ba:	3b01      	subs	r3, #1
 80209bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80209be:	210f      	movs	r1, #15
 80209c0:	f04f 30ff 	mov.w	r0, #4294967295
 80209c4:	f7ff ff90 	bl	80208e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80209c8:	4b05      	ldr	r3, [pc, #20]	; (80209e0 <SysTick_Config+0x40>)
 80209ca:	2200      	movs	r2, #0
 80209cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80209ce:	4b04      	ldr	r3, [pc, #16]	; (80209e0 <SysTick_Config+0x40>)
 80209d0:	2207      	movs	r2, #7
 80209d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80209d4:	2300      	movs	r3, #0
}
 80209d6:	4618      	mov	r0, r3
 80209d8:	3708      	adds	r7, #8
 80209da:	46bd      	mov	sp, r7
 80209dc:	bd80      	pop	{r7, pc}
 80209de:	bf00      	nop
 80209e0:	e000e010 	.word	0xe000e010

080209e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80209e4:	b580      	push	{r7, lr}
 80209e6:	b082      	sub	sp, #8
 80209e8:	af00      	add	r7, sp, #0
 80209ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80209ec:	6878      	ldr	r0, [r7, #4]
 80209ee:	f7ff ff2d 	bl	802084c <__NVIC_SetPriorityGrouping>
}
 80209f2:	bf00      	nop
 80209f4:	3708      	adds	r7, #8
 80209f6:	46bd      	mov	sp, r7
 80209f8:	bd80      	pop	{r7, pc}

080209fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80209fa:	b580      	push	{r7, lr}
 80209fc:	b086      	sub	sp, #24
 80209fe:	af00      	add	r7, sp, #0
 8020a00:	4603      	mov	r3, r0
 8020a02:	60b9      	str	r1, [r7, #8]
 8020a04:	607a      	str	r2, [r7, #4]
 8020a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8020a08:	2300      	movs	r3, #0
 8020a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8020a0c:	f7ff ff42 	bl	8020894 <__NVIC_GetPriorityGrouping>
 8020a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8020a12:	687a      	ldr	r2, [r7, #4]
 8020a14:	68b9      	ldr	r1, [r7, #8]
 8020a16:	6978      	ldr	r0, [r7, #20]
 8020a18:	f7ff ff90 	bl	802093c <NVIC_EncodePriority>
 8020a1c:	4602      	mov	r2, r0
 8020a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020a22:	4611      	mov	r1, r2
 8020a24:	4618      	mov	r0, r3
 8020a26:	f7ff ff5f 	bl	80208e8 <__NVIC_SetPriority>
}
 8020a2a:	bf00      	nop
 8020a2c:	3718      	adds	r7, #24
 8020a2e:	46bd      	mov	sp, r7
 8020a30:	bd80      	pop	{r7, pc}

08020a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8020a32:	b580      	push	{r7, lr}
 8020a34:	b082      	sub	sp, #8
 8020a36:	af00      	add	r7, sp, #0
 8020a38:	4603      	mov	r3, r0
 8020a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8020a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020a40:	4618      	mov	r0, r3
 8020a42:	f7ff ff35 	bl	80208b0 <__NVIC_EnableIRQ>
}
 8020a46:	bf00      	nop
 8020a48:	3708      	adds	r7, #8
 8020a4a:	46bd      	mov	sp, r7
 8020a4c:	bd80      	pop	{r7, pc}

08020a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8020a4e:	b580      	push	{r7, lr}
 8020a50:	b082      	sub	sp, #8
 8020a52:	af00      	add	r7, sp, #0
 8020a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8020a56:	6878      	ldr	r0, [r7, #4]
 8020a58:	f7ff ffa2 	bl	80209a0 <SysTick_Config>
 8020a5c:	4603      	mov	r3, r0
}
 8020a5e:	4618      	mov	r0, r3
 8020a60:	3708      	adds	r7, #8
 8020a62:	46bd      	mov	sp, r7
 8020a64:	bd80      	pop	{r7, pc}

08020a66 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8020a66:	b480      	push	{r7}
 8020a68:	b085      	sub	sp, #20
 8020a6a:	af00      	add	r7, sp, #0
 8020a6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8020a6e:	2300      	movs	r3, #0
 8020a70:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8020a72:	687b      	ldr	r3, [r7, #4]
 8020a74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8020a78:	2b02      	cmp	r3, #2
 8020a7a:	d008      	beq.n	8020a8e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8020a7c:	687b      	ldr	r3, [r7, #4]
 8020a7e:	2204      	movs	r2, #4
 8020a80:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8020a82:	687b      	ldr	r3, [r7, #4]
 8020a84:	2200      	movs	r2, #0
 8020a86:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8020a8a:	2301      	movs	r3, #1
 8020a8c:	e020      	b.n	8020ad0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8020a8e:	687b      	ldr	r3, [r7, #4]
 8020a90:	681b      	ldr	r3, [r3, #0]
 8020a92:	681a      	ldr	r2, [r3, #0]
 8020a94:	687b      	ldr	r3, [r7, #4]
 8020a96:	681b      	ldr	r3, [r3, #0]
 8020a98:	f022 020e 	bic.w	r2, r2, #14
 8020a9c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8020a9e:	687b      	ldr	r3, [r7, #4]
 8020aa0:	681b      	ldr	r3, [r3, #0]
 8020aa2:	681a      	ldr	r2, [r3, #0]
 8020aa4:	687b      	ldr	r3, [r7, #4]
 8020aa6:	681b      	ldr	r3, [r3, #0]
 8020aa8:	f022 0201 	bic.w	r2, r2, #1
 8020aac:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8020aae:	687b      	ldr	r3, [r7, #4]
 8020ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8020ab2:	687b      	ldr	r3, [r7, #4]
 8020ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020ab6:	2101      	movs	r1, #1
 8020ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8020abc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8020abe:	687b      	ldr	r3, [r7, #4]
 8020ac0:	2201      	movs	r2, #1
 8020ac2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8020ac6:	687b      	ldr	r3, [r7, #4]
 8020ac8:	2200      	movs	r2, #0
 8020aca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8020ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8020ad0:	4618      	mov	r0, r3
 8020ad2:	3714      	adds	r7, #20
 8020ad4:	46bd      	mov	sp, r7
 8020ad6:	bc80      	pop	{r7}
 8020ad8:	4770      	bx	lr
	...

08020adc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8020adc:	b580      	push	{r7, lr}
 8020ade:	b084      	sub	sp, #16
 8020ae0:	af00      	add	r7, sp, #0
 8020ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8020ae4:	2300      	movs	r3, #0
 8020ae6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8020ae8:	687b      	ldr	r3, [r7, #4]
 8020aea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8020aee:	2b02      	cmp	r3, #2
 8020af0:	d005      	beq.n	8020afe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8020af2:	687b      	ldr	r3, [r7, #4]
 8020af4:	2204      	movs	r2, #4
 8020af6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8020af8:	2301      	movs	r3, #1
 8020afa:	73fb      	strb	r3, [r7, #15]
 8020afc:	e0d6      	b.n	8020cac <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8020afe:	687b      	ldr	r3, [r7, #4]
 8020b00:	681b      	ldr	r3, [r3, #0]
 8020b02:	681a      	ldr	r2, [r3, #0]
 8020b04:	687b      	ldr	r3, [r7, #4]
 8020b06:	681b      	ldr	r3, [r3, #0]
 8020b08:	f022 020e 	bic.w	r2, r2, #14
 8020b0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8020b0e:	687b      	ldr	r3, [r7, #4]
 8020b10:	681b      	ldr	r3, [r3, #0]
 8020b12:	681a      	ldr	r2, [r3, #0]
 8020b14:	687b      	ldr	r3, [r7, #4]
 8020b16:	681b      	ldr	r3, [r3, #0]
 8020b18:	f022 0201 	bic.w	r2, r2, #1
 8020b1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8020b1e:	687b      	ldr	r3, [r7, #4]
 8020b20:	681b      	ldr	r3, [r3, #0]
 8020b22:	461a      	mov	r2, r3
 8020b24:	4b64      	ldr	r3, [pc, #400]	; (8020cb8 <HAL_DMA_Abort_IT+0x1dc>)
 8020b26:	429a      	cmp	r2, r3
 8020b28:	d958      	bls.n	8020bdc <HAL_DMA_Abort_IT+0x100>
 8020b2a:	687b      	ldr	r3, [r7, #4]
 8020b2c:	681b      	ldr	r3, [r3, #0]
 8020b2e:	4a63      	ldr	r2, [pc, #396]	; (8020cbc <HAL_DMA_Abort_IT+0x1e0>)
 8020b30:	4293      	cmp	r3, r2
 8020b32:	d04f      	beq.n	8020bd4 <HAL_DMA_Abort_IT+0xf8>
 8020b34:	687b      	ldr	r3, [r7, #4]
 8020b36:	681b      	ldr	r3, [r3, #0]
 8020b38:	4a61      	ldr	r2, [pc, #388]	; (8020cc0 <HAL_DMA_Abort_IT+0x1e4>)
 8020b3a:	4293      	cmp	r3, r2
 8020b3c:	d048      	beq.n	8020bd0 <HAL_DMA_Abort_IT+0xf4>
 8020b3e:	687b      	ldr	r3, [r7, #4]
 8020b40:	681b      	ldr	r3, [r3, #0]
 8020b42:	4a60      	ldr	r2, [pc, #384]	; (8020cc4 <HAL_DMA_Abort_IT+0x1e8>)
 8020b44:	4293      	cmp	r3, r2
 8020b46:	d040      	beq.n	8020bca <HAL_DMA_Abort_IT+0xee>
 8020b48:	687b      	ldr	r3, [r7, #4]
 8020b4a:	681b      	ldr	r3, [r3, #0]
 8020b4c:	4a5e      	ldr	r2, [pc, #376]	; (8020cc8 <HAL_DMA_Abort_IT+0x1ec>)
 8020b4e:	4293      	cmp	r3, r2
 8020b50:	d038      	beq.n	8020bc4 <HAL_DMA_Abort_IT+0xe8>
 8020b52:	687b      	ldr	r3, [r7, #4]
 8020b54:	681b      	ldr	r3, [r3, #0]
 8020b56:	4a5d      	ldr	r2, [pc, #372]	; (8020ccc <HAL_DMA_Abort_IT+0x1f0>)
 8020b58:	4293      	cmp	r3, r2
 8020b5a:	d030      	beq.n	8020bbe <HAL_DMA_Abort_IT+0xe2>
 8020b5c:	687b      	ldr	r3, [r7, #4]
 8020b5e:	681b      	ldr	r3, [r3, #0]
 8020b60:	4a5b      	ldr	r2, [pc, #364]	; (8020cd0 <HAL_DMA_Abort_IT+0x1f4>)
 8020b62:	4293      	cmp	r3, r2
 8020b64:	d028      	beq.n	8020bb8 <HAL_DMA_Abort_IT+0xdc>
 8020b66:	687b      	ldr	r3, [r7, #4]
 8020b68:	681b      	ldr	r3, [r3, #0]
 8020b6a:	4a53      	ldr	r2, [pc, #332]	; (8020cb8 <HAL_DMA_Abort_IT+0x1dc>)
 8020b6c:	4293      	cmp	r3, r2
 8020b6e:	d020      	beq.n	8020bb2 <HAL_DMA_Abort_IT+0xd6>
 8020b70:	687b      	ldr	r3, [r7, #4]
 8020b72:	681b      	ldr	r3, [r3, #0]
 8020b74:	4a57      	ldr	r2, [pc, #348]	; (8020cd4 <HAL_DMA_Abort_IT+0x1f8>)
 8020b76:	4293      	cmp	r3, r2
 8020b78:	d019      	beq.n	8020bae <HAL_DMA_Abort_IT+0xd2>
 8020b7a:	687b      	ldr	r3, [r7, #4]
 8020b7c:	681b      	ldr	r3, [r3, #0]
 8020b7e:	4a56      	ldr	r2, [pc, #344]	; (8020cd8 <HAL_DMA_Abort_IT+0x1fc>)
 8020b80:	4293      	cmp	r3, r2
 8020b82:	d012      	beq.n	8020baa <HAL_DMA_Abort_IT+0xce>
 8020b84:	687b      	ldr	r3, [r7, #4]
 8020b86:	681b      	ldr	r3, [r3, #0]
 8020b88:	4a54      	ldr	r2, [pc, #336]	; (8020cdc <HAL_DMA_Abort_IT+0x200>)
 8020b8a:	4293      	cmp	r3, r2
 8020b8c:	d00a      	beq.n	8020ba4 <HAL_DMA_Abort_IT+0xc8>
 8020b8e:	687b      	ldr	r3, [r7, #4]
 8020b90:	681b      	ldr	r3, [r3, #0]
 8020b92:	4a53      	ldr	r2, [pc, #332]	; (8020ce0 <HAL_DMA_Abort_IT+0x204>)
 8020b94:	4293      	cmp	r3, r2
 8020b96:	d102      	bne.n	8020b9e <HAL_DMA_Abort_IT+0xc2>
 8020b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020b9c:	e01b      	b.n	8020bd6 <HAL_DMA_Abort_IT+0xfa>
 8020b9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8020ba2:	e018      	b.n	8020bd6 <HAL_DMA_Abort_IT+0xfa>
 8020ba4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8020ba8:	e015      	b.n	8020bd6 <HAL_DMA_Abort_IT+0xfa>
 8020baa:	2310      	movs	r3, #16
 8020bac:	e013      	b.n	8020bd6 <HAL_DMA_Abort_IT+0xfa>
 8020bae:	2301      	movs	r3, #1
 8020bb0:	e011      	b.n	8020bd6 <HAL_DMA_Abort_IT+0xfa>
 8020bb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8020bb6:	e00e      	b.n	8020bd6 <HAL_DMA_Abort_IT+0xfa>
 8020bb8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8020bbc:	e00b      	b.n	8020bd6 <HAL_DMA_Abort_IT+0xfa>
 8020bbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8020bc2:	e008      	b.n	8020bd6 <HAL_DMA_Abort_IT+0xfa>
 8020bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020bc8:	e005      	b.n	8020bd6 <HAL_DMA_Abort_IT+0xfa>
 8020bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8020bce:	e002      	b.n	8020bd6 <HAL_DMA_Abort_IT+0xfa>
 8020bd0:	2310      	movs	r3, #16
 8020bd2:	e000      	b.n	8020bd6 <HAL_DMA_Abort_IT+0xfa>
 8020bd4:	2301      	movs	r3, #1
 8020bd6:	4a43      	ldr	r2, [pc, #268]	; (8020ce4 <HAL_DMA_Abort_IT+0x208>)
 8020bd8:	6053      	str	r3, [r2, #4]
 8020bda:	e057      	b.n	8020c8c <HAL_DMA_Abort_IT+0x1b0>
 8020bdc:	687b      	ldr	r3, [r7, #4]
 8020bde:	681b      	ldr	r3, [r3, #0]
 8020be0:	4a36      	ldr	r2, [pc, #216]	; (8020cbc <HAL_DMA_Abort_IT+0x1e0>)
 8020be2:	4293      	cmp	r3, r2
 8020be4:	d04f      	beq.n	8020c86 <HAL_DMA_Abort_IT+0x1aa>
 8020be6:	687b      	ldr	r3, [r7, #4]
 8020be8:	681b      	ldr	r3, [r3, #0]
 8020bea:	4a35      	ldr	r2, [pc, #212]	; (8020cc0 <HAL_DMA_Abort_IT+0x1e4>)
 8020bec:	4293      	cmp	r3, r2
 8020bee:	d048      	beq.n	8020c82 <HAL_DMA_Abort_IT+0x1a6>
 8020bf0:	687b      	ldr	r3, [r7, #4]
 8020bf2:	681b      	ldr	r3, [r3, #0]
 8020bf4:	4a33      	ldr	r2, [pc, #204]	; (8020cc4 <HAL_DMA_Abort_IT+0x1e8>)
 8020bf6:	4293      	cmp	r3, r2
 8020bf8:	d040      	beq.n	8020c7c <HAL_DMA_Abort_IT+0x1a0>
 8020bfa:	687b      	ldr	r3, [r7, #4]
 8020bfc:	681b      	ldr	r3, [r3, #0]
 8020bfe:	4a32      	ldr	r2, [pc, #200]	; (8020cc8 <HAL_DMA_Abort_IT+0x1ec>)
 8020c00:	4293      	cmp	r3, r2
 8020c02:	d038      	beq.n	8020c76 <HAL_DMA_Abort_IT+0x19a>
 8020c04:	687b      	ldr	r3, [r7, #4]
 8020c06:	681b      	ldr	r3, [r3, #0]
 8020c08:	4a30      	ldr	r2, [pc, #192]	; (8020ccc <HAL_DMA_Abort_IT+0x1f0>)
 8020c0a:	4293      	cmp	r3, r2
 8020c0c:	d030      	beq.n	8020c70 <HAL_DMA_Abort_IT+0x194>
 8020c0e:	687b      	ldr	r3, [r7, #4]
 8020c10:	681b      	ldr	r3, [r3, #0]
 8020c12:	4a2f      	ldr	r2, [pc, #188]	; (8020cd0 <HAL_DMA_Abort_IT+0x1f4>)
 8020c14:	4293      	cmp	r3, r2
 8020c16:	d028      	beq.n	8020c6a <HAL_DMA_Abort_IT+0x18e>
 8020c18:	687b      	ldr	r3, [r7, #4]
 8020c1a:	681b      	ldr	r3, [r3, #0]
 8020c1c:	4a26      	ldr	r2, [pc, #152]	; (8020cb8 <HAL_DMA_Abort_IT+0x1dc>)
 8020c1e:	4293      	cmp	r3, r2
 8020c20:	d020      	beq.n	8020c64 <HAL_DMA_Abort_IT+0x188>
 8020c22:	687b      	ldr	r3, [r7, #4]
 8020c24:	681b      	ldr	r3, [r3, #0]
 8020c26:	4a2b      	ldr	r2, [pc, #172]	; (8020cd4 <HAL_DMA_Abort_IT+0x1f8>)
 8020c28:	4293      	cmp	r3, r2
 8020c2a:	d019      	beq.n	8020c60 <HAL_DMA_Abort_IT+0x184>
 8020c2c:	687b      	ldr	r3, [r7, #4]
 8020c2e:	681b      	ldr	r3, [r3, #0]
 8020c30:	4a29      	ldr	r2, [pc, #164]	; (8020cd8 <HAL_DMA_Abort_IT+0x1fc>)
 8020c32:	4293      	cmp	r3, r2
 8020c34:	d012      	beq.n	8020c5c <HAL_DMA_Abort_IT+0x180>
 8020c36:	687b      	ldr	r3, [r7, #4]
 8020c38:	681b      	ldr	r3, [r3, #0]
 8020c3a:	4a28      	ldr	r2, [pc, #160]	; (8020cdc <HAL_DMA_Abort_IT+0x200>)
 8020c3c:	4293      	cmp	r3, r2
 8020c3e:	d00a      	beq.n	8020c56 <HAL_DMA_Abort_IT+0x17a>
 8020c40:	687b      	ldr	r3, [r7, #4]
 8020c42:	681b      	ldr	r3, [r3, #0]
 8020c44:	4a26      	ldr	r2, [pc, #152]	; (8020ce0 <HAL_DMA_Abort_IT+0x204>)
 8020c46:	4293      	cmp	r3, r2
 8020c48:	d102      	bne.n	8020c50 <HAL_DMA_Abort_IT+0x174>
 8020c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020c4e:	e01b      	b.n	8020c88 <HAL_DMA_Abort_IT+0x1ac>
 8020c50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8020c54:	e018      	b.n	8020c88 <HAL_DMA_Abort_IT+0x1ac>
 8020c56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8020c5a:	e015      	b.n	8020c88 <HAL_DMA_Abort_IT+0x1ac>
 8020c5c:	2310      	movs	r3, #16
 8020c5e:	e013      	b.n	8020c88 <HAL_DMA_Abort_IT+0x1ac>
 8020c60:	2301      	movs	r3, #1
 8020c62:	e011      	b.n	8020c88 <HAL_DMA_Abort_IT+0x1ac>
 8020c64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8020c68:	e00e      	b.n	8020c88 <HAL_DMA_Abort_IT+0x1ac>
 8020c6a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8020c6e:	e00b      	b.n	8020c88 <HAL_DMA_Abort_IT+0x1ac>
 8020c70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8020c74:	e008      	b.n	8020c88 <HAL_DMA_Abort_IT+0x1ac>
 8020c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020c7a:	e005      	b.n	8020c88 <HAL_DMA_Abort_IT+0x1ac>
 8020c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8020c80:	e002      	b.n	8020c88 <HAL_DMA_Abort_IT+0x1ac>
 8020c82:	2310      	movs	r3, #16
 8020c84:	e000      	b.n	8020c88 <HAL_DMA_Abort_IT+0x1ac>
 8020c86:	2301      	movs	r3, #1
 8020c88:	4a17      	ldr	r2, [pc, #92]	; (8020ce8 <HAL_DMA_Abort_IT+0x20c>)
 8020c8a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8020c8c:	687b      	ldr	r3, [r7, #4]
 8020c8e:	2201      	movs	r2, #1
 8020c90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8020c94:	687b      	ldr	r3, [r7, #4]
 8020c96:	2200      	movs	r2, #0
 8020c98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8020c9c:	687b      	ldr	r3, [r7, #4]
 8020c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020ca0:	2b00      	cmp	r3, #0
 8020ca2:	d003      	beq.n	8020cac <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8020ca4:	687b      	ldr	r3, [r7, #4]
 8020ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020ca8:	6878      	ldr	r0, [r7, #4]
 8020caa:	4798      	blx	r3
    } 
  }
  return status;
 8020cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8020cae:	4618      	mov	r0, r3
 8020cb0:	3710      	adds	r7, #16
 8020cb2:	46bd      	mov	sp, r7
 8020cb4:	bd80      	pop	{r7, pc}
 8020cb6:	bf00      	nop
 8020cb8:	40020080 	.word	0x40020080
 8020cbc:	40020008 	.word	0x40020008
 8020cc0:	4002001c 	.word	0x4002001c
 8020cc4:	40020030 	.word	0x40020030
 8020cc8:	40020044 	.word	0x40020044
 8020ccc:	40020058 	.word	0x40020058
 8020cd0:	4002006c 	.word	0x4002006c
 8020cd4:	40020408 	.word	0x40020408
 8020cd8:	4002041c 	.word	0x4002041c
 8020cdc:	40020430 	.word	0x40020430
 8020ce0:	40020444 	.word	0x40020444
 8020ce4:	40020400 	.word	0x40020400
 8020ce8:	40020000 	.word	0x40020000

08020cec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8020cec:	b480      	push	{r7}
 8020cee:	b083      	sub	sp, #12
 8020cf0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8020cf2:	2300      	movs	r3, #0
 8020cf4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8020cf6:	4b0d      	ldr	r3, [pc, #52]	; (8020d2c <HAL_FLASH_Unlock+0x40>)
 8020cf8:	691b      	ldr	r3, [r3, #16]
 8020cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020cfe:	2b00      	cmp	r3, #0
 8020d00:	d00d      	beq.n	8020d1e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8020d02:	4b0a      	ldr	r3, [pc, #40]	; (8020d2c <HAL_FLASH_Unlock+0x40>)
 8020d04:	4a0a      	ldr	r2, [pc, #40]	; (8020d30 <HAL_FLASH_Unlock+0x44>)
 8020d06:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8020d08:	4b08      	ldr	r3, [pc, #32]	; (8020d2c <HAL_FLASH_Unlock+0x40>)
 8020d0a:	4a0a      	ldr	r2, [pc, #40]	; (8020d34 <HAL_FLASH_Unlock+0x48>)
 8020d0c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8020d0e:	4b07      	ldr	r3, [pc, #28]	; (8020d2c <HAL_FLASH_Unlock+0x40>)
 8020d10:	691b      	ldr	r3, [r3, #16]
 8020d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020d16:	2b00      	cmp	r3, #0
 8020d18:	d001      	beq.n	8020d1e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8020d1a:	2301      	movs	r3, #1
 8020d1c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8020d1e:	79fb      	ldrb	r3, [r7, #7]
}
 8020d20:	4618      	mov	r0, r3
 8020d22:	370c      	adds	r7, #12
 8020d24:	46bd      	mov	sp, r7
 8020d26:	bc80      	pop	{r7}
 8020d28:	4770      	bx	lr
 8020d2a:	bf00      	nop
 8020d2c:	40022000 	.word	0x40022000
 8020d30:	45670123 	.word	0x45670123
 8020d34:	cdef89ab 	.word	0xcdef89ab

08020d38 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8020d38:	b480      	push	{r7}
 8020d3a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8020d3c:	4b05      	ldr	r3, [pc, #20]	; (8020d54 <HAL_FLASH_Lock+0x1c>)
 8020d3e:	691b      	ldr	r3, [r3, #16]
 8020d40:	4a04      	ldr	r2, [pc, #16]	; (8020d54 <HAL_FLASH_Lock+0x1c>)
 8020d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020d46:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8020d48:	2300      	movs	r3, #0
}
 8020d4a:	4618      	mov	r0, r3
 8020d4c:	46bd      	mov	sp, r7
 8020d4e:	bc80      	pop	{r7}
 8020d50:	4770      	bx	lr
 8020d52:	bf00      	nop
 8020d54:	40022000 	.word	0x40022000

08020d58 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8020d58:	b580      	push	{r7, lr}
 8020d5a:	b084      	sub	sp, #16
 8020d5c:	af00      	add	r7, sp, #0
 8020d5e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8020d60:	f7ff fd46 	bl	80207f0 <HAL_GetTick>
 8020d64:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8020d66:	e010      	b.n	8020d8a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8020d68:	687b      	ldr	r3, [r7, #4]
 8020d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020d6e:	d00c      	beq.n	8020d8a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8020d70:	687b      	ldr	r3, [r7, #4]
 8020d72:	2b00      	cmp	r3, #0
 8020d74:	d007      	beq.n	8020d86 <FLASH_WaitForLastOperation+0x2e>
 8020d76:	f7ff fd3b 	bl	80207f0 <HAL_GetTick>
 8020d7a:	4602      	mov	r2, r0
 8020d7c:	68fb      	ldr	r3, [r7, #12]
 8020d7e:	1ad3      	subs	r3, r2, r3
 8020d80:	687a      	ldr	r2, [r7, #4]
 8020d82:	429a      	cmp	r2, r3
 8020d84:	d201      	bcs.n	8020d8a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8020d86:	2303      	movs	r3, #3
 8020d88:	e025      	b.n	8020dd6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8020d8a:	4b15      	ldr	r3, [pc, #84]	; (8020de0 <FLASH_WaitForLastOperation+0x88>)
 8020d8c:	68db      	ldr	r3, [r3, #12]
 8020d8e:	f003 0301 	and.w	r3, r3, #1
 8020d92:	2b00      	cmp	r3, #0
 8020d94:	d1e8      	bne.n	8020d68 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8020d96:	4b12      	ldr	r3, [pc, #72]	; (8020de0 <FLASH_WaitForLastOperation+0x88>)
 8020d98:	68db      	ldr	r3, [r3, #12]
 8020d9a:	f003 0320 	and.w	r3, r3, #32
 8020d9e:	2b00      	cmp	r3, #0
 8020da0:	d002      	beq.n	8020da8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8020da2:	4b0f      	ldr	r3, [pc, #60]	; (8020de0 <FLASH_WaitForLastOperation+0x88>)
 8020da4:	2220      	movs	r2, #32
 8020da6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8020da8:	4b0d      	ldr	r3, [pc, #52]	; (8020de0 <FLASH_WaitForLastOperation+0x88>)
 8020daa:	68db      	ldr	r3, [r3, #12]
 8020dac:	f003 0310 	and.w	r3, r3, #16
 8020db0:	2b00      	cmp	r3, #0
 8020db2:	d10b      	bne.n	8020dcc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8020db4:	4b0a      	ldr	r3, [pc, #40]	; (8020de0 <FLASH_WaitForLastOperation+0x88>)
 8020db6:	69db      	ldr	r3, [r3, #28]
 8020db8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8020dbc:	2b00      	cmp	r3, #0
 8020dbe:	d105      	bne.n	8020dcc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8020dc0:	4b07      	ldr	r3, [pc, #28]	; (8020de0 <FLASH_WaitForLastOperation+0x88>)
 8020dc2:	68db      	ldr	r3, [r3, #12]
 8020dc4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8020dc8:	2b00      	cmp	r3, #0
 8020dca:	d003      	beq.n	8020dd4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8020dcc:	f000 f80a 	bl	8020de4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8020dd0:	2301      	movs	r3, #1
 8020dd2:	e000      	b.n	8020dd6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8020dd4:	2300      	movs	r3, #0
}
 8020dd6:	4618      	mov	r0, r3
 8020dd8:	3710      	adds	r7, #16
 8020dda:	46bd      	mov	sp, r7
 8020ddc:	bd80      	pop	{r7, pc}
 8020dde:	bf00      	nop
 8020de0:	40022000 	.word	0x40022000

08020de4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8020de4:	b480      	push	{r7}
 8020de6:	b083      	sub	sp, #12
 8020de8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8020dea:	2300      	movs	r3, #0
 8020dec:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8020dee:	4b23      	ldr	r3, [pc, #140]	; (8020e7c <FLASH_SetErrorCode+0x98>)
 8020df0:	68db      	ldr	r3, [r3, #12]
 8020df2:	f003 0310 	and.w	r3, r3, #16
 8020df6:	2b00      	cmp	r3, #0
 8020df8:	d009      	beq.n	8020e0e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8020dfa:	4b21      	ldr	r3, [pc, #132]	; (8020e80 <FLASH_SetErrorCode+0x9c>)
 8020dfc:	69db      	ldr	r3, [r3, #28]
 8020dfe:	f043 0302 	orr.w	r3, r3, #2
 8020e02:	4a1f      	ldr	r2, [pc, #124]	; (8020e80 <FLASH_SetErrorCode+0x9c>)
 8020e04:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8020e06:	687b      	ldr	r3, [r7, #4]
 8020e08:	f043 0310 	orr.w	r3, r3, #16
 8020e0c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8020e0e:	4b1b      	ldr	r3, [pc, #108]	; (8020e7c <FLASH_SetErrorCode+0x98>)
 8020e10:	68db      	ldr	r3, [r3, #12]
 8020e12:	f003 0304 	and.w	r3, r3, #4
 8020e16:	2b00      	cmp	r3, #0
 8020e18:	d009      	beq.n	8020e2e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8020e1a:	4b19      	ldr	r3, [pc, #100]	; (8020e80 <FLASH_SetErrorCode+0x9c>)
 8020e1c:	69db      	ldr	r3, [r3, #28]
 8020e1e:	f043 0301 	orr.w	r3, r3, #1
 8020e22:	4a17      	ldr	r2, [pc, #92]	; (8020e80 <FLASH_SetErrorCode+0x9c>)
 8020e24:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8020e26:	687b      	ldr	r3, [r7, #4]
 8020e28:	f043 0304 	orr.w	r3, r3, #4
 8020e2c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8020e2e:	4b13      	ldr	r3, [pc, #76]	; (8020e7c <FLASH_SetErrorCode+0x98>)
 8020e30:	69db      	ldr	r3, [r3, #28]
 8020e32:	f003 0301 	and.w	r3, r3, #1
 8020e36:	2b00      	cmp	r3, #0
 8020e38:	d00b      	beq.n	8020e52 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8020e3a:	4b11      	ldr	r3, [pc, #68]	; (8020e80 <FLASH_SetErrorCode+0x9c>)
 8020e3c:	69db      	ldr	r3, [r3, #28]
 8020e3e:	f043 0304 	orr.w	r3, r3, #4
 8020e42:	4a0f      	ldr	r2, [pc, #60]	; (8020e80 <FLASH_SetErrorCode+0x9c>)
 8020e44:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8020e46:	4b0d      	ldr	r3, [pc, #52]	; (8020e7c <FLASH_SetErrorCode+0x98>)
 8020e48:	69db      	ldr	r3, [r3, #28]
 8020e4a:	4a0c      	ldr	r2, [pc, #48]	; (8020e7c <FLASH_SetErrorCode+0x98>)
 8020e4c:	f023 0301 	bic.w	r3, r3, #1
 8020e50:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8020e52:	687b      	ldr	r3, [r7, #4]
 8020e54:	f240 1201 	movw	r2, #257	; 0x101
 8020e58:	4293      	cmp	r3, r2
 8020e5a:	d106      	bne.n	8020e6a <FLASH_SetErrorCode+0x86>
 8020e5c:	4b07      	ldr	r3, [pc, #28]	; (8020e7c <FLASH_SetErrorCode+0x98>)
 8020e5e:	69db      	ldr	r3, [r3, #28]
 8020e60:	4a06      	ldr	r2, [pc, #24]	; (8020e7c <FLASH_SetErrorCode+0x98>)
 8020e62:	f023 0301 	bic.w	r3, r3, #1
 8020e66:	61d3      	str	r3, [r2, #28]
}  
 8020e68:	e002      	b.n	8020e70 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8020e6a:	4a04      	ldr	r2, [pc, #16]	; (8020e7c <FLASH_SetErrorCode+0x98>)
 8020e6c:	687b      	ldr	r3, [r7, #4]
 8020e6e:	60d3      	str	r3, [r2, #12]
}  
 8020e70:	bf00      	nop
 8020e72:	370c      	adds	r7, #12
 8020e74:	46bd      	mov	sp, r7
 8020e76:	bc80      	pop	{r7}
 8020e78:	4770      	bx	lr
 8020e7a:	bf00      	nop
 8020e7c:	40022000 	.word	0x40022000
 8020e80:	20004258 	.word	0x20004258

08020e84 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8020e84:	b580      	push	{r7, lr}
 8020e86:	b084      	sub	sp, #16
 8020e88:	af00      	add	r7, sp, #0
 8020e8a:	6078      	str	r0, [r7, #4]
 8020e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8020e8e:	2301      	movs	r3, #1
 8020e90:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8020e92:	2300      	movs	r3, #0
 8020e94:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8020e96:	4b2f      	ldr	r3, [pc, #188]	; (8020f54 <HAL_FLASHEx_Erase+0xd0>)
 8020e98:	7e1b      	ldrb	r3, [r3, #24]
 8020e9a:	2b01      	cmp	r3, #1
 8020e9c:	d101      	bne.n	8020ea2 <HAL_FLASHEx_Erase+0x1e>
 8020e9e:	2302      	movs	r3, #2
 8020ea0:	e053      	b.n	8020f4a <HAL_FLASHEx_Erase+0xc6>
 8020ea2:	4b2c      	ldr	r3, [pc, #176]	; (8020f54 <HAL_FLASHEx_Erase+0xd0>)
 8020ea4:	2201      	movs	r2, #1
 8020ea6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8020ea8:	687b      	ldr	r3, [r7, #4]
 8020eaa:	681b      	ldr	r3, [r3, #0]
 8020eac:	2b02      	cmp	r3, #2
 8020eae:	d116      	bne.n	8020ede <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8020eb0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8020eb4:	f7ff ff50 	bl	8020d58 <FLASH_WaitForLastOperation>
 8020eb8:	4603      	mov	r3, r0
 8020eba:	2b00      	cmp	r3, #0
 8020ebc:	d141      	bne.n	8020f42 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8020ebe:	2001      	movs	r0, #1
 8020ec0:	f000 f84c 	bl	8020f5c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8020ec4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8020ec8:	f7ff ff46 	bl	8020d58 <FLASH_WaitForLastOperation>
 8020ecc:	4603      	mov	r3, r0
 8020ece:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8020ed0:	4b21      	ldr	r3, [pc, #132]	; (8020f58 <HAL_FLASHEx_Erase+0xd4>)
 8020ed2:	691b      	ldr	r3, [r3, #16]
 8020ed4:	4a20      	ldr	r2, [pc, #128]	; (8020f58 <HAL_FLASHEx_Erase+0xd4>)
 8020ed6:	f023 0304 	bic.w	r3, r3, #4
 8020eda:	6113      	str	r3, [r2, #16]
 8020edc:	e031      	b.n	8020f42 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8020ede:	f24c 3050 	movw	r0, #50000	; 0xc350
 8020ee2:	f7ff ff39 	bl	8020d58 <FLASH_WaitForLastOperation>
 8020ee6:	4603      	mov	r3, r0
 8020ee8:	2b00      	cmp	r3, #0
 8020eea:	d12a      	bne.n	8020f42 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8020eec:	683b      	ldr	r3, [r7, #0]
 8020eee:	f04f 32ff 	mov.w	r2, #4294967295
 8020ef2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8020ef4:	687b      	ldr	r3, [r7, #4]
 8020ef6:	689b      	ldr	r3, [r3, #8]
 8020ef8:	60bb      	str	r3, [r7, #8]
 8020efa:	e019      	b.n	8020f30 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8020efc:	68b8      	ldr	r0, [r7, #8]
 8020efe:	f000 f849 	bl	8020f94 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8020f02:	f24c 3050 	movw	r0, #50000	; 0xc350
 8020f06:	f7ff ff27 	bl	8020d58 <FLASH_WaitForLastOperation>
 8020f0a:	4603      	mov	r3, r0
 8020f0c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8020f0e:	4b12      	ldr	r3, [pc, #72]	; (8020f58 <HAL_FLASHEx_Erase+0xd4>)
 8020f10:	691b      	ldr	r3, [r3, #16]
 8020f12:	4a11      	ldr	r2, [pc, #68]	; (8020f58 <HAL_FLASHEx_Erase+0xd4>)
 8020f14:	f023 0302 	bic.w	r3, r3, #2
 8020f18:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8020f1a:	7bfb      	ldrb	r3, [r7, #15]
 8020f1c:	2b00      	cmp	r3, #0
 8020f1e:	d003      	beq.n	8020f28 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8020f20:	683b      	ldr	r3, [r7, #0]
 8020f22:	68ba      	ldr	r2, [r7, #8]
 8020f24:	601a      	str	r2, [r3, #0]
            break;
 8020f26:	e00c      	b.n	8020f42 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8020f28:	68bb      	ldr	r3, [r7, #8]
 8020f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8020f2e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8020f30:	687b      	ldr	r3, [r7, #4]
 8020f32:	68db      	ldr	r3, [r3, #12]
 8020f34:	02da      	lsls	r2, r3, #11
 8020f36:	687b      	ldr	r3, [r7, #4]
 8020f38:	689b      	ldr	r3, [r3, #8]
 8020f3a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8020f3c:	68ba      	ldr	r2, [r7, #8]
 8020f3e:	429a      	cmp	r2, r3
 8020f40:	d3dc      	bcc.n	8020efc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8020f42:	4b04      	ldr	r3, [pc, #16]	; (8020f54 <HAL_FLASHEx_Erase+0xd0>)
 8020f44:	2200      	movs	r2, #0
 8020f46:	761a      	strb	r2, [r3, #24]

  return status;
 8020f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8020f4a:	4618      	mov	r0, r3
 8020f4c:	3710      	adds	r7, #16
 8020f4e:	46bd      	mov	sp, r7
 8020f50:	bd80      	pop	{r7, pc}
 8020f52:	bf00      	nop
 8020f54:	20004258 	.word	0x20004258
 8020f58:	40022000 	.word	0x40022000

08020f5c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8020f5c:	b480      	push	{r7}
 8020f5e:	b083      	sub	sp, #12
 8020f60:	af00      	add	r7, sp, #0
 8020f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8020f64:	4b09      	ldr	r3, [pc, #36]	; (8020f8c <FLASH_MassErase+0x30>)
 8020f66:	2200      	movs	r2, #0
 8020f68:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8020f6a:	4b09      	ldr	r3, [pc, #36]	; (8020f90 <FLASH_MassErase+0x34>)
 8020f6c:	691b      	ldr	r3, [r3, #16]
 8020f6e:	4a08      	ldr	r2, [pc, #32]	; (8020f90 <FLASH_MassErase+0x34>)
 8020f70:	f043 0304 	orr.w	r3, r3, #4
 8020f74:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8020f76:	4b06      	ldr	r3, [pc, #24]	; (8020f90 <FLASH_MassErase+0x34>)
 8020f78:	691b      	ldr	r3, [r3, #16]
 8020f7a:	4a05      	ldr	r2, [pc, #20]	; (8020f90 <FLASH_MassErase+0x34>)
 8020f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020f80:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8020f82:	bf00      	nop
 8020f84:	370c      	adds	r7, #12
 8020f86:	46bd      	mov	sp, r7
 8020f88:	bc80      	pop	{r7}
 8020f8a:	4770      	bx	lr
 8020f8c:	20004258 	.word	0x20004258
 8020f90:	40022000 	.word	0x40022000

08020f94 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8020f94:	b480      	push	{r7}
 8020f96:	b083      	sub	sp, #12
 8020f98:	af00      	add	r7, sp, #0
 8020f9a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8020f9c:	4b0b      	ldr	r3, [pc, #44]	; (8020fcc <FLASH_PageErase+0x38>)
 8020f9e:	2200      	movs	r2, #0
 8020fa0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8020fa2:	4b0b      	ldr	r3, [pc, #44]	; (8020fd0 <FLASH_PageErase+0x3c>)
 8020fa4:	691b      	ldr	r3, [r3, #16]
 8020fa6:	4a0a      	ldr	r2, [pc, #40]	; (8020fd0 <FLASH_PageErase+0x3c>)
 8020fa8:	f043 0302 	orr.w	r3, r3, #2
 8020fac:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8020fae:	4a08      	ldr	r2, [pc, #32]	; (8020fd0 <FLASH_PageErase+0x3c>)
 8020fb0:	687b      	ldr	r3, [r7, #4]
 8020fb2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8020fb4:	4b06      	ldr	r3, [pc, #24]	; (8020fd0 <FLASH_PageErase+0x3c>)
 8020fb6:	691b      	ldr	r3, [r3, #16]
 8020fb8:	4a05      	ldr	r2, [pc, #20]	; (8020fd0 <FLASH_PageErase+0x3c>)
 8020fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020fbe:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8020fc0:	bf00      	nop
 8020fc2:	370c      	adds	r7, #12
 8020fc4:	46bd      	mov	sp, r7
 8020fc6:	bc80      	pop	{r7}
 8020fc8:	4770      	bx	lr
 8020fca:	bf00      	nop
 8020fcc:	20004258 	.word	0x20004258
 8020fd0:	40022000 	.word	0x40022000

08020fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8020fd4:	b480      	push	{r7}
 8020fd6:	b08b      	sub	sp, #44	; 0x2c
 8020fd8:	af00      	add	r7, sp, #0
 8020fda:	6078      	str	r0, [r7, #4]
 8020fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8020fde:	2300      	movs	r3, #0
 8020fe0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8020fe2:	2300      	movs	r3, #0
 8020fe4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8020fe6:	e179      	b.n	80212dc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8020fe8:	2201      	movs	r2, #1
 8020fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020fec:	fa02 f303 	lsl.w	r3, r2, r3
 8020ff0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8020ff2:	683b      	ldr	r3, [r7, #0]
 8020ff4:	681b      	ldr	r3, [r3, #0]
 8020ff6:	69fa      	ldr	r2, [r7, #28]
 8020ff8:	4013      	ands	r3, r2
 8020ffa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8020ffc:	69ba      	ldr	r2, [r7, #24]
 8020ffe:	69fb      	ldr	r3, [r7, #28]
 8021000:	429a      	cmp	r2, r3
 8021002:	f040 8168 	bne.w	80212d6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8021006:	683b      	ldr	r3, [r7, #0]
 8021008:	685b      	ldr	r3, [r3, #4]
 802100a:	4aa0      	ldr	r2, [pc, #640]	; (802128c <HAL_GPIO_Init+0x2b8>)
 802100c:	4293      	cmp	r3, r2
 802100e:	d05e      	beq.n	80210ce <HAL_GPIO_Init+0xfa>
 8021010:	4a9e      	ldr	r2, [pc, #632]	; (802128c <HAL_GPIO_Init+0x2b8>)
 8021012:	4293      	cmp	r3, r2
 8021014:	d875      	bhi.n	8021102 <HAL_GPIO_Init+0x12e>
 8021016:	4a9e      	ldr	r2, [pc, #632]	; (8021290 <HAL_GPIO_Init+0x2bc>)
 8021018:	4293      	cmp	r3, r2
 802101a:	d058      	beq.n	80210ce <HAL_GPIO_Init+0xfa>
 802101c:	4a9c      	ldr	r2, [pc, #624]	; (8021290 <HAL_GPIO_Init+0x2bc>)
 802101e:	4293      	cmp	r3, r2
 8021020:	d86f      	bhi.n	8021102 <HAL_GPIO_Init+0x12e>
 8021022:	4a9c      	ldr	r2, [pc, #624]	; (8021294 <HAL_GPIO_Init+0x2c0>)
 8021024:	4293      	cmp	r3, r2
 8021026:	d052      	beq.n	80210ce <HAL_GPIO_Init+0xfa>
 8021028:	4a9a      	ldr	r2, [pc, #616]	; (8021294 <HAL_GPIO_Init+0x2c0>)
 802102a:	4293      	cmp	r3, r2
 802102c:	d869      	bhi.n	8021102 <HAL_GPIO_Init+0x12e>
 802102e:	4a9a      	ldr	r2, [pc, #616]	; (8021298 <HAL_GPIO_Init+0x2c4>)
 8021030:	4293      	cmp	r3, r2
 8021032:	d04c      	beq.n	80210ce <HAL_GPIO_Init+0xfa>
 8021034:	4a98      	ldr	r2, [pc, #608]	; (8021298 <HAL_GPIO_Init+0x2c4>)
 8021036:	4293      	cmp	r3, r2
 8021038:	d863      	bhi.n	8021102 <HAL_GPIO_Init+0x12e>
 802103a:	4a98      	ldr	r2, [pc, #608]	; (802129c <HAL_GPIO_Init+0x2c8>)
 802103c:	4293      	cmp	r3, r2
 802103e:	d046      	beq.n	80210ce <HAL_GPIO_Init+0xfa>
 8021040:	4a96      	ldr	r2, [pc, #600]	; (802129c <HAL_GPIO_Init+0x2c8>)
 8021042:	4293      	cmp	r3, r2
 8021044:	d85d      	bhi.n	8021102 <HAL_GPIO_Init+0x12e>
 8021046:	2b12      	cmp	r3, #18
 8021048:	d82a      	bhi.n	80210a0 <HAL_GPIO_Init+0xcc>
 802104a:	2b12      	cmp	r3, #18
 802104c:	d859      	bhi.n	8021102 <HAL_GPIO_Init+0x12e>
 802104e:	a201      	add	r2, pc, #4	; (adr r2, 8021054 <HAL_GPIO_Init+0x80>)
 8021050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021054:	080210cf 	.word	0x080210cf
 8021058:	080210a9 	.word	0x080210a9
 802105c:	080210bb 	.word	0x080210bb
 8021060:	080210fd 	.word	0x080210fd
 8021064:	08021103 	.word	0x08021103
 8021068:	08021103 	.word	0x08021103
 802106c:	08021103 	.word	0x08021103
 8021070:	08021103 	.word	0x08021103
 8021074:	08021103 	.word	0x08021103
 8021078:	08021103 	.word	0x08021103
 802107c:	08021103 	.word	0x08021103
 8021080:	08021103 	.word	0x08021103
 8021084:	08021103 	.word	0x08021103
 8021088:	08021103 	.word	0x08021103
 802108c:	08021103 	.word	0x08021103
 8021090:	08021103 	.word	0x08021103
 8021094:	08021103 	.word	0x08021103
 8021098:	080210b1 	.word	0x080210b1
 802109c:	080210c5 	.word	0x080210c5
 80210a0:	4a7f      	ldr	r2, [pc, #508]	; (80212a0 <HAL_GPIO_Init+0x2cc>)
 80210a2:	4293      	cmp	r3, r2
 80210a4:	d013      	beq.n	80210ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80210a6:	e02c      	b.n	8021102 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80210a8:	683b      	ldr	r3, [r7, #0]
 80210aa:	68db      	ldr	r3, [r3, #12]
 80210ac:	623b      	str	r3, [r7, #32]
          break;
 80210ae:	e029      	b.n	8021104 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80210b0:	683b      	ldr	r3, [r7, #0]
 80210b2:	68db      	ldr	r3, [r3, #12]
 80210b4:	3304      	adds	r3, #4
 80210b6:	623b      	str	r3, [r7, #32]
          break;
 80210b8:	e024      	b.n	8021104 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80210ba:	683b      	ldr	r3, [r7, #0]
 80210bc:	68db      	ldr	r3, [r3, #12]
 80210be:	3308      	adds	r3, #8
 80210c0:	623b      	str	r3, [r7, #32]
          break;
 80210c2:	e01f      	b.n	8021104 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80210c4:	683b      	ldr	r3, [r7, #0]
 80210c6:	68db      	ldr	r3, [r3, #12]
 80210c8:	330c      	adds	r3, #12
 80210ca:	623b      	str	r3, [r7, #32]
          break;
 80210cc:	e01a      	b.n	8021104 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80210ce:	683b      	ldr	r3, [r7, #0]
 80210d0:	689b      	ldr	r3, [r3, #8]
 80210d2:	2b00      	cmp	r3, #0
 80210d4:	d102      	bne.n	80210dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80210d6:	2304      	movs	r3, #4
 80210d8:	623b      	str	r3, [r7, #32]
          break;
 80210da:	e013      	b.n	8021104 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80210dc:	683b      	ldr	r3, [r7, #0]
 80210de:	689b      	ldr	r3, [r3, #8]
 80210e0:	2b01      	cmp	r3, #1
 80210e2:	d105      	bne.n	80210f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80210e4:	2308      	movs	r3, #8
 80210e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80210e8:	687b      	ldr	r3, [r7, #4]
 80210ea:	69fa      	ldr	r2, [r7, #28]
 80210ec:	611a      	str	r2, [r3, #16]
          break;
 80210ee:	e009      	b.n	8021104 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80210f0:	2308      	movs	r3, #8
 80210f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80210f4:	687b      	ldr	r3, [r7, #4]
 80210f6:	69fa      	ldr	r2, [r7, #28]
 80210f8:	615a      	str	r2, [r3, #20]
          break;
 80210fa:	e003      	b.n	8021104 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80210fc:	2300      	movs	r3, #0
 80210fe:	623b      	str	r3, [r7, #32]
          break;
 8021100:	e000      	b.n	8021104 <HAL_GPIO_Init+0x130>
          break;
 8021102:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8021104:	69bb      	ldr	r3, [r7, #24]
 8021106:	2bff      	cmp	r3, #255	; 0xff
 8021108:	d801      	bhi.n	802110e <HAL_GPIO_Init+0x13a>
 802110a:	687b      	ldr	r3, [r7, #4]
 802110c:	e001      	b.n	8021112 <HAL_GPIO_Init+0x13e>
 802110e:	687b      	ldr	r3, [r7, #4]
 8021110:	3304      	adds	r3, #4
 8021112:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8021114:	69bb      	ldr	r3, [r7, #24]
 8021116:	2bff      	cmp	r3, #255	; 0xff
 8021118:	d802      	bhi.n	8021120 <HAL_GPIO_Init+0x14c>
 802111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802111c:	009b      	lsls	r3, r3, #2
 802111e:	e002      	b.n	8021126 <HAL_GPIO_Init+0x152>
 8021120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021122:	3b08      	subs	r3, #8
 8021124:	009b      	lsls	r3, r3, #2
 8021126:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8021128:	697b      	ldr	r3, [r7, #20]
 802112a:	681a      	ldr	r2, [r3, #0]
 802112c:	210f      	movs	r1, #15
 802112e:	693b      	ldr	r3, [r7, #16]
 8021130:	fa01 f303 	lsl.w	r3, r1, r3
 8021134:	43db      	mvns	r3, r3
 8021136:	401a      	ands	r2, r3
 8021138:	6a39      	ldr	r1, [r7, #32]
 802113a:	693b      	ldr	r3, [r7, #16]
 802113c:	fa01 f303 	lsl.w	r3, r1, r3
 8021140:	431a      	orrs	r2, r3
 8021142:	697b      	ldr	r3, [r7, #20]
 8021144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8021146:	683b      	ldr	r3, [r7, #0]
 8021148:	685b      	ldr	r3, [r3, #4]
 802114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802114e:	2b00      	cmp	r3, #0
 8021150:	f000 80c1 	beq.w	80212d6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8021154:	4b53      	ldr	r3, [pc, #332]	; (80212a4 <HAL_GPIO_Init+0x2d0>)
 8021156:	699b      	ldr	r3, [r3, #24]
 8021158:	4a52      	ldr	r2, [pc, #328]	; (80212a4 <HAL_GPIO_Init+0x2d0>)
 802115a:	f043 0301 	orr.w	r3, r3, #1
 802115e:	6193      	str	r3, [r2, #24]
 8021160:	4b50      	ldr	r3, [pc, #320]	; (80212a4 <HAL_GPIO_Init+0x2d0>)
 8021162:	699b      	ldr	r3, [r3, #24]
 8021164:	f003 0301 	and.w	r3, r3, #1
 8021168:	60bb      	str	r3, [r7, #8]
 802116a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 802116c:	4a4e      	ldr	r2, [pc, #312]	; (80212a8 <HAL_GPIO_Init+0x2d4>)
 802116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021170:	089b      	lsrs	r3, r3, #2
 8021172:	3302      	adds	r3, #2
 8021174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021178:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 802117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802117c:	f003 0303 	and.w	r3, r3, #3
 8021180:	009b      	lsls	r3, r3, #2
 8021182:	220f      	movs	r2, #15
 8021184:	fa02 f303 	lsl.w	r3, r2, r3
 8021188:	43db      	mvns	r3, r3
 802118a:	68fa      	ldr	r2, [r7, #12]
 802118c:	4013      	ands	r3, r2
 802118e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8021190:	687b      	ldr	r3, [r7, #4]
 8021192:	4a46      	ldr	r2, [pc, #280]	; (80212ac <HAL_GPIO_Init+0x2d8>)
 8021194:	4293      	cmp	r3, r2
 8021196:	d01f      	beq.n	80211d8 <HAL_GPIO_Init+0x204>
 8021198:	687b      	ldr	r3, [r7, #4]
 802119a:	4a45      	ldr	r2, [pc, #276]	; (80212b0 <HAL_GPIO_Init+0x2dc>)
 802119c:	4293      	cmp	r3, r2
 802119e:	d019      	beq.n	80211d4 <HAL_GPIO_Init+0x200>
 80211a0:	687b      	ldr	r3, [r7, #4]
 80211a2:	4a44      	ldr	r2, [pc, #272]	; (80212b4 <HAL_GPIO_Init+0x2e0>)
 80211a4:	4293      	cmp	r3, r2
 80211a6:	d013      	beq.n	80211d0 <HAL_GPIO_Init+0x1fc>
 80211a8:	687b      	ldr	r3, [r7, #4]
 80211aa:	4a43      	ldr	r2, [pc, #268]	; (80212b8 <HAL_GPIO_Init+0x2e4>)
 80211ac:	4293      	cmp	r3, r2
 80211ae:	d00d      	beq.n	80211cc <HAL_GPIO_Init+0x1f8>
 80211b0:	687b      	ldr	r3, [r7, #4]
 80211b2:	4a42      	ldr	r2, [pc, #264]	; (80212bc <HAL_GPIO_Init+0x2e8>)
 80211b4:	4293      	cmp	r3, r2
 80211b6:	d007      	beq.n	80211c8 <HAL_GPIO_Init+0x1f4>
 80211b8:	687b      	ldr	r3, [r7, #4]
 80211ba:	4a41      	ldr	r2, [pc, #260]	; (80212c0 <HAL_GPIO_Init+0x2ec>)
 80211bc:	4293      	cmp	r3, r2
 80211be:	d101      	bne.n	80211c4 <HAL_GPIO_Init+0x1f0>
 80211c0:	2305      	movs	r3, #5
 80211c2:	e00a      	b.n	80211da <HAL_GPIO_Init+0x206>
 80211c4:	2306      	movs	r3, #6
 80211c6:	e008      	b.n	80211da <HAL_GPIO_Init+0x206>
 80211c8:	2304      	movs	r3, #4
 80211ca:	e006      	b.n	80211da <HAL_GPIO_Init+0x206>
 80211cc:	2303      	movs	r3, #3
 80211ce:	e004      	b.n	80211da <HAL_GPIO_Init+0x206>
 80211d0:	2302      	movs	r3, #2
 80211d2:	e002      	b.n	80211da <HAL_GPIO_Init+0x206>
 80211d4:	2301      	movs	r3, #1
 80211d6:	e000      	b.n	80211da <HAL_GPIO_Init+0x206>
 80211d8:	2300      	movs	r3, #0
 80211da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80211dc:	f002 0203 	and.w	r2, r2, #3
 80211e0:	0092      	lsls	r2, r2, #2
 80211e2:	4093      	lsls	r3, r2
 80211e4:	68fa      	ldr	r2, [r7, #12]
 80211e6:	4313      	orrs	r3, r2
 80211e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80211ea:	492f      	ldr	r1, [pc, #188]	; (80212a8 <HAL_GPIO_Init+0x2d4>)
 80211ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80211ee:	089b      	lsrs	r3, r3, #2
 80211f0:	3302      	adds	r3, #2
 80211f2:	68fa      	ldr	r2, [r7, #12]
 80211f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80211f8:	683b      	ldr	r3, [r7, #0]
 80211fa:	685b      	ldr	r3, [r3, #4]
 80211fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8021200:	2b00      	cmp	r3, #0
 8021202:	d006      	beq.n	8021212 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8021204:	4b2f      	ldr	r3, [pc, #188]	; (80212c4 <HAL_GPIO_Init+0x2f0>)
 8021206:	681a      	ldr	r2, [r3, #0]
 8021208:	492e      	ldr	r1, [pc, #184]	; (80212c4 <HAL_GPIO_Init+0x2f0>)
 802120a:	69bb      	ldr	r3, [r7, #24]
 802120c:	4313      	orrs	r3, r2
 802120e:	600b      	str	r3, [r1, #0]
 8021210:	e006      	b.n	8021220 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8021212:	4b2c      	ldr	r3, [pc, #176]	; (80212c4 <HAL_GPIO_Init+0x2f0>)
 8021214:	681a      	ldr	r2, [r3, #0]
 8021216:	69bb      	ldr	r3, [r7, #24]
 8021218:	43db      	mvns	r3, r3
 802121a:	492a      	ldr	r1, [pc, #168]	; (80212c4 <HAL_GPIO_Init+0x2f0>)
 802121c:	4013      	ands	r3, r2
 802121e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8021220:	683b      	ldr	r3, [r7, #0]
 8021222:	685b      	ldr	r3, [r3, #4]
 8021224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021228:	2b00      	cmp	r3, #0
 802122a:	d006      	beq.n	802123a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 802122c:	4b25      	ldr	r3, [pc, #148]	; (80212c4 <HAL_GPIO_Init+0x2f0>)
 802122e:	685a      	ldr	r2, [r3, #4]
 8021230:	4924      	ldr	r1, [pc, #144]	; (80212c4 <HAL_GPIO_Init+0x2f0>)
 8021232:	69bb      	ldr	r3, [r7, #24]
 8021234:	4313      	orrs	r3, r2
 8021236:	604b      	str	r3, [r1, #4]
 8021238:	e006      	b.n	8021248 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 802123a:	4b22      	ldr	r3, [pc, #136]	; (80212c4 <HAL_GPIO_Init+0x2f0>)
 802123c:	685a      	ldr	r2, [r3, #4]
 802123e:	69bb      	ldr	r3, [r7, #24]
 8021240:	43db      	mvns	r3, r3
 8021242:	4920      	ldr	r1, [pc, #128]	; (80212c4 <HAL_GPIO_Init+0x2f0>)
 8021244:	4013      	ands	r3, r2
 8021246:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8021248:	683b      	ldr	r3, [r7, #0]
 802124a:	685b      	ldr	r3, [r3, #4]
 802124c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8021250:	2b00      	cmp	r3, #0
 8021252:	d006      	beq.n	8021262 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8021254:	4b1b      	ldr	r3, [pc, #108]	; (80212c4 <HAL_GPIO_Init+0x2f0>)
 8021256:	689a      	ldr	r2, [r3, #8]
 8021258:	491a      	ldr	r1, [pc, #104]	; (80212c4 <HAL_GPIO_Init+0x2f0>)
 802125a:	69bb      	ldr	r3, [r7, #24]
 802125c:	4313      	orrs	r3, r2
 802125e:	608b      	str	r3, [r1, #8]
 8021260:	e006      	b.n	8021270 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8021262:	4b18      	ldr	r3, [pc, #96]	; (80212c4 <HAL_GPIO_Init+0x2f0>)
 8021264:	689a      	ldr	r2, [r3, #8]
 8021266:	69bb      	ldr	r3, [r7, #24]
 8021268:	43db      	mvns	r3, r3
 802126a:	4916      	ldr	r1, [pc, #88]	; (80212c4 <HAL_GPIO_Init+0x2f0>)
 802126c:	4013      	ands	r3, r2
 802126e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8021270:	683b      	ldr	r3, [r7, #0]
 8021272:	685b      	ldr	r3, [r3, #4]
 8021274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8021278:	2b00      	cmp	r3, #0
 802127a:	d025      	beq.n	80212c8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 802127c:	4b11      	ldr	r3, [pc, #68]	; (80212c4 <HAL_GPIO_Init+0x2f0>)
 802127e:	68da      	ldr	r2, [r3, #12]
 8021280:	4910      	ldr	r1, [pc, #64]	; (80212c4 <HAL_GPIO_Init+0x2f0>)
 8021282:	69bb      	ldr	r3, [r7, #24]
 8021284:	4313      	orrs	r3, r2
 8021286:	60cb      	str	r3, [r1, #12]
 8021288:	e025      	b.n	80212d6 <HAL_GPIO_Init+0x302>
 802128a:	bf00      	nop
 802128c:	10320000 	.word	0x10320000
 8021290:	10310000 	.word	0x10310000
 8021294:	10220000 	.word	0x10220000
 8021298:	10210000 	.word	0x10210000
 802129c:	10120000 	.word	0x10120000
 80212a0:	10110000 	.word	0x10110000
 80212a4:	40021000 	.word	0x40021000
 80212a8:	40010000 	.word	0x40010000
 80212ac:	40010800 	.word	0x40010800
 80212b0:	40010c00 	.word	0x40010c00
 80212b4:	40011000 	.word	0x40011000
 80212b8:	40011400 	.word	0x40011400
 80212bc:	40011800 	.word	0x40011800
 80212c0:	40011c00 	.word	0x40011c00
 80212c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80212c8:	4b0b      	ldr	r3, [pc, #44]	; (80212f8 <HAL_GPIO_Init+0x324>)
 80212ca:	68da      	ldr	r2, [r3, #12]
 80212cc:	69bb      	ldr	r3, [r7, #24]
 80212ce:	43db      	mvns	r3, r3
 80212d0:	4909      	ldr	r1, [pc, #36]	; (80212f8 <HAL_GPIO_Init+0x324>)
 80212d2:	4013      	ands	r3, r2
 80212d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80212d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80212d8:	3301      	adds	r3, #1
 80212da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80212dc:	683b      	ldr	r3, [r7, #0]
 80212de:	681a      	ldr	r2, [r3, #0]
 80212e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80212e2:	fa22 f303 	lsr.w	r3, r2, r3
 80212e6:	2b00      	cmp	r3, #0
 80212e8:	f47f ae7e 	bne.w	8020fe8 <HAL_GPIO_Init+0x14>
  }
}
 80212ec:	bf00      	nop
 80212ee:	bf00      	nop
 80212f0:	372c      	adds	r7, #44	; 0x2c
 80212f2:	46bd      	mov	sp, r7
 80212f4:	bc80      	pop	{r7}
 80212f6:	4770      	bx	lr
 80212f8:	40010400 	.word	0x40010400

080212fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80212fc:	b480      	push	{r7}
 80212fe:	b083      	sub	sp, #12
 8021300:	af00      	add	r7, sp, #0
 8021302:	6078      	str	r0, [r7, #4]
 8021304:	460b      	mov	r3, r1
 8021306:	807b      	strh	r3, [r7, #2]
 8021308:	4613      	mov	r3, r2
 802130a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 802130c:	787b      	ldrb	r3, [r7, #1]
 802130e:	2b00      	cmp	r3, #0
 8021310:	d003      	beq.n	802131a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8021312:	887a      	ldrh	r2, [r7, #2]
 8021314:	687b      	ldr	r3, [r7, #4]
 8021316:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8021318:	e003      	b.n	8021322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 802131a:	887b      	ldrh	r3, [r7, #2]
 802131c:	041a      	lsls	r2, r3, #16
 802131e:	687b      	ldr	r3, [r7, #4]
 8021320:	611a      	str	r2, [r3, #16]
}
 8021322:	bf00      	nop
 8021324:	370c      	adds	r7, #12
 8021326:	46bd      	mov	sp, r7
 8021328:	bc80      	pop	{r7}
 802132a:	4770      	bx	lr

0802132c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 802132c:	b580      	push	{r7, lr}
 802132e:	b086      	sub	sp, #24
 8021330:	af00      	add	r7, sp, #0
 8021332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8021334:	687b      	ldr	r3, [r7, #4]
 8021336:	2b00      	cmp	r3, #0
 8021338:	d101      	bne.n	802133e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 802133a:	2301      	movs	r3, #1
 802133c:	e26c      	b.n	8021818 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802133e:	687b      	ldr	r3, [r7, #4]
 8021340:	681b      	ldr	r3, [r3, #0]
 8021342:	f003 0301 	and.w	r3, r3, #1
 8021346:	2b00      	cmp	r3, #0
 8021348:	f000 8087 	beq.w	802145a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 802134c:	4b92      	ldr	r3, [pc, #584]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 802134e:	685b      	ldr	r3, [r3, #4]
 8021350:	f003 030c 	and.w	r3, r3, #12
 8021354:	2b04      	cmp	r3, #4
 8021356:	d00c      	beq.n	8021372 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8021358:	4b8f      	ldr	r3, [pc, #572]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 802135a:	685b      	ldr	r3, [r3, #4]
 802135c:	f003 030c 	and.w	r3, r3, #12
 8021360:	2b08      	cmp	r3, #8
 8021362:	d112      	bne.n	802138a <HAL_RCC_OscConfig+0x5e>
 8021364:	4b8c      	ldr	r3, [pc, #560]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 8021366:	685b      	ldr	r3, [r3, #4]
 8021368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802136c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021370:	d10b      	bne.n	802138a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021372:	4b89      	ldr	r3, [pc, #548]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 8021374:	681b      	ldr	r3, [r3, #0]
 8021376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802137a:	2b00      	cmp	r3, #0
 802137c:	d06c      	beq.n	8021458 <HAL_RCC_OscConfig+0x12c>
 802137e:	687b      	ldr	r3, [r7, #4]
 8021380:	685b      	ldr	r3, [r3, #4]
 8021382:	2b00      	cmp	r3, #0
 8021384:	d168      	bne.n	8021458 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8021386:	2301      	movs	r3, #1
 8021388:	e246      	b.n	8021818 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 802138a:	687b      	ldr	r3, [r7, #4]
 802138c:	685b      	ldr	r3, [r3, #4]
 802138e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021392:	d106      	bne.n	80213a2 <HAL_RCC_OscConfig+0x76>
 8021394:	4b80      	ldr	r3, [pc, #512]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 8021396:	681b      	ldr	r3, [r3, #0]
 8021398:	4a7f      	ldr	r2, [pc, #508]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 802139a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802139e:	6013      	str	r3, [r2, #0]
 80213a0:	e02e      	b.n	8021400 <HAL_RCC_OscConfig+0xd4>
 80213a2:	687b      	ldr	r3, [r7, #4]
 80213a4:	685b      	ldr	r3, [r3, #4]
 80213a6:	2b00      	cmp	r3, #0
 80213a8:	d10c      	bne.n	80213c4 <HAL_RCC_OscConfig+0x98>
 80213aa:	4b7b      	ldr	r3, [pc, #492]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 80213ac:	681b      	ldr	r3, [r3, #0]
 80213ae:	4a7a      	ldr	r2, [pc, #488]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 80213b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80213b4:	6013      	str	r3, [r2, #0]
 80213b6:	4b78      	ldr	r3, [pc, #480]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 80213b8:	681b      	ldr	r3, [r3, #0]
 80213ba:	4a77      	ldr	r2, [pc, #476]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 80213bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80213c0:	6013      	str	r3, [r2, #0]
 80213c2:	e01d      	b.n	8021400 <HAL_RCC_OscConfig+0xd4>
 80213c4:	687b      	ldr	r3, [r7, #4]
 80213c6:	685b      	ldr	r3, [r3, #4]
 80213c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80213cc:	d10c      	bne.n	80213e8 <HAL_RCC_OscConfig+0xbc>
 80213ce:	4b72      	ldr	r3, [pc, #456]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 80213d0:	681b      	ldr	r3, [r3, #0]
 80213d2:	4a71      	ldr	r2, [pc, #452]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 80213d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80213d8:	6013      	str	r3, [r2, #0]
 80213da:	4b6f      	ldr	r3, [pc, #444]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 80213dc:	681b      	ldr	r3, [r3, #0]
 80213de:	4a6e      	ldr	r2, [pc, #440]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 80213e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80213e4:	6013      	str	r3, [r2, #0]
 80213e6:	e00b      	b.n	8021400 <HAL_RCC_OscConfig+0xd4>
 80213e8:	4b6b      	ldr	r3, [pc, #428]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 80213ea:	681b      	ldr	r3, [r3, #0]
 80213ec:	4a6a      	ldr	r2, [pc, #424]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 80213ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80213f2:	6013      	str	r3, [r2, #0]
 80213f4:	4b68      	ldr	r3, [pc, #416]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 80213f6:	681b      	ldr	r3, [r3, #0]
 80213f8:	4a67      	ldr	r2, [pc, #412]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 80213fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80213fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8021400:	687b      	ldr	r3, [r7, #4]
 8021402:	685b      	ldr	r3, [r3, #4]
 8021404:	2b00      	cmp	r3, #0
 8021406:	d013      	beq.n	8021430 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8021408:	f7ff f9f2 	bl	80207f0 <HAL_GetTick>
 802140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802140e:	e008      	b.n	8021422 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021410:	f7ff f9ee 	bl	80207f0 <HAL_GetTick>
 8021414:	4602      	mov	r2, r0
 8021416:	693b      	ldr	r3, [r7, #16]
 8021418:	1ad3      	subs	r3, r2, r3
 802141a:	2b64      	cmp	r3, #100	; 0x64
 802141c:	d901      	bls.n	8021422 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 802141e:	2303      	movs	r3, #3
 8021420:	e1fa      	b.n	8021818 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8021422:	4b5d      	ldr	r3, [pc, #372]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 8021424:	681b      	ldr	r3, [r3, #0]
 8021426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802142a:	2b00      	cmp	r3, #0
 802142c:	d0f0      	beq.n	8021410 <HAL_RCC_OscConfig+0xe4>
 802142e:	e014      	b.n	802145a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8021430:	f7ff f9de 	bl	80207f0 <HAL_GetTick>
 8021434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8021436:	e008      	b.n	802144a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021438:	f7ff f9da 	bl	80207f0 <HAL_GetTick>
 802143c:	4602      	mov	r2, r0
 802143e:	693b      	ldr	r3, [r7, #16]
 8021440:	1ad3      	subs	r3, r2, r3
 8021442:	2b64      	cmp	r3, #100	; 0x64
 8021444:	d901      	bls.n	802144a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8021446:	2303      	movs	r3, #3
 8021448:	e1e6      	b.n	8021818 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802144a:	4b53      	ldr	r3, [pc, #332]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 802144c:	681b      	ldr	r3, [r3, #0]
 802144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021452:	2b00      	cmp	r3, #0
 8021454:	d1f0      	bne.n	8021438 <HAL_RCC_OscConfig+0x10c>
 8021456:	e000      	b.n	802145a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802145a:	687b      	ldr	r3, [r7, #4]
 802145c:	681b      	ldr	r3, [r3, #0]
 802145e:	f003 0302 	and.w	r3, r3, #2
 8021462:	2b00      	cmp	r3, #0
 8021464:	d063      	beq.n	802152e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8021466:	4b4c      	ldr	r3, [pc, #304]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 8021468:	685b      	ldr	r3, [r3, #4]
 802146a:	f003 030c 	and.w	r3, r3, #12
 802146e:	2b00      	cmp	r3, #0
 8021470:	d00b      	beq.n	802148a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8021472:	4b49      	ldr	r3, [pc, #292]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 8021474:	685b      	ldr	r3, [r3, #4]
 8021476:	f003 030c 	and.w	r3, r3, #12
 802147a:	2b08      	cmp	r3, #8
 802147c:	d11c      	bne.n	80214b8 <HAL_RCC_OscConfig+0x18c>
 802147e:	4b46      	ldr	r3, [pc, #280]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 8021480:	685b      	ldr	r3, [r3, #4]
 8021482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8021486:	2b00      	cmp	r3, #0
 8021488:	d116      	bne.n	80214b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802148a:	4b43      	ldr	r3, [pc, #268]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 802148c:	681b      	ldr	r3, [r3, #0]
 802148e:	f003 0302 	and.w	r3, r3, #2
 8021492:	2b00      	cmp	r3, #0
 8021494:	d005      	beq.n	80214a2 <HAL_RCC_OscConfig+0x176>
 8021496:	687b      	ldr	r3, [r7, #4]
 8021498:	691b      	ldr	r3, [r3, #16]
 802149a:	2b01      	cmp	r3, #1
 802149c:	d001      	beq.n	80214a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 802149e:	2301      	movs	r3, #1
 80214a0:	e1ba      	b.n	8021818 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80214a2:	4b3d      	ldr	r3, [pc, #244]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 80214a4:	681b      	ldr	r3, [r3, #0]
 80214a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80214aa:	687b      	ldr	r3, [r7, #4]
 80214ac:	695b      	ldr	r3, [r3, #20]
 80214ae:	00db      	lsls	r3, r3, #3
 80214b0:	4939      	ldr	r1, [pc, #228]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 80214b2:	4313      	orrs	r3, r2
 80214b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80214b6:	e03a      	b.n	802152e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80214b8:	687b      	ldr	r3, [r7, #4]
 80214ba:	691b      	ldr	r3, [r3, #16]
 80214bc:	2b00      	cmp	r3, #0
 80214be:	d020      	beq.n	8021502 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80214c0:	4b36      	ldr	r3, [pc, #216]	; (802159c <HAL_RCC_OscConfig+0x270>)
 80214c2:	2201      	movs	r2, #1
 80214c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80214c6:	f7ff f993 	bl	80207f0 <HAL_GetTick>
 80214ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80214cc:	e008      	b.n	80214e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80214ce:	f7ff f98f 	bl	80207f0 <HAL_GetTick>
 80214d2:	4602      	mov	r2, r0
 80214d4:	693b      	ldr	r3, [r7, #16]
 80214d6:	1ad3      	subs	r3, r2, r3
 80214d8:	2b02      	cmp	r3, #2
 80214da:	d901      	bls.n	80214e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80214dc:	2303      	movs	r3, #3
 80214de:	e19b      	b.n	8021818 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80214e0:	4b2d      	ldr	r3, [pc, #180]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 80214e2:	681b      	ldr	r3, [r3, #0]
 80214e4:	f003 0302 	and.w	r3, r3, #2
 80214e8:	2b00      	cmp	r3, #0
 80214ea:	d0f0      	beq.n	80214ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80214ec:	4b2a      	ldr	r3, [pc, #168]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 80214ee:	681b      	ldr	r3, [r3, #0]
 80214f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80214f4:	687b      	ldr	r3, [r7, #4]
 80214f6:	695b      	ldr	r3, [r3, #20]
 80214f8:	00db      	lsls	r3, r3, #3
 80214fa:	4927      	ldr	r1, [pc, #156]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 80214fc:	4313      	orrs	r3, r2
 80214fe:	600b      	str	r3, [r1, #0]
 8021500:	e015      	b.n	802152e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8021502:	4b26      	ldr	r3, [pc, #152]	; (802159c <HAL_RCC_OscConfig+0x270>)
 8021504:	2200      	movs	r2, #0
 8021506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8021508:	f7ff f972 	bl	80207f0 <HAL_GetTick>
 802150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802150e:	e008      	b.n	8021522 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8021510:	f7ff f96e 	bl	80207f0 <HAL_GetTick>
 8021514:	4602      	mov	r2, r0
 8021516:	693b      	ldr	r3, [r7, #16]
 8021518:	1ad3      	subs	r3, r2, r3
 802151a:	2b02      	cmp	r3, #2
 802151c:	d901      	bls.n	8021522 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 802151e:	2303      	movs	r3, #3
 8021520:	e17a      	b.n	8021818 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8021522:	4b1d      	ldr	r3, [pc, #116]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 8021524:	681b      	ldr	r3, [r3, #0]
 8021526:	f003 0302 	and.w	r3, r3, #2
 802152a:	2b00      	cmp	r3, #0
 802152c:	d1f0      	bne.n	8021510 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802152e:	687b      	ldr	r3, [r7, #4]
 8021530:	681b      	ldr	r3, [r3, #0]
 8021532:	f003 0308 	and.w	r3, r3, #8
 8021536:	2b00      	cmp	r3, #0
 8021538:	d03a      	beq.n	80215b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 802153a:	687b      	ldr	r3, [r7, #4]
 802153c:	699b      	ldr	r3, [r3, #24]
 802153e:	2b00      	cmp	r3, #0
 8021540:	d019      	beq.n	8021576 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8021542:	4b17      	ldr	r3, [pc, #92]	; (80215a0 <HAL_RCC_OscConfig+0x274>)
 8021544:	2201      	movs	r2, #1
 8021546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8021548:	f7ff f952 	bl	80207f0 <HAL_GetTick>
 802154c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802154e:	e008      	b.n	8021562 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8021550:	f7ff f94e 	bl	80207f0 <HAL_GetTick>
 8021554:	4602      	mov	r2, r0
 8021556:	693b      	ldr	r3, [r7, #16]
 8021558:	1ad3      	subs	r3, r2, r3
 802155a:	2b02      	cmp	r3, #2
 802155c:	d901      	bls.n	8021562 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 802155e:	2303      	movs	r3, #3
 8021560:	e15a      	b.n	8021818 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8021562:	4b0d      	ldr	r3, [pc, #52]	; (8021598 <HAL_RCC_OscConfig+0x26c>)
 8021564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021566:	f003 0302 	and.w	r3, r3, #2
 802156a:	2b00      	cmp	r3, #0
 802156c:	d0f0      	beq.n	8021550 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 802156e:	2001      	movs	r0, #1
 8021570:	f000 fad8 	bl	8021b24 <RCC_Delay>
 8021574:	e01c      	b.n	80215b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8021576:	4b0a      	ldr	r3, [pc, #40]	; (80215a0 <HAL_RCC_OscConfig+0x274>)
 8021578:	2200      	movs	r2, #0
 802157a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802157c:	f7ff f938 	bl	80207f0 <HAL_GetTick>
 8021580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8021582:	e00f      	b.n	80215a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8021584:	f7ff f934 	bl	80207f0 <HAL_GetTick>
 8021588:	4602      	mov	r2, r0
 802158a:	693b      	ldr	r3, [r7, #16]
 802158c:	1ad3      	subs	r3, r2, r3
 802158e:	2b02      	cmp	r3, #2
 8021590:	d908      	bls.n	80215a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8021592:	2303      	movs	r3, #3
 8021594:	e140      	b.n	8021818 <HAL_RCC_OscConfig+0x4ec>
 8021596:	bf00      	nop
 8021598:	40021000 	.word	0x40021000
 802159c:	42420000 	.word	0x42420000
 80215a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80215a4:	4b9e      	ldr	r3, [pc, #632]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 80215a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80215a8:	f003 0302 	and.w	r3, r3, #2
 80215ac:	2b00      	cmp	r3, #0
 80215ae:	d1e9      	bne.n	8021584 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80215b0:	687b      	ldr	r3, [r7, #4]
 80215b2:	681b      	ldr	r3, [r3, #0]
 80215b4:	f003 0304 	and.w	r3, r3, #4
 80215b8:	2b00      	cmp	r3, #0
 80215ba:	f000 80a6 	beq.w	802170a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80215be:	2300      	movs	r3, #0
 80215c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80215c2:	4b97      	ldr	r3, [pc, #604]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 80215c4:	69db      	ldr	r3, [r3, #28]
 80215c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80215ca:	2b00      	cmp	r3, #0
 80215cc:	d10d      	bne.n	80215ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80215ce:	4b94      	ldr	r3, [pc, #592]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 80215d0:	69db      	ldr	r3, [r3, #28]
 80215d2:	4a93      	ldr	r2, [pc, #588]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 80215d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80215d8:	61d3      	str	r3, [r2, #28]
 80215da:	4b91      	ldr	r3, [pc, #580]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 80215dc:	69db      	ldr	r3, [r3, #28]
 80215de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80215e2:	60bb      	str	r3, [r7, #8]
 80215e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80215e6:	2301      	movs	r3, #1
 80215e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80215ea:	4b8e      	ldr	r3, [pc, #568]	; (8021824 <HAL_RCC_OscConfig+0x4f8>)
 80215ec:	681b      	ldr	r3, [r3, #0]
 80215ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80215f2:	2b00      	cmp	r3, #0
 80215f4:	d118      	bne.n	8021628 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80215f6:	4b8b      	ldr	r3, [pc, #556]	; (8021824 <HAL_RCC_OscConfig+0x4f8>)
 80215f8:	681b      	ldr	r3, [r3, #0]
 80215fa:	4a8a      	ldr	r2, [pc, #552]	; (8021824 <HAL_RCC_OscConfig+0x4f8>)
 80215fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8021602:	f7ff f8f5 	bl	80207f0 <HAL_GetTick>
 8021606:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021608:	e008      	b.n	802161c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802160a:	f7ff f8f1 	bl	80207f0 <HAL_GetTick>
 802160e:	4602      	mov	r2, r0
 8021610:	693b      	ldr	r3, [r7, #16]
 8021612:	1ad3      	subs	r3, r2, r3
 8021614:	2b64      	cmp	r3, #100	; 0x64
 8021616:	d901      	bls.n	802161c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8021618:	2303      	movs	r3, #3
 802161a:	e0fd      	b.n	8021818 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802161c:	4b81      	ldr	r3, [pc, #516]	; (8021824 <HAL_RCC_OscConfig+0x4f8>)
 802161e:	681b      	ldr	r3, [r3, #0]
 8021620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021624:	2b00      	cmp	r3, #0
 8021626:	d0f0      	beq.n	802160a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8021628:	687b      	ldr	r3, [r7, #4]
 802162a:	68db      	ldr	r3, [r3, #12]
 802162c:	2b01      	cmp	r3, #1
 802162e:	d106      	bne.n	802163e <HAL_RCC_OscConfig+0x312>
 8021630:	4b7b      	ldr	r3, [pc, #492]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 8021632:	6a1b      	ldr	r3, [r3, #32]
 8021634:	4a7a      	ldr	r2, [pc, #488]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 8021636:	f043 0301 	orr.w	r3, r3, #1
 802163a:	6213      	str	r3, [r2, #32]
 802163c:	e02d      	b.n	802169a <HAL_RCC_OscConfig+0x36e>
 802163e:	687b      	ldr	r3, [r7, #4]
 8021640:	68db      	ldr	r3, [r3, #12]
 8021642:	2b00      	cmp	r3, #0
 8021644:	d10c      	bne.n	8021660 <HAL_RCC_OscConfig+0x334>
 8021646:	4b76      	ldr	r3, [pc, #472]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 8021648:	6a1b      	ldr	r3, [r3, #32]
 802164a:	4a75      	ldr	r2, [pc, #468]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 802164c:	f023 0301 	bic.w	r3, r3, #1
 8021650:	6213      	str	r3, [r2, #32]
 8021652:	4b73      	ldr	r3, [pc, #460]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 8021654:	6a1b      	ldr	r3, [r3, #32]
 8021656:	4a72      	ldr	r2, [pc, #456]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 8021658:	f023 0304 	bic.w	r3, r3, #4
 802165c:	6213      	str	r3, [r2, #32]
 802165e:	e01c      	b.n	802169a <HAL_RCC_OscConfig+0x36e>
 8021660:	687b      	ldr	r3, [r7, #4]
 8021662:	68db      	ldr	r3, [r3, #12]
 8021664:	2b05      	cmp	r3, #5
 8021666:	d10c      	bne.n	8021682 <HAL_RCC_OscConfig+0x356>
 8021668:	4b6d      	ldr	r3, [pc, #436]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 802166a:	6a1b      	ldr	r3, [r3, #32]
 802166c:	4a6c      	ldr	r2, [pc, #432]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 802166e:	f043 0304 	orr.w	r3, r3, #4
 8021672:	6213      	str	r3, [r2, #32]
 8021674:	4b6a      	ldr	r3, [pc, #424]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 8021676:	6a1b      	ldr	r3, [r3, #32]
 8021678:	4a69      	ldr	r2, [pc, #420]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 802167a:	f043 0301 	orr.w	r3, r3, #1
 802167e:	6213      	str	r3, [r2, #32]
 8021680:	e00b      	b.n	802169a <HAL_RCC_OscConfig+0x36e>
 8021682:	4b67      	ldr	r3, [pc, #412]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 8021684:	6a1b      	ldr	r3, [r3, #32]
 8021686:	4a66      	ldr	r2, [pc, #408]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 8021688:	f023 0301 	bic.w	r3, r3, #1
 802168c:	6213      	str	r3, [r2, #32]
 802168e:	4b64      	ldr	r3, [pc, #400]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 8021690:	6a1b      	ldr	r3, [r3, #32]
 8021692:	4a63      	ldr	r2, [pc, #396]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 8021694:	f023 0304 	bic.w	r3, r3, #4
 8021698:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 802169a:	687b      	ldr	r3, [r7, #4]
 802169c:	68db      	ldr	r3, [r3, #12]
 802169e:	2b00      	cmp	r3, #0
 80216a0:	d015      	beq.n	80216ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80216a2:	f7ff f8a5 	bl	80207f0 <HAL_GetTick>
 80216a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80216a8:	e00a      	b.n	80216c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80216aa:	f7ff f8a1 	bl	80207f0 <HAL_GetTick>
 80216ae:	4602      	mov	r2, r0
 80216b0:	693b      	ldr	r3, [r7, #16]
 80216b2:	1ad3      	subs	r3, r2, r3
 80216b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80216b8:	4293      	cmp	r3, r2
 80216ba:	d901      	bls.n	80216c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80216bc:	2303      	movs	r3, #3
 80216be:	e0ab      	b.n	8021818 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80216c0:	4b57      	ldr	r3, [pc, #348]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 80216c2:	6a1b      	ldr	r3, [r3, #32]
 80216c4:	f003 0302 	and.w	r3, r3, #2
 80216c8:	2b00      	cmp	r3, #0
 80216ca:	d0ee      	beq.n	80216aa <HAL_RCC_OscConfig+0x37e>
 80216cc:	e014      	b.n	80216f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80216ce:	f7ff f88f 	bl	80207f0 <HAL_GetTick>
 80216d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80216d4:	e00a      	b.n	80216ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80216d6:	f7ff f88b 	bl	80207f0 <HAL_GetTick>
 80216da:	4602      	mov	r2, r0
 80216dc:	693b      	ldr	r3, [r7, #16]
 80216de:	1ad3      	subs	r3, r2, r3
 80216e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80216e4:	4293      	cmp	r3, r2
 80216e6:	d901      	bls.n	80216ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80216e8:	2303      	movs	r3, #3
 80216ea:	e095      	b.n	8021818 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80216ec:	4b4c      	ldr	r3, [pc, #304]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 80216ee:	6a1b      	ldr	r3, [r3, #32]
 80216f0:	f003 0302 	and.w	r3, r3, #2
 80216f4:	2b00      	cmp	r3, #0
 80216f6:	d1ee      	bne.n	80216d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80216f8:	7dfb      	ldrb	r3, [r7, #23]
 80216fa:	2b01      	cmp	r3, #1
 80216fc:	d105      	bne.n	802170a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80216fe:	4b48      	ldr	r3, [pc, #288]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 8021700:	69db      	ldr	r3, [r3, #28]
 8021702:	4a47      	ldr	r2, [pc, #284]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 8021704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8021708:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 802170a:	687b      	ldr	r3, [r7, #4]
 802170c:	69db      	ldr	r3, [r3, #28]
 802170e:	2b00      	cmp	r3, #0
 8021710:	f000 8081 	beq.w	8021816 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8021714:	4b42      	ldr	r3, [pc, #264]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 8021716:	685b      	ldr	r3, [r3, #4]
 8021718:	f003 030c 	and.w	r3, r3, #12
 802171c:	2b08      	cmp	r3, #8
 802171e:	d061      	beq.n	80217e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8021720:	687b      	ldr	r3, [r7, #4]
 8021722:	69db      	ldr	r3, [r3, #28]
 8021724:	2b02      	cmp	r3, #2
 8021726:	d146      	bne.n	80217b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8021728:	4b3f      	ldr	r3, [pc, #252]	; (8021828 <HAL_RCC_OscConfig+0x4fc>)
 802172a:	2200      	movs	r2, #0
 802172c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802172e:	f7ff f85f 	bl	80207f0 <HAL_GetTick>
 8021732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8021734:	e008      	b.n	8021748 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021736:	f7ff f85b 	bl	80207f0 <HAL_GetTick>
 802173a:	4602      	mov	r2, r0
 802173c:	693b      	ldr	r3, [r7, #16]
 802173e:	1ad3      	subs	r3, r2, r3
 8021740:	2b02      	cmp	r3, #2
 8021742:	d901      	bls.n	8021748 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8021744:	2303      	movs	r3, #3
 8021746:	e067      	b.n	8021818 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8021748:	4b35      	ldr	r3, [pc, #212]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 802174a:	681b      	ldr	r3, [r3, #0]
 802174c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021750:	2b00      	cmp	r3, #0
 8021752:	d1f0      	bne.n	8021736 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8021754:	687b      	ldr	r3, [r7, #4]
 8021756:	6a1b      	ldr	r3, [r3, #32]
 8021758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802175c:	d108      	bne.n	8021770 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 802175e:	4b30      	ldr	r3, [pc, #192]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 8021760:	685b      	ldr	r3, [r3, #4]
 8021762:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8021766:	687b      	ldr	r3, [r7, #4]
 8021768:	689b      	ldr	r3, [r3, #8]
 802176a:	492d      	ldr	r1, [pc, #180]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 802176c:	4313      	orrs	r3, r2
 802176e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8021770:	4b2b      	ldr	r3, [pc, #172]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 8021772:	685b      	ldr	r3, [r3, #4]
 8021774:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8021778:	687b      	ldr	r3, [r7, #4]
 802177a:	6a19      	ldr	r1, [r3, #32]
 802177c:	687b      	ldr	r3, [r7, #4]
 802177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021780:	430b      	orrs	r3, r1
 8021782:	4927      	ldr	r1, [pc, #156]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 8021784:	4313      	orrs	r3, r2
 8021786:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8021788:	4b27      	ldr	r3, [pc, #156]	; (8021828 <HAL_RCC_OscConfig+0x4fc>)
 802178a:	2201      	movs	r2, #1
 802178c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802178e:	f7ff f82f 	bl	80207f0 <HAL_GetTick>
 8021792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8021794:	e008      	b.n	80217a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021796:	f7ff f82b 	bl	80207f0 <HAL_GetTick>
 802179a:	4602      	mov	r2, r0
 802179c:	693b      	ldr	r3, [r7, #16]
 802179e:	1ad3      	subs	r3, r2, r3
 80217a0:	2b02      	cmp	r3, #2
 80217a2:	d901      	bls.n	80217a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80217a4:	2303      	movs	r3, #3
 80217a6:	e037      	b.n	8021818 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80217a8:	4b1d      	ldr	r3, [pc, #116]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 80217aa:	681b      	ldr	r3, [r3, #0]
 80217ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80217b0:	2b00      	cmp	r3, #0
 80217b2:	d0f0      	beq.n	8021796 <HAL_RCC_OscConfig+0x46a>
 80217b4:	e02f      	b.n	8021816 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80217b6:	4b1c      	ldr	r3, [pc, #112]	; (8021828 <HAL_RCC_OscConfig+0x4fc>)
 80217b8:	2200      	movs	r2, #0
 80217ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80217bc:	f7ff f818 	bl	80207f0 <HAL_GetTick>
 80217c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80217c2:	e008      	b.n	80217d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80217c4:	f7ff f814 	bl	80207f0 <HAL_GetTick>
 80217c8:	4602      	mov	r2, r0
 80217ca:	693b      	ldr	r3, [r7, #16]
 80217cc:	1ad3      	subs	r3, r2, r3
 80217ce:	2b02      	cmp	r3, #2
 80217d0:	d901      	bls.n	80217d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80217d2:	2303      	movs	r3, #3
 80217d4:	e020      	b.n	8021818 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80217d6:	4b12      	ldr	r3, [pc, #72]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 80217d8:	681b      	ldr	r3, [r3, #0]
 80217da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80217de:	2b00      	cmp	r3, #0
 80217e0:	d1f0      	bne.n	80217c4 <HAL_RCC_OscConfig+0x498>
 80217e2:	e018      	b.n	8021816 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80217e4:	687b      	ldr	r3, [r7, #4]
 80217e6:	69db      	ldr	r3, [r3, #28]
 80217e8:	2b01      	cmp	r3, #1
 80217ea:	d101      	bne.n	80217f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80217ec:	2301      	movs	r3, #1
 80217ee:	e013      	b.n	8021818 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80217f0:	4b0b      	ldr	r3, [pc, #44]	; (8021820 <HAL_RCC_OscConfig+0x4f4>)
 80217f2:	685b      	ldr	r3, [r3, #4]
 80217f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80217f6:	68fb      	ldr	r3, [r7, #12]
 80217f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80217fc:	687b      	ldr	r3, [r7, #4]
 80217fe:	6a1b      	ldr	r3, [r3, #32]
 8021800:	429a      	cmp	r2, r3
 8021802:	d106      	bne.n	8021812 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8021804:	68fb      	ldr	r3, [r7, #12]
 8021806:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 802180a:	687b      	ldr	r3, [r7, #4]
 802180c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802180e:	429a      	cmp	r2, r3
 8021810:	d001      	beq.n	8021816 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8021812:	2301      	movs	r3, #1
 8021814:	e000      	b.n	8021818 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8021816:	2300      	movs	r3, #0
}
 8021818:	4618      	mov	r0, r3
 802181a:	3718      	adds	r7, #24
 802181c:	46bd      	mov	sp, r7
 802181e:	bd80      	pop	{r7, pc}
 8021820:	40021000 	.word	0x40021000
 8021824:	40007000 	.word	0x40007000
 8021828:	42420060 	.word	0x42420060

0802182c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 802182c:	b580      	push	{r7, lr}
 802182e:	b084      	sub	sp, #16
 8021830:	af00      	add	r7, sp, #0
 8021832:	6078      	str	r0, [r7, #4]
 8021834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8021836:	687b      	ldr	r3, [r7, #4]
 8021838:	2b00      	cmp	r3, #0
 802183a:	d101      	bne.n	8021840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 802183c:	2301      	movs	r3, #1
 802183e:	e0d0      	b.n	80219e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8021840:	4b6a      	ldr	r3, [pc, #424]	; (80219ec <HAL_RCC_ClockConfig+0x1c0>)
 8021842:	681b      	ldr	r3, [r3, #0]
 8021844:	f003 0307 	and.w	r3, r3, #7
 8021848:	683a      	ldr	r2, [r7, #0]
 802184a:	429a      	cmp	r2, r3
 802184c:	d910      	bls.n	8021870 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802184e:	4b67      	ldr	r3, [pc, #412]	; (80219ec <HAL_RCC_ClockConfig+0x1c0>)
 8021850:	681b      	ldr	r3, [r3, #0]
 8021852:	f023 0207 	bic.w	r2, r3, #7
 8021856:	4965      	ldr	r1, [pc, #404]	; (80219ec <HAL_RCC_ClockConfig+0x1c0>)
 8021858:	683b      	ldr	r3, [r7, #0]
 802185a:	4313      	orrs	r3, r2
 802185c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 802185e:	4b63      	ldr	r3, [pc, #396]	; (80219ec <HAL_RCC_ClockConfig+0x1c0>)
 8021860:	681b      	ldr	r3, [r3, #0]
 8021862:	f003 0307 	and.w	r3, r3, #7
 8021866:	683a      	ldr	r2, [r7, #0]
 8021868:	429a      	cmp	r2, r3
 802186a:	d001      	beq.n	8021870 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 802186c:	2301      	movs	r3, #1
 802186e:	e0b8      	b.n	80219e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8021870:	687b      	ldr	r3, [r7, #4]
 8021872:	681b      	ldr	r3, [r3, #0]
 8021874:	f003 0302 	and.w	r3, r3, #2
 8021878:	2b00      	cmp	r3, #0
 802187a:	d020      	beq.n	80218be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802187c:	687b      	ldr	r3, [r7, #4]
 802187e:	681b      	ldr	r3, [r3, #0]
 8021880:	f003 0304 	and.w	r3, r3, #4
 8021884:	2b00      	cmp	r3, #0
 8021886:	d005      	beq.n	8021894 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8021888:	4b59      	ldr	r3, [pc, #356]	; (80219f0 <HAL_RCC_ClockConfig+0x1c4>)
 802188a:	685b      	ldr	r3, [r3, #4]
 802188c:	4a58      	ldr	r2, [pc, #352]	; (80219f0 <HAL_RCC_ClockConfig+0x1c4>)
 802188e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8021892:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8021894:	687b      	ldr	r3, [r7, #4]
 8021896:	681b      	ldr	r3, [r3, #0]
 8021898:	f003 0308 	and.w	r3, r3, #8
 802189c:	2b00      	cmp	r3, #0
 802189e:	d005      	beq.n	80218ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80218a0:	4b53      	ldr	r3, [pc, #332]	; (80219f0 <HAL_RCC_ClockConfig+0x1c4>)
 80218a2:	685b      	ldr	r3, [r3, #4]
 80218a4:	4a52      	ldr	r2, [pc, #328]	; (80219f0 <HAL_RCC_ClockConfig+0x1c4>)
 80218a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80218aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80218ac:	4b50      	ldr	r3, [pc, #320]	; (80219f0 <HAL_RCC_ClockConfig+0x1c4>)
 80218ae:	685b      	ldr	r3, [r3, #4]
 80218b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80218b4:	687b      	ldr	r3, [r7, #4]
 80218b6:	689b      	ldr	r3, [r3, #8]
 80218b8:	494d      	ldr	r1, [pc, #308]	; (80219f0 <HAL_RCC_ClockConfig+0x1c4>)
 80218ba:	4313      	orrs	r3, r2
 80218bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80218be:	687b      	ldr	r3, [r7, #4]
 80218c0:	681b      	ldr	r3, [r3, #0]
 80218c2:	f003 0301 	and.w	r3, r3, #1
 80218c6:	2b00      	cmp	r3, #0
 80218c8:	d040      	beq.n	802194c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80218ca:	687b      	ldr	r3, [r7, #4]
 80218cc:	685b      	ldr	r3, [r3, #4]
 80218ce:	2b01      	cmp	r3, #1
 80218d0:	d107      	bne.n	80218e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80218d2:	4b47      	ldr	r3, [pc, #284]	; (80219f0 <HAL_RCC_ClockConfig+0x1c4>)
 80218d4:	681b      	ldr	r3, [r3, #0]
 80218d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80218da:	2b00      	cmp	r3, #0
 80218dc:	d115      	bne.n	802190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80218de:	2301      	movs	r3, #1
 80218e0:	e07f      	b.n	80219e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80218e2:	687b      	ldr	r3, [r7, #4]
 80218e4:	685b      	ldr	r3, [r3, #4]
 80218e6:	2b02      	cmp	r3, #2
 80218e8:	d107      	bne.n	80218fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80218ea:	4b41      	ldr	r3, [pc, #260]	; (80219f0 <HAL_RCC_ClockConfig+0x1c4>)
 80218ec:	681b      	ldr	r3, [r3, #0]
 80218ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80218f2:	2b00      	cmp	r3, #0
 80218f4:	d109      	bne.n	802190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80218f6:	2301      	movs	r3, #1
 80218f8:	e073      	b.n	80219e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80218fa:	4b3d      	ldr	r3, [pc, #244]	; (80219f0 <HAL_RCC_ClockConfig+0x1c4>)
 80218fc:	681b      	ldr	r3, [r3, #0]
 80218fe:	f003 0302 	and.w	r3, r3, #2
 8021902:	2b00      	cmp	r3, #0
 8021904:	d101      	bne.n	802190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8021906:	2301      	movs	r3, #1
 8021908:	e06b      	b.n	80219e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 802190a:	4b39      	ldr	r3, [pc, #228]	; (80219f0 <HAL_RCC_ClockConfig+0x1c4>)
 802190c:	685b      	ldr	r3, [r3, #4]
 802190e:	f023 0203 	bic.w	r2, r3, #3
 8021912:	687b      	ldr	r3, [r7, #4]
 8021914:	685b      	ldr	r3, [r3, #4]
 8021916:	4936      	ldr	r1, [pc, #216]	; (80219f0 <HAL_RCC_ClockConfig+0x1c4>)
 8021918:	4313      	orrs	r3, r2
 802191a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 802191c:	f7fe ff68 	bl	80207f0 <HAL_GetTick>
 8021920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8021922:	e00a      	b.n	802193a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8021924:	f7fe ff64 	bl	80207f0 <HAL_GetTick>
 8021928:	4602      	mov	r2, r0
 802192a:	68fb      	ldr	r3, [r7, #12]
 802192c:	1ad3      	subs	r3, r2, r3
 802192e:	f241 3288 	movw	r2, #5000	; 0x1388
 8021932:	4293      	cmp	r3, r2
 8021934:	d901      	bls.n	802193a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8021936:	2303      	movs	r3, #3
 8021938:	e053      	b.n	80219e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802193a:	4b2d      	ldr	r3, [pc, #180]	; (80219f0 <HAL_RCC_ClockConfig+0x1c4>)
 802193c:	685b      	ldr	r3, [r3, #4]
 802193e:	f003 020c 	and.w	r2, r3, #12
 8021942:	687b      	ldr	r3, [r7, #4]
 8021944:	685b      	ldr	r3, [r3, #4]
 8021946:	009b      	lsls	r3, r3, #2
 8021948:	429a      	cmp	r2, r3
 802194a:	d1eb      	bne.n	8021924 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 802194c:	4b27      	ldr	r3, [pc, #156]	; (80219ec <HAL_RCC_ClockConfig+0x1c0>)
 802194e:	681b      	ldr	r3, [r3, #0]
 8021950:	f003 0307 	and.w	r3, r3, #7
 8021954:	683a      	ldr	r2, [r7, #0]
 8021956:	429a      	cmp	r2, r3
 8021958:	d210      	bcs.n	802197c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802195a:	4b24      	ldr	r3, [pc, #144]	; (80219ec <HAL_RCC_ClockConfig+0x1c0>)
 802195c:	681b      	ldr	r3, [r3, #0]
 802195e:	f023 0207 	bic.w	r2, r3, #7
 8021962:	4922      	ldr	r1, [pc, #136]	; (80219ec <HAL_RCC_ClockConfig+0x1c0>)
 8021964:	683b      	ldr	r3, [r7, #0]
 8021966:	4313      	orrs	r3, r2
 8021968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 802196a:	4b20      	ldr	r3, [pc, #128]	; (80219ec <HAL_RCC_ClockConfig+0x1c0>)
 802196c:	681b      	ldr	r3, [r3, #0]
 802196e:	f003 0307 	and.w	r3, r3, #7
 8021972:	683a      	ldr	r2, [r7, #0]
 8021974:	429a      	cmp	r2, r3
 8021976:	d001      	beq.n	802197c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8021978:	2301      	movs	r3, #1
 802197a:	e032      	b.n	80219e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802197c:	687b      	ldr	r3, [r7, #4]
 802197e:	681b      	ldr	r3, [r3, #0]
 8021980:	f003 0304 	and.w	r3, r3, #4
 8021984:	2b00      	cmp	r3, #0
 8021986:	d008      	beq.n	802199a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8021988:	4b19      	ldr	r3, [pc, #100]	; (80219f0 <HAL_RCC_ClockConfig+0x1c4>)
 802198a:	685b      	ldr	r3, [r3, #4]
 802198c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8021990:	687b      	ldr	r3, [r7, #4]
 8021992:	68db      	ldr	r3, [r3, #12]
 8021994:	4916      	ldr	r1, [pc, #88]	; (80219f0 <HAL_RCC_ClockConfig+0x1c4>)
 8021996:	4313      	orrs	r3, r2
 8021998:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802199a:	687b      	ldr	r3, [r7, #4]
 802199c:	681b      	ldr	r3, [r3, #0]
 802199e:	f003 0308 	and.w	r3, r3, #8
 80219a2:	2b00      	cmp	r3, #0
 80219a4:	d009      	beq.n	80219ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80219a6:	4b12      	ldr	r3, [pc, #72]	; (80219f0 <HAL_RCC_ClockConfig+0x1c4>)
 80219a8:	685b      	ldr	r3, [r3, #4]
 80219aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80219ae:	687b      	ldr	r3, [r7, #4]
 80219b0:	691b      	ldr	r3, [r3, #16]
 80219b2:	00db      	lsls	r3, r3, #3
 80219b4:	490e      	ldr	r1, [pc, #56]	; (80219f0 <HAL_RCC_ClockConfig+0x1c4>)
 80219b6:	4313      	orrs	r3, r2
 80219b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80219ba:	f000 f821 	bl	8021a00 <HAL_RCC_GetSysClockFreq>
 80219be:	4602      	mov	r2, r0
 80219c0:	4b0b      	ldr	r3, [pc, #44]	; (80219f0 <HAL_RCC_ClockConfig+0x1c4>)
 80219c2:	685b      	ldr	r3, [r3, #4]
 80219c4:	091b      	lsrs	r3, r3, #4
 80219c6:	f003 030f 	and.w	r3, r3, #15
 80219ca:	490a      	ldr	r1, [pc, #40]	; (80219f4 <HAL_RCC_ClockConfig+0x1c8>)
 80219cc:	5ccb      	ldrb	r3, [r1, r3]
 80219ce:	fa22 f303 	lsr.w	r3, r2, r3
 80219d2:	4a09      	ldr	r2, [pc, #36]	; (80219f8 <HAL_RCC_ClockConfig+0x1cc>)
 80219d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80219d6:	4b09      	ldr	r3, [pc, #36]	; (80219fc <HAL_RCC_ClockConfig+0x1d0>)
 80219d8:	681b      	ldr	r3, [r3, #0]
 80219da:	4618      	mov	r0, r3
 80219dc:	f7fe fec6 	bl	802076c <HAL_InitTick>

  return HAL_OK;
 80219e0:	2300      	movs	r3, #0
}
 80219e2:	4618      	mov	r0, r3
 80219e4:	3710      	adds	r7, #16
 80219e6:	46bd      	mov	sp, r7
 80219e8:	bd80      	pop	{r7, pc}
 80219ea:	bf00      	nop
 80219ec:	40022000 	.word	0x40022000
 80219f0:	40021000 	.word	0x40021000
 80219f4:	08023f7c 	.word	0x08023f7c
 80219f8:	200000f4 	.word	0x200000f4
 80219fc:	200000f8 	.word	0x200000f8

08021a00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8021a00:	b490      	push	{r4, r7}
 8021a02:	b08a      	sub	sp, #40	; 0x28
 8021a04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8021a06:	4b2a      	ldr	r3, [pc, #168]	; (8021ab0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8021a08:	1d3c      	adds	r4, r7, #4
 8021a0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8021a0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8021a10:	f240 2301 	movw	r3, #513	; 0x201
 8021a14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8021a16:	2300      	movs	r3, #0
 8021a18:	61fb      	str	r3, [r7, #28]
 8021a1a:	2300      	movs	r3, #0
 8021a1c:	61bb      	str	r3, [r7, #24]
 8021a1e:	2300      	movs	r3, #0
 8021a20:	627b      	str	r3, [r7, #36]	; 0x24
 8021a22:	2300      	movs	r3, #0
 8021a24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8021a26:	2300      	movs	r3, #0
 8021a28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8021a2a:	4b22      	ldr	r3, [pc, #136]	; (8021ab4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8021a2c:	685b      	ldr	r3, [r3, #4]
 8021a2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8021a30:	69fb      	ldr	r3, [r7, #28]
 8021a32:	f003 030c 	and.w	r3, r3, #12
 8021a36:	2b04      	cmp	r3, #4
 8021a38:	d002      	beq.n	8021a40 <HAL_RCC_GetSysClockFreq+0x40>
 8021a3a:	2b08      	cmp	r3, #8
 8021a3c:	d003      	beq.n	8021a46 <HAL_RCC_GetSysClockFreq+0x46>
 8021a3e:	e02d      	b.n	8021a9c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8021a40:	4b1d      	ldr	r3, [pc, #116]	; (8021ab8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8021a42:	623b      	str	r3, [r7, #32]
      break;
 8021a44:	e02d      	b.n	8021aa2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8021a46:	69fb      	ldr	r3, [r7, #28]
 8021a48:	0c9b      	lsrs	r3, r3, #18
 8021a4a:	f003 030f 	and.w	r3, r3, #15
 8021a4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8021a52:	4413      	add	r3, r2
 8021a54:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8021a58:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8021a5a:	69fb      	ldr	r3, [r7, #28]
 8021a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8021a60:	2b00      	cmp	r3, #0
 8021a62:	d013      	beq.n	8021a8c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8021a64:	4b13      	ldr	r3, [pc, #76]	; (8021ab4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8021a66:	685b      	ldr	r3, [r3, #4]
 8021a68:	0c5b      	lsrs	r3, r3, #17
 8021a6a:	f003 0301 	and.w	r3, r3, #1
 8021a6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8021a72:	4413      	add	r3, r2
 8021a74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8021a78:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8021a7a:	697b      	ldr	r3, [r7, #20]
 8021a7c:	4a0e      	ldr	r2, [pc, #56]	; (8021ab8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8021a7e:	fb02 f203 	mul.w	r2, r2, r3
 8021a82:	69bb      	ldr	r3, [r7, #24]
 8021a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8021a88:	627b      	str	r3, [r7, #36]	; 0x24
 8021a8a:	e004      	b.n	8021a96 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8021a8c:	697b      	ldr	r3, [r7, #20]
 8021a8e:	4a0b      	ldr	r2, [pc, #44]	; (8021abc <HAL_RCC_GetSysClockFreq+0xbc>)
 8021a90:	fb02 f303 	mul.w	r3, r2, r3
 8021a94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8021a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a98:	623b      	str	r3, [r7, #32]
      break;
 8021a9a:	e002      	b.n	8021aa2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8021a9c:	4b06      	ldr	r3, [pc, #24]	; (8021ab8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8021a9e:	623b      	str	r3, [r7, #32]
      break;
 8021aa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8021aa2:	6a3b      	ldr	r3, [r7, #32]
}
 8021aa4:	4618      	mov	r0, r3
 8021aa6:	3728      	adds	r7, #40	; 0x28
 8021aa8:	46bd      	mov	sp, r7
 8021aaa:	bc90      	pop	{r4, r7}
 8021aac:	4770      	bx	lr
 8021aae:	bf00      	nop
 8021ab0:	08023f20 	.word	0x08023f20
 8021ab4:	40021000 	.word	0x40021000
 8021ab8:	007a1200 	.word	0x007a1200
 8021abc:	003d0900 	.word	0x003d0900

08021ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8021ac0:	b480      	push	{r7}
 8021ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8021ac4:	4b02      	ldr	r3, [pc, #8]	; (8021ad0 <HAL_RCC_GetHCLKFreq+0x10>)
 8021ac6:	681b      	ldr	r3, [r3, #0]
}
 8021ac8:	4618      	mov	r0, r3
 8021aca:	46bd      	mov	sp, r7
 8021acc:	bc80      	pop	{r7}
 8021ace:	4770      	bx	lr
 8021ad0:	200000f4 	.word	0x200000f4

08021ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8021ad4:	b580      	push	{r7, lr}
 8021ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8021ad8:	f7ff fff2 	bl	8021ac0 <HAL_RCC_GetHCLKFreq>
 8021adc:	4602      	mov	r2, r0
 8021ade:	4b05      	ldr	r3, [pc, #20]	; (8021af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8021ae0:	685b      	ldr	r3, [r3, #4]
 8021ae2:	0a1b      	lsrs	r3, r3, #8
 8021ae4:	f003 0307 	and.w	r3, r3, #7
 8021ae8:	4903      	ldr	r1, [pc, #12]	; (8021af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8021aea:	5ccb      	ldrb	r3, [r1, r3]
 8021aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8021af0:	4618      	mov	r0, r3
 8021af2:	bd80      	pop	{r7, pc}
 8021af4:	40021000 	.word	0x40021000
 8021af8:	08023f8c 	.word	0x08023f8c

08021afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8021afc:	b580      	push	{r7, lr}
 8021afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8021b00:	f7ff ffde 	bl	8021ac0 <HAL_RCC_GetHCLKFreq>
 8021b04:	4602      	mov	r2, r0
 8021b06:	4b05      	ldr	r3, [pc, #20]	; (8021b1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8021b08:	685b      	ldr	r3, [r3, #4]
 8021b0a:	0adb      	lsrs	r3, r3, #11
 8021b0c:	f003 0307 	and.w	r3, r3, #7
 8021b10:	4903      	ldr	r1, [pc, #12]	; (8021b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8021b12:	5ccb      	ldrb	r3, [r1, r3]
 8021b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8021b18:	4618      	mov	r0, r3
 8021b1a:	bd80      	pop	{r7, pc}
 8021b1c:	40021000 	.word	0x40021000
 8021b20:	08023f8c 	.word	0x08023f8c

08021b24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8021b24:	b480      	push	{r7}
 8021b26:	b085      	sub	sp, #20
 8021b28:	af00      	add	r7, sp, #0
 8021b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8021b2c:	4b0a      	ldr	r3, [pc, #40]	; (8021b58 <RCC_Delay+0x34>)
 8021b2e:	681b      	ldr	r3, [r3, #0]
 8021b30:	4a0a      	ldr	r2, [pc, #40]	; (8021b5c <RCC_Delay+0x38>)
 8021b32:	fba2 2303 	umull	r2, r3, r2, r3
 8021b36:	0a5b      	lsrs	r3, r3, #9
 8021b38:	687a      	ldr	r2, [r7, #4]
 8021b3a:	fb02 f303 	mul.w	r3, r2, r3
 8021b3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8021b40:	bf00      	nop
  }
  while (Delay --);
 8021b42:	68fb      	ldr	r3, [r7, #12]
 8021b44:	1e5a      	subs	r2, r3, #1
 8021b46:	60fa      	str	r2, [r7, #12]
 8021b48:	2b00      	cmp	r3, #0
 8021b4a:	d1f9      	bne.n	8021b40 <RCC_Delay+0x1c>
}
 8021b4c:	bf00      	nop
 8021b4e:	bf00      	nop
 8021b50:	3714      	adds	r7, #20
 8021b52:	46bd      	mov	sp, r7
 8021b54:	bc80      	pop	{r7}
 8021b56:	4770      	bx	lr
 8021b58:	200000f4 	.word	0x200000f4
 8021b5c:	10624dd3 	.word	0x10624dd3

08021b60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8021b60:	b580      	push	{r7, lr}
 8021b62:	b082      	sub	sp, #8
 8021b64:	af00      	add	r7, sp, #0
 8021b66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8021b68:	687b      	ldr	r3, [r7, #4]
 8021b6a:	2b00      	cmp	r3, #0
 8021b6c:	d101      	bne.n	8021b72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8021b6e:	2301      	movs	r3, #1
 8021b70:	e076      	b.n	8021c60 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8021b72:	687b      	ldr	r3, [r7, #4]
 8021b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021b76:	2b00      	cmp	r3, #0
 8021b78:	d108      	bne.n	8021b8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8021b7a:	687b      	ldr	r3, [r7, #4]
 8021b7c:	685b      	ldr	r3, [r3, #4]
 8021b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8021b82:	d009      	beq.n	8021b98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8021b84:	687b      	ldr	r3, [r7, #4]
 8021b86:	2200      	movs	r2, #0
 8021b88:	61da      	str	r2, [r3, #28]
 8021b8a:	e005      	b.n	8021b98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8021b8c:	687b      	ldr	r3, [r7, #4]
 8021b8e:	2200      	movs	r2, #0
 8021b90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8021b92:	687b      	ldr	r3, [r7, #4]
 8021b94:	2200      	movs	r2, #0
 8021b96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8021b98:	687b      	ldr	r3, [r7, #4]
 8021b9a:	2200      	movs	r2, #0
 8021b9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8021b9e:	687b      	ldr	r3, [r7, #4]
 8021ba0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8021ba4:	b2db      	uxtb	r3, r3
 8021ba6:	2b00      	cmp	r3, #0
 8021ba8:	d106      	bne.n	8021bb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8021baa:	687b      	ldr	r3, [r7, #4]
 8021bac:	2200      	movs	r2, #0
 8021bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8021bb2:	6878      	ldr	r0, [r7, #4]
 8021bb4:	f7fe fc28 	bl	8020408 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8021bb8:	687b      	ldr	r3, [r7, #4]
 8021bba:	2202      	movs	r2, #2
 8021bbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8021bc0:	687b      	ldr	r3, [r7, #4]
 8021bc2:	681b      	ldr	r3, [r3, #0]
 8021bc4:	681a      	ldr	r2, [r3, #0]
 8021bc6:	687b      	ldr	r3, [r7, #4]
 8021bc8:	681b      	ldr	r3, [r3, #0]
 8021bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8021bce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8021bd0:	687b      	ldr	r3, [r7, #4]
 8021bd2:	685b      	ldr	r3, [r3, #4]
 8021bd4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8021bd8:	687b      	ldr	r3, [r7, #4]
 8021bda:	689b      	ldr	r3, [r3, #8]
 8021bdc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8021be0:	431a      	orrs	r2, r3
 8021be2:	687b      	ldr	r3, [r7, #4]
 8021be4:	68db      	ldr	r3, [r3, #12]
 8021be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8021bea:	431a      	orrs	r2, r3
 8021bec:	687b      	ldr	r3, [r7, #4]
 8021bee:	691b      	ldr	r3, [r3, #16]
 8021bf0:	f003 0302 	and.w	r3, r3, #2
 8021bf4:	431a      	orrs	r2, r3
 8021bf6:	687b      	ldr	r3, [r7, #4]
 8021bf8:	695b      	ldr	r3, [r3, #20]
 8021bfa:	f003 0301 	and.w	r3, r3, #1
 8021bfe:	431a      	orrs	r2, r3
 8021c00:	687b      	ldr	r3, [r7, #4]
 8021c02:	699b      	ldr	r3, [r3, #24]
 8021c04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8021c08:	431a      	orrs	r2, r3
 8021c0a:	687b      	ldr	r3, [r7, #4]
 8021c0c:	69db      	ldr	r3, [r3, #28]
 8021c0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8021c12:	431a      	orrs	r2, r3
 8021c14:	687b      	ldr	r3, [r7, #4]
 8021c16:	6a1b      	ldr	r3, [r3, #32]
 8021c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021c1c:	ea42 0103 	orr.w	r1, r2, r3
 8021c20:	687b      	ldr	r3, [r7, #4]
 8021c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021c24:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8021c28:	687b      	ldr	r3, [r7, #4]
 8021c2a:	681b      	ldr	r3, [r3, #0]
 8021c2c:	430a      	orrs	r2, r1
 8021c2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8021c30:	687b      	ldr	r3, [r7, #4]
 8021c32:	699b      	ldr	r3, [r3, #24]
 8021c34:	0c1a      	lsrs	r2, r3, #16
 8021c36:	687b      	ldr	r3, [r7, #4]
 8021c38:	681b      	ldr	r3, [r3, #0]
 8021c3a:	f002 0204 	and.w	r2, r2, #4
 8021c3e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8021c40:	687b      	ldr	r3, [r7, #4]
 8021c42:	681b      	ldr	r3, [r3, #0]
 8021c44:	69da      	ldr	r2, [r3, #28]
 8021c46:	687b      	ldr	r3, [r7, #4]
 8021c48:	681b      	ldr	r3, [r3, #0]
 8021c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8021c4e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8021c50:	687b      	ldr	r3, [r7, #4]
 8021c52:	2200      	movs	r2, #0
 8021c54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8021c56:	687b      	ldr	r3, [r7, #4]
 8021c58:	2201      	movs	r2, #1
 8021c5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8021c5e:	2300      	movs	r3, #0
}
 8021c60:	4618      	mov	r0, r3
 8021c62:	3708      	adds	r7, #8
 8021c64:	46bd      	mov	sp, r7
 8021c66:	bd80      	pop	{r7, pc}

08021c68 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8021c68:	b580      	push	{r7, lr}
 8021c6a:	b088      	sub	sp, #32
 8021c6c:	af00      	add	r7, sp, #0
 8021c6e:	60f8      	str	r0, [r7, #12]
 8021c70:	60b9      	str	r1, [r7, #8]
 8021c72:	603b      	str	r3, [r7, #0]
 8021c74:	4613      	mov	r3, r2
 8021c76:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8021c78:	2300      	movs	r3, #0
 8021c7a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8021c7c:	68fb      	ldr	r3, [r7, #12]
 8021c7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8021c82:	2b01      	cmp	r3, #1
 8021c84:	d101      	bne.n	8021c8a <HAL_SPI_Transmit+0x22>
 8021c86:	2302      	movs	r3, #2
 8021c88:	e126      	b.n	8021ed8 <HAL_SPI_Transmit+0x270>
 8021c8a:	68fb      	ldr	r3, [r7, #12]
 8021c8c:	2201      	movs	r2, #1
 8021c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8021c92:	f7fe fdad 	bl	80207f0 <HAL_GetTick>
 8021c96:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8021c98:	88fb      	ldrh	r3, [r7, #6]
 8021c9a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8021c9c:	68fb      	ldr	r3, [r7, #12]
 8021c9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8021ca2:	b2db      	uxtb	r3, r3
 8021ca4:	2b01      	cmp	r3, #1
 8021ca6:	d002      	beq.n	8021cae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8021ca8:	2302      	movs	r3, #2
 8021caa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8021cac:	e10b      	b.n	8021ec6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8021cae:	68bb      	ldr	r3, [r7, #8]
 8021cb0:	2b00      	cmp	r3, #0
 8021cb2:	d002      	beq.n	8021cba <HAL_SPI_Transmit+0x52>
 8021cb4:	88fb      	ldrh	r3, [r7, #6]
 8021cb6:	2b00      	cmp	r3, #0
 8021cb8:	d102      	bne.n	8021cc0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8021cba:	2301      	movs	r3, #1
 8021cbc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8021cbe:	e102      	b.n	8021ec6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8021cc0:	68fb      	ldr	r3, [r7, #12]
 8021cc2:	2203      	movs	r2, #3
 8021cc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8021cc8:	68fb      	ldr	r3, [r7, #12]
 8021cca:	2200      	movs	r2, #0
 8021ccc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8021cce:	68fb      	ldr	r3, [r7, #12]
 8021cd0:	68ba      	ldr	r2, [r7, #8]
 8021cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8021cd4:	68fb      	ldr	r3, [r7, #12]
 8021cd6:	88fa      	ldrh	r2, [r7, #6]
 8021cd8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8021cda:	68fb      	ldr	r3, [r7, #12]
 8021cdc:	88fa      	ldrh	r2, [r7, #6]
 8021cde:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8021ce0:	68fb      	ldr	r3, [r7, #12]
 8021ce2:	2200      	movs	r2, #0
 8021ce4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8021ce6:	68fb      	ldr	r3, [r7, #12]
 8021ce8:	2200      	movs	r2, #0
 8021cea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8021cec:	68fb      	ldr	r3, [r7, #12]
 8021cee:	2200      	movs	r2, #0
 8021cf0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8021cf2:	68fb      	ldr	r3, [r7, #12]
 8021cf4:	2200      	movs	r2, #0
 8021cf6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8021cf8:	68fb      	ldr	r3, [r7, #12]
 8021cfa:	2200      	movs	r2, #0
 8021cfc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8021cfe:	68fb      	ldr	r3, [r7, #12]
 8021d00:	689b      	ldr	r3, [r3, #8]
 8021d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8021d06:	d10f      	bne.n	8021d28 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8021d08:	68fb      	ldr	r3, [r7, #12]
 8021d0a:	681b      	ldr	r3, [r3, #0]
 8021d0c:	681a      	ldr	r2, [r3, #0]
 8021d0e:	68fb      	ldr	r3, [r7, #12]
 8021d10:	681b      	ldr	r3, [r3, #0]
 8021d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8021d16:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8021d18:	68fb      	ldr	r3, [r7, #12]
 8021d1a:	681b      	ldr	r3, [r3, #0]
 8021d1c:	681a      	ldr	r2, [r3, #0]
 8021d1e:	68fb      	ldr	r3, [r7, #12]
 8021d20:	681b      	ldr	r3, [r3, #0]
 8021d22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8021d26:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8021d28:	68fb      	ldr	r3, [r7, #12]
 8021d2a:	681b      	ldr	r3, [r3, #0]
 8021d2c:	681b      	ldr	r3, [r3, #0]
 8021d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021d32:	2b40      	cmp	r3, #64	; 0x40
 8021d34:	d007      	beq.n	8021d46 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8021d36:	68fb      	ldr	r3, [r7, #12]
 8021d38:	681b      	ldr	r3, [r3, #0]
 8021d3a:	681a      	ldr	r2, [r3, #0]
 8021d3c:	68fb      	ldr	r3, [r7, #12]
 8021d3e:	681b      	ldr	r3, [r3, #0]
 8021d40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8021d44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8021d46:	68fb      	ldr	r3, [r7, #12]
 8021d48:	68db      	ldr	r3, [r3, #12]
 8021d4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8021d4e:	d14b      	bne.n	8021de8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8021d50:	68fb      	ldr	r3, [r7, #12]
 8021d52:	685b      	ldr	r3, [r3, #4]
 8021d54:	2b00      	cmp	r3, #0
 8021d56:	d002      	beq.n	8021d5e <HAL_SPI_Transmit+0xf6>
 8021d58:	8afb      	ldrh	r3, [r7, #22]
 8021d5a:	2b01      	cmp	r3, #1
 8021d5c:	d13e      	bne.n	8021ddc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8021d5e:	68fb      	ldr	r3, [r7, #12]
 8021d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021d62:	881a      	ldrh	r2, [r3, #0]
 8021d64:	68fb      	ldr	r3, [r7, #12]
 8021d66:	681b      	ldr	r3, [r3, #0]
 8021d68:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8021d6a:	68fb      	ldr	r3, [r7, #12]
 8021d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021d6e:	1c9a      	adds	r2, r3, #2
 8021d70:	68fb      	ldr	r3, [r7, #12]
 8021d72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8021d74:	68fb      	ldr	r3, [r7, #12]
 8021d76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8021d78:	b29b      	uxth	r3, r3
 8021d7a:	3b01      	subs	r3, #1
 8021d7c:	b29a      	uxth	r2, r3
 8021d7e:	68fb      	ldr	r3, [r7, #12]
 8021d80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8021d82:	e02b      	b.n	8021ddc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8021d84:	68fb      	ldr	r3, [r7, #12]
 8021d86:	681b      	ldr	r3, [r3, #0]
 8021d88:	689b      	ldr	r3, [r3, #8]
 8021d8a:	f003 0302 	and.w	r3, r3, #2
 8021d8e:	2b02      	cmp	r3, #2
 8021d90:	d112      	bne.n	8021db8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8021d92:	68fb      	ldr	r3, [r7, #12]
 8021d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021d96:	881a      	ldrh	r2, [r3, #0]
 8021d98:	68fb      	ldr	r3, [r7, #12]
 8021d9a:	681b      	ldr	r3, [r3, #0]
 8021d9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8021d9e:	68fb      	ldr	r3, [r7, #12]
 8021da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021da2:	1c9a      	adds	r2, r3, #2
 8021da4:	68fb      	ldr	r3, [r7, #12]
 8021da6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8021da8:	68fb      	ldr	r3, [r7, #12]
 8021daa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8021dac:	b29b      	uxth	r3, r3
 8021dae:	3b01      	subs	r3, #1
 8021db0:	b29a      	uxth	r2, r3
 8021db2:	68fb      	ldr	r3, [r7, #12]
 8021db4:	86da      	strh	r2, [r3, #54]	; 0x36
 8021db6:	e011      	b.n	8021ddc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8021db8:	f7fe fd1a 	bl	80207f0 <HAL_GetTick>
 8021dbc:	4602      	mov	r2, r0
 8021dbe:	69bb      	ldr	r3, [r7, #24]
 8021dc0:	1ad3      	subs	r3, r2, r3
 8021dc2:	683a      	ldr	r2, [r7, #0]
 8021dc4:	429a      	cmp	r2, r3
 8021dc6:	d803      	bhi.n	8021dd0 <HAL_SPI_Transmit+0x168>
 8021dc8:	683b      	ldr	r3, [r7, #0]
 8021dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021dce:	d102      	bne.n	8021dd6 <HAL_SPI_Transmit+0x16e>
 8021dd0:	683b      	ldr	r3, [r7, #0]
 8021dd2:	2b00      	cmp	r3, #0
 8021dd4:	d102      	bne.n	8021ddc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8021dd6:	2303      	movs	r3, #3
 8021dd8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8021dda:	e074      	b.n	8021ec6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8021ddc:	68fb      	ldr	r3, [r7, #12]
 8021dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8021de0:	b29b      	uxth	r3, r3
 8021de2:	2b00      	cmp	r3, #0
 8021de4:	d1ce      	bne.n	8021d84 <HAL_SPI_Transmit+0x11c>
 8021de6:	e04c      	b.n	8021e82 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8021de8:	68fb      	ldr	r3, [r7, #12]
 8021dea:	685b      	ldr	r3, [r3, #4]
 8021dec:	2b00      	cmp	r3, #0
 8021dee:	d002      	beq.n	8021df6 <HAL_SPI_Transmit+0x18e>
 8021df0:	8afb      	ldrh	r3, [r7, #22]
 8021df2:	2b01      	cmp	r3, #1
 8021df4:	d140      	bne.n	8021e78 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8021df6:	68fb      	ldr	r3, [r7, #12]
 8021df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8021dfa:	68fb      	ldr	r3, [r7, #12]
 8021dfc:	681b      	ldr	r3, [r3, #0]
 8021dfe:	330c      	adds	r3, #12
 8021e00:	7812      	ldrb	r2, [r2, #0]
 8021e02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8021e04:	68fb      	ldr	r3, [r7, #12]
 8021e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021e08:	1c5a      	adds	r2, r3, #1
 8021e0a:	68fb      	ldr	r3, [r7, #12]
 8021e0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8021e0e:	68fb      	ldr	r3, [r7, #12]
 8021e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8021e12:	b29b      	uxth	r3, r3
 8021e14:	3b01      	subs	r3, #1
 8021e16:	b29a      	uxth	r2, r3
 8021e18:	68fb      	ldr	r3, [r7, #12]
 8021e1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8021e1c:	e02c      	b.n	8021e78 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8021e1e:	68fb      	ldr	r3, [r7, #12]
 8021e20:	681b      	ldr	r3, [r3, #0]
 8021e22:	689b      	ldr	r3, [r3, #8]
 8021e24:	f003 0302 	and.w	r3, r3, #2
 8021e28:	2b02      	cmp	r3, #2
 8021e2a:	d113      	bne.n	8021e54 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8021e2c:	68fb      	ldr	r3, [r7, #12]
 8021e2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8021e30:	68fb      	ldr	r3, [r7, #12]
 8021e32:	681b      	ldr	r3, [r3, #0]
 8021e34:	330c      	adds	r3, #12
 8021e36:	7812      	ldrb	r2, [r2, #0]
 8021e38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8021e3a:	68fb      	ldr	r3, [r7, #12]
 8021e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021e3e:	1c5a      	adds	r2, r3, #1
 8021e40:	68fb      	ldr	r3, [r7, #12]
 8021e42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8021e44:	68fb      	ldr	r3, [r7, #12]
 8021e46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8021e48:	b29b      	uxth	r3, r3
 8021e4a:	3b01      	subs	r3, #1
 8021e4c:	b29a      	uxth	r2, r3
 8021e4e:	68fb      	ldr	r3, [r7, #12]
 8021e50:	86da      	strh	r2, [r3, #54]	; 0x36
 8021e52:	e011      	b.n	8021e78 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8021e54:	f7fe fccc 	bl	80207f0 <HAL_GetTick>
 8021e58:	4602      	mov	r2, r0
 8021e5a:	69bb      	ldr	r3, [r7, #24]
 8021e5c:	1ad3      	subs	r3, r2, r3
 8021e5e:	683a      	ldr	r2, [r7, #0]
 8021e60:	429a      	cmp	r2, r3
 8021e62:	d803      	bhi.n	8021e6c <HAL_SPI_Transmit+0x204>
 8021e64:	683b      	ldr	r3, [r7, #0]
 8021e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021e6a:	d102      	bne.n	8021e72 <HAL_SPI_Transmit+0x20a>
 8021e6c:	683b      	ldr	r3, [r7, #0]
 8021e6e:	2b00      	cmp	r3, #0
 8021e70:	d102      	bne.n	8021e78 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8021e72:	2303      	movs	r3, #3
 8021e74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8021e76:	e026      	b.n	8021ec6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8021e78:	68fb      	ldr	r3, [r7, #12]
 8021e7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8021e7c:	b29b      	uxth	r3, r3
 8021e7e:	2b00      	cmp	r3, #0
 8021e80:	d1cd      	bne.n	8021e1e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8021e82:	69ba      	ldr	r2, [r7, #24]
 8021e84:	6839      	ldr	r1, [r7, #0]
 8021e86:	68f8      	ldr	r0, [r7, #12]
 8021e88:	f000 f8b2 	bl	8021ff0 <SPI_EndRxTxTransaction>
 8021e8c:	4603      	mov	r3, r0
 8021e8e:	2b00      	cmp	r3, #0
 8021e90:	d002      	beq.n	8021e98 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8021e92:	68fb      	ldr	r3, [r7, #12]
 8021e94:	2220      	movs	r2, #32
 8021e96:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8021e98:	68fb      	ldr	r3, [r7, #12]
 8021e9a:	689b      	ldr	r3, [r3, #8]
 8021e9c:	2b00      	cmp	r3, #0
 8021e9e:	d10a      	bne.n	8021eb6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8021ea0:	2300      	movs	r3, #0
 8021ea2:	613b      	str	r3, [r7, #16]
 8021ea4:	68fb      	ldr	r3, [r7, #12]
 8021ea6:	681b      	ldr	r3, [r3, #0]
 8021ea8:	68db      	ldr	r3, [r3, #12]
 8021eaa:	613b      	str	r3, [r7, #16]
 8021eac:	68fb      	ldr	r3, [r7, #12]
 8021eae:	681b      	ldr	r3, [r3, #0]
 8021eb0:	689b      	ldr	r3, [r3, #8]
 8021eb2:	613b      	str	r3, [r7, #16]
 8021eb4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8021eb6:	68fb      	ldr	r3, [r7, #12]
 8021eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021eba:	2b00      	cmp	r3, #0
 8021ebc:	d002      	beq.n	8021ec4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8021ebe:	2301      	movs	r3, #1
 8021ec0:	77fb      	strb	r3, [r7, #31]
 8021ec2:	e000      	b.n	8021ec6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8021ec4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8021ec6:	68fb      	ldr	r3, [r7, #12]
 8021ec8:	2201      	movs	r2, #1
 8021eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8021ece:	68fb      	ldr	r3, [r7, #12]
 8021ed0:	2200      	movs	r2, #0
 8021ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8021ed6:	7ffb      	ldrb	r3, [r7, #31]
}
 8021ed8:	4618      	mov	r0, r3
 8021eda:	3720      	adds	r7, #32
 8021edc:	46bd      	mov	sp, r7
 8021ede:	bd80      	pop	{r7, pc}

08021ee0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8021ee0:	b580      	push	{r7, lr}
 8021ee2:	b088      	sub	sp, #32
 8021ee4:	af00      	add	r7, sp, #0
 8021ee6:	60f8      	str	r0, [r7, #12]
 8021ee8:	60b9      	str	r1, [r7, #8]
 8021eea:	603b      	str	r3, [r7, #0]
 8021eec:	4613      	mov	r3, r2
 8021eee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8021ef0:	f7fe fc7e 	bl	80207f0 <HAL_GetTick>
 8021ef4:	4602      	mov	r2, r0
 8021ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ef8:	1a9b      	subs	r3, r3, r2
 8021efa:	683a      	ldr	r2, [r7, #0]
 8021efc:	4413      	add	r3, r2
 8021efe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8021f00:	f7fe fc76 	bl	80207f0 <HAL_GetTick>
 8021f04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8021f06:	4b39      	ldr	r3, [pc, #228]	; (8021fec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8021f08:	681b      	ldr	r3, [r3, #0]
 8021f0a:	015b      	lsls	r3, r3, #5
 8021f0c:	0d1b      	lsrs	r3, r3, #20
 8021f0e:	69fa      	ldr	r2, [r7, #28]
 8021f10:	fb02 f303 	mul.w	r3, r2, r3
 8021f14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8021f16:	e054      	b.n	8021fc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8021f18:	683b      	ldr	r3, [r7, #0]
 8021f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021f1e:	d050      	beq.n	8021fc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8021f20:	f7fe fc66 	bl	80207f0 <HAL_GetTick>
 8021f24:	4602      	mov	r2, r0
 8021f26:	69bb      	ldr	r3, [r7, #24]
 8021f28:	1ad3      	subs	r3, r2, r3
 8021f2a:	69fa      	ldr	r2, [r7, #28]
 8021f2c:	429a      	cmp	r2, r3
 8021f2e:	d902      	bls.n	8021f36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8021f30:	69fb      	ldr	r3, [r7, #28]
 8021f32:	2b00      	cmp	r3, #0
 8021f34:	d13d      	bne.n	8021fb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8021f36:	68fb      	ldr	r3, [r7, #12]
 8021f38:	681b      	ldr	r3, [r3, #0]
 8021f3a:	685a      	ldr	r2, [r3, #4]
 8021f3c:	68fb      	ldr	r3, [r7, #12]
 8021f3e:	681b      	ldr	r3, [r3, #0]
 8021f40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8021f44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8021f46:	68fb      	ldr	r3, [r7, #12]
 8021f48:	685b      	ldr	r3, [r3, #4]
 8021f4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8021f4e:	d111      	bne.n	8021f74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8021f50:	68fb      	ldr	r3, [r7, #12]
 8021f52:	689b      	ldr	r3, [r3, #8]
 8021f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8021f58:	d004      	beq.n	8021f64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8021f5a:	68fb      	ldr	r3, [r7, #12]
 8021f5c:	689b      	ldr	r3, [r3, #8]
 8021f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021f62:	d107      	bne.n	8021f74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8021f64:	68fb      	ldr	r3, [r7, #12]
 8021f66:	681b      	ldr	r3, [r3, #0]
 8021f68:	681a      	ldr	r2, [r3, #0]
 8021f6a:	68fb      	ldr	r3, [r7, #12]
 8021f6c:	681b      	ldr	r3, [r3, #0]
 8021f6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8021f72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8021f74:	68fb      	ldr	r3, [r7, #12]
 8021f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021f78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8021f7c:	d10f      	bne.n	8021f9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8021f7e:	68fb      	ldr	r3, [r7, #12]
 8021f80:	681b      	ldr	r3, [r3, #0]
 8021f82:	681a      	ldr	r2, [r3, #0]
 8021f84:	68fb      	ldr	r3, [r7, #12]
 8021f86:	681b      	ldr	r3, [r3, #0]
 8021f88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8021f8c:	601a      	str	r2, [r3, #0]
 8021f8e:	68fb      	ldr	r3, [r7, #12]
 8021f90:	681b      	ldr	r3, [r3, #0]
 8021f92:	681a      	ldr	r2, [r3, #0]
 8021f94:	68fb      	ldr	r3, [r7, #12]
 8021f96:	681b      	ldr	r3, [r3, #0]
 8021f98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8021f9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8021f9e:	68fb      	ldr	r3, [r7, #12]
 8021fa0:	2201      	movs	r2, #1
 8021fa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8021fa6:	68fb      	ldr	r3, [r7, #12]
 8021fa8:	2200      	movs	r2, #0
 8021faa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8021fae:	2303      	movs	r3, #3
 8021fb0:	e017      	b.n	8021fe2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8021fb2:	697b      	ldr	r3, [r7, #20]
 8021fb4:	2b00      	cmp	r3, #0
 8021fb6:	d101      	bne.n	8021fbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8021fb8:	2300      	movs	r3, #0
 8021fba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8021fbc:	697b      	ldr	r3, [r7, #20]
 8021fbe:	3b01      	subs	r3, #1
 8021fc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8021fc2:	68fb      	ldr	r3, [r7, #12]
 8021fc4:	681b      	ldr	r3, [r3, #0]
 8021fc6:	689a      	ldr	r2, [r3, #8]
 8021fc8:	68bb      	ldr	r3, [r7, #8]
 8021fca:	4013      	ands	r3, r2
 8021fcc:	68ba      	ldr	r2, [r7, #8]
 8021fce:	429a      	cmp	r2, r3
 8021fd0:	bf0c      	ite	eq
 8021fd2:	2301      	moveq	r3, #1
 8021fd4:	2300      	movne	r3, #0
 8021fd6:	b2db      	uxtb	r3, r3
 8021fd8:	461a      	mov	r2, r3
 8021fda:	79fb      	ldrb	r3, [r7, #7]
 8021fdc:	429a      	cmp	r2, r3
 8021fde:	d19b      	bne.n	8021f18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8021fe0:	2300      	movs	r3, #0
}
 8021fe2:	4618      	mov	r0, r3
 8021fe4:	3720      	adds	r7, #32
 8021fe6:	46bd      	mov	sp, r7
 8021fe8:	bd80      	pop	{r7, pc}
 8021fea:	bf00      	nop
 8021fec:	200000f4 	.word	0x200000f4

08021ff0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8021ff0:	b580      	push	{r7, lr}
 8021ff2:	b086      	sub	sp, #24
 8021ff4:	af02      	add	r7, sp, #8
 8021ff6:	60f8      	str	r0, [r7, #12]
 8021ff8:	60b9      	str	r1, [r7, #8]
 8021ffa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8021ffc:	687b      	ldr	r3, [r7, #4]
 8021ffe:	9300      	str	r3, [sp, #0]
 8022000:	68bb      	ldr	r3, [r7, #8]
 8022002:	2200      	movs	r2, #0
 8022004:	2180      	movs	r1, #128	; 0x80
 8022006:	68f8      	ldr	r0, [r7, #12]
 8022008:	f7ff ff6a 	bl	8021ee0 <SPI_WaitFlagStateUntilTimeout>
 802200c:	4603      	mov	r3, r0
 802200e:	2b00      	cmp	r3, #0
 8022010:	d007      	beq.n	8022022 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8022012:	68fb      	ldr	r3, [r7, #12]
 8022014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8022016:	f043 0220 	orr.w	r2, r3, #32
 802201a:	68fb      	ldr	r3, [r7, #12]
 802201c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 802201e:	2303      	movs	r3, #3
 8022020:	e000      	b.n	8022024 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8022022:	2300      	movs	r3, #0
}
 8022024:	4618      	mov	r0, r3
 8022026:	3710      	adds	r7, #16
 8022028:	46bd      	mov	sp, r7
 802202a:	bd80      	pop	{r7, pc}

0802202c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 802202c:	b580      	push	{r7, lr}
 802202e:	b082      	sub	sp, #8
 8022030:	af00      	add	r7, sp, #0
 8022032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8022034:	687b      	ldr	r3, [r7, #4]
 8022036:	2b00      	cmp	r3, #0
 8022038:	d101      	bne.n	802203e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 802203a:	2301      	movs	r3, #1
 802203c:	e041      	b.n	80220c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802203e:	687b      	ldr	r3, [r7, #4]
 8022040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8022044:	b2db      	uxtb	r3, r3
 8022046:	2b00      	cmp	r3, #0
 8022048:	d106      	bne.n	8022058 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802204a:	687b      	ldr	r3, [r7, #4]
 802204c:	2200      	movs	r2, #0
 802204e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8022052:	6878      	ldr	r0, [r7, #4]
 8022054:	f7fe fa18 	bl	8020488 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8022058:	687b      	ldr	r3, [r7, #4]
 802205a:	2202      	movs	r2, #2
 802205c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8022060:	687b      	ldr	r3, [r7, #4]
 8022062:	681a      	ldr	r2, [r3, #0]
 8022064:	687b      	ldr	r3, [r7, #4]
 8022066:	3304      	adds	r3, #4
 8022068:	4619      	mov	r1, r3
 802206a:	4610      	mov	r0, r2
 802206c:	f000 f9ba 	bl	80223e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8022070:	687b      	ldr	r3, [r7, #4]
 8022072:	2201      	movs	r2, #1
 8022074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8022078:	687b      	ldr	r3, [r7, #4]
 802207a:	2201      	movs	r2, #1
 802207c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8022080:	687b      	ldr	r3, [r7, #4]
 8022082:	2201      	movs	r2, #1
 8022084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8022088:	687b      	ldr	r3, [r7, #4]
 802208a:	2201      	movs	r2, #1
 802208c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8022090:	687b      	ldr	r3, [r7, #4]
 8022092:	2201      	movs	r2, #1
 8022094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8022098:	687b      	ldr	r3, [r7, #4]
 802209a:	2201      	movs	r2, #1
 802209c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80220a0:	687b      	ldr	r3, [r7, #4]
 80220a2:	2201      	movs	r2, #1
 80220a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80220a8:	687b      	ldr	r3, [r7, #4]
 80220aa:	2201      	movs	r2, #1
 80220ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80220b0:	687b      	ldr	r3, [r7, #4]
 80220b2:	2201      	movs	r2, #1
 80220b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80220b8:	687b      	ldr	r3, [r7, #4]
 80220ba:	2201      	movs	r2, #1
 80220bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80220c0:	2300      	movs	r3, #0
}
 80220c2:	4618      	mov	r0, r3
 80220c4:	3708      	adds	r7, #8
 80220c6:	46bd      	mov	sp, r7
 80220c8:	bd80      	pop	{r7, pc}
	...

080220cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80220cc:	b480      	push	{r7}
 80220ce:	b085      	sub	sp, #20
 80220d0:	af00      	add	r7, sp, #0
 80220d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80220d4:	687b      	ldr	r3, [r7, #4]
 80220d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80220da:	b2db      	uxtb	r3, r3
 80220dc:	2b01      	cmp	r3, #1
 80220de:	d001      	beq.n	80220e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80220e0:	2301      	movs	r3, #1
 80220e2:	e044      	b.n	802216e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80220e4:	687b      	ldr	r3, [r7, #4]
 80220e6:	2202      	movs	r2, #2
 80220e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80220ec:	687b      	ldr	r3, [r7, #4]
 80220ee:	681b      	ldr	r3, [r3, #0]
 80220f0:	68da      	ldr	r2, [r3, #12]
 80220f2:	687b      	ldr	r3, [r7, #4]
 80220f4:	681b      	ldr	r3, [r3, #0]
 80220f6:	f042 0201 	orr.w	r2, r2, #1
 80220fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80220fc:	687b      	ldr	r3, [r7, #4]
 80220fe:	681b      	ldr	r3, [r3, #0]
 8022100:	4a1d      	ldr	r2, [pc, #116]	; (8022178 <HAL_TIM_Base_Start_IT+0xac>)
 8022102:	4293      	cmp	r3, r2
 8022104:	d018      	beq.n	8022138 <HAL_TIM_Base_Start_IT+0x6c>
 8022106:	687b      	ldr	r3, [r7, #4]
 8022108:	681b      	ldr	r3, [r3, #0]
 802210a:	4a1c      	ldr	r2, [pc, #112]	; (802217c <HAL_TIM_Base_Start_IT+0xb0>)
 802210c:	4293      	cmp	r3, r2
 802210e:	d013      	beq.n	8022138 <HAL_TIM_Base_Start_IT+0x6c>
 8022110:	687b      	ldr	r3, [r7, #4]
 8022112:	681b      	ldr	r3, [r3, #0]
 8022114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8022118:	d00e      	beq.n	8022138 <HAL_TIM_Base_Start_IT+0x6c>
 802211a:	687b      	ldr	r3, [r7, #4]
 802211c:	681b      	ldr	r3, [r3, #0]
 802211e:	4a18      	ldr	r2, [pc, #96]	; (8022180 <HAL_TIM_Base_Start_IT+0xb4>)
 8022120:	4293      	cmp	r3, r2
 8022122:	d009      	beq.n	8022138 <HAL_TIM_Base_Start_IT+0x6c>
 8022124:	687b      	ldr	r3, [r7, #4]
 8022126:	681b      	ldr	r3, [r3, #0]
 8022128:	4a16      	ldr	r2, [pc, #88]	; (8022184 <HAL_TIM_Base_Start_IT+0xb8>)
 802212a:	4293      	cmp	r3, r2
 802212c:	d004      	beq.n	8022138 <HAL_TIM_Base_Start_IT+0x6c>
 802212e:	687b      	ldr	r3, [r7, #4]
 8022130:	681b      	ldr	r3, [r3, #0]
 8022132:	4a15      	ldr	r2, [pc, #84]	; (8022188 <HAL_TIM_Base_Start_IT+0xbc>)
 8022134:	4293      	cmp	r3, r2
 8022136:	d111      	bne.n	802215c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8022138:	687b      	ldr	r3, [r7, #4]
 802213a:	681b      	ldr	r3, [r3, #0]
 802213c:	689b      	ldr	r3, [r3, #8]
 802213e:	f003 0307 	and.w	r3, r3, #7
 8022142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8022144:	68fb      	ldr	r3, [r7, #12]
 8022146:	2b06      	cmp	r3, #6
 8022148:	d010      	beq.n	802216c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 802214a:	687b      	ldr	r3, [r7, #4]
 802214c:	681b      	ldr	r3, [r3, #0]
 802214e:	681a      	ldr	r2, [r3, #0]
 8022150:	687b      	ldr	r3, [r7, #4]
 8022152:	681b      	ldr	r3, [r3, #0]
 8022154:	f042 0201 	orr.w	r2, r2, #1
 8022158:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802215a:	e007      	b.n	802216c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 802215c:	687b      	ldr	r3, [r7, #4]
 802215e:	681b      	ldr	r3, [r3, #0]
 8022160:	681a      	ldr	r2, [r3, #0]
 8022162:	687b      	ldr	r3, [r7, #4]
 8022164:	681b      	ldr	r3, [r3, #0]
 8022166:	f042 0201 	orr.w	r2, r2, #1
 802216a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 802216c:	2300      	movs	r3, #0
}
 802216e:	4618      	mov	r0, r3
 8022170:	3714      	adds	r7, #20
 8022172:	46bd      	mov	sp, r7
 8022174:	bc80      	pop	{r7}
 8022176:	4770      	bx	lr
 8022178:	40012c00 	.word	0x40012c00
 802217c:	40013400 	.word	0x40013400
 8022180:	40000400 	.word	0x40000400
 8022184:	40000800 	.word	0x40000800
 8022188:	40000c00 	.word	0x40000c00

0802218c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 802218c:	b580      	push	{r7, lr}
 802218e:	b082      	sub	sp, #8
 8022190:	af00      	add	r7, sp, #0
 8022192:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8022194:	687b      	ldr	r3, [r7, #4]
 8022196:	681b      	ldr	r3, [r3, #0]
 8022198:	691b      	ldr	r3, [r3, #16]
 802219a:	f003 0302 	and.w	r3, r3, #2
 802219e:	2b02      	cmp	r3, #2
 80221a0:	d122      	bne.n	80221e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80221a2:	687b      	ldr	r3, [r7, #4]
 80221a4:	681b      	ldr	r3, [r3, #0]
 80221a6:	68db      	ldr	r3, [r3, #12]
 80221a8:	f003 0302 	and.w	r3, r3, #2
 80221ac:	2b02      	cmp	r3, #2
 80221ae:	d11b      	bne.n	80221e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80221b0:	687b      	ldr	r3, [r7, #4]
 80221b2:	681b      	ldr	r3, [r3, #0]
 80221b4:	f06f 0202 	mvn.w	r2, #2
 80221b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80221ba:	687b      	ldr	r3, [r7, #4]
 80221bc:	2201      	movs	r2, #1
 80221be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80221c0:	687b      	ldr	r3, [r7, #4]
 80221c2:	681b      	ldr	r3, [r3, #0]
 80221c4:	699b      	ldr	r3, [r3, #24]
 80221c6:	f003 0303 	and.w	r3, r3, #3
 80221ca:	2b00      	cmp	r3, #0
 80221cc:	d003      	beq.n	80221d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80221ce:	6878      	ldr	r0, [r7, #4]
 80221d0:	f000 f8ed 	bl	80223ae <HAL_TIM_IC_CaptureCallback>
 80221d4:	e005      	b.n	80221e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80221d6:	6878      	ldr	r0, [r7, #4]
 80221d8:	f000 f8e0 	bl	802239c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80221dc:	6878      	ldr	r0, [r7, #4]
 80221de:	f000 f8ef 	bl	80223c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80221e2:	687b      	ldr	r3, [r7, #4]
 80221e4:	2200      	movs	r2, #0
 80221e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80221e8:	687b      	ldr	r3, [r7, #4]
 80221ea:	681b      	ldr	r3, [r3, #0]
 80221ec:	691b      	ldr	r3, [r3, #16]
 80221ee:	f003 0304 	and.w	r3, r3, #4
 80221f2:	2b04      	cmp	r3, #4
 80221f4:	d122      	bne.n	802223c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80221f6:	687b      	ldr	r3, [r7, #4]
 80221f8:	681b      	ldr	r3, [r3, #0]
 80221fa:	68db      	ldr	r3, [r3, #12]
 80221fc:	f003 0304 	and.w	r3, r3, #4
 8022200:	2b04      	cmp	r3, #4
 8022202:	d11b      	bne.n	802223c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8022204:	687b      	ldr	r3, [r7, #4]
 8022206:	681b      	ldr	r3, [r3, #0]
 8022208:	f06f 0204 	mvn.w	r2, #4
 802220c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 802220e:	687b      	ldr	r3, [r7, #4]
 8022210:	2202      	movs	r2, #2
 8022212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8022214:	687b      	ldr	r3, [r7, #4]
 8022216:	681b      	ldr	r3, [r3, #0]
 8022218:	699b      	ldr	r3, [r3, #24]
 802221a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802221e:	2b00      	cmp	r3, #0
 8022220:	d003      	beq.n	802222a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8022222:	6878      	ldr	r0, [r7, #4]
 8022224:	f000 f8c3 	bl	80223ae <HAL_TIM_IC_CaptureCallback>
 8022228:	e005      	b.n	8022236 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802222a:	6878      	ldr	r0, [r7, #4]
 802222c:	f000 f8b6 	bl	802239c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8022230:	6878      	ldr	r0, [r7, #4]
 8022232:	f000 f8c5 	bl	80223c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8022236:	687b      	ldr	r3, [r7, #4]
 8022238:	2200      	movs	r2, #0
 802223a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 802223c:	687b      	ldr	r3, [r7, #4]
 802223e:	681b      	ldr	r3, [r3, #0]
 8022240:	691b      	ldr	r3, [r3, #16]
 8022242:	f003 0308 	and.w	r3, r3, #8
 8022246:	2b08      	cmp	r3, #8
 8022248:	d122      	bne.n	8022290 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 802224a:	687b      	ldr	r3, [r7, #4]
 802224c:	681b      	ldr	r3, [r3, #0]
 802224e:	68db      	ldr	r3, [r3, #12]
 8022250:	f003 0308 	and.w	r3, r3, #8
 8022254:	2b08      	cmp	r3, #8
 8022256:	d11b      	bne.n	8022290 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8022258:	687b      	ldr	r3, [r7, #4]
 802225a:	681b      	ldr	r3, [r3, #0]
 802225c:	f06f 0208 	mvn.w	r2, #8
 8022260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8022262:	687b      	ldr	r3, [r7, #4]
 8022264:	2204      	movs	r2, #4
 8022266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8022268:	687b      	ldr	r3, [r7, #4]
 802226a:	681b      	ldr	r3, [r3, #0]
 802226c:	69db      	ldr	r3, [r3, #28]
 802226e:	f003 0303 	and.w	r3, r3, #3
 8022272:	2b00      	cmp	r3, #0
 8022274:	d003      	beq.n	802227e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8022276:	6878      	ldr	r0, [r7, #4]
 8022278:	f000 f899 	bl	80223ae <HAL_TIM_IC_CaptureCallback>
 802227c:	e005      	b.n	802228a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802227e:	6878      	ldr	r0, [r7, #4]
 8022280:	f000 f88c 	bl	802239c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8022284:	6878      	ldr	r0, [r7, #4]
 8022286:	f000 f89b 	bl	80223c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802228a:	687b      	ldr	r3, [r7, #4]
 802228c:	2200      	movs	r2, #0
 802228e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8022290:	687b      	ldr	r3, [r7, #4]
 8022292:	681b      	ldr	r3, [r3, #0]
 8022294:	691b      	ldr	r3, [r3, #16]
 8022296:	f003 0310 	and.w	r3, r3, #16
 802229a:	2b10      	cmp	r3, #16
 802229c:	d122      	bne.n	80222e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 802229e:	687b      	ldr	r3, [r7, #4]
 80222a0:	681b      	ldr	r3, [r3, #0]
 80222a2:	68db      	ldr	r3, [r3, #12]
 80222a4:	f003 0310 	and.w	r3, r3, #16
 80222a8:	2b10      	cmp	r3, #16
 80222aa:	d11b      	bne.n	80222e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80222ac:	687b      	ldr	r3, [r7, #4]
 80222ae:	681b      	ldr	r3, [r3, #0]
 80222b0:	f06f 0210 	mvn.w	r2, #16
 80222b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80222b6:	687b      	ldr	r3, [r7, #4]
 80222b8:	2208      	movs	r2, #8
 80222ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80222bc:	687b      	ldr	r3, [r7, #4]
 80222be:	681b      	ldr	r3, [r3, #0]
 80222c0:	69db      	ldr	r3, [r3, #28]
 80222c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80222c6:	2b00      	cmp	r3, #0
 80222c8:	d003      	beq.n	80222d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80222ca:	6878      	ldr	r0, [r7, #4]
 80222cc:	f000 f86f 	bl	80223ae <HAL_TIM_IC_CaptureCallback>
 80222d0:	e005      	b.n	80222de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80222d2:	6878      	ldr	r0, [r7, #4]
 80222d4:	f000 f862 	bl	802239c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80222d8:	6878      	ldr	r0, [r7, #4]
 80222da:	f000 f871 	bl	80223c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80222de:	687b      	ldr	r3, [r7, #4]
 80222e0:	2200      	movs	r2, #0
 80222e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80222e4:	687b      	ldr	r3, [r7, #4]
 80222e6:	681b      	ldr	r3, [r3, #0]
 80222e8:	691b      	ldr	r3, [r3, #16]
 80222ea:	f003 0301 	and.w	r3, r3, #1
 80222ee:	2b01      	cmp	r3, #1
 80222f0:	d10e      	bne.n	8022310 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80222f2:	687b      	ldr	r3, [r7, #4]
 80222f4:	681b      	ldr	r3, [r3, #0]
 80222f6:	68db      	ldr	r3, [r3, #12]
 80222f8:	f003 0301 	and.w	r3, r3, #1
 80222fc:	2b01      	cmp	r3, #1
 80222fe:	d107      	bne.n	8022310 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8022300:	687b      	ldr	r3, [r7, #4]
 8022302:	681b      	ldr	r3, [r3, #0]
 8022304:	f06f 0201 	mvn.w	r2, #1
 8022308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 802230a:	6878      	ldr	r0, [r7, #4]
 802230c:	f7fc fb6a 	bl	801e9e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8022310:	687b      	ldr	r3, [r7, #4]
 8022312:	681b      	ldr	r3, [r3, #0]
 8022314:	691b      	ldr	r3, [r3, #16]
 8022316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802231a:	2b80      	cmp	r3, #128	; 0x80
 802231c:	d10e      	bne.n	802233c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802231e:	687b      	ldr	r3, [r7, #4]
 8022320:	681b      	ldr	r3, [r3, #0]
 8022322:	68db      	ldr	r3, [r3, #12]
 8022324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022328:	2b80      	cmp	r3, #128	; 0x80
 802232a:	d107      	bne.n	802233c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 802232c:	687b      	ldr	r3, [r7, #4]
 802232e:	681b      	ldr	r3, [r3, #0]
 8022330:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8022334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8022336:	6878      	ldr	r0, [r7, #4]
 8022338:	f000 f8d7 	bl	80224ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 802233c:	687b      	ldr	r3, [r7, #4]
 802233e:	681b      	ldr	r3, [r3, #0]
 8022340:	691b      	ldr	r3, [r3, #16]
 8022342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022346:	2b40      	cmp	r3, #64	; 0x40
 8022348:	d10e      	bne.n	8022368 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 802234a:	687b      	ldr	r3, [r7, #4]
 802234c:	681b      	ldr	r3, [r3, #0]
 802234e:	68db      	ldr	r3, [r3, #12]
 8022350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022354:	2b40      	cmp	r3, #64	; 0x40
 8022356:	d107      	bne.n	8022368 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8022358:	687b      	ldr	r3, [r7, #4]
 802235a:	681b      	ldr	r3, [r3, #0]
 802235c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8022360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8022362:	6878      	ldr	r0, [r7, #4]
 8022364:	f000 f835 	bl	80223d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8022368:	687b      	ldr	r3, [r7, #4]
 802236a:	681b      	ldr	r3, [r3, #0]
 802236c:	691b      	ldr	r3, [r3, #16]
 802236e:	f003 0320 	and.w	r3, r3, #32
 8022372:	2b20      	cmp	r3, #32
 8022374:	d10e      	bne.n	8022394 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8022376:	687b      	ldr	r3, [r7, #4]
 8022378:	681b      	ldr	r3, [r3, #0]
 802237a:	68db      	ldr	r3, [r3, #12]
 802237c:	f003 0320 	and.w	r3, r3, #32
 8022380:	2b20      	cmp	r3, #32
 8022382:	d107      	bne.n	8022394 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8022384:	687b      	ldr	r3, [r7, #4]
 8022386:	681b      	ldr	r3, [r3, #0]
 8022388:	f06f 0220 	mvn.w	r2, #32
 802238c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802238e:	6878      	ldr	r0, [r7, #4]
 8022390:	f000 f8a2 	bl	80224d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8022394:	bf00      	nop
 8022396:	3708      	adds	r7, #8
 8022398:	46bd      	mov	sp, r7
 802239a:	bd80      	pop	{r7, pc}

0802239c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 802239c:	b480      	push	{r7}
 802239e:	b083      	sub	sp, #12
 80223a0:	af00      	add	r7, sp, #0
 80223a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80223a4:	bf00      	nop
 80223a6:	370c      	adds	r7, #12
 80223a8:	46bd      	mov	sp, r7
 80223aa:	bc80      	pop	{r7}
 80223ac:	4770      	bx	lr

080223ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80223ae:	b480      	push	{r7}
 80223b0:	b083      	sub	sp, #12
 80223b2:	af00      	add	r7, sp, #0
 80223b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80223b6:	bf00      	nop
 80223b8:	370c      	adds	r7, #12
 80223ba:	46bd      	mov	sp, r7
 80223bc:	bc80      	pop	{r7}
 80223be:	4770      	bx	lr

080223c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80223c0:	b480      	push	{r7}
 80223c2:	b083      	sub	sp, #12
 80223c4:	af00      	add	r7, sp, #0
 80223c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80223c8:	bf00      	nop
 80223ca:	370c      	adds	r7, #12
 80223cc:	46bd      	mov	sp, r7
 80223ce:	bc80      	pop	{r7}
 80223d0:	4770      	bx	lr

080223d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80223d2:	b480      	push	{r7}
 80223d4:	b083      	sub	sp, #12
 80223d6:	af00      	add	r7, sp, #0
 80223d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80223da:	bf00      	nop
 80223dc:	370c      	adds	r7, #12
 80223de:	46bd      	mov	sp, r7
 80223e0:	bc80      	pop	{r7}
 80223e2:	4770      	bx	lr

080223e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80223e4:	b480      	push	{r7}
 80223e6:	b085      	sub	sp, #20
 80223e8:	af00      	add	r7, sp, #0
 80223ea:	6078      	str	r0, [r7, #4]
 80223ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80223ee:	687b      	ldr	r3, [r7, #4]
 80223f0:	681b      	ldr	r3, [r3, #0]
 80223f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80223f4:	687b      	ldr	r3, [r7, #4]
 80223f6:	4a33      	ldr	r2, [pc, #204]	; (80224c4 <TIM_Base_SetConfig+0xe0>)
 80223f8:	4293      	cmp	r3, r2
 80223fa:	d013      	beq.n	8022424 <TIM_Base_SetConfig+0x40>
 80223fc:	687b      	ldr	r3, [r7, #4]
 80223fe:	4a32      	ldr	r2, [pc, #200]	; (80224c8 <TIM_Base_SetConfig+0xe4>)
 8022400:	4293      	cmp	r3, r2
 8022402:	d00f      	beq.n	8022424 <TIM_Base_SetConfig+0x40>
 8022404:	687b      	ldr	r3, [r7, #4]
 8022406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802240a:	d00b      	beq.n	8022424 <TIM_Base_SetConfig+0x40>
 802240c:	687b      	ldr	r3, [r7, #4]
 802240e:	4a2f      	ldr	r2, [pc, #188]	; (80224cc <TIM_Base_SetConfig+0xe8>)
 8022410:	4293      	cmp	r3, r2
 8022412:	d007      	beq.n	8022424 <TIM_Base_SetConfig+0x40>
 8022414:	687b      	ldr	r3, [r7, #4]
 8022416:	4a2e      	ldr	r2, [pc, #184]	; (80224d0 <TIM_Base_SetConfig+0xec>)
 8022418:	4293      	cmp	r3, r2
 802241a:	d003      	beq.n	8022424 <TIM_Base_SetConfig+0x40>
 802241c:	687b      	ldr	r3, [r7, #4]
 802241e:	4a2d      	ldr	r2, [pc, #180]	; (80224d4 <TIM_Base_SetConfig+0xf0>)
 8022420:	4293      	cmp	r3, r2
 8022422:	d108      	bne.n	8022436 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8022424:	68fb      	ldr	r3, [r7, #12]
 8022426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802242a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 802242c:	683b      	ldr	r3, [r7, #0]
 802242e:	685b      	ldr	r3, [r3, #4]
 8022430:	68fa      	ldr	r2, [r7, #12]
 8022432:	4313      	orrs	r3, r2
 8022434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8022436:	687b      	ldr	r3, [r7, #4]
 8022438:	4a22      	ldr	r2, [pc, #136]	; (80224c4 <TIM_Base_SetConfig+0xe0>)
 802243a:	4293      	cmp	r3, r2
 802243c:	d013      	beq.n	8022466 <TIM_Base_SetConfig+0x82>
 802243e:	687b      	ldr	r3, [r7, #4]
 8022440:	4a21      	ldr	r2, [pc, #132]	; (80224c8 <TIM_Base_SetConfig+0xe4>)
 8022442:	4293      	cmp	r3, r2
 8022444:	d00f      	beq.n	8022466 <TIM_Base_SetConfig+0x82>
 8022446:	687b      	ldr	r3, [r7, #4]
 8022448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802244c:	d00b      	beq.n	8022466 <TIM_Base_SetConfig+0x82>
 802244e:	687b      	ldr	r3, [r7, #4]
 8022450:	4a1e      	ldr	r2, [pc, #120]	; (80224cc <TIM_Base_SetConfig+0xe8>)
 8022452:	4293      	cmp	r3, r2
 8022454:	d007      	beq.n	8022466 <TIM_Base_SetConfig+0x82>
 8022456:	687b      	ldr	r3, [r7, #4]
 8022458:	4a1d      	ldr	r2, [pc, #116]	; (80224d0 <TIM_Base_SetConfig+0xec>)
 802245a:	4293      	cmp	r3, r2
 802245c:	d003      	beq.n	8022466 <TIM_Base_SetConfig+0x82>
 802245e:	687b      	ldr	r3, [r7, #4]
 8022460:	4a1c      	ldr	r2, [pc, #112]	; (80224d4 <TIM_Base_SetConfig+0xf0>)
 8022462:	4293      	cmp	r3, r2
 8022464:	d108      	bne.n	8022478 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8022466:	68fb      	ldr	r3, [r7, #12]
 8022468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802246c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802246e:	683b      	ldr	r3, [r7, #0]
 8022470:	68db      	ldr	r3, [r3, #12]
 8022472:	68fa      	ldr	r2, [r7, #12]
 8022474:	4313      	orrs	r3, r2
 8022476:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8022478:	68fb      	ldr	r3, [r7, #12]
 802247a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802247e:	683b      	ldr	r3, [r7, #0]
 8022480:	695b      	ldr	r3, [r3, #20]
 8022482:	4313      	orrs	r3, r2
 8022484:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8022486:	687b      	ldr	r3, [r7, #4]
 8022488:	68fa      	ldr	r2, [r7, #12]
 802248a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 802248c:	683b      	ldr	r3, [r7, #0]
 802248e:	689a      	ldr	r2, [r3, #8]
 8022490:	687b      	ldr	r3, [r7, #4]
 8022492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8022494:	683b      	ldr	r3, [r7, #0]
 8022496:	681a      	ldr	r2, [r3, #0]
 8022498:	687b      	ldr	r3, [r7, #4]
 802249a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 802249c:	687b      	ldr	r3, [r7, #4]
 802249e:	4a09      	ldr	r2, [pc, #36]	; (80224c4 <TIM_Base_SetConfig+0xe0>)
 80224a0:	4293      	cmp	r3, r2
 80224a2:	d003      	beq.n	80224ac <TIM_Base_SetConfig+0xc8>
 80224a4:	687b      	ldr	r3, [r7, #4]
 80224a6:	4a08      	ldr	r2, [pc, #32]	; (80224c8 <TIM_Base_SetConfig+0xe4>)
 80224a8:	4293      	cmp	r3, r2
 80224aa:	d103      	bne.n	80224b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80224ac:	683b      	ldr	r3, [r7, #0]
 80224ae:	691a      	ldr	r2, [r3, #16]
 80224b0:	687b      	ldr	r3, [r7, #4]
 80224b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80224b4:	687b      	ldr	r3, [r7, #4]
 80224b6:	2201      	movs	r2, #1
 80224b8:	615a      	str	r2, [r3, #20]
}
 80224ba:	bf00      	nop
 80224bc:	3714      	adds	r7, #20
 80224be:	46bd      	mov	sp, r7
 80224c0:	bc80      	pop	{r7}
 80224c2:	4770      	bx	lr
 80224c4:	40012c00 	.word	0x40012c00
 80224c8:	40013400 	.word	0x40013400
 80224cc:	40000400 	.word	0x40000400
 80224d0:	40000800 	.word	0x40000800
 80224d4:	40000c00 	.word	0x40000c00

080224d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80224d8:	b480      	push	{r7}
 80224da:	b083      	sub	sp, #12
 80224dc:	af00      	add	r7, sp, #0
 80224de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80224e0:	bf00      	nop
 80224e2:	370c      	adds	r7, #12
 80224e4:	46bd      	mov	sp, r7
 80224e6:	bc80      	pop	{r7}
 80224e8:	4770      	bx	lr

080224ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80224ea:	b480      	push	{r7}
 80224ec:	b083      	sub	sp, #12
 80224ee:	af00      	add	r7, sp, #0
 80224f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80224f2:	bf00      	nop
 80224f4:	370c      	adds	r7, #12
 80224f6:	46bd      	mov	sp, r7
 80224f8:	bc80      	pop	{r7}
 80224fa:	4770      	bx	lr

080224fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80224fc:	b580      	push	{r7, lr}
 80224fe:	b082      	sub	sp, #8
 8022500:	af00      	add	r7, sp, #0
 8022502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8022504:	687b      	ldr	r3, [r7, #4]
 8022506:	2b00      	cmp	r3, #0
 8022508:	d101      	bne.n	802250e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802250a:	2301      	movs	r3, #1
 802250c:	e03f      	b.n	802258e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 802250e:	687b      	ldr	r3, [r7, #4]
 8022510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8022514:	b2db      	uxtb	r3, r3
 8022516:	2b00      	cmp	r3, #0
 8022518:	d106      	bne.n	8022528 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802251a:	687b      	ldr	r3, [r7, #4]
 802251c:	2200      	movs	r2, #0
 802251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8022522:	6878      	ldr	r0, [r7, #4]
 8022524:	f7fd ffd6 	bl	80204d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8022528:	687b      	ldr	r3, [r7, #4]
 802252a:	2224      	movs	r2, #36	; 0x24
 802252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8022530:	687b      	ldr	r3, [r7, #4]
 8022532:	681b      	ldr	r3, [r3, #0]
 8022534:	68da      	ldr	r2, [r3, #12]
 8022536:	687b      	ldr	r3, [r7, #4]
 8022538:	681b      	ldr	r3, [r3, #0]
 802253a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802253e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8022540:	6878      	ldr	r0, [r7, #4]
 8022542:	f000 fcc1 	bl	8022ec8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8022546:	687b      	ldr	r3, [r7, #4]
 8022548:	681b      	ldr	r3, [r3, #0]
 802254a:	691a      	ldr	r2, [r3, #16]
 802254c:	687b      	ldr	r3, [r7, #4]
 802254e:	681b      	ldr	r3, [r3, #0]
 8022550:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8022554:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8022556:	687b      	ldr	r3, [r7, #4]
 8022558:	681b      	ldr	r3, [r3, #0]
 802255a:	695a      	ldr	r2, [r3, #20]
 802255c:	687b      	ldr	r3, [r7, #4]
 802255e:	681b      	ldr	r3, [r3, #0]
 8022560:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8022564:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8022566:	687b      	ldr	r3, [r7, #4]
 8022568:	681b      	ldr	r3, [r3, #0]
 802256a:	68da      	ldr	r2, [r3, #12]
 802256c:	687b      	ldr	r3, [r7, #4]
 802256e:	681b      	ldr	r3, [r3, #0]
 8022570:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8022574:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022576:	687b      	ldr	r3, [r7, #4]
 8022578:	2200      	movs	r2, #0
 802257a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 802257c:	687b      	ldr	r3, [r7, #4]
 802257e:	2220      	movs	r2, #32
 8022580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8022584:	687b      	ldr	r3, [r7, #4]
 8022586:	2220      	movs	r2, #32
 8022588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 802258c:	2300      	movs	r3, #0
}
 802258e:	4618      	mov	r0, r3
 8022590:	3708      	adds	r7, #8
 8022592:	46bd      	mov	sp, r7
 8022594:	bd80      	pop	{r7, pc}

08022596 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8022596:	b580      	push	{r7, lr}
 8022598:	b08a      	sub	sp, #40	; 0x28
 802259a:	af02      	add	r7, sp, #8
 802259c:	60f8      	str	r0, [r7, #12]
 802259e:	60b9      	str	r1, [r7, #8]
 80225a0:	603b      	str	r3, [r7, #0]
 80225a2:	4613      	mov	r3, r2
 80225a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80225a6:	2300      	movs	r3, #0
 80225a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80225aa:	68fb      	ldr	r3, [r7, #12]
 80225ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80225b0:	b2db      	uxtb	r3, r3
 80225b2:	2b20      	cmp	r3, #32
 80225b4:	d17c      	bne.n	80226b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80225b6:	68bb      	ldr	r3, [r7, #8]
 80225b8:	2b00      	cmp	r3, #0
 80225ba:	d002      	beq.n	80225c2 <HAL_UART_Transmit+0x2c>
 80225bc:	88fb      	ldrh	r3, [r7, #6]
 80225be:	2b00      	cmp	r3, #0
 80225c0:	d101      	bne.n	80225c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80225c2:	2301      	movs	r3, #1
 80225c4:	e075      	b.n	80226b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80225c6:	68fb      	ldr	r3, [r7, #12]
 80225c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80225cc:	2b01      	cmp	r3, #1
 80225ce:	d101      	bne.n	80225d4 <HAL_UART_Transmit+0x3e>
 80225d0:	2302      	movs	r3, #2
 80225d2:	e06e      	b.n	80226b2 <HAL_UART_Transmit+0x11c>
 80225d4:	68fb      	ldr	r3, [r7, #12]
 80225d6:	2201      	movs	r2, #1
 80225d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80225dc:	68fb      	ldr	r3, [r7, #12]
 80225de:	2200      	movs	r2, #0
 80225e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80225e2:	68fb      	ldr	r3, [r7, #12]
 80225e4:	2221      	movs	r2, #33	; 0x21
 80225e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80225ea:	f7fe f901 	bl	80207f0 <HAL_GetTick>
 80225ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80225f0:	68fb      	ldr	r3, [r7, #12]
 80225f2:	88fa      	ldrh	r2, [r7, #6]
 80225f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80225f6:	68fb      	ldr	r3, [r7, #12]
 80225f8:	88fa      	ldrh	r2, [r7, #6]
 80225fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80225fc:	68fb      	ldr	r3, [r7, #12]
 80225fe:	689b      	ldr	r3, [r3, #8]
 8022600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022604:	d108      	bne.n	8022618 <HAL_UART_Transmit+0x82>
 8022606:	68fb      	ldr	r3, [r7, #12]
 8022608:	691b      	ldr	r3, [r3, #16]
 802260a:	2b00      	cmp	r3, #0
 802260c:	d104      	bne.n	8022618 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 802260e:	2300      	movs	r3, #0
 8022610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8022612:	68bb      	ldr	r3, [r7, #8]
 8022614:	61bb      	str	r3, [r7, #24]
 8022616:	e003      	b.n	8022620 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8022618:	68bb      	ldr	r3, [r7, #8]
 802261a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 802261c:	2300      	movs	r3, #0
 802261e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8022620:	68fb      	ldr	r3, [r7, #12]
 8022622:	2200      	movs	r2, #0
 8022624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8022628:	e02a      	b.n	8022680 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 802262a:	683b      	ldr	r3, [r7, #0]
 802262c:	9300      	str	r3, [sp, #0]
 802262e:	697b      	ldr	r3, [r7, #20]
 8022630:	2200      	movs	r2, #0
 8022632:	2180      	movs	r1, #128	; 0x80
 8022634:	68f8      	ldr	r0, [r7, #12]
 8022636:	f000 fa73 	bl	8022b20 <UART_WaitOnFlagUntilTimeout>
 802263a:	4603      	mov	r3, r0
 802263c:	2b00      	cmp	r3, #0
 802263e:	d001      	beq.n	8022644 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8022640:	2303      	movs	r3, #3
 8022642:	e036      	b.n	80226b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8022644:	69fb      	ldr	r3, [r7, #28]
 8022646:	2b00      	cmp	r3, #0
 8022648:	d10b      	bne.n	8022662 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 802264a:	69bb      	ldr	r3, [r7, #24]
 802264c:	881b      	ldrh	r3, [r3, #0]
 802264e:	461a      	mov	r2, r3
 8022650:	68fb      	ldr	r3, [r7, #12]
 8022652:	681b      	ldr	r3, [r3, #0]
 8022654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8022658:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 802265a:	69bb      	ldr	r3, [r7, #24]
 802265c:	3302      	adds	r3, #2
 802265e:	61bb      	str	r3, [r7, #24]
 8022660:	e007      	b.n	8022672 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8022662:	69fb      	ldr	r3, [r7, #28]
 8022664:	781a      	ldrb	r2, [r3, #0]
 8022666:	68fb      	ldr	r3, [r7, #12]
 8022668:	681b      	ldr	r3, [r3, #0]
 802266a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 802266c:	69fb      	ldr	r3, [r7, #28]
 802266e:	3301      	adds	r3, #1
 8022670:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8022672:	68fb      	ldr	r3, [r7, #12]
 8022674:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8022676:	b29b      	uxth	r3, r3
 8022678:	3b01      	subs	r3, #1
 802267a:	b29a      	uxth	r2, r3
 802267c:	68fb      	ldr	r3, [r7, #12]
 802267e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8022680:	68fb      	ldr	r3, [r7, #12]
 8022682:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8022684:	b29b      	uxth	r3, r3
 8022686:	2b00      	cmp	r3, #0
 8022688:	d1cf      	bne.n	802262a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 802268a:	683b      	ldr	r3, [r7, #0]
 802268c:	9300      	str	r3, [sp, #0]
 802268e:	697b      	ldr	r3, [r7, #20]
 8022690:	2200      	movs	r2, #0
 8022692:	2140      	movs	r1, #64	; 0x40
 8022694:	68f8      	ldr	r0, [r7, #12]
 8022696:	f000 fa43 	bl	8022b20 <UART_WaitOnFlagUntilTimeout>
 802269a:	4603      	mov	r3, r0
 802269c:	2b00      	cmp	r3, #0
 802269e:	d001      	beq.n	80226a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80226a0:	2303      	movs	r3, #3
 80226a2:	e006      	b.n	80226b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80226a4:	68fb      	ldr	r3, [r7, #12]
 80226a6:	2220      	movs	r2, #32
 80226a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80226ac:	2300      	movs	r3, #0
 80226ae:	e000      	b.n	80226b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80226b0:	2302      	movs	r3, #2
  }
}
 80226b2:	4618      	mov	r0, r3
 80226b4:	3720      	adds	r7, #32
 80226b6:	46bd      	mov	sp, r7
 80226b8:	bd80      	pop	{r7, pc}

080226ba <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80226ba:	b480      	push	{r7}
 80226bc:	b085      	sub	sp, #20
 80226be:	af00      	add	r7, sp, #0
 80226c0:	60f8      	str	r0, [r7, #12]
 80226c2:	60b9      	str	r1, [r7, #8]
 80226c4:	4613      	mov	r3, r2
 80226c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80226c8:	68fb      	ldr	r3, [r7, #12]
 80226ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80226ce:	b2db      	uxtb	r3, r3
 80226d0:	2b20      	cmp	r3, #32
 80226d2:	d130      	bne.n	8022736 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80226d4:	68bb      	ldr	r3, [r7, #8]
 80226d6:	2b00      	cmp	r3, #0
 80226d8:	d002      	beq.n	80226e0 <HAL_UART_Transmit_IT+0x26>
 80226da:	88fb      	ldrh	r3, [r7, #6]
 80226dc:	2b00      	cmp	r3, #0
 80226de:	d101      	bne.n	80226e4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80226e0:	2301      	movs	r3, #1
 80226e2:	e029      	b.n	8022738 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80226e4:	68fb      	ldr	r3, [r7, #12]
 80226e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80226ea:	2b01      	cmp	r3, #1
 80226ec:	d101      	bne.n	80226f2 <HAL_UART_Transmit_IT+0x38>
 80226ee:	2302      	movs	r3, #2
 80226f0:	e022      	b.n	8022738 <HAL_UART_Transmit_IT+0x7e>
 80226f2:	68fb      	ldr	r3, [r7, #12]
 80226f4:	2201      	movs	r2, #1
 80226f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80226fa:	68fb      	ldr	r3, [r7, #12]
 80226fc:	68ba      	ldr	r2, [r7, #8]
 80226fe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8022700:	68fb      	ldr	r3, [r7, #12]
 8022702:	88fa      	ldrh	r2, [r7, #6]
 8022704:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8022706:	68fb      	ldr	r3, [r7, #12]
 8022708:	88fa      	ldrh	r2, [r7, #6]
 802270a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802270c:	68fb      	ldr	r3, [r7, #12]
 802270e:	2200      	movs	r2, #0
 8022710:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8022712:	68fb      	ldr	r3, [r7, #12]
 8022714:	2221      	movs	r2, #33	; 0x21
 8022716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 802271a:	68fb      	ldr	r3, [r7, #12]
 802271c:	2200      	movs	r2, #0
 802271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8022722:	68fb      	ldr	r3, [r7, #12]
 8022724:	681b      	ldr	r3, [r3, #0]
 8022726:	68da      	ldr	r2, [r3, #12]
 8022728:	68fb      	ldr	r3, [r7, #12]
 802272a:	681b      	ldr	r3, [r3, #0]
 802272c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8022730:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8022732:	2300      	movs	r3, #0
 8022734:	e000      	b.n	8022738 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8022736:	2302      	movs	r3, #2
  }
}
 8022738:	4618      	mov	r0, r3
 802273a:	3714      	adds	r7, #20
 802273c:	46bd      	mov	sp, r7
 802273e:	bc80      	pop	{r7}
 8022740:	4770      	bx	lr

08022742 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8022742:	b580      	push	{r7, lr}
 8022744:	b084      	sub	sp, #16
 8022746:	af00      	add	r7, sp, #0
 8022748:	60f8      	str	r0, [r7, #12]
 802274a:	60b9      	str	r1, [r7, #8]
 802274c:	4613      	mov	r3, r2
 802274e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8022750:	68fb      	ldr	r3, [r7, #12]
 8022752:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8022756:	b2db      	uxtb	r3, r3
 8022758:	2b20      	cmp	r3, #32
 802275a:	d11d      	bne.n	8022798 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 802275c:	68bb      	ldr	r3, [r7, #8]
 802275e:	2b00      	cmp	r3, #0
 8022760:	d002      	beq.n	8022768 <HAL_UART_Receive_IT+0x26>
 8022762:	88fb      	ldrh	r3, [r7, #6]
 8022764:	2b00      	cmp	r3, #0
 8022766:	d101      	bne.n	802276c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8022768:	2301      	movs	r3, #1
 802276a:	e016      	b.n	802279a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802276c:	68fb      	ldr	r3, [r7, #12]
 802276e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8022772:	2b01      	cmp	r3, #1
 8022774:	d101      	bne.n	802277a <HAL_UART_Receive_IT+0x38>
 8022776:	2302      	movs	r3, #2
 8022778:	e00f      	b.n	802279a <HAL_UART_Receive_IT+0x58>
 802277a:	68fb      	ldr	r3, [r7, #12]
 802277c:	2201      	movs	r2, #1
 802277e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022782:	68fb      	ldr	r3, [r7, #12]
 8022784:	2200      	movs	r2, #0
 8022786:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8022788:	88fb      	ldrh	r3, [r7, #6]
 802278a:	461a      	mov	r2, r3
 802278c:	68b9      	ldr	r1, [r7, #8]
 802278e:	68f8      	ldr	r0, [r7, #12]
 8022790:	f000 fa10 	bl	8022bb4 <UART_Start_Receive_IT>
 8022794:	4603      	mov	r3, r0
 8022796:	e000      	b.n	802279a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8022798:	2302      	movs	r3, #2
  }
}
 802279a:	4618      	mov	r0, r3
 802279c:	3710      	adds	r7, #16
 802279e:	46bd      	mov	sp, r7
 80227a0:	bd80      	pop	{r7, pc}
	...

080227a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80227a4:	b580      	push	{r7, lr}
 80227a6:	b08a      	sub	sp, #40	; 0x28
 80227a8:	af00      	add	r7, sp, #0
 80227aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80227ac:	687b      	ldr	r3, [r7, #4]
 80227ae:	681b      	ldr	r3, [r3, #0]
 80227b0:	681b      	ldr	r3, [r3, #0]
 80227b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80227b4:	687b      	ldr	r3, [r7, #4]
 80227b6:	681b      	ldr	r3, [r3, #0]
 80227b8:	68db      	ldr	r3, [r3, #12]
 80227ba:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80227bc:	687b      	ldr	r3, [r7, #4]
 80227be:	681b      	ldr	r3, [r3, #0]
 80227c0:	695b      	ldr	r3, [r3, #20]
 80227c2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80227c4:	2300      	movs	r3, #0
 80227c6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80227c8:	2300      	movs	r3, #0
 80227ca:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80227cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80227ce:	f003 030f 	and.w	r3, r3, #15
 80227d2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80227d4:	69bb      	ldr	r3, [r7, #24]
 80227d6:	2b00      	cmp	r3, #0
 80227d8:	d10d      	bne.n	80227f6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80227da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80227dc:	f003 0320 	and.w	r3, r3, #32
 80227e0:	2b00      	cmp	r3, #0
 80227e2:	d008      	beq.n	80227f6 <HAL_UART_IRQHandler+0x52>
 80227e4:	6a3b      	ldr	r3, [r7, #32]
 80227e6:	f003 0320 	and.w	r3, r3, #32
 80227ea:	2b00      	cmp	r3, #0
 80227ec:	d003      	beq.n	80227f6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80227ee:	6878      	ldr	r0, [r7, #4]
 80227f0:	f000 fac0 	bl	8022d74 <UART_Receive_IT>
      return;
 80227f4:	e17b      	b.n	8022aee <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80227f6:	69bb      	ldr	r3, [r7, #24]
 80227f8:	2b00      	cmp	r3, #0
 80227fa:	f000 80b1 	beq.w	8022960 <HAL_UART_IRQHandler+0x1bc>
 80227fe:	69fb      	ldr	r3, [r7, #28]
 8022800:	f003 0301 	and.w	r3, r3, #1
 8022804:	2b00      	cmp	r3, #0
 8022806:	d105      	bne.n	8022814 <HAL_UART_IRQHandler+0x70>
 8022808:	6a3b      	ldr	r3, [r7, #32]
 802280a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 802280e:	2b00      	cmp	r3, #0
 8022810:	f000 80a6 	beq.w	8022960 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8022814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022816:	f003 0301 	and.w	r3, r3, #1
 802281a:	2b00      	cmp	r3, #0
 802281c:	d00a      	beq.n	8022834 <HAL_UART_IRQHandler+0x90>
 802281e:	6a3b      	ldr	r3, [r7, #32]
 8022820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022824:	2b00      	cmp	r3, #0
 8022826:	d005      	beq.n	8022834 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8022828:	687b      	ldr	r3, [r7, #4]
 802282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802282c:	f043 0201 	orr.w	r2, r3, #1
 8022830:	687b      	ldr	r3, [r7, #4]
 8022832:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8022834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022836:	f003 0304 	and.w	r3, r3, #4
 802283a:	2b00      	cmp	r3, #0
 802283c:	d00a      	beq.n	8022854 <HAL_UART_IRQHandler+0xb0>
 802283e:	69fb      	ldr	r3, [r7, #28]
 8022840:	f003 0301 	and.w	r3, r3, #1
 8022844:	2b00      	cmp	r3, #0
 8022846:	d005      	beq.n	8022854 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8022848:	687b      	ldr	r3, [r7, #4]
 802284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802284c:	f043 0202 	orr.w	r2, r3, #2
 8022850:	687b      	ldr	r3, [r7, #4]
 8022852:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8022854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022856:	f003 0302 	and.w	r3, r3, #2
 802285a:	2b00      	cmp	r3, #0
 802285c:	d00a      	beq.n	8022874 <HAL_UART_IRQHandler+0xd0>
 802285e:	69fb      	ldr	r3, [r7, #28]
 8022860:	f003 0301 	and.w	r3, r3, #1
 8022864:	2b00      	cmp	r3, #0
 8022866:	d005      	beq.n	8022874 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8022868:	687b      	ldr	r3, [r7, #4]
 802286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802286c:	f043 0204 	orr.w	r2, r3, #4
 8022870:	687b      	ldr	r3, [r7, #4]
 8022872:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8022874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022876:	f003 0308 	and.w	r3, r3, #8
 802287a:	2b00      	cmp	r3, #0
 802287c:	d00f      	beq.n	802289e <HAL_UART_IRQHandler+0xfa>
 802287e:	6a3b      	ldr	r3, [r7, #32]
 8022880:	f003 0320 	and.w	r3, r3, #32
 8022884:	2b00      	cmp	r3, #0
 8022886:	d104      	bne.n	8022892 <HAL_UART_IRQHandler+0xee>
 8022888:	69fb      	ldr	r3, [r7, #28]
 802288a:	f003 0301 	and.w	r3, r3, #1
 802288e:	2b00      	cmp	r3, #0
 8022890:	d005      	beq.n	802289e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8022892:	687b      	ldr	r3, [r7, #4]
 8022894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022896:	f043 0208 	orr.w	r2, r3, #8
 802289a:	687b      	ldr	r3, [r7, #4]
 802289c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 802289e:	687b      	ldr	r3, [r7, #4]
 80228a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80228a2:	2b00      	cmp	r3, #0
 80228a4:	f000 811e 	beq.w	8022ae4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80228a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80228aa:	f003 0320 	and.w	r3, r3, #32
 80228ae:	2b00      	cmp	r3, #0
 80228b0:	d007      	beq.n	80228c2 <HAL_UART_IRQHandler+0x11e>
 80228b2:	6a3b      	ldr	r3, [r7, #32]
 80228b4:	f003 0320 	and.w	r3, r3, #32
 80228b8:	2b00      	cmp	r3, #0
 80228ba:	d002      	beq.n	80228c2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80228bc:	6878      	ldr	r0, [r7, #4]
 80228be:	f000 fa59 	bl	8022d74 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80228c2:	687b      	ldr	r3, [r7, #4]
 80228c4:	681b      	ldr	r3, [r3, #0]
 80228c6:	695b      	ldr	r3, [r3, #20]
 80228c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80228cc:	2b00      	cmp	r3, #0
 80228ce:	bf14      	ite	ne
 80228d0:	2301      	movne	r3, #1
 80228d2:	2300      	moveq	r3, #0
 80228d4:	b2db      	uxtb	r3, r3
 80228d6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80228d8:	687b      	ldr	r3, [r7, #4]
 80228da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80228dc:	f003 0308 	and.w	r3, r3, #8
 80228e0:	2b00      	cmp	r3, #0
 80228e2:	d102      	bne.n	80228ea <HAL_UART_IRQHandler+0x146>
 80228e4:	697b      	ldr	r3, [r7, #20]
 80228e6:	2b00      	cmp	r3, #0
 80228e8:	d031      	beq.n	802294e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80228ea:	6878      	ldr	r0, [r7, #4]
 80228ec:	f000 f99b 	bl	8022c26 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80228f0:	687b      	ldr	r3, [r7, #4]
 80228f2:	681b      	ldr	r3, [r3, #0]
 80228f4:	695b      	ldr	r3, [r3, #20]
 80228f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80228fa:	2b00      	cmp	r3, #0
 80228fc:	d023      	beq.n	8022946 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80228fe:	687b      	ldr	r3, [r7, #4]
 8022900:	681b      	ldr	r3, [r3, #0]
 8022902:	695a      	ldr	r2, [r3, #20]
 8022904:	687b      	ldr	r3, [r7, #4]
 8022906:	681b      	ldr	r3, [r3, #0]
 8022908:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802290c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 802290e:	687b      	ldr	r3, [r7, #4]
 8022910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022912:	2b00      	cmp	r3, #0
 8022914:	d013      	beq.n	802293e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8022916:	687b      	ldr	r3, [r7, #4]
 8022918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802291a:	4a76      	ldr	r2, [pc, #472]	; (8022af4 <HAL_UART_IRQHandler+0x350>)
 802291c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 802291e:	687b      	ldr	r3, [r7, #4]
 8022920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022922:	4618      	mov	r0, r3
 8022924:	f7fe f8da 	bl	8020adc <HAL_DMA_Abort_IT>
 8022928:	4603      	mov	r3, r0
 802292a:	2b00      	cmp	r3, #0
 802292c:	d016      	beq.n	802295c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 802292e:	687b      	ldr	r3, [r7, #4]
 8022930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022934:	687a      	ldr	r2, [r7, #4]
 8022936:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8022938:	4610      	mov	r0, r2
 802293a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802293c:	e00e      	b.n	802295c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 802293e:	6878      	ldr	r0, [r7, #4]
 8022940:	f000 f8da 	bl	8022af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022944:	e00a      	b.n	802295c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8022946:	6878      	ldr	r0, [r7, #4]
 8022948:	f000 f8d6 	bl	8022af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802294c:	e006      	b.n	802295c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 802294e:	6878      	ldr	r0, [r7, #4]
 8022950:	f000 f8d2 	bl	8022af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022954:	687b      	ldr	r3, [r7, #4]
 8022956:	2200      	movs	r2, #0
 8022958:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 802295a:	e0c3      	b.n	8022ae4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802295c:	bf00      	nop
    return;
 802295e:	e0c1      	b.n	8022ae4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022960:	687b      	ldr	r3, [r7, #4]
 8022962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022964:	2b01      	cmp	r3, #1
 8022966:	f040 80a1 	bne.w	8022aac <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 802296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802296c:	f003 0310 	and.w	r3, r3, #16
 8022970:	2b00      	cmp	r3, #0
 8022972:	f000 809b 	beq.w	8022aac <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8022976:	6a3b      	ldr	r3, [r7, #32]
 8022978:	f003 0310 	and.w	r3, r3, #16
 802297c:	2b00      	cmp	r3, #0
 802297e:	f000 8095 	beq.w	8022aac <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8022982:	2300      	movs	r3, #0
 8022984:	60fb      	str	r3, [r7, #12]
 8022986:	687b      	ldr	r3, [r7, #4]
 8022988:	681b      	ldr	r3, [r3, #0]
 802298a:	681b      	ldr	r3, [r3, #0]
 802298c:	60fb      	str	r3, [r7, #12]
 802298e:	687b      	ldr	r3, [r7, #4]
 8022990:	681b      	ldr	r3, [r3, #0]
 8022992:	685b      	ldr	r3, [r3, #4]
 8022994:	60fb      	str	r3, [r7, #12]
 8022996:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022998:	687b      	ldr	r3, [r7, #4]
 802299a:	681b      	ldr	r3, [r3, #0]
 802299c:	695b      	ldr	r3, [r3, #20]
 802299e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80229a2:	2b00      	cmp	r3, #0
 80229a4:	d04e      	beq.n	8022a44 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80229a6:	687b      	ldr	r3, [r7, #4]
 80229a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80229aa:	681b      	ldr	r3, [r3, #0]
 80229ac:	685b      	ldr	r3, [r3, #4]
 80229ae:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80229b0:	8a3b      	ldrh	r3, [r7, #16]
 80229b2:	2b00      	cmp	r3, #0
 80229b4:	f000 8098 	beq.w	8022ae8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80229b8:	687b      	ldr	r3, [r7, #4]
 80229ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80229bc:	8a3a      	ldrh	r2, [r7, #16]
 80229be:	429a      	cmp	r2, r3
 80229c0:	f080 8092 	bcs.w	8022ae8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80229c4:	687b      	ldr	r3, [r7, #4]
 80229c6:	8a3a      	ldrh	r2, [r7, #16]
 80229c8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80229ca:	687b      	ldr	r3, [r7, #4]
 80229cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80229ce:	699b      	ldr	r3, [r3, #24]
 80229d0:	2b20      	cmp	r3, #32
 80229d2:	d02b      	beq.n	8022a2c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80229d4:	687b      	ldr	r3, [r7, #4]
 80229d6:	681b      	ldr	r3, [r3, #0]
 80229d8:	68da      	ldr	r2, [r3, #12]
 80229da:	687b      	ldr	r3, [r7, #4]
 80229dc:	681b      	ldr	r3, [r3, #0]
 80229de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80229e2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80229e4:	687b      	ldr	r3, [r7, #4]
 80229e6:	681b      	ldr	r3, [r3, #0]
 80229e8:	695a      	ldr	r2, [r3, #20]
 80229ea:	687b      	ldr	r3, [r7, #4]
 80229ec:	681b      	ldr	r3, [r3, #0]
 80229ee:	f022 0201 	bic.w	r2, r2, #1
 80229f2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80229f4:	687b      	ldr	r3, [r7, #4]
 80229f6:	681b      	ldr	r3, [r3, #0]
 80229f8:	695a      	ldr	r2, [r3, #20]
 80229fa:	687b      	ldr	r3, [r7, #4]
 80229fc:	681b      	ldr	r3, [r3, #0]
 80229fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8022a02:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8022a04:	687b      	ldr	r3, [r7, #4]
 8022a06:	2220      	movs	r2, #32
 8022a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022a0c:	687b      	ldr	r3, [r7, #4]
 8022a0e:	2200      	movs	r2, #0
 8022a10:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8022a12:	687b      	ldr	r3, [r7, #4]
 8022a14:	681b      	ldr	r3, [r3, #0]
 8022a16:	68da      	ldr	r2, [r3, #12]
 8022a18:	687b      	ldr	r3, [r7, #4]
 8022a1a:	681b      	ldr	r3, [r3, #0]
 8022a1c:	f022 0210 	bic.w	r2, r2, #16
 8022a20:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8022a22:	687b      	ldr	r3, [r7, #4]
 8022a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022a26:	4618      	mov	r0, r3
 8022a28:	f7fe f81d 	bl	8020a66 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8022a2c:	687b      	ldr	r3, [r7, #4]
 8022a2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8022a30:	687b      	ldr	r3, [r7, #4]
 8022a32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8022a34:	b29b      	uxth	r3, r3
 8022a36:	1ad3      	subs	r3, r2, r3
 8022a38:	b29b      	uxth	r3, r3
 8022a3a:	4619      	mov	r1, r3
 8022a3c:	6878      	ldr	r0, [r7, #4]
 8022a3e:	f000 f864 	bl	8022b0a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8022a42:	e051      	b.n	8022ae8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8022a44:	687b      	ldr	r3, [r7, #4]
 8022a46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8022a48:	687b      	ldr	r3, [r7, #4]
 8022a4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8022a4c:	b29b      	uxth	r3, r3
 8022a4e:	1ad3      	subs	r3, r2, r3
 8022a50:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8022a52:	687b      	ldr	r3, [r7, #4]
 8022a54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8022a56:	b29b      	uxth	r3, r3
 8022a58:	2b00      	cmp	r3, #0
 8022a5a:	d047      	beq.n	8022aec <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8022a5c:	8a7b      	ldrh	r3, [r7, #18]
 8022a5e:	2b00      	cmp	r3, #0
 8022a60:	d044      	beq.n	8022aec <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8022a62:	687b      	ldr	r3, [r7, #4]
 8022a64:	681b      	ldr	r3, [r3, #0]
 8022a66:	68da      	ldr	r2, [r3, #12]
 8022a68:	687b      	ldr	r3, [r7, #4]
 8022a6a:	681b      	ldr	r3, [r3, #0]
 8022a6c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8022a70:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8022a72:	687b      	ldr	r3, [r7, #4]
 8022a74:	681b      	ldr	r3, [r3, #0]
 8022a76:	695a      	ldr	r2, [r3, #20]
 8022a78:	687b      	ldr	r3, [r7, #4]
 8022a7a:	681b      	ldr	r3, [r3, #0]
 8022a7c:	f022 0201 	bic.w	r2, r2, #1
 8022a80:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8022a82:	687b      	ldr	r3, [r7, #4]
 8022a84:	2220      	movs	r2, #32
 8022a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022a8a:	687b      	ldr	r3, [r7, #4]
 8022a8c:	2200      	movs	r2, #0
 8022a8e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8022a90:	687b      	ldr	r3, [r7, #4]
 8022a92:	681b      	ldr	r3, [r3, #0]
 8022a94:	68da      	ldr	r2, [r3, #12]
 8022a96:	687b      	ldr	r3, [r7, #4]
 8022a98:	681b      	ldr	r3, [r3, #0]
 8022a9a:	f022 0210 	bic.w	r2, r2, #16
 8022a9e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8022aa0:	8a7b      	ldrh	r3, [r7, #18]
 8022aa2:	4619      	mov	r1, r3
 8022aa4:	6878      	ldr	r0, [r7, #4]
 8022aa6:	f000 f830 	bl	8022b0a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8022aaa:	e01f      	b.n	8022aec <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8022aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022ab2:	2b00      	cmp	r3, #0
 8022ab4:	d008      	beq.n	8022ac8 <HAL_UART_IRQHandler+0x324>
 8022ab6:	6a3b      	ldr	r3, [r7, #32]
 8022ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022abc:	2b00      	cmp	r3, #0
 8022abe:	d003      	beq.n	8022ac8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8022ac0:	6878      	ldr	r0, [r7, #4]
 8022ac2:	f000 f8f0 	bl	8022ca6 <UART_Transmit_IT>
    return;
 8022ac6:	e012      	b.n	8022aee <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8022ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022ace:	2b00      	cmp	r3, #0
 8022ad0:	d00d      	beq.n	8022aee <HAL_UART_IRQHandler+0x34a>
 8022ad2:	6a3b      	ldr	r3, [r7, #32]
 8022ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022ad8:	2b00      	cmp	r3, #0
 8022ada:	d008      	beq.n	8022aee <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8022adc:	6878      	ldr	r0, [r7, #4]
 8022ade:	f000 f931 	bl	8022d44 <UART_EndTransmit_IT>
    return;
 8022ae2:	e004      	b.n	8022aee <HAL_UART_IRQHandler+0x34a>
    return;
 8022ae4:	bf00      	nop
 8022ae6:	e002      	b.n	8022aee <HAL_UART_IRQHandler+0x34a>
      return;
 8022ae8:	bf00      	nop
 8022aea:	e000      	b.n	8022aee <HAL_UART_IRQHandler+0x34a>
      return;
 8022aec:	bf00      	nop
  }
}
 8022aee:	3728      	adds	r7, #40	; 0x28
 8022af0:	46bd      	mov	sp, r7
 8022af2:	bd80      	pop	{r7, pc}
 8022af4:	08022c7f 	.word	0x08022c7f

08022af8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8022af8:	b480      	push	{r7}
 8022afa:	b083      	sub	sp, #12
 8022afc:	af00      	add	r7, sp, #0
 8022afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8022b00:	bf00      	nop
 8022b02:	370c      	adds	r7, #12
 8022b04:	46bd      	mov	sp, r7
 8022b06:	bc80      	pop	{r7}
 8022b08:	4770      	bx	lr

08022b0a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8022b0a:	b480      	push	{r7}
 8022b0c:	b083      	sub	sp, #12
 8022b0e:	af00      	add	r7, sp, #0
 8022b10:	6078      	str	r0, [r7, #4]
 8022b12:	460b      	mov	r3, r1
 8022b14:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8022b16:	bf00      	nop
 8022b18:	370c      	adds	r7, #12
 8022b1a:	46bd      	mov	sp, r7
 8022b1c:	bc80      	pop	{r7}
 8022b1e:	4770      	bx	lr

08022b20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8022b20:	b580      	push	{r7, lr}
 8022b22:	b084      	sub	sp, #16
 8022b24:	af00      	add	r7, sp, #0
 8022b26:	60f8      	str	r0, [r7, #12]
 8022b28:	60b9      	str	r1, [r7, #8]
 8022b2a:	603b      	str	r3, [r7, #0]
 8022b2c:	4613      	mov	r3, r2
 8022b2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8022b30:	e02c      	b.n	8022b8c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8022b32:	69bb      	ldr	r3, [r7, #24]
 8022b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022b38:	d028      	beq.n	8022b8c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8022b3a:	69bb      	ldr	r3, [r7, #24]
 8022b3c:	2b00      	cmp	r3, #0
 8022b3e:	d007      	beq.n	8022b50 <UART_WaitOnFlagUntilTimeout+0x30>
 8022b40:	f7fd fe56 	bl	80207f0 <HAL_GetTick>
 8022b44:	4602      	mov	r2, r0
 8022b46:	683b      	ldr	r3, [r7, #0]
 8022b48:	1ad3      	subs	r3, r2, r3
 8022b4a:	69ba      	ldr	r2, [r7, #24]
 8022b4c:	429a      	cmp	r2, r3
 8022b4e:	d21d      	bcs.n	8022b8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8022b50:	68fb      	ldr	r3, [r7, #12]
 8022b52:	681b      	ldr	r3, [r3, #0]
 8022b54:	68da      	ldr	r2, [r3, #12]
 8022b56:	68fb      	ldr	r3, [r7, #12]
 8022b58:	681b      	ldr	r3, [r3, #0]
 8022b5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8022b5e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8022b60:	68fb      	ldr	r3, [r7, #12]
 8022b62:	681b      	ldr	r3, [r3, #0]
 8022b64:	695a      	ldr	r2, [r3, #20]
 8022b66:	68fb      	ldr	r3, [r7, #12]
 8022b68:	681b      	ldr	r3, [r3, #0]
 8022b6a:	f022 0201 	bic.w	r2, r2, #1
 8022b6e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8022b70:	68fb      	ldr	r3, [r7, #12]
 8022b72:	2220      	movs	r2, #32
 8022b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8022b78:	68fb      	ldr	r3, [r7, #12]
 8022b7a:	2220      	movs	r2, #32
 8022b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8022b80:	68fb      	ldr	r3, [r7, #12]
 8022b82:	2200      	movs	r2, #0
 8022b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8022b88:	2303      	movs	r3, #3
 8022b8a:	e00f      	b.n	8022bac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8022b8c:	68fb      	ldr	r3, [r7, #12]
 8022b8e:	681b      	ldr	r3, [r3, #0]
 8022b90:	681a      	ldr	r2, [r3, #0]
 8022b92:	68bb      	ldr	r3, [r7, #8]
 8022b94:	4013      	ands	r3, r2
 8022b96:	68ba      	ldr	r2, [r7, #8]
 8022b98:	429a      	cmp	r2, r3
 8022b9a:	bf0c      	ite	eq
 8022b9c:	2301      	moveq	r3, #1
 8022b9e:	2300      	movne	r3, #0
 8022ba0:	b2db      	uxtb	r3, r3
 8022ba2:	461a      	mov	r2, r3
 8022ba4:	79fb      	ldrb	r3, [r7, #7]
 8022ba6:	429a      	cmp	r2, r3
 8022ba8:	d0c3      	beq.n	8022b32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8022baa:	2300      	movs	r3, #0
}
 8022bac:	4618      	mov	r0, r3
 8022bae:	3710      	adds	r7, #16
 8022bb0:	46bd      	mov	sp, r7
 8022bb2:	bd80      	pop	{r7, pc}

08022bb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8022bb4:	b480      	push	{r7}
 8022bb6:	b085      	sub	sp, #20
 8022bb8:	af00      	add	r7, sp, #0
 8022bba:	60f8      	str	r0, [r7, #12]
 8022bbc:	60b9      	str	r1, [r7, #8]
 8022bbe:	4613      	mov	r3, r2
 8022bc0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8022bc2:	68fb      	ldr	r3, [r7, #12]
 8022bc4:	68ba      	ldr	r2, [r7, #8]
 8022bc6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8022bc8:	68fb      	ldr	r3, [r7, #12]
 8022bca:	88fa      	ldrh	r2, [r7, #6]
 8022bcc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8022bce:	68fb      	ldr	r3, [r7, #12]
 8022bd0:	88fa      	ldrh	r2, [r7, #6]
 8022bd2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022bd4:	68fb      	ldr	r3, [r7, #12]
 8022bd6:	2200      	movs	r2, #0
 8022bd8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8022bda:	68fb      	ldr	r3, [r7, #12]
 8022bdc:	2222      	movs	r2, #34	; 0x22
 8022bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8022be2:	68fb      	ldr	r3, [r7, #12]
 8022be4:	2200      	movs	r2, #0
 8022be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8022bea:	68fb      	ldr	r3, [r7, #12]
 8022bec:	681b      	ldr	r3, [r3, #0]
 8022bee:	68da      	ldr	r2, [r3, #12]
 8022bf0:	68fb      	ldr	r3, [r7, #12]
 8022bf2:	681b      	ldr	r3, [r3, #0]
 8022bf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8022bf8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8022bfa:	68fb      	ldr	r3, [r7, #12]
 8022bfc:	681b      	ldr	r3, [r3, #0]
 8022bfe:	695a      	ldr	r2, [r3, #20]
 8022c00:	68fb      	ldr	r3, [r7, #12]
 8022c02:	681b      	ldr	r3, [r3, #0]
 8022c04:	f042 0201 	orr.w	r2, r2, #1
 8022c08:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8022c0a:	68fb      	ldr	r3, [r7, #12]
 8022c0c:	681b      	ldr	r3, [r3, #0]
 8022c0e:	68da      	ldr	r2, [r3, #12]
 8022c10:	68fb      	ldr	r3, [r7, #12]
 8022c12:	681b      	ldr	r3, [r3, #0]
 8022c14:	f042 0220 	orr.w	r2, r2, #32
 8022c18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8022c1a:	2300      	movs	r3, #0
}
 8022c1c:	4618      	mov	r0, r3
 8022c1e:	3714      	adds	r7, #20
 8022c20:	46bd      	mov	sp, r7
 8022c22:	bc80      	pop	{r7}
 8022c24:	4770      	bx	lr

08022c26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8022c26:	b480      	push	{r7}
 8022c28:	b083      	sub	sp, #12
 8022c2a:	af00      	add	r7, sp, #0
 8022c2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8022c2e:	687b      	ldr	r3, [r7, #4]
 8022c30:	681b      	ldr	r3, [r3, #0]
 8022c32:	68da      	ldr	r2, [r3, #12]
 8022c34:	687b      	ldr	r3, [r7, #4]
 8022c36:	681b      	ldr	r3, [r3, #0]
 8022c38:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8022c3c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8022c3e:	687b      	ldr	r3, [r7, #4]
 8022c40:	681b      	ldr	r3, [r3, #0]
 8022c42:	695a      	ldr	r2, [r3, #20]
 8022c44:	687b      	ldr	r3, [r7, #4]
 8022c46:	681b      	ldr	r3, [r3, #0]
 8022c48:	f022 0201 	bic.w	r2, r2, #1
 8022c4c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022c4e:	687b      	ldr	r3, [r7, #4]
 8022c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022c52:	2b01      	cmp	r3, #1
 8022c54:	d107      	bne.n	8022c66 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8022c56:	687b      	ldr	r3, [r7, #4]
 8022c58:	681b      	ldr	r3, [r3, #0]
 8022c5a:	68da      	ldr	r2, [r3, #12]
 8022c5c:	687b      	ldr	r3, [r7, #4]
 8022c5e:	681b      	ldr	r3, [r3, #0]
 8022c60:	f022 0210 	bic.w	r2, r2, #16
 8022c64:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8022c66:	687b      	ldr	r3, [r7, #4]
 8022c68:	2220      	movs	r2, #32
 8022c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022c6e:	687b      	ldr	r3, [r7, #4]
 8022c70:	2200      	movs	r2, #0
 8022c72:	631a      	str	r2, [r3, #48]	; 0x30
}
 8022c74:	bf00      	nop
 8022c76:	370c      	adds	r7, #12
 8022c78:	46bd      	mov	sp, r7
 8022c7a:	bc80      	pop	{r7}
 8022c7c:	4770      	bx	lr

08022c7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8022c7e:	b580      	push	{r7, lr}
 8022c80:	b084      	sub	sp, #16
 8022c82:	af00      	add	r7, sp, #0
 8022c84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8022c86:	687b      	ldr	r3, [r7, #4]
 8022c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022c8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8022c8c:	68fb      	ldr	r3, [r7, #12]
 8022c8e:	2200      	movs	r2, #0
 8022c90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8022c92:	68fb      	ldr	r3, [r7, #12]
 8022c94:	2200      	movs	r2, #0
 8022c96:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8022c98:	68f8      	ldr	r0, [r7, #12]
 8022c9a:	f7ff ff2d 	bl	8022af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8022c9e:	bf00      	nop
 8022ca0:	3710      	adds	r7, #16
 8022ca2:	46bd      	mov	sp, r7
 8022ca4:	bd80      	pop	{r7, pc}

08022ca6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8022ca6:	b480      	push	{r7}
 8022ca8:	b085      	sub	sp, #20
 8022caa:	af00      	add	r7, sp, #0
 8022cac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8022cae:	687b      	ldr	r3, [r7, #4]
 8022cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8022cb4:	b2db      	uxtb	r3, r3
 8022cb6:	2b21      	cmp	r3, #33	; 0x21
 8022cb8:	d13e      	bne.n	8022d38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8022cba:	687b      	ldr	r3, [r7, #4]
 8022cbc:	689b      	ldr	r3, [r3, #8]
 8022cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022cc2:	d114      	bne.n	8022cee <UART_Transmit_IT+0x48>
 8022cc4:	687b      	ldr	r3, [r7, #4]
 8022cc6:	691b      	ldr	r3, [r3, #16]
 8022cc8:	2b00      	cmp	r3, #0
 8022cca:	d110      	bne.n	8022cee <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8022ccc:	687b      	ldr	r3, [r7, #4]
 8022cce:	6a1b      	ldr	r3, [r3, #32]
 8022cd0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8022cd2:	68fb      	ldr	r3, [r7, #12]
 8022cd4:	881b      	ldrh	r3, [r3, #0]
 8022cd6:	461a      	mov	r2, r3
 8022cd8:	687b      	ldr	r3, [r7, #4]
 8022cda:	681b      	ldr	r3, [r3, #0]
 8022cdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8022ce0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8022ce2:	687b      	ldr	r3, [r7, #4]
 8022ce4:	6a1b      	ldr	r3, [r3, #32]
 8022ce6:	1c9a      	adds	r2, r3, #2
 8022ce8:	687b      	ldr	r3, [r7, #4]
 8022cea:	621a      	str	r2, [r3, #32]
 8022cec:	e008      	b.n	8022d00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8022cee:	687b      	ldr	r3, [r7, #4]
 8022cf0:	6a1b      	ldr	r3, [r3, #32]
 8022cf2:	1c59      	adds	r1, r3, #1
 8022cf4:	687a      	ldr	r2, [r7, #4]
 8022cf6:	6211      	str	r1, [r2, #32]
 8022cf8:	781a      	ldrb	r2, [r3, #0]
 8022cfa:	687b      	ldr	r3, [r7, #4]
 8022cfc:	681b      	ldr	r3, [r3, #0]
 8022cfe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8022d00:	687b      	ldr	r3, [r7, #4]
 8022d02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8022d04:	b29b      	uxth	r3, r3
 8022d06:	3b01      	subs	r3, #1
 8022d08:	b29b      	uxth	r3, r3
 8022d0a:	687a      	ldr	r2, [r7, #4]
 8022d0c:	4619      	mov	r1, r3
 8022d0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8022d10:	2b00      	cmp	r3, #0
 8022d12:	d10f      	bne.n	8022d34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8022d14:	687b      	ldr	r3, [r7, #4]
 8022d16:	681b      	ldr	r3, [r3, #0]
 8022d18:	68da      	ldr	r2, [r3, #12]
 8022d1a:	687b      	ldr	r3, [r7, #4]
 8022d1c:	681b      	ldr	r3, [r3, #0]
 8022d1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8022d22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8022d24:	687b      	ldr	r3, [r7, #4]
 8022d26:	681b      	ldr	r3, [r3, #0]
 8022d28:	68da      	ldr	r2, [r3, #12]
 8022d2a:	687b      	ldr	r3, [r7, #4]
 8022d2c:	681b      	ldr	r3, [r3, #0]
 8022d2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8022d32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8022d34:	2300      	movs	r3, #0
 8022d36:	e000      	b.n	8022d3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8022d38:	2302      	movs	r3, #2
  }
}
 8022d3a:	4618      	mov	r0, r3
 8022d3c:	3714      	adds	r7, #20
 8022d3e:	46bd      	mov	sp, r7
 8022d40:	bc80      	pop	{r7}
 8022d42:	4770      	bx	lr

08022d44 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8022d44:	b580      	push	{r7, lr}
 8022d46:	b082      	sub	sp, #8
 8022d48:	af00      	add	r7, sp, #0
 8022d4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8022d4c:	687b      	ldr	r3, [r7, #4]
 8022d4e:	681b      	ldr	r3, [r3, #0]
 8022d50:	68da      	ldr	r2, [r3, #12]
 8022d52:	687b      	ldr	r3, [r7, #4]
 8022d54:	681b      	ldr	r3, [r3, #0]
 8022d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8022d5a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8022d5c:	687b      	ldr	r3, [r7, #4]
 8022d5e:	2220      	movs	r2, #32
 8022d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8022d64:	6878      	ldr	r0, [r7, #4]
 8022d66:	f7fb ff85 	bl	801ec74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8022d6a:	2300      	movs	r3, #0
}
 8022d6c:	4618      	mov	r0, r3
 8022d6e:	3708      	adds	r7, #8
 8022d70:	46bd      	mov	sp, r7
 8022d72:	bd80      	pop	{r7, pc}

08022d74 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8022d74:	b580      	push	{r7, lr}
 8022d76:	b086      	sub	sp, #24
 8022d78:	af00      	add	r7, sp, #0
 8022d7a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8022d7c:	687b      	ldr	r3, [r7, #4]
 8022d7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8022d82:	b2db      	uxtb	r3, r3
 8022d84:	2b22      	cmp	r3, #34	; 0x22
 8022d86:	f040 8099 	bne.w	8022ebc <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8022d8a:	687b      	ldr	r3, [r7, #4]
 8022d8c:	689b      	ldr	r3, [r3, #8]
 8022d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022d92:	d117      	bne.n	8022dc4 <UART_Receive_IT+0x50>
 8022d94:	687b      	ldr	r3, [r7, #4]
 8022d96:	691b      	ldr	r3, [r3, #16]
 8022d98:	2b00      	cmp	r3, #0
 8022d9a:	d113      	bne.n	8022dc4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8022d9c:	2300      	movs	r3, #0
 8022d9e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8022da0:	687b      	ldr	r3, [r7, #4]
 8022da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022da4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8022da6:	687b      	ldr	r3, [r7, #4]
 8022da8:	681b      	ldr	r3, [r3, #0]
 8022daa:	685b      	ldr	r3, [r3, #4]
 8022dac:	b29b      	uxth	r3, r3
 8022dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022db2:	b29a      	uxth	r2, r3
 8022db4:	693b      	ldr	r3, [r7, #16]
 8022db6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8022db8:	687b      	ldr	r3, [r7, #4]
 8022dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022dbc:	1c9a      	adds	r2, r3, #2
 8022dbe:	687b      	ldr	r3, [r7, #4]
 8022dc0:	629a      	str	r2, [r3, #40]	; 0x28
 8022dc2:	e026      	b.n	8022e12 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8022dc4:	687b      	ldr	r3, [r7, #4]
 8022dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022dc8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8022dca:	2300      	movs	r3, #0
 8022dcc:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8022dce:	687b      	ldr	r3, [r7, #4]
 8022dd0:	689b      	ldr	r3, [r3, #8]
 8022dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022dd6:	d007      	beq.n	8022de8 <UART_Receive_IT+0x74>
 8022dd8:	687b      	ldr	r3, [r7, #4]
 8022dda:	689b      	ldr	r3, [r3, #8]
 8022ddc:	2b00      	cmp	r3, #0
 8022dde:	d10a      	bne.n	8022df6 <UART_Receive_IT+0x82>
 8022de0:	687b      	ldr	r3, [r7, #4]
 8022de2:	691b      	ldr	r3, [r3, #16]
 8022de4:	2b00      	cmp	r3, #0
 8022de6:	d106      	bne.n	8022df6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8022de8:	687b      	ldr	r3, [r7, #4]
 8022dea:	681b      	ldr	r3, [r3, #0]
 8022dec:	685b      	ldr	r3, [r3, #4]
 8022dee:	b2da      	uxtb	r2, r3
 8022df0:	697b      	ldr	r3, [r7, #20]
 8022df2:	701a      	strb	r2, [r3, #0]
 8022df4:	e008      	b.n	8022e08 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8022df6:	687b      	ldr	r3, [r7, #4]
 8022df8:	681b      	ldr	r3, [r3, #0]
 8022dfa:	685b      	ldr	r3, [r3, #4]
 8022dfc:	b2db      	uxtb	r3, r3
 8022dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8022e02:	b2da      	uxtb	r2, r3
 8022e04:	697b      	ldr	r3, [r7, #20]
 8022e06:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8022e08:	687b      	ldr	r3, [r7, #4]
 8022e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022e0c:	1c5a      	adds	r2, r3, #1
 8022e0e:	687b      	ldr	r3, [r7, #4]
 8022e10:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8022e12:	687b      	ldr	r3, [r7, #4]
 8022e14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8022e16:	b29b      	uxth	r3, r3
 8022e18:	3b01      	subs	r3, #1
 8022e1a:	b29b      	uxth	r3, r3
 8022e1c:	687a      	ldr	r2, [r7, #4]
 8022e1e:	4619      	mov	r1, r3
 8022e20:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8022e22:	2b00      	cmp	r3, #0
 8022e24:	d148      	bne.n	8022eb8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8022e26:	687b      	ldr	r3, [r7, #4]
 8022e28:	681b      	ldr	r3, [r3, #0]
 8022e2a:	68da      	ldr	r2, [r3, #12]
 8022e2c:	687b      	ldr	r3, [r7, #4]
 8022e2e:	681b      	ldr	r3, [r3, #0]
 8022e30:	f022 0220 	bic.w	r2, r2, #32
 8022e34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8022e36:	687b      	ldr	r3, [r7, #4]
 8022e38:	681b      	ldr	r3, [r3, #0]
 8022e3a:	68da      	ldr	r2, [r3, #12]
 8022e3c:	687b      	ldr	r3, [r7, #4]
 8022e3e:	681b      	ldr	r3, [r3, #0]
 8022e40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8022e44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8022e46:	687b      	ldr	r3, [r7, #4]
 8022e48:	681b      	ldr	r3, [r3, #0]
 8022e4a:	695a      	ldr	r2, [r3, #20]
 8022e4c:	687b      	ldr	r3, [r7, #4]
 8022e4e:	681b      	ldr	r3, [r3, #0]
 8022e50:	f022 0201 	bic.w	r2, r2, #1
 8022e54:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8022e56:	687b      	ldr	r3, [r7, #4]
 8022e58:	2220      	movs	r2, #32
 8022e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022e5e:	687b      	ldr	r3, [r7, #4]
 8022e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022e62:	2b01      	cmp	r3, #1
 8022e64:	d123      	bne.n	8022eae <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022e66:	687b      	ldr	r3, [r7, #4]
 8022e68:	2200      	movs	r2, #0
 8022e6a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8022e6c:	687b      	ldr	r3, [r7, #4]
 8022e6e:	681b      	ldr	r3, [r3, #0]
 8022e70:	68da      	ldr	r2, [r3, #12]
 8022e72:	687b      	ldr	r3, [r7, #4]
 8022e74:	681b      	ldr	r3, [r3, #0]
 8022e76:	f022 0210 	bic.w	r2, r2, #16
 8022e7a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8022e7c:	687b      	ldr	r3, [r7, #4]
 8022e7e:	681b      	ldr	r3, [r3, #0]
 8022e80:	681b      	ldr	r3, [r3, #0]
 8022e82:	f003 0310 	and.w	r3, r3, #16
 8022e86:	2b10      	cmp	r3, #16
 8022e88:	d10a      	bne.n	8022ea0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8022e8a:	2300      	movs	r3, #0
 8022e8c:	60fb      	str	r3, [r7, #12]
 8022e8e:	687b      	ldr	r3, [r7, #4]
 8022e90:	681b      	ldr	r3, [r3, #0]
 8022e92:	681b      	ldr	r3, [r3, #0]
 8022e94:	60fb      	str	r3, [r7, #12]
 8022e96:	687b      	ldr	r3, [r7, #4]
 8022e98:	681b      	ldr	r3, [r3, #0]
 8022e9a:	685b      	ldr	r3, [r3, #4]
 8022e9c:	60fb      	str	r3, [r7, #12]
 8022e9e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8022ea0:	687b      	ldr	r3, [r7, #4]
 8022ea2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8022ea4:	4619      	mov	r1, r3
 8022ea6:	6878      	ldr	r0, [r7, #4]
 8022ea8:	f7ff fe2f 	bl	8022b0a <HAL_UARTEx_RxEventCallback>
 8022eac:	e002      	b.n	8022eb4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8022eae:	6878      	ldr	r0, [r7, #4]
 8022eb0:	f7fb feb0 	bl	801ec14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8022eb4:	2300      	movs	r3, #0
 8022eb6:	e002      	b.n	8022ebe <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8022eb8:	2300      	movs	r3, #0
 8022eba:	e000      	b.n	8022ebe <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8022ebc:	2302      	movs	r3, #2
  }
}
 8022ebe:	4618      	mov	r0, r3
 8022ec0:	3718      	adds	r7, #24
 8022ec2:	46bd      	mov	sp, r7
 8022ec4:	bd80      	pop	{r7, pc}
	...

08022ec8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8022ec8:	b580      	push	{r7, lr}
 8022eca:	b084      	sub	sp, #16
 8022ecc:	af00      	add	r7, sp, #0
 8022ece:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8022ed0:	687b      	ldr	r3, [r7, #4]
 8022ed2:	681b      	ldr	r3, [r3, #0]
 8022ed4:	691b      	ldr	r3, [r3, #16]
 8022ed6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8022eda:	687b      	ldr	r3, [r7, #4]
 8022edc:	68da      	ldr	r2, [r3, #12]
 8022ede:	687b      	ldr	r3, [r7, #4]
 8022ee0:	681b      	ldr	r3, [r3, #0]
 8022ee2:	430a      	orrs	r2, r1
 8022ee4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8022ee6:	687b      	ldr	r3, [r7, #4]
 8022ee8:	689a      	ldr	r2, [r3, #8]
 8022eea:	687b      	ldr	r3, [r7, #4]
 8022eec:	691b      	ldr	r3, [r3, #16]
 8022eee:	431a      	orrs	r2, r3
 8022ef0:	687b      	ldr	r3, [r7, #4]
 8022ef2:	695b      	ldr	r3, [r3, #20]
 8022ef4:	4313      	orrs	r3, r2
 8022ef6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8022ef8:	687b      	ldr	r3, [r7, #4]
 8022efa:	681b      	ldr	r3, [r3, #0]
 8022efc:	68db      	ldr	r3, [r3, #12]
 8022efe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8022f02:	f023 030c 	bic.w	r3, r3, #12
 8022f06:	687a      	ldr	r2, [r7, #4]
 8022f08:	6812      	ldr	r2, [r2, #0]
 8022f0a:	68b9      	ldr	r1, [r7, #8]
 8022f0c:	430b      	orrs	r3, r1
 8022f0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8022f10:	687b      	ldr	r3, [r7, #4]
 8022f12:	681b      	ldr	r3, [r3, #0]
 8022f14:	695b      	ldr	r3, [r3, #20]
 8022f16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8022f1a:	687b      	ldr	r3, [r7, #4]
 8022f1c:	699a      	ldr	r2, [r3, #24]
 8022f1e:	687b      	ldr	r3, [r7, #4]
 8022f20:	681b      	ldr	r3, [r3, #0]
 8022f22:	430a      	orrs	r2, r1
 8022f24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8022f26:	687b      	ldr	r3, [r7, #4]
 8022f28:	681b      	ldr	r3, [r3, #0]
 8022f2a:	4a2c      	ldr	r2, [pc, #176]	; (8022fdc <UART_SetConfig+0x114>)
 8022f2c:	4293      	cmp	r3, r2
 8022f2e:	d103      	bne.n	8022f38 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8022f30:	f7fe fde4 	bl	8021afc <HAL_RCC_GetPCLK2Freq>
 8022f34:	60f8      	str	r0, [r7, #12]
 8022f36:	e002      	b.n	8022f3e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8022f38:	f7fe fdcc 	bl	8021ad4 <HAL_RCC_GetPCLK1Freq>
 8022f3c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8022f3e:	68fa      	ldr	r2, [r7, #12]
 8022f40:	4613      	mov	r3, r2
 8022f42:	009b      	lsls	r3, r3, #2
 8022f44:	4413      	add	r3, r2
 8022f46:	009a      	lsls	r2, r3, #2
 8022f48:	441a      	add	r2, r3
 8022f4a:	687b      	ldr	r3, [r7, #4]
 8022f4c:	685b      	ldr	r3, [r3, #4]
 8022f4e:	009b      	lsls	r3, r3, #2
 8022f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8022f54:	4a22      	ldr	r2, [pc, #136]	; (8022fe0 <UART_SetConfig+0x118>)
 8022f56:	fba2 2303 	umull	r2, r3, r2, r3
 8022f5a:	095b      	lsrs	r3, r3, #5
 8022f5c:	0119      	lsls	r1, r3, #4
 8022f5e:	68fa      	ldr	r2, [r7, #12]
 8022f60:	4613      	mov	r3, r2
 8022f62:	009b      	lsls	r3, r3, #2
 8022f64:	4413      	add	r3, r2
 8022f66:	009a      	lsls	r2, r3, #2
 8022f68:	441a      	add	r2, r3
 8022f6a:	687b      	ldr	r3, [r7, #4]
 8022f6c:	685b      	ldr	r3, [r3, #4]
 8022f6e:	009b      	lsls	r3, r3, #2
 8022f70:	fbb2 f2f3 	udiv	r2, r2, r3
 8022f74:	4b1a      	ldr	r3, [pc, #104]	; (8022fe0 <UART_SetConfig+0x118>)
 8022f76:	fba3 0302 	umull	r0, r3, r3, r2
 8022f7a:	095b      	lsrs	r3, r3, #5
 8022f7c:	2064      	movs	r0, #100	; 0x64
 8022f7e:	fb00 f303 	mul.w	r3, r0, r3
 8022f82:	1ad3      	subs	r3, r2, r3
 8022f84:	011b      	lsls	r3, r3, #4
 8022f86:	3332      	adds	r3, #50	; 0x32
 8022f88:	4a15      	ldr	r2, [pc, #84]	; (8022fe0 <UART_SetConfig+0x118>)
 8022f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8022f8e:	095b      	lsrs	r3, r3, #5
 8022f90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8022f94:	4419      	add	r1, r3
 8022f96:	68fa      	ldr	r2, [r7, #12]
 8022f98:	4613      	mov	r3, r2
 8022f9a:	009b      	lsls	r3, r3, #2
 8022f9c:	4413      	add	r3, r2
 8022f9e:	009a      	lsls	r2, r3, #2
 8022fa0:	441a      	add	r2, r3
 8022fa2:	687b      	ldr	r3, [r7, #4]
 8022fa4:	685b      	ldr	r3, [r3, #4]
 8022fa6:	009b      	lsls	r3, r3, #2
 8022fa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8022fac:	4b0c      	ldr	r3, [pc, #48]	; (8022fe0 <UART_SetConfig+0x118>)
 8022fae:	fba3 0302 	umull	r0, r3, r3, r2
 8022fb2:	095b      	lsrs	r3, r3, #5
 8022fb4:	2064      	movs	r0, #100	; 0x64
 8022fb6:	fb00 f303 	mul.w	r3, r0, r3
 8022fba:	1ad3      	subs	r3, r2, r3
 8022fbc:	011b      	lsls	r3, r3, #4
 8022fbe:	3332      	adds	r3, #50	; 0x32
 8022fc0:	4a07      	ldr	r2, [pc, #28]	; (8022fe0 <UART_SetConfig+0x118>)
 8022fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8022fc6:	095b      	lsrs	r3, r3, #5
 8022fc8:	f003 020f 	and.w	r2, r3, #15
 8022fcc:	687b      	ldr	r3, [r7, #4]
 8022fce:	681b      	ldr	r3, [r3, #0]
 8022fd0:	440a      	add	r2, r1
 8022fd2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8022fd4:	bf00      	nop
 8022fd6:	3710      	adds	r7, #16
 8022fd8:	46bd      	mov	sp, r7
 8022fda:	bd80      	pop	{r7, pc}
 8022fdc:	40013800 	.word	0x40013800
 8022fe0:	51eb851f 	.word	0x51eb851f

08022fe4 <__errno>:
 8022fe4:	4b01      	ldr	r3, [pc, #4]	; (8022fec <__errno+0x8>)
 8022fe6:	6818      	ldr	r0, [r3, #0]
 8022fe8:	4770      	bx	lr
 8022fea:	bf00      	nop
 8022fec:	20000100 	.word	0x20000100

08022ff0 <__libc_init_array>:
 8022ff0:	b570      	push	{r4, r5, r6, lr}
 8022ff2:	2600      	movs	r6, #0
 8022ff4:	4d0c      	ldr	r5, [pc, #48]	; (8023028 <__libc_init_array+0x38>)
 8022ff6:	4c0d      	ldr	r4, [pc, #52]	; (802302c <__libc_init_array+0x3c>)
 8022ff8:	1b64      	subs	r4, r4, r5
 8022ffa:	10a4      	asrs	r4, r4, #2
 8022ffc:	42a6      	cmp	r6, r4
 8022ffe:	d109      	bne.n	8023014 <__libc_init_array+0x24>
 8023000:	f000 fc5c 	bl	80238bc <_init>
 8023004:	2600      	movs	r6, #0
 8023006:	4d0a      	ldr	r5, [pc, #40]	; (8023030 <__libc_init_array+0x40>)
 8023008:	4c0a      	ldr	r4, [pc, #40]	; (8023034 <__libc_init_array+0x44>)
 802300a:	1b64      	subs	r4, r4, r5
 802300c:	10a4      	asrs	r4, r4, #2
 802300e:	42a6      	cmp	r6, r4
 8023010:	d105      	bne.n	802301e <__libc_init_array+0x2e>
 8023012:	bd70      	pop	{r4, r5, r6, pc}
 8023014:	f855 3b04 	ldr.w	r3, [r5], #4
 8023018:	4798      	blx	r3
 802301a:	3601      	adds	r6, #1
 802301c:	e7ee      	b.n	8022ffc <__libc_init_array+0xc>
 802301e:	f855 3b04 	ldr.w	r3, [r5], #4
 8023022:	4798      	blx	r3
 8023024:	3601      	adds	r6, #1
 8023026:	e7f2      	b.n	802300e <__libc_init_array+0x1e>
 8023028:	08023fc8 	.word	0x08023fc8
 802302c:	08023fc8 	.word	0x08023fc8
 8023030:	08023fc8 	.word	0x08023fc8
 8023034:	08023fcc 	.word	0x08023fcc

08023038 <memcpy>:
 8023038:	440a      	add	r2, r1
 802303a:	4291      	cmp	r1, r2
 802303c:	f100 33ff 	add.w	r3, r0, #4294967295
 8023040:	d100      	bne.n	8023044 <memcpy+0xc>
 8023042:	4770      	bx	lr
 8023044:	b510      	push	{r4, lr}
 8023046:	f811 4b01 	ldrb.w	r4, [r1], #1
 802304a:	4291      	cmp	r1, r2
 802304c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023050:	d1f9      	bne.n	8023046 <memcpy+0xe>
 8023052:	bd10      	pop	{r4, pc}

08023054 <memset>:
 8023054:	4603      	mov	r3, r0
 8023056:	4402      	add	r2, r0
 8023058:	4293      	cmp	r3, r2
 802305a:	d100      	bne.n	802305e <memset+0xa>
 802305c:	4770      	bx	lr
 802305e:	f803 1b01 	strb.w	r1, [r3], #1
 8023062:	e7f9      	b.n	8023058 <memset+0x4>

08023064 <siprintf>:
 8023064:	b40e      	push	{r1, r2, r3}
 8023066:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802306a:	b500      	push	{lr}
 802306c:	b09c      	sub	sp, #112	; 0x70
 802306e:	ab1d      	add	r3, sp, #116	; 0x74
 8023070:	9002      	str	r0, [sp, #8]
 8023072:	9006      	str	r0, [sp, #24]
 8023074:	9107      	str	r1, [sp, #28]
 8023076:	9104      	str	r1, [sp, #16]
 8023078:	4808      	ldr	r0, [pc, #32]	; (802309c <siprintf+0x38>)
 802307a:	4909      	ldr	r1, [pc, #36]	; (80230a0 <siprintf+0x3c>)
 802307c:	f853 2b04 	ldr.w	r2, [r3], #4
 8023080:	9105      	str	r1, [sp, #20]
 8023082:	6800      	ldr	r0, [r0, #0]
 8023084:	a902      	add	r1, sp, #8
 8023086:	9301      	str	r3, [sp, #4]
 8023088:	f000 f868 	bl	802315c <_svfiprintf_r>
 802308c:	2200      	movs	r2, #0
 802308e:	9b02      	ldr	r3, [sp, #8]
 8023090:	701a      	strb	r2, [r3, #0]
 8023092:	b01c      	add	sp, #112	; 0x70
 8023094:	f85d eb04 	ldr.w	lr, [sp], #4
 8023098:	b003      	add	sp, #12
 802309a:	4770      	bx	lr
 802309c:	20000100 	.word	0x20000100
 80230a0:	ffff0208 	.word	0xffff0208

080230a4 <__ssputs_r>:
 80230a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80230a8:	688e      	ldr	r6, [r1, #8]
 80230aa:	4682      	mov	sl, r0
 80230ac:	429e      	cmp	r6, r3
 80230ae:	460c      	mov	r4, r1
 80230b0:	4690      	mov	r8, r2
 80230b2:	461f      	mov	r7, r3
 80230b4:	d838      	bhi.n	8023128 <__ssputs_r+0x84>
 80230b6:	898a      	ldrh	r2, [r1, #12]
 80230b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80230bc:	d032      	beq.n	8023124 <__ssputs_r+0x80>
 80230be:	6825      	ldr	r5, [r4, #0]
 80230c0:	6909      	ldr	r1, [r1, #16]
 80230c2:	3301      	adds	r3, #1
 80230c4:	eba5 0901 	sub.w	r9, r5, r1
 80230c8:	6965      	ldr	r5, [r4, #20]
 80230ca:	444b      	add	r3, r9
 80230cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80230d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80230d4:	106d      	asrs	r5, r5, #1
 80230d6:	429d      	cmp	r5, r3
 80230d8:	bf38      	it	cc
 80230da:	461d      	movcc	r5, r3
 80230dc:	0553      	lsls	r3, r2, #21
 80230de:	d531      	bpl.n	8023144 <__ssputs_r+0xa0>
 80230e0:	4629      	mov	r1, r5
 80230e2:	f000 fb45 	bl	8023770 <_malloc_r>
 80230e6:	4606      	mov	r6, r0
 80230e8:	b950      	cbnz	r0, 8023100 <__ssputs_r+0x5c>
 80230ea:	230c      	movs	r3, #12
 80230ec:	f04f 30ff 	mov.w	r0, #4294967295
 80230f0:	f8ca 3000 	str.w	r3, [sl]
 80230f4:	89a3      	ldrh	r3, [r4, #12]
 80230f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80230fa:	81a3      	strh	r3, [r4, #12]
 80230fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023100:	464a      	mov	r2, r9
 8023102:	6921      	ldr	r1, [r4, #16]
 8023104:	f7ff ff98 	bl	8023038 <memcpy>
 8023108:	89a3      	ldrh	r3, [r4, #12]
 802310a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802310e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023112:	81a3      	strh	r3, [r4, #12]
 8023114:	6126      	str	r6, [r4, #16]
 8023116:	444e      	add	r6, r9
 8023118:	6026      	str	r6, [r4, #0]
 802311a:	463e      	mov	r6, r7
 802311c:	6165      	str	r5, [r4, #20]
 802311e:	eba5 0509 	sub.w	r5, r5, r9
 8023122:	60a5      	str	r5, [r4, #8]
 8023124:	42be      	cmp	r6, r7
 8023126:	d900      	bls.n	802312a <__ssputs_r+0x86>
 8023128:	463e      	mov	r6, r7
 802312a:	4632      	mov	r2, r6
 802312c:	4641      	mov	r1, r8
 802312e:	6820      	ldr	r0, [r4, #0]
 8023130:	f000 fab8 	bl	80236a4 <memmove>
 8023134:	68a3      	ldr	r3, [r4, #8]
 8023136:	6822      	ldr	r2, [r4, #0]
 8023138:	1b9b      	subs	r3, r3, r6
 802313a:	4432      	add	r2, r6
 802313c:	2000      	movs	r0, #0
 802313e:	60a3      	str	r3, [r4, #8]
 8023140:	6022      	str	r2, [r4, #0]
 8023142:	e7db      	b.n	80230fc <__ssputs_r+0x58>
 8023144:	462a      	mov	r2, r5
 8023146:	f000 fb6d 	bl	8023824 <_realloc_r>
 802314a:	4606      	mov	r6, r0
 802314c:	2800      	cmp	r0, #0
 802314e:	d1e1      	bne.n	8023114 <__ssputs_r+0x70>
 8023150:	4650      	mov	r0, sl
 8023152:	6921      	ldr	r1, [r4, #16]
 8023154:	f000 fac0 	bl	80236d8 <_free_r>
 8023158:	e7c7      	b.n	80230ea <__ssputs_r+0x46>
	...

0802315c <_svfiprintf_r>:
 802315c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023160:	4698      	mov	r8, r3
 8023162:	898b      	ldrh	r3, [r1, #12]
 8023164:	4607      	mov	r7, r0
 8023166:	061b      	lsls	r3, r3, #24
 8023168:	460d      	mov	r5, r1
 802316a:	4614      	mov	r4, r2
 802316c:	b09d      	sub	sp, #116	; 0x74
 802316e:	d50e      	bpl.n	802318e <_svfiprintf_r+0x32>
 8023170:	690b      	ldr	r3, [r1, #16]
 8023172:	b963      	cbnz	r3, 802318e <_svfiprintf_r+0x32>
 8023174:	2140      	movs	r1, #64	; 0x40
 8023176:	f000 fafb 	bl	8023770 <_malloc_r>
 802317a:	6028      	str	r0, [r5, #0]
 802317c:	6128      	str	r0, [r5, #16]
 802317e:	b920      	cbnz	r0, 802318a <_svfiprintf_r+0x2e>
 8023180:	230c      	movs	r3, #12
 8023182:	603b      	str	r3, [r7, #0]
 8023184:	f04f 30ff 	mov.w	r0, #4294967295
 8023188:	e0d1      	b.n	802332e <_svfiprintf_r+0x1d2>
 802318a:	2340      	movs	r3, #64	; 0x40
 802318c:	616b      	str	r3, [r5, #20]
 802318e:	2300      	movs	r3, #0
 8023190:	9309      	str	r3, [sp, #36]	; 0x24
 8023192:	2320      	movs	r3, #32
 8023194:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023198:	2330      	movs	r3, #48	; 0x30
 802319a:	f04f 0901 	mov.w	r9, #1
 802319e:	f8cd 800c 	str.w	r8, [sp, #12]
 80231a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8023348 <_svfiprintf_r+0x1ec>
 80231a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80231aa:	4623      	mov	r3, r4
 80231ac:	469a      	mov	sl, r3
 80231ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80231b2:	b10a      	cbz	r2, 80231b8 <_svfiprintf_r+0x5c>
 80231b4:	2a25      	cmp	r2, #37	; 0x25
 80231b6:	d1f9      	bne.n	80231ac <_svfiprintf_r+0x50>
 80231b8:	ebba 0b04 	subs.w	fp, sl, r4
 80231bc:	d00b      	beq.n	80231d6 <_svfiprintf_r+0x7a>
 80231be:	465b      	mov	r3, fp
 80231c0:	4622      	mov	r2, r4
 80231c2:	4629      	mov	r1, r5
 80231c4:	4638      	mov	r0, r7
 80231c6:	f7ff ff6d 	bl	80230a4 <__ssputs_r>
 80231ca:	3001      	adds	r0, #1
 80231cc:	f000 80aa 	beq.w	8023324 <_svfiprintf_r+0x1c8>
 80231d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80231d2:	445a      	add	r2, fp
 80231d4:	9209      	str	r2, [sp, #36]	; 0x24
 80231d6:	f89a 3000 	ldrb.w	r3, [sl]
 80231da:	2b00      	cmp	r3, #0
 80231dc:	f000 80a2 	beq.w	8023324 <_svfiprintf_r+0x1c8>
 80231e0:	2300      	movs	r3, #0
 80231e2:	f04f 32ff 	mov.w	r2, #4294967295
 80231e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80231ea:	f10a 0a01 	add.w	sl, sl, #1
 80231ee:	9304      	str	r3, [sp, #16]
 80231f0:	9307      	str	r3, [sp, #28]
 80231f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80231f6:	931a      	str	r3, [sp, #104]	; 0x68
 80231f8:	4654      	mov	r4, sl
 80231fa:	2205      	movs	r2, #5
 80231fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023200:	4851      	ldr	r0, [pc, #324]	; (8023348 <_svfiprintf_r+0x1ec>)
 8023202:	f000 fa41 	bl	8023688 <memchr>
 8023206:	9a04      	ldr	r2, [sp, #16]
 8023208:	b9d8      	cbnz	r0, 8023242 <_svfiprintf_r+0xe6>
 802320a:	06d0      	lsls	r0, r2, #27
 802320c:	bf44      	itt	mi
 802320e:	2320      	movmi	r3, #32
 8023210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023214:	0711      	lsls	r1, r2, #28
 8023216:	bf44      	itt	mi
 8023218:	232b      	movmi	r3, #43	; 0x2b
 802321a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802321e:	f89a 3000 	ldrb.w	r3, [sl]
 8023222:	2b2a      	cmp	r3, #42	; 0x2a
 8023224:	d015      	beq.n	8023252 <_svfiprintf_r+0xf6>
 8023226:	4654      	mov	r4, sl
 8023228:	2000      	movs	r0, #0
 802322a:	f04f 0c0a 	mov.w	ip, #10
 802322e:	9a07      	ldr	r2, [sp, #28]
 8023230:	4621      	mov	r1, r4
 8023232:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023236:	3b30      	subs	r3, #48	; 0x30
 8023238:	2b09      	cmp	r3, #9
 802323a:	d94e      	bls.n	80232da <_svfiprintf_r+0x17e>
 802323c:	b1b0      	cbz	r0, 802326c <_svfiprintf_r+0x110>
 802323e:	9207      	str	r2, [sp, #28]
 8023240:	e014      	b.n	802326c <_svfiprintf_r+0x110>
 8023242:	eba0 0308 	sub.w	r3, r0, r8
 8023246:	fa09 f303 	lsl.w	r3, r9, r3
 802324a:	4313      	orrs	r3, r2
 802324c:	46a2      	mov	sl, r4
 802324e:	9304      	str	r3, [sp, #16]
 8023250:	e7d2      	b.n	80231f8 <_svfiprintf_r+0x9c>
 8023252:	9b03      	ldr	r3, [sp, #12]
 8023254:	1d19      	adds	r1, r3, #4
 8023256:	681b      	ldr	r3, [r3, #0]
 8023258:	9103      	str	r1, [sp, #12]
 802325a:	2b00      	cmp	r3, #0
 802325c:	bfbb      	ittet	lt
 802325e:	425b      	neglt	r3, r3
 8023260:	f042 0202 	orrlt.w	r2, r2, #2
 8023264:	9307      	strge	r3, [sp, #28]
 8023266:	9307      	strlt	r3, [sp, #28]
 8023268:	bfb8      	it	lt
 802326a:	9204      	strlt	r2, [sp, #16]
 802326c:	7823      	ldrb	r3, [r4, #0]
 802326e:	2b2e      	cmp	r3, #46	; 0x2e
 8023270:	d10c      	bne.n	802328c <_svfiprintf_r+0x130>
 8023272:	7863      	ldrb	r3, [r4, #1]
 8023274:	2b2a      	cmp	r3, #42	; 0x2a
 8023276:	d135      	bne.n	80232e4 <_svfiprintf_r+0x188>
 8023278:	9b03      	ldr	r3, [sp, #12]
 802327a:	3402      	adds	r4, #2
 802327c:	1d1a      	adds	r2, r3, #4
 802327e:	681b      	ldr	r3, [r3, #0]
 8023280:	9203      	str	r2, [sp, #12]
 8023282:	2b00      	cmp	r3, #0
 8023284:	bfb8      	it	lt
 8023286:	f04f 33ff 	movlt.w	r3, #4294967295
 802328a:	9305      	str	r3, [sp, #20]
 802328c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8023358 <_svfiprintf_r+0x1fc>
 8023290:	2203      	movs	r2, #3
 8023292:	4650      	mov	r0, sl
 8023294:	7821      	ldrb	r1, [r4, #0]
 8023296:	f000 f9f7 	bl	8023688 <memchr>
 802329a:	b140      	cbz	r0, 80232ae <_svfiprintf_r+0x152>
 802329c:	2340      	movs	r3, #64	; 0x40
 802329e:	eba0 000a 	sub.w	r0, r0, sl
 80232a2:	fa03 f000 	lsl.w	r0, r3, r0
 80232a6:	9b04      	ldr	r3, [sp, #16]
 80232a8:	3401      	adds	r4, #1
 80232aa:	4303      	orrs	r3, r0
 80232ac:	9304      	str	r3, [sp, #16]
 80232ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80232b2:	2206      	movs	r2, #6
 80232b4:	4825      	ldr	r0, [pc, #148]	; (802334c <_svfiprintf_r+0x1f0>)
 80232b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80232ba:	f000 f9e5 	bl	8023688 <memchr>
 80232be:	2800      	cmp	r0, #0
 80232c0:	d038      	beq.n	8023334 <_svfiprintf_r+0x1d8>
 80232c2:	4b23      	ldr	r3, [pc, #140]	; (8023350 <_svfiprintf_r+0x1f4>)
 80232c4:	bb1b      	cbnz	r3, 802330e <_svfiprintf_r+0x1b2>
 80232c6:	9b03      	ldr	r3, [sp, #12]
 80232c8:	3307      	adds	r3, #7
 80232ca:	f023 0307 	bic.w	r3, r3, #7
 80232ce:	3308      	adds	r3, #8
 80232d0:	9303      	str	r3, [sp, #12]
 80232d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80232d4:	4433      	add	r3, r6
 80232d6:	9309      	str	r3, [sp, #36]	; 0x24
 80232d8:	e767      	b.n	80231aa <_svfiprintf_r+0x4e>
 80232da:	460c      	mov	r4, r1
 80232dc:	2001      	movs	r0, #1
 80232de:	fb0c 3202 	mla	r2, ip, r2, r3
 80232e2:	e7a5      	b.n	8023230 <_svfiprintf_r+0xd4>
 80232e4:	2300      	movs	r3, #0
 80232e6:	f04f 0c0a 	mov.w	ip, #10
 80232ea:	4619      	mov	r1, r3
 80232ec:	3401      	adds	r4, #1
 80232ee:	9305      	str	r3, [sp, #20]
 80232f0:	4620      	mov	r0, r4
 80232f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80232f6:	3a30      	subs	r2, #48	; 0x30
 80232f8:	2a09      	cmp	r2, #9
 80232fa:	d903      	bls.n	8023304 <_svfiprintf_r+0x1a8>
 80232fc:	2b00      	cmp	r3, #0
 80232fe:	d0c5      	beq.n	802328c <_svfiprintf_r+0x130>
 8023300:	9105      	str	r1, [sp, #20]
 8023302:	e7c3      	b.n	802328c <_svfiprintf_r+0x130>
 8023304:	4604      	mov	r4, r0
 8023306:	2301      	movs	r3, #1
 8023308:	fb0c 2101 	mla	r1, ip, r1, r2
 802330c:	e7f0      	b.n	80232f0 <_svfiprintf_r+0x194>
 802330e:	ab03      	add	r3, sp, #12
 8023310:	9300      	str	r3, [sp, #0]
 8023312:	462a      	mov	r2, r5
 8023314:	4638      	mov	r0, r7
 8023316:	4b0f      	ldr	r3, [pc, #60]	; (8023354 <_svfiprintf_r+0x1f8>)
 8023318:	a904      	add	r1, sp, #16
 802331a:	f3af 8000 	nop.w
 802331e:	1c42      	adds	r2, r0, #1
 8023320:	4606      	mov	r6, r0
 8023322:	d1d6      	bne.n	80232d2 <_svfiprintf_r+0x176>
 8023324:	89ab      	ldrh	r3, [r5, #12]
 8023326:	065b      	lsls	r3, r3, #25
 8023328:	f53f af2c 	bmi.w	8023184 <_svfiprintf_r+0x28>
 802332c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802332e:	b01d      	add	sp, #116	; 0x74
 8023330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023334:	ab03      	add	r3, sp, #12
 8023336:	9300      	str	r3, [sp, #0]
 8023338:	462a      	mov	r2, r5
 802333a:	4638      	mov	r0, r7
 802333c:	4b05      	ldr	r3, [pc, #20]	; (8023354 <_svfiprintf_r+0x1f8>)
 802333e:	a904      	add	r1, sp, #16
 8023340:	f000 f87c 	bl	802343c <_printf_i>
 8023344:	e7eb      	b.n	802331e <_svfiprintf_r+0x1c2>
 8023346:	bf00      	nop
 8023348:	08023f94 	.word	0x08023f94
 802334c:	08023f9e 	.word	0x08023f9e
 8023350:	00000000 	.word	0x00000000
 8023354:	080230a5 	.word	0x080230a5
 8023358:	08023f9a 	.word	0x08023f9a

0802335c <_printf_common>:
 802335c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023360:	4616      	mov	r6, r2
 8023362:	4699      	mov	r9, r3
 8023364:	688a      	ldr	r2, [r1, #8]
 8023366:	690b      	ldr	r3, [r1, #16]
 8023368:	4607      	mov	r7, r0
 802336a:	4293      	cmp	r3, r2
 802336c:	bfb8      	it	lt
 802336e:	4613      	movlt	r3, r2
 8023370:	6033      	str	r3, [r6, #0]
 8023372:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8023376:	460c      	mov	r4, r1
 8023378:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802337c:	b10a      	cbz	r2, 8023382 <_printf_common+0x26>
 802337e:	3301      	adds	r3, #1
 8023380:	6033      	str	r3, [r6, #0]
 8023382:	6823      	ldr	r3, [r4, #0]
 8023384:	0699      	lsls	r1, r3, #26
 8023386:	bf42      	ittt	mi
 8023388:	6833      	ldrmi	r3, [r6, #0]
 802338a:	3302      	addmi	r3, #2
 802338c:	6033      	strmi	r3, [r6, #0]
 802338e:	6825      	ldr	r5, [r4, #0]
 8023390:	f015 0506 	ands.w	r5, r5, #6
 8023394:	d106      	bne.n	80233a4 <_printf_common+0x48>
 8023396:	f104 0a19 	add.w	sl, r4, #25
 802339a:	68e3      	ldr	r3, [r4, #12]
 802339c:	6832      	ldr	r2, [r6, #0]
 802339e:	1a9b      	subs	r3, r3, r2
 80233a0:	42ab      	cmp	r3, r5
 80233a2:	dc28      	bgt.n	80233f6 <_printf_common+0x9a>
 80233a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80233a8:	1e13      	subs	r3, r2, #0
 80233aa:	6822      	ldr	r2, [r4, #0]
 80233ac:	bf18      	it	ne
 80233ae:	2301      	movne	r3, #1
 80233b0:	0692      	lsls	r2, r2, #26
 80233b2:	d42d      	bmi.n	8023410 <_printf_common+0xb4>
 80233b4:	4649      	mov	r1, r9
 80233b6:	4638      	mov	r0, r7
 80233b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80233bc:	47c0      	blx	r8
 80233be:	3001      	adds	r0, #1
 80233c0:	d020      	beq.n	8023404 <_printf_common+0xa8>
 80233c2:	6823      	ldr	r3, [r4, #0]
 80233c4:	68e5      	ldr	r5, [r4, #12]
 80233c6:	f003 0306 	and.w	r3, r3, #6
 80233ca:	2b04      	cmp	r3, #4
 80233cc:	bf18      	it	ne
 80233ce:	2500      	movne	r5, #0
 80233d0:	6832      	ldr	r2, [r6, #0]
 80233d2:	f04f 0600 	mov.w	r6, #0
 80233d6:	68a3      	ldr	r3, [r4, #8]
 80233d8:	bf08      	it	eq
 80233da:	1aad      	subeq	r5, r5, r2
 80233dc:	6922      	ldr	r2, [r4, #16]
 80233de:	bf08      	it	eq
 80233e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80233e4:	4293      	cmp	r3, r2
 80233e6:	bfc4      	itt	gt
 80233e8:	1a9b      	subgt	r3, r3, r2
 80233ea:	18ed      	addgt	r5, r5, r3
 80233ec:	341a      	adds	r4, #26
 80233ee:	42b5      	cmp	r5, r6
 80233f0:	d11a      	bne.n	8023428 <_printf_common+0xcc>
 80233f2:	2000      	movs	r0, #0
 80233f4:	e008      	b.n	8023408 <_printf_common+0xac>
 80233f6:	2301      	movs	r3, #1
 80233f8:	4652      	mov	r2, sl
 80233fa:	4649      	mov	r1, r9
 80233fc:	4638      	mov	r0, r7
 80233fe:	47c0      	blx	r8
 8023400:	3001      	adds	r0, #1
 8023402:	d103      	bne.n	802340c <_printf_common+0xb0>
 8023404:	f04f 30ff 	mov.w	r0, #4294967295
 8023408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802340c:	3501      	adds	r5, #1
 802340e:	e7c4      	b.n	802339a <_printf_common+0x3e>
 8023410:	2030      	movs	r0, #48	; 0x30
 8023412:	18e1      	adds	r1, r4, r3
 8023414:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8023418:	1c5a      	adds	r2, r3, #1
 802341a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802341e:	4422      	add	r2, r4
 8023420:	3302      	adds	r3, #2
 8023422:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023426:	e7c5      	b.n	80233b4 <_printf_common+0x58>
 8023428:	2301      	movs	r3, #1
 802342a:	4622      	mov	r2, r4
 802342c:	4649      	mov	r1, r9
 802342e:	4638      	mov	r0, r7
 8023430:	47c0      	blx	r8
 8023432:	3001      	adds	r0, #1
 8023434:	d0e6      	beq.n	8023404 <_printf_common+0xa8>
 8023436:	3601      	adds	r6, #1
 8023438:	e7d9      	b.n	80233ee <_printf_common+0x92>
	...

0802343c <_printf_i>:
 802343c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023440:	460c      	mov	r4, r1
 8023442:	7e27      	ldrb	r7, [r4, #24]
 8023444:	4691      	mov	r9, r2
 8023446:	2f78      	cmp	r7, #120	; 0x78
 8023448:	4680      	mov	r8, r0
 802344a:	469a      	mov	sl, r3
 802344c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802344e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023452:	d807      	bhi.n	8023464 <_printf_i+0x28>
 8023454:	2f62      	cmp	r7, #98	; 0x62
 8023456:	d80a      	bhi.n	802346e <_printf_i+0x32>
 8023458:	2f00      	cmp	r7, #0
 802345a:	f000 80d9 	beq.w	8023610 <_printf_i+0x1d4>
 802345e:	2f58      	cmp	r7, #88	; 0x58
 8023460:	f000 80a4 	beq.w	80235ac <_printf_i+0x170>
 8023464:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8023468:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802346c:	e03a      	b.n	80234e4 <_printf_i+0xa8>
 802346e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8023472:	2b15      	cmp	r3, #21
 8023474:	d8f6      	bhi.n	8023464 <_printf_i+0x28>
 8023476:	a001      	add	r0, pc, #4	; (adr r0, 802347c <_printf_i+0x40>)
 8023478:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802347c:	080234d5 	.word	0x080234d5
 8023480:	080234e9 	.word	0x080234e9
 8023484:	08023465 	.word	0x08023465
 8023488:	08023465 	.word	0x08023465
 802348c:	08023465 	.word	0x08023465
 8023490:	08023465 	.word	0x08023465
 8023494:	080234e9 	.word	0x080234e9
 8023498:	08023465 	.word	0x08023465
 802349c:	08023465 	.word	0x08023465
 80234a0:	08023465 	.word	0x08023465
 80234a4:	08023465 	.word	0x08023465
 80234a8:	080235f7 	.word	0x080235f7
 80234ac:	08023519 	.word	0x08023519
 80234b0:	080235d9 	.word	0x080235d9
 80234b4:	08023465 	.word	0x08023465
 80234b8:	08023465 	.word	0x08023465
 80234bc:	08023619 	.word	0x08023619
 80234c0:	08023465 	.word	0x08023465
 80234c4:	08023519 	.word	0x08023519
 80234c8:	08023465 	.word	0x08023465
 80234cc:	08023465 	.word	0x08023465
 80234d0:	080235e1 	.word	0x080235e1
 80234d4:	680b      	ldr	r3, [r1, #0]
 80234d6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80234da:	1d1a      	adds	r2, r3, #4
 80234dc:	681b      	ldr	r3, [r3, #0]
 80234de:	600a      	str	r2, [r1, #0]
 80234e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80234e4:	2301      	movs	r3, #1
 80234e6:	e0a4      	b.n	8023632 <_printf_i+0x1f6>
 80234e8:	6825      	ldr	r5, [r4, #0]
 80234ea:	6808      	ldr	r0, [r1, #0]
 80234ec:	062e      	lsls	r6, r5, #24
 80234ee:	f100 0304 	add.w	r3, r0, #4
 80234f2:	d50a      	bpl.n	802350a <_printf_i+0xce>
 80234f4:	6805      	ldr	r5, [r0, #0]
 80234f6:	600b      	str	r3, [r1, #0]
 80234f8:	2d00      	cmp	r5, #0
 80234fa:	da03      	bge.n	8023504 <_printf_i+0xc8>
 80234fc:	232d      	movs	r3, #45	; 0x2d
 80234fe:	426d      	negs	r5, r5
 8023500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023504:	230a      	movs	r3, #10
 8023506:	485e      	ldr	r0, [pc, #376]	; (8023680 <_printf_i+0x244>)
 8023508:	e019      	b.n	802353e <_printf_i+0x102>
 802350a:	f015 0f40 	tst.w	r5, #64	; 0x40
 802350e:	6805      	ldr	r5, [r0, #0]
 8023510:	600b      	str	r3, [r1, #0]
 8023512:	bf18      	it	ne
 8023514:	b22d      	sxthne	r5, r5
 8023516:	e7ef      	b.n	80234f8 <_printf_i+0xbc>
 8023518:	680b      	ldr	r3, [r1, #0]
 802351a:	6825      	ldr	r5, [r4, #0]
 802351c:	1d18      	adds	r0, r3, #4
 802351e:	6008      	str	r0, [r1, #0]
 8023520:	0628      	lsls	r0, r5, #24
 8023522:	d501      	bpl.n	8023528 <_printf_i+0xec>
 8023524:	681d      	ldr	r5, [r3, #0]
 8023526:	e002      	b.n	802352e <_printf_i+0xf2>
 8023528:	0669      	lsls	r1, r5, #25
 802352a:	d5fb      	bpl.n	8023524 <_printf_i+0xe8>
 802352c:	881d      	ldrh	r5, [r3, #0]
 802352e:	2f6f      	cmp	r7, #111	; 0x6f
 8023530:	bf0c      	ite	eq
 8023532:	2308      	moveq	r3, #8
 8023534:	230a      	movne	r3, #10
 8023536:	4852      	ldr	r0, [pc, #328]	; (8023680 <_printf_i+0x244>)
 8023538:	2100      	movs	r1, #0
 802353a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802353e:	6866      	ldr	r6, [r4, #4]
 8023540:	2e00      	cmp	r6, #0
 8023542:	bfa8      	it	ge
 8023544:	6821      	ldrge	r1, [r4, #0]
 8023546:	60a6      	str	r6, [r4, #8]
 8023548:	bfa4      	itt	ge
 802354a:	f021 0104 	bicge.w	r1, r1, #4
 802354e:	6021      	strge	r1, [r4, #0]
 8023550:	b90d      	cbnz	r5, 8023556 <_printf_i+0x11a>
 8023552:	2e00      	cmp	r6, #0
 8023554:	d04d      	beq.n	80235f2 <_printf_i+0x1b6>
 8023556:	4616      	mov	r6, r2
 8023558:	fbb5 f1f3 	udiv	r1, r5, r3
 802355c:	fb03 5711 	mls	r7, r3, r1, r5
 8023560:	5dc7      	ldrb	r7, [r0, r7]
 8023562:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023566:	462f      	mov	r7, r5
 8023568:	42bb      	cmp	r3, r7
 802356a:	460d      	mov	r5, r1
 802356c:	d9f4      	bls.n	8023558 <_printf_i+0x11c>
 802356e:	2b08      	cmp	r3, #8
 8023570:	d10b      	bne.n	802358a <_printf_i+0x14e>
 8023572:	6823      	ldr	r3, [r4, #0]
 8023574:	07df      	lsls	r7, r3, #31
 8023576:	d508      	bpl.n	802358a <_printf_i+0x14e>
 8023578:	6923      	ldr	r3, [r4, #16]
 802357a:	6861      	ldr	r1, [r4, #4]
 802357c:	4299      	cmp	r1, r3
 802357e:	bfde      	ittt	le
 8023580:	2330      	movle	r3, #48	; 0x30
 8023582:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023586:	f106 36ff 	addle.w	r6, r6, #4294967295
 802358a:	1b92      	subs	r2, r2, r6
 802358c:	6122      	str	r2, [r4, #16]
 802358e:	464b      	mov	r3, r9
 8023590:	4621      	mov	r1, r4
 8023592:	4640      	mov	r0, r8
 8023594:	f8cd a000 	str.w	sl, [sp]
 8023598:	aa03      	add	r2, sp, #12
 802359a:	f7ff fedf 	bl	802335c <_printf_common>
 802359e:	3001      	adds	r0, #1
 80235a0:	d14c      	bne.n	802363c <_printf_i+0x200>
 80235a2:	f04f 30ff 	mov.w	r0, #4294967295
 80235a6:	b004      	add	sp, #16
 80235a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80235ac:	4834      	ldr	r0, [pc, #208]	; (8023680 <_printf_i+0x244>)
 80235ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80235b2:	680e      	ldr	r6, [r1, #0]
 80235b4:	6823      	ldr	r3, [r4, #0]
 80235b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80235ba:	061f      	lsls	r7, r3, #24
 80235bc:	600e      	str	r6, [r1, #0]
 80235be:	d514      	bpl.n	80235ea <_printf_i+0x1ae>
 80235c0:	07d9      	lsls	r1, r3, #31
 80235c2:	bf44      	itt	mi
 80235c4:	f043 0320 	orrmi.w	r3, r3, #32
 80235c8:	6023      	strmi	r3, [r4, #0]
 80235ca:	b91d      	cbnz	r5, 80235d4 <_printf_i+0x198>
 80235cc:	6823      	ldr	r3, [r4, #0]
 80235ce:	f023 0320 	bic.w	r3, r3, #32
 80235d2:	6023      	str	r3, [r4, #0]
 80235d4:	2310      	movs	r3, #16
 80235d6:	e7af      	b.n	8023538 <_printf_i+0xfc>
 80235d8:	6823      	ldr	r3, [r4, #0]
 80235da:	f043 0320 	orr.w	r3, r3, #32
 80235de:	6023      	str	r3, [r4, #0]
 80235e0:	2378      	movs	r3, #120	; 0x78
 80235e2:	4828      	ldr	r0, [pc, #160]	; (8023684 <_printf_i+0x248>)
 80235e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80235e8:	e7e3      	b.n	80235b2 <_printf_i+0x176>
 80235ea:	065e      	lsls	r6, r3, #25
 80235ec:	bf48      	it	mi
 80235ee:	b2ad      	uxthmi	r5, r5
 80235f0:	e7e6      	b.n	80235c0 <_printf_i+0x184>
 80235f2:	4616      	mov	r6, r2
 80235f4:	e7bb      	b.n	802356e <_printf_i+0x132>
 80235f6:	680b      	ldr	r3, [r1, #0]
 80235f8:	6826      	ldr	r6, [r4, #0]
 80235fa:	1d1d      	adds	r5, r3, #4
 80235fc:	6960      	ldr	r0, [r4, #20]
 80235fe:	600d      	str	r5, [r1, #0]
 8023600:	0635      	lsls	r5, r6, #24
 8023602:	681b      	ldr	r3, [r3, #0]
 8023604:	d501      	bpl.n	802360a <_printf_i+0x1ce>
 8023606:	6018      	str	r0, [r3, #0]
 8023608:	e002      	b.n	8023610 <_printf_i+0x1d4>
 802360a:	0671      	lsls	r1, r6, #25
 802360c:	d5fb      	bpl.n	8023606 <_printf_i+0x1ca>
 802360e:	8018      	strh	r0, [r3, #0]
 8023610:	2300      	movs	r3, #0
 8023612:	4616      	mov	r6, r2
 8023614:	6123      	str	r3, [r4, #16]
 8023616:	e7ba      	b.n	802358e <_printf_i+0x152>
 8023618:	680b      	ldr	r3, [r1, #0]
 802361a:	1d1a      	adds	r2, r3, #4
 802361c:	600a      	str	r2, [r1, #0]
 802361e:	681e      	ldr	r6, [r3, #0]
 8023620:	2100      	movs	r1, #0
 8023622:	4630      	mov	r0, r6
 8023624:	6862      	ldr	r2, [r4, #4]
 8023626:	f000 f82f 	bl	8023688 <memchr>
 802362a:	b108      	cbz	r0, 8023630 <_printf_i+0x1f4>
 802362c:	1b80      	subs	r0, r0, r6
 802362e:	6060      	str	r0, [r4, #4]
 8023630:	6863      	ldr	r3, [r4, #4]
 8023632:	6123      	str	r3, [r4, #16]
 8023634:	2300      	movs	r3, #0
 8023636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802363a:	e7a8      	b.n	802358e <_printf_i+0x152>
 802363c:	4632      	mov	r2, r6
 802363e:	4649      	mov	r1, r9
 8023640:	4640      	mov	r0, r8
 8023642:	6923      	ldr	r3, [r4, #16]
 8023644:	47d0      	blx	sl
 8023646:	3001      	adds	r0, #1
 8023648:	d0ab      	beq.n	80235a2 <_printf_i+0x166>
 802364a:	6823      	ldr	r3, [r4, #0]
 802364c:	079b      	lsls	r3, r3, #30
 802364e:	d413      	bmi.n	8023678 <_printf_i+0x23c>
 8023650:	68e0      	ldr	r0, [r4, #12]
 8023652:	9b03      	ldr	r3, [sp, #12]
 8023654:	4298      	cmp	r0, r3
 8023656:	bfb8      	it	lt
 8023658:	4618      	movlt	r0, r3
 802365a:	e7a4      	b.n	80235a6 <_printf_i+0x16a>
 802365c:	2301      	movs	r3, #1
 802365e:	4632      	mov	r2, r6
 8023660:	4649      	mov	r1, r9
 8023662:	4640      	mov	r0, r8
 8023664:	47d0      	blx	sl
 8023666:	3001      	adds	r0, #1
 8023668:	d09b      	beq.n	80235a2 <_printf_i+0x166>
 802366a:	3501      	adds	r5, #1
 802366c:	68e3      	ldr	r3, [r4, #12]
 802366e:	9903      	ldr	r1, [sp, #12]
 8023670:	1a5b      	subs	r3, r3, r1
 8023672:	42ab      	cmp	r3, r5
 8023674:	dcf2      	bgt.n	802365c <_printf_i+0x220>
 8023676:	e7eb      	b.n	8023650 <_printf_i+0x214>
 8023678:	2500      	movs	r5, #0
 802367a:	f104 0619 	add.w	r6, r4, #25
 802367e:	e7f5      	b.n	802366c <_printf_i+0x230>
 8023680:	08023fa5 	.word	0x08023fa5
 8023684:	08023fb6 	.word	0x08023fb6

08023688 <memchr>:
 8023688:	4603      	mov	r3, r0
 802368a:	b510      	push	{r4, lr}
 802368c:	b2c9      	uxtb	r1, r1
 802368e:	4402      	add	r2, r0
 8023690:	4293      	cmp	r3, r2
 8023692:	4618      	mov	r0, r3
 8023694:	d101      	bne.n	802369a <memchr+0x12>
 8023696:	2000      	movs	r0, #0
 8023698:	e003      	b.n	80236a2 <memchr+0x1a>
 802369a:	7804      	ldrb	r4, [r0, #0]
 802369c:	3301      	adds	r3, #1
 802369e:	428c      	cmp	r4, r1
 80236a0:	d1f6      	bne.n	8023690 <memchr+0x8>
 80236a2:	bd10      	pop	{r4, pc}

080236a4 <memmove>:
 80236a4:	4288      	cmp	r0, r1
 80236a6:	b510      	push	{r4, lr}
 80236a8:	eb01 0402 	add.w	r4, r1, r2
 80236ac:	d902      	bls.n	80236b4 <memmove+0x10>
 80236ae:	4284      	cmp	r4, r0
 80236b0:	4623      	mov	r3, r4
 80236b2:	d807      	bhi.n	80236c4 <memmove+0x20>
 80236b4:	1e43      	subs	r3, r0, #1
 80236b6:	42a1      	cmp	r1, r4
 80236b8:	d008      	beq.n	80236cc <memmove+0x28>
 80236ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80236be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80236c2:	e7f8      	b.n	80236b6 <memmove+0x12>
 80236c4:	4601      	mov	r1, r0
 80236c6:	4402      	add	r2, r0
 80236c8:	428a      	cmp	r2, r1
 80236ca:	d100      	bne.n	80236ce <memmove+0x2a>
 80236cc:	bd10      	pop	{r4, pc}
 80236ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80236d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80236d6:	e7f7      	b.n	80236c8 <memmove+0x24>

080236d8 <_free_r>:
 80236d8:	b538      	push	{r3, r4, r5, lr}
 80236da:	4605      	mov	r5, r0
 80236dc:	2900      	cmp	r1, #0
 80236de:	d043      	beq.n	8023768 <_free_r+0x90>
 80236e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80236e4:	1f0c      	subs	r4, r1, #4
 80236e6:	2b00      	cmp	r3, #0
 80236e8:	bfb8      	it	lt
 80236ea:	18e4      	addlt	r4, r4, r3
 80236ec:	f000 f8d0 	bl	8023890 <__malloc_lock>
 80236f0:	4a1e      	ldr	r2, [pc, #120]	; (802376c <_free_r+0x94>)
 80236f2:	6813      	ldr	r3, [r2, #0]
 80236f4:	4610      	mov	r0, r2
 80236f6:	b933      	cbnz	r3, 8023706 <_free_r+0x2e>
 80236f8:	6063      	str	r3, [r4, #4]
 80236fa:	6014      	str	r4, [r2, #0]
 80236fc:	4628      	mov	r0, r5
 80236fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023702:	f000 b8cb 	b.w	802389c <__malloc_unlock>
 8023706:	42a3      	cmp	r3, r4
 8023708:	d90a      	bls.n	8023720 <_free_r+0x48>
 802370a:	6821      	ldr	r1, [r4, #0]
 802370c:	1862      	adds	r2, r4, r1
 802370e:	4293      	cmp	r3, r2
 8023710:	bf01      	itttt	eq
 8023712:	681a      	ldreq	r2, [r3, #0]
 8023714:	685b      	ldreq	r3, [r3, #4]
 8023716:	1852      	addeq	r2, r2, r1
 8023718:	6022      	streq	r2, [r4, #0]
 802371a:	6063      	str	r3, [r4, #4]
 802371c:	6004      	str	r4, [r0, #0]
 802371e:	e7ed      	b.n	80236fc <_free_r+0x24>
 8023720:	461a      	mov	r2, r3
 8023722:	685b      	ldr	r3, [r3, #4]
 8023724:	b10b      	cbz	r3, 802372a <_free_r+0x52>
 8023726:	42a3      	cmp	r3, r4
 8023728:	d9fa      	bls.n	8023720 <_free_r+0x48>
 802372a:	6811      	ldr	r1, [r2, #0]
 802372c:	1850      	adds	r0, r2, r1
 802372e:	42a0      	cmp	r0, r4
 8023730:	d10b      	bne.n	802374a <_free_r+0x72>
 8023732:	6820      	ldr	r0, [r4, #0]
 8023734:	4401      	add	r1, r0
 8023736:	1850      	adds	r0, r2, r1
 8023738:	4283      	cmp	r3, r0
 802373a:	6011      	str	r1, [r2, #0]
 802373c:	d1de      	bne.n	80236fc <_free_r+0x24>
 802373e:	6818      	ldr	r0, [r3, #0]
 8023740:	685b      	ldr	r3, [r3, #4]
 8023742:	4401      	add	r1, r0
 8023744:	6011      	str	r1, [r2, #0]
 8023746:	6053      	str	r3, [r2, #4]
 8023748:	e7d8      	b.n	80236fc <_free_r+0x24>
 802374a:	d902      	bls.n	8023752 <_free_r+0x7a>
 802374c:	230c      	movs	r3, #12
 802374e:	602b      	str	r3, [r5, #0]
 8023750:	e7d4      	b.n	80236fc <_free_r+0x24>
 8023752:	6820      	ldr	r0, [r4, #0]
 8023754:	1821      	adds	r1, r4, r0
 8023756:	428b      	cmp	r3, r1
 8023758:	bf01      	itttt	eq
 802375a:	6819      	ldreq	r1, [r3, #0]
 802375c:	685b      	ldreq	r3, [r3, #4]
 802375e:	1809      	addeq	r1, r1, r0
 8023760:	6021      	streq	r1, [r4, #0]
 8023762:	6063      	str	r3, [r4, #4]
 8023764:	6054      	str	r4, [r2, #4]
 8023766:	e7c9      	b.n	80236fc <_free_r+0x24>
 8023768:	bd38      	pop	{r3, r4, r5, pc}
 802376a:	bf00      	nop
 802376c:	200011c0 	.word	0x200011c0

08023770 <_malloc_r>:
 8023770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023772:	1ccd      	adds	r5, r1, #3
 8023774:	f025 0503 	bic.w	r5, r5, #3
 8023778:	3508      	adds	r5, #8
 802377a:	2d0c      	cmp	r5, #12
 802377c:	bf38      	it	cc
 802377e:	250c      	movcc	r5, #12
 8023780:	2d00      	cmp	r5, #0
 8023782:	4606      	mov	r6, r0
 8023784:	db01      	blt.n	802378a <_malloc_r+0x1a>
 8023786:	42a9      	cmp	r1, r5
 8023788:	d903      	bls.n	8023792 <_malloc_r+0x22>
 802378a:	230c      	movs	r3, #12
 802378c:	6033      	str	r3, [r6, #0]
 802378e:	2000      	movs	r0, #0
 8023790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023792:	f000 f87d 	bl	8023890 <__malloc_lock>
 8023796:	4921      	ldr	r1, [pc, #132]	; (802381c <_malloc_r+0xac>)
 8023798:	680a      	ldr	r2, [r1, #0]
 802379a:	4614      	mov	r4, r2
 802379c:	b99c      	cbnz	r4, 80237c6 <_malloc_r+0x56>
 802379e:	4f20      	ldr	r7, [pc, #128]	; (8023820 <_malloc_r+0xb0>)
 80237a0:	683b      	ldr	r3, [r7, #0]
 80237a2:	b923      	cbnz	r3, 80237ae <_malloc_r+0x3e>
 80237a4:	4621      	mov	r1, r4
 80237a6:	4630      	mov	r0, r6
 80237a8:	f000 f862 	bl	8023870 <_sbrk_r>
 80237ac:	6038      	str	r0, [r7, #0]
 80237ae:	4629      	mov	r1, r5
 80237b0:	4630      	mov	r0, r6
 80237b2:	f000 f85d 	bl	8023870 <_sbrk_r>
 80237b6:	1c43      	adds	r3, r0, #1
 80237b8:	d123      	bne.n	8023802 <_malloc_r+0x92>
 80237ba:	230c      	movs	r3, #12
 80237bc:	4630      	mov	r0, r6
 80237be:	6033      	str	r3, [r6, #0]
 80237c0:	f000 f86c 	bl	802389c <__malloc_unlock>
 80237c4:	e7e3      	b.n	802378e <_malloc_r+0x1e>
 80237c6:	6823      	ldr	r3, [r4, #0]
 80237c8:	1b5b      	subs	r3, r3, r5
 80237ca:	d417      	bmi.n	80237fc <_malloc_r+0x8c>
 80237cc:	2b0b      	cmp	r3, #11
 80237ce:	d903      	bls.n	80237d8 <_malloc_r+0x68>
 80237d0:	6023      	str	r3, [r4, #0]
 80237d2:	441c      	add	r4, r3
 80237d4:	6025      	str	r5, [r4, #0]
 80237d6:	e004      	b.n	80237e2 <_malloc_r+0x72>
 80237d8:	6863      	ldr	r3, [r4, #4]
 80237da:	42a2      	cmp	r2, r4
 80237dc:	bf0c      	ite	eq
 80237de:	600b      	streq	r3, [r1, #0]
 80237e0:	6053      	strne	r3, [r2, #4]
 80237e2:	4630      	mov	r0, r6
 80237e4:	f000 f85a 	bl	802389c <__malloc_unlock>
 80237e8:	f104 000b 	add.w	r0, r4, #11
 80237ec:	1d23      	adds	r3, r4, #4
 80237ee:	f020 0007 	bic.w	r0, r0, #7
 80237f2:	1ac2      	subs	r2, r0, r3
 80237f4:	d0cc      	beq.n	8023790 <_malloc_r+0x20>
 80237f6:	1a1b      	subs	r3, r3, r0
 80237f8:	50a3      	str	r3, [r4, r2]
 80237fa:	e7c9      	b.n	8023790 <_malloc_r+0x20>
 80237fc:	4622      	mov	r2, r4
 80237fe:	6864      	ldr	r4, [r4, #4]
 8023800:	e7cc      	b.n	802379c <_malloc_r+0x2c>
 8023802:	1cc4      	adds	r4, r0, #3
 8023804:	f024 0403 	bic.w	r4, r4, #3
 8023808:	42a0      	cmp	r0, r4
 802380a:	d0e3      	beq.n	80237d4 <_malloc_r+0x64>
 802380c:	1a21      	subs	r1, r4, r0
 802380e:	4630      	mov	r0, r6
 8023810:	f000 f82e 	bl	8023870 <_sbrk_r>
 8023814:	3001      	adds	r0, #1
 8023816:	d1dd      	bne.n	80237d4 <_malloc_r+0x64>
 8023818:	e7cf      	b.n	80237ba <_malloc_r+0x4a>
 802381a:	bf00      	nop
 802381c:	200011c0 	.word	0x200011c0
 8023820:	200011c4 	.word	0x200011c4

08023824 <_realloc_r>:
 8023824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023826:	4607      	mov	r7, r0
 8023828:	4614      	mov	r4, r2
 802382a:	460e      	mov	r6, r1
 802382c:	b921      	cbnz	r1, 8023838 <_realloc_r+0x14>
 802382e:	4611      	mov	r1, r2
 8023830:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8023834:	f7ff bf9c 	b.w	8023770 <_malloc_r>
 8023838:	b922      	cbnz	r2, 8023844 <_realloc_r+0x20>
 802383a:	f7ff ff4d 	bl	80236d8 <_free_r>
 802383e:	4625      	mov	r5, r4
 8023840:	4628      	mov	r0, r5
 8023842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023844:	f000 f830 	bl	80238a8 <_malloc_usable_size_r>
 8023848:	42a0      	cmp	r0, r4
 802384a:	d20f      	bcs.n	802386c <_realloc_r+0x48>
 802384c:	4621      	mov	r1, r4
 802384e:	4638      	mov	r0, r7
 8023850:	f7ff ff8e 	bl	8023770 <_malloc_r>
 8023854:	4605      	mov	r5, r0
 8023856:	2800      	cmp	r0, #0
 8023858:	d0f2      	beq.n	8023840 <_realloc_r+0x1c>
 802385a:	4631      	mov	r1, r6
 802385c:	4622      	mov	r2, r4
 802385e:	f7ff fbeb 	bl	8023038 <memcpy>
 8023862:	4631      	mov	r1, r6
 8023864:	4638      	mov	r0, r7
 8023866:	f7ff ff37 	bl	80236d8 <_free_r>
 802386a:	e7e9      	b.n	8023840 <_realloc_r+0x1c>
 802386c:	4635      	mov	r5, r6
 802386e:	e7e7      	b.n	8023840 <_realloc_r+0x1c>

08023870 <_sbrk_r>:
 8023870:	b538      	push	{r3, r4, r5, lr}
 8023872:	2300      	movs	r3, #0
 8023874:	4d05      	ldr	r5, [pc, #20]	; (802388c <_sbrk_r+0x1c>)
 8023876:	4604      	mov	r4, r0
 8023878:	4608      	mov	r0, r1
 802387a:	602b      	str	r3, [r5, #0]
 802387c:	f7fc fef6 	bl	802066c <_sbrk>
 8023880:	1c43      	adds	r3, r0, #1
 8023882:	d102      	bne.n	802388a <_sbrk_r+0x1a>
 8023884:	682b      	ldr	r3, [r5, #0]
 8023886:	b103      	cbz	r3, 802388a <_sbrk_r+0x1a>
 8023888:	6023      	str	r3, [r4, #0]
 802388a:	bd38      	pop	{r3, r4, r5, pc}
 802388c:	20004278 	.word	0x20004278

08023890 <__malloc_lock>:
 8023890:	4801      	ldr	r0, [pc, #4]	; (8023898 <__malloc_lock+0x8>)
 8023892:	f000 b811 	b.w	80238b8 <__retarget_lock_acquire_recursive>
 8023896:	bf00      	nop
 8023898:	20004280 	.word	0x20004280

0802389c <__malloc_unlock>:
 802389c:	4801      	ldr	r0, [pc, #4]	; (80238a4 <__malloc_unlock+0x8>)
 802389e:	f000 b80c 	b.w	80238ba <__retarget_lock_release_recursive>
 80238a2:	bf00      	nop
 80238a4:	20004280 	.word	0x20004280

080238a8 <_malloc_usable_size_r>:
 80238a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80238ac:	1f18      	subs	r0, r3, #4
 80238ae:	2b00      	cmp	r3, #0
 80238b0:	bfbc      	itt	lt
 80238b2:	580b      	ldrlt	r3, [r1, r0]
 80238b4:	18c0      	addlt	r0, r0, r3
 80238b6:	4770      	bx	lr

080238b8 <__retarget_lock_acquire_recursive>:
 80238b8:	4770      	bx	lr

080238ba <__retarget_lock_release_recursive>:
 80238ba:	4770      	bx	lr

080238bc <_init>:
 80238bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80238be:	bf00      	nop
 80238c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80238c2:	bc08      	pop	{r3}
 80238c4:	469e      	mov	lr, r3
 80238c6:	4770      	bx	lr

080238c8 <_fini>:
 80238c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80238ca:	bf00      	nop
 80238cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80238ce:	bc08      	pop	{r3}
 80238d0:	469e      	mov	lr, r3
 80238d2:	4770      	bx	lr
