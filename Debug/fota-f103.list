
fota-f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058e4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f0  08005ac8  08005ac8  00015ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061b8  080061b8  00020168  2**0
                  CONTENTS
  4 .ARM          00000000  080061b8  080061b8  00020168  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061b8  080061b8  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061b8  080061b8  000161b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061bc  080061bc  000161bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  080061c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e60  20000168  08006328  00020168  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003fc8  08006328  00023fc8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015825  00000000  00000000  00020191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fc2  00000000  00000000  000359b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  00039978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f0  00000000  00000000  0003ae28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8d7  00000000  00000000  0003c218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001834b  00000000  00000000  00058aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009eefc  00000000  00000000  00070e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010fd36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005524  00000000  00000000  0010fd8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000168 	.word	0x20000168
 8000200:	00000000 	.word	0x00000000
 8000204:	08005ab0 	.word	0x08005ab0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000016c 	.word	0x2000016c
 8000220:	08005ab0 	.word	0x08005ab0

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <MC25LC512_CS>:
unsigned char MC25LC512_ReleaseDeepPowerDownMode(void);



void MC25LC512_CS(uint8_t CS_Status)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
	// For Cs of the EEprom
	if(CS_Status == EEPROM_CS_PIN_RESET)
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d102      	bne.n	800024a <MC25LC512_CS+0x16>
	{
		ResetChipSelect();
 8000244:	f000 fb3c 	bl	80008c0 <ResetChipSelect>
	{
		SetChipSelect();

	}

}
 8000248:	e001      	b.n	800024e <MC25LC512_CS+0x1a>
		SetChipSelect();
 800024a:	f000 fb45 	bl	80008d8 <SetChipSelect>
}
 800024e:	bf00      	nop
 8000250:	3708      	adds	r7, #8
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
	...

08000258 <MC25LC512_WriteEnableOrDisable>:
void MC25LC512_WriteEnableOrDisable(uint8_t EnableOrDisable)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	71fb      	strb	r3, [r7, #7]
	uint8_t SendOneByte = 0;
 8000262:	2300      	movs	r3, #0
 8000264:	72fb      	strb	r3, [r7, #11]
	MC25LC512_CS(EEPROM_CS_PIN_RESET);// Reset The spi Chip //Reset means Enable
 8000266:	2000      	movs	r0, #0
 8000268:	f7ff ffe4 	bl	8000234 <MC25LC512_CS>
	for(uint16_t i = 0; i < 10; i ++);
 800026c:	2300      	movs	r3, #0
 800026e:	81fb      	strh	r3, [r7, #14]
 8000270:	e002      	b.n	8000278 <MC25LC512_WriteEnableOrDisable+0x20>
 8000272:	89fb      	ldrh	r3, [r7, #14]
 8000274:	3301      	adds	r3, #1
 8000276:	81fb      	strh	r3, [r7, #14]
 8000278:	89fb      	ldrh	r3, [r7, #14]
 800027a:	2b09      	cmp	r3, #9
 800027c:	d9f9      	bls.n	8000272 <MC25LC512_WriteEnableOrDisable+0x1a>
	if(EnableOrDisable==EEPROM_Enable)
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	2b01      	cmp	r3, #1
 8000282:	d102      	bne.n	800028a <MC25LC512_WriteEnableOrDisable+0x32>
	{
			SendOneByte = MC25LCxxx_SPI_WREN;
 8000284:	2306      	movs	r3, #6
 8000286:	72fb      	strb	r3, [r7, #11]
 8000288:	e001      	b.n	800028e <MC25LC512_WriteEnableOrDisable+0x36>
	}
	else
	{
			SendOneByte = MC25LCxxx_SPI_WRDI;
 800028a:	2304      	movs	r3, #4
 800028c:	72fb      	strb	r3, [r7, #11]
	}
	HAL_SPI_Transmit(&Spi2Handle , &SendOneByte, 1, 200) ;
 800028e:	f107 010b 	add.w	r1, r7, #11
 8000292:	23c8      	movs	r3, #200	; 0xc8
 8000294:	2201      	movs	r2, #1
 8000296:	4809      	ldr	r0, [pc, #36]	; (80002bc <MC25LC512_WriteEnableOrDisable+0x64>)
 8000298:	f003 fde0 	bl	8003e5c <HAL_SPI_Transmit>
	for(uint16_t i = 0; i < 10; i ++);
 800029c:	2300      	movs	r3, #0
 800029e:	81bb      	strh	r3, [r7, #12]
 80002a0:	e002      	b.n	80002a8 <MC25LC512_WriteEnableOrDisable+0x50>
 80002a2:	89bb      	ldrh	r3, [r7, #12]
 80002a4:	3301      	adds	r3, #1
 80002a6:	81bb      	strh	r3, [r7, #12]
 80002a8:	89bb      	ldrh	r3, [r7, #12]
 80002aa:	2b09      	cmp	r3, #9
 80002ac:	d9f9      	bls.n	80002a2 <MC25LC512_WriteEnableOrDisable+0x4a>
	MC25LC512_CS(EEPROM_CS_PIN_SET);// Set The spi Chip //Set means Disable
 80002ae:	2001      	movs	r0, #1
 80002b0:	f7ff ffc0 	bl	8000234 <MC25LC512_CS>
}
 80002b4:	bf00      	nop
 80002b6:	3710      	adds	r7, #16
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	200011f8 	.word	0x200011f8

080002c0 <MC25LC512_Initialize>:
	return RecieveByteOfReleaseDeepPowerMode;

}

void MC25LC512_Initialize(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	MC25LC512_CS(EEPROM_CS_PIN_SET);// Reset The spi Chip //Reset means Enable
 80002c4:	2001      	movs	r0, #1
 80002c6:	f7ff ffb5 	bl	8000234 <MC25LC512_CS>
	MC25LC512_WriteEnableOrDisable(EEPROM_Enable);
 80002ca:	2001      	movs	r0, #1
 80002cc:	f7ff ffc4 	bl	8000258 <MC25LC512_WriteEnableOrDisable>

}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <is_Sim7600_TimeOutFlag>:
 * is_Sim7600_TimeOutFlag()
 * @param None.
 * @retval Flagstatus: SET or RESET
 * @brief This function return sim7600_timeout_flag.
 */
FlagStatus is_Sim7600_TimeOutFlag(){
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
	return sim7600_timeout_flag;
 80002d8:	4b02      	ldr	r3, [pc, #8]	; (80002e4 <is_Sim7600_TimeOutFlag+0x10>)
 80002da:	781b      	ldrb	r3, [r3, #0]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	20000185 	.word	0x20000185

080002e8 <Set_Sim7600_Timeout_Flag>:
 * Set_Sim7600_Timeout_Flag()
 * @param None.
 * @retval None
 * @brief This function set sim7600_timeout_flag to SET.
 */
void Set_Sim7600_Timeout_Flag(void){
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
	sim7600_timeout_flag = SET;
 80002ec:	4b03      	ldr	r3, [pc, #12]	; (80002fc <Set_Sim7600_Timeout_Flag+0x14>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	701a      	strb	r2, [r3, #0]
}
 80002f2:	bf00      	nop
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	20000185 	.word	0x20000185

08000300 <Clear_Sim7600_Timeout_Flag>:
 * Clear_Sim7600_Timeout_Flag()
 * @param None.
 * @retval None
 * @brief This function set sim7600_timeout_flag to RESET.
 */
void Clear_Sim7600_Timeout_Flag(void){
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
	sim7600_timeout_flag = RESET;
 8000304:	4b03      	ldr	r3, [pc, #12]	; (8000314 <Clear_Sim7600_Timeout_Flag+0x14>)
 8000306:	2200      	movs	r2, #0
 8000308:	701a      	strb	r2, [r3, #0]
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	20000185 	.word	0x20000185

08000318 <Sim7600_State_Display>:

/**
 * Sim7600_State_Display()
 * @brief This is function for display state of State Machine. It only show State when having a state changation.
 */
void Sim7600_State_Display(void){
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	if(sim7600_state!=prev_sim7600_state){
 800031c:	4b2a      	ldr	r3, [pc, #168]	; (80003c8 <Sim7600_State_Display+0xb0>)
 800031e:	781a      	ldrb	r2, [r3, #0]
 8000320:	4b2a      	ldr	r3, [pc, #168]	; (80003cc <Sim7600_State_Display+0xb4>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	429a      	cmp	r2, r3
 8000326:	d049      	beq.n	80003bc <Sim7600_State_Display+0xa4>
		switch(sim7600_state){
 8000328:	4b27      	ldr	r3, [pc, #156]	; (80003c8 <Sim7600_State_Display+0xb0>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b0a      	cmp	r3, #10
 800032e:	d847      	bhi.n	80003c0 <Sim7600_State_Display+0xa8>
 8000330:	a201      	add	r2, pc, #4	; (adr r2, 8000338 <Sim7600_State_Display+0x20>)
 8000332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000336:	bf00      	nop
 8000338:	08000365 	.word	0x08000365
 800033c:	0800036d 	.word	0x0800036d
 8000340:	08000375 	.word	0x08000375
 8000344:	0800037d 	.word	0x0800037d
 8000348:	08000385 	.word	0x08000385
 800034c:	0800038d 	.word	0x0800038d
 8000350:	08000395 	.word	0x08000395
 8000354:	0800039d 	.word	0x0800039d
 8000358:	080003a5 	.word	0x080003a5
 800035c:	080003ad 	.word	0x080003ad
 8000360:	080003b5 	.word	0x080003b5
		case SIM7600_POWER_ON:
			LOG("\r\nSIM7600 POWER ON\r\n");
 8000364:	481a      	ldr	r0, [pc, #104]	; (80003d0 <Sim7600_State_Display+0xb8>)
 8000366:	f000 fc17 	bl	8000b98 <UART_DEBUG_Transmit>
			break;
 800036a:	e02a      	b.n	80003c2 <Sim7600_State_Display+0xaa>
		case SIM7600_WAIT_FOR_POWER_ON_RESPONE:
			LOG((uint8_t*)"\r\nSIM7600 WAIT FOR POWER ON RESPONE\r\n");
 800036c:	4819      	ldr	r0, [pc, #100]	; (80003d4 <Sim7600_State_Display+0xbc>)
 800036e:	f000 fc13 	bl	8000b98 <UART_DEBUG_Transmit>
			break;
 8000372:	e026      	b.n	80003c2 <Sim7600_State_Display+0xaa>
		case SIM7600_RESET:
			LOG((uint8_t*)"\r\nSIM7600 RESET\r\n");
 8000374:	4818      	ldr	r0, [pc, #96]	; (80003d8 <Sim7600_State_Display+0xc0>)
 8000376:	f000 fc0f 	bl	8000b98 <UART_DEBUG_Transmit>
			break;
 800037a:	e022      	b.n	80003c2 <Sim7600_State_Display+0xaa>
		case SIM7600_WAIT_FOR_RESET_RESPONE:
			LOG((uint8_t*)"\r\nSIM7600 WAIT FOR RESET RESPONE\r\n");
 800037c:	4817      	ldr	r0, [pc, #92]	; (80003dc <Sim7600_State_Display+0xc4>)
 800037e:	f000 fc0b 	bl	8000b98 <UART_DEBUG_Transmit>
			break;
 8000382:	e01e      	b.n	80003c2 <Sim7600_State_Display+0xaa>
		case SIM7600_START_UP:
			LOG((uint8_t*)"\r\nSIM7600 START UP\r\n");
 8000384:	4816      	ldr	r0, [pc, #88]	; (80003e0 <Sim7600_State_Display+0xc8>)
 8000386:	f000 fc07 	bl	8000b98 <UART_DEBUG_Transmit>
			break;
 800038a:	e01a      	b.n	80003c2 <Sim7600_State_Display+0xaa>
		case SIM7600_WAIT_FOR_START_UP_RESPONE:
			LOG((uint8_t*)"\r\nSIM7600 WAIT FOR START UP RESPONE\r\n");
 800038c:	4815      	ldr	r0, [pc, #84]	; (80003e4 <Sim7600_State_Display+0xcc>)
 800038e:	f000 fc03 	bl	8000b98 <UART_DEBUG_Transmit>
			break;
 8000392:	e016      	b.n	80003c2 <Sim7600_State_Display+0xaa>
		case SIM7600_SETTING:
			LOG((uint8_t*)"\r\nSIM7600 SETTING\r\n");
 8000394:	4814      	ldr	r0, [pc, #80]	; (80003e8 <Sim7600_State_Display+0xd0>)
 8000396:	f000 fbff 	bl	8000b98 <UART_DEBUG_Transmit>
			break;
 800039a:	e012      	b.n	80003c2 <Sim7600_State_Display+0xaa>
		case SIM7600_WAIT_FOR_SETTING_RESPONE:
			LOG((uint8_t*)"\r\nSIM7600 WAIT FOR SETTING RESPONE\r\n");
 800039c:	4813      	ldr	r0, [pc, #76]	; (80003ec <Sim7600_State_Display+0xd4>)
 800039e:	f000 fbfb 	bl	8000b98 <UART_DEBUG_Transmit>
			break;
 80003a2:	e00e      	b.n	80003c2 <Sim7600_State_Display+0xaa>
		case SIM7600_GET_IMEI:
			LOG((uint8_t*)"\r\nSIM7600 GET IMEI\r\n");
 80003a4:	4812      	ldr	r0, [pc, #72]	; (80003f0 <Sim7600_State_Display+0xd8>)
 80003a6:	f000 fbf7 	bl	8000b98 <UART_DEBUG_Transmit>
			break;
 80003aa:	e00a      	b.n	80003c2 <Sim7600_State_Display+0xaa>
		case SIM7600_WAIT_FOR_GET_IMEI_RESPONE:
			LOG((uint8_t*)"\r\nSIM7600 WAIT FOR GET IMEI RESPONE\r\n");
 80003ac:	4811      	ldr	r0, [pc, #68]	; (80003f4 <Sim7600_State_Display+0xdc>)
 80003ae:	f000 fbf3 	bl	8000b98 <UART_DEBUG_Transmit>
			break;
 80003b2:	e006      	b.n	80003c2 <Sim7600_State_Display+0xaa>
		case SIM7600_MAX_STATE:
			LOG((uint8_t*)"\r\nSIM7600 MAX STATE\r\n");
 80003b4:	4810      	ldr	r0, [pc, #64]	; (80003f8 <Sim7600_State_Display+0xe0>)
 80003b6:	f000 fbef 	bl	8000b98 <UART_DEBUG_Transmit>
			break;
 80003ba:	e002      	b.n	80003c2 <Sim7600_State_Display+0xaa>
		default:
			break;
		}
	}
 80003bc:	bf00      	nop
 80003be:	e000      	b.n	80003c2 <Sim7600_State_Display+0xaa>
			break;
 80003c0:	bf00      	nop
}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000000 	.word	0x20000000
 80003cc:	200011e6 	.word	0x200011e6
 80003d0:	08005b6c 	.word	0x08005b6c
 80003d4:	08005b84 	.word	0x08005b84
 80003d8:	08005bac 	.word	0x08005bac
 80003dc:	08005bc0 	.word	0x08005bc0
 80003e0:	08005be4 	.word	0x08005be4
 80003e4:	08005bfc 	.word	0x08005bfc
 80003e8:	08005c24 	.word	0x08005c24
 80003ec:	08005c38 	.word	0x08005c38
 80003f0:	08005c60 	.word	0x08005c60
 80003f4:	08005c78 	.word	0x08005c78
 80003f8:	08005ca0 	.word	0x08005ca0

080003fc <Sim7600_Run>:
 * Sim7600_Run()
 * @param None
 * @retval 0 if state < SIM7600_MAX_STATE else return 1
 * @brief This is function can be called from external file. It run follow state machine method. Not have param.
 */
uint8_t Sim7600_Run(void){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	Sim7600_State_Display();
 8000400:	f7ff ff8a 	bl	8000318 <Sim7600_State_Display>
	prev_sim7600_state = sim7600_state;
 8000404:	4b09      	ldr	r3, [pc, #36]	; (800042c <Sim7600_Run+0x30>)
 8000406:	781a      	ldrb	r2, [r3, #0]
 8000408:	4b09      	ldr	r3, [pc, #36]	; (8000430 <Sim7600_Run+0x34>)
 800040a:	701a      	strb	r2, [r3, #0]
	if(sim7600_state < SIM7600_MAX_STATE){
 800040c:	4b07      	ldr	r3, [pc, #28]	; (800042c <Sim7600_Run+0x30>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d808      	bhi.n	8000426 <Sim7600_Run+0x2a>
		(*Sim7600_State_Machine[sim7600_state].func)();
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <Sim7600_Run+0x30>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	4a06      	ldr	r2, [pc, #24]	; (8000434 <Sim7600_Run+0x38>)
 800041a:	00db      	lsls	r3, r3, #3
 800041c:	4413      	add	r3, r2
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	4798      	blx	r3
		return 0;
 8000422:	2300      	movs	r3, #0
 8000424:	e000      	b.n	8000428 <Sim7600_Run+0x2c>
	} else {
		return 1;
 8000426:	2301      	movs	r3, #1
	}
}
 8000428:	4618      	mov	r0, r3
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20000000 	.word	0x20000000
 8000430:	200011e6 	.word	0x200011e6
 8000434:	20000028 	.word	0x20000028

08000438 <Power_Signal_Low>:
 * Power_Signal_Low()
 * @param None
 * @retval None
 * @brief This is function set Power Signal to RESET
 */
void Power_Signal_Low(void){
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(SIM7600_4G_PWRON_PORT, SIM7600_4G_PWRON, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(SIM7600_4G_PWRON_PORT, SIM7600_4G_PWRON, GPIO_PIN_SET);
 800043c:	2201      	movs	r2, #1
 800043e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000442:	4802      	ldr	r0, [pc, #8]	; (800044c <Power_Signal_Low+0x14>)
 8000444:	f003 f854 	bl	80034f0 <HAL_GPIO_WritePin>
}
 8000448:	bf00      	nop
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40011000 	.word	0x40011000

08000450 <Power_Signal_High>:
 * Power_Signal_High()
 * @param None
 * @retval None
 * @brief This is function set Power Signal to SET
 */
void Power_Signal_High(void){
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(SIM7600_4G_PWRON_PORT, SIM7600_4G_PWRON, GPIO_PIN_SET);
	HAL_GPIO_WritePin(SIM7600_4G_PWRON_PORT, SIM7600_4G_PWRON, GPIO_PIN_RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	f44f 7180 	mov.w	r1, #256	; 0x100
 800045a:	4802      	ldr	r0, [pc, #8]	; (8000464 <Power_Signal_High+0x14>)
 800045c:	f003 f848 	bl	80034f0 <HAL_GPIO_WritePin>
}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40011000 	.word	0x40011000

08000468 <Reset_Signal_Low>:
 * Reset_Signal_Low()
 * @param None
 * @retval None
 * @brief This is function set Reset Signal to RESET
 */
void Reset_Signal_Low(void){
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(SIM7600_4G_PERST_PORT, SIM7600_4G_PERST, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(SIM7600_4G_PERST_PORT, SIM7600_4G_PERST, GPIO_PIN_SET);
 800046c:	2201      	movs	r2, #1
 800046e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000472:	4802      	ldr	r0, [pc, #8]	; (800047c <Reset_Signal_Low+0x14>)
 8000474:	f003 f83c 	bl	80034f0 <HAL_GPIO_WritePin>
}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40011000 	.word	0x40011000

08000480 <Reset_Signal_High>:
 * Reset_Signal_High()
 * @param None
 * @retval None
 * @brief This is function set Reset Signal to SET
 */
void Reset_Signal_High(void){
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(SIM7600_4G_PERST_PORT, SIM7600_4G_PERST, GPIO_PIN_SET);
	HAL_GPIO_WritePin(SIM7600_4G_PERST_PORT, SIM7600_4G_PERST, GPIO_PIN_RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	f44f 7100 	mov.w	r1, #512	; 0x200
 800048a:	4802      	ldr	r0, [pc, #8]	; (8000494 <Reset_Signal_High+0x14>)
 800048c:	f003 f830 	bl	80034f0 <HAL_GPIO_WritePin>

}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	40011000 	.word	0x40011000

08000498 <Sim7600_Power_On>:
 * Sim7600_Power_On()
 * @param None
 * @retval None
 * @brief This is function for control POWER_ON signal in Simcom7600 module
 */
void Sim7600_Power_On(void){
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	SCH_Add_Task(Power_Signal_Low, 0, 0);
 800049c:	2200      	movs	r2, #0
 800049e:	2100      	movs	r1, #0
 80004a0:	4809      	ldr	r0, [pc, #36]	; (80004c8 <Sim7600_Power_On+0x30>)
 80004a2:	f001 fc33 	bl	8001d0c <SCH_Add_Task>
	SCH_Add_Task(Power_Signal_High, TIMER_TO_POWER_ON_SIM7600, 0);
 80004a6:	2200      	movs	r2, #0
 80004a8:	21c8      	movs	r1, #200	; 0xc8
 80004aa:	4808      	ldr	r0, [pc, #32]	; (80004cc <Sim7600_Power_On+0x34>)
 80004ac:	f001 fc2e 	bl	8001d0c <SCH_Add_Task>
	Clear_Sim7600_Timeout_Flag();
 80004b0:	f7ff ff26 	bl	8000300 <Clear_Sim7600_Timeout_Flag>
	SCH_Add_Task(Set_Sim7600_Timeout_Flag, TIMER_TO_POWER_ON_SIM7600_TIMEOUT, 0);
 80004b4:	2200      	movs	r2, #0
 80004b6:	21c8      	movs	r1, #200	; 0xc8
 80004b8:	4805      	ldr	r0, [pc, #20]	; (80004d0 <Sim7600_Power_On+0x38>)
 80004ba:	f001 fc27 	bl	8001d0c <SCH_Add_Task>
	sim7600_state = SIM7600_WAIT_FOR_POWER_ON_RESPONE;
 80004be:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <Sim7600_Power_On+0x3c>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	701a      	strb	r2, [r3, #0]
}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	08000439 	.word	0x08000439
 80004cc:	08000451 	.word	0x08000451
 80004d0:	080002e9 	.word	0x080002e9
 80004d4:	20000000 	.word	0x20000000

080004d8 <Sim7600_Wait_For_Power_On_Respone>:
 * Sim7600_Wait_For_Power_On_Respone()
 * @param None
 * @retval None
 * @brief This is function for waiting POWER_ON State respone, after timeout TIMER_TO_POWER_ON_SIM7600_TIMEOUT
 */
void Sim7600_Wait_For_Power_On_Respone(void){
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	if(is_Sim7600_TimeOutFlag()){
 80004dc:	f7ff fefa 	bl	80002d4 <is_Sim7600_TimeOutFlag>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d002      	beq.n	80004ec <Sim7600_Wait_For_Power_On_Respone+0x14>
		sim7600_state = SIM7600_START_UP;
 80004e6:	4b02      	ldr	r3, [pc, #8]	; (80004f0 <Sim7600_Wait_For_Power_On_Respone+0x18>)
 80004e8:	2204      	movs	r2, #4
 80004ea:	701a      	strb	r2, [r3, #0]
	}
}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000000 	.word	0x20000000

080004f4 <Sim7600_Reset>:
 * @param None
 * @retval None
 * @brief This is function for control RESET signal in Simcom7600 module
 * @brief Keep RESET signal LOW during TIMER_TO_RESET_SIM7600
 */
void Sim7600_Reset(void){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	SCH_Add_Task(Reset_Signal_High, 0, 0);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2100      	movs	r1, #0
 80004fc:	480a      	ldr	r0, [pc, #40]	; (8000528 <Sim7600_Reset+0x34>)
 80004fe:	f001 fc05 	bl	8001d0c <SCH_Add_Task>
	SCH_Add_Task(Reset_Signal_Low, TIMER_TO_RESET_SIM7600, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	21c8      	movs	r1, #200	; 0xc8
 8000506:	4809      	ldr	r0, [pc, #36]	; (800052c <Sim7600_Reset+0x38>)
 8000508:	f001 fc00 	bl	8001d0c <SCH_Add_Task>
	Clear_Sim7600_Timeout_Flag();
 800050c:	f7ff fef8 	bl	8000300 <Clear_Sim7600_Timeout_Flag>
	SCH_Add_Task(Set_Sim7600_Timeout_Flag, TIMER_TO_RESET_SIM7600_TIMEOUT, 0);
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000516:	4806      	ldr	r0, [pc, #24]	; (8000530 <Sim7600_Reset+0x3c>)
 8000518:	f001 fbf8 	bl	8001d0c <SCH_Add_Task>
	sim7600_state = SIM7600_WAIT_FOR_RESET_RESPONE;
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <Sim7600_Reset+0x40>)
 800051e:	2203      	movs	r2, #3
 8000520:	701a      	strb	r2, [r3, #0]
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	08000481 	.word	0x08000481
 800052c:	08000469 	.word	0x08000469
 8000530:	080002e9 	.word	0x080002e9
 8000534:	20000000 	.word	0x20000000

08000538 <Sim7600_Wait_For_Reset_Respone>:
 * Sim7600_Wait_For_Reset_Respone()
 * @param None
 * @retval None
 * @brief This is function for waiting simcom7600_timeout_flag is SET
 */
void Sim7600_Wait_For_Reset_Respone(void){
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	if(is_Sim7600_TimeOutFlag()){
 800053c:	f7ff feca 	bl	80002d4 <is_Sim7600_TimeOutFlag>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d002      	beq.n	800054c <Sim7600_Wait_For_Reset_Respone+0x14>
		sim7600_state = SIM7600_POWER_ON;
 8000546:	4b02      	ldr	r3, [pc, #8]	; (8000550 <Sim7600_Wait_For_Reset_Respone+0x18>)
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
	}
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000000 	.word	0x20000000

08000554 <Sim7600_Start_Up>:
 * Sim7600_Start_Up()
 * @param None
 * @retval None
 * @brief This is function for start up Simcom7600 module. Timeout is TIMEOUT_STARTUP_RESET.
 */
void Sim7600_Start_Up(void){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	sim7600_state = SIM7600_WAIT_FOR_START_UP_RESPONE;
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <Sim7600_Start_Up+0x20>)
 800055a:	2205      	movs	r2, #5
 800055c:	701a      	strb	r2, [r3, #0]
	Clear_Sim7600_Timeout_Flag();
 800055e:	f7ff fecf 	bl	8000300 <Clear_Sim7600_Timeout_Flag>
	SCH_Add_Task(Set_Sim7600_Timeout_Flag, TIMEOUT_STARTUP_RESET, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000568:	4803      	ldr	r0, [pc, #12]	; (8000578 <Sim7600_Start_Up+0x24>)
 800056a:	f001 fbcf 	bl	8001d0c <SCH_Add_Task>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000000 	.word	0x20000000
 8000578:	080002e9 	.word	0x080002e9

0800057c <Sim7600_Wait_For_Start_Up_Respone>:
 * @param None
 * @retval None
 * @brief This is function for waiting start up respond.
 * @brief If Timeout so Reset Simcom7600 else AT_Result = AT_PB_DONE switch to SIM7600_GET_IMEI
 */
void Sim7600_Wait_For_Start_Up_Respone(void){
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	// Time out if too long time cannot receive PB_DONE
	if(is_Sim7600_TimeOutFlag()){
 8000580:	f7ff fea8 	bl	80002d4 <is_Sim7600_TimeOutFlag>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d002      	beq.n	8000590 <Sim7600_Wait_For_Start_Up_Respone+0x14>
		sim7600_state = SIM7600_RESET;
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <Sim7600_Wait_For_Start_Up_Respone+0x38>)
 800058c:	2202      	movs	r2, #2
 800058e:	701a      	strb	r2, [r3, #0]
	}
//	Wait_For_Respone(AT_PB_DONE);
	switch (Get_AT_Result()){
 8000590:	f001 fb66 	bl	8001c60 <Get_AT_Result>
 8000594:	4603      	mov	r3, r0
 8000596:	2b03      	cmp	r3, #3
 8000598:	d107      	bne.n	80005aa <Sim7600_Wait_For_Start_Up_Respone+0x2e>
		case AT_PB_DONE:
			Clear_AT_Result();
 800059a:	f001 fb6b 	bl	8001c74 <Clear_AT_Result>
			Set_Sim7600_Timeout_Flag();
 800059e:	f7ff fea3 	bl	80002e8 <Set_Sim7600_Timeout_Flag>
			sim7600_state = SIM7600_SETTING;//SIM7600_GET_IMEI;
 80005a2:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <Sim7600_Wait_For_Start_Up_Respone+0x38>)
 80005a4:	2206      	movs	r2, #6
 80005a6:	701a      	strb	r2, [r3, #0]
			break;
 80005a8:	e002      	b.n	80005b0 <Sim7600_Wait_For_Start_Up_Respone+0x34>
		default:
			Clear_AT_Result();
 80005aa:	f001 fb63 	bl	8001c74 <Clear_AT_Result>
			break;
 80005ae:	bf00      	nop
	}
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000000 	.word	0x20000000

080005b8 <Sim7600_Setting>:
 * Sim7600_Get_Imei()
 * @param None
 * @retval None
 * @brief This is function for Get IMEI from Simcomo7600 to set LockerID.
 */
void Sim7600_Setting(void){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	// Clear_Reiceive_Buffer();
	UART_SIM7600_Transmit(setting_command[setting_index]);
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <Sim7600_Setting+0x20>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <Sim7600_Setting+0x24>)
 80005c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fa4b 	bl	8000a64 <UART_SIM7600_Transmit>
	sim7600_state = SIM7600_WAIT_FOR_SETTING_RESPONE;
 80005ce:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <Sim7600_Setting+0x28>)
 80005d0:	2207      	movs	r2, #7
 80005d2:	701a      	strb	r2, [r3, #0]
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000186 	.word	0x20000186
 80005dc:	20000004 	.word	0x20000004
 80005e0:	20000000 	.word	0x20000000

080005e4 <Sim7600_Wait_For_Setting_Respone>:
 * Sim7600_Wait_For_Get_Imei_Respone()
 * @param None
 * @retval None
 * @brief This is function for waiting respone from GET IMEI State.
 */
void Sim7600_Wait_For_Setting_Respone(void){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	if(is_Sim7600_TimeOutFlag()){
 80005e8:	f7ff fe74 	bl	80002d4 <is_Sim7600_TimeOutFlag>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d030      	beq.n	8000654 <Sim7600_Wait_For_Setting_Respone+0x70>
		switch (Get_AT_Result()){
 80005f2:	f001 fb35 	bl	8001c60 <Get_AT_Result>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d002      	beq.n	8000602 <Sim7600_Wait_For_Setting_Respone+0x1e>
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d023      	beq.n	8000648 <Sim7600_Wait_For_Setting_Respone+0x64>
			case AT_ERROR:
				Clear_AT_Result();
				sim7600_state = SIM7600_MAX_STATE;
				break;
			default:
				break;
 8000600:	e02b      	b.n	800065a <Sim7600_Wait_For_Setting_Respone+0x76>
				Clear_AT_Result();
 8000602:	f001 fb37 	bl	8001c74 <Clear_AT_Result>
				if(setting_index >= (NO_SETTING_COMMAND - 1) ){
 8000606:	4b16      	ldr	r3, [pc, #88]	; (8000660 <Sim7600_Wait_For_Setting_Respone+0x7c>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b07      	cmp	r3, #7
 800060c:	d906      	bls.n	800061c <Sim7600_Wait_For_Setting_Respone+0x38>
					setting_index = 0;
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <Sim7600_Wait_For_Setting_Respone+0x7c>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
					sim7600_state = SIM7600_GET_IMEI;
 8000614:	4b13      	ldr	r3, [pc, #76]	; (8000664 <Sim7600_Wait_For_Setting_Respone+0x80>)
 8000616:	2208      	movs	r2, #8
 8000618:	701a      	strb	r2, [r3, #0]
 800061a:	e008      	b.n	800062e <Sim7600_Wait_For_Setting_Respone+0x4a>
					setting_index ++;
 800061c:	4b10      	ldr	r3, [pc, #64]	; (8000660 <Sim7600_Wait_For_Setting_Respone+0x7c>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	3301      	adds	r3, #1
 8000622:	b2da      	uxtb	r2, r3
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <Sim7600_Wait_For_Setting_Respone+0x7c>)
 8000626:	701a      	strb	r2, [r3, #0]
					sim7600_state = SIM7600_SETTING;
 8000628:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <Sim7600_Wait_For_Setting_Respone+0x80>)
 800062a:	2206      	movs	r2, #6
 800062c:	701a      	strb	r2, [r3, #0]
				if(setting_index == 6){
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <Sim7600_Wait_For_Setting_Respone+0x7c>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b06      	cmp	r3, #6
 8000634:	d110      	bne.n	8000658 <Sim7600_Wait_For_Setting_Respone+0x74>
					Clear_Sim7600_Timeout_Flag();
 8000636:	f7ff fe63 	bl	8000300 <Clear_Sim7600_Timeout_Flag>
					SCH_Add_Task(Set_Sim7600_Timeout_Flag, 500, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000640:	4809      	ldr	r0, [pc, #36]	; (8000668 <Sim7600_Wait_For_Setting_Respone+0x84>)
 8000642:	f001 fb63 	bl	8001d0c <SCH_Add_Task>
				break;
 8000646:	e007      	b.n	8000658 <Sim7600_Wait_For_Setting_Respone+0x74>
				Clear_AT_Result();
 8000648:	f001 fb14 	bl	8001c74 <Clear_AT_Result>
				sim7600_state = SIM7600_MAX_STATE;
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <Sim7600_Wait_For_Setting_Respone+0x80>)
 800064e:	220a      	movs	r2, #10
 8000650:	701a      	strb	r2, [r3, #0]
				break;
 8000652:	e002      	b.n	800065a <Sim7600_Wait_For_Setting_Respone+0x76>
		}
	}
 8000654:	bf00      	nop
 8000656:	e000      	b.n	800065a <Sim7600_Wait_For_Setting_Respone+0x76>
				break;
 8000658:	bf00      	nop
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000186 	.word	0x20000186
 8000664:	20000000 	.word	0x20000000
 8000668:	080002e9 	.word	0x080002e9

0800066c <Sim7600_Get_Imei>:
 * Sim7600_Get_Imei()
 * @param None
 * @retval None
 * @brief This is function for Get IMEI from Simcomo7600 to set LockerID.
 */
void Sim7600_Get_Imei(void){
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	// Clear_Reiceive_Buffer();
	UART_SIM7600_Transmit((uint8_t*)"AT+SIMEI?\r\n");
 8000670:	4803      	ldr	r0, [pc, #12]	; (8000680 <Sim7600_Get_Imei+0x14>)
 8000672:	f000 f9f7 	bl	8000a64 <UART_SIM7600_Transmit>
	sim7600_state = SIM7600_WAIT_FOR_GET_IMEI_RESPONE;
 8000676:	4b03      	ldr	r3, [pc, #12]	; (8000684 <Sim7600_Get_Imei+0x18>)
 8000678:	2209      	movs	r2, #9
 800067a:	701a      	strb	r2, [r3, #0]
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	08005cb8 	.word	0x08005cb8
 8000684:	20000000 	.word	0x20000000

08000688 <Sim7600_Wait_For_Get_Imei_Respone>:
 * Sim7600_Wait_For_Get_Imei_Respone()
 * @param None
 * @retval None
 * @brief This is function for waiting respone from GET IMEI State.
 */
void Sim7600_Wait_For_Get_Imei_Respone(void){
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_IMEI);
	switch (Get_AT_Result()){
 800068c:	f001 fae8 	bl	8001c60 <Get_AT_Result>
 8000690:	4603      	mov	r3, r0
 8000692:	2b01      	cmp	r3, #1
 8000694:	d010      	beq.n	80006b8 <Sim7600_Wait_For_Get_Imei_Respone+0x30>
 8000696:	2b06      	cmp	r3, #6
 8000698:	d113      	bne.n	80006c2 <Sim7600_Wait_For_Get_Imei_Respone+0x3a>
		case AT_IMEI:
			if(Get_Imei()){
 800069a:	f000 f835 	bl	8000708 <Get_Imei>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d010      	beq.n	80006c6 <Sim7600_Wait_For_Get_Imei_Respone+0x3e>
				Clear_AT_Result();
 80006a4:	f001 fae6 	bl	8001c74 <Clear_AT_Result>
				sim7600_state = SIM7600_MAX_STATE;
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <Sim7600_Wait_For_Get_Imei_Respone+0x44>)
 80006aa:	220a      	movs	r2, #10
 80006ac:	701a      	strb	r2, [r3, #0]
				UART_DEBUG_Transmit_Size(imei_buffer, IMEI_LENGTH);
 80006ae:	210f      	movs	r1, #15
 80006b0:	4807      	ldr	r0, [pc, #28]	; (80006d0 <Sim7600_Wait_For_Get_Imei_Respone+0x48>)
 80006b2:	f000 fa8f 	bl	8000bd4 <UART_DEBUG_Transmit_Size>
			}
			break;
 80006b6:	e006      	b.n	80006c6 <Sim7600_Wait_For_Get_Imei_Respone+0x3e>
		case AT_ERROR:
			Clear_AT_Result();
 80006b8:	f001 fadc 	bl	8001c74 <Clear_AT_Result>
			sim7600_state = SIM7600_MAX_STATE;
 80006bc:	4b03      	ldr	r3, [pc, #12]	; (80006cc <Sim7600_Wait_For_Get_Imei_Respone+0x44>)
 80006be:	220a      	movs	r2, #10
 80006c0:	701a      	strb	r2, [r3, #0]
		default:
			break;
 80006c2:	bf00      	nop
 80006c4:	e000      	b.n	80006c8 <Sim7600_Wait_For_Get_Imei_Respone+0x40>
			break;
 80006c6:	bf00      	nop
	}
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000000 	.word	0x20000000
 80006d0:	200011e8 	.word	0x200011e8

080006d4 <SIM7600_Set_State>:
 * SIM7600_Set_State()
 * @param sim7600_state
 * @retval None
 * @brief This function set mqtt_state.
 */
void SIM7600_Set_State(Sim7600_State newState){
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
	sim7600_state = newState;
 80006de:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <SIM7600_Set_State+0x1c>)
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	7013      	strb	r3, [r2, #0]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000000 	.word	0x20000000

080006f4 <Sim7600_Get_IMEI>:
 * Sim7600_Get_IMEI()
 * @param None
 * @retval uint8_t*: pointer to IMEI buffer
 * @brief This function Set mqtt_state.
 */
uint8_t *Sim7600_Get_IMEI(){
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
//	return "862649046029253";//imei_buffer;
	return (uint8_t*)"locker-dev-1";
 80006f8:	4b02      	ldr	r3, [pc, #8]	; (8000704 <Sim7600_Get_IMEI+0x10>)
//	return imei_buffer;
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	08005cc4 	.word	0x08005cc4

08000708 <Get_Imei>:





FlagStatus Get_Imei(){
 8000708:	b598      	push	{r3, r4, r7, lr}
 800070a:	af00      	add	r7, sp, #0
	if(imei_count == IMEI_LENGTH){
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <Get_Imei+0x40>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b0f      	cmp	r3, #15
 8000712:	d104      	bne.n	800071e <Get_Imei+0x16>
		imei_count = 0;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <Get_Imei+0x40>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
		return SET;
 800071a:	2301      	movs	r3, #1
 800071c:	e012      	b.n	8000744 <Get_Imei+0x3c>
	}
	if(UART_SIM7600_Received_Buffer_Available()){
 800071e:	f000 f9cd 	bl	8000abc <UART_SIM7600_Received_Buffer_Available>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d00c      	beq.n	8000742 <Get_Imei+0x3a>
		imei_buffer[imei_count++] = UART_SIM7600_Read_Received_Buffer();
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <Get_Imei+0x40>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	1c5a      	adds	r2, r3, #1
 800072e:	b2d1      	uxtb	r1, r2
 8000730:	4a05      	ldr	r2, [pc, #20]	; (8000748 <Get_Imei+0x40>)
 8000732:	7011      	strb	r1, [r2, #0]
 8000734:	461c      	mov	r4, r3
 8000736:	f000 f9d7 	bl	8000ae8 <UART_SIM7600_Read_Received_Buffer>
 800073a:	4603      	mov	r3, r0
 800073c:	461a      	mov	r2, r3
 800073e:	4b03      	ldr	r3, [pc, #12]	; (800074c <Get_Imei+0x44>)
 8000740:	551a      	strb	r2, [r3, r4]
	}
	return RESET;
 8000742:	2300      	movs	r3, #0
}
 8000744:	4618      	mov	r0, r3
 8000746:	bd98      	pop	{r3, r4, r7, pc}
 8000748:	20000184 	.word	0x20000184
 800074c:	200011e8 	.word	0x200011e8

08000750 <Reset_SimConfiguration_State>:

void Reset_SimConfiguration_State(){
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	SIM7600_Set_State(SIM7600_RESET);
 8000754:	2002      	movs	r0, #2
 8000756:	f7ff ffbd 	bl	80006d4 <SIM7600_Set_State>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <GPIO_Init>:
  * @brief 	GPIO Initialization Function: 74HC245, LED, Buzzer, SPI_CS, SwitchID, SIM7600_GPIO
  * @param 	None
  * @retval None
  */
void GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
//	GPIO_InitTypeDef GPIO_InitStruct = {0};

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <GPIO_Init+0x74>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	4a1a      	ldr	r2, [pc, #104]	; (80007d4 <GPIO_Init+0x74>)
 800076c:	f043 0310 	orr.w	r3, r3, #16
 8000770:	6193      	str	r3, [r2, #24]
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <GPIO_Init+0x74>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	f003 0310 	and.w	r3, r3, #16
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <GPIO_Init+0x74>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	4a14      	ldr	r2, [pc, #80]	; (80007d4 <GPIO_Init+0x74>)
 8000784:	f043 0320 	orr.w	r3, r3, #32
 8000788:	6193      	str	r3, [r2, #24]
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <GPIO_Init+0x74>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	f003 0320 	and.w	r3, r3, #32
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <GPIO_Init+0x74>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <GPIO_Init+0x74>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6193      	str	r3, [r2, #24]
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <GPIO_Init+0x74>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <GPIO_Init+0x74>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <GPIO_Init+0x74>)
 80007b4:	f043 0308 	orr.w	r3, r3, #8
 80007b8:	6193      	str	r3, [r2, #24]
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <GPIO_Init+0x74>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	f003 0308 	and.w	r3, r3, #8
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]
//	urgent_init();
//	LED_Init();
//	Buzzer_Init();
//	SPI_CS_Init();
//	Switch_Init();
	Sim7600_GPIO_Init();
 80007c6:	f000 f807 	bl	80007d8 <Sim7600_GPIO_Init>
//	Read_BoardID();
}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40021000 	.word	0x40021000

080007d8 <Sim7600_GPIO_Init>:

	GPIO_InitStruct.Pin = BUZZER_PIN;
	HAL_GPIO_Init(BUZZER_PORT, &GPIO_InitStruct);
}

void Sim7600_GPIO_Init(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	463b      	mov	r3, r7
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	60fb      	str	r3, [r7, #12]

	GPIO_InitStruct.Pin = SIM7600_4G_PWRON;
 80007f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007fa:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(SIM7600_4G_PWRON_PORT, &GPIO_InitStruct);
 80007fc:	463b      	mov	r3, r7
 80007fe:	4619      	mov	r1, r3
 8000800:	480d      	ldr	r0, [pc, #52]	; (8000838 <Sim7600_GPIO_Init+0x60>)
 8000802:	f002 fce1 	bl	80031c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SIM7600_4G_PERST;
 8000806:	f44f 7300 	mov.w	r3, #512	; 0x200
 800080a:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(SIM7600_4G_PERST_PORT, &GPIO_InitStruct);
 800080c:	463b      	mov	r3, r7
 800080e:	4619      	mov	r1, r3
 8000810:	4809      	ldr	r0, [pc, #36]	; (8000838 <Sim7600_GPIO_Init+0x60>)
 8000812:	f002 fcd9 	bl	80031c8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(SIM7600_4G_PWRON_PORT, SIM7600_4G_PWRON, SET);
 8000816:	2201      	movs	r2, #1
 8000818:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081c:	4806      	ldr	r0, [pc, #24]	; (8000838 <Sim7600_GPIO_Init+0x60>)
 800081e:	f002 fe67 	bl	80034f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SIM7600_4G_PERST_PORT, SIM7600_4G_PERST, SET);
 8000822:	2201      	movs	r2, #1
 8000824:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000828:	4803      	ldr	r0, [pc, #12]	; (8000838 <Sim7600_GPIO_Init+0x60>)
 800082a:	f002 fe61 	bl	80034f0 <HAL_GPIO_WritePin>
}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40011000 	.word	0x40011000

0800083c <SPI2_Init>:





HAL_StatusTypeDef SPI2_Init(void){
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	/*##-1- Configure the SPI peripheral #######################################*/
		  /* Set the SPI parameters */
		  Spi2Handle.Instance               = SPI2;
 8000840:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <SPI2_Init+0x7c>)
 8000842:	4a1e      	ldr	r2, [pc, #120]	; (80008bc <SPI2_Init+0x80>)
 8000844:	601a      	str	r2, [r3, #0]
		  Spi2Handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <SPI2_Init+0x7c>)
 8000848:	2228      	movs	r2, #40	; 0x28
 800084a:	61da      	str	r2, [r3, #28]
		  Spi2Handle.Init.Direction         = SPI_DIRECTION_2LINES;
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <SPI2_Init+0x7c>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
		  Spi2Handle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <SPI2_Init+0x7c>)
 8000854:	2200      	movs	r2, #0
 8000856:	615a      	str	r2, [r3, #20]
		  Spi2Handle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8000858:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <SPI2_Init+0x7c>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
		  Spi2Handle.Init.DataSize          = SPI_DATASIZE_8BIT;
 800085e:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <SPI2_Init+0x7c>)
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
		  Spi2Handle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <SPI2_Init+0x7c>)
 8000866:	2200      	movs	r2, #0
 8000868:	621a      	str	r2, [r3, #32]
		  Spi2Handle.Init.TIMode            = SPI_TIMODE_DISABLE;
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <SPI2_Init+0x7c>)
 800086c:	2200      	movs	r2, #0
 800086e:	625a      	str	r2, [r3, #36]	; 0x24
		  Spi2Handle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <SPI2_Init+0x7c>)
 8000872:	2200      	movs	r2, #0
 8000874:	629a      	str	r2, [r3, #40]	; 0x28
		  Spi2Handle.Init.CRCPolynomial     = 7;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <SPI2_Init+0x7c>)
 8000878:	2207      	movs	r2, #7
 800087a:	62da      	str	r2, [r3, #44]	; 0x2c
//		  Spi2Handle.Init.NSS               = SPI_NSS_SOFT;
		  Spi2Handle.Init.NSS               = SPI_NSS_HARD_OUTPUT;
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <SPI2_Init+0x7c>)
 800087e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000882:	619a      	str	r2, [r3, #24]
		  Spi2Handle.Init.Mode = SPI_MODE_MASTER;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <SPI2_Init+0x7c>)
 8000886:	f44f 7282 	mov.w	r2, #260	; 0x104
 800088a:	605a      	str	r2, [r3, #4]

		  if(HAL_SPI_Init(&Spi2Handle) != HAL_OK)
 800088c:	480a      	ldr	r0, [pc, #40]	; (80008b8 <SPI2_Init+0x7c>)
 800088e:	f003 fa61 	bl	8003d54 <HAL_SPI_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d003      	beq.n	80008a0 <SPI2_Init+0x64>
		  {
		    /* Initialization Error */
		    Error_Handler();
 8000898:	f001 fe7a 	bl	8002590 <Error_Handler>
		    return HAL_ERROR;
 800089c:	2301      	movs	r3, #1
 800089e:	e008      	b.n	80008b2 <SPI2_Init+0x76>
		  }
		  /* SPI block is enabled prior calling SPI transmit/receive functions, in order to get CLK signal properly pulled down.
		     Otherwise, SPI CLK signal is not clean on this board and leads to errors during transfer */
		  __HAL_SPI_ENABLE(&Spi2Handle);
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <SPI2_Init+0x7c>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <SPI2_Init+0x7c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008ae:	601a      	str	r2, [r3, #0]
		  return HAL_OK;
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200011f8 	.word	0x200011f8
 80008bc:	40003800 	.word	0x40003800

080008c0 <ResetChipSelect>:

void ResetChipSelect(void){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_PORT,SPI2_NSS_PIN, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ca:	4802      	ldr	r0, [pc, #8]	; (80008d4 <ResetChipSelect+0x14>)
 80008cc:	f002 fe10 	bl	80034f0 <HAL_GPIO_WritePin>
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40010c00 	.word	0x40010c00

080008d8 <SetChipSelect>:

void SetChipSelect(void){
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_PORT,SPI2_NSS_PIN, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e2:	4802      	ldr	r0, [pc, #8]	; (80008ec <SetChipSelect+0x14>)
 80008e4:	f002 fe04 	bl	80034f0 <HAL_GPIO_WritePin>
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40010c00 	.word	0x40010c00

080008f0 <SystemClock_Config>:
 * @author thodo
 */
#include <Peripheral/app_system_clock_config.h>

HAL_StatusTypeDef SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b090      	sub	sp, #64	; 0x40
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 0318 	add.w	r3, r7, #24
 80008fa:	2228      	movs	r2, #40	; 0x28
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f004 fc94 	bl	800522c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000912:	230a      	movs	r3, #10
 8000914:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000916:	2301      	movs	r3, #1
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091a:	2310      	movs	r3, #16
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800091e:	2301      	movs	r3, #1
 8000920:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000922:	2302      	movs	r3, #2
 8000924:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000926:	2300      	movs	r3, #0
 8000928:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800092a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800092e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000930:	f107 0318 	add.w	r3, r7, #24
 8000934:	4618      	mov	r0, r3
 8000936:	f002 fdf3 	bl	8003520 <HAL_RCC_OscConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0x54>
  {
	  return HAL_ERROR;
 8000940:	2301      	movs	r3, #1
 8000942:	e017      	b.n	8000974 <SystemClock_Config+0x84>
	  Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000944:	230f      	movs	r3, #15
 8000946:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000948:	2302      	movs	r3, #2
 800094a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000954:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2102      	movs	r1, #2
 800095e:	4618      	mov	r0, r3
 8000960:	f003 f85e 	bl	8003a20 <HAL_RCC_ClockConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d003      	beq.n	8000972 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800096a:	f001 fe11 	bl	8002590 <Error_Handler>
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	e000      	b.n	8000974 <SystemClock_Config+0x84>
  }
  return HAL_OK;
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	3740      	adds	r7, #64	; 0x40
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <Timer_Init>:

/* Prescaler declaration */
uint32_t uwPrescalerValue = 0;


HAL_StatusTypeDef Timer_Init(void){
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	      2) by calling HAL API function HAL_RCC_GetSysClockFreq()
	      3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
	  ----------------------------------------------------------------------- */

	  /* Compute the prescaler value to have TIMx counter clock equal to 10000 Hz */
	  uwPrescalerValue = (uint32_t)(SystemCoreClock / 10000) - 1;
 8000980:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <Timer_Init+0x68>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a18      	ldr	r2, [pc, #96]	; (80009e8 <Timer_Init+0x6c>)
 8000986:	fba2 2303 	umull	r2, r3, r2, r3
 800098a:	0b5b      	lsrs	r3, r3, #13
 800098c:	3b01      	subs	r3, #1
 800098e:	4a17      	ldr	r2, [pc, #92]	; (80009ec <Timer_Init+0x70>)
 8000990:	6013      	str	r3, [r2, #0]

	  /* Set TIMx instance */
	  htim3.Instance = TIM3;
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <Timer_Init+0x74>)
 8000994:	4a17      	ldr	r2, [pc, #92]	; (80009f4 <Timer_Init+0x78>)
 8000996:	601a      	str	r2, [r3, #0]
	       + Period = 10000 - 1
	       + Prescaler = (SystemCoreClock/10000) - 1
	       + ClockDivision = 0
	       + Counter direction = Up
	  */
	  htim3.Init.Period            = TIMER_CYCLE*10-1;
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <Timer_Init+0x74>)
 800099a:	2263      	movs	r2, #99	; 0x63
 800099c:	60da      	str	r2, [r3, #12]
	  htim3.Init.Prescaler         = uwPrescalerValue;
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <Timer_Init+0x70>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a13      	ldr	r2, [pc, #76]	; (80009f0 <Timer_Init+0x74>)
 80009a4:	6053      	str	r3, [r2, #4]
	  htim3.Init.ClockDivision     = 0;
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <Timer_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
	  htim3.Init.CounterMode       = TIM_COUNTERMODE_UP;
 80009ac:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <Timer_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
	  htim3.Init.RepetitionCounter = 0;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <Timer_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	615a      	str	r2, [r3, #20]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b8:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <Timer_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	619a      	str	r2, [r3, #24]

	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009be:	480c      	ldr	r0, [pc, #48]	; (80009f0 <Timer_Init+0x74>)
 80009c0:	f003 fc2e 	bl	8004220 <HAL_TIM_Base_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <Timer_Init+0x52>
	  {
	    /* Initialization Error */
		  return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e008      	b.n	80009e0 <Timer_Init+0x64>
	    Error_Handler();
	  }

	  /*##-2- Start the TIM Base generation in interrupt mode ####################*/
	  /* Start Channel1 */
	  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 80009ce:	4808      	ldr	r0, [pc, #32]	; (80009f0 <Timer_Init+0x74>)
 80009d0:	f003 fc76 	bl	80042c0 <HAL_TIM_Base_Start_IT>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <Timer_Init+0x62>
	  {
	    /* Starting Error */
		  return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	e000      	b.n	80009e0 <Timer_Init+0x64>
	    Error_Handler();
	  }
	  return HAL_OK;
 80009de:	2300      	movs	r3, #0
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200000f8 	.word	0x200000f8
 80009e8:	d1b71759 	.word	0xd1b71759
 80009ec:	20000188 	.word	0x20000188
 80009f0:	2000125c 	.word	0x2000125c
 80009f4:	40000400 	.word	0x40000400

080009f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000a00:	f001 f95c 	bl	8001cbc <SCH_Update>
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <UART_SIM7600_Init>:
  * @brief USART SIMCOM7600 Initialization Function
  * @param None
  * @retval None
  */
HAL_StatusTypeDef UART_SIM7600_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <UART_SIM7600_Init+0x50>)
 8000a12:	4a13      	ldr	r2, [pc, #76]	; (8000a60 <UART_SIM7600_Init+0x54>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <UART_SIM7600_Init+0x50>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <UART_SIM7600_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <UART_SIM7600_Init+0x50>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <UART_SIM7600_Init+0x50>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <UART_SIM7600_Init+0x50>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <UART_SIM7600_Init+0x50>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <UART_SIM7600_Init+0x50>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a42:	4806      	ldr	r0, [pc, #24]	; (8000a5c <UART_SIM7600_Init+0x50>)
 8000a44:	f003 fe54 	bl	80046f0 <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <UART_SIM7600_Init+0x46>
  {
	  return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e002      	b.n	8000a58 <UART_SIM7600_Init+0x4c>
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */
  Start_Receive_IT();
 8000a52:	f000 f8d7 	bl	8000c04 <Start_Receive_IT>
  /* USER CODE END USART1_Init 2 */
  return HAL_OK;
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200022ec 	.word	0x200022ec
 8000a60:	40013800 	.word	0x40013800

08000a64 <UART_SIM7600_Transmit>:
/**
  * @brief UART_SIM7600_Transmit Initialization Function
  * @param None
  * @retval None
  */
void UART_SIM7600_Transmit(uint8_t *buffer){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	uint16_t tmpLen = strlen((char*)buffer);
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff fbd9 	bl	8000224 <strlen>
 8000a72:	4603      	mov	r3, r0
 8000a74:	81fb      	strh	r3, [r7, #14]
	if(tmpLen == 0) {
 8000a76:	89fb      	ldrh	r3, [r7, #14]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d017      	beq.n	8000aac <UART_SIM7600_Transmit+0x48>
		return;
	} else {
#ifdef DEBUG
		LOG(buffer);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f000 f88b 	bl	8000b98 <UART_DEBUG_Transmit>
//		if (DEBUG){
////			while(!UartTransmitReady);
//			UART_DEBUG_Transmit(buffer);
//		}
		//TODO: never do while in state machine
		while(!UartTransmitReady);
 8000a82:	bf00      	nop
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <UART_SIM7600_Transmit+0x50>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d0fa      	beq.n	8000a84 <UART_SIM7600_Transmit+0x20>
		if(HAL_UART_Transmit_IT(&huart1, buffer, tmpLen)!= HAL_OK){
 8000a8e:	89fb      	ldrh	r3, [r7, #14]
 8000a90:	461a      	mov	r2, r3
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	4808      	ldr	r0, [pc, #32]	; (8000ab8 <UART_SIM7600_Transmit+0x54>)
 8000a96:	f003 ff0a 	bl	80048ae <HAL_UART_Transmit_IT>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <UART_SIM7600_Transmit+0x40>
			Error_Handler();
 8000aa0:	f001 fd76 	bl	8002590 <Error_Handler>
		}
		UartTransmitReady = RESET;
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <UART_SIM7600_Transmit+0x50>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
	}
	return;
 8000aaa:	e000      	b.n	8000aae <UART_SIM7600_Transmit+0x4a>
		return;
 8000aac:	bf00      	nop
}
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000078 	.word	0x20000078
 8000ab8:	200022ec 	.word	0x200022ec

08000abc <UART_SIM7600_Received_Buffer_Available>:
  * @brief UART_SIM7600_Received_Buffer_Available Initialization Function
  * @param None
  * @param None
  * @retval None
  */
uint8_t UART_SIM7600_Received_Buffer_Available(void){
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
	if(receiveBufferIndexTail != receiveBufferIndexHead){
 8000ac0:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <UART_SIM7600_Received_Buffer_Available+0x24>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <UART_SIM7600_Received_Buffer_Available+0x28>)
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d001      	beq.n	8000ad4 <UART_SIM7600_Received_Buffer_Available+0x18>
		return 1;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e000      	b.n	8000ad6 <UART_SIM7600_Received_Buffer_Available+0x1a>
	} else {
		return 0;
 8000ad4:	2300      	movs	r3, #0
	}
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	2000018e 	.word	0x2000018e
 8000ae4:	2000018c 	.word	0x2000018c

08000ae8 <UART_SIM7600_Read_Received_Buffer>:
  * @param None
  * @param None
  * @retval ch character at Tail index of buffer and Tail will increase 1
  */
char log[10];
uint8_t UART_SIM7600_Read_Received_Buffer(void){
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
	if(receiveBufferIndexTail == receiveBufferIndexHead) return 0xff;
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <UART_SIM7600_Read_Received_Buffer+0x50>)
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <UART_SIM7600_Read_Received_Buffer+0x54>)
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d101      	bne.n	8000b02 <UART_SIM7600_Read_Received_Buffer+0x1a>
 8000afe:	23ff      	movs	r3, #255	; 0xff
 8000b00:	e015      	b.n	8000b2e <UART_SIM7600_Read_Received_Buffer+0x46>
	uint8_t ch = aUART_RxBuffer[receiveBufferIndexTail];
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <UART_SIM7600_Read_Received_Buffer+0x50>)
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <UART_SIM7600_Read_Received_Buffer+0x58>)
 8000b0c:	5c9b      	ldrb	r3, [r3, r2]
 8000b0e:	71fb      	strb	r3, [r7, #7]
	receiveBufferIndexTail = (receiveBufferIndexTail + 1) % UART_RX_BUFFERSIZE;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <UART_SIM7600_Read_Received_Buffer+0x50>)
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	3301      	adds	r3, #1
 8000b18:	425a      	negs	r2, r3
 8000b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b1e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000b22:	bf58      	it	pl
 8000b24:	4253      	negpl	r3, r2
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <UART_SIM7600_Read_Received_Buffer+0x50>)
 8000b2a:	801a      	strh	r2, [r3, #0]
//	sprintf(log,"%d\r\n",receiveBufferIndexTail,receiveBufferIndexHead);
//	LOG("1111");
	return ch;
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	2000018e 	.word	0x2000018e
 8000b3c:	2000018c 	.word	0x2000018c
 8000b40:	200012ec 	.word	0x200012ec

08000b44 <UART_DEBUG_Init>:
  * @brief UART_DEBUG_Init Initialization Function
  * @param None
  * @retval None
  */
HAL_StatusTypeDef UART_DEBUG_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <UART_DEBUG_Init+0x4c>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <UART_DEBUG_Init+0x50>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <UART_DEBUG_Init+0x4c>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <UART_DEBUG_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <UART_DEBUG_Init+0x4c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <UART_DEBUG_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <UART_DEBUG_Init+0x4c>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <UART_DEBUG_Init+0x4c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <UART_DEBUG_Init+0x4c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <UART_DEBUG_Init+0x4c>)
 8000b7c:	f003 fdb8 	bl	80046f0 <HAL_UART_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <UART_DEBUG_Init+0x46>
  {
	  return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e000      	b.n	8000b8c <UART_DEBUG_Init+0x48>
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	200012a4 	.word	0x200012a4
 8000b94:	40004800 	.word	0x40004800

08000b98 <UART_DEBUG_Transmit>:
/**
  * @brief USART Transmit Initialization Function
  * @param buffer buffer to transmit via UART DEBUG without known size, it will use strlen(buffer) to get size.
  * @retval None
  */
void UART_DEBUG_Transmit(uint8_t *buffer){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	uint16_t tmpLen = strlen((char*)buffer);
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff fb3f 	bl	8000224 <strlen>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	81fb      	strh	r3, [r7, #14]
	if(tmpLen == 0){
 8000baa:	89fb      	ldrh	r3, [r7, #14]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d00b      	beq.n	8000bc8 <UART_DEBUG_Transmit+0x30>
		return;
	}
	if(HAL_UART_Transmit(&huart3, (uint8_t*)buffer, tmpLen ,0xFF)!= HAL_OK){
 8000bb0:	89fa      	ldrh	r2, [r7, #14]
 8000bb2:	23ff      	movs	r3, #255	; 0xff
 8000bb4:	6879      	ldr	r1, [r7, #4]
 8000bb6:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <UART_DEBUG_Transmit+0x38>)
 8000bb8:	f003 fde7 	bl	800478a <HAL_UART_Transmit>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d003      	beq.n	8000bca <UART_DEBUG_Transmit+0x32>
		Error_Handler();
 8000bc2:	f001 fce5 	bl	8002590 <Error_Handler>
 8000bc6:	e000      	b.n	8000bca <UART_DEBUG_Transmit+0x32>
		return;
 8000bc8:	bf00      	nop
	}
//	UartTransmitReady = RESET;
}
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200012a4 	.word	0x200012a4

08000bd4 <UART_DEBUG_Transmit_Size>:
  * @brief UART_DEBUG_Transmit_Size Initialization Function
  * @param buffer: buffer contain data for transmit
  * @param buffer_size: size of data to transmit
  * @retval None
  */
void UART_DEBUG_Transmit_Size(uint8_t *buffer ,uint16_t buffer_size){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	807b      	strh	r3, [r7, #2]
	if(HAL_UART_Transmit(&huart3, (uint8_t*)buffer, buffer_size,200)!= HAL_OK){
 8000be0:	887a      	ldrh	r2, [r7, #2]
 8000be2:	23c8      	movs	r3, #200	; 0xc8
 8000be4:	6879      	ldr	r1, [r7, #4]
 8000be6:	4806      	ldr	r0, [pc, #24]	; (8000c00 <UART_DEBUG_Transmit_Size+0x2c>)
 8000be8:	f003 fdcf 	bl	800478a <HAL_UART_Transmit>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <UART_DEBUG_Transmit_Size+0x22>
		Error_Handler();
 8000bf2:	f001 fccd 	bl	8002590 <Error_Handler>
	}
//	UartTransmitReady = RESET;
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200012a4 	.word	0x200012a4

08000c04 <Start_Receive_IT>:
  * @brief Setup_Receive_IT Initialization Function
  * It will receive 1 bytes.
  * @param None
  * @retval None
  */
void Start_Receive_IT(void){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	if(HAL_UART_Receive_IT(&huart1, &temp, 1)!= HAL_OK){
 8000c08:	2201      	movs	r2, #1
 8000c0a:	4905      	ldr	r1, [pc, #20]	; (8000c20 <Start_Receive_IT+0x1c>)
 8000c0c:	4805      	ldr	r0, [pc, #20]	; (8000c24 <Start_Receive_IT+0x20>)
 8000c0e:	f003 fe92 	bl	8004936 <HAL_UART_Receive_IT>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <Start_Receive_IT+0x18>
		Error_Handler();
 8000c18:	f001 fcba 	bl	8002590 <Error_Handler>
	}
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	200012e8 	.word	0x200012e8
 8000c24:	200022ec 	.word	0x200022ec

08000c28 <HAL_UART_RxCpltCallback>:
  * When Simcom7600 transmit data to UART, so HAL_UART_RxCpltCallback will be called.
  * HAL_UART_RxCpltCallback will recalled HAL_UART_Receive_IT to continous UART Interrupt Service.
  * @param huart UART_HandleTypeDef be handled in Callback
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <HAL_UART_RxCpltCallback+0x50>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d11a      	bne.n	8000c70 <HAL_UART_RxCpltCallback+0x48>
		aUART_RxBuffer[receiveBufferIndexHead] = temp;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <HAL_UART_RxCpltCallback+0x54>)
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <HAL_UART_RxCpltCallback+0x58>)
 8000c44:	7819      	ldrb	r1, [r3, #0]
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <HAL_UART_RxCpltCallback+0x5c>)
 8000c48:	5499      	strb	r1, [r3, r2]
		receiveBufferIndexHead = (receiveBufferIndexHead + 1) % UART_RX_BUFFERSIZE;
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <HAL_UART_RxCpltCallback+0x54>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	3301      	adds	r3, #1
 8000c52:	425a      	negs	r2, r3
 8000c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c58:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000c5c:	bf58      	it	pl
 8000c5e:	4253      	negpl	r3, r2
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_UART_RxCpltCallback+0x54>)
 8000c64:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(huart, &temp, 1);
 8000c66:	2201      	movs	r2, #1
 8000c68:	4905      	ldr	r1, [pc, #20]	; (8000c80 <HAL_UART_RxCpltCallback+0x58>)
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f003 fe63 	bl	8004936 <HAL_UART_Receive_IT>
	}
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40013800 	.word	0x40013800
 8000c7c:	2000018c 	.word	0x2000018c
 8000c80:	200012e8 	.word	0x200012e8
 8000c84:	200012ec 	.word	0x200012ec

08000c88 <HAL_UART_TxCpltCallback>:
/**
  * @brief HAL_UART_TxCpltCallback Initialization Function
  * @param UartHandle UART_HandleTypeDef be handled in Callback
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartTransmitReady = SET;
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <HAL_UART_TxCpltCallback+0x18>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	701a      	strb	r2, [r3, #0]
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	20000078 	.word	0x20000078

08000ca4 <Clear_Reiceive_Buffer>:
  * @brief Clear_Reiceive_Buffer Initialization Function
  * Clear all data in RX buffer.
  * @param None
  * @retval None
  */
void Clear_Reiceive_Buffer(void){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	memset(aUART_RxBuffer,0,UART_RX_BUFFERSIZE);
 8000ca8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cac:	2100      	movs	r1, #0
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <Clear_Reiceive_Buffer+0x20>)
 8000cb0:	f004 fabc 	bl	800522c <memset>
	receiveBufferIndexHead = 0;
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <Clear_Reiceive_Buffer+0x24>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	801a      	strh	r2, [r3, #0]
	receiveBufferIndexTail = 0;
 8000cba:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <Clear_Reiceive_Buffer+0x28>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	801a      	strh	r2, [r3, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200012ec 	.word	0x200012ec
 8000cc8:	2000018c 	.word	0x2000018c
 8000ccc:	2000018e 	.word	0x2000018e

08000cd0 <HTTP_Display_State>:

/**
 * HTTP_Display_State()
 * @brief This is function for display state of State Machine. It only show State when having a state changation.
 */
void HTTP_Display_State(void){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	if(prev_http_state!=http_state){
 8000cd4:	4b2c      	ldr	r3, [pc, #176]	; (8000d88 <HTTP_Display_State+0xb8>)
 8000cd6:	781a      	ldrb	r2, [r3, #0]
 8000cd8:	4b2c      	ldr	r3, [pc, #176]	; (8000d8c <HTTP_Display_State+0xbc>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d04d      	beq.n	8000d7c <HTTP_Display_State+0xac>
		prev_http_state = http_state;
 8000ce0:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <HTTP_Display_State+0xbc>)
 8000ce2:	781a      	ldrb	r2, [r3, #0]
 8000ce4:	4b28      	ldr	r3, [pc, #160]	; (8000d88 <HTTP_Display_State+0xb8>)
 8000ce6:	701a      	strb	r2, [r3, #0]
		switch (http_state) {
 8000ce8:	4b28      	ldr	r3, [pc, #160]	; (8000d8c <HTTP_Display_State+0xbc>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b0a      	cmp	r3, #10
 8000cee:	d847      	bhi.n	8000d80 <HTTP_Display_State+0xb0>
 8000cf0:	a201      	add	r2, pc, #4	; (adr r2, 8000cf8 <HTTP_Display_State+0x28>)
 8000cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf6:	bf00      	nop
 8000cf8:	08000d25 	.word	0x08000d25
 8000cfc:	08000d2d 	.word	0x08000d2d
 8000d00:	08000d35 	.word	0x08000d35
 8000d04:	08000d3d 	.word	0x08000d3d
 8000d08:	08000d45 	.word	0x08000d45
 8000d0c:	08000d4d 	.word	0x08000d4d
 8000d10:	08000d55 	.word	0x08000d55
 8000d14:	08000d5d 	.word	0x08000d5d
 8000d18:	08000d65 	.word	0x08000d65
 8000d1c:	08000d6d 	.word	0x08000d6d
 8000d20:	08000d75 	.word	0x08000d75
			case HTTP_INIT:
				LOG("\r\nHTTP INIT\r\n");
 8000d24:	481a      	ldr	r0, [pc, #104]	; (8000d90 <HTTP_Display_State+0xc0>)
 8000d26:	f7ff ff37 	bl	8000b98 <UART_DEBUG_Transmit>
				break;
 8000d2a:	e02a      	b.n	8000d82 <HTTP_Display_State+0xb2>
			case HTTP_WAIT_FOR_INIT:
				LOG("\r\nHTTP WAIT FOR INIT\r\n");
 8000d2c:	4819      	ldr	r0, [pc, #100]	; (8000d94 <HTTP_Display_State+0xc4>)
 8000d2e:	f7ff ff33 	bl	8000b98 <UART_DEBUG_Transmit>
				break;
 8000d32:	e026      	b.n	8000d82 <HTTP_Display_State+0xb2>
			case HTTP_PARA:
				LOG("\r\nHTTP PARA\r\n");
 8000d34:	4818      	ldr	r0, [pc, #96]	; (8000d98 <HTTP_Display_State+0xc8>)
 8000d36:	f7ff ff2f 	bl	8000b98 <UART_DEBUG_Transmit>
				break;
 8000d3a:	e022      	b.n	8000d82 <HTTP_Display_State+0xb2>
			case HTTP_WAIT_FOR_PARA:
				LOG("\r\nHTTP WAIT FOR PARA\r\n");
 8000d3c:	4817      	ldr	r0, [pc, #92]	; (8000d9c <HTTP_Display_State+0xcc>)
 8000d3e:	f7ff ff2b 	bl	8000b98 <UART_DEBUG_Transmit>
				break;
 8000d42:	e01e      	b.n	8000d82 <HTTP_Display_State+0xb2>
			case HTTP_ACTION:
				LOG("\r\nHTTP ACTION\r\n");
 8000d44:	4816      	ldr	r0, [pc, #88]	; (8000da0 <HTTP_Display_State+0xd0>)
 8000d46:	f7ff ff27 	bl	8000b98 <UART_DEBUG_Transmit>
				break;
 8000d4a:	e01a      	b.n	8000d82 <HTTP_Display_State+0xb2>
			case HTTP_WAIT_FOR_ACTION:
				LOG("\r\nHTTP WAIT FOR ACTION\r\n");
 8000d4c:	4815      	ldr	r0, [pc, #84]	; (8000da4 <HTTP_Display_State+0xd4>)
 8000d4e:	f7ff ff23 	bl	8000b98 <UART_DEBUG_Transmit>
				//TODO recheck, break or not ?
				break;
 8000d52:	e016      	b.n	8000d82 <HTTP_Display_State+0xb2>
			case HTTP_READ:
				LOG("\r\nHTTP READ\r\n");
 8000d54:	4814      	ldr	r0, [pc, #80]	; (8000da8 <HTTP_Display_State+0xd8>)
 8000d56:	f7ff ff1f 	bl	8000b98 <UART_DEBUG_Transmit>
				break;
 8000d5a:	e012      	b.n	8000d82 <HTTP_Display_State+0xb2>
			case HTTP_WAIT_FOR_READ:
				LOG("\r\nHTTP WAIT FOR READ\r\n");
 8000d5c:	4813      	ldr	r0, [pc, #76]	; (8000dac <HTTP_Display_State+0xdc>)
 8000d5e:	f7ff ff1b 	bl	8000b98 <UART_DEBUG_Transmit>
				break;
 8000d62:	e00e      	b.n	8000d82 <HTTP_Display_State+0xb2>
			case HTTP_TERM:
				LOG("\r\nHTTP TERM\r\n");
 8000d64:	4812      	ldr	r0, [pc, #72]	; (8000db0 <HTTP_Display_State+0xe0>)
 8000d66:	f7ff ff17 	bl	8000b98 <UART_DEBUG_Transmit>
				break;
 8000d6a:	e00a      	b.n	8000d82 <HTTP_Display_State+0xb2>
			case HTTP_WAIT_FOR_TERM:
				LOG("\r\nHTTP WAIT FOR TERM\r\n");
 8000d6c:	4811      	ldr	r0, [pc, #68]	; (8000db4 <HTTP_Display_State+0xe4>)
 8000d6e:	f7ff ff13 	bl	8000b98 <UART_DEBUG_Transmit>
				break;
 8000d72:	e006      	b.n	8000d82 <HTTP_Display_State+0xb2>
			case HTTP_DONE:
				LOG("\r\nHTTP DONE\r\n");
 8000d74:	4810      	ldr	r0, [pc, #64]	; (8000db8 <HTTP_Display_State+0xe8>)
 8000d76:	f7ff ff0f 	bl	8000b98 <UART_DEBUG_Transmit>
				break;
 8000d7a:	e002      	b.n	8000d82 <HTTP_Display_State+0xb2>
			default:
				break;
		}
	}
 8000d7c:	bf00      	nop
 8000d7e:	e000      	b.n	8000d82 <HTTP_Display_State+0xb2>
				break;
 8000d80:	bf00      	nop

}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2000019c 	.word	0x2000019c
 8000d8c:	2000019d 	.word	0x2000019d
 8000d90:	08005cd4 	.word	0x08005cd4
 8000d94:	08005ce4 	.word	0x08005ce4
 8000d98:	08005cfc 	.word	0x08005cfc
 8000d9c:	08005d0c 	.word	0x08005d0c
 8000da0:	08005d24 	.word	0x08005d24
 8000da4:	08005d34 	.word	0x08005d34
 8000da8:	08005d50 	.word	0x08005d50
 8000dac:	08005d60 	.word	0x08005d60
 8000db0:	08005d78 	.word	0x08005d78
 8000db4:	08005d88 	.word	0x08005d88
 8000db8:	08005da0 	.word	0x08005da0

08000dbc <HTTP_Run>:

/**
 * HTTP_Run()
 * @brief This is function can be called from external file. It run follow state machine method. Not have param.
 */
uint8_t HTTP_Run(){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	HTTP_Display_State();
 8000dc0:	f7ff ff86 	bl	8000cd0 <HTTP_Display_State>
	if(http_state < HTTP_DONE){
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <HTTP_Run+0x3c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b09      	cmp	r3, #9
 8000dca:	d808      	bhi.n	8000dde <HTTP_Run+0x22>
		(*http_state_machine[http_state].func)();
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HTTP_Run+0x3c>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <HTTP_Run+0x40>)
 8000dd2:	00db      	lsls	r3, r3, #3
 8000dd4:	4413      	add	r3, r2
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	4798      	blx	r3
		return 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e009      	b.n	8000df2 <HTTP_Run+0x36>
	}
	else if(http_state == HTTP_DONE){
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HTTP_Run+0x3c>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b0a      	cmp	r3, #10
 8000de4:	d104      	bne.n	8000df0 <HTTP_Run+0x34>
		LOG("Get into HTTP DONE");
 8000de6:	4806      	ldr	r0, [pc, #24]	; (8000e00 <HTTP_Run+0x44>)
 8000de8:	f7ff fed6 	bl	8000b98 <UART_DEBUG_Transmit>
		return 1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e000      	b.n	8000df2 <HTTP_Run+0x36>
	}
	else{
		//HTTP Error
		return 2;
 8000df0:	2302      	movs	r3, #2
	}
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2000019d 	.word	0x2000019d
 8000dfc:	20000080 	.word	0x20000080
 8000e00:	08005db0 	.word	0x08005db0

08000e04 <HTTP_Init>:

/**
 * HTTP_Init()
 * @brief This is function for initiating Http service
 */
void HTTP_Init(){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	content_length = 0;
 8000e08:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <HTTP_Init+0x34>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
	Clear_Reiceive_Buffer();
 8000e0e:	f7ff ff49 	bl	8000ca4 <Clear_Reiceive_Buffer>
	if(default_atcommand){
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HTTP_Init+0x38>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <HTTP_Init+0x1e>
		sprintf(http_at_command,"AT+HTTPINIT\r\n");
 8000e1a:	4909      	ldr	r1, [pc, #36]	; (8000e40 <HTTP_Init+0x3c>)
 8000e1c:	4809      	ldr	r0, [pc, #36]	; (8000e44 <HTTP_Init+0x40>)
 8000e1e:	f004 fa0d 	bl	800523c <siprintf>
	}
	UART_SIM7600_Transmit((uint8_t *)http_at_command);
 8000e22:	4808      	ldr	r0, [pc, #32]	; (8000e44 <HTTP_Init+0x40>)
 8000e24:	f7ff fe1e 	bl	8000a64 <UART_SIM7600_Transmit>
	Clear_Http_Command();
 8000e28:	f000 fd54 	bl	80018d4 <Clear_Http_Command>
	http_state = HTTP_WAIT_FOR_INIT;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HTTP_Init+0x44>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000194 	.word	0x20000194
 8000e3c:	2000007a 	.word	0x2000007a
 8000e40:	08005dc4 	.word	0x08005dc4
 8000e44:	2000337c 	.word	0x2000337c
 8000e48:	2000019d 	.word	0x2000019d

08000e4c <HTTP_Wait_For_Init>:

/**
 * HTTP_Wait_For_Init()
 * @brief This is function for waiting respone from initiating Http service
 */
void HTTP_Wait_For_Init(){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_OK);
	switch (Get_AT_Result()){
 8000e50:	f000 ff06 	bl	8001c60 <Get_AT_Result>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d002      	beq.n	8000e60 <HTTP_Wait_For_Init+0x14>
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d006      	beq.n	8000e6c <HTTP_Wait_For_Init+0x20>
		case AT_ERROR:
			Clear_AT_Result();
			http_state=HTTP_MAX_STATE;
			break;
		default:
			break;
 8000e5e:	e00b      	b.n	8000e78 <HTTP_Wait_For_Init+0x2c>
			Clear_AT_Result();
 8000e60:	f000 ff08 	bl	8001c74 <Clear_AT_Result>
			http_state=HTTP_PARA;
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <HTTP_Wait_For_Init+0x30>)
 8000e66:	2202      	movs	r2, #2
 8000e68:	701a      	strb	r2, [r3, #0]
			break;
 8000e6a:	e005      	b.n	8000e78 <HTTP_Wait_For_Init+0x2c>
			Clear_AT_Result();
 8000e6c:	f000 ff02 	bl	8001c74 <Clear_AT_Result>
			http_state=HTTP_MAX_STATE;
 8000e70:	4b02      	ldr	r3, [pc, #8]	; (8000e7c <HTTP_Wait_For_Init+0x30>)
 8000e72:	220b      	movs	r2, #11
 8000e74:	701a      	strb	r2, [r3, #0]
			break;
 8000e76:	bf00      	nop
	}
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	2000019d 	.word	0x2000019d

08000e80 <HTTP_Para>:

/**
 * HTTP_Para()
 * @brief This is function for passing parameter to HTTP Request
 */
void HTTP_Para(){
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af04      	add	r7, sp, #16
	if (default_atcommand) {
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HTTP_Para+0x4c>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d011      	beq.n	8000eb2 <HTTP_Para+0x32>
		sprintf(http_at_command,"AT+HTTPPARA=\"URL\",\"https://%s-%s.cloudfunctions.net/handle_firmware_request?lockerid=%s&current_version=%s&checking=%d&update_status=%d\"\r\n",CLOUDFUNCTION_REGION,CLOUDFUNCTION_PROJECTID,Sim7600_Get_IMEI(),"v0.0.1",0,Get_Update_Firmware_Status());
 8000e8e:	f7ff fc31 	bl	80006f4 <Sim7600_Get_IMEI>
 8000e92:	4604      	mov	r4, r0
 8000e94:	f001 f9e8 	bl	8002268 <Get_Update_Firmware_Status>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	9303      	str	r3, [sp, #12]
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	9302      	str	r3, [sp, #8]
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <HTTP_Para+0x50>)
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	9400      	str	r4, [sp, #0]
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HTTP_Para+0x54>)
 8000ea8:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <HTTP_Para+0x58>)
 8000eaa:	490c      	ldr	r1, [pc, #48]	; (8000edc <HTTP_Para+0x5c>)
 8000eac:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <HTTP_Para+0x60>)
 8000eae:	f004 f9c5 	bl	800523c <siprintf>
	}
	UART_SIM7600_Transmit((uint8_t*)http_at_command);
 8000eb2:	480b      	ldr	r0, [pc, #44]	; (8000ee0 <HTTP_Para+0x60>)
 8000eb4:	f7ff fdd6 	bl	8000a64 <UART_SIM7600_Transmit>
	Clear_Http_Command();
 8000eb8:	f000 fd0c 	bl	80018d4 <Clear_Http_Command>
	http_state = HTTP_WAIT_FOR_PARA;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HTTP_Para+0x64>)
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	701a      	strb	r2, [r3, #0]
}
 8000ec2:	bf00      	nop
 8000ec4:	3704      	adds	r7, #4
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd90      	pop	{r4, r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	2000007a 	.word	0x2000007a
 8000ed0:	08005e80 	.word	0x08005e80
 8000ed4:	08005dd4 	.word	0x08005dd4
 8000ed8:	08005de4 	.word	0x08005de4
 8000edc:	08005df4 	.word	0x08005df4
 8000ee0:	2000337c 	.word	0x2000337c
 8000ee4:	2000019d 	.word	0x2000019d

08000ee8 <HTTP_Wait_For_Para>:
/**
 * HTTP_Wait_For_Para()
 * @brief This is function for waiting respone from  HTTP_PARA state
 * If AT_Result is AT_OK so switch to HTTP_ACTION else it's AT_ERROR so switch to HTTP_MAX_STATE
 */
void HTTP_Wait_For_Para(){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_OK);
	switch (Get_AT_Result()){
 8000eec:	f000 feb8 	bl	8001c60 <Get_AT_Result>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d002      	beq.n	8000efc <HTTP_Wait_For_Para+0x14>
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d006      	beq.n	8000f08 <HTTP_Wait_For_Para+0x20>
		case AT_ERROR:
			Clear_AT_Result();
			http_state=HTTP_MAX_STATE;
			break;
		default:
			break;
 8000efa:	e00b      	b.n	8000f14 <HTTP_Wait_For_Para+0x2c>
			Clear_AT_Result();
 8000efc:	f000 feba 	bl	8001c74 <Clear_AT_Result>
			http_state=HTTP_ACTION;
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HTTP_Wait_For_Para+0x30>)
 8000f02:	2204      	movs	r2, #4
 8000f04:	701a      	strb	r2, [r3, #0]
			break;
 8000f06:	e005      	b.n	8000f14 <HTTP_Wait_For_Para+0x2c>
			Clear_AT_Result();
 8000f08:	f000 feb4 	bl	8001c74 <Clear_AT_Result>
			http_state=HTTP_MAX_STATE;
 8000f0c:	4b02      	ldr	r3, [pc, #8]	; (8000f18 <HTTP_Wait_For_Para+0x30>)
 8000f0e:	220b      	movs	r2, #11
 8000f10:	701a      	strb	r2, [r3, #0]
			break;
 8000f12:	bf00      	nop
	}
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	2000019d 	.word	0x2000019d

08000f1c <HTTP_Action>:
/**
 * HTTP_Action()
 * @brief This is function for create request with method : GET,POST,PUT
 * Passing 0 :GET ,1:POST ,...
 */
void HTTP_Action(){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
//	Clear_Reiceive_Buffer();
	if (default_atcommand) {
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <HTTP_Action+0x38>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <HTTP_Action+0x14>
		sprintf(http_at_command,"AT+HTTPACTION=0\r\n");
 8000f28:	490b      	ldr	r1, [pc, #44]	; (8000f58 <HTTP_Action+0x3c>)
 8000f2a:	480c      	ldr	r0, [pc, #48]	; (8000f5c <HTTP_Action+0x40>)
 8000f2c:	f004 f986 	bl	800523c <siprintf>
	}
	UART_SIM7600_Transmit((uint8_t*)http_at_command);
 8000f30:	480a      	ldr	r0, [pc, #40]	; (8000f5c <HTTP_Action+0x40>)
 8000f32:	f7ff fd97 	bl	8000a64 <UART_SIM7600_Transmit>
	Clear_Http_Command();
 8000f36:	f000 fccd 	bl	80018d4 <Clear_Http_Command>
	Clear_Http_Timeout_Flag();
 8000f3a:	f000 fa2b 	bl	8001394 <Clear_Http_Timeout_Flag>
	SCH_Add_Task(Set_Http_Timeout_Flag, ACTION_TIMEOUT, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	21c8      	movs	r1, #200	; 0xc8
 8000f42:	4807      	ldr	r0, [pc, #28]	; (8000f60 <HTTP_Action+0x44>)
 8000f44:	f000 fee2 	bl	8001d0c <SCH_Add_Task>
	http_state = HTTP_WAIT_FOR_ACTION;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HTTP_Action+0x48>)
 8000f4a:	2205      	movs	r2, #5
 8000f4c:	701a      	strb	r2, [r3, #0]
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2000007a 	.word	0x2000007a
 8000f58:	08005e88 	.word	0x08005e88
 8000f5c:	2000337c 	.word	0x2000337c
 8000f60:	0800137d 	.word	0x0800137d
 8000f64:	2000019d 	.word	0x2000019d

08000f68 <HTTP_Wait_For_Action>:
 * HTTP_Wait_For_Action()
 * @brief This is function for waiting HTTP_ACTION respone
 * If AT_Result is AT_OK so switch to HTTP_READ to read HTTP Respone body
 * else AT_ERROR so switch to HTTP_MAX_STATE to reset Simcom7600
 */
void HTTP_Wait_For_Action(){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	if(is_Http_TimeOutFlag()){
 8000f6c:	f000 f9fc 	bl	8001368 <is_Http_TimeOutFlag>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d031      	beq.n	8000fda <HTTP_Wait_For_Action+0x72>
//		Wait_For_Respone(AT_OK);
		switch (Get_AT_Result()){
 8000f76:	f000 fe73 	bl	8001c60 <Get_AT_Result>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b05      	cmp	r3, #5
 8000f7e:	d009      	beq.n	8000f94 <HTTP_Wait_For_Action+0x2c>
 8000f80:	2b05      	cmp	r3, #5
 8000f82:	dc2c      	bgt.n	8000fde <HTTP_Wait_For_Action+0x76>
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d002      	beq.n	8000f8e <HTTP_Wait_For_Action+0x26>
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d020      	beq.n	8000fce <HTTP_Wait_For_Action+0x66>
			case AT_ERROR:
				Clear_AT_Result();
				http_state = HTTP_MAX_STATE;
				break;
			default:
				break;
 8000f8c:	e027      	b.n	8000fde <HTTP_Wait_For_Action+0x76>
				Clear_AT_Result();
 8000f8e:	f000 fe71 	bl	8001c74 <Clear_AT_Result>
				break;
 8000f92:	e027      	b.n	8000fe4 <HTTP_Wait_For_Action+0x7c>
				if(HTTP_Get_Content_Length()){
 8000f94:	f000 fc48 	bl	8001828 <HTTP_Get_Content_Length>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d021      	beq.n	8000fe2 <HTTP_Wait_For_Action+0x7a>
					http_response_remain = HTTP_Return_Content_Length();
 8000f9e:	f000 fca5 	bl	80018ec <HTTP_Return_Content_Length>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4a10      	ldr	r2, [pc, #64]	; (8000fe8 <HTTP_Wait_For_Action+0x80>)
 8000fa6:	6013      	str	r3, [r2, #0]
					content_length = 0;
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <HTTP_Wait_For_Action+0x84>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
					sprintf(logMsg,"\r\n%d\r\n",http_response_remain);
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HTTP_Wait_For_Action+0x80>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	490e      	ldr	r1, [pc, #56]	; (8000ff0 <HTTP_Wait_For_Action+0x88>)
 8000fb6:	480f      	ldr	r0, [pc, #60]	; (8000ff4 <HTTP_Wait_For_Action+0x8c>)
 8000fb8:	f004 f940 	bl	800523c <siprintf>
					LOG(logMsg);
 8000fbc:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <HTTP_Wait_For_Action+0x8c>)
 8000fbe:	f7ff fdeb 	bl	8000b98 <UART_DEBUG_Transmit>
					Clear_AT_Result();
 8000fc2:	f000 fe57 	bl	8001c74 <Clear_AT_Result>
					http_state = HTTP_READ;
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <HTTP_Wait_For_Action+0x90>)
 8000fc8:	2206      	movs	r2, #6
 8000fca:	701a      	strb	r2, [r3, #0]
				break;
 8000fcc:	e009      	b.n	8000fe2 <HTTP_Wait_For_Action+0x7a>
				Clear_AT_Result();
 8000fce:	f000 fe51 	bl	8001c74 <Clear_AT_Result>
				http_state = HTTP_MAX_STATE;
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <HTTP_Wait_For_Action+0x90>)
 8000fd4:	220b      	movs	r2, #11
 8000fd6:	701a      	strb	r2, [r3, #0]
				break;
 8000fd8:	e004      	b.n	8000fe4 <HTTP_Wait_For_Action+0x7c>
		}
	}
 8000fda:	bf00      	nop
 8000fdc:	e002      	b.n	8000fe4 <HTTP_Wait_For_Action+0x7c>
				break;
 8000fde:	bf00      	nop
 8000fe0:	e000      	b.n	8000fe4 <HTTP_Wait_For_Action+0x7c>
				break;
 8000fe2:	bf00      	nop
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200001a4 	.word	0x200001a4
 8000fec:	20000194 	.word	0x20000194
 8000ff0:	08005e9c 	.word	0x08005e9c
 8000ff4:	20003418 	.word	0x20003418
 8000ff8:	2000019d 	.word	0x2000019d

08000ffc <HTTP_Read>:

/**
 * HTTP_Read()
 * @brief This is function for read HTTP respone body, passing for AT number of read data. Default is MAX_HTTP_BODY = 400
 */
void HTTP_Read(){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
	uint32_t read_size;
	if(http_response_remain > (FIRMWARE_READ_SIZE_PER_TIME)){
 8001002:	4b1e      	ldr	r3, [pc, #120]	; (800107c <HTTP_Read+0x80>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800100a:	d909      	bls.n	8001020 <HTTP_Read+0x24>
		read_size = FIRMWARE_READ_SIZE_PER_TIME;
 800100c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001010:	607b      	str	r3, [r7, #4]
		http_response_remain = http_response_remain -  (FIRMWARE_READ_SIZE_PER_TIME);
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <HTTP_Read+0x80>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800101a:	4a18      	ldr	r2, [pc, #96]	; (800107c <HTTP_Read+0x80>)
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	e00d      	b.n	800103c <HTTP_Read+0x40>
	}
	else if (http_response_remain > 0 && http_response_remain < (FIRMWARE_READ_SIZE_PER_TIME)){
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <HTTP_Read+0x80>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d009      	beq.n	800103c <HTTP_Read+0x40>
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <HTTP_Read+0x80>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2bff      	cmp	r3, #255	; 0xff
 800102e:	d805      	bhi.n	800103c <HTTP_Read+0x40>
		read_size = http_response_remain;
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <HTTP_Read+0x80>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	607b      	str	r3, [r7, #4]
		http_response_remain = 0;
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <HTTP_Read+0x80>)
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
	}
	if (default_atcommand) {
 800103c:	4b10      	ldr	r3, [pc, #64]	; (8001080 <HTTP_Read+0x84>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d004      	beq.n	800104e <HTTP_Read+0x52>
		sprintf(http_at_command,"AT+HTTPREAD=0,%d\r\n",read_size);
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	490f      	ldr	r1, [pc, #60]	; (8001084 <HTTP_Read+0x88>)
 8001048:	480f      	ldr	r0, [pc, #60]	; (8001088 <HTTP_Read+0x8c>)
 800104a:	f004 f8f7 	bl	800523c <siprintf>
	}
//	Clear_Reiceive_Buffer();
	UART_SIM7600_Transmit((uint8_t *)http_at_command);
 800104e:	480e      	ldr	r0, [pc, #56]	; (8001088 <HTTP_Read+0x8c>)
 8001050:	f7ff fd08 	bl	8000a64 <UART_SIM7600_Transmit>
	Clear_Http_Timeout_Flag();
 8001054:	f000 f99e 	bl	8001394 <Clear_Http_Timeout_Flag>
	SCH_Add_Task(Set_Http_Timeout_Flag, 100, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	2164      	movs	r1, #100	; 0x64
 800105c:	480b      	ldr	r0, [pc, #44]	; (800108c <HTTP_Read+0x90>)
 800105e:	f000 fe55 	bl	8001d0c <SCH_Add_Task>
	Clear_Http_Command();
 8001062:	f000 fc37 	bl	80018d4 <Clear_Http_Command>
	HAL_Delay(100);
 8001066:	2064      	movs	r0, #100	; 0x64
 8001068:	f001 fcc6 	bl	80029f8 <HAL_Delay>
	http_state = HTTP_WAIT_FOR_READ;
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HTTP_Read+0x94>)
 800106e:	2207      	movs	r2, #7
 8001070:	701a      	strb	r2, [r3, #0]
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200001a4 	.word	0x200001a4
 8001080:	2000007a 	.word	0x2000007a
 8001084:	08005ea4 	.word	0x08005ea4
 8001088:	2000337c 	.word	0x2000337c
 800108c:	0800137d 	.word	0x0800137d
 8001090:	2000019d 	.word	0x2000019d

08001094 <HTTP_Wait_For_Read>:
 * else if AT_Result = AT_NOT_FOUND switch to HTTP_PARA every timeout
 * else if AT_Result = AT_ERROR switch to HTTP_MAX_STATE to reset Simcom7600
 */
char log[50];
uint32_t firmware_index_end;
void HTTP_Wait_For_Read(){
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
	FlagStatus flag_ret;
	switch (Get_AT_Result()){
 800109a:	f000 fde1 	bl	8001c60 <Get_AT_Result>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b09      	cmp	r3, #9
 80010a2:	f200 80f4 	bhi.w	800128e <HTTP_Wait_For_Read+0x1fa>
 80010a6:	a201      	add	r2, pc, #4	; (adr r2, 80010ac <HTTP_Wait_For_Read+0x18>)
 80010a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ac:	080010d5 	.word	0x080010d5
 80010b0:	08001289 	.word	0x08001289
 80010b4:	0800128f 	.word	0x0800128f
 80010b8:	0800128f 	.word	0x0800128f
 80010bc:	0800128f 	.word	0x0800128f
 80010c0:	0800128f 	.word	0x0800128f
 80010c4:	0800128f 	.word	0x0800128f
 80010c8:	0800116d 	.word	0x0800116d
 80010cc:	080011f9 	.word	0x080011f9
 80010d0:	080011c3 	.word	0x080011c3
		case AT_OK:
//			LOG("b");
			if(!started_record_firmware){
 80010d4:	4b74      	ldr	r3, [pc, #464]	; (80012a8 <HTTP_Wait_For_Read+0x214>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d102      	bne.n	80010e2 <HTTP_Wait_For_Read+0x4e>
				Clear_AT_Result();
 80010dc:	f000 fdca 	bl	8001c74 <Clear_AT_Result>
							Update_Firmware_Failed();
						}
					}
				}
			}
			break;
 80010e0:	e0d7      	b.n	8001292 <HTTP_Wait_For_Read+0x1fe>
				flag_ret = HTTP_Firmware_Data(RESET);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 f99e 	bl	8001424 <HTTP_Firmware_Data>
 80010e8:	4603      	mov	r3, r0
 80010ea:	73fb      	strb	r3, [r7, #15]
				if(flag_ret){
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f000 80cf 	beq.w	8001292 <HTTP_Wait_For_Read+0x1fe>
					Clear_AT_Result();
 80010f4:	f000 fdbe 	bl	8001c74 <Clear_AT_Result>
					sprintf(logMsg,"\r\nhttp_response_remain: %d\r\n",http_response_remain);
 80010f8:	4b6c      	ldr	r3, [pc, #432]	; (80012ac <HTTP_Wait_For_Read+0x218>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	496c      	ldr	r1, [pc, #432]	; (80012b0 <HTTP_Wait_For_Read+0x21c>)
 8001100:	486c      	ldr	r0, [pc, #432]	; (80012b4 <HTTP_Wait_For_Read+0x220>)
 8001102:	f004 f89b 	bl	800523c <siprintf>
					LOG(logMsg);
 8001106:	486b      	ldr	r0, [pc, #428]	; (80012b4 <HTTP_Wait_For_Read+0x220>)
 8001108:	f7ff fd46 	bl	8000b98 <UART_DEBUG_Transmit>
					if(http_response_remain > 0){
 800110c:	4b67      	ldr	r3, [pc, #412]	; (80012ac <HTTP_Wait_For_Read+0x218>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HTTP_Wait_For_Read+0x88>
						http_state = HTTP_READ;
 8001114:	4b68      	ldr	r3, [pc, #416]	; (80012b8 <HTTP_Wait_For_Read+0x224>)
 8001116:	2206      	movs	r2, #6
 8001118:	701a      	strb	r2, [r3, #0]
			break;
 800111a:	e0ba      	b.n	8001292 <HTTP_Wait_For_Read+0x1fe>
						sprintf(log,"\r\nchecksum : %d\r\n",checksum);
 800111c:	4b67      	ldr	r3, [pc, #412]	; (80012bc <HTTP_Wait_For_Read+0x228>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	4966      	ldr	r1, [pc, #408]	; (80012c0 <HTTP_Wait_For_Read+0x22c>)
 8001126:	4618      	mov	r0, r3
 8001128:	f004 f888 	bl	800523c <siprintf>
						LOG(log);
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fd32 	bl	8000b98 <UART_DEBUG_Transmit>
						if(checksum == firmware_checksum){
 8001134:	4b61      	ldr	r3, [pc, #388]	; (80012bc <HTTP_Wait_For_Read+0x228>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b29a      	uxth	r2, r3
 800113a:	4b62      	ldr	r3, [pc, #392]	; (80012c4 <HTTP_Wait_For_Read+0x230>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	429a      	cmp	r2, r3
 8001140:	d10b      	bne.n	800115a <HTTP_Wait_For_Read+0xc6>
							http_state = HTTP_DONE;
 8001142:	4b5d      	ldr	r3, [pc, #372]	; (80012b8 <HTTP_Wait_For_Read+0x224>)
 8001144:	220a      	movs	r2, #10
 8001146:	701a      	strb	r2, [r3, #0]
							started_record_firmware = RESET;
 8001148:	4b57      	ldr	r3, [pc, #348]	; (80012a8 <HTTP_Wait_For_Read+0x214>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
							Update_Firmware_Success();
 800114e:	f001 f87f 	bl	8002250 <Update_Firmware_Success>
							LOG("After Erase done\r\n");
 8001152:	485d      	ldr	r0, [pc, #372]	; (80012c8 <HTTP_Wait_For_Read+0x234>)
 8001154:	f7ff fd20 	bl	8000b98 <UART_DEBUG_Transmit>
			break;
 8001158:	e09b      	b.n	8001292 <HTTP_Wait_For_Read+0x1fe>
							http_state = HTTP_DONE;
 800115a:	4b57      	ldr	r3, [pc, #348]	; (80012b8 <HTTP_Wait_For_Read+0x224>)
 800115c:	220a      	movs	r2, #10
 800115e:	701a      	strb	r2, [r3, #0]
							started_record_firmware = RESET;
 8001160:	4b51      	ldr	r3, [pc, #324]	; (80012a8 <HTTP_Wait_For_Read+0x214>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
							Update_Firmware_Failed();
 8001166:	f001 f867 	bl	8002238 <Update_Firmware_Failed>
			break;
 800116a:	e092      	b.n	8001292 <HTTP_Wait_For_Read+0x1fe>
		case AT_FIRMWARE_VERSION:
			firmware_version_check = Get_IntegerValue_From_HTTP_Respone();
 800116c:	f000 f91e 	bl	80013ac <Get_IntegerValue_From_HTTP_Respone>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	4b55      	ldr	r3, [pc, #340]	; (80012cc <HTTP_Wait_For_Read+0x238>)
 8001176:	801a      	strh	r2, [r3, #0]
			if(firmware_version_check != 0xFFFF){
 8001178:	4b54      	ldr	r3, [pc, #336]	; (80012cc <HTTP_Wait_For_Read+0x238>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001180:	4293      	cmp	r3, r2
 8001182:	f000 8088 	beq.w	8001296 <HTTP_Wait_For_Read+0x202>
				Clear_AT_Result();
 8001186:	f000 fd75 	bl	8001c74 <Clear_AT_Result>
				Reset_Result();
 800118a:	f000 fb97 	bl	80018bc <Reset_Result>
				if(firmware_version_check  == 0){
 800118e:	4b4f      	ldr	r3, [pc, #316]	; (80012cc <HTTP_Wait_For_Read+0x238>)
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d109      	bne.n	80011aa <HTTP_Wait_For_Read+0x116>
					Clear_AT_Result();
 8001196:	f000 fd6d 	bl	8001c74 <Clear_AT_Result>
					LOG("DON'T HAVE NEW VERSION\r\n");
 800119a:	484d      	ldr	r0, [pc, #308]	; (80012d0 <HTTP_Wait_For_Read+0x23c>)
 800119c:	f7ff fcfc 	bl	8000b98 <UART_DEBUG_Transmit>
					Update_Firmware_Success();
 80011a0:	f001 f856 	bl	8002250 <Update_Firmware_Success>
					Jump_To_Current_Firmware();
 80011a4:	f001 f83a 	bl	800221c <Jump_To_Current_Firmware>
				else{
					Flash_Erase(firmware_address, http_response_remain);
					LOG("HAVE NEW VERSION\r\n");
				}
			}
			break;
 80011a8:	e075      	b.n	8001296 <HTTP_Wait_For_Read+0x202>
					Flash_Erase(firmware_address, http_response_remain);
 80011aa:	4b4a      	ldr	r3, [pc, #296]	; (80012d4 <HTTP_Wait_For_Read+0x240>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a3f      	ldr	r2, [pc, #252]	; (80012ac <HTTP_Wait_For_Read+0x218>)
 80011b0:	6812      	ldr	r2, [r2, #0]
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f001 f86d 	bl	8002294 <Flash_Erase>
					LOG("HAVE NEW VERSION\r\n");
 80011ba:	4847      	ldr	r0, [pc, #284]	; (80012d8 <HTTP_Wait_For_Read+0x244>)
 80011bc:	f7ff fcec 	bl	8000b98 <UART_DEBUG_Transmit>
			break;
 80011c0:	e069      	b.n	8001296 <HTTP_Wait_For_Read+0x202>
		case AT_FIRMWARE_CHECKSUM:
			firmware_checksum = Get_IntegerValue_From_HTTP_Respone();
 80011c2:	f000 f8f3 	bl	80013ac <Get_IntegerValue_From_HTTP_Respone>
 80011c6:	4603      	mov	r3, r0
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b3e      	ldr	r3, [pc, #248]	; (80012c4 <HTTP_Wait_For_Read+0x230>)
 80011cc:	801a      	strh	r2, [r3, #0]
			if(firmware_checksum != 0xFFFF){
 80011ce:	4b3d      	ldr	r3, [pc, #244]	; (80012c4 <HTTP_Wait_For_Read+0x230>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d05f      	beq.n	800129a <HTTP_Wait_For_Read+0x206>
				sprintf(log,"\r\nChecksum : %d\r\n",firmware_checksum);
 80011da:	4b3a      	ldr	r3, [pc, #232]	; (80012c4 <HTTP_Wait_For_Read+0x230>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	493e      	ldr	r1, [pc, #248]	; (80012dc <HTTP_Wait_For_Read+0x248>)
 80011e2:	483f      	ldr	r0, [pc, #252]	; (80012e0 <HTTP_Wait_For_Read+0x24c>)
 80011e4:	f004 f82a 	bl	800523c <siprintf>
				LOG(log);
 80011e8:	483d      	ldr	r0, [pc, #244]	; (80012e0 <HTTP_Wait_For_Read+0x24c>)
 80011ea:	f7ff fcd5 	bl	8000b98 <UART_DEBUG_Transmit>
				Clear_AT_Result();
 80011ee:	f000 fd41 	bl	8001c74 <Clear_AT_Result>
				Reset_Result();
 80011f2:	f000 fb63 	bl	80018bc <Reset_Result>
			}
			break;
 80011f6:	e050      	b.n	800129a <HTTP_Wait_For_Read+0x206>
		// Receive from UART Buffer and Save to Flash
		case AT_FIRMWARE_DATA:
			// If dont have new version
			// If have new Version
			started_record_firmware = SET;
 80011f8:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <HTTP_Wait_For_Read+0x214>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	701a      	strb	r2, [r3, #0]
			flag_ret = HTTP_Firmware_Data(SET);
 80011fe:	2001      	movs	r0, #1
 8001200:	f000 f910 	bl	8001424 <HTTP_Firmware_Data>
 8001204:	4603      	mov	r3, r0
 8001206:	73fb      	strb	r3, [r7, #15]
			// If Get done
			if(flag_ret){
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d047      	beq.n	800129e <HTTP_Wait_For_Read+0x20a>
				Clear_AT_Result();
 800120e:	f000 fd31 	bl	8001c74 <Clear_AT_Result>
				one_kb_index++;
 8001212:	4b34      	ldr	r3, [pc, #208]	; (80012e4 <HTTP_Wait_For_Read+0x250>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	3301      	adds	r3, #1
 8001218:	b29a      	uxth	r2, r3
 800121a:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <HTTP_Wait_For_Read+0x250>)
 800121c:	801a      	strh	r2, [r3, #0]
				// If still have firmware data
				sprintf(log,"firmware_index : %d\r\n",firmware_index);
 800121e:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <HTTP_Wait_For_Read+0x254>)
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	4931      	ldr	r1, [pc, #196]	; (80012ec <HTTP_Wait_For_Read+0x258>)
 8001226:	482e      	ldr	r0, [pc, #184]	; (80012e0 <HTTP_Wait_For_Read+0x24c>)
 8001228:	f004 f808 	bl	800523c <siprintf>
				LOG(log);
 800122c:	482c      	ldr	r0, [pc, #176]	; (80012e0 <HTTP_Wait_For_Read+0x24c>)
 800122e:	f7ff fcb3 	bl	8000b98 <UART_DEBUG_Transmit>
				if(http_response_remain > 0){
 8001232:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <HTTP_Wait_For_Read+0x218>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HTTP_Wait_For_Read+0x1ae>
					http_state = HTTP_READ;
 800123a:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <HTTP_Wait_For_Read+0x224>)
 800123c:	2206      	movs	r2, #6
 800123e:	701a      	strb	r2, [r3, #0]
						Update_Firmware_Failed();
					}

				}
			}
			break;
 8001240:	e02d      	b.n	800129e <HTTP_Wait_For_Read+0x20a>
					sprintf(log,"\r\nchecksum : %d\r\n",checksum);
 8001242:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <HTTP_Wait_For_Read+0x228>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	491d      	ldr	r1, [pc, #116]	; (80012c0 <HTTP_Wait_For_Read+0x22c>)
 800124a:	4825      	ldr	r0, [pc, #148]	; (80012e0 <HTTP_Wait_For_Read+0x24c>)
 800124c:	f003 fff6 	bl	800523c <siprintf>
					LOG(log);
 8001250:	4823      	ldr	r0, [pc, #140]	; (80012e0 <HTTP_Wait_For_Read+0x24c>)
 8001252:	f7ff fca1 	bl	8000b98 <UART_DEBUG_Transmit>
					if(checksum == firmware_checksum){
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <HTTP_Wait_For_Read+0x228>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b29a      	uxth	r2, r3
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <HTTP_Wait_For_Read+0x230>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	429a      	cmp	r2, r3
 8001262:	d108      	bne.n	8001276 <HTTP_Wait_For_Read+0x1e2>
						http_state = HTTP_DONE;
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HTTP_Wait_For_Read+0x224>)
 8001266:	220a      	movs	r2, #10
 8001268:	701a      	strb	r2, [r3, #0]
						started_record_firmware = RESET;
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <HTTP_Wait_For_Read+0x214>)
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
						Update_Firmware_Success();
 8001270:	f000 ffee 	bl	8002250 <Update_Firmware_Success>
			break;
 8001274:	e013      	b.n	800129e <HTTP_Wait_For_Read+0x20a>
						http_state = HTTP_DONE;
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <HTTP_Wait_For_Read+0x224>)
 8001278:	220a      	movs	r2, #10
 800127a:	701a      	strb	r2, [r3, #0]
						started_record_firmware = RESET;
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <HTTP_Wait_For_Read+0x214>)
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
						Update_Firmware_Failed();
 8001282:	f000 ffd9 	bl	8002238 <Update_Firmware_Failed>
			break;
 8001286:	e00a      	b.n	800129e <HTTP_Wait_For_Read+0x20a>
		case AT_ERROR:
			Clear_AT_Result();
 8001288:	f000 fcf4 	bl	8001c74 <Clear_AT_Result>
			break;
 800128c:	e008      	b.n	80012a0 <HTTP_Wait_For_Read+0x20c>
		default:
			break;
 800128e:	bf00      	nop
 8001290:	e006      	b.n	80012a0 <HTTP_Wait_For_Read+0x20c>
			break;
 8001292:	bf00      	nop
 8001294:	e004      	b.n	80012a0 <HTTP_Wait_For_Read+0x20c>
			break;
 8001296:	bf00      	nop
 8001298:	e002      	b.n	80012a0 <HTTP_Wait_For_Read+0x20c>
			break;
 800129a:	bf00      	nop
 800129c:	e000      	b.n	80012a0 <HTTP_Wait_For_Read+0x20c>
			break;
 800129e:	bf00      	nop
	}
}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	2000019b 	.word	0x2000019b
 80012ac:	200001a4 	.word	0x200001a4
 80012b0:	08005eb8 	.word	0x08005eb8
 80012b4:	20003418 	.word	0x20003418
 80012b8:	2000019d 	.word	0x2000019d
 80012bc:	200001a0 	.word	0x200001a0
 80012c0:	08005ed8 	.word	0x08005ed8
 80012c4:	2000019e 	.word	0x2000019e
 80012c8:	08005eec 	.word	0x08005eec
 80012cc:	20003378 	.word	0x20003378
 80012d0:	08005f00 	.word	0x08005f00
 80012d4:	2000007c 	.word	0x2000007c
 80012d8:	08005f1c 	.word	0x08005f1c
 80012dc:	08005f30 	.word	0x08005f30
 80012e0:	20002330 	.word	0x20002330
 80012e4:	200001aa 	.word	0x200001aa
 80012e8:	200001a8 	.word	0x200001a8
 80012ec:	08005f44 	.word	0x08005f44

080012f0 <HTTP_Term>:

/**
 * HTTP_Term()
 * @brief This is function for terminaring HTTP Service
 */
void HTTP_Term(){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
//	Clear_Reiceive_Buffer();
	if (default_atcommand) {
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HTTP_Term+0x28>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HTTP_Term+0x14>
		sprintf(http_at_command,"AT+HTTPTERM\r\n");
 80012fc:	4907      	ldr	r1, [pc, #28]	; (800131c <HTTP_Term+0x2c>)
 80012fe:	4808      	ldr	r0, [pc, #32]	; (8001320 <HTTP_Term+0x30>)
 8001300:	f003 ff9c 	bl	800523c <siprintf>
	}
	UART_SIM7600_Transmit((uint8_t*)http_at_command);
 8001304:	4806      	ldr	r0, [pc, #24]	; (8001320 <HTTP_Term+0x30>)
 8001306:	f7ff fbad 	bl	8000a64 <UART_SIM7600_Transmit>
	Clear_Http_Command();
 800130a:	f000 fae3 	bl	80018d4 <Clear_Http_Command>
	http_state = HTTP_WAIT_FOR_TERM;
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HTTP_Term+0x34>)
 8001310:	2209      	movs	r2, #9
 8001312:	701a      	strb	r2, [r3, #0]
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	2000007a 	.word	0x2000007a
 800131c:	08005f5c 	.word	0x08005f5c
 8001320:	2000337c 	.word	0x2000337c
 8001324:	2000019d 	.word	0x2000019d

08001328 <HTTP_Wait_For_Term>:
 * HTTP_Wait_For_Term()
 * @brief This is function for waiting HTTP_TERM state respone
 * If AT_Result is AT_OK so switch to HTTP_DONE
 * else switch to HTTP_MAX_STATE and reset Simcom7600
 */
void HTTP_Wait_For_Term(){
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_OK);
	switch (Get_AT_Result()){
 800132c:	f000 fc98 	bl	8001c60 <Get_AT_Result>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <HTTP_Wait_For_Term+0x14>
 8001336:	2b01      	cmp	r3, #1
 8001338:	d006      	beq.n	8001348 <HTTP_Wait_For_Term+0x20>
		case AT_ERROR:
			Clear_AT_Result();
			http_state=HTTP_MAX_STATE;
			break;
		default:
			break;
 800133a:	e00b      	b.n	8001354 <HTTP_Wait_For_Term+0x2c>
			Clear_AT_Result();
 800133c:	f000 fc9a 	bl	8001c74 <Clear_AT_Result>
			http_state=HTTP_INIT;
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HTTP_Wait_For_Term+0x30>)
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]
			break;
 8001346:	e005      	b.n	8001354 <HTTP_Wait_For_Term+0x2c>
			Clear_AT_Result();
 8001348:	f000 fc94 	bl	8001c74 <Clear_AT_Result>
			http_state=HTTP_MAX_STATE;
 800134c:	4b02      	ldr	r3, [pc, #8]	; (8001358 <HTTP_Wait_For_Term+0x30>)
 800134e:	220b      	movs	r2, #11
 8001350:	701a      	strb	r2, [r3, #0]
			break;
 8001352:	bf00      	nop
	}
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	2000019d 	.word	0x2000019d

0800135c <HTTP_Done>:

/**
 * HTTP_Done()
 * @brief This is function for waiting FSM get out of HTTP Operation
 */
void HTTP_Done(){
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
	return;
 8001360:	bf00      	nop
}
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <is_Http_TimeOutFlag>:
/**
 * is_Http_TimeOutFlag()
 * @brief Get http_timeout_flag
 * @return http_timeout_flag
 */
FlagStatus is_Http_TimeOutFlag(void){
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
	return http_timeout_flag;
 800136c:	4b02      	ldr	r3, [pc, #8]	; (8001378 <is_Http_TimeOutFlag+0x10>)
 800136e:	781b      	ldrb	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	20000079 	.word	0x20000079

0800137c <Set_Http_Timeout_Flag>:

/**
 * Set_Http_Timeout_Flag()
 * @brief Set http_timeout_flag to SET
 */
void Set_Http_Timeout_Flag(void){
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
	http_timeout_flag = SET;
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <Set_Http_Timeout_Flag+0x14>)
 8001382:	2201      	movs	r2, #1
 8001384:	701a      	strb	r2, [r3, #0]
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000079 	.word	0x20000079

08001394 <Clear_Http_Timeout_Flag>:

/**
 * Clear_Http_Timeout_Flag()
 * @brief Clear http_timeout_flag to RESET
 */
void Clear_Http_Timeout_Flag(void){
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
	http_timeout_flag = RESET;
 8001398:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <Clear_Http_Timeout_Flag+0x14>)
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000079 	.word	0x20000079

080013ac <Get_IntegerValue_From_HTTP_Respone>:
/**
 * Get_IntegerValue_From_HTTP_Respone()
 * @brief This is function for Get Interger value from HTTP Respone body. It will read 4 character in UART buffer to ignore unnessesary character and then read Interger value until meet '"' charracter.
 * @return uint8_t value
 */
uint16_t Get_IntegerValue_From_HTTP_Respone(){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
//	"integerValue$(pointer here)": "0"
//	-> need to ignore 4 character
	if(UART_SIM7600_Received_Buffer_Available()){
 80013b2:	f7ff fb83 	bl	8000abc <UART_SIM7600_Received_Buffer_Available>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d029      	beq.n	8001410 <Get_IntegerValue_From_HTTP_Respone+0x64>
		uint8_t val_of_character = UART_SIM7600_Read_Received_Buffer();
 80013bc:	f7ff fb94 	bl	8000ae8 <UART_SIM7600_Read_Received_Buffer>
 80013c0:	4603      	mov	r3, r0
 80013c2:	71fb      	strb	r3, [r7, #7]
		if(data_index_2 ++< 2){
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <Get_IntegerValue_From_HTTP_Respone+0x70>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	1c5a      	adds	r2, r3, #1
 80013ca:	b2d1      	uxtb	r1, r2
 80013cc:	4a13      	ldr	r2, [pc, #76]	; (800141c <Get_IntegerValue_From_HTTP_Respone+0x70>)
 80013ce:	7011      	strb	r1, [r2, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d802      	bhi.n	80013da <Get_IntegerValue_From_HTTP_Respone+0x2e>
//			UART_DEBUG_Transmit("1");
			return 0xFFFF;
 80013d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013d8:	e01c      	b.n	8001414 <Get_IntegerValue_From_HTTP_Respone+0x68>
		}
		if(val_of_character!=','){
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	2b2c      	cmp	r3, #44	; 0x2c
 80013de:	d011      	beq.n	8001404 <Get_IntegerValue_From_HTTP_Respone+0x58>
//			UART_DEBUG_Transmit("2");
			result = result *10 + (uint8_t)val_of_character-48;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <Get_IntegerValue_From_HTTP_Respone+0x74>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	0092      	lsls	r2, r2, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	4413      	add	r3, r2
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	3b30      	subs	r3, #48	; 0x30
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <Get_IntegerValue_From_HTTP_Respone+0x74>)
 80013fc:	801a      	strh	r2, [r3, #0]
			return 0xFFFF;
 80013fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001402:	e007      	b.n	8001414 <Get_IntegerValue_From_HTTP_Respone+0x68>
		}
		else{
//			sprintf(log,"\r\n%d",result);
//			UART_DEBUG_Transmit(log);
			data_index_2 = 0;
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <Get_IntegerValue_From_HTTP_Respone+0x70>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
			return result;
 800140a:	4b05      	ldr	r3, [pc, #20]	; (8001420 <Get_IntegerValue_From_HTTP_Respone+0x74>)
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	e001      	b.n	8001414 <Get_IntegerValue_From_HTTP_Respone+0x68>
		}
	}
	else{
		return 0xFFFF;
 8001410:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	2000019a 	.word	0x2000019a
 8001420:	20000198 	.word	0x20000198

08001424 <HTTP_Firmware_Data>:
uint8_t offset = 0;
uint8_t temp_buffer[TEMP_BUFFER_SIZE];
uint16_t temp_index = 0;
uint8_t temp_char;
char new_log[10];
FlagStatus HTTP_Firmware_Data(FlagStatus first_time){
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b087      	sub	sp, #28
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
	 *  	"data": "0ABCDGEGGASD...
	 *  			ASDB12312512412...
	 *  			01231291512925192"
	 *  So We need seperate "new_version" and "checksum" field out of "data"
	 */
	if(first_time){
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 80ce 	beq.w	80015d2 <HTTP_Firmware_Data+0x1ae>
		if(UART_SIM7600_Received_Buffer_Available()){
 8001436:	f7ff fb41 	bl	8000abc <UART_SIM7600_Received_Buffer_Available>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 81d8 	beq.w	80017f2 <HTTP_Firmware_Data+0x3ce>
			temp_buffer[temp_index] = UART_SIM7600_Read_Received_Buffer();
 8001442:	4b93      	ldr	r3, [pc, #588]	; (8001690 <HTTP_Firmware_Data+0x26c>)
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	461c      	mov	r4, r3
 8001448:	f7ff fb4e 	bl	8000ae8 <UART_SIM7600_Read_Received_Buffer>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	4b90      	ldr	r3, [pc, #576]	; (8001694 <HTTP_Firmware_Data+0x270>)
 8001452:	551a      	strb	r2, [r3, r4]
			//If get '"' so start record firmware data
			if(temp_buffer[temp_index] == '"'){
 8001454:	4b8e      	ldr	r3, [pc, #568]	; (8001690 <HTTP_Firmware_Data+0x26c>)
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	4b8e      	ldr	r3, [pc, #568]	; (8001694 <HTTP_Firmware_Data+0x270>)
 800145c:	5c9b      	ldrb	r3, [r3, r2]
 800145e:	2b22      	cmp	r3, #34	; 0x22
 8001460:	d104      	bne.n	800146c <HTTP_Firmware_Data+0x48>
				start_record = SET;
 8001462:	4b8d      	ldr	r3, [pc, #564]	; (8001698 <HTTP_Firmware_Data+0x274>)
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
				return RESET;
 8001468:	2300      	movs	r3, #0
 800146a:	e1c3      	b.n	80017f4 <HTTP_Firmware_Data+0x3d0>
			}
			else if(start_record){
 800146c:	4b8a      	ldr	r3, [pc, #552]	; (8001698 <HTTP_Firmware_Data+0x274>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 80a0 	beq.w	80015b6 <HTTP_Firmware_Data+0x192>
				// If get '\r' so done get partial firmware data from UART
				if(temp_buffer[temp_index] == '\r'){
 8001476:	4b86      	ldr	r3, [pc, #536]	; (8001690 <HTTP_Firmware_Data+0x26c>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	4b85      	ldr	r3, [pc, #532]	; (8001694 <HTTP_Firmware_Data+0x270>)
 800147e:	5c9b      	ldrb	r3, [r3, r2]
 8001480:	2b0d      	cmp	r3, #13
 8001482:	d104      	bne.n	800148e <HTTP_Firmware_Data+0x6a>
					start_record = RESET;
 8001484:	4b84      	ldr	r3, [pc, #528]	; (8001698 <HTTP_Firmware_Data+0x274>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
					return SET;
 800148a:	2301      	movs	r3, #1
 800148c:	e1b2      	b.n	80017f4 <HTTP_Firmware_Data+0x3d0>
				}
				// If get '"' so done get total firmware data from UART
				if(temp_buffer[temp_index] == '"'){
 800148e:	4b80      	ldr	r3, [pc, #512]	; (8001690 <HTTP_Firmware_Data+0x26c>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	4b7f      	ldr	r3, [pc, #508]	; (8001694 <HTTP_Firmware_Data+0x270>)
 8001496:	5c9b      	ldrb	r3, [r3, r2]
 8001498:	2b22      	cmp	r3, #34	; 0x22
 800149a:	d10c      	bne.n	80014b6 <HTTP_Firmware_Data+0x92>
					Flash_Write_Char(firmware_address, firmware_data, firmware_index);
 800149c:	4b7f      	ldr	r3, [pc, #508]	; (800169c <HTTP_Firmware_Data+0x278>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a7f      	ldr	r2, [pc, #508]	; (80016a0 <HTTP_Firmware_Data+0x27c>)
 80014a2:	8812      	ldrh	r2, [r2, #0]
 80014a4:	497f      	ldr	r1, [pc, #508]	; (80016a4 <HTTP_Firmware_Data+0x280>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 ff46 	bl	8002338 <Flash_Write_Char>
					start_record = RESET;
 80014ac:	4b7a      	ldr	r3, [pc, #488]	; (8001698 <HTTP_Firmware_Data+0x274>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
					return SET;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e19e      	b.n	80017f4 <HTTP_Firmware_Data+0x3d0>
				}
				// Else record firmware data to buffer to save into Flash Memory
				else{
					// Assign temp buffer to firmware buffer
					firmware_data[firmware_index] = temp_buffer[temp_index];
 80014b6:	4b76      	ldr	r3, [pc, #472]	; (8001690 <HTTP_Firmware_Data+0x26c>)
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	4619      	mov	r1, r3
 80014bc:	4b78      	ldr	r3, [pc, #480]	; (80016a0 <HTTP_Firmware_Data+0x27c>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b74      	ldr	r3, [pc, #464]	; (8001694 <HTTP_Firmware_Data+0x270>)
 80014c4:	5c59      	ldrb	r1, [r3, r1]
 80014c6:	4b77      	ldr	r3, [pc, #476]	; (80016a4 <HTTP_Firmware_Data+0x280>)
 80014c8:	5499      	strb	r1, [r3, r2]
					/*
					 * If uart data is 0ABC5FDE so firmware_data is [0x0A,0xBC,0x5F,0xDE]
					 * In offset = 0 is 0,B,5,D, convert it from Char to Hex and assign to temp_hex_1
					 * ex: firmware_data[0] = [0x0]
					 */
					if(offset == 0){
 80014ca:	4b77      	ldr	r3, [pc, #476]	; (80016a8 <HTTP_Firmware_Data+0x284>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d112      	bne.n	80014f8 <HTTP_Firmware_Data+0xd4>
						temp_hex_1 = Char2Hex(firmware_data[firmware_index]);
 80014d2:	4b73      	ldr	r3, [pc, #460]	; (80016a0 <HTTP_Firmware_Data+0x27c>)
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	461a      	mov	r2, r3
 80014d8:	4b72      	ldr	r3, [pc, #456]	; (80016a4 <HTTP_Firmware_Data+0x280>)
 80014da:	5c9b      	ldrb	r3, [r3, r2]
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 fa8f 	bl	8001a00 <Char2Hex>
 80014e2:	4603      	mov	r3, r0
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4b71      	ldr	r3, [pc, #452]	; (80016ac <HTTP_Firmware_Data+0x288>)
 80014e8:	701a      	strb	r2, [r3, #0]
						firmware_index++;
 80014ea:	4b6d      	ldr	r3, [pc, #436]	; (80016a0 <HTTP_Firmware_Data+0x27c>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	3301      	adds	r3, #1
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	4b6b      	ldr	r3, [pc, #428]	; (80016a0 <HTTP_Firmware_Data+0x27c>)
 80014f4:	801a      	strh	r2, [r3, #0]
 80014f6:	e037      	b.n	8001568 <HTTP_Firmware_Data+0x144>
					 * In offset = 1 is A,C,F,E, convert it from Char to Hex and assign to temp_hex_2
					 * ex: firmware_data[1] = [0xA]
					 * So calculate and reassigin to firmware_data[0] = 0<<4|A = 0x0A
					 * and Calculate checksum = checksum ^ firmware_data[0]
					 */
					else if(offset == 1){
 80014f8:	4b6b      	ldr	r3, [pc, #428]	; (80016a8 <HTTP_Firmware_Data+0x284>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d133      	bne.n	8001568 <HTTP_Firmware_Data+0x144>
						temp_hex_2 = Char2Hex(firmware_data[firmware_index]);
 8001500:	4b67      	ldr	r3, [pc, #412]	; (80016a0 <HTTP_Firmware_Data+0x27c>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	4b67      	ldr	r3, [pc, #412]	; (80016a4 <HTTP_Firmware_Data+0x280>)
 8001508:	5c9b      	ldrb	r3, [r3, r2]
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fa78 	bl	8001a00 <Char2Hex>
 8001510:	4603      	mov	r3, r0
 8001512:	b2da      	uxtb	r2, r3
 8001514:	4b66      	ldr	r3, [pc, #408]	; (80016b0 <HTTP_Firmware_Data+0x28c>)
 8001516:	701a      	strb	r2, [r3, #0]
						firmware_data[firmware_index==0?(PAGESIZE-1):(firmware_index-1)] = (temp_hex_1<<4)|temp_hex_2;
 8001518:	4b64      	ldr	r3, [pc, #400]	; (80016ac <HTTP_Firmware_Data+0x288>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	b25a      	sxtb	r2, r3
 8001520:	4b63      	ldr	r3, [pc, #396]	; (80016b0 <HTTP_Firmware_Data+0x28c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	b25b      	sxtb	r3, r3
 8001526:	4313      	orrs	r3, r2
 8001528:	b25a      	sxtb	r2, r3
 800152a:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <HTTP_Firmware_Data+0x27c>)
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HTTP_Firmware_Data+0x116>
 8001532:	4b5b      	ldr	r3, [pc, #364]	; (80016a0 <HTTP_Firmware_Data+0x27c>)
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	3b01      	subs	r3, #1
 8001538:	e001      	b.n	800153e <HTTP_Firmware_Data+0x11a>
 800153a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800153e:	b2d1      	uxtb	r1, r2
 8001540:	4a58      	ldr	r2, [pc, #352]	; (80016a4 <HTTP_Firmware_Data+0x280>)
 8001542:	54d1      	strb	r1, [r2, r3]
						checksum = checksum ^ firmware_data[firmware_index==0?(PAGESIZE-1):(firmware_index-1)];
 8001544:	4b56      	ldr	r3, [pc, #344]	; (80016a0 <HTTP_Firmware_Data+0x27c>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HTTP_Firmware_Data+0x130>
 800154c:	4b54      	ldr	r3, [pc, #336]	; (80016a0 <HTTP_Firmware_Data+0x27c>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	3b01      	subs	r3, #1
 8001552:	e001      	b.n	8001558 <HTTP_Firmware_Data+0x134>
 8001554:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001558:	4a52      	ldr	r2, [pc, #328]	; (80016a4 <HTTP_Firmware_Data+0x280>)
 800155a:	5cd2      	ldrb	r2, [r2, r3]
 800155c:	4b55      	ldr	r3, [pc, #340]	; (80016b4 <HTTP_Firmware_Data+0x290>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4053      	eors	r3, r2
 8001562:	b2da      	uxtb	r2, r3
 8001564:	4b53      	ldr	r3, [pc, #332]	; (80016b4 <HTTP_Firmware_Data+0x290>)
 8001566:	701a      	strb	r2, [r3, #0]
//						sprintf(log,"check sum %d\r\n",checksum);
//						LOG(log);
					}
					// Increase Offset after get and assign to firmware_data
					offset= (offset+1)%2;
 8001568:	4b4f      	ldr	r3, [pc, #316]	; (80016a8 <HTTP_Firmware_Data+0x284>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	3301      	adds	r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	bfb8      	it	lt
 8001576:	425b      	neglt	r3, r3
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4b4b      	ldr	r3, [pc, #300]	; (80016a8 <HTTP_Firmware_Data+0x284>)
 800157c:	701a      	strb	r2, [r3, #0]
					/*
					 * Check whether offset == 0 so Check firmware_index
					 * If firmware_index == FIRMWARE_DATA_BUFFER_SIZE so save it to Flash, reset firmware_index and increase firmware_address
					 */
					if(offset==0){
 800157e:	4b4a      	ldr	r3, [pc, #296]	; (80016a8 <HTTP_Firmware_Data+0x284>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d117      	bne.n	80015b6 <HTTP_Firmware_Data+0x192>
						if(firmware_index == PAGESIZE){
 8001586:	4b46      	ldr	r3, [pc, #280]	; (80016a0 <HTTP_Firmware_Data+0x27c>)
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800158e:	d112      	bne.n	80015b6 <HTTP_Firmware_Data+0x192>
							char log[10];
							Flash_Write_Char(firmware_address, firmware_data, firmware_index);
 8001590:	4b42      	ldr	r3, [pc, #264]	; (800169c <HTTP_Firmware_Data+0x278>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a42      	ldr	r2, [pc, #264]	; (80016a0 <HTTP_Firmware_Data+0x27c>)
 8001596:	8812      	ldrh	r2, [r2, #0]
 8001598:	4942      	ldr	r1, [pc, #264]	; (80016a4 <HTTP_Firmware_Data+0x280>)
 800159a:	4618      	mov	r0, r3
 800159c:	f000 fecc 	bl	8002338 <Flash_Write_Char>
							firmware_address += PAGESIZE;
 80015a0:	4b3e      	ldr	r3, [pc, #248]	; (800169c <HTTP_Firmware_Data+0x278>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015a8:	4a3c      	ldr	r2, [pc, #240]	; (800169c <HTTP_Firmware_Data+0x278>)
 80015aa:	6013      	str	r3, [r2, #0]
							firmware_index = 0;
 80015ac:	4b3c      	ldr	r3, [pc, #240]	; (80016a0 <HTTP_Firmware_Data+0x27c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	801a      	strh	r2, [r3, #0]
							return RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e11e      	b.n	80017f4 <HTTP_Firmware_Data+0x3d0>
						}
					}
				}
			}
			temp_index = (temp_index +1)%TEMP_BUFFER_SIZE;
 80015b6:	4b36      	ldr	r3, [pc, #216]	; (8001690 <HTTP_Firmware_Data+0x26c>)
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	3301      	adds	r3, #1
 80015bc:	425a      	negs	r2, r3
 80015be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015c2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80015c6:	bf58      	it	pl
 80015c8:	4253      	negpl	r3, r2
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	4b30      	ldr	r3, [pc, #192]	; (8001690 <HTTP_Firmware_Data+0x26c>)
 80015ce:	801a      	strh	r2, [r3, #0]
 80015d0:	e10f      	b.n	80017f2 <HTTP_Firmware_Data+0x3ce>
		}
	}
	else{
		if(UART_SIM7600_Received_Buffer_Available()){
 80015d2:	f7ff fa73 	bl	8000abc <UART_SIM7600_Received_Buffer_Available>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 810a 	beq.w	80017f2 <HTTP_Firmware_Data+0x3ce>
			temp_buffer[temp_index] = UART_SIM7600_Read_Received_Buffer();
 80015de:	4b2c      	ldr	r3, [pc, #176]	; (8001690 <HTTP_Firmware_Data+0x26c>)
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	461c      	mov	r4, r3
 80015e4:	f7ff fa80 	bl	8000ae8 <UART_SIM7600_Read_Received_Buffer>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b29      	ldr	r3, [pc, #164]	; (8001694 <HTTP_Firmware_Data+0x270>)
 80015ee:	551a      	strb	r2, [r3, r4]
			// If get response "+HTTPREAD: DATA," from UART switch to Prepare Record
			if(isReceiveData_New(temp_buffer, temp_index + 1,TEMP_BUFFER_SIZE, "+HTTPREAD: DATA,")){
 80015f0:	4b27      	ldr	r3, [pc, #156]	; (8001690 <HTTP_Firmware_Data+0x26c>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	1c59      	adds	r1, r3, #1
 80015f6:	4b30      	ldr	r3, [pc, #192]	; (80016b8 <HTTP_Firmware_Data+0x294>)
 80015f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015fc:	4825      	ldr	r0, [pc, #148]	; (8001694 <HTTP_Firmware_Data+0x270>)
 80015fe:	f000 f9b7 	bl	8001970 <isReceiveData_New>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d004      	beq.n	8001612 <HTTP_Firmware_Data+0x1ee>
				prepare_record = SET;
 8001608:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <HTTP_Firmware_Data+0x298>)
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
				return RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	e0f0      	b.n	80017f4 <HTTP_Firmware_Data+0x3d0>
			}
			// Prepare Record wait to get "\r\n" to get data
			else if(prepare_record){
 8001612:	4b2a      	ldr	r3, [pc, #168]	; (80016bc <HTTP_Firmware_Data+0x298>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d014      	beq.n	8001644 <HTTP_Firmware_Data+0x220>
				// If get "\r\n" so set start_record to record hex data
				if(isReceiveData_New(temp_buffer, temp_index  + 1,TEMP_BUFFER_SIZE, "\r\n")){
 800161a:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <HTTP_Firmware_Data+0x26c>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	1c59      	adds	r1, r3, #1
 8001620:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <HTTP_Firmware_Data+0x29c>)
 8001622:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001626:	481b      	ldr	r0, [pc, #108]	; (8001694 <HTTP_Firmware_Data+0x270>)
 8001628:	f000 f9a2 	bl	8001970 <isReceiveData_New>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 80d2 	beq.w	80017d8 <HTTP_Firmware_Data+0x3b4>
					prepare_record = RESET;
 8001634:	4b21      	ldr	r3, [pc, #132]	; (80016bc <HTTP_Firmware_Data+0x298>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
					start_record = SET;
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <HTTP_Firmware_Data+0x274>)
 800163c:	2201      	movs	r2, #1
 800163e:	701a      	strb	r2, [r3, #0]
					return RESET;
 8001640:	2300      	movs	r3, #0
 8001642:	e0d7      	b.n	80017f4 <HTTP_Firmware_Data+0x3d0>
				}
			}
			// start_record firmware data from UART
			else if(start_record){
 8001644:	4b14      	ldr	r3, [pc, #80]	; (8001698 <HTTP_Firmware_Data+0x274>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 80c5 	beq.w	80017d8 <HTTP_Firmware_Data+0x3b4>
				// If get '\r' so done get partial firmware data from UART
				if(temp_buffer[temp_index] == '\r'){
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <HTTP_Firmware_Data+0x26c>)
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <HTTP_Firmware_Data+0x270>)
 8001656:	5c9b      	ldrb	r3, [r3, r2]
 8001658:	2b0d      	cmp	r3, #13
 800165a:	d104      	bne.n	8001666 <HTTP_Firmware_Data+0x242>
					start_record = RESET;
 800165c:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <HTTP_Firmware_Data+0x274>)
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
					return SET;
 8001662:	2301      	movs	r3, #1
 8001664:	e0c6      	b.n	80017f4 <HTTP_Firmware_Data+0x3d0>
				}
				// If get '"' so done get total firmware data from UART
				else if(temp_buffer[temp_index] == '"'){
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <HTTP_Firmware_Data+0x26c>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HTTP_Firmware_Data+0x270>)
 800166e:	5c9b      	ldrb	r3, [r3, r2]
 8001670:	2b22      	cmp	r3, #34	; 0x22
 8001672:	d127      	bne.n	80016c4 <HTTP_Firmware_Data+0x2a0>
					Flash_Write_Char(firmware_address, firmware_data, firmware_index);
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <HTTP_Firmware_Data+0x278>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a09      	ldr	r2, [pc, #36]	; (80016a0 <HTTP_Firmware_Data+0x27c>)
 800167a:	8812      	ldrh	r2, [r2, #0]
 800167c:	4909      	ldr	r1, [pc, #36]	; (80016a4 <HTTP_Firmware_Data+0x280>)
 800167e:	4618      	mov	r0, r3
 8001680:	f000 fe5a 	bl	8002338 <Flash_Write_Char>
					start_record = RESET;
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <HTTP_Firmware_Data+0x274>)
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]
					return SET;
 800168a:	2301      	movs	r3, #1
 800168c:	e0b2      	b.n	80017f4 <HTTP_Firmware_Data+0x3d0>
 800168e:	bf00      	nop
 8001690:	200001b0 	.word	0x200001b0
 8001694:	2000344c 	.word	0x2000344c
 8001698:	200001ad 	.word	0x200001ad
 800169c:	2000007c 	.word	0x2000007c
 80016a0:	200001a8 	.word	0x200001a8
 80016a4:	20002378 	.word	0x20002378
 80016a8:	200001ae 	.word	0x200001ae
 80016ac:	20003413 	.word	0x20003413
 80016b0:	20002368 	.word	0x20002368
 80016b4:	200001a0 	.word	0x200001a0
 80016b8:	08005f6c 	.word	0x08005f6c
 80016bc:	200001ac 	.word	0x200001ac
 80016c0:	08005f80 	.word	0x08005f80
				}
				// Else record firmware data to buffer to save into Flash Memory
				else {
					// Assign temp buffer to firmware buffer
					firmware_data[firmware_index] = temp_buffer[temp_index];
 80016c4:	4b4d      	ldr	r3, [pc, #308]	; (80017fc <HTTP_Firmware_Data+0x3d8>)
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	4b4d      	ldr	r3, [pc, #308]	; (8001800 <HTTP_Firmware_Data+0x3dc>)
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b4c      	ldr	r3, [pc, #304]	; (8001804 <HTTP_Firmware_Data+0x3e0>)
 80016d2:	5c59      	ldrb	r1, [r3, r1]
 80016d4:	4b4c      	ldr	r3, [pc, #304]	; (8001808 <HTTP_Firmware_Data+0x3e4>)
 80016d6:	5499      	strb	r1, [r3, r2]
					/*
					 * If uart data is 0ABC5FDE so firmware_data is [0x0A,0xBC,0x5F,0xDE]
					 * In offset = 0 is 0,B,5,D, convert it from Char to Hex and assign to temp_hex_1
					 * ex: firmware_data[0] = [0x0]
					 */
					if(offset == 0){
 80016d8:	4b4c      	ldr	r3, [pc, #304]	; (800180c <HTTP_Firmware_Data+0x3e8>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d112      	bne.n	8001706 <HTTP_Firmware_Data+0x2e2>
						temp_hex_1 = Char2Hex(firmware_data[firmware_index]);
 80016e0:	4b47      	ldr	r3, [pc, #284]	; (8001800 <HTTP_Firmware_Data+0x3dc>)
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b48      	ldr	r3, [pc, #288]	; (8001808 <HTTP_Firmware_Data+0x3e4>)
 80016e8:	5c9b      	ldrb	r3, [r3, r2]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 f988 	bl	8001a00 <Char2Hex>
 80016f0:	4603      	mov	r3, r0
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	4b46      	ldr	r3, [pc, #280]	; (8001810 <HTTP_Firmware_Data+0x3ec>)
 80016f6:	701a      	strb	r2, [r3, #0]
						firmware_index++;
 80016f8:	4b41      	ldr	r3, [pc, #260]	; (8001800 <HTTP_Firmware_Data+0x3dc>)
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	3301      	adds	r3, #1
 80016fe:	b29a      	uxth	r2, r3
 8001700:	4b3f      	ldr	r3, [pc, #252]	; (8001800 <HTTP_Firmware_Data+0x3dc>)
 8001702:	801a      	strh	r2, [r3, #0]
 8001704:	e037      	b.n	8001776 <HTTP_Firmware_Data+0x352>
					 * In offset = 1 is A,C,F,E, convert it from Char to Hex and assign to temp_hex_2
					 * ex: firmware_data[1] = [0xA]
					 * So calculate and reassigin to firmware_data[0] = 0<<4|A = 0x0A
					 * and Calculate checksum = checksum ^ firmware_data[0]
					 */
					else if(offset == 1){
 8001706:	4b41      	ldr	r3, [pc, #260]	; (800180c <HTTP_Firmware_Data+0x3e8>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d133      	bne.n	8001776 <HTTP_Firmware_Data+0x352>
						temp_hex_2 = Char2Hex(firmware_data[firmware_index]);
 800170e:	4b3c      	ldr	r3, [pc, #240]	; (8001800 <HTTP_Firmware_Data+0x3dc>)
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	4b3c      	ldr	r3, [pc, #240]	; (8001808 <HTTP_Firmware_Data+0x3e4>)
 8001716:	5c9b      	ldrb	r3, [r3, r2]
 8001718:	4618      	mov	r0, r3
 800171a:	f000 f971 	bl	8001a00 <Char2Hex>
 800171e:	4603      	mov	r3, r0
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4b3c      	ldr	r3, [pc, #240]	; (8001814 <HTTP_Firmware_Data+0x3f0>)
 8001724:	701a      	strb	r2, [r3, #0]
						firmware_data[firmware_index==0?(PAGESIZE-1):(firmware_index-1)] = (temp_hex_1<<4)|temp_hex_2;
 8001726:	4b3a      	ldr	r3, [pc, #232]	; (8001810 <HTTP_Firmware_Data+0x3ec>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	011b      	lsls	r3, r3, #4
 800172c:	b25a      	sxtb	r2, r3
 800172e:	4b39      	ldr	r3, [pc, #228]	; (8001814 <HTTP_Firmware_Data+0x3f0>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	b25b      	sxtb	r3, r3
 8001734:	4313      	orrs	r3, r2
 8001736:	b25a      	sxtb	r2, r3
 8001738:	4b31      	ldr	r3, [pc, #196]	; (8001800 <HTTP_Firmware_Data+0x3dc>)
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HTTP_Firmware_Data+0x324>
 8001740:	4b2f      	ldr	r3, [pc, #188]	; (8001800 <HTTP_Firmware_Data+0x3dc>)
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	3b01      	subs	r3, #1
 8001746:	e001      	b.n	800174c <HTTP_Firmware_Data+0x328>
 8001748:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800174c:	b2d1      	uxtb	r1, r2
 800174e:	4a2e      	ldr	r2, [pc, #184]	; (8001808 <HTTP_Firmware_Data+0x3e4>)
 8001750:	54d1      	strb	r1, [r2, r3]
						checksum = checksum ^ firmware_data[firmware_index==0?(PAGESIZE-1):(firmware_index-1)];
 8001752:	4b2b      	ldr	r3, [pc, #172]	; (8001800 <HTTP_Firmware_Data+0x3dc>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HTTP_Firmware_Data+0x33e>
 800175a:	4b29      	ldr	r3, [pc, #164]	; (8001800 <HTTP_Firmware_Data+0x3dc>)
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	3b01      	subs	r3, #1
 8001760:	e001      	b.n	8001766 <HTTP_Firmware_Data+0x342>
 8001762:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001766:	4a28      	ldr	r2, [pc, #160]	; (8001808 <HTTP_Firmware_Data+0x3e4>)
 8001768:	5cd2      	ldrb	r2, [r2, r3]
 800176a:	4b2b      	ldr	r3, [pc, #172]	; (8001818 <HTTP_Firmware_Data+0x3f4>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	4053      	eors	r3, r2
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4b29      	ldr	r3, [pc, #164]	; (8001818 <HTTP_Firmware_Data+0x3f4>)
 8001774:	701a      	strb	r2, [r3, #0]
//						sprintf(log,"check sum %d\r\n ",checksum);
//						LOG(log);
					}
					// Increase Offset after get and assign to firmware_data
					offset= (offset+1)%2;
 8001776:	4b25      	ldr	r3, [pc, #148]	; (800180c <HTTP_Firmware_Data+0x3e8>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	3301      	adds	r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	bfb8      	it	lt
 8001784:	425b      	neglt	r3, r3
 8001786:	b2da      	uxtb	r2, r3
 8001788:	4b20      	ldr	r3, [pc, #128]	; (800180c <HTTP_Firmware_Data+0x3e8>)
 800178a:	701a      	strb	r2, [r3, #0]
					/*
					 * Check whether offset == 0 so Check firmware_index
					 * If firmware_index == FIRMWARE_DATA_BUFFER_SIZE so save it to Flash, reset firmware_index and increase firmware_address
					 */
					if(offset==0){
 800178c:	4b1f      	ldr	r3, [pc, #124]	; (800180c <HTTP_Firmware_Data+0x3e8>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d121      	bne.n	80017d8 <HTTP_Firmware_Data+0x3b4>
						if(firmware_index == PAGESIZE){
 8001794:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <HTTP_Firmware_Data+0x3dc>)
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800179c:	d11c      	bne.n	80017d8 <HTTP_Firmware_Data+0x3b4>
							sprintf(logMsg,"\r\n%x\r\n",firmware_address);
 800179e:	4b1f      	ldr	r3, [pc, #124]	; (800181c <HTTP_Firmware_Data+0x3f8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	491e      	ldr	r1, [pc, #120]	; (8001820 <HTTP_Firmware_Data+0x3fc>)
 80017a6:	481f      	ldr	r0, [pc, #124]	; (8001824 <HTTP_Firmware_Data+0x400>)
 80017a8:	f003 fd48 	bl	800523c <siprintf>
							LOG((uint8_t*)logMsg);
 80017ac:	481d      	ldr	r0, [pc, #116]	; (8001824 <HTTP_Firmware_Data+0x400>)
 80017ae:	f7ff f9f3 	bl	8000b98 <UART_DEBUG_Transmit>
							Flash_Write_Char(firmware_address, firmware_data, firmware_index);
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <HTTP_Firmware_Data+0x3f8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a12      	ldr	r2, [pc, #72]	; (8001800 <HTTP_Firmware_Data+0x3dc>)
 80017b8:	8812      	ldrh	r2, [r2, #0]
 80017ba:	4913      	ldr	r1, [pc, #76]	; (8001808 <HTTP_Firmware_Data+0x3e4>)
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 fdbb 	bl	8002338 <Flash_Write_Char>
							firmware_address += PAGESIZE;
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <HTTP_Firmware_Data+0x3f8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ca:	4a14      	ldr	r2, [pc, #80]	; (800181c <HTTP_Firmware_Data+0x3f8>)
 80017cc:	6013      	str	r3, [r2, #0]
							firmware_index = 0;
 80017ce:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <HTTP_Firmware_Data+0x3dc>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	801a      	strh	r2, [r3, #0]
							return RESET;
 80017d4:	2300      	movs	r3, #0
 80017d6:	e00d      	b.n	80017f4 <HTTP_Firmware_Data+0x3d0>
						}
					}
				}
			}
			temp_index = (temp_index +1)%TEMP_BUFFER_SIZE;
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <HTTP_Firmware_Data+0x3d8>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	3301      	adds	r3, #1
 80017de:	425a      	negs	r2, r3
 80017e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017e4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80017e8:	bf58      	it	pl
 80017ea:	4253      	negpl	r3, r2
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	4b03      	ldr	r3, [pc, #12]	; (80017fc <HTTP_Firmware_Data+0x3d8>)
 80017f0:	801a      	strh	r2, [r3, #0]
		}
	}
	return RESET;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	371c      	adds	r7, #28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd90      	pop	{r4, r7, pc}
 80017fc:	200001b0 	.word	0x200001b0
 8001800:	200001a8 	.word	0x200001a8
 8001804:	2000344c 	.word	0x2000344c
 8001808:	20002378 	.word	0x20002378
 800180c:	200001ae 	.word	0x200001ae
 8001810:	20003413 	.word	0x20003413
 8001814:	20002368 	.word	0x20002368
 8001818:	200001a0 	.word	0x200001a0
 800181c:	2000007c 	.word	0x2000007c
 8001820:	08005f84 	.word	0x08005f84
 8001824:	20003418 	.word	0x20003418

08001828 <HTTP_Get_Content_Length>:



FlagStatus HTTP_Get_Content_Length(){
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	if(UART_SIM7600_Received_Buffer_Available()){
 800182c:	f7ff f946 	bl	8000abc <UART_SIM7600_Received_Buffer_Available>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d029      	beq.n	800188a <HTTP_Get_Content_Length+0x62>
		temp = UART_SIM7600_Read_Received_Buffer();
 8001836:	f7ff f957 	bl	8000ae8 <UART_SIM7600_Read_Received_Buffer>
 800183a:	4603      	mov	r3, r0
 800183c:	461a      	mov	r2, r3
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <HTTP_Get_Content_Length+0x68>)
 8001840:	701a      	strb	r2, [r3, #0]
		if(temp == '\r'){
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <HTTP_Get_Content_Length+0x68>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b0d      	cmp	r3, #13
 8001848:	d104      	bne.n	8001854 <HTTP_Get_Content_Length+0x2c>
			http_num_ignore = 0;
 800184a:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HTTP_Get_Content_Length+0x6c>)
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
			return SET;
 8001850:	2301      	movs	r3, #1
 8001852:	e01b      	b.n	800188c <HTTP_Get_Content_Length+0x64>
		}
		if(http_num_ignore==2){
 8001854:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <HTTP_Get_Content_Length+0x6c>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d10c      	bne.n	8001876 <HTTP_Get_Content_Length+0x4e>
			content_length = content_length*10 + (uint32_t)temp - (uint32_t)48;
 800185c:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <HTTP_Get_Content_Length+0x70>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	461a      	mov	r2, r3
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HTTP_Get_Content_Length+0x68>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	4413      	add	r3, r2
 8001870:	3b30      	subs	r3, #48	; 0x30
 8001872:	4a09      	ldr	r2, [pc, #36]	; (8001898 <HTTP_Get_Content_Length+0x70>)
 8001874:	6013      	str	r3, [r2, #0]
		}
		if(temp == ','){
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HTTP_Get_Content_Length+0x68>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b2c      	cmp	r3, #44	; 0x2c
 800187c:	d105      	bne.n	800188a <HTTP_Get_Content_Length+0x62>
			http_num_ignore ++;
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HTTP_Get_Content_Length+0x6c>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	3301      	adds	r3, #1
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4b03      	ldr	r3, [pc, #12]	; (8001894 <HTTP_Get_Content_Length+0x6c>)
 8001888:	701a      	strb	r2, [r3, #0]
		}
	}
	return RESET;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	bd80      	pop	{r7, pc}
 8001890:	200012e8 	.word	0x200012e8
 8001894:	20000190 	.word	0x20000190
 8001898:	20000194 	.word	0x20000194

0800189c <HTTP_Set_State>:

/**
 * HTTP_Set_State()
 * @brief This is function for setting state to HTTP State Machine
 */
void HTTP_Set_State(HTTP_State _http_state){
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
	http_state = _http_state;
 80018a6:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <HTTP_Set_State+0x1c>)
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	7013      	strb	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	2000019d 	.word	0x2000019d

080018bc <Reset_Result>:

void Reset_Result(){
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
	result = 0;
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <Reset_Result+0x14>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	801a      	strh	r2, [r3, #0]
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	20000198 	.word	0x20000198

080018d4 <Clear_Http_Command>:
void Reset_HttpConfiguration_State(){
	Reset_No_Board();
	HTTP_Set_State(HTTP_INIT);
}

void Clear_Http_Command(){
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
	default_atcommand = SET;
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <Clear_Http_Command+0x14>)
 80018da:	2201      	movs	r2, #1
 80018dc:	701a      	strb	r2, [r3, #0]
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	2000007a 	.word	0x2000007a

080018ec <HTTP_Return_Content_Length>:
void Set_Http_Command(char * atcommand){
	sprintf(http_at_command,"%s",atcommand);
	default_atcommand = RESET;
}

uint32_t HTTP_Return_Content_Length(){
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
	return content_length;
 80018f0:	4b02      	ldr	r3, [pc, #8]	; (80018fc <HTTP_Return_Content_Length+0x10>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	20000194 	.word	0x20000194

08001900 <isReceiveData>:
 * 			buffer_len = 6 => It just point to "I love"
 * 			data = "love"
 *
 * 			=> return SET ~ True
 */
FlagStatus isReceiveData(char *buffer , uint16_t buffer_len , const char * data){
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	460b      	mov	r3, r1
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	817b      	strh	r3, [r7, #10]
	uint8_t tmpLen = strlen((char*)data);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7fe fc88 	bl	8000224 <strlen>
 8001914:	4603      	mov	r3, r0
 8001916:	75bb      	strb	r3, [r7, #22]
	if(buffer_len < tmpLen ){
 8001918:	7dbb      	ldrb	r3, [r7, #22]
 800191a:	b29b      	uxth	r3, r3
 800191c:	897a      	ldrh	r2, [r7, #10]
 800191e:	429a      	cmp	r2, r3
 8001920:	d201      	bcs.n	8001926 <isReceiveData+0x26>
		return RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	e020      	b.n	8001968 <isReceiveData+0x68>
	}
	else{
		uint8_t tmpLen = strlen((char*)data);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7fe fc7c 	bl	8000224 <strlen>
 800192c:	4603      	mov	r3, r0
 800192e:	757b      	strb	r3, [r7, #21]
		for (uint8_t index = 0; index < tmpLen; index++) {
 8001930:	2300      	movs	r3, #0
 8001932:	75fb      	strb	r3, [r7, #23]
 8001934:	e013      	b.n	800195e <isReceiveData+0x5e>
			if(buffer[buffer_len -tmpLen + index] != data[index]){
 8001936:	897a      	ldrh	r2, [r7, #10]
 8001938:	7d7b      	ldrb	r3, [r7, #21]
 800193a:	1ad2      	subs	r2, r2, r3
 800193c:	7dfb      	ldrb	r3, [r7, #23]
 800193e:	4413      	add	r3, r2
 8001940:	461a      	mov	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4413      	add	r3, r2
 8001946:	781a      	ldrb	r2, [r3, #0]
 8001948:	7dfb      	ldrb	r3, [r7, #23]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	440b      	add	r3, r1
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d001      	beq.n	8001958 <isReceiveData+0x58>
				return RESET;
 8001954:	2300      	movs	r3, #0
 8001956:	e007      	b.n	8001968 <isReceiveData+0x68>
		for (uint8_t index = 0; index < tmpLen; index++) {
 8001958:	7dfb      	ldrb	r3, [r7, #23]
 800195a:	3301      	adds	r3, #1
 800195c:	75fb      	strb	r3, [r7, #23]
 800195e:	7dfa      	ldrb	r2, [r7, #23]
 8001960:	7d7b      	ldrb	r3, [r7, #21]
 8001962:	429a      	cmp	r2, r3
 8001964:	d3e7      	bcc.n	8001936 <isReceiveData+0x36>
			}
		}
	}
	return SET;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <isReceiveData_New>:


FlagStatus isReceiveData_New(char *buffer , uint16_t buffer_len , uint16_t buffer_size , const char * data){
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	460b      	mov	r3, r1
 800197c:	817b      	strh	r3, [r7, #10]
 800197e:	4613      	mov	r3, r2
 8001980:	813b      	strh	r3, [r7, #8]
	uint8_t tmpLen = strlen((char*)data);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7fe fc4e 	bl	8000224 <strlen>
 8001988:	4603      	mov	r3, r0
 800198a:	75bb      	strb	r3, [r7, #22]
	for (uint8_t index = 0; index < tmpLen; index++) {
 800198c:	2300      	movs	r3, #0
 800198e:	75fb      	strb	r3, [r7, #23]
 8001990:	e02d      	b.n	80019ee <isReceiveData_New+0x7e>
		if(buffer[buffer_len -tmpLen <0 ? (buffer_size + buffer_len - tmpLen + index)%buffer_size :(buffer_len - tmpLen + index)%buffer_size ] != data[index]){
 8001992:	897a      	ldrh	r2, [r7, #10]
 8001994:	7dbb      	ldrb	r3, [r7, #22]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	da0e      	bge.n	80019ba <isReceiveData_New+0x4a>
 800199c:	893a      	ldrh	r2, [r7, #8]
 800199e:	897b      	ldrh	r3, [r7, #10]
 80019a0:	441a      	add	r2, r3
 80019a2:	7dbb      	ldrb	r3, [r7, #22]
 80019a4:	1ad2      	subs	r2, r2, r3
 80019a6:	7dfb      	ldrb	r3, [r7, #23]
 80019a8:	4413      	add	r3, r2
 80019aa:	893a      	ldrh	r2, [r7, #8]
 80019ac:	fb93 f1f2 	sdiv	r1, r3, r2
 80019b0:	fb02 f201 	mul.w	r2, r2, r1
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	461a      	mov	r2, r3
 80019b8:	e00b      	b.n	80019d2 <isReceiveData_New+0x62>
 80019ba:	897a      	ldrh	r2, [r7, #10]
 80019bc:	7dbb      	ldrb	r3, [r7, #22]
 80019be:	1ad2      	subs	r2, r2, r3
 80019c0:	7dfb      	ldrb	r3, [r7, #23]
 80019c2:	4413      	add	r3, r2
 80019c4:	893a      	ldrh	r2, [r7, #8]
 80019c6:	fb93 f1f2 	sdiv	r1, r3, r2
 80019ca:	fb02 f201 	mul.w	r2, r2, r1
 80019ce:	1a9b      	subs	r3, r3, r2
 80019d0:	461a      	mov	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4413      	add	r3, r2
 80019d6:	781a      	ldrb	r2, [r3, #0]
 80019d8:	7dfb      	ldrb	r3, [r7, #23]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	440b      	add	r3, r1
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <isReceiveData_New+0x78>
			return RESET;
 80019e4:	2300      	movs	r3, #0
 80019e6:	e007      	b.n	80019f8 <isReceiveData_New+0x88>
	for (uint8_t index = 0; index < tmpLen; index++) {
 80019e8:	7dfb      	ldrb	r3, [r7, #23]
 80019ea:	3301      	adds	r3, #1
 80019ec:	75fb      	strb	r3, [r7, #23]
 80019ee:	7dfa      	ldrb	r2, [r7, #23]
 80019f0:	7dbb      	ldrb	r3, [r7, #22]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d3cd      	bcc.n	8001992 <isReceiveData_New+0x22>
		}
	}
	return SET;
 80019f6:	2301      	movs	r3, #1
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <Char2Hex>:
	}
	return result;
}


uint8_t Char2Hex(char character){
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
	uint8_t result;
	if( character >='0' && character <= '9'){
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	2b2f      	cmp	r3, #47	; 0x2f
 8001a0e:	d906      	bls.n	8001a1e <Char2Hex+0x1e>
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	2b39      	cmp	r3, #57	; 0x39
 8001a14:	d803      	bhi.n	8001a1e <Char2Hex+0x1e>
		result = character - (uint8_t)('0') ;
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	3b30      	subs	r3, #48	; 0x30
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	e008      	b.n	8001a30 <Char2Hex+0x30>
	}
	else if(character >='A' && character <= 'F'){
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	2b40      	cmp	r3, #64	; 0x40
 8001a22:	d905      	bls.n	8001a30 <Char2Hex+0x30>
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	2b46      	cmp	r3, #70	; 0x46
 8001a28:	d802      	bhi.n	8001a30 <Char2Hex+0x30>
		result = character - (uint8_t)('A') + 10;
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	3b37      	subs	r3, #55	; 0x37
 8001a2e:	73fb      	strb	r3, [r7, #15]
	}
	return result;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <AT_Processing>:
  * If Available It will Read 1 byte and add to temp buffer.
  * Then Temp buffer will be compared to pattern being passed in isReceiveData function.
  * @param None
  * @retval None
  */
void AT_Processing(){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
	if(at_result != AT_NONE){
 8001a40:	4b73      	ldr	r3, [pc, #460]	; (8001c10 <AT_Processing+0x1d4>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b0a      	cmp	r3, #10
 8001a46:	f040 80de 	bne.w	8001c06 <AT_Processing+0x1ca>
		return;
	}
	else if(UART_SIM7600_Received_Buffer_Available()){
 8001a4a:	f7ff f837 	bl	8000abc <UART_SIM7600_Received_Buffer_Available>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 80da 	beq.w	8001c0a <AT_Processing+0x1ce>
		data_respone[data_respone_index]=UART_SIM7600_Read_Received_Buffer();
 8001a56:	f7ff f847 	bl	8000ae8 <UART_SIM7600_Read_Received_Buffer>
 8001a5a:	4601      	mov	r1, r0
 8001a5c:	4b6d      	ldr	r3, [pc, #436]	; (8001c14 <AT_Processing+0x1d8>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	b2c9      	uxtb	r1, r1
 8001a64:	4b6c      	ldr	r3, [pc, #432]	; (8001c18 <AT_Processing+0x1dc>)
 8001a66:	5499      	strb	r1, [r3, r2]
//		UART_DEBUG_Transmit_Size(data_respone + data_respone_index, 1);
//		LOG("1");
		data_respone_index++;
 8001a68:	4b6a      	ldr	r3, [pc, #424]	; (8001c14 <AT_Processing+0x1d8>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	4b68      	ldr	r3, [pc, #416]	; (8001c14 <AT_Processing+0x1d8>)
 8001a72:	701a      	strb	r2, [r3, #0]

		if(isReceiveData((char*)data_respone, (uint16_t)data_respone_index, OK)){
 8001a74:	4b67      	ldr	r3, [pc, #412]	; (8001c14 <AT_Processing+0x1d8>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	4a68      	ldr	r2, [pc, #416]	; (8001c1c <AT_Processing+0x1e0>)
 8001a7c:	6812      	ldr	r2, [r2, #0]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4865      	ldr	r0, [pc, #404]	; (8001c18 <AT_Processing+0x1dc>)
 8001a82:	f7ff ff3d 	bl	8001900 <isReceiveData>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00d      	beq.n	8001aa8 <AT_Processing+0x6c>
			LOG("\r\nOK\r\n");
 8001a8c:	4864      	ldr	r0, [pc, #400]	; (8001c20 <AT_Processing+0x1e4>)
 8001a8e:	f7ff f883 	bl	8000b98 <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 8001a92:	4b60      	ldr	r3, [pc, #384]	; (8001c14 <AT_Processing+0x1d8>)
 8001a94:	781a      	ldrb	r2, [r3, #0]
 8001a96:	4b63      	ldr	r3, [pc, #396]	; (8001c24 <AT_Processing+0x1e8>)
 8001a98:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 8001a9a:	4b5e      	ldr	r3, [pc, #376]	; (8001c14 <AT_Processing+0x1d8>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
			at_result = AT_OK;
 8001aa0:	4b5b      	ldr	r3, [pc, #364]	; (8001c10 <AT_Processing+0x1d4>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
			at_result = AT_FIRMWARE_CHECKSUM;
		}
	}
//	UART_DEBUG_Transmit_Size(aUART_RxBuffer, RXBUFFERSIZE);
	return;
 8001aa6:	e0b0      	b.n	8001c0a <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)ERROR_1/*ERROR_1*/)){
 8001aa8:	4b5a      	ldr	r3, [pc, #360]	; (8001c14 <AT_Processing+0x1d8>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	4a5e      	ldr	r2, [pc, #376]	; (8001c28 <AT_Processing+0x1ec>)
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4859      	ldr	r0, [pc, #356]	; (8001c18 <AT_Processing+0x1dc>)
 8001ab4:	f7ff ff24 	bl	8001900 <isReceiveData>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00d      	beq.n	8001ada <AT_Processing+0x9e>
			LOG("\r\nERROR\r\n");
 8001abe:	485b      	ldr	r0, [pc, #364]	; (8001c2c <AT_Processing+0x1f0>)
 8001ac0:	f7ff f86a 	bl	8000b98 <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 8001ac4:	4b53      	ldr	r3, [pc, #332]	; (8001c14 <AT_Processing+0x1d8>)
 8001ac6:	781a      	ldrb	r2, [r3, #0]
 8001ac8:	4b56      	ldr	r3, [pc, #344]	; (8001c24 <AT_Processing+0x1e8>)
 8001aca:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 8001acc:	4b51      	ldr	r3, [pc, #324]	; (8001c14 <AT_Processing+0x1d8>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
			at_result = AT_ERROR;
 8001ad2:	4b4f      	ldr	r3, [pc, #316]	; (8001c10 <AT_Processing+0x1d4>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]
	return;
 8001ad8:	e097      	b.n	8001c0a <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)PB_DONE /*PB_DONE*/)){
 8001ada:	4b4e      	ldr	r3, [pc, #312]	; (8001c14 <AT_Processing+0x1d8>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	4a53      	ldr	r2, [pc, #332]	; (8001c30 <AT_Processing+0x1f4>)
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	484c      	ldr	r0, [pc, #304]	; (8001c18 <AT_Processing+0x1dc>)
 8001ae6:	f7ff ff0b 	bl	8001900 <isReceiveData>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00d      	beq.n	8001b0c <AT_Processing+0xd0>
			LOG("\r\nPB DONE\r\n");
 8001af0:	4850      	ldr	r0, [pc, #320]	; (8001c34 <AT_Processing+0x1f8>)
 8001af2:	f7ff f851 	bl	8000b98 <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 8001af6:	4b47      	ldr	r3, [pc, #284]	; (8001c14 <AT_Processing+0x1d8>)
 8001af8:	781a      	ldrb	r2, [r3, #0]
 8001afa:	4b4a      	ldr	r3, [pc, #296]	; (8001c24 <AT_Processing+0x1e8>)
 8001afc:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 8001afe:	4b45      	ldr	r3, [pc, #276]	; (8001c14 <AT_Processing+0x1d8>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]
			at_result = AT_PB_DONE;
 8001b04:	4b42      	ldr	r3, [pc, #264]	; (8001c10 <AT_Processing+0x1d4>)
 8001b06:	2203      	movs	r2, #3
 8001b08:	701a      	strb	r2, [r3, #0]
	return;
 8001b0a:	e07e      	b.n	8001c0a <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)IMEI_CHECK)){
 8001b0c:	4b41      	ldr	r3, [pc, #260]	; (8001c14 <AT_Processing+0x1d8>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	4a49      	ldr	r2, [pc, #292]	; (8001c38 <AT_Processing+0x1fc>)
 8001b14:	4619      	mov	r1, r3
 8001b16:	4840      	ldr	r0, [pc, #256]	; (8001c18 <AT_Processing+0x1dc>)
 8001b18:	f7ff fef2 	bl	8001900 <isReceiveData>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00d      	beq.n	8001b3e <AT_Processing+0x102>
			LOG("\r\nRECEIVE IMEI\r\n");
 8001b22:	4846      	ldr	r0, [pc, #280]	; (8001c3c <AT_Processing+0x200>)
 8001b24:	f7ff f838 	bl	8000b98 <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 8001b28:	4b3a      	ldr	r3, [pc, #232]	; (8001c14 <AT_Processing+0x1d8>)
 8001b2a:	781a      	ldrb	r2, [r3, #0]
 8001b2c:	4b3d      	ldr	r3, [pc, #244]	; (8001c24 <AT_Processing+0x1e8>)
 8001b2e:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 8001b30:	4b38      	ldr	r3, [pc, #224]	; (8001c14 <AT_Processing+0x1d8>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
			at_result = AT_IMEI;
 8001b36:	4b36      	ldr	r3, [pc, #216]	; (8001c10 <AT_Processing+0x1d4>)
 8001b38:	2206      	movs	r2, #6
 8001b3a:	701a      	strb	r2, [r3, #0]
	return;
 8001b3c:	e065      	b.n	8001c0a <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)RECEIVE_RESPONSE)){
 8001b3e:	4b35      	ldr	r3, [pc, #212]	; (8001c14 <AT_Processing+0x1d8>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	4a3e      	ldr	r2, [pc, #248]	; (8001c40 <AT_Processing+0x204>)
 8001b46:	4619      	mov	r1, r3
 8001b48:	4833      	ldr	r0, [pc, #204]	; (8001c18 <AT_Processing+0x1dc>)
 8001b4a:	f7ff fed9 	bl	8001900 <isReceiveData>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00d      	beq.n	8001b70 <AT_Processing+0x134>
			LOG("\r\nRECEIVE HTTP RESPONSE\r\n");
 8001b54:	483b      	ldr	r0, [pc, #236]	; (8001c44 <AT_Processing+0x208>)
 8001b56:	f7ff f81f 	bl	8000b98 <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 8001b5a:	4b2e      	ldr	r3, [pc, #184]	; (8001c14 <AT_Processing+0x1d8>)
 8001b5c:	781a      	ldrb	r2, [r3, #0]
 8001b5e:	4b31      	ldr	r3, [pc, #196]	; (8001c24 <AT_Processing+0x1e8>)
 8001b60:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 8001b62:	4b2c      	ldr	r3, [pc, #176]	; (8001c14 <AT_Processing+0x1d8>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	701a      	strb	r2, [r3, #0]
			at_result = AT_HTTP_RESPONSE;
 8001b68:	4b29      	ldr	r3, [pc, #164]	; (8001c10 <AT_Processing+0x1d4>)
 8001b6a:	2205      	movs	r2, #5
 8001b6c:	701a      	strb	r2, [r3, #0]
	return;
 8001b6e:	e04c      	b.n	8001c0a <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)FIRMWARE_VERSION)){
 8001b70:	4b28      	ldr	r3, [pc, #160]	; (8001c14 <AT_Processing+0x1d8>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	4a34      	ldr	r2, [pc, #208]	; (8001c48 <AT_Processing+0x20c>)
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4827      	ldr	r0, [pc, #156]	; (8001c18 <AT_Processing+0x1dc>)
 8001b7c:	f7ff fec0 	bl	8001900 <isReceiveData>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00d      	beq.n	8001ba2 <AT_Processing+0x166>
			LOG("\r\nRECEIVE VERSION RESPONSE\r\n");
 8001b86:	4831      	ldr	r0, [pc, #196]	; (8001c4c <AT_Processing+0x210>)
 8001b88:	f7ff f806 	bl	8000b98 <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 8001b8c:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <AT_Processing+0x1d8>)
 8001b8e:	781a      	ldrb	r2, [r3, #0]
 8001b90:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <AT_Processing+0x1e8>)
 8001b92:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 8001b94:	4b1f      	ldr	r3, [pc, #124]	; (8001c14 <AT_Processing+0x1d8>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
			at_result = AT_FIRMWARE_VERSION;
 8001b9a:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <AT_Processing+0x1d4>)
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	701a      	strb	r2, [r3, #0]
	return;
 8001ba0:	e033      	b.n	8001c0a <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)FIRMWARE_DATA)){
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <AT_Processing+0x1d8>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	4a29      	ldr	r2, [pc, #164]	; (8001c50 <AT_Processing+0x214>)
 8001baa:	4619      	mov	r1, r3
 8001bac:	481a      	ldr	r0, [pc, #104]	; (8001c18 <AT_Processing+0x1dc>)
 8001bae:	f7ff fea7 	bl	8001900 <isReceiveData>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00d      	beq.n	8001bd4 <AT_Processing+0x198>
			LOG("\r\nRECEIVE FIRMWARE DATA\r\n");
 8001bb8:	4826      	ldr	r0, [pc, #152]	; (8001c54 <AT_Processing+0x218>)
 8001bba:	f7fe ffed 	bl	8000b98 <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <AT_Processing+0x1d8>)
 8001bc0:	781a      	ldrb	r2, [r3, #0]
 8001bc2:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <AT_Processing+0x1e8>)
 8001bc4:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 8001bc6:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <AT_Processing+0x1d8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
			at_result = AT_FIRMWARE_DATA;
 8001bcc:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <AT_Processing+0x1d4>)
 8001bce:	2208      	movs	r2, #8
 8001bd0:	701a      	strb	r2, [r3, #0]
	return;
 8001bd2:	e01a      	b.n	8001c0a <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)FIRMWARE_CHECKSUM)){
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <AT_Processing+0x1d8>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	4a1f      	ldr	r2, [pc, #124]	; (8001c58 <AT_Processing+0x21c>)
 8001bdc:	4619      	mov	r1, r3
 8001bde:	480e      	ldr	r0, [pc, #56]	; (8001c18 <AT_Processing+0x1dc>)
 8001be0:	f7ff fe8e 	bl	8001900 <isReceiveData>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00f      	beq.n	8001c0a <AT_Processing+0x1ce>
			LOG("\r\nRECEIVE FIRMWARE CHECKSUM\r\n");
 8001bea:	481c      	ldr	r0, [pc, #112]	; (8001c5c <AT_Processing+0x220>)
 8001bec:	f7fe ffd4 	bl	8000b98 <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <AT_Processing+0x1d8>)
 8001bf2:	781a      	ldrb	r2, [r3, #0]
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <AT_Processing+0x1e8>)
 8001bf6:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <AT_Processing+0x1d8>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
			at_result = AT_FIRMWARE_CHECKSUM;
 8001bfe:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <AT_Processing+0x1d4>)
 8001c00:	2209      	movs	r2, #9
 8001c02:	701a      	strb	r2, [r3, #0]
	return;
 8001c04:	e001      	b.n	8001c0a <AT_Processing+0x1ce>
		return;
 8001c06:	bf00      	nop
 8001c08:	e000      	b.n	8001c0c <AT_Processing+0x1d0>
	return;
 8001c0a:	bf00      	nop
}
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200000d8 	.word	0x200000d8
 8001c14:	200011b5 	.word	0x200011b5
 8001c18:	200001b4 	.word	0x200001b4
 8001c1c:	200000dc 	.word	0x200000dc
 8001c20:	08005f94 	.word	0x08005f94
 8001c24:	200011b4 	.word	0x200011b4
 8001c28:	08006128 	.word	0x08006128
 8001c2c:	08005f9c 	.word	0x08005f9c
 8001c30:	08006120 	.word	0x08006120
 8001c34:	08005fa8 	.word	0x08005fa8
 8001c38:	08006130 	.word	0x08006130
 8001c3c:	08005fb4 	.word	0x08005fb4
 8001c40:	0800613c 	.word	0x0800613c
 8001c44:	08005fc8 	.word	0x08005fc8
 8001c48:	0800614c 	.word	0x0800614c
 8001c4c:	08005fe4 	.word	0x08005fe4
 8001c50:	08006164 	.word	0x08006164
 8001c54:	08006004 	.word	0x08006004
 8001c58:	08006158 	.word	0x08006158
 8001c5c:	08006020 	.word	0x08006020

08001c60 <Get_AT_Result>:
/**
  * @brief Get_AT_Result Initialization Function
  * @param None
  * @retval at_result
  */
AT_Result Get_AT_Result(){
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
	return at_result;
 8001c64:	4b02      	ldr	r3, [pc, #8]	; (8001c70 <Get_AT_Result+0x10>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr
 8001c70:	200000d8 	.word	0x200000d8

08001c74 <Clear_AT_Result>:
/**
  * @brief Clear_AT_Result Initialization Function
  * @param None
  * @retval None
  */
void Clear_AT_Result(){
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
	at_result = AT_NONE;
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <Clear_AT_Result+0x14>)
 8001c7a:	220a      	movs	r2, #10
 8001c7c:	701a      	strb	r2, [r3, #0]
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	200000d8 	.word	0x200000d8

08001c8c <Get_New_Task_ID>:

uint32_t count_SCH_Update = 0;
uint8_t testFlag = 0;
uint8_t strScheduler[] = "                                                                    ";

uint32_t Get_New_Task_ID(void){
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
	newTaskID++;
 8001c90:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <Get_New_Task_ID+0x2c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3301      	adds	r3, #1
 8001c96:	4a08      	ldr	r2, [pc, #32]	; (8001cb8 <Get_New_Task_ID+0x2c>)
 8001c98:	6013      	str	r3, [r2, #0]
	if(newTaskID == NO_TASK_ID){
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <Get_New_Task_ID+0x2c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d104      	bne.n	8001cac <Get_New_Task_ID+0x20>
		newTaskID++;
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <Get_New_Task_ID+0x2c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	4a03      	ldr	r2, [pc, #12]	; (8001cb8 <Get_New_Task_ID+0x2c>)
 8001caa:	6013      	str	r3, [r2, #0]
	}
	return newTaskID;
 8001cac:	4b02      	ldr	r3, [pc, #8]	; (8001cb8 <Get_New_Task_ID+0x2c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	200011b8 	.word	0x200011b8

08001cbc <SCH_Update>:


void SCH_Update(void){
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
	// Check if there is a task at this location
	count_SCH_Update ++;
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <SCH_Update+0x48>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	4a0f      	ldr	r2, [pc, #60]	; (8001d04 <SCH_Update+0x48>)
 8001cc8:	6013      	str	r3, [r2, #0]
	if (SCH_tasks_G[0].pTask && SCH_tasks_G[0].RunMe == 0) {
 8001cca:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <SCH_Update+0x4c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d013      	beq.n	8001cfa <SCH_Update+0x3e>
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <SCH_Update+0x4c>)
 8001cd4:	7b1b      	ldrb	r3, [r3, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10f      	bne.n	8001cfa <SCH_Update+0x3e>
		if(SCH_tasks_G[0].Delay > 0){
 8001cda:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <SCH_Update+0x4c>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d004      	beq.n	8001cec <SCH_Update+0x30>
			SCH_tasks_G[0].Delay = SCH_tasks_G[0].Delay - 1;
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <SCH_Update+0x4c>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	4a07      	ldr	r2, [pc, #28]	; (8001d08 <SCH_Update+0x4c>)
 8001cea:	6053      	str	r3, [r2, #4]
		}
		if (SCH_tasks_G[0].Delay == 0) {
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <SCH_Update+0x4c>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d102      	bne.n	8001cfa <SCH_Update+0x3e>
			SCH_tasks_G[0].RunMe = 1;
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <SCH_Update+0x4c>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	731a      	strb	r2, [r3, #12]
		}
	}
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	200011bc 	.word	0x200011bc
 8001d08:	20003c74 	.word	0x20003c74

08001d0c <SCH_Add_Task>:
uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8001d0c:	b590      	push	{r4, r7, lr}
 8001d0e:	b089      	sub	sp, #36	; 0x24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
	uint8_t newTaskIndex = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	77fb      	strb	r3, [r7, #31]
	uint32_t sumDelay = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61bb      	str	r3, [r7, #24]
	uint32_t newDelay = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	613b      	str	r3, [r7, #16]

	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 8001d24:	2300      	movs	r3, #0
 8001d26:	77fb      	strb	r3, [r7, #31]
 8001d28:	e133      	b.n	8001f92 <SCH_Add_Task+0x286>
		sumDelay = sumDelay + SCH_tasks_G[newTaskIndex].Delay;
 8001d2a:	7ffa      	ldrb	r2, [r7, #31]
 8001d2c:	49a1      	ldr	r1, [pc, #644]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	3304      	adds	r3, #4
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4413      	add	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
		if(sumDelay > DELAY){
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	f240 80c1 	bls.w	8001ece <SCH_Add_Task+0x1c2>
			newDelay = DELAY - (sumDelay - SCH_tasks_G[newTaskIndex].Delay);
 8001d4c:	7ffa      	ldrb	r2, [r7, #31]
 8001d4e:	4999      	ldr	r1, [pc, #612]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	4413      	add	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
			SCH_tasks_G[newTaskIndex].Delay = sumDelay - DELAY;
 8001d68:	7ffa      	ldrb	r2, [r7, #31]
 8001d6a:	69b9      	ldr	r1, [r7, #24]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	1ac9      	subs	r1, r1, r3
 8001d70:	4890      	ldr	r0, [pc, #576]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4403      	add	r3, r0
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 8001d80:	2327      	movs	r3, #39	; 0x27
 8001d82:	75fb      	strb	r3, [r7, #23]
 8001d84:	e04c      	b.n	8001e20 <SCH_Add_Task+0x114>
//				if(SCH_tasks_G[i - 1].pTask != 0)
				{
					SCH_tasks_G[i].pTask = SCH_tasks_G[i - 1].pTask;
 8001d86:	7dfb      	ldrb	r3, [r7, #23]
 8001d88:	1e59      	subs	r1, r3, #1
 8001d8a:	7dfa      	ldrb	r2, [r7, #23]
 8001d8c:	4889      	ldr	r0, [pc, #548]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001d8e:	460b      	mov	r3, r1
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4403      	add	r3, r0
 8001d98:	6819      	ldr	r1, [r3, #0]
 8001d9a:	4886      	ldr	r0, [pc, #536]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4403      	add	r3, r0
 8001da6:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].Period = SCH_tasks_G[i - 1].Period;
 8001da8:	7dfb      	ldrb	r3, [r7, #23]
 8001daa:	1e59      	subs	r1, r3, #1
 8001dac:	7dfa      	ldrb	r2, [r7, #23]
 8001dae:	4881      	ldr	r0, [pc, #516]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001db0:	460b      	mov	r3, r1
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4403      	add	r3, r0
 8001dba:	3308      	adds	r3, #8
 8001dbc:	6819      	ldr	r1, [r3, #0]
 8001dbe:	487d      	ldr	r0, [pc, #500]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4403      	add	r3, r0
 8001dca:	3308      	adds	r3, #8
 8001dcc:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].Delay = SCH_tasks_G[i - 1].Delay;
 8001dce:	7dfb      	ldrb	r3, [r7, #23]
 8001dd0:	1e59      	subs	r1, r3, #1
 8001dd2:	7dfa      	ldrb	r2, [r7, #23]
 8001dd4:	4877      	ldr	r0, [pc, #476]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	440b      	add	r3, r1
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4403      	add	r3, r0
 8001de0:	3304      	adds	r3, #4
 8001de2:	6819      	ldr	r1, [r3, #0]
 8001de4:	4873      	ldr	r0, [pc, #460]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4403      	add	r3, r0
 8001df0:	3304      	adds	r3, #4
 8001df2:	6019      	str	r1, [r3, #0]
//					SCH_tasks_G[i].RunMe = SCH_tasks_G[i - 1].RunMe;
					SCH_tasks_G[i].TaskID = SCH_tasks_G[i - 1].TaskID;
 8001df4:	7dfb      	ldrb	r3, [r7, #23]
 8001df6:	1e59      	subs	r1, r3, #1
 8001df8:	7dfa      	ldrb	r2, [r7, #23]
 8001dfa:	486e      	ldr	r0, [pc, #440]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4403      	add	r3, r0
 8001e06:	3310      	adds	r3, #16
 8001e08:	6819      	ldr	r1, [r3, #0]
 8001e0a:	486a      	ldr	r0, [pc, #424]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4403      	add	r3, r0
 8001e16:	3310      	adds	r3, #16
 8001e18:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 8001e1a:	7dfb      	ldrb	r3, [r7, #23]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	75fb      	strb	r3, [r7, #23]
 8001e20:	7dfa      	ldrb	r2, [r7, #23]
 8001e22:	7ffb      	ldrb	r3, [r7, #31]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d8ae      	bhi.n	8001d86 <SCH_Add_Task+0x7a>
				}
			}
			SCH_tasks_G[newTaskIndex].pTask = pFunction;
 8001e28:	7ffa      	ldrb	r2, [r7, #31]
 8001e2a:	4962      	ldr	r1, [pc, #392]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Delay = newDelay;
 8001e3a:	7ffa      	ldrb	r2, [r7, #31]
 8001e3c:	495d      	ldr	r1, [pc, #372]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	3304      	adds	r3, #4
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Period = PERIOD;
 8001e4e:	7ffa      	ldrb	r2, [r7, #31]
 8001e50:	4958      	ldr	r1, [pc, #352]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	3308      	adds	r3, #8
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	601a      	str	r2, [r3, #0]
			if(SCH_tasks_G[newTaskIndex].Delay == 0){
 8001e62:	7ffa      	ldrb	r2, [r7, #31]
 8001e64:	4953      	ldr	r1, [pc, #332]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	440b      	add	r3, r1
 8001e70:	3304      	adds	r3, #4
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d10a      	bne.n	8001e8e <SCH_Add_Task+0x182>
				SCH_tasks_G[newTaskIndex].RunMe = 1;
 8001e78:	7ffa      	ldrb	r2, [r7, #31]
 8001e7a:	494e      	ldr	r1, [pc, #312]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	330c      	adds	r3, #12
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
 8001e8c:	e009      	b.n	8001ea2 <SCH_Add_Task+0x196>
			} else {
				SCH_tasks_G[newTaskIndex].RunMe = 0;
 8001e8e:	7ffa      	ldrb	r2, [r7, #31]
 8001e90:	4948      	ldr	r1, [pc, #288]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	330c      	adds	r3, #12
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
			}
			SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 8001ea2:	7ffc      	ldrb	r4, [r7, #31]
 8001ea4:	f7ff fef2 	bl	8001c8c <Get_New_Task_ID>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	4942      	ldr	r1, [pc, #264]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001eac:	4623      	mov	r3, r4
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4423      	add	r3, r4
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3310      	adds	r3, #16
 8001eb8:	601a      	str	r2, [r3, #0]
			return SCH_tasks_G[newTaskIndex].TaskID;
 8001eba:	7ffa      	ldrb	r2, [r7, #31]
 8001ebc:	493d      	ldr	r1, [pc, #244]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	3310      	adds	r3, #16
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	e06e      	b.n	8001fac <SCH_Add_Task+0x2a0>
		} else {
			if(SCH_tasks_G[newTaskIndex].pTask == 0x0000){
 8001ece:	7ffa      	ldrb	r2, [r7, #31]
 8001ed0:	4938      	ldr	r1, [pc, #224]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	440b      	add	r3, r1
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d154      	bne.n	8001f8c <SCH_Add_Task+0x280>
				SCH_tasks_G[newTaskIndex].pTask = pFunction;
 8001ee2:	7ffa      	ldrb	r2, [r7, #31]
 8001ee4:	4933      	ldr	r1, [pc, #204]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	440b      	add	r3, r1
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[newTaskIndex].Delay = DELAY - sumDelay;
 8001ef4:	7ffa      	ldrb	r2, [r7, #31]
 8001ef6:	68b9      	ldr	r1, [r7, #8]
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	1ac9      	subs	r1, r1, r3
 8001efc:	482d      	ldr	r0, [pc, #180]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4403      	add	r3, r0
 8001f08:	3304      	adds	r3, #4
 8001f0a:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[newTaskIndex].Period = PERIOD;
 8001f0c:	7ffa      	ldrb	r2, [r7, #31]
 8001f0e:	4929      	ldr	r1, [pc, #164]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	3308      	adds	r3, #8
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	601a      	str	r2, [r3, #0]
				if(SCH_tasks_G[newTaskIndex].Delay == 0){
 8001f20:	7ffa      	ldrb	r2, [r7, #31]
 8001f22:	4924      	ldr	r1, [pc, #144]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	3304      	adds	r3, #4
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10a      	bne.n	8001f4c <SCH_Add_Task+0x240>
					SCH_tasks_G[newTaskIndex].RunMe = 1;
 8001f36:	7ffa      	ldrb	r2, [r7, #31]
 8001f38:	491e      	ldr	r1, [pc, #120]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	330c      	adds	r3, #12
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]
 8001f4a:	e009      	b.n	8001f60 <SCH_Add_Task+0x254>
				} else {
					SCH_tasks_G[newTaskIndex].RunMe = 0;
 8001f4c:	7ffa      	ldrb	r2, [r7, #31]
 8001f4e:	4919      	ldr	r1, [pc, #100]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	330c      	adds	r3, #12
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]
				}
				SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 8001f60:	7ffc      	ldrb	r4, [r7, #31]
 8001f62:	f7ff fe93 	bl	8001c8c <Get_New_Task_ID>
 8001f66:	4602      	mov	r2, r0
 8001f68:	4912      	ldr	r1, [pc, #72]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001f6a:	4623      	mov	r3, r4
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4423      	add	r3, r4
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	3310      	adds	r3, #16
 8001f76:	601a      	str	r2, [r3, #0]
				return SCH_tasks_G[newTaskIndex].TaskID;
 8001f78:	7ffa      	ldrb	r2, [r7, #31]
 8001f7a:	490e      	ldr	r1, [pc, #56]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	3310      	adds	r3, #16
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	e00f      	b.n	8001fac <SCH_Add_Task+0x2a0>
	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 8001f8c:	7ffb      	ldrb	r3, [r7, #31]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	77fb      	strb	r3, [r7, #31]
 8001f92:	7ffb      	ldrb	r3, [r7, #31]
 8001f94:	2b27      	cmp	r3, #39	; 0x27
 8001f96:	f67f aec8 	bls.w	8001d2a <SCH_Add_Task+0x1e>
			}
		}
	}
	return SCH_tasks_G[newTaskIndex].TaskID;
 8001f9a:	7ffa      	ldrb	r2, [r7, #31]
 8001f9c:	4905      	ldr	r1, [pc, #20]	; (8001fb4 <SCH_Add_Task+0x2a8>)
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	3310      	adds	r3, #16
 8001faa:	681b      	ldr	r3, [r3, #0]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3724      	adds	r7, #36	; 0x24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd90      	pop	{r4, r7, pc}
 8001fb4:	20003c74 	.word	0x20003c74

08001fb8 <SCH_Delete_Task>:


uint8_t SCH_Delete_Task(uint32_t taskID){
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	uint8_t Return_code  = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	737b      	strb	r3, [r7, #13]
	uint8_t taskIndex;
	uint8_t j;
	if(taskID != NO_TASK_ID){
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 80e2 	beq.w	8002190 <SCH_Delete_Task+0x1d8>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]
 8001fd0:	e0da      	b.n	8002188 <SCH_Delete_Task+0x1d0>
			if(SCH_tasks_G[taskIndex].TaskID == taskID){
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	4971      	ldr	r1, [pc, #452]	; (800219c <SCH_Delete_Task+0x1e4>)
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	3310      	adds	r3, #16
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	f040 80cb 	bne.w	8002182 <SCH_Delete_Task+0x1ca>
				Return_code = 1;
 8001fec:	2301      	movs	r3, #1
 8001fee:	737b      	strb	r3, [r7, #13]
				if(taskIndex != 0 && taskIndex < SCH_MAX_TASKS - 1){
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d02b      	beq.n	800204e <SCH_Delete_Task+0x96>
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	2b26      	cmp	r3, #38	; 0x26
 8001ffa:	d828      	bhi.n	800204e <SCH_Delete_Task+0x96>
					if(SCH_tasks_G[taskIndex+1].pTask != 0x0000){
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	4966      	ldr	r1, [pc, #408]	; (800219c <SCH_Delete_Task+0x1e4>)
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d01d      	beq.n	800204e <SCH_Delete_Task+0x96>
						SCH_tasks_G[taskIndex+1].Delay += SCH_tasks_G[taskIndex].Delay;
 8002012:	7bfb      	ldrb	r3, [r7, #15]
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	4961      	ldr	r1, [pc, #388]	; (800219c <SCH_Delete_Task+0x1e4>)
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	3304      	adds	r3, #4
 8002024:	6819      	ldr	r1, [r3, #0]
 8002026:	7bfa      	ldrb	r2, [r7, #15]
 8002028:	485c      	ldr	r0, [pc, #368]	; (800219c <SCH_Delete_Task+0x1e4>)
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4403      	add	r3, r0
 8002034:	3304      	adds	r3, #4
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	7bfa      	ldrb	r2, [r7, #15]
 800203a:	3201      	adds	r2, #1
 800203c:	4419      	add	r1, r3
 800203e:	4857      	ldr	r0, [pc, #348]	; (800219c <SCH_Delete_Task+0x1e4>)
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4403      	add	r3, r0
 800204a:	3304      	adds	r3, #4
 800204c:	6019      	str	r1, [r3, #0]
					}
				}

				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	73bb      	strb	r3, [r7, #14]
 8002052:	e060      	b.n	8002116 <SCH_Delete_Task+0x15e>
					SCH_tasks_G[j].pTask = SCH_tasks_G[j+1].pTask;
 8002054:	7bbb      	ldrb	r3, [r7, #14]
 8002056:	1c59      	adds	r1, r3, #1
 8002058:	7bba      	ldrb	r2, [r7, #14]
 800205a:	4850      	ldr	r0, [pc, #320]	; (800219c <SCH_Delete_Task+0x1e4>)
 800205c:	460b      	mov	r3, r1
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4403      	add	r3, r0
 8002066:	6819      	ldr	r1, [r3, #0]
 8002068:	484c      	ldr	r0, [pc, #304]	; (800219c <SCH_Delete_Task+0x1e4>)
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4403      	add	r3, r0
 8002074:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Period = SCH_tasks_G[j+1].Period;
 8002076:	7bbb      	ldrb	r3, [r7, #14]
 8002078:	1c59      	adds	r1, r3, #1
 800207a:	7bba      	ldrb	r2, [r7, #14]
 800207c:	4847      	ldr	r0, [pc, #284]	; (800219c <SCH_Delete_Task+0x1e4>)
 800207e:	460b      	mov	r3, r1
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4403      	add	r3, r0
 8002088:	3308      	adds	r3, #8
 800208a:	6819      	ldr	r1, [r3, #0]
 800208c:	4843      	ldr	r0, [pc, #268]	; (800219c <SCH_Delete_Task+0x1e4>)
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4403      	add	r3, r0
 8002098:	3308      	adds	r3, #8
 800209a:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Delay = SCH_tasks_G[j+1].Delay;
 800209c:	7bbb      	ldrb	r3, [r7, #14]
 800209e:	1c59      	adds	r1, r3, #1
 80020a0:	7bba      	ldrb	r2, [r7, #14]
 80020a2:	483e      	ldr	r0, [pc, #248]	; (800219c <SCH_Delete_Task+0x1e4>)
 80020a4:	460b      	mov	r3, r1
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4403      	add	r3, r0
 80020ae:	3304      	adds	r3, #4
 80020b0:	6819      	ldr	r1, [r3, #0]
 80020b2:	483a      	ldr	r0, [pc, #232]	; (800219c <SCH_Delete_Task+0x1e4>)
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4403      	add	r3, r0
 80020be:	3304      	adds	r3, #4
 80020c0:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].RunMe = SCH_tasks_G[j+1].RunMe;
 80020c2:	7bbb      	ldrb	r3, [r7, #14]
 80020c4:	1c59      	adds	r1, r3, #1
 80020c6:	7bba      	ldrb	r2, [r7, #14]
 80020c8:	4834      	ldr	r0, [pc, #208]	; (800219c <SCH_Delete_Task+0x1e4>)
 80020ca:	460b      	mov	r3, r1
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4403      	add	r3, r0
 80020d4:	330c      	adds	r3, #12
 80020d6:	7818      	ldrb	r0, [r3, #0]
 80020d8:	4930      	ldr	r1, [pc, #192]	; (800219c <SCH_Delete_Task+0x1e4>)
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	330c      	adds	r3, #12
 80020e6:	4602      	mov	r2, r0
 80020e8:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[j].TaskID = SCH_tasks_G[j+1].TaskID;
 80020ea:	7bbb      	ldrb	r3, [r7, #14]
 80020ec:	1c59      	adds	r1, r3, #1
 80020ee:	7bba      	ldrb	r2, [r7, #14]
 80020f0:	482a      	ldr	r0, [pc, #168]	; (800219c <SCH_Delete_Task+0x1e4>)
 80020f2:	460b      	mov	r3, r1
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4403      	add	r3, r0
 80020fc:	3310      	adds	r3, #16
 80020fe:	6819      	ldr	r1, [r3, #0]
 8002100:	4826      	ldr	r0, [pc, #152]	; (800219c <SCH_Delete_Task+0x1e4>)
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4403      	add	r3, r0
 800210c:	3310      	adds	r3, #16
 800210e:	6019      	str	r1, [r3, #0]
				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 8002110:	7bbb      	ldrb	r3, [r7, #14]
 8002112:	3301      	adds	r3, #1
 8002114:	73bb      	strb	r3, [r7, #14]
 8002116:	7bbb      	ldrb	r3, [r7, #14]
 8002118:	2b26      	cmp	r3, #38	; 0x26
 800211a:	d99b      	bls.n	8002054 <SCH_Delete_Task+0x9c>
				}
				SCH_tasks_G[j].pTask = 0;
 800211c:	7bba      	ldrb	r2, [r7, #14]
 800211e:	491f      	ldr	r1, [pc, #124]	; (800219c <SCH_Delete_Task+0x1e4>)
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Period = 0;
 800212e:	7bba      	ldrb	r2, [r7, #14]
 8002130:	491a      	ldr	r1, [pc, #104]	; (800219c <SCH_Delete_Task+0x1e4>)
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	3308      	adds	r3, #8
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Delay = 0;
 8002142:	7bba      	ldrb	r2, [r7, #14]
 8002144:	4915      	ldr	r1, [pc, #84]	; (800219c <SCH_Delete_Task+0x1e4>)
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	3304      	adds	r3, #4
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].RunMe = 0;
 8002156:	7bba      	ldrb	r2, [r7, #14]
 8002158:	4910      	ldr	r1, [pc, #64]	; (800219c <SCH_Delete_Task+0x1e4>)
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	330c      	adds	r3, #12
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
				SCH_tasks_G[j].TaskID = 0;
 800216a:	7bba      	ldrb	r2, [r7, #14]
 800216c:	490b      	ldr	r1, [pc, #44]	; (800219c <SCH_Delete_Task+0x1e4>)
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	3310      	adds	r3, #16
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
				return Return_code;
 800217e:	7b7b      	ldrb	r3, [r7, #13]
 8002180:	e007      	b.n	8002192 <SCH_Delete_Task+0x1da>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	3301      	adds	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
 8002188:	7bfb      	ldrb	r3, [r7, #15]
 800218a:	2b27      	cmp	r3, #39	; 0x27
 800218c:	f67f af21 	bls.w	8001fd2 <SCH_Delete_Task+0x1a>
			}
		}
	}
	return Return_code; // return status
 8002190:	7b7b      	ldrb	r3, [r7, #13]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	20003c74 	.word	0x20003c74

080021a0 <SCH_Dispatch_Tasks>:



void SCH_Dispatch_Tasks(void){
 80021a0:	b5b0      	push	{r4, r5, r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].RunMe > 0) {
 80021a6:	4b11      	ldr	r3, [pc, #68]	; (80021ec <SCH_Dispatch_Tasks+0x4c>)
 80021a8:	7b1b      	ldrb	r3, [r3, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d019      	beq.n	80021e2 <SCH_Dispatch_Tasks+0x42>
//		sprintf((char*) strScheduler, "count=%d\r\n", (int) count_SCH_Update);
//		UART3_SendToHost((uint8_t *)strScheduler);
		(*SCH_tasks_G[0].pTask)(); // Run the task
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <SCH_Dispatch_Tasks+0x4c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4798      	blx	r3
		SCH_tasks_G[0].RunMe = 0; // Reset / reduce RunMe flag
 80021b4:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <SCH_Dispatch_Tasks+0x4c>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	731a      	strb	r2, [r3, #12]
		sTask temtask = SCH_tasks_G[0];
 80021ba:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <SCH_Dispatch_Tasks+0x4c>)
 80021bc:	1d3c      	adds	r4, r7, #4
 80021be:	461d      	mov	r5, r3
 80021c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021c4:	682b      	ldr	r3, [r5, #0]
 80021c6:	6023      	str	r3, [r4, #0]
		SCH_Delete_Task(temtask.TaskID);
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fef4 	bl	8001fb8 <SCH_Delete_Task>
		if (temtask.Period != 0) {
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d005      	beq.n	80021e2 <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(temtask.pTask, temtask.Period, temtask.Period);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68f9      	ldr	r1, [r7, #12]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff fd95 	bl	8001d0c <SCH_Add_Task>
		}
	}
}
 80021e2:	bf00      	nop
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bdb0      	pop	{r4, r5, r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20003c74 	.word	0x20003c74

080021f0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80021f4:	f3bf 8f4f 	dsb	sy
}
 80021f8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <__NVIC_SystemReset+0x24>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002202:	4904      	ldr	r1, [pc, #16]	; (8002214 <__NVIC_SystemReset+0x24>)
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <__NVIC_SystemReset+0x28>)
 8002206:	4313      	orrs	r3, r2
 8002208:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800220a:	f3bf 8f4f 	dsb	sy
}
 800220e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002210:	bf00      	nop
 8002212:	e7fd      	b.n	8002210 <__NVIC_SystemReset+0x20>
 8002214:	e000ed00 	.word	0xe000ed00
 8002218:	05fa0004 	.word	0x05fa0004

0800221c <Jump_To_Current_Firmware>:
	Flash_Erase(CURRENT_VERSION_ADDR,1);
	Flash_Write_Char(CURRENT_VERSION_ADDR, version,strlen(VERSION));
}


void Jump_To_Current_Firmware(){
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
	Flash_Erase(FIRMWARE_CHOOSEN,1);
 8002220:	2101      	movs	r1, #1
 8002222:	4804      	ldr	r0, [pc, #16]	; (8002234 <Jump_To_Current_Firmware+0x18>)
 8002224:	f000 f836 	bl	8002294 <Flash_Erase>
    Flash_Write_Int(FIRMWARE_CHOOSEN, CURRENT_FIRMWARE_CHOOSEN);
 8002228:	2102      	movs	r1, #2
 800222a:	4802      	ldr	r0, [pc, #8]	; (8002234 <Jump_To_Current_Firmware+0x18>)
 800222c:	f000 f856 	bl	80022dc <Flash_Write_Int>
//	void (*app_reset_handler)(void) = (void*)(*(volatile uint32_t*) (CURRENT_FIRMWARE_ADDR + 4));
//	app_reset_handler();
	NVIC_SystemReset();
 8002230:	f7ff ffde 	bl	80021f0 <__NVIC_SystemReset>
 8002234:	08060000 	.word	0x08060000

08002238 <Update_Firmware_Failed>:
//	void (*app_reset_handler)(void) = (void*)(*(volatile uint32_t*) (FOTA_FIRMWARE_ADDR + 4));
//	app_reset_handler();
	NVIC_SystemReset();
}

void Update_Firmware_Failed(){
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
//	Flash_Erase(UPDATE_STATUS_ADDR,1);
//    Flash_Write_Int(UPDATE_STATUS_ADDR, UPDATE_FAILED);
	update_status = UPDATE_FAILED;
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <Update_Firmware_Failed+0x14>)
 800223e:	2201      	movs	r2, #1
 8002240:	701a      	strb	r2, [r3, #0]
}
 8002242:	bf00      	nop
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	20002362 	.word	0x20002362

08002250 <Update_Firmware_Success>:
void Update_Firmware_Success(){
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
//	Flash_Erase(UPDATE_STATUS_ADDR,1);
//    Flash_Write_Int(UPDATE_STATUS_ADDR, UPDATE_SUCCESS);
	update_status = UPDATE_SUCCESS;
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <Update_Firmware_Success+0x14>)
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	20002362 	.word	0x20002362

08002268 <Get_Update_Firmware_Status>:

uint8_t Get_Update_Firmware_Status(){
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
	return update_status;
 800226c:	4b02      	ldr	r3, [pc, #8]	; (8002278 <Get_Update_Firmware_Status+0x10>)
 800226e:	781b      	ldrb	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	20002362 	.word	0x20002362

0800227c <Flash_Lock>:
		data[i] = 0;
	}
}

void Flash_Lock()
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
	HAL_FLASH_Lock();
 8002280:	f000 fe54 	bl	8002f2c <HAL_FLASH_Lock>
}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}

08002288 <Flash_Unlock>:

void Flash_Unlock()
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 800228c:	f000 fe28 	bl	8002ee0 <HAL_FLASH_Unlock>
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}

08002294 <Flash_Erase>:

void Flash_Erase(uint32_t addr,uint32_t num_bytes)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
	uint32_t num_page = (uint32_t)(num_bytes/FLASH_PAGE_SIZE)+1;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	0adb      	lsrs	r3, r3, #11
 80022a2:	3301      	adds	r3, #1
 80022a4:	61fb      	str	r3, [r7, #28]
	uint32_t page_error;
	Flash_Unlock();
 80022a6:	f7ff ffef 	bl	8002288 <Flash_Unlock>
	FLASH_EraseInitTypeDef erase_instance;
	erase_instance.TypeErase = FLASH_TYPEERASE_PAGES;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60bb      	str	r3, [r7, #8]
	erase_instance.NbPages = num_page;
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	617b      	str	r3, [r7, #20]
	erase_instance.PageAddress = addr;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	613b      	str	r3, [r7, #16]
	HAL_FLASHEx_Erase(&erase_instance, &page_error);
 80022b6:	f107 0218 	add.w	r2, r7, #24
 80022ba:	f107 0308 	add.w	r3, r7, #8
 80022be:	4611      	mov	r1, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 fed9 	bl	8003078 <HAL_FLASHEx_Erase>
	Flash_Lock();
 80022c6:	f7ff ffd9 	bl	800227c <Flash_Lock>
	LOG("Erase done\r\n");
 80022ca:	4803      	ldr	r0, [pc, #12]	; (80022d8 <Flash_Erase+0x44>)
 80022cc:	f7fe fc64 	bl	8000b98 <UART_DEBUG_Transmit>
}
 80022d0:	bf00      	nop
 80022d2:	3720      	adds	r7, #32
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	08006040 	.word	0x08006040

080022dc <Flash_Write_Int>:

void Flash_Write_Int(uint32_t addr, int data)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
	Flash_Unlock();
 80022e6:	f7ff ffcf 	bl	8002288 <Flash_Unlock>
	FLASH->CR |= FLASH_CR_PG;				/*!< Programming */
 80022ea:	4b12      	ldr	r3, [pc, #72]	; (8002334 <Flash_Write_Int+0x58>)
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	4a11      	ldr	r2, [pc, #68]	; (8002334 <Flash_Write_Int+0x58>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	6113      	str	r3, [r2, #16]
	while((FLASH->SR&FLASH_SR_BSY));
 80022f6:	bf00      	nop
 80022f8:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <Flash_Write_Int+0x58>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1f9      	bne.n	80022f8 <Flash_Write_Int+0x1c>
	*(__IO uint16_t*)addr = data;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	b292      	uxth	r2, r2
 800230a:	801a      	strh	r2, [r3, #0]
	while((FLASH->SR&FLASH_SR_BSY));
 800230c:	bf00      	nop
 800230e:	4b09      	ldr	r3, [pc, #36]	; (8002334 <Flash_Write_Int+0x58>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f9      	bne.n	800230e <Flash_Write_Int+0x32>
	FLASH->CR &= ~FLASH_CR_PG;
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <Flash_Write_Int+0x58>)
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	4a05      	ldr	r2, [pc, #20]	; (8002334 <Flash_Write_Int+0x58>)
 8002320:	f023 0301 	bic.w	r3, r3, #1
 8002324:	6113      	str	r3, [r2, #16]
	Flash_Lock();
 8002326:	f7ff ffa9 	bl	800227c <Flash_Lock>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40022000 	.word	0x40022000

08002338 <Flash_Write_Char>:
	return *val;
}


void Flash_Write_Char(uint32_t addr, uint8_t* data ,uint32_t data_len)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08a      	sub	sp, #40	; 0x28
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
	char log[20];
	sprintf(log,"leng_char: %d\r\n",data_len);
 8002344:	f107 0310 	add.w	r3, r7, #16
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	4920      	ldr	r1, [pc, #128]	; (80023cc <Flash_Write_Char+0x94>)
 800234c:	4618      	mov	r0, r3
 800234e:	f002 ff75 	bl	800523c <siprintf>
	LOG(log);
 8002352:	f107 0310 	add.w	r3, r7, #16
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe fc1e 	bl	8000b98 <UART_DEBUG_Transmit>
	int i;
	uint16_t temp;
	Flash_Unlock();
 800235c:	f7ff ff94 	bl	8002288 <Flash_Unlock>
	FLASH->CR |= FLASH_CR_PG;
 8002360:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <Flash_Write_Char+0x98>)
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	4a1a      	ldr	r2, [pc, #104]	; (80023d0 <Flash_Write_Char+0x98>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6113      	str	r3, [r2, #16]
	for(i=0; i<data_len; i+=2)
 800236c:	2300      	movs	r3, #0
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
 8002370:	e011      	b.n	8002396 <Flash_Write_Char+0x5e>
	{
	  while((FLASH->SR&FLASH_SR_BSY));
 8002372:	bf00      	nop
 8002374:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <Flash_Write_Char+0x98>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1f9      	bne.n	8002374 <Flash_Write_Char+0x3c>
	  *(__IO uint16_t*)(addr + i) = *(uint16_t*)(data+i);
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	4413      	add	r3, r2
 8002386:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	440a      	add	r2, r1
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	8013      	strh	r3, [r2, #0]
	for(i=0; i<data_len; i+=2)
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	3302      	adds	r3, #2
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	429a      	cmp	r2, r3
 800239c:	d8e9      	bhi.n	8002372 <Flash_Write_Char+0x3a>
	}
	while((FLASH->SR&FLASH_SR_BSY));
 800239e:	bf00      	nop
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <Flash_Write_Char+0x98>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f9      	bne.n	80023a0 <Flash_Write_Char+0x68>
	FLASH->CR &= ~FLASH_CR_PG;
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <Flash_Write_Char+0x98>)
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	4a07      	ldr	r2, [pc, #28]	; (80023d0 <Flash_Write_Char+0x98>)
 80023b2:	f023 0301 	bic.w	r3, r3, #1
 80023b6:	6113      	str	r3, [r2, #16]
	Flash_Lock();
 80023b8:	f7ff ff60 	bl	800227c <Flash_Lock>
	LOG("Write DOne");
 80023bc:	4805      	ldr	r0, [pc, #20]	; (80023d4 <Flash_Write_Char+0x9c>)
 80023be:	f7fe fbeb 	bl	8000b98 <UART_DEBUG_Transmit>
}
 80023c2:	bf00      	nop
 80023c4:	3728      	adds	r7, #40	; 0x28
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	08006050 	.word	0x08006050
 80023d0:	40022000 	.word	0x40022000
 80023d4:	08006060 	.word	0x08006060

080023d8 <FSM_Display_State>:

/**
 * HTTP_Display_State()
 * @brief This is function for display state of State Machine. It only show State when having a state changation.
 */
void FSM_Display_State(void){
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
	if(fsm_curr_state!=fsm_prev_state){
 80023dc:	4b12      	ldr	r3, [pc, #72]	; (8002428 <FSM_Display_State+0x50>)
 80023de:	781a      	ldrb	r2, [r3, #0]
 80023e0:	4b12      	ldr	r3, [pc, #72]	; (800242c <FSM_Display_State+0x54>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d01a      	beq.n	800241e <FSM_Display_State+0x46>
		fsm_prev_state = fsm_curr_state;
 80023e8:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <FSM_Display_State+0x50>)
 80023ea:	781a      	ldrb	r2, [r3, #0]
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <FSM_Display_State+0x54>)
 80023ee:	701a      	strb	r2, [r3, #0]
		switch (fsm_curr_state) {
 80023f0:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <FSM_Display_State+0x50>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d00e      	beq.n	8002416 <FSM_Display_State+0x3e>
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	dc12      	bgt.n	8002422 <FSM_Display_State+0x4a>
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <FSM_Display_State+0x2e>
 8002400:	2b01      	cmp	r3, #1
 8002402:	d004      	beq.n	800240e <FSM_Display_State+0x36>
				break;
			case COPY_NEW_FIRMWARE:
				LOG("\r\nCOPY NEW FIRMWARE\r\n");
				break;
			default:
				break;
 8002404:	e00d      	b.n	8002422 <FSM_Display_State+0x4a>
				LOG("\r\nSTART SIMCOM\r\n");
 8002406:	480a      	ldr	r0, [pc, #40]	; (8002430 <FSM_Display_State+0x58>)
 8002408:	f7fe fbc6 	bl	8000b98 <UART_DEBUG_Transmit>
				break;
 800240c:	e00a      	b.n	8002424 <FSM_Display_State+0x4c>
				LOG("\r\nVERSION CHECKING HTTP\r\n");
 800240e:	4809      	ldr	r0, [pc, #36]	; (8002434 <FSM_Display_State+0x5c>)
 8002410:	f7fe fbc2 	bl	8000b98 <UART_DEBUG_Transmit>
				break;
 8002414:	e006      	b.n	8002424 <FSM_Display_State+0x4c>
				LOG("\r\nCOPY NEW FIRMWARE\r\n");
 8002416:	4808      	ldr	r0, [pc, #32]	; (8002438 <FSM_Display_State+0x60>)
 8002418:	f7fe fbbe 	bl	8000b98 <UART_DEBUG_Transmit>
				break;
 800241c:	e002      	b.n	8002424 <FSM_Display_State+0x4c>
		}
	}
 800241e:	bf00      	nop
 8002420:	e000      	b.n	8002424 <FSM_Display_State+0x4c>
				break;
 8002422:	bf00      	nop

}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	200011c0 	.word	0x200011c0
 800242c:	200011c1 	.word	0x200011c1
 8002430:	0800606c 	.word	0x0800606c
 8002434:	08006080 	.word	0x08006080
 8002438:	0800609c 	.word	0x0800609c

0800243c <FSM_Run>:

/**
 * HTTP_Run()
 * @brief This is function can be called from external file. It run follow state machine method. Not have param.
 */
uint8_t FSM_Run(void){
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	FSM_Display_State();
 8002440:	f7ff ffca 	bl	80023d8 <FSM_Display_State>
	if(fsm_curr_state < FSM_MAX_STATE){
 8002444:	4b07      	ldr	r3, [pc, #28]	; (8002464 <FSM_Run+0x28>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b02      	cmp	r3, #2
 800244a:	d808      	bhi.n	800245e <FSM_Run+0x22>
		(*fsm_state_machine[fsm_curr_state].func)();
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <FSM_Run+0x28>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	4a05      	ldr	r2, [pc, #20]	; (8002468 <FSM_Run+0x2c>)
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4413      	add	r3, r2
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4798      	blx	r3
		return 0;
 800245a:	2300      	movs	r3, #0
 800245c:	e000      	b.n	8002460 <FSM_Run+0x24>
	}
	else{
		return 1;
 800245e:	2301      	movs	r3, #1
	}
}
 8002460:	4618      	mov	r0, r3
 8002462:	bd80      	pop	{r7, pc}
 8002464:	200011c0 	.word	0x200011c0
 8002468:	200000e0 	.word	0x200000e0

0800246c <Start_Simcom>:


void Start_Simcom(){
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
	if(Sim7600_Run()){
 8002470:	f7fd ffc4 	bl	80003fc <Sim7600_Run>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d002      	beq.n	8002480 <Start_Simcom+0x14>
		fsm_curr_state = VERSION_CHECKING_HTTP;
 800247a:	4b02      	ldr	r3, [pc, #8]	; (8002484 <Start_Simcom+0x18>)
 800247c:	2201      	movs	r2, #1
 800247e:	701a      	strb	r2, [r3, #0]
	}
}
 8002480:	bf00      	nop
 8002482:	bd80      	pop	{r7, pc}
 8002484:	200011c0 	.word	0x200011c0

08002488 <Version_Checking_Http>:
void Version_Checking_Http(){
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
	ret = HTTP_Run();
 800248c:	f7fe fc96 	bl	8000dbc <HTTP_Run>
 8002490:	4603      	mov	r3, r0
 8002492:	461a      	mov	r2, r3
 8002494:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <Version_Checking_Http+0x60>)
 8002496:	701a      	strb	r2, [r3, #0]
//	LOG("1");
	if(ret == 1){
 8002498:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <Version_Checking_Http+0x60>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d114      	bne.n	80024ca <Version_Checking_Http+0x42>
		LOG("Get into\r\n");
 80024a0:	4812      	ldr	r0, [pc, #72]	; (80024ec <Version_Checking_Http+0x64>)
 80024a2:	f7fe fb79 	bl	8000b98 <UART_DEBUG_Transmit>
		if(Get_Update_Firmware_Status() == UPDATE_FAILED){
 80024a6:	f7ff fedf 	bl	8002268 <Get_Update_Firmware_Status>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d105      	bne.n	80024bc <Version_Checking_Http+0x34>
			LOG("Get into Update Failed\r\n");
 80024b0:	480f      	ldr	r0, [pc, #60]	; (80024f0 <Version_Checking_Http+0x68>)
 80024b2:	f7fe fb71 	bl	8000b98 <UART_DEBUG_Transmit>
			Jump_To_Current_Firmware();
 80024b6:	f7ff feb1 	bl	800221c <Jump_To_Current_Firmware>
	else if(ret == 2){
		Reset_SimConfiguration_State();
		HTTP_Set_State(HTTP_INIT);
		fsm_curr_state = START_SIMCOM;
	}
}
 80024ba:	e012      	b.n	80024e2 <Version_Checking_Http+0x5a>
			LOG("Get into Update Success\r\n");
 80024bc:	480d      	ldr	r0, [pc, #52]	; (80024f4 <Version_Checking_Http+0x6c>)
 80024be:	f7fe fb6b 	bl	8000b98 <UART_DEBUG_Transmit>
			fsm_curr_state = COPY_NEW_FIRMWARE;
 80024c2:	4b0d      	ldr	r3, [pc, #52]	; (80024f8 <Version_Checking_Http+0x70>)
 80024c4:	2202      	movs	r2, #2
 80024c6:	701a      	strb	r2, [r3, #0]
}
 80024c8:	e00b      	b.n	80024e2 <Version_Checking_Http+0x5a>
	else if(ret == 2){
 80024ca:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <Version_Checking_Http+0x60>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d107      	bne.n	80024e2 <Version_Checking_Http+0x5a>
		Reset_SimConfiguration_State();
 80024d2:	f7fe f93d 	bl	8000750 <Reset_SimConfiguration_State>
		HTTP_Set_State(HTTP_INIT);
 80024d6:	2000      	movs	r0, #0
 80024d8:	f7ff f9e0 	bl	800189c <HTTP_Set_State>
		fsm_curr_state = START_SIMCOM;
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <Version_Checking_Http+0x70>)
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	200011c2 	.word	0x200011c2
 80024ec:	080060b4 	.word	0x080060b4
 80024f0:	080060c0 	.word	0x080060c0
 80024f4:	080060dc 	.word	0x080060dc
 80024f8:	200011c0 	.word	0x200011c0

080024fc <Copy_New_Firmware>:

void Copy_New_Firmware(){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
	for (uint16_t var = 0; var < FIRMWARE_PAGE_LENGTH; ++var) {
 8002502:	2300      	movs	r3, #0
 8002504:	80fb      	strh	r3, [r7, #6]
 8002506:	e01b      	b.n	8002540 <Copy_New_Firmware+0x44>
		Flash_Erase( CURRENT_FIRMWARE_ADDR + var * PAGESIZE, PAGESIZE);
 8002508:	88fb      	ldrh	r3, [r7, #6]
 800250a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800250e:	3340      	adds	r3, #64	; 0x40
 8002510:	02db      	lsls	r3, r3, #11
 8002512:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff febc 	bl	8002294 <Flash_Erase>
		Flash_Write_Char(CURRENT_FIRMWARE_ADDR + var * PAGESIZE, TEMP_FIRMWARE_ADDR + var * PAGESIZE, PAGESIZE);
 800251c:	88fb      	ldrh	r3, [r7, #6]
 800251e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002522:	3340      	adds	r3, #64	; 0x40
 8002524:	02d8      	lsls	r0, r3, #11
 8002526:	88fb      	ldrh	r3, [r7, #6]
 8002528:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800252c:	3380      	adds	r3, #128	; 0x80
 800252e:	02db      	lsls	r3, r3, #11
 8002530:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002534:	4619      	mov	r1, r3
 8002536:	f7ff feff 	bl	8002338 <Flash_Write_Char>
	for (uint16_t var = 0; var < FIRMWARE_PAGE_LENGTH; ++var) {
 800253a:	88fb      	ldrh	r3, [r7, #6]
 800253c:	3301      	adds	r3, #1
 800253e:	80fb      	strh	r3, [r7, #6]
 8002540:	88fb      	ldrh	r3, [r7, #6]
 8002542:	2b31      	cmp	r3, #49	; 0x31
 8002544:	d9e0      	bls.n	8002508 <Copy_New_Firmware+0xc>
	}
	Jump_To_Current_Firmware();
 8002546:	f7ff fe69 	bl	800221c <Jump_To_Current_Firmware>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002558:	f000 f9ec 	bl	8002934 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800255c:	f7fe f9c8 	bl	80008f0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  UART_SIM7600_Init();
 8002560:	f7fe fa54 	bl	8000a0c <UART_SIM7600_Init>
  UART_DEBUG_Init();
 8002564:	f7fe faee 	bl	8000b44 <UART_DEBUG_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  GPIO_Init();
 8002568:	f7fe f8fa 	bl	8000760 <GPIO_Init>
  Timer_Init();
 800256c:	f7fe fa06 	bl	800097c <Timer_Init>
  SPI2_Init();
 8002570:	f7fe f964 	bl	800083c <SPI2_Init>
  MC25LC512_Initialize();
 8002574:	f7fd fea4 	bl	80002c0 <MC25LC512_Initialize>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  UART_DEBUG_Transmit("Fota Firmware Start\r\n");
 8002578:	4804      	ldr	r0, [pc, #16]	; (800258c <main+0x38>)
 800257a:	f7fe fb0d 	bl	8000b98 <UART_DEBUG_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */
	  FSM_Run();
 800257e:	f7ff ff5d 	bl	800243c <FSM_Run>
	  SCH_Dispatch_Tasks();
 8002582:	f7ff fe0d 	bl	80021a0 <SCH_Dispatch_Tasks>
	  AT_Processing();
 8002586:	f7ff fa59 	bl	8001a3c <AT_Processing>
  {
 800258a:	e7f8      	b.n	800257e <main+0x2a>
 800258c:	080060f8 	.word	0x080060f8

08002590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002594:	b672      	cpsid	i
}
 8002596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002598:	e7fe      	b.n	8002598 <Error_Handler+0x8>
	...

0800259c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <HAL_MspInit+0x5c>)
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	4a14      	ldr	r2, [pc, #80]	; (80025f8 <HAL_MspInit+0x5c>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6193      	str	r3, [r2, #24]
 80025ae:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <HAL_MspInit+0x5c>)
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ba:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <HAL_MspInit+0x5c>)
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	4a0e      	ldr	r2, [pc, #56]	; (80025f8 <HAL_MspInit+0x5c>)
 80025c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c4:	61d3      	str	r3, [r2, #28]
 80025c6:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <HAL_MspInit+0x5c>)
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ce:	607b      	str	r3, [r7, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80025d2:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <HAL_MspInit+0x60>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	4a04      	ldr	r2, [pc, #16]	; (80025fc <HAL_MspInit+0x60>)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ee:	bf00      	nop
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40010000 	.word	0x40010000

08002600 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002608:	f107 0310 	add.w	r3, r7, #16
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a16      	ldr	r2, [pc, #88]	; (8002674 <HAL_SPI_MspInit+0x74>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d124      	bne.n	800266a <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002620:	4b15      	ldr	r3, [pc, #84]	; (8002678 <HAL_SPI_MspInit+0x78>)
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	4a14      	ldr	r2, [pc, #80]	; (8002678 <HAL_SPI_MspInit+0x78>)
 8002626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800262a:	61d3      	str	r3, [r2, #28]
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_SPI_MspInit+0x78>)
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002638:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <HAL_SPI_MspInit+0x78>)
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	4a0e      	ldr	r2, [pc, #56]	; (8002678 <HAL_SPI_MspInit+0x78>)
 800263e:	f043 0308 	orr.w	r3, r3, #8
 8002642:	6193      	str	r3, [r2, #24]
 8002644:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <HAL_SPI_MspInit+0x78>)
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002650:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002654:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002656:	2302      	movs	r3, #2
 8002658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800265a:	2303      	movs	r3, #3
 800265c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800265e:	f107 0310 	add.w	r3, r7, #16
 8002662:	4619      	mov	r1, r3
 8002664:	4805      	ldr	r0, [pc, #20]	; (800267c <HAL_SPI_MspInit+0x7c>)
 8002666:	f000 fdaf 	bl	80031c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800266a:	bf00      	nop
 800266c:	3720      	adds	r7, #32
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40003800 	.word	0x40003800
 8002678:	40021000 	.word	0x40021000
 800267c:	40010c00 	.word	0x40010c00

08002680 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0d      	ldr	r2, [pc, #52]	; (80026c4 <HAL_TIM_Base_MspInit+0x44>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d113      	bne.n	80026ba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002692:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <HAL_TIM_Base_MspInit+0x48>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	4a0c      	ldr	r2, [pc, #48]	; (80026c8 <HAL_TIM_Base_MspInit+0x48>)
 8002698:	f043 0302 	orr.w	r3, r3, #2
 800269c:	61d3      	str	r3, [r2, #28]
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <HAL_TIM_Base_MspInit+0x48>)
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026aa:	2200      	movs	r2, #0
 80026ac:	2100      	movs	r1, #0
 80026ae:	201d      	movs	r0, #29
 80026b0:	f000 fa9d 	bl	8002bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026b4:	201d      	movs	r0, #29
 80026b6:	f000 fab6 	bl	8002c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40000400 	.word	0x40000400
 80026c8:	40021000 	.word	0x40021000

080026cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d4:	f107 0318 	add.w	r3, r7, #24
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a3c      	ldr	r2, [pc, #240]	; (80027d8 <HAL_UART_MspInit+0x10c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d13a      	bne.n	8002762 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026ec:	4b3b      	ldr	r3, [pc, #236]	; (80027dc <HAL_UART_MspInit+0x110>)
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	4a3a      	ldr	r2, [pc, #232]	; (80027dc <HAL_UART_MspInit+0x110>)
 80026f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f6:	6193      	str	r3, [r2, #24]
 80026f8:	4b38      	ldr	r3, [pc, #224]	; (80027dc <HAL_UART_MspInit+0x110>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002704:	4b35      	ldr	r3, [pc, #212]	; (80027dc <HAL_UART_MspInit+0x110>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	4a34      	ldr	r2, [pc, #208]	; (80027dc <HAL_UART_MspInit+0x110>)
 800270a:	f043 0304 	orr.w	r3, r3, #4
 800270e:	6193      	str	r3, [r2, #24]
 8002710:	4b32      	ldr	r3, [pc, #200]	; (80027dc <HAL_UART_MspInit+0x110>)
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800271c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002722:	2302      	movs	r3, #2
 8002724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002726:	2303      	movs	r3, #3
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272a:	f107 0318 	add.w	r3, r7, #24
 800272e:	4619      	mov	r1, r3
 8002730:	482b      	ldr	r0, [pc, #172]	; (80027e0 <HAL_UART_MspInit+0x114>)
 8002732:	f000 fd49 	bl	80031c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800273a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800273c:	2300      	movs	r3, #0
 800273e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002744:	f107 0318 	add.w	r3, r7, #24
 8002748:	4619      	mov	r1, r3
 800274a:	4825      	ldr	r0, [pc, #148]	; (80027e0 <HAL_UART_MspInit+0x114>)
 800274c:	f000 fd3c 	bl	80031c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002750:	2200      	movs	r2, #0
 8002752:	2100      	movs	r1, #0
 8002754:	2025      	movs	r0, #37	; 0x25
 8002756:	f000 fa4a 	bl	8002bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800275a:	2025      	movs	r0, #37	; 0x25
 800275c:	f000 fa63 	bl	8002c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002760:	e036      	b.n	80027d0 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a1f      	ldr	r2, [pc, #124]	; (80027e4 <HAL_UART_MspInit+0x118>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d131      	bne.n	80027d0 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 800276c:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <HAL_UART_MspInit+0x110>)
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	4a1a      	ldr	r2, [pc, #104]	; (80027dc <HAL_UART_MspInit+0x110>)
 8002772:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002776:	61d3      	str	r3, [r2, #28]
 8002778:	4b18      	ldr	r3, [pc, #96]	; (80027dc <HAL_UART_MspInit+0x110>)
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002784:	4b15      	ldr	r3, [pc, #84]	; (80027dc <HAL_UART_MspInit+0x110>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	4a14      	ldr	r2, [pc, #80]	; (80027dc <HAL_UART_MspInit+0x110>)
 800278a:	f043 0308 	orr.w	r3, r3, #8
 800278e:	6193      	str	r3, [r2, #24]
 8002790:	4b12      	ldr	r3, [pc, #72]	; (80027dc <HAL_UART_MspInit+0x110>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800279c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a2:	2302      	movs	r3, #2
 80027a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027a6:	2303      	movs	r3, #3
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027aa:	f107 0318 	add.w	r3, r7, #24
 80027ae:	4619      	mov	r1, r3
 80027b0:	480d      	ldr	r0, [pc, #52]	; (80027e8 <HAL_UART_MspInit+0x11c>)
 80027b2:	f000 fd09 	bl	80031c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80027b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027bc:	2300      	movs	r3, #0
 80027be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c4:	f107 0318 	add.w	r3, r7, #24
 80027c8:	4619      	mov	r1, r3
 80027ca:	4807      	ldr	r0, [pc, #28]	; (80027e8 <HAL_UART_MspInit+0x11c>)
 80027cc:	f000 fcfc 	bl	80031c8 <HAL_GPIO_Init>
}
 80027d0:	bf00      	nop
 80027d2:	3728      	adds	r7, #40	; 0x28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40013800 	.word	0x40013800
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40010800 	.word	0x40010800
 80027e4:	40004800 	.word	0x40004800
 80027e8:	40010c00 	.word	0x40010c00

080027ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027f0:	e7fe      	b.n	80027f0 <NMI_Handler+0x4>

080027f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027f2:	b480      	push	{r7}
 80027f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f6:	e7fe      	b.n	80027f6 <HardFault_Handler+0x4>

080027f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027fc:	e7fe      	b.n	80027fc <MemManage_Handler+0x4>

080027fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002802:	e7fe      	b.n	8002802 <BusFault_Handler+0x4>

08002804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002808:	e7fe      	b.n	8002808 <UsageFault_Handler+0x4>

0800280a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr

08002816 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr

08002822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002822:	b480      	push	{r7}
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr

0800282e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002832:	f000 f8c5 	bl	80029c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002840:	4802      	ldr	r0, [pc, #8]	; (800284c <TIM3_IRQHandler+0x10>)
 8002842:	f001 fd9d 	bl	8004380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	2000125c 	.word	0x2000125c

08002850 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002854:	4802      	ldr	r0, [pc, #8]	; (8002860 <USART1_IRQHandler+0x10>)
 8002856:	f002 f89f 	bl	8004998 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	200022ec 	.word	0x200022ec

08002864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800286c:	4a14      	ldr	r2, [pc, #80]	; (80028c0 <_sbrk+0x5c>)
 800286e:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <_sbrk+0x60>)
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002878:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <_sbrk+0x64>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d102      	bne.n	8002886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002880:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <_sbrk+0x64>)
 8002882:	4a12      	ldr	r2, [pc, #72]	; (80028cc <_sbrk+0x68>)
 8002884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002886:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <_sbrk+0x64>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4413      	add	r3, r2
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	429a      	cmp	r2, r3
 8002892:	d207      	bcs.n	80028a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002894:	f002 fca0 	bl	80051d8 <__errno>
 8002898:	4603      	mov	r3, r0
 800289a:	220c      	movs	r2, #12
 800289c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800289e:	f04f 33ff 	mov.w	r3, #4294967295
 80028a2:	e009      	b.n	80028b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <_sbrk+0x64>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028aa:	4b07      	ldr	r3, [pc, #28]	; (80028c8 <_sbrk+0x64>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4413      	add	r3, r2
 80028b2:	4a05      	ldr	r2, [pc, #20]	; (80028c8 <_sbrk+0x64>)
 80028b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028b6:	68fb      	ldr	r3, [r7, #12]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20010000 	.word	0x20010000
 80028c4:	00000400 	.word	0x00000400
 80028c8:	200011c4 	.word	0x200011c4
 80028cc:	20003fc8 	.word	0x20003fc8

080028d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 80028d4:	4b03      	ldr	r3, [pc, #12]	; (80028e4 <SystemInit+0x14>)
 80028d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028da:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028e8:	480c      	ldr	r0, [pc, #48]	; (800291c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028ea:	490d      	ldr	r1, [pc, #52]	; (8002920 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028ec:	4a0d      	ldr	r2, [pc, #52]	; (8002924 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028f0:	e002      	b.n	80028f8 <LoopCopyDataInit>

080028f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028f6:	3304      	adds	r3, #4

080028f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028fc:	d3f9      	bcc.n	80028f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028fe:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002900:	4c0a      	ldr	r4, [pc, #40]	; (800292c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002904:	e001      	b.n	800290a <LoopFillZerobss>

08002906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002908:	3204      	adds	r2, #4

0800290a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800290a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800290c:	d3fb      	bcc.n	8002906 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800290e:	f7ff ffdf 	bl	80028d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002912:	f002 fc67 	bl	80051e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002916:	f7ff fe1d 	bl	8002554 <main>
  bx lr
 800291a:	4770      	bx	lr
  ldr r0, =_sdata
 800291c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002920:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8002924:	080061c0 	.word	0x080061c0
  ldr r2, =_sbss
 8002928:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 800292c:	20003fc8 	.word	0x20003fc8

08002930 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002930:	e7fe      	b.n	8002930 <ADC1_2_IRQHandler>
	...

08002934 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002938:	4b08      	ldr	r3, [pc, #32]	; (800295c <HAL_Init+0x28>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a07      	ldr	r2, [pc, #28]	; (800295c <HAL_Init+0x28>)
 800293e:	f043 0310 	orr.w	r3, r3, #16
 8002942:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002944:	2003      	movs	r0, #3
 8002946:	f000 f947 	bl	8002bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800294a:	200f      	movs	r0, #15
 800294c:	f000 f808 	bl	8002960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002950:	f7ff fe24 	bl	800259c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40022000 	.word	0x40022000

08002960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002968:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <HAL_InitTick+0x54>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <HAL_InitTick+0x58>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	4619      	mov	r1, r3
 8002972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002976:	fbb3 f3f1 	udiv	r3, r3, r1
 800297a:	fbb2 f3f3 	udiv	r3, r2, r3
 800297e:	4618      	mov	r0, r3
 8002980:	f000 f95f 	bl	8002c42 <HAL_SYSTICK_Config>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e00e      	b.n	80029ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b0f      	cmp	r3, #15
 8002992:	d80a      	bhi.n	80029aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002994:	2200      	movs	r2, #0
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	f04f 30ff 	mov.w	r0, #4294967295
 800299c:	f000 f927 	bl	8002bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029a0:	4a06      	ldr	r2, [pc, #24]	; (80029bc <HAL_InitTick+0x5c>)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	e000      	b.n	80029ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	200000f8 	.word	0x200000f8
 80029b8:	20000100 	.word	0x20000100
 80029bc:	200000fc 	.word	0x200000fc

080029c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029c4:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_IncTick+0x1c>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	461a      	mov	r2, r3
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_IncTick+0x20>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4413      	add	r3, r2
 80029d0:	4a03      	ldr	r2, [pc, #12]	; (80029e0 <HAL_IncTick+0x20>)
 80029d2:	6013      	str	r3, [r2, #0]
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	20000100 	.word	0x20000100
 80029e0:	20003f94 	.word	0x20003f94

080029e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return uwTick;
 80029e8:	4b02      	ldr	r3, [pc, #8]	; (80029f4 <HAL_GetTick+0x10>)
 80029ea:	681b      	ldr	r3, [r3, #0]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr
 80029f4:	20003f94 	.word	0x20003f94

080029f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a00:	f7ff fff0 	bl	80029e4 <HAL_GetTick>
 8002a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d005      	beq.n	8002a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a12:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <HAL_Delay+0x44>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a1e:	bf00      	nop
 8002a20:	f7ff ffe0 	bl	80029e4 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d8f7      	bhi.n	8002a20 <HAL_Delay+0x28>
  {
  }
}
 8002a30:	bf00      	nop
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000100 	.word	0x20000100

08002a40 <__NVIC_SetPriorityGrouping>:
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <__NVIC_SetPriorityGrouping+0x44>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a72:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <__NVIC_SetPriorityGrouping+0x44>)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	60d3      	str	r3, [r2, #12]
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <__NVIC_GetPriorityGrouping>:
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a8c:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	0a1b      	lsrs	r3, r3, #8
 8002a92:	f003 0307 	and.w	r3, r3, #7
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <__NVIC_EnableIRQ>:
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	db0b      	blt.n	8002ace <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	f003 021f 	and.w	r2, r3, #31
 8002abc:	4906      	ldr	r1, [pc, #24]	; (8002ad8 <__NVIC_EnableIRQ+0x34>)
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	e000e100 	.word	0xe000e100

08002adc <__NVIC_SetPriority>:
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	6039      	str	r1, [r7, #0]
 8002ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	db0a      	blt.n	8002b06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	490c      	ldr	r1, [pc, #48]	; (8002b28 <__NVIC_SetPriority+0x4c>)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	0112      	lsls	r2, r2, #4
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	440b      	add	r3, r1
 8002b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b04:	e00a      	b.n	8002b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	4908      	ldr	r1, [pc, #32]	; (8002b2c <__NVIC_SetPriority+0x50>)
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	3b04      	subs	r3, #4
 8002b14:	0112      	lsls	r2, r2, #4
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	440b      	add	r3, r1
 8002b1a:	761a      	strb	r2, [r3, #24]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000e100 	.word	0xe000e100
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <NVIC_EncodePriority>:
{
 8002b30:	b480      	push	{r7}
 8002b32:	b089      	sub	sp, #36	; 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f1c3 0307 	rsb	r3, r3, #7
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	bf28      	it	cs
 8002b4e:	2304      	movcs	r3, #4
 8002b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3304      	adds	r3, #4
 8002b56:	2b06      	cmp	r3, #6
 8002b58:	d902      	bls.n	8002b60 <NVIC_EncodePriority+0x30>
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3b03      	subs	r3, #3
 8002b5e:	e000      	b.n	8002b62 <NVIC_EncodePriority+0x32>
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	f04f 32ff 	mov.w	r2, #4294967295
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	401a      	ands	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b78:	f04f 31ff 	mov.w	r1, #4294967295
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b82:	43d9      	mvns	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b88:	4313      	orrs	r3, r2
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3724      	adds	r7, #36	; 0x24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ba4:	d301      	bcc.n	8002baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e00f      	b.n	8002bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002baa:	4a0a      	ldr	r2, [pc, #40]	; (8002bd4 <SysTick_Config+0x40>)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bb2:	210f      	movs	r1, #15
 8002bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb8:	f7ff ff90 	bl	8002adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <SysTick_Config+0x40>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bc2:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <SysTick_Config+0x40>)
 8002bc4:	2207      	movs	r2, #7
 8002bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	e000e010 	.word	0xe000e010

08002bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff ff2d 	bl	8002a40 <__NVIC_SetPriorityGrouping>
}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b086      	sub	sp, #24
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
 8002bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c00:	f7ff ff42 	bl	8002a88 <__NVIC_GetPriorityGrouping>
 8002c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68b9      	ldr	r1, [r7, #8]
 8002c0a:	6978      	ldr	r0, [r7, #20]
 8002c0c:	f7ff ff90 	bl	8002b30 <NVIC_EncodePriority>
 8002c10:	4602      	mov	r2, r0
 8002c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c16:	4611      	mov	r1, r2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff ff5f 	bl	8002adc <__NVIC_SetPriority>
}
 8002c1e:	bf00      	nop
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff ff35 	bl	8002aa4 <__NVIC_EnableIRQ>
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff ffa2 	bl	8002b94 <SysTick_Config>
 8002c50:	4603      	mov	r3, r0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b085      	sub	sp, #20
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d008      	beq.n	8002c82 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2204      	movs	r2, #4
 8002c74:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e020      	b.n	8002cc4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 020e 	bic.w	r2, r2, #14
 8002c90:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0201 	bic.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002caa:	2101      	movs	r1, #1
 8002cac:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr
	...

08002cd0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d005      	beq.n	8002cf2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2204      	movs	r2, #4
 8002cea:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
 8002cf0:	e0d6      	b.n	8002ea0 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 020e 	bic.w	r2, r2, #14
 8002d00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0201 	bic.w	r2, r2, #1
 8002d10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	4b64      	ldr	r3, [pc, #400]	; (8002eac <HAL_DMA_Abort_IT+0x1dc>)
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d958      	bls.n	8002dd0 <HAL_DMA_Abort_IT+0x100>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a63      	ldr	r2, [pc, #396]	; (8002eb0 <HAL_DMA_Abort_IT+0x1e0>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d04f      	beq.n	8002dc8 <HAL_DMA_Abort_IT+0xf8>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a61      	ldr	r2, [pc, #388]	; (8002eb4 <HAL_DMA_Abort_IT+0x1e4>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d048      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0xf4>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a60      	ldr	r2, [pc, #384]	; (8002eb8 <HAL_DMA_Abort_IT+0x1e8>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d040      	beq.n	8002dbe <HAL_DMA_Abort_IT+0xee>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a5e      	ldr	r2, [pc, #376]	; (8002ebc <HAL_DMA_Abort_IT+0x1ec>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d038      	beq.n	8002db8 <HAL_DMA_Abort_IT+0xe8>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a5d      	ldr	r2, [pc, #372]	; (8002ec0 <HAL_DMA_Abort_IT+0x1f0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d030      	beq.n	8002db2 <HAL_DMA_Abort_IT+0xe2>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a5b      	ldr	r2, [pc, #364]	; (8002ec4 <HAL_DMA_Abort_IT+0x1f4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d028      	beq.n	8002dac <HAL_DMA_Abort_IT+0xdc>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a53      	ldr	r2, [pc, #332]	; (8002eac <HAL_DMA_Abort_IT+0x1dc>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d020      	beq.n	8002da6 <HAL_DMA_Abort_IT+0xd6>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a57      	ldr	r2, [pc, #348]	; (8002ec8 <HAL_DMA_Abort_IT+0x1f8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d019      	beq.n	8002da2 <HAL_DMA_Abort_IT+0xd2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a56      	ldr	r2, [pc, #344]	; (8002ecc <HAL_DMA_Abort_IT+0x1fc>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d012      	beq.n	8002d9e <HAL_DMA_Abort_IT+0xce>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a54      	ldr	r2, [pc, #336]	; (8002ed0 <HAL_DMA_Abort_IT+0x200>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00a      	beq.n	8002d98 <HAL_DMA_Abort_IT+0xc8>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a53      	ldr	r2, [pc, #332]	; (8002ed4 <HAL_DMA_Abort_IT+0x204>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d102      	bne.n	8002d92 <HAL_DMA_Abort_IT+0xc2>
 8002d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d90:	e01b      	b.n	8002dca <HAL_DMA_Abort_IT+0xfa>
 8002d92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d96:	e018      	b.n	8002dca <HAL_DMA_Abort_IT+0xfa>
 8002d98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d9c:	e015      	b.n	8002dca <HAL_DMA_Abort_IT+0xfa>
 8002d9e:	2310      	movs	r3, #16
 8002da0:	e013      	b.n	8002dca <HAL_DMA_Abort_IT+0xfa>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e011      	b.n	8002dca <HAL_DMA_Abort_IT+0xfa>
 8002da6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002daa:	e00e      	b.n	8002dca <HAL_DMA_Abort_IT+0xfa>
 8002dac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002db0:	e00b      	b.n	8002dca <HAL_DMA_Abort_IT+0xfa>
 8002db2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002db6:	e008      	b.n	8002dca <HAL_DMA_Abort_IT+0xfa>
 8002db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dbc:	e005      	b.n	8002dca <HAL_DMA_Abort_IT+0xfa>
 8002dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dc2:	e002      	b.n	8002dca <HAL_DMA_Abort_IT+0xfa>
 8002dc4:	2310      	movs	r3, #16
 8002dc6:	e000      	b.n	8002dca <HAL_DMA_Abort_IT+0xfa>
 8002dc8:	2301      	movs	r3, #1
 8002dca:	4a43      	ldr	r2, [pc, #268]	; (8002ed8 <HAL_DMA_Abort_IT+0x208>)
 8002dcc:	6053      	str	r3, [r2, #4]
 8002dce:	e057      	b.n	8002e80 <HAL_DMA_Abort_IT+0x1b0>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a36      	ldr	r2, [pc, #216]	; (8002eb0 <HAL_DMA_Abort_IT+0x1e0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d04f      	beq.n	8002e7a <HAL_DMA_Abort_IT+0x1aa>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a35      	ldr	r2, [pc, #212]	; (8002eb4 <HAL_DMA_Abort_IT+0x1e4>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d048      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x1a6>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a33      	ldr	r2, [pc, #204]	; (8002eb8 <HAL_DMA_Abort_IT+0x1e8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d040      	beq.n	8002e70 <HAL_DMA_Abort_IT+0x1a0>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a32      	ldr	r2, [pc, #200]	; (8002ebc <HAL_DMA_Abort_IT+0x1ec>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d038      	beq.n	8002e6a <HAL_DMA_Abort_IT+0x19a>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a30      	ldr	r2, [pc, #192]	; (8002ec0 <HAL_DMA_Abort_IT+0x1f0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d030      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x194>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a2f      	ldr	r2, [pc, #188]	; (8002ec4 <HAL_DMA_Abort_IT+0x1f4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d028      	beq.n	8002e5e <HAL_DMA_Abort_IT+0x18e>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a26      	ldr	r2, [pc, #152]	; (8002eac <HAL_DMA_Abort_IT+0x1dc>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d020      	beq.n	8002e58 <HAL_DMA_Abort_IT+0x188>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a2b      	ldr	r2, [pc, #172]	; (8002ec8 <HAL_DMA_Abort_IT+0x1f8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d019      	beq.n	8002e54 <HAL_DMA_Abort_IT+0x184>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a29      	ldr	r2, [pc, #164]	; (8002ecc <HAL_DMA_Abort_IT+0x1fc>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d012      	beq.n	8002e50 <HAL_DMA_Abort_IT+0x180>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a28      	ldr	r2, [pc, #160]	; (8002ed0 <HAL_DMA_Abort_IT+0x200>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00a      	beq.n	8002e4a <HAL_DMA_Abort_IT+0x17a>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a26      	ldr	r2, [pc, #152]	; (8002ed4 <HAL_DMA_Abort_IT+0x204>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d102      	bne.n	8002e44 <HAL_DMA_Abort_IT+0x174>
 8002e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e42:	e01b      	b.n	8002e7c <HAL_DMA_Abort_IT+0x1ac>
 8002e44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e48:	e018      	b.n	8002e7c <HAL_DMA_Abort_IT+0x1ac>
 8002e4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e4e:	e015      	b.n	8002e7c <HAL_DMA_Abort_IT+0x1ac>
 8002e50:	2310      	movs	r3, #16
 8002e52:	e013      	b.n	8002e7c <HAL_DMA_Abort_IT+0x1ac>
 8002e54:	2301      	movs	r3, #1
 8002e56:	e011      	b.n	8002e7c <HAL_DMA_Abort_IT+0x1ac>
 8002e58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e5c:	e00e      	b.n	8002e7c <HAL_DMA_Abort_IT+0x1ac>
 8002e5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e62:	e00b      	b.n	8002e7c <HAL_DMA_Abort_IT+0x1ac>
 8002e64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e68:	e008      	b.n	8002e7c <HAL_DMA_Abort_IT+0x1ac>
 8002e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e6e:	e005      	b.n	8002e7c <HAL_DMA_Abort_IT+0x1ac>
 8002e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e74:	e002      	b.n	8002e7c <HAL_DMA_Abort_IT+0x1ac>
 8002e76:	2310      	movs	r3, #16
 8002e78:	e000      	b.n	8002e7c <HAL_DMA_Abort_IT+0x1ac>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	4a17      	ldr	r2, [pc, #92]	; (8002edc <HAL_DMA_Abort_IT+0x20c>)
 8002e7e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	4798      	blx	r3
    } 
  }
  return status;
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40020080 	.word	0x40020080
 8002eb0:	40020008 	.word	0x40020008
 8002eb4:	4002001c 	.word	0x4002001c
 8002eb8:	40020030 	.word	0x40020030
 8002ebc:	40020044 	.word	0x40020044
 8002ec0:	40020058 	.word	0x40020058
 8002ec4:	4002006c 	.word	0x4002006c
 8002ec8:	40020408 	.word	0x40020408
 8002ecc:	4002041c 	.word	0x4002041c
 8002ed0:	40020430 	.word	0x40020430
 8002ed4:	40020444 	.word	0x40020444
 8002ed8:	40020400 	.word	0x40020400
 8002edc:	40020000 	.word	0x40020000

08002ee0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002eea:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <HAL_FLASH_Unlock+0x40>)
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00d      	beq.n	8002f12 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002ef6:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <HAL_FLASH_Unlock+0x40>)
 8002ef8:	4a0a      	ldr	r2, [pc, #40]	; (8002f24 <HAL_FLASH_Unlock+0x44>)
 8002efa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002efc:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <HAL_FLASH_Unlock+0x40>)
 8002efe:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <HAL_FLASH_Unlock+0x48>)
 8002f00:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002f02:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <HAL_FLASH_Unlock+0x40>)
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002f12:	79fb      	ldrb	r3, [r7, #7]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40022000 	.word	0x40022000
 8002f24:	45670123 	.word	0x45670123
 8002f28:	cdef89ab 	.word	0xcdef89ab

08002f2c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002f30:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <HAL_FLASH_Lock+0x1c>)
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <HAL_FLASH_Lock+0x1c>)
 8002f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f3a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40022000 	.word	0x40022000

08002f4c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002f54:	f7ff fd46 	bl	80029e4 <HAL_GetTick>
 8002f58:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002f5a:	e010      	b.n	8002f7e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f62:	d00c      	beq.n	8002f7e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d007      	beq.n	8002f7a <FLASH_WaitForLastOperation+0x2e>
 8002f6a:	f7ff fd3b 	bl	80029e4 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d201      	bcs.n	8002f7e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e025      	b.n	8002fca <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002f7e:	4b15      	ldr	r3, [pc, #84]	; (8002fd4 <FLASH_WaitForLastOperation+0x88>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1e8      	bne.n	8002f5c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002f8a:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <FLASH_WaitForLastOperation+0x88>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f003 0320 	and.w	r3, r3, #32
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002f96:	4b0f      	ldr	r3, [pc, #60]	; (8002fd4 <FLASH_WaitForLastOperation+0x88>)
 8002f98:	2220      	movs	r2, #32
 8002f9a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002f9c:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <FLASH_WaitForLastOperation+0x88>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10b      	bne.n	8002fc0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <FLASH_WaitForLastOperation+0x88>)
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d105      	bne.n	8002fc0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002fb4:	4b07      	ldr	r3, [pc, #28]	; (8002fd4 <FLASH_WaitForLastOperation+0x88>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002fc0:	f000 f80a 	bl	8002fd8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40022000 	.word	0x40022000

08002fd8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002fe2:	4b23      	ldr	r3, [pc, #140]	; (8003070 <FLASH_SetErrorCode+0x98>)
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d009      	beq.n	8003002 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002fee:	4b21      	ldr	r3, [pc, #132]	; (8003074 <FLASH_SetErrorCode+0x9c>)
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f043 0302 	orr.w	r3, r3, #2
 8002ff6:	4a1f      	ldr	r2, [pc, #124]	; (8003074 <FLASH_SetErrorCode+0x9c>)
 8002ff8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f043 0310 	orr.w	r3, r3, #16
 8003000:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003002:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <FLASH_SetErrorCode+0x98>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b00      	cmp	r3, #0
 800300c:	d009      	beq.n	8003022 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800300e:	4b19      	ldr	r3, [pc, #100]	; (8003074 <FLASH_SetErrorCode+0x9c>)
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	f043 0301 	orr.w	r3, r3, #1
 8003016:	4a17      	ldr	r2, [pc, #92]	; (8003074 <FLASH_SetErrorCode+0x9c>)
 8003018:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f043 0304 	orr.w	r3, r3, #4
 8003020:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003022:	4b13      	ldr	r3, [pc, #76]	; (8003070 <FLASH_SetErrorCode+0x98>)
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00b      	beq.n	8003046 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800302e:	4b11      	ldr	r3, [pc, #68]	; (8003074 <FLASH_SetErrorCode+0x9c>)
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	f043 0304 	orr.w	r3, r3, #4
 8003036:	4a0f      	ldr	r2, [pc, #60]	; (8003074 <FLASH_SetErrorCode+0x9c>)
 8003038:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800303a:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <FLASH_SetErrorCode+0x98>)
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	4a0c      	ldr	r2, [pc, #48]	; (8003070 <FLASH_SetErrorCode+0x98>)
 8003040:	f023 0301 	bic.w	r3, r3, #1
 8003044:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f240 1201 	movw	r2, #257	; 0x101
 800304c:	4293      	cmp	r3, r2
 800304e:	d106      	bne.n	800305e <FLASH_SetErrorCode+0x86>
 8003050:	4b07      	ldr	r3, [pc, #28]	; (8003070 <FLASH_SetErrorCode+0x98>)
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	4a06      	ldr	r2, [pc, #24]	; (8003070 <FLASH_SetErrorCode+0x98>)
 8003056:	f023 0301 	bic.w	r3, r3, #1
 800305a:	61d3      	str	r3, [r2, #28]
}  
 800305c:	e002      	b.n	8003064 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800305e:	4a04      	ldr	r2, [pc, #16]	; (8003070 <FLASH_SetErrorCode+0x98>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	60d3      	str	r3, [r2, #12]
}  
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40022000 	.word	0x40022000
 8003074:	20003f98 	.word	0x20003f98

08003078 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800308a:	4b2f      	ldr	r3, [pc, #188]	; (8003148 <HAL_FLASHEx_Erase+0xd0>)
 800308c:	7e1b      	ldrb	r3, [r3, #24]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_FLASHEx_Erase+0x1e>
 8003092:	2302      	movs	r3, #2
 8003094:	e053      	b.n	800313e <HAL_FLASHEx_Erase+0xc6>
 8003096:	4b2c      	ldr	r3, [pc, #176]	; (8003148 <HAL_FLASHEx_Erase+0xd0>)
 8003098:	2201      	movs	r2, #1
 800309a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d116      	bne.n	80030d2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80030a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80030a8:	f7ff ff50 	bl	8002f4c <FLASH_WaitForLastOperation>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d141      	bne.n	8003136 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80030b2:	2001      	movs	r0, #1
 80030b4:	f000 f84c 	bl	8003150 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80030b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80030bc:	f7ff ff46 	bl	8002f4c <FLASH_WaitForLastOperation>
 80030c0:	4603      	mov	r3, r0
 80030c2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80030c4:	4b21      	ldr	r3, [pc, #132]	; (800314c <HAL_FLASHEx_Erase+0xd4>)
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	4a20      	ldr	r2, [pc, #128]	; (800314c <HAL_FLASHEx_Erase+0xd4>)
 80030ca:	f023 0304 	bic.w	r3, r3, #4
 80030ce:	6113      	str	r3, [r2, #16]
 80030d0:	e031      	b.n	8003136 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80030d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80030d6:	f7ff ff39 	bl	8002f4c <FLASH_WaitForLastOperation>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d12a      	bne.n	8003136 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	f04f 32ff 	mov.w	r2, #4294967295
 80030e6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	e019      	b.n	8003124 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80030f0:	68b8      	ldr	r0, [r7, #8]
 80030f2:	f000 f849 	bl	8003188 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80030f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80030fa:	f7ff ff27 	bl	8002f4c <FLASH_WaitForLastOperation>
 80030fe:	4603      	mov	r3, r0
 8003100:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003102:	4b12      	ldr	r3, [pc, #72]	; (800314c <HAL_FLASHEx_Erase+0xd4>)
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	4a11      	ldr	r2, [pc, #68]	; (800314c <HAL_FLASHEx_Erase+0xd4>)
 8003108:	f023 0302 	bic.w	r3, r3, #2
 800310c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	601a      	str	r2, [r3, #0]
            break;
 800311a:	e00c      	b.n	8003136 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003122:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	02da      	lsls	r2, r3, #11
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	429a      	cmp	r2, r3
 8003134:	d3dc      	bcc.n	80030f0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003136:	4b04      	ldr	r3, [pc, #16]	; (8003148 <HAL_FLASHEx_Erase+0xd0>)
 8003138:	2200      	movs	r2, #0
 800313a:	761a      	strb	r2, [r3, #24]

  return status;
 800313c:	7bfb      	ldrb	r3, [r7, #15]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20003f98 	.word	0x20003f98
 800314c:	40022000 	.word	0x40022000

08003150 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003158:	4b09      	ldr	r3, [pc, #36]	; (8003180 <FLASH_MassErase+0x30>)
 800315a:	2200      	movs	r2, #0
 800315c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800315e:	4b09      	ldr	r3, [pc, #36]	; (8003184 <FLASH_MassErase+0x34>)
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	4a08      	ldr	r2, [pc, #32]	; (8003184 <FLASH_MassErase+0x34>)
 8003164:	f043 0304 	orr.w	r3, r3, #4
 8003168:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800316a:	4b06      	ldr	r3, [pc, #24]	; (8003184 <FLASH_MassErase+0x34>)
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	4a05      	ldr	r2, [pc, #20]	; (8003184 <FLASH_MassErase+0x34>)
 8003170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003174:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr
 8003180:	20003f98 	.word	0x20003f98
 8003184:	40022000 	.word	0x40022000

08003188 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <FLASH_PageErase+0x38>)
 8003192:	2200      	movs	r2, #0
 8003194:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003196:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <FLASH_PageErase+0x3c>)
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	4a0a      	ldr	r2, [pc, #40]	; (80031c4 <FLASH_PageErase+0x3c>)
 800319c:	f043 0302 	orr.w	r3, r3, #2
 80031a0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80031a2:	4a08      	ldr	r2, [pc, #32]	; (80031c4 <FLASH_PageErase+0x3c>)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80031a8:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <FLASH_PageErase+0x3c>)
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	4a05      	ldr	r2, [pc, #20]	; (80031c4 <FLASH_PageErase+0x3c>)
 80031ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031b2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	20003f98 	.word	0x20003f98
 80031c4:	40022000 	.word	0x40022000

080031c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b08b      	sub	sp, #44	; 0x2c
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031d2:	2300      	movs	r3, #0
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031d6:	2300      	movs	r3, #0
 80031d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031da:	e179      	b.n	80034d0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031dc:	2201      	movs	r2, #1
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	f040 8168 	bne.w	80034ca <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4aa0      	ldr	r2, [pc, #640]	; (8003480 <HAL_GPIO_Init+0x2b8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d05e      	beq.n	80032c2 <HAL_GPIO_Init+0xfa>
 8003204:	4a9e      	ldr	r2, [pc, #632]	; (8003480 <HAL_GPIO_Init+0x2b8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d875      	bhi.n	80032f6 <HAL_GPIO_Init+0x12e>
 800320a:	4a9e      	ldr	r2, [pc, #632]	; (8003484 <HAL_GPIO_Init+0x2bc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d058      	beq.n	80032c2 <HAL_GPIO_Init+0xfa>
 8003210:	4a9c      	ldr	r2, [pc, #624]	; (8003484 <HAL_GPIO_Init+0x2bc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d86f      	bhi.n	80032f6 <HAL_GPIO_Init+0x12e>
 8003216:	4a9c      	ldr	r2, [pc, #624]	; (8003488 <HAL_GPIO_Init+0x2c0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d052      	beq.n	80032c2 <HAL_GPIO_Init+0xfa>
 800321c:	4a9a      	ldr	r2, [pc, #616]	; (8003488 <HAL_GPIO_Init+0x2c0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d869      	bhi.n	80032f6 <HAL_GPIO_Init+0x12e>
 8003222:	4a9a      	ldr	r2, [pc, #616]	; (800348c <HAL_GPIO_Init+0x2c4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d04c      	beq.n	80032c2 <HAL_GPIO_Init+0xfa>
 8003228:	4a98      	ldr	r2, [pc, #608]	; (800348c <HAL_GPIO_Init+0x2c4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d863      	bhi.n	80032f6 <HAL_GPIO_Init+0x12e>
 800322e:	4a98      	ldr	r2, [pc, #608]	; (8003490 <HAL_GPIO_Init+0x2c8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d046      	beq.n	80032c2 <HAL_GPIO_Init+0xfa>
 8003234:	4a96      	ldr	r2, [pc, #600]	; (8003490 <HAL_GPIO_Init+0x2c8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d85d      	bhi.n	80032f6 <HAL_GPIO_Init+0x12e>
 800323a:	2b12      	cmp	r3, #18
 800323c:	d82a      	bhi.n	8003294 <HAL_GPIO_Init+0xcc>
 800323e:	2b12      	cmp	r3, #18
 8003240:	d859      	bhi.n	80032f6 <HAL_GPIO_Init+0x12e>
 8003242:	a201      	add	r2, pc, #4	; (adr r2, 8003248 <HAL_GPIO_Init+0x80>)
 8003244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003248:	080032c3 	.word	0x080032c3
 800324c:	0800329d 	.word	0x0800329d
 8003250:	080032af 	.word	0x080032af
 8003254:	080032f1 	.word	0x080032f1
 8003258:	080032f7 	.word	0x080032f7
 800325c:	080032f7 	.word	0x080032f7
 8003260:	080032f7 	.word	0x080032f7
 8003264:	080032f7 	.word	0x080032f7
 8003268:	080032f7 	.word	0x080032f7
 800326c:	080032f7 	.word	0x080032f7
 8003270:	080032f7 	.word	0x080032f7
 8003274:	080032f7 	.word	0x080032f7
 8003278:	080032f7 	.word	0x080032f7
 800327c:	080032f7 	.word	0x080032f7
 8003280:	080032f7 	.word	0x080032f7
 8003284:	080032f7 	.word	0x080032f7
 8003288:	080032f7 	.word	0x080032f7
 800328c:	080032a5 	.word	0x080032a5
 8003290:	080032b9 	.word	0x080032b9
 8003294:	4a7f      	ldr	r2, [pc, #508]	; (8003494 <HAL_GPIO_Init+0x2cc>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d013      	beq.n	80032c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800329a:	e02c      	b.n	80032f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	623b      	str	r3, [r7, #32]
          break;
 80032a2:	e029      	b.n	80032f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	3304      	adds	r3, #4
 80032aa:	623b      	str	r3, [r7, #32]
          break;
 80032ac:	e024      	b.n	80032f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	3308      	adds	r3, #8
 80032b4:	623b      	str	r3, [r7, #32]
          break;
 80032b6:	e01f      	b.n	80032f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	330c      	adds	r3, #12
 80032be:	623b      	str	r3, [r7, #32]
          break;
 80032c0:	e01a      	b.n	80032f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d102      	bne.n	80032d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80032ca:	2304      	movs	r3, #4
 80032cc:	623b      	str	r3, [r7, #32]
          break;
 80032ce:	e013      	b.n	80032f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d105      	bne.n	80032e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032d8:	2308      	movs	r3, #8
 80032da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	611a      	str	r2, [r3, #16]
          break;
 80032e2:	e009      	b.n	80032f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032e4:	2308      	movs	r3, #8
 80032e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69fa      	ldr	r2, [r7, #28]
 80032ec:	615a      	str	r2, [r3, #20]
          break;
 80032ee:	e003      	b.n	80032f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032f0:	2300      	movs	r3, #0
 80032f2:	623b      	str	r3, [r7, #32]
          break;
 80032f4:	e000      	b.n	80032f8 <HAL_GPIO_Init+0x130>
          break;
 80032f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2bff      	cmp	r3, #255	; 0xff
 80032fc:	d801      	bhi.n	8003302 <HAL_GPIO_Init+0x13a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	e001      	b.n	8003306 <HAL_GPIO_Init+0x13e>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3304      	adds	r3, #4
 8003306:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	2bff      	cmp	r3, #255	; 0xff
 800330c:	d802      	bhi.n	8003314 <HAL_GPIO_Init+0x14c>
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	e002      	b.n	800331a <HAL_GPIO_Init+0x152>
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	3b08      	subs	r3, #8
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	210f      	movs	r1, #15
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	fa01 f303 	lsl.w	r3, r1, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	401a      	ands	r2, r3
 800332c:	6a39      	ldr	r1, [r7, #32]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	fa01 f303 	lsl.w	r3, r1, r3
 8003334:	431a      	orrs	r2, r3
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 80c1 	beq.w	80034ca <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003348:	4b53      	ldr	r3, [pc, #332]	; (8003498 <HAL_GPIO_Init+0x2d0>)
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	4a52      	ldr	r2, [pc, #328]	; (8003498 <HAL_GPIO_Init+0x2d0>)
 800334e:	f043 0301 	orr.w	r3, r3, #1
 8003352:	6193      	str	r3, [r2, #24]
 8003354:	4b50      	ldr	r3, [pc, #320]	; (8003498 <HAL_GPIO_Init+0x2d0>)
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003360:	4a4e      	ldr	r2, [pc, #312]	; (800349c <HAL_GPIO_Init+0x2d4>)
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	089b      	lsrs	r3, r3, #2
 8003366:	3302      	adds	r3, #2
 8003368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800336c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	220f      	movs	r2, #15
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	43db      	mvns	r3, r3
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4013      	ands	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a46      	ldr	r2, [pc, #280]	; (80034a0 <HAL_GPIO_Init+0x2d8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d01f      	beq.n	80033cc <HAL_GPIO_Init+0x204>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a45      	ldr	r2, [pc, #276]	; (80034a4 <HAL_GPIO_Init+0x2dc>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d019      	beq.n	80033c8 <HAL_GPIO_Init+0x200>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a44      	ldr	r2, [pc, #272]	; (80034a8 <HAL_GPIO_Init+0x2e0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d013      	beq.n	80033c4 <HAL_GPIO_Init+0x1fc>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a43      	ldr	r2, [pc, #268]	; (80034ac <HAL_GPIO_Init+0x2e4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00d      	beq.n	80033c0 <HAL_GPIO_Init+0x1f8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a42      	ldr	r2, [pc, #264]	; (80034b0 <HAL_GPIO_Init+0x2e8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d007      	beq.n	80033bc <HAL_GPIO_Init+0x1f4>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a41      	ldr	r2, [pc, #260]	; (80034b4 <HAL_GPIO_Init+0x2ec>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d101      	bne.n	80033b8 <HAL_GPIO_Init+0x1f0>
 80033b4:	2305      	movs	r3, #5
 80033b6:	e00a      	b.n	80033ce <HAL_GPIO_Init+0x206>
 80033b8:	2306      	movs	r3, #6
 80033ba:	e008      	b.n	80033ce <HAL_GPIO_Init+0x206>
 80033bc:	2304      	movs	r3, #4
 80033be:	e006      	b.n	80033ce <HAL_GPIO_Init+0x206>
 80033c0:	2303      	movs	r3, #3
 80033c2:	e004      	b.n	80033ce <HAL_GPIO_Init+0x206>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e002      	b.n	80033ce <HAL_GPIO_Init+0x206>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <HAL_GPIO_Init+0x206>
 80033cc:	2300      	movs	r3, #0
 80033ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d0:	f002 0203 	and.w	r2, r2, #3
 80033d4:	0092      	lsls	r2, r2, #2
 80033d6:	4093      	lsls	r3, r2
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033de:	492f      	ldr	r1, [pc, #188]	; (800349c <HAL_GPIO_Init+0x2d4>)
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	089b      	lsrs	r3, r3, #2
 80033e4:	3302      	adds	r3, #2
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d006      	beq.n	8003406 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80033f8:	4b2f      	ldr	r3, [pc, #188]	; (80034b8 <HAL_GPIO_Init+0x2f0>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	492e      	ldr	r1, [pc, #184]	; (80034b8 <HAL_GPIO_Init+0x2f0>)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	4313      	orrs	r3, r2
 8003402:	600b      	str	r3, [r1, #0]
 8003404:	e006      	b.n	8003414 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003406:	4b2c      	ldr	r3, [pc, #176]	; (80034b8 <HAL_GPIO_Init+0x2f0>)
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	43db      	mvns	r3, r3
 800340e:	492a      	ldr	r1, [pc, #168]	; (80034b8 <HAL_GPIO_Init+0x2f0>)
 8003410:	4013      	ands	r3, r2
 8003412:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d006      	beq.n	800342e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003420:	4b25      	ldr	r3, [pc, #148]	; (80034b8 <HAL_GPIO_Init+0x2f0>)
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	4924      	ldr	r1, [pc, #144]	; (80034b8 <HAL_GPIO_Init+0x2f0>)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	4313      	orrs	r3, r2
 800342a:	604b      	str	r3, [r1, #4]
 800342c:	e006      	b.n	800343c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800342e:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <HAL_GPIO_Init+0x2f0>)
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	43db      	mvns	r3, r3
 8003436:	4920      	ldr	r1, [pc, #128]	; (80034b8 <HAL_GPIO_Init+0x2f0>)
 8003438:	4013      	ands	r3, r2
 800343a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d006      	beq.n	8003456 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003448:	4b1b      	ldr	r3, [pc, #108]	; (80034b8 <HAL_GPIO_Init+0x2f0>)
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	491a      	ldr	r1, [pc, #104]	; (80034b8 <HAL_GPIO_Init+0x2f0>)
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	4313      	orrs	r3, r2
 8003452:	608b      	str	r3, [r1, #8]
 8003454:	e006      	b.n	8003464 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003456:	4b18      	ldr	r3, [pc, #96]	; (80034b8 <HAL_GPIO_Init+0x2f0>)
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	43db      	mvns	r3, r3
 800345e:	4916      	ldr	r1, [pc, #88]	; (80034b8 <HAL_GPIO_Init+0x2f0>)
 8003460:	4013      	ands	r3, r2
 8003462:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d025      	beq.n	80034bc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003470:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <HAL_GPIO_Init+0x2f0>)
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	4910      	ldr	r1, [pc, #64]	; (80034b8 <HAL_GPIO_Init+0x2f0>)
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	4313      	orrs	r3, r2
 800347a:	60cb      	str	r3, [r1, #12]
 800347c:	e025      	b.n	80034ca <HAL_GPIO_Init+0x302>
 800347e:	bf00      	nop
 8003480:	10320000 	.word	0x10320000
 8003484:	10310000 	.word	0x10310000
 8003488:	10220000 	.word	0x10220000
 800348c:	10210000 	.word	0x10210000
 8003490:	10120000 	.word	0x10120000
 8003494:	10110000 	.word	0x10110000
 8003498:	40021000 	.word	0x40021000
 800349c:	40010000 	.word	0x40010000
 80034a0:	40010800 	.word	0x40010800
 80034a4:	40010c00 	.word	0x40010c00
 80034a8:	40011000 	.word	0x40011000
 80034ac:	40011400 	.word	0x40011400
 80034b0:	40011800 	.word	0x40011800
 80034b4:	40011c00 	.word	0x40011c00
 80034b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80034bc:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <HAL_GPIO_Init+0x324>)
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	43db      	mvns	r3, r3
 80034c4:	4909      	ldr	r1, [pc, #36]	; (80034ec <HAL_GPIO_Init+0x324>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	3301      	adds	r3, #1
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	fa22 f303 	lsr.w	r3, r2, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f47f ae7e 	bne.w	80031dc <HAL_GPIO_Init+0x14>
  }
}
 80034e0:	bf00      	nop
 80034e2:	bf00      	nop
 80034e4:	372c      	adds	r7, #44	; 0x2c
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr
 80034ec:	40010400 	.word	0x40010400

080034f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	807b      	strh	r3, [r7, #2]
 80034fc:	4613      	mov	r3, r2
 80034fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003500:	787b      	ldrb	r3, [r7, #1]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003506:	887a      	ldrh	r2, [r7, #2]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800350c:	e003      	b.n	8003516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800350e:	887b      	ldrh	r3, [r7, #2]
 8003510:	041a      	lsls	r2, r3, #16
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	611a      	str	r2, [r3, #16]
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr

08003520 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e26c      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 8087 	beq.w	800364e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003540:	4b92      	ldr	r3, [pc, #584]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 030c 	and.w	r3, r3, #12
 8003548:	2b04      	cmp	r3, #4
 800354a:	d00c      	beq.n	8003566 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800354c:	4b8f      	ldr	r3, [pc, #572]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 030c 	and.w	r3, r3, #12
 8003554:	2b08      	cmp	r3, #8
 8003556:	d112      	bne.n	800357e <HAL_RCC_OscConfig+0x5e>
 8003558:	4b8c      	ldr	r3, [pc, #560]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003564:	d10b      	bne.n	800357e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003566:	4b89      	ldr	r3, [pc, #548]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d06c      	beq.n	800364c <HAL_RCC_OscConfig+0x12c>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d168      	bne.n	800364c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e246      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003586:	d106      	bne.n	8003596 <HAL_RCC_OscConfig+0x76>
 8003588:	4b80      	ldr	r3, [pc, #512]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a7f      	ldr	r2, [pc, #508]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 800358e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	e02e      	b.n	80035f4 <HAL_RCC_OscConfig+0xd4>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10c      	bne.n	80035b8 <HAL_RCC_OscConfig+0x98>
 800359e:	4b7b      	ldr	r3, [pc, #492]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a7a      	ldr	r2, [pc, #488]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80035a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	4b78      	ldr	r3, [pc, #480]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a77      	ldr	r2, [pc, #476]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80035b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	e01d      	b.n	80035f4 <HAL_RCC_OscConfig+0xd4>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035c0:	d10c      	bne.n	80035dc <HAL_RCC_OscConfig+0xbc>
 80035c2:	4b72      	ldr	r3, [pc, #456]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a71      	ldr	r2, [pc, #452]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80035c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	4b6f      	ldr	r3, [pc, #444]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a6e      	ldr	r2, [pc, #440]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80035d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	e00b      	b.n	80035f4 <HAL_RCC_OscConfig+0xd4>
 80035dc:	4b6b      	ldr	r3, [pc, #428]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a6a      	ldr	r2, [pc, #424]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80035e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	4b68      	ldr	r3, [pc, #416]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a67      	ldr	r2, [pc, #412]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80035ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d013      	beq.n	8003624 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fc:	f7ff f9f2 	bl	80029e4 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003604:	f7ff f9ee 	bl	80029e4 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b64      	cmp	r3, #100	; 0x64
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e1fa      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003616:	4b5d      	ldr	r3, [pc, #372]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f0      	beq.n	8003604 <HAL_RCC_OscConfig+0xe4>
 8003622:	e014      	b.n	800364e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003624:	f7ff f9de 	bl	80029e4 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800362c:	f7ff f9da 	bl	80029e4 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b64      	cmp	r3, #100	; 0x64
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e1e6      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363e:	4b53      	ldr	r3, [pc, #332]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0x10c>
 800364a:	e000      	b.n	800364e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d063      	beq.n	8003722 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800365a:	4b4c      	ldr	r3, [pc, #304]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00b      	beq.n	800367e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003666:	4b49      	ldr	r3, [pc, #292]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 030c 	and.w	r3, r3, #12
 800366e:	2b08      	cmp	r3, #8
 8003670:	d11c      	bne.n	80036ac <HAL_RCC_OscConfig+0x18c>
 8003672:	4b46      	ldr	r3, [pc, #280]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d116      	bne.n	80036ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367e:	4b43      	ldr	r3, [pc, #268]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d005      	beq.n	8003696 <HAL_RCC_OscConfig+0x176>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d001      	beq.n	8003696 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e1ba      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003696:	4b3d      	ldr	r3, [pc, #244]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	4939      	ldr	r1, [pc, #228]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036aa:	e03a      	b.n	8003722 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d020      	beq.n	80036f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b4:	4b36      	ldr	r3, [pc, #216]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ba:	f7ff f993 	bl	80029e4 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c2:	f7ff f98f 	bl	80029e4 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e19b      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d4:	4b2d      	ldr	r3, [pc, #180]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f0      	beq.n	80036c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e0:	4b2a      	ldr	r3, [pc, #168]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4927      	ldr	r1, [pc, #156]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	600b      	str	r3, [r1, #0]
 80036f4:	e015      	b.n	8003722 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036f6:	4b26      	ldr	r3, [pc, #152]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7ff f972 	bl	80029e4 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003704:	f7ff f96e 	bl	80029e4 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e17a      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003716:	4b1d      	ldr	r3, [pc, #116]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d03a      	beq.n	80037a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d019      	beq.n	800376a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003736:	4b17      	ldr	r3, [pc, #92]	; (8003794 <HAL_RCC_OscConfig+0x274>)
 8003738:	2201      	movs	r2, #1
 800373a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373c:	f7ff f952 	bl	80029e4 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003744:	f7ff f94e 	bl	80029e4 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e15a      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003756:	4b0d      	ldr	r3, [pc, #52]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003762:	2001      	movs	r0, #1
 8003764:	f000 fad8 	bl	8003d18 <RCC_Delay>
 8003768:	e01c      	b.n	80037a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800376a:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <HAL_RCC_OscConfig+0x274>)
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003770:	f7ff f938 	bl	80029e4 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003776:	e00f      	b.n	8003798 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003778:	f7ff f934 	bl	80029e4 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d908      	bls.n	8003798 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e140      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
 800378a:	bf00      	nop
 800378c:	40021000 	.word	0x40021000
 8003790:	42420000 	.word	0x42420000
 8003794:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003798:	4b9e      	ldr	r3, [pc, #632]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e9      	bne.n	8003778 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 80a6 	beq.w	80038fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037b2:	2300      	movs	r3, #0
 80037b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037b6:	4b97      	ldr	r3, [pc, #604]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10d      	bne.n	80037de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037c2:	4b94      	ldr	r3, [pc, #592]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	4a93      	ldr	r2, [pc, #588]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 80037c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037cc:	61d3      	str	r3, [r2, #28]
 80037ce:	4b91      	ldr	r3, [pc, #580]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d6:	60bb      	str	r3, [r7, #8]
 80037d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037da:	2301      	movs	r3, #1
 80037dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037de:	4b8e      	ldr	r3, [pc, #568]	; (8003a18 <HAL_RCC_OscConfig+0x4f8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d118      	bne.n	800381c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ea:	4b8b      	ldr	r3, [pc, #556]	; (8003a18 <HAL_RCC_OscConfig+0x4f8>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a8a      	ldr	r2, [pc, #552]	; (8003a18 <HAL_RCC_OscConfig+0x4f8>)
 80037f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f6:	f7ff f8f5 	bl	80029e4 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037fe:	f7ff f8f1 	bl	80029e4 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b64      	cmp	r3, #100	; 0x64
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e0fd      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003810:	4b81      	ldr	r3, [pc, #516]	; (8003a18 <HAL_RCC_OscConfig+0x4f8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f0      	beq.n	80037fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d106      	bne.n	8003832 <HAL_RCC_OscConfig+0x312>
 8003824:	4b7b      	ldr	r3, [pc, #492]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	4a7a      	ldr	r2, [pc, #488]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 800382a:	f043 0301 	orr.w	r3, r3, #1
 800382e:	6213      	str	r3, [r2, #32]
 8003830:	e02d      	b.n	800388e <HAL_RCC_OscConfig+0x36e>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10c      	bne.n	8003854 <HAL_RCC_OscConfig+0x334>
 800383a:	4b76      	ldr	r3, [pc, #472]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	4a75      	ldr	r2, [pc, #468]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	6213      	str	r3, [r2, #32]
 8003846:	4b73      	ldr	r3, [pc, #460]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	4a72      	ldr	r2, [pc, #456]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 800384c:	f023 0304 	bic.w	r3, r3, #4
 8003850:	6213      	str	r3, [r2, #32]
 8003852:	e01c      	b.n	800388e <HAL_RCC_OscConfig+0x36e>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	2b05      	cmp	r3, #5
 800385a:	d10c      	bne.n	8003876 <HAL_RCC_OscConfig+0x356>
 800385c:	4b6d      	ldr	r3, [pc, #436]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	4a6c      	ldr	r2, [pc, #432]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 8003862:	f043 0304 	orr.w	r3, r3, #4
 8003866:	6213      	str	r3, [r2, #32]
 8003868:	4b6a      	ldr	r3, [pc, #424]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	4a69      	ldr	r2, [pc, #420]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	6213      	str	r3, [r2, #32]
 8003874:	e00b      	b.n	800388e <HAL_RCC_OscConfig+0x36e>
 8003876:	4b67      	ldr	r3, [pc, #412]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	4a66      	ldr	r2, [pc, #408]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 800387c:	f023 0301 	bic.w	r3, r3, #1
 8003880:	6213      	str	r3, [r2, #32]
 8003882:	4b64      	ldr	r3, [pc, #400]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	4a63      	ldr	r2, [pc, #396]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 8003888:	f023 0304 	bic.w	r3, r3, #4
 800388c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d015      	beq.n	80038c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003896:	f7ff f8a5 	bl	80029e4 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389c:	e00a      	b.n	80038b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389e:	f7ff f8a1 	bl	80029e4 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e0ab      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b4:	4b57      	ldr	r3, [pc, #348]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0ee      	beq.n	800389e <HAL_RCC_OscConfig+0x37e>
 80038c0:	e014      	b.n	80038ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c2:	f7ff f88f 	bl	80029e4 <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038c8:	e00a      	b.n	80038e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ca:	f7ff f88b 	bl	80029e4 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d8:	4293      	cmp	r3, r2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e095      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e0:	4b4c      	ldr	r3, [pc, #304]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1ee      	bne.n	80038ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038ec:	7dfb      	ldrb	r3, [r7, #23]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d105      	bne.n	80038fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f2:	4b48      	ldr	r3, [pc, #288]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	4a47      	ldr	r2, [pc, #284]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 80038f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 8081 	beq.w	8003a0a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003908:	4b42      	ldr	r3, [pc, #264]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 030c 	and.w	r3, r3, #12
 8003910:	2b08      	cmp	r3, #8
 8003912:	d061      	beq.n	80039d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	2b02      	cmp	r3, #2
 800391a:	d146      	bne.n	80039aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800391c:	4b3f      	ldr	r3, [pc, #252]	; (8003a1c <HAL_RCC_OscConfig+0x4fc>)
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003922:	f7ff f85f 	bl	80029e4 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392a:	f7ff f85b 	bl	80029e4 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e067      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800393c:	4b35      	ldr	r3, [pc, #212]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1f0      	bne.n	800392a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003950:	d108      	bne.n	8003964 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003952:	4b30      	ldr	r3, [pc, #192]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	492d      	ldr	r1, [pc, #180]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 8003960:	4313      	orrs	r3, r2
 8003962:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003964:	4b2b      	ldr	r3, [pc, #172]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a19      	ldr	r1, [r3, #32]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	430b      	orrs	r3, r1
 8003976:	4927      	ldr	r1, [pc, #156]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 8003978:	4313      	orrs	r3, r2
 800397a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800397c:	4b27      	ldr	r3, [pc, #156]	; (8003a1c <HAL_RCC_OscConfig+0x4fc>)
 800397e:	2201      	movs	r2, #1
 8003980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003982:	f7ff f82f 	bl	80029e4 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398a:	f7ff f82b 	bl	80029e4 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e037      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800399c:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0f0      	beq.n	800398a <HAL_RCC_OscConfig+0x46a>
 80039a8:	e02f      	b.n	8003a0a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039aa:	4b1c      	ldr	r3, [pc, #112]	; (8003a1c <HAL_RCC_OscConfig+0x4fc>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b0:	f7ff f818 	bl	80029e4 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b8:	f7ff f814 	bl	80029e4 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e020      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ca:	4b12      	ldr	r3, [pc, #72]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0x498>
 80039d6:	e018      	b.n	8003a0a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e013      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039e4:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d106      	bne.n	8003a06 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d001      	beq.n	8003a0a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40007000 	.word	0x40007000
 8003a1c:	42420060 	.word	0x42420060

08003a20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e0d0      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a34:	4b6a      	ldr	r3, [pc, #424]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d910      	bls.n	8003a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4b67      	ldr	r3, [pc, #412]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f023 0207 	bic.w	r2, r3, #7
 8003a4a:	4965      	ldr	r1, [pc, #404]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a52:	4b63      	ldr	r3, [pc, #396]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0b8      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d020      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a7c:	4b59      	ldr	r3, [pc, #356]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	4a58      	ldr	r2, [pc, #352]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0308 	and.w	r3, r3, #8
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a94:	4b53      	ldr	r3, [pc, #332]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	4a52      	ldr	r2, [pc, #328]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aa0:	4b50      	ldr	r3, [pc, #320]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	494d      	ldr	r1, [pc, #308]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d040      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d107      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac6:	4b47      	ldr	r3, [pc, #284]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d115      	bne.n	8003afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e07f      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d107      	bne.n	8003aee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ade:	4b41      	ldr	r3, [pc, #260]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d109      	bne.n	8003afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e073      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aee:	4b3d      	ldr	r3, [pc, #244]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e06b      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003afe:	4b39      	ldr	r3, [pc, #228]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f023 0203 	bic.w	r2, r3, #3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	4936      	ldr	r1, [pc, #216]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b10:	f7fe ff68 	bl	80029e4 <HAL_GetTick>
 8003b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b16:	e00a      	b.n	8003b2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b18:	f7fe ff64 	bl	80029e4 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e053      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2e:	4b2d      	ldr	r3, [pc, #180]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f003 020c 	and.w	r2, r3, #12
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d1eb      	bne.n	8003b18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b40:	4b27      	ldr	r3, [pc, #156]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d210      	bcs.n	8003b70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4e:	4b24      	ldr	r3, [pc, #144]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f023 0207 	bic.w	r2, r3, #7
 8003b56:	4922      	ldr	r1, [pc, #136]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5e:	4b20      	ldr	r3, [pc, #128]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e032      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d008      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b7c:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4916      	ldr	r1, [pc, #88]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d009      	beq.n	8003bae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b9a:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	490e      	ldr	r1, [pc, #56]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bae:	f000 f821 	bl	8003bf4 <HAL_RCC_GetSysClockFreq>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	091b      	lsrs	r3, r3, #4
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	490a      	ldr	r1, [pc, #40]	; (8003be8 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc0:	5ccb      	ldrb	r3, [r1, r3]
 8003bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc6:	4a09      	ldr	r2, [pc, #36]	; (8003bec <HAL_RCC_ClockConfig+0x1cc>)
 8003bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bca:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <HAL_RCC_ClockConfig+0x1d0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fe fec6 	bl	8002960 <HAL_InitTick>

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40022000 	.word	0x40022000
 8003be4:	40021000 	.word	0x40021000
 8003be8:	0800616c 	.word	0x0800616c
 8003bec:	200000f8 	.word	0x200000f8
 8003bf0:	200000fc 	.word	0x200000fc

08003bf4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bf4:	b490      	push	{r4, r7}
 8003bf6:	b08a      	sub	sp, #40	; 0x28
 8003bf8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003bfa:	4b2a      	ldr	r3, [pc, #168]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003bfc:	1d3c      	adds	r4, r7, #4
 8003bfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c04:	f240 2301 	movw	r3, #513	; 0x201
 8003c08:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61bb      	str	r3, [r7, #24]
 8003c12:	2300      	movs	r3, #0
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c1e:	4b22      	ldr	r3, [pc, #136]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f003 030c 	and.w	r3, r3, #12
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d002      	beq.n	8003c34 <HAL_RCC_GetSysClockFreq+0x40>
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d003      	beq.n	8003c3a <HAL_RCC_GetSysClockFreq+0x46>
 8003c32:	e02d      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c34:	4b1d      	ldr	r3, [pc, #116]	; (8003cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c36:	623b      	str	r3, [r7, #32]
      break;
 8003c38:	e02d      	b.n	8003c96 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	0c9b      	lsrs	r3, r3, #18
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c46:	4413      	add	r3, r2
 8003c48:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c4c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d013      	beq.n	8003c80 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c58:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	0c5b      	lsrs	r3, r3, #17
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c66:	4413      	add	r3, r2
 8003c68:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c6c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	4a0e      	ldr	r2, [pc, #56]	; (8003cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c72:	fb02 f203 	mul.w	r2, r2, r3
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c7e:	e004      	b.n	8003c8a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	4a0b      	ldr	r2, [pc, #44]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c84:	fb02 f303 	mul.w	r3, r2, r3
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	623b      	str	r3, [r7, #32]
      break;
 8003c8e:	e002      	b.n	8003c96 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c90:	4b06      	ldr	r3, [pc, #24]	; (8003cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c92:	623b      	str	r3, [r7, #32]
      break;
 8003c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c96:	6a3b      	ldr	r3, [r7, #32]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3728      	adds	r7, #40	; 0x28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bc90      	pop	{r4, r7}
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	08006110 	.word	0x08006110
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	007a1200 	.word	0x007a1200
 8003cb0:	003d0900 	.word	0x003d0900

08003cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb8:	4b02      	ldr	r3, [pc, #8]	; (8003cc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003cba:	681b      	ldr	r3, [r3, #0]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr
 8003cc4:	200000f8 	.word	0x200000f8

08003cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ccc:	f7ff fff2 	bl	8003cb4 <HAL_RCC_GetHCLKFreq>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	0a1b      	lsrs	r3, r3, #8
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	4903      	ldr	r1, [pc, #12]	; (8003cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cde:	5ccb      	ldrb	r3, [r1, r3]
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	0800617c 	.word	0x0800617c

08003cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cf4:	f7ff ffde 	bl	8003cb4 <HAL_RCC_GetHCLKFreq>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	0adb      	lsrs	r3, r3, #11
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	4903      	ldr	r1, [pc, #12]	; (8003d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d06:	5ccb      	ldrb	r3, [r1, r3]
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40021000 	.word	0x40021000
 8003d14:	0800617c 	.word	0x0800617c

08003d18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d20:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <RCC_Delay+0x34>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a0a      	ldr	r2, [pc, #40]	; (8003d50 <RCC_Delay+0x38>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	0a5b      	lsrs	r3, r3, #9
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	fb02 f303 	mul.w	r3, r2, r3
 8003d32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d34:	bf00      	nop
  }
  while (Delay --);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1e5a      	subs	r2, r3, #1
 8003d3a:	60fa      	str	r2, [r7, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1f9      	bne.n	8003d34 <RCC_Delay+0x1c>
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr
 8003d4c:	200000f8 	.word	0x200000f8
 8003d50:	10624dd3 	.word	0x10624dd3

08003d54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e076      	b.n	8003e54 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d108      	bne.n	8003d80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d76:	d009      	beq.n	8003d8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	61da      	str	r2, [r3, #28]
 8003d7e:	e005      	b.n	8003d8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7fe fc2a 	bl	8002600 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e10:	ea42 0103 	orr.w	r1, r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e18:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	0c1a      	lsrs	r2, r3, #16
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f002 0204 	and.w	r2, r2, #4
 8003e32:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69da      	ldr	r2, [r3, #28]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e42:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	603b      	str	r3, [r7, #0]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_SPI_Transmit+0x22>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e126      	b.n	80040cc <HAL_SPI_Transmit+0x270>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e86:	f7fe fdad 	bl	80029e4 <HAL_GetTick>
 8003e8a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e8c:	88fb      	ldrh	r3, [r7, #6]
 8003e8e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d002      	beq.n	8003ea2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ea0:	e10b      	b.n	80040ba <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <HAL_SPI_Transmit+0x52>
 8003ea8:	88fb      	ldrh	r3, [r7, #6]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d102      	bne.n	8003eb4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003eb2:	e102      	b.n	80040ba <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2203      	movs	r2, #3
 8003eb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	88fa      	ldrh	r2, [r7, #6]
 8003ecc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	88fa      	ldrh	r2, [r7, #6]
 8003ed2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003efa:	d10f      	bne.n	8003f1c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f0a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f1a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f26:	2b40      	cmp	r3, #64	; 0x40
 8003f28:	d007      	beq.n	8003f3a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f42:	d14b      	bne.n	8003fdc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <HAL_SPI_Transmit+0xf6>
 8003f4c:	8afb      	ldrh	r3, [r7, #22]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d13e      	bne.n	8003fd0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f56:	881a      	ldrh	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	1c9a      	adds	r2, r3, #2
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f76:	e02b      	b.n	8003fd0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d112      	bne.n	8003fac <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	881a      	ldrh	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	1c9a      	adds	r2, r3, #2
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	86da      	strh	r2, [r3, #54]	; 0x36
 8003faa:	e011      	b.n	8003fd0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fac:	f7fe fd1a 	bl	80029e4 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d803      	bhi.n	8003fc4 <HAL_SPI_Transmit+0x168>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc2:	d102      	bne.n	8003fca <HAL_SPI_Transmit+0x16e>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d102      	bne.n	8003fd0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003fce:	e074      	b.n	80040ba <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1ce      	bne.n	8003f78 <HAL_SPI_Transmit+0x11c>
 8003fda:	e04c      	b.n	8004076 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <HAL_SPI_Transmit+0x18e>
 8003fe4:	8afb      	ldrh	r3, [r7, #22]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d140      	bne.n	800406c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	330c      	adds	r3, #12
 8003ff4:	7812      	ldrb	r2, [r2, #0]
 8003ff6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004010:	e02c      	b.n	800406c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b02      	cmp	r3, #2
 800401e:	d113      	bne.n	8004048 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	330c      	adds	r3, #12
 800402a:	7812      	ldrb	r2, [r2, #0]
 800402c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800403c:	b29b      	uxth	r3, r3
 800403e:	3b01      	subs	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	86da      	strh	r2, [r3, #54]	; 0x36
 8004046:	e011      	b.n	800406c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004048:	f7fe fccc 	bl	80029e4 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d803      	bhi.n	8004060 <HAL_SPI_Transmit+0x204>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405e:	d102      	bne.n	8004066 <HAL_SPI_Transmit+0x20a>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d102      	bne.n	800406c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	77fb      	strb	r3, [r7, #31]
          goto error;
 800406a:	e026      	b.n	80040ba <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1cd      	bne.n	8004012 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	6839      	ldr	r1, [r7, #0]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 f8b2 	bl	80041e4 <SPI_EndRxTxTransaction>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2220      	movs	r2, #32
 800408a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10a      	bne.n	80040aa <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004094:	2300      	movs	r3, #0
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	613b      	str	r3, [r7, #16]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	613b      	str	r3, [r7, #16]
 80040a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	77fb      	strb	r3, [r7, #31]
 80040b6:	e000      	b.n	80040ba <HAL_SPI_Transmit+0x25e>
  }

error:
 80040b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3720      	adds	r7, #32
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	4613      	mov	r3, r2
 80040e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040e4:	f7fe fc7e 	bl	80029e4 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ec:	1a9b      	subs	r3, r3, r2
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	4413      	add	r3, r2
 80040f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040f4:	f7fe fc76 	bl	80029e4 <HAL_GetTick>
 80040f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040fa:	4b39      	ldr	r3, [pc, #228]	; (80041e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	015b      	lsls	r3, r3, #5
 8004100:	0d1b      	lsrs	r3, r3, #20
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	fb02 f303 	mul.w	r3, r2, r3
 8004108:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800410a:	e054      	b.n	80041b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004112:	d050      	beq.n	80041b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004114:	f7fe fc66 	bl	80029e4 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	429a      	cmp	r2, r3
 8004122:	d902      	bls.n	800412a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d13d      	bne.n	80041a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004138:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004142:	d111      	bne.n	8004168 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800414c:	d004      	beq.n	8004158 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004156:	d107      	bne.n	8004168 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004166:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004170:	d10f      	bne.n	8004192 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004190:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e017      	b.n	80041d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4013      	ands	r3, r2
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	bf0c      	ite	eq
 80041c6:	2301      	moveq	r3, #1
 80041c8:	2300      	movne	r3, #0
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	461a      	mov	r2, r3
 80041ce:	79fb      	ldrb	r3, [r7, #7]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d19b      	bne.n	800410c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3720      	adds	r7, #32
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	200000f8 	.word	0x200000f8

080041e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af02      	add	r7, sp, #8
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2200      	movs	r2, #0
 80041f8:	2180      	movs	r1, #128	; 0x80
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f7ff ff6a 	bl	80040d4 <SPI_WaitFlagStateUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d007      	beq.n	8004216 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420a:	f043 0220 	orr.w	r2, r3, #32
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e000      	b.n	8004218 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e041      	b.n	80042b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7fe fa1a 	bl	8002680 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3304      	adds	r3, #4
 800425c:	4619      	mov	r1, r3
 800425e:	4610      	mov	r0, r2
 8004260:	f000 f9ba 	bl	80045d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
	...

080042c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d001      	beq.n	80042d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e044      	b.n	8004362 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a1d      	ldr	r2, [pc, #116]	; (800436c <HAL_TIM_Base_Start_IT+0xac>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d018      	beq.n	800432c <HAL_TIM_Base_Start_IT+0x6c>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a1c      	ldr	r2, [pc, #112]	; (8004370 <HAL_TIM_Base_Start_IT+0xb0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d013      	beq.n	800432c <HAL_TIM_Base_Start_IT+0x6c>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800430c:	d00e      	beq.n	800432c <HAL_TIM_Base_Start_IT+0x6c>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a18      	ldr	r2, [pc, #96]	; (8004374 <HAL_TIM_Base_Start_IT+0xb4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d009      	beq.n	800432c <HAL_TIM_Base_Start_IT+0x6c>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a16      	ldr	r2, [pc, #88]	; (8004378 <HAL_TIM_Base_Start_IT+0xb8>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d004      	beq.n	800432c <HAL_TIM_Base_Start_IT+0x6c>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a15      	ldr	r2, [pc, #84]	; (800437c <HAL_TIM_Base_Start_IT+0xbc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d111      	bne.n	8004350 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b06      	cmp	r3, #6
 800433c:	d010      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0201 	orr.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434e:	e007      	b.n	8004360 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr
 800436c:	40012c00 	.word	0x40012c00
 8004370:	40013400 	.word	0x40013400
 8004374:	40000400 	.word	0x40000400
 8004378:	40000800 	.word	0x40000800
 800437c:	40000c00 	.word	0x40000c00

08004380 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b02      	cmp	r3, #2
 8004394:	d122      	bne.n	80043dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d11b      	bne.n	80043dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f06f 0202 	mvn.w	r2, #2
 80043ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	f003 0303 	and.w	r3, r3, #3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f8ed 	bl	80045a2 <HAL_TIM_IC_CaptureCallback>
 80043c8:	e005      	b.n	80043d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f8e0 	bl	8004590 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f8ef 	bl	80045b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d122      	bne.n	8004430 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b04      	cmp	r3, #4
 80043f6:	d11b      	bne.n	8004430 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f06f 0204 	mvn.w	r2, #4
 8004400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2202      	movs	r2, #2
 8004406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f8c3 	bl	80045a2 <HAL_TIM_IC_CaptureCallback>
 800441c:	e005      	b.n	800442a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f8b6 	bl	8004590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f8c5 	bl	80045b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f003 0308 	and.w	r3, r3, #8
 800443a:	2b08      	cmp	r3, #8
 800443c:	d122      	bne.n	8004484 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0308 	and.w	r3, r3, #8
 8004448:	2b08      	cmp	r3, #8
 800444a:	d11b      	bne.n	8004484 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0208 	mvn.w	r2, #8
 8004454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2204      	movs	r2, #4
 800445a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f899 	bl	80045a2 <HAL_TIM_IC_CaptureCallback>
 8004470:	e005      	b.n	800447e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f88c 	bl	8004590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f89b 	bl	80045b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	f003 0310 	and.w	r3, r3, #16
 800448e:	2b10      	cmp	r3, #16
 8004490:	d122      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f003 0310 	and.w	r3, r3, #16
 800449c:	2b10      	cmp	r3, #16
 800449e:	d11b      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f06f 0210 	mvn.w	r2, #16
 80044a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2208      	movs	r2, #8
 80044ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f86f 	bl	80045a2 <HAL_TIM_IC_CaptureCallback>
 80044c4:	e005      	b.n	80044d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f862 	bl	8004590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f871 	bl	80045b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d10e      	bne.n	8004504 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d107      	bne.n	8004504 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f06f 0201 	mvn.w	r2, #1
 80044fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fc fa7a 	bl	80009f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450e:	2b80      	cmp	r3, #128	; 0x80
 8004510:	d10e      	bne.n	8004530 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451c:	2b80      	cmp	r3, #128	; 0x80
 800451e:	d107      	bne.n	8004530 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f8d7 	bl	80046de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453a:	2b40      	cmp	r3, #64	; 0x40
 800453c:	d10e      	bne.n	800455c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004548:	2b40      	cmp	r3, #64	; 0x40
 800454a:	d107      	bne.n	800455c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f835 	bl	80045c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f003 0320 	and.w	r3, r3, #32
 8004566:	2b20      	cmp	r3, #32
 8004568:	d10e      	bne.n	8004588 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f003 0320 	and.w	r3, r3, #32
 8004574:	2b20      	cmp	r3, #32
 8004576:	d107      	bne.n	8004588 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f06f 0220 	mvn.w	r2, #32
 8004580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f8a2 	bl	80046cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004588:	bf00      	nop
 800458a:	3708      	adds	r7, #8
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr

080045a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr

080045b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bc80      	pop	{r7}
 80045c4:	4770      	bx	lr

080045c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bc80      	pop	{r7}
 80045d6:	4770      	bx	lr

080045d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a33      	ldr	r2, [pc, #204]	; (80046b8 <TIM_Base_SetConfig+0xe0>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d013      	beq.n	8004618 <TIM_Base_SetConfig+0x40>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a32      	ldr	r2, [pc, #200]	; (80046bc <TIM_Base_SetConfig+0xe4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00f      	beq.n	8004618 <TIM_Base_SetConfig+0x40>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fe:	d00b      	beq.n	8004618 <TIM_Base_SetConfig+0x40>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a2f      	ldr	r2, [pc, #188]	; (80046c0 <TIM_Base_SetConfig+0xe8>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d007      	beq.n	8004618 <TIM_Base_SetConfig+0x40>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a2e      	ldr	r2, [pc, #184]	; (80046c4 <TIM_Base_SetConfig+0xec>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d003      	beq.n	8004618 <TIM_Base_SetConfig+0x40>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a2d      	ldr	r2, [pc, #180]	; (80046c8 <TIM_Base_SetConfig+0xf0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d108      	bne.n	800462a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	4313      	orrs	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a22      	ldr	r2, [pc, #136]	; (80046b8 <TIM_Base_SetConfig+0xe0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d013      	beq.n	800465a <TIM_Base_SetConfig+0x82>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a21      	ldr	r2, [pc, #132]	; (80046bc <TIM_Base_SetConfig+0xe4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d00f      	beq.n	800465a <TIM_Base_SetConfig+0x82>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004640:	d00b      	beq.n	800465a <TIM_Base_SetConfig+0x82>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a1e      	ldr	r2, [pc, #120]	; (80046c0 <TIM_Base_SetConfig+0xe8>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d007      	beq.n	800465a <TIM_Base_SetConfig+0x82>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a1d      	ldr	r2, [pc, #116]	; (80046c4 <TIM_Base_SetConfig+0xec>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d003      	beq.n	800465a <TIM_Base_SetConfig+0x82>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a1c      	ldr	r2, [pc, #112]	; (80046c8 <TIM_Base_SetConfig+0xf0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d108      	bne.n	800466c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	4313      	orrs	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a09      	ldr	r2, [pc, #36]	; (80046b8 <TIM_Base_SetConfig+0xe0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d003      	beq.n	80046a0 <TIM_Base_SetConfig+0xc8>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a08      	ldr	r2, [pc, #32]	; (80046bc <TIM_Base_SetConfig+0xe4>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d103      	bne.n	80046a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	691a      	ldr	r2, [r3, #16]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	615a      	str	r2, [r3, #20]
}
 80046ae:	bf00      	nop
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr
 80046b8:	40012c00 	.word	0x40012c00
 80046bc:	40013400 	.word	0x40013400
 80046c0:	40000400 	.word	0x40000400
 80046c4:	40000800 	.word	0x40000800
 80046c8:	40000c00 	.word	0x40000c00

080046cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	bc80      	pop	{r7}
 80046dc:	4770      	bx	lr

080046de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr

080046f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e03f      	b.n	8004782 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7fd ffd8 	bl	80026cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2224      	movs	r2, #36	; 0x24
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004732:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 fcc1 	bl	80050bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004748:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	695a      	ldr	r2, [r3, #20]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004758:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004768:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b08a      	sub	sp, #40	; 0x28
 800478e:	af02      	add	r7, sp, #8
 8004790:	60f8      	str	r0, [r7, #12]
 8004792:	60b9      	str	r1, [r7, #8]
 8004794:	603b      	str	r3, [r7, #0]
 8004796:	4613      	mov	r3, r2
 8004798:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b20      	cmp	r3, #32
 80047a8:	d17c      	bne.n	80048a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <HAL_UART_Transmit+0x2c>
 80047b0:	88fb      	ldrh	r3, [r7, #6]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e075      	b.n	80048a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <HAL_UART_Transmit+0x3e>
 80047c4:	2302      	movs	r3, #2
 80047c6:	e06e      	b.n	80048a6 <HAL_UART_Transmit+0x11c>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2221      	movs	r2, #33	; 0x21
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047de:	f7fe f901 	bl	80029e4 <HAL_GetTick>
 80047e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	88fa      	ldrh	r2, [r7, #6]
 80047e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	88fa      	ldrh	r2, [r7, #6]
 80047ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f8:	d108      	bne.n	800480c <HAL_UART_Transmit+0x82>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d104      	bne.n	800480c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004802:	2300      	movs	r3, #0
 8004804:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	61bb      	str	r3, [r7, #24]
 800480a:	e003      	b.n	8004814 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004810:	2300      	movs	r3, #0
 8004812:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800481c:	e02a      	b.n	8004874 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2200      	movs	r2, #0
 8004826:	2180      	movs	r1, #128	; 0x80
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 fa73 	bl	8004d14 <UART_WaitOnFlagUntilTimeout>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e036      	b.n	80048a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10b      	bne.n	8004856 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800484c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	3302      	adds	r3, #2
 8004852:	61bb      	str	r3, [r7, #24]
 8004854:	e007      	b.n	8004866 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	781a      	ldrb	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	3301      	adds	r3, #1
 8004864:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004878:	b29b      	uxth	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1cf      	bne.n	800481e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2200      	movs	r2, #0
 8004886:	2140      	movs	r1, #64	; 0x40
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 fa43 	bl	8004d14 <UART_WaitOnFlagUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e006      	b.n	80048a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	e000      	b.n	80048a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048a4:	2302      	movs	r3, #2
  }
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3720      	adds	r7, #32
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b085      	sub	sp, #20
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	60f8      	str	r0, [r7, #12]
 80048b6:	60b9      	str	r1, [r7, #8]
 80048b8:	4613      	mov	r3, r2
 80048ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b20      	cmp	r3, #32
 80048c6:	d130      	bne.n	800492a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <HAL_UART_Transmit_IT+0x26>
 80048ce:	88fb      	ldrh	r3, [r7, #6]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e029      	b.n	800492c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d101      	bne.n	80048e6 <HAL_UART_Transmit_IT+0x38>
 80048e2:	2302      	movs	r3, #2
 80048e4:	e022      	b.n	800492c <HAL_UART_Transmit_IT+0x7e>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	88fa      	ldrh	r2, [r7, #6]
 80048f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	88fa      	ldrh	r2, [r7, #6]
 80048fe:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2221      	movs	r2, #33	; 0x21
 800490a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68da      	ldr	r2, [r3, #12]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004924:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	e000      	b.n	800492c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800492a:	2302      	movs	r3, #2
  }
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	bc80      	pop	{r7}
 8004934:	4770      	bx	lr

08004936 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b084      	sub	sp, #16
 800493a:	af00      	add	r7, sp, #0
 800493c:	60f8      	str	r0, [r7, #12]
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	4613      	mov	r3, r2
 8004942:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b20      	cmp	r3, #32
 800494e:	d11d      	bne.n	800498c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <HAL_UART_Receive_IT+0x26>
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e016      	b.n	800498e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004966:	2b01      	cmp	r3, #1
 8004968:	d101      	bne.n	800496e <HAL_UART_Receive_IT+0x38>
 800496a:	2302      	movs	r3, #2
 800496c:	e00f      	b.n	800498e <HAL_UART_Receive_IT+0x58>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800497c:	88fb      	ldrh	r3, [r7, #6]
 800497e:	461a      	mov	r2, r3
 8004980:	68b9      	ldr	r1, [r7, #8]
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 fa10 	bl	8004da8 <UART_Start_Receive_IT>
 8004988:	4603      	mov	r3, r0
 800498a:	e000      	b.n	800498e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800498c:	2302      	movs	r3, #2
  }
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08a      	sub	sp, #40	; 0x28
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10d      	bne.n	80049ea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	f003 0320 	and.w	r3, r3, #32
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d008      	beq.n	80049ea <HAL_UART_IRQHandler+0x52>
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	f003 0320 	and.w	r3, r3, #32
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fac0 	bl	8004f68 <UART_Receive_IT>
      return;
 80049e8:	e17b      	b.n	8004ce2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 80b1 	beq.w	8004b54 <HAL_UART_IRQHandler+0x1bc>
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d105      	bne.n	8004a08 <HAL_UART_IRQHandler+0x70>
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 80a6 	beq.w	8004b54 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <HAL_UART_IRQHandler+0x90>
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	f043 0201 	orr.w	r2, r3, #1
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	f003 0304 	and.w	r3, r3, #4
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <HAL_UART_IRQHandler+0xb0>
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	f043 0202 	orr.w	r2, r3, #2
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <HAL_UART_IRQHandler+0xd0>
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d005      	beq.n	8004a68 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	f043 0204 	orr.w	r2, r3, #4
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00f      	beq.n	8004a92 <HAL_UART_IRQHandler+0xfa>
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	f003 0320 	and.w	r3, r3, #32
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d104      	bne.n	8004a86 <HAL_UART_IRQHandler+0xee>
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d005      	beq.n	8004a92 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f043 0208 	orr.w	r2, r3, #8
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 811e 	beq.w	8004cd8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d007      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x11e>
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	f003 0320 	and.w	r3, r3, #32
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fa59 	bl	8004f68 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	bf14      	ite	ne
 8004ac4:	2301      	movne	r3, #1
 8004ac6:	2300      	moveq	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	f003 0308 	and.w	r3, r3, #8
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d102      	bne.n	8004ade <HAL_UART_IRQHandler+0x146>
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d031      	beq.n	8004b42 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f99b 	bl	8004e1a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d023      	beq.n	8004b3a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	695a      	ldr	r2, [r3, #20]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b00:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d013      	beq.n	8004b32 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0e:	4a76      	ldr	r2, [pc, #472]	; (8004ce8 <HAL_UART_IRQHandler+0x350>)
 8004b10:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fe f8da 	bl	8002cd0 <HAL_DMA_Abort_IT>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d016      	beq.n	8004b50 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b30:	e00e      	b.n	8004b50 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f8da 	bl	8004cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b38:	e00a      	b.n	8004b50 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f8d6 	bl	8004cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b40:	e006      	b.n	8004b50 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f8d2 	bl	8004cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004b4e:	e0c3      	b.n	8004cd8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b50:	bf00      	nop
    return;
 8004b52:	e0c1      	b.n	8004cd8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	f040 80a1 	bne.w	8004ca0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	f003 0310 	and.w	r3, r3, #16
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 809b 	beq.w	8004ca0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	f003 0310 	and.w	r3, r3, #16
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 8095 	beq.w	8004ca0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b76:	2300      	movs	r3, #0
 8004b78:	60fb      	str	r3, [r7, #12]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d04e      	beq.n	8004c38 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004ba4:	8a3b      	ldrh	r3, [r7, #16]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 8098 	beq.w	8004cdc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bb0:	8a3a      	ldrh	r2, [r7, #16]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	f080 8092 	bcs.w	8004cdc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	8a3a      	ldrh	r2, [r7, #16]
 8004bbc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d02b      	beq.n	8004c20 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bd6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	695a      	ldr	r2, [r3, #20]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0201 	bic.w	r2, r2, #1
 8004be6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	695a      	ldr	r2, [r3, #20]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bf6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0210 	bic.w	r2, r2, #16
 8004c14:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fe f81d 	bl	8002c5a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	4619      	mov	r1, r3
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f864 	bl	8004cfe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004c36:	e051      	b.n	8004cdc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d047      	beq.n	8004ce0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004c50:	8a7b      	ldrh	r3, [r7, #18]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d044      	beq.n	8004ce0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68da      	ldr	r2, [r3, #12]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c64:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	695a      	ldr	r2, [r3, #20]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0201 	bic.w	r2, r2, #1
 8004c74:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0210 	bic.w	r2, r2, #16
 8004c92:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c94:	8a7b      	ldrh	r3, [r7, #18]
 8004c96:	4619      	mov	r1, r3
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f830 	bl	8004cfe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004c9e:	e01f      	b.n	8004ce0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d008      	beq.n	8004cbc <HAL_UART_IRQHandler+0x324>
 8004caa:	6a3b      	ldr	r3, [r7, #32]
 8004cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f8f0 	bl	8004e9a <UART_Transmit_IT>
    return;
 8004cba:	e012      	b.n	8004ce2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00d      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x34a>
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d008      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f931 	bl	8004f38 <UART_EndTransmit_IT>
    return;
 8004cd6:	e004      	b.n	8004ce2 <HAL_UART_IRQHandler+0x34a>
    return;
 8004cd8:	bf00      	nop
 8004cda:	e002      	b.n	8004ce2 <HAL_UART_IRQHandler+0x34a>
      return;
 8004cdc:	bf00      	nop
 8004cde:	e000      	b.n	8004ce2 <HAL_UART_IRQHandler+0x34a>
      return;
 8004ce0:	bf00      	nop
  }
}
 8004ce2:	3728      	adds	r7, #40	; 0x28
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	08004e73 	.word	0x08004e73

08004cec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bc80      	pop	{r7}
 8004cfc:	4770      	bx	lr

08004cfe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	460b      	mov	r3, r1
 8004d08:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr

08004d14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	603b      	str	r3, [r7, #0]
 8004d20:	4613      	mov	r3, r2
 8004d22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d24:	e02c      	b.n	8004d80 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2c:	d028      	beq.n	8004d80 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d007      	beq.n	8004d44 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d34:	f7fd fe56 	bl	80029e4 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d21d      	bcs.n	8004d80 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d52:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695a      	ldr	r2, [r3, #20]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0201 	bic.w	r2, r2, #1
 8004d62:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e00f      	b.n	8004da0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	bf0c      	ite	eq
 8004d90:	2301      	moveq	r3, #1
 8004d92:	2300      	movne	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	461a      	mov	r2, r3
 8004d98:	79fb      	ldrb	r3, [r7, #7]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d0c3      	beq.n	8004d26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	4613      	mov	r3, r2
 8004db4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	88fa      	ldrh	r2, [r7, #6]
 8004dc0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	88fa      	ldrh	r2, [r7, #6]
 8004dc6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2222      	movs	r2, #34	; 0x22
 8004dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dec:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695a      	ldr	r2, [r3, #20]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f042 0201 	orr.w	r2, r2, #1
 8004dfc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f042 0220 	orr.w	r2, r2, #32
 8004e0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bc80      	pop	{r7}
 8004e18:	4770      	bx	lr

08004e1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68da      	ldr	r2, [r3, #12]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e30:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	695a      	ldr	r2, [r3, #20]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0201 	bic.w	r2, r2, #1
 8004e40:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d107      	bne.n	8004e5a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 0210 	bic.w	r2, r2, #16
 8004e58:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr

08004e72 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b084      	sub	sp, #16
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f7ff ff2d 	bl	8004cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e92:	bf00      	nop
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b085      	sub	sp, #20
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b21      	cmp	r3, #33	; 0x21
 8004eac:	d13e      	bne.n	8004f2c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb6:	d114      	bne.n	8004ee2 <UART_Transmit_IT+0x48>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d110      	bne.n	8004ee2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ed4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	1c9a      	adds	r2, r3, #2
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	621a      	str	r2, [r3, #32]
 8004ee0:	e008      	b.n	8004ef4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	1c59      	adds	r1, r3, #1
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6211      	str	r1, [r2, #32]
 8004eec:	781a      	ldrb	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	3b01      	subs	r3, #1
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	4619      	mov	r1, r3
 8004f02:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10f      	bne.n	8004f28 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	e000      	b.n	8004f2e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f2c:	2302      	movs	r3, #2
  }
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr

08004f38 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f4e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7fb fe95 	bl	8000c88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b22      	cmp	r3, #34	; 0x22
 8004f7a:	f040 8099 	bne.w	80050b0 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f86:	d117      	bne.n	8004fb8 <UART_Receive_IT+0x50>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d113      	bne.n	8004fb8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f98:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb0:	1c9a      	adds	r2, r3, #2
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	629a      	str	r2, [r3, #40]	; 0x28
 8004fb6:	e026      	b.n	8005006 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbc:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fca:	d007      	beq.n	8004fdc <UART_Receive_IT+0x74>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10a      	bne.n	8004fea <UART_Receive_IT+0x82>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d106      	bne.n	8004fea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	701a      	strb	r2, [r3, #0]
 8004fe8:	e008      	b.n	8004ffc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800500a:	b29b      	uxth	r3, r3
 800500c:	3b01      	subs	r3, #1
 800500e:	b29b      	uxth	r3, r3
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	4619      	mov	r1, r3
 8005014:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005016:	2b00      	cmp	r3, #0
 8005018:	d148      	bne.n	80050ac <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 0220 	bic.w	r2, r2, #32
 8005028:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005038:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695a      	ldr	r2, [r3, #20]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 0201 	bic.w	r2, r2, #1
 8005048:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2220      	movs	r2, #32
 800504e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005056:	2b01      	cmp	r3, #1
 8005058:	d123      	bne.n	80050a2 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68da      	ldr	r2, [r3, #12]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0210 	bic.w	r2, r2, #16
 800506e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0310 	and.w	r3, r3, #16
 800507a:	2b10      	cmp	r3, #16
 800507c:	d10a      	bne.n	8005094 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800507e:	2300      	movs	r3, #0
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005098:	4619      	mov	r1, r3
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7ff fe2f 	bl	8004cfe <HAL_UARTEx_RxEventCallback>
 80050a0:	e002      	b.n	80050a8 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7fb fdc0 	bl	8000c28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80050a8:	2300      	movs	r3, #0
 80050aa:	e002      	b.n	80050b2 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	e000      	b.n	80050b2 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80050b0:	2302      	movs	r3, #2
  }
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
	...

080050bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689a      	ldr	r2, [r3, #8]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	431a      	orrs	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80050f6:	f023 030c 	bic.w	r3, r3, #12
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6812      	ldr	r2, [r2, #0]
 80050fe:	68b9      	ldr	r1, [r7, #8]
 8005100:	430b      	orrs	r3, r1
 8005102:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699a      	ldr	r2, [r3, #24]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a2c      	ldr	r2, [pc, #176]	; (80051d0 <UART_SetConfig+0x114>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d103      	bne.n	800512c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005124:	f7fe fde4 	bl	8003cf0 <HAL_RCC_GetPCLK2Freq>
 8005128:	60f8      	str	r0, [r7, #12]
 800512a:	e002      	b.n	8005132 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800512c:	f7fe fdcc 	bl	8003cc8 <HAL_RCC_GetPCLK1Freq>
 8005130:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	4613      	mov	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4413      	add	r3, r2
 800513a:	009a      	lsls	r2, r3, #2
 800513c:	441a      	add	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	fbb2 f3f3 	udiv	r3, r2, r3
 8005148:	4a22      	ldr	r2, [pc, #136]	; (80051d4 <UART_SetConfig+0x118>)
 800514a:	fba2 2303 	umull	r2, r3, r2, r3
 800514e:	095b      	lsrs	r3, r3, #5
 8005150:	0119      	lsls	r1, r3, #4
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4613      	mov	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	009a      	lsls	r2, r3, #2
 800515c:	441a      	add	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	fbb2 f2f3 	udiv	r2, r2, r3
 8005168:	4b1a      	ldr	r3, [pc, #104]	; (80051d4 <UART_SetConfig+0x118>)
 800516a:	fba3 0302 	umull	r0, r3, r3, r2
 800516e:	095b      	lsrs	r3, r3, #5
 8005170:	2064      	movs	r0, #100	; 0x64
 8005172:	fb00 f303 	mul.w	r3, r0, r3
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	011b      	lsls	r3, r3, #4
 800517a:	3332      	adds	r3, #50	; 0x32
 800517c:	4a15      	ldr	r2, [pc, #84]	; (80051d4 <UART_SetConfig+0x118>)
 800517e:	fba2 2303 	umull	r2, r3, r2, r3
 8005182:	095b      	lsrs	r3, r3, #5
 8005184:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005188:	4419      	add	r1, r3
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	4613      	mov	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	009a      	lsls	r2, r3, #2
 8005194:	441a      	add	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	fbb2 f2f3 	udiv	r2, r2, r3
 80051a0:	4b0c      	ldr	r3, [pc, #48]	; (80051d4 <UART_SetConfig+0x118>)
 80051a2:	fba3 0302 	umull	r0, r3, r3, r2
 80051a6:	095b      	lsrs	r3, r3, #5
 80051a8:	2064      	movs	r0, #100	; 0x64
 80051aa:	fb00 f303 	mul.w	r3, r0, r3
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	3332      	adds	r3, #50	; 0x32
 80051b4:	4a07      	ldr	r2, [pc, #28]	; (80051d4 <UART_SetConfig+0x118>)
 80051b6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ba:	095b      	lsrs	r3, r3, #5
 80051bc:	f003 020f 	and.w	r2, r3, #15
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	440a      	add	r2, r1
 80051c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80051c8:	bf00      	nop
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40013800 	.word	0x40013800
 80051d4:	51eb851f 	.word	0x51eb851f

080051d8 <__errno>:
 80051d8:	4b01      	ldr	r3, [pc, #4]	; (80051e0 <__errno+0x8>)
 80051da:	6818      	ldr	r0, [r3, #0]
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	20000104 	.word	0x20000104

080051e4 <__libc_init_array>:
 80051e4:	b570      	push	{r4, r5, r6, lr}
 80051e6:	2600      	movs	r6, #0
 80051e8:	4d0c      	ldr	r5, [pc, #48]	; (800521c <__libc_init_array+0x38>)
 80051ea:	4c0d      	ldr	r4, [pc, #52]	; (8005220 <__libc_init_array+0x3c>)
 80051ec:	1b64      	subs	r4, r4, r5
 80051ee:	10a4      	asrs	r4, r4, #2
 80051f0:	42a6      	cmp	r6, r4
 80051f2:	d109      	bne.n	8005208 <__libc_init_array+0x24>
 80051f4:	f000 fc5c 	bl	8005ab0 <_init>
 80051f8:	2600      	movs	r6, #0
 80051fa:	4d0a      	ldr	r5, [pc, #40]	; (8005224 <__libc_init_array+0x40>)
 80051fc:	4c0a      	ldr	r4, [pc, #40]	; (8005228 <__libc_init_array+0x44>)
 80051fe:	1b64      	subs	r4, r4, r5
 8005200:	10a4      	asrs	r4, r4, #2
 8005202:	42a6      	cmp	r6, r4
 8005204:	d105      	bne.n	8005212 <__libc_init_array+0x2e>
 8005206:	bd70      	pop	{r4, r5, r6, pc}
 8005208:	f855 3b04 	ldr.w	r3, [r5], #4
 800520c:	4798      	blx	r3
 800520e:	3601      	adds	r6, #1
 8005210:	e7ee      	b.n	80051f0 <__libc_init_array+0xc>
 8005212:	f855 3b04 	ldr.w	r3, [r5], #4
 8005216:	4798      	blx	r3
 8005218:	3601      	adds	r6, #1
 800521a:	e7f2      	b.n	8005202 <__libc_init_array+0x1e>
 800521c:	080061b8 	.word	0x080061b8
 8005220:	080061b8 	.word	0x080061b8
 8005224:	080061b8 	.word	0x080061b8
 8005228:	080061bc 	.word	0x080061bc

0800522c <memset>:
 800522c:	4603      	mov	r3, r0
 800522e:	4402      	add	r2, r0
 8005230:	4293      	cmp	r3, r2
 8005232:	d100      	bne.n	8005236 <memset+0xa>
 8005234:	4770      	bx	lr
 8005236:	f803 1b01 	strb.w	r1, [r3], #1
 800523a:	e7f9      	b.n	8005230 <memset+0x4>

0800523c <siprintf>:
 800523c:	b40e      	push	{r1, r2, r3}
 800523e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005242:	b500      	push	{lr}
 8005244:	b09c      	sub	sp, #112	; 0x70
 8005246:	ab1d      	add	r3, sp, #116	; 0x74
 8005248:	9002      	str	r0, [sp, #8]
 800524a:	9006      	str	r0, [sp, #24]
 800524c:	9107      	str	r1, [sp, #28]
 800524e:	9104      	str	r1, [sp, #16]
 8005250:	4808      	ldr	r0, [pc, #32]	; (8005274 <siprintf+0x38>)
 8005252:	4909      	ldr	r1, [pc, #36]	; (8005278 <siprintf+0x3c>)
 8005254:	f853 2b04 	ldr.w	r2, [r3], #4
 8005258:	9105      	str	r1, [sp, #20]
 800525a:	6800      	ldr	r0, [r0, #0]
 800525c:	a902      	add	r1, sp, #8
 800525e:	9301      	str	r3, [sp, #4]
 8005260:	f000 f868 	bl	8005334 <_svfiprintf_r>
 8005264:	2200      	movs	r2, #0
 8005266:	9b02      	ldr	r3, [sp, #8]
 8005268:	701a      	strb	r2, [r3, #0]
 800526a:	b01c      	add	sp, #112	; 0x70
 800526c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005270:	b003      	add	sp, #12
 8005272:	4770      	bx	lr
 8005274:	20000104 	.word	0x20000104
 8005278:	ffff0208 	.word	0xffff0208

0800527c <__ssputs_r>:
 800527c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005280:	688e      	ldr	r6, [r1, #8]
 8005282:	4682      	mov	sl, r0
 8005284:	429e      	cmp	r6, r3
 8005286:	460c      	mov	r4, r1
 8005288:	4690      	mov	r8, r2
 800528a:	461f      	mov	r7, r3
 800528c:	d838      	bhi.n	8005300 <__ssputs_r+0x84>
 800528e:	898a      	ldrh	r2, [r1, #12]
 8005290:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005294:	d032      	beq.n	80052fc <__ssputs_r+0x80>
 8005296:	6825      	ldr	r5, [r4, #0]
 8005298:	6909      	ldr	r1, [r1, #16]
 800529a:	3301      	adds	r3, #1
 800529c:	eba5 0901 	sub.w	r9, r5, r1
 80052a0:	6965      	ldr	r5, [r4, #20]
 80052a2:	444b      	add	r3, r9
 80052a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052ac:	106d      	asrs	r5, r5, #1
 80052ae:	429d      	cmp	r5, r3
 80052b0:	bf38      	it	cc
 80052b2:	461d      	movcc	r5, r3
 80052b4:	0553      	lsls	r3, r2, #21
 80052b6:	d531      	bpl.n	800531c <__ssputs_r+0xa0>
 80052b8:	4629      	mov	r1, r5
 80052ba:	f000 fb53 	bl	8005964 <_malloc_r>
 80052be:	4606      	mov	r6, r0
 80052c0:	b950      	cbnz	r0, 80052d8 <__ssputs_r+0x5c>
 80052c2:	230c      	movs	r3, #12
 80052c4:	f04f 30ff 	mov.w	r0, #4294967295
 80052c8:	f8ca 3000 	str.w	r3, [sl]
 80052cc:	89a3      	ldrh	r3, [r4, #12]
 80052ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052d2:	81a3      	strh	r3, [r4, #12]
 80052d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d8:	464a      	mov	r2, r9
 80052da:	6921      	ldr	r1, [r4, #16]
 80052dc:	f000 face 	bl	800587c <memcpy>
 80052e0:	89a3      	ldrh	r3, [r4, #12]
 80052e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ea:	81a3      	strh	r3, [r4, #12]
 80052ec:	6126      	str	r6, [r4, #16]
 80052ee:	444e      	add	r6, r9
 80052f0:	6026      	str	r6, [r4, #0]
 80052f2:	463e      	mov	r6, r7
 80052f4:	6165      	str	r5, [r4, #20]
 80052f6:	eba5 0509 	sub.w	r5, r5, r9
 80052fa:	60a5      	str	r5, [r4, #8]
 80052fc:	42be      	cmp	r6, r7
 80052fe:	d900      	bls.n	8005302 <__ssputs_r+0x86>
 8005300:	463e      	mov	r6, r7
 8005302:	4632      	mov	r2, r6
 8005304:	4641      	mov	r1, r8
 8005306:	6820      	ldr	r0, [r4, #0]
 8005308:	f000 fac6 	bl	8005898 <memmove>
 800530c:	68a3      	ldr	r3, [r4, #8]
 800530e:	6822      	ldr	r2, [r4, #0]
 8005310:	1b9b      	subs	r3, r3, r6
 8005312:	4432      	add	r2, r6
 8005314:	2000      	movs	r0, #0
 8005316:	60a3      	str	r3, [r4, #8]
 8005318:	6022      	str	r2, [r4, #0]
 800531a:	e7db      	b.n	80052d4 <__ssputs_r+0x58>
 800531c:	462a      	mov	r2, r5
 800531e:	f000 fb7b 	bl	8005a18 <_realloc_r>
 8005322:	4606      	mov	r6, r0
 8005324:	2800      	cmp	r0, #0
 8005326:	d1e1      	bne.n	80052ec <__ssputs_r+0x70>
 8005328:	4650      	mov	r0, sl
 800532a:	6921      	ldr	r1, [r4, #16]
 800532c:	f000 face 	bl	80058cc <_free_r>
 8005330:	e7c7      	b.n	80052c2 <__ssputs_r+0x46>
	...

08005334 <_svfiprintf_r>:
 8005334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005338:	4698      	mov	r8, r3
 800533a:	898b      	ldrh	r3, [r1, #12]
 800533c:	4607      	mov	r7, r0
 800533e:	061b      	lsls	r3, r3, #24
 8005340:	460d      	mov	r5, r1
 8005342:	4614      	mov	r4, r2
 8005344:	b09d      	sub	sp, #116	; 0x74
 8005346:	d50e      	bpl.n	8005366 <_svfiprintf_r+0x32>
 8005348:	690b      	ldr	r3, [r1, #16]
 800534a:	b963      	cbnz	r3, 8005366 <_svfiprintf_r+0x32>
 800534c:	2140      	movs	r1, #64	; 0x40
 800534e:	f000 fb09 	bl	8005964 <_malloc_r>
 8005352:	6028      	str	r0, [r5, #0]
 8005354:	6128      	str	r0, [r5, #16]
 8005356:	b920      	cbnz	r0, 8005362 <_svfiprintf_r+0x2e>
 8005358:	230c      	movs	r3, #12
 800535a:	603b      	str	r3, [r7, #0]
 800535c:	f04f 30ff 	mov.w	r0, #4294967295
 8005360:	e0d1      	b.n	8005506 <_svfiprintf_r+0x1d2>
 8005362:	2340      	movs	r3, #64	; 0x40
 8005364:	616b      	str	r3, [r5, #20]
 8005366:	2300      	movs	r3, #0
 8005368:	9309      	str	r3, [sp, #36]	; 0x24
 800536a:	2320      	movs	r3, #32
 800536c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005370:	2330      	movs	r3, #48	; 0x30
 8005372:	f04f 0901 	mov.w	r9, #1
 8005376:	f8cd 800c 	str.w	r8, [sp, #12]
 800537a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005520 <_svfiprintf_r+0x1ec>
 800537e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005382:	4623      	mov	r3, r4
 8005384:	469a      	mov	sl, r3
 8005386:	f813 2b01 	ldrb.w	r2, [r3], #1
 800538a:	b10a      	cbz	r2, 8005390 <_svfiprintf_r+0x5c>
 800538c:	2a25      	cmp	r2, #37	; 0x25
 800538e:	d1f9      	bne.n	8005384 <_svfiprintf_r+0x50>
 8005390:	ebba 0b04 	subs.w	fp, sl, r4
 8005394:	d00b      	beq.n	80053ae <_svfiprintf_r+0x7a>
 8005396:	465b      	mov	r3, fp
 8005398:	4622      	mov	r2, r4
 800539a:	4629      	mov	r1, r5
 800539c:	4638      	mov	r0, r7
 800539e:	f7ff ff6d 	bl	800527c <__ssputs_r>
 80053a2:	3001      	adds	r0, #1
 80053a4:	f000 80aa 	beq.w	80054fc <_svfiprintf_r+0x1c8>
 80053a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053aa:	445a      	add	r2, fp
 80053ac:	9209      	str	r2, [sp, #36]	; 0x24
 80053ae:	f89a 3000 	ldrb.w	r3, [sl]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 80a2 	beq.w	80054fc <_svfiprintf_r+0x1c8>
 80053b8:	2300      	movs	r3, #0
 80053ba:	f04f 32ff 	mov.w	r2, #4294967295
 80053be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053c2:	f10a 0a01 	add.w	sl, sl, #1
 80053c6:	9304      	str	r3, [sp, #16]
 80053c8:	9307      	str	r3, [sp, #28]
 80053ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053ce:	931a      	str	r3, [sp, #104]	; 0x68
 80053d0:	4654      	mov	r4, sl
 80053d2:	2205      	movs	r2, #5
 80053d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053d8:	4851      	ldr	r0, [pc, #324]	; (8005520 <_svfiprintf_r+0x1ec>)
 80053da:	f000 fa41 	bl	8005860 <memchr>
 80053de:	9a04      	ldr	r2, [sp, #16]
 80053e0:	b9d8      	cbnz	r0, 800541a <_svfiprintf_r+0xe6>
 80053e2:	06d0      	lsls	r0, r2, #27
 80053e4:	bf44      	itt	mi
 80053e6:	2320      	movmi	r3, #32
 80053e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053ec:	0711      	lsls	r1, r2, #28
 80053ee:	bf44      	itt	mi
 80053f0:	232b      	movmi	r3, #43	; 0x2b
 80053f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053f6:	f89a 3000 	ldrb.w	r3, [sl]
 80053fa:	2b2a      	cmp	r3, #42	; 0x2a
 80053fc:	d015      	beq.n	800542a <_svfiprintf_r+0xf6>
 80053fe:	4654      	mov	r4, sl
 8005400:	2000      	movs	r0, #0
 8005402:	f04f 0c0a 	mov.w	ip, #10
 8005406:	9a07      	ldr	r2, [sp, #28]
 8005408:	4621      	mov	r1, r4
 800540a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800540e:	3b30      	subs	r3, #48	; 0x30
 8005410:	2b09      	cmp	r3, #9
 8005412:	d94e      	bls.n	80054b2 <_svfiprintf_r+0x17e>
 8005414:	b1b0      	cbz	r0, 8005444 <_svfiprintf_r+0x110>
 8005416:	9207      	str	r2, [sp, #28]
 8005418:	e014      	b.n	8005444 <_svfiprintf_r+0x110>
 800541a:	eba0 0308 	sub.w	r3, r0, r8
 800541e:	fa09 f303 	lsl.w	r3, r9, r3
 8005422:	4313      	orrs	r3, r2
 8005424:	46a2      	mov	sl, r4
 8005426:	9304      	str	r3, [sp, #16]
 8005428:	e7d2      	b.n	80053d0 <_svfiprintf_r+0x9c>
 800542a:	9b03      	ldr	r3, [sp, #12]
 800542c:	1d19      	adds	r1, r3, #4
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	9103      	str	r1, [sp, #12]
 8005432:	2b00      	cmp	r3, #0
 8005434:	bfbb      	ittet	lt
 8005436:	425b      	neglt	r3, r3
 8005438:	f042 0202 	orrlt.w	r2, r2, #2
 800543c:	9307      	strge	r3, [sp, #28]
 800543e:	9307      	strlt	r3, [sp, #28]
 8005440:	bfb8      	it	lt
 8005442:	9204      	strlt	r2, [sp, #16]
 8005444:	7823      	ldrb	r3, [r4, #0]
 8005446:	2b2e      	cmp	r3, #46	; 0x2e
 8005448:	d10c      	bne.n	8005464 <_svfiprintf_r+0x130>
 800544a:	7863      	ldrb	r3, [r4, #1]
 800544c:	2b2a      	cmp	r3, #42	; 0x2a
 800544e:	d135      	bne.n	80054bc <_svfiprintf_r+0x188>
 8005450:	9b03      	ldr	r3, [sp, #12]
 8005452:	3402      	adds	r4, #2
 8005454:	1d1a      	adds	r2, r3, #4
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	9203      	str	r2, [sp, #12]
 800545a:	2b00      	cmp	r3, #0
 800545c:	bfb8      	it	lt
 800545e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005462:	9305      	str	r3, [sp, #20]
 8005464:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005530 <_svfiprintf_r+0x1fc>
 8005468:	2203      	movs	r2, #3
 800546a:	4650      	mov	r0, sl
 800546c:	7821      	ldrb	r1, [r4, #0]
 800546e:	f000 f9f7 	bl	8005860 <memchr>
 8005472:	b140      	cbz	r0, 8005486 <_svfiprintf_r+0x152>
 8005474:	2340      	movs	r3, #64	; 0x40
 8005476:	eba0 000a 	sub.w	r0, r0, sl
 800547a:	fa03 f000 	lsl.w	r0, r3, r0
 800547e:	9b04      	ldr	r3, [sp, #16]
 8005480:	3401      	adds	r4, #1
 8005482:	4303      	orrs	r3, r0
 8005484:	9304      	str	r3, [sp, #16]
 8005486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800548a:	2206      	movs	r2, #6
 800548c:	4825      	ldr	r0, [pc, #148]	; (8005524 <_svfiprintf_r+0x1f0>)
 800548e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005492:	f000 f9e5 	bl	8005860 <memchr>
 8005496:	2800      	cmp	r0, #0
 8005498:	d038      	beq.n	800550c <_svfiprintf_r+0x1d8>
 800549a:	4b23      	ldr	r3, [pc, #140]	; (8005528 <_svfiprintf_r+0x1f4>)
 800549c:	bb1b      	cbnz	r3, 80054e6 <_svfiprintf_r+0x1b2>
 800549e:	9b03      	ldr	r3, [sp, #12]
 80054a0:	3307      	adds	r3, #7
 80054a2:	f023 0307 	bic.w	r3, r3, #7
 80054a6:	3308      	adds	r3, #8
 80054a8:	9303      	str	r3, [sp, #12]
 80054aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ac:	4433      	add	r3, r6
 80054ae:	9309      	str	r3, [sp, #36]	; 0x24
 80054b0:	e767      	b.n	8005382 <_svfiprintf_r+0x4e>
 80054b2:	460c      	mov	r4, r1
 80054b4:	2001      	movs	r0, #1
 80054b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80054ba:	e7a5      	b.n	8005408 <_svfiprintf_r+0xd4>
 80054bc:	2300      	movs	r3, #0
 80054be:	f04f 0c0a 	mov.w	ip, #10
 80054c2:	4619      	mov	r1, r3
 80054c4:	3401      	adds	r4, #1
 80054c6:	9305      	str	r3, [sp, #20]
 80054c8:	4620      	mov	r0, r4
 80054ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054ce:	3a30      	subs	r2, #48	; 0x30
 80054d0:	2a09      	cmp	r2, #9
 80054d2:	d903      	bls.n	80054dc <_svfiprintf_r+0x1a8>
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0c5      	beq.n	8005464 <_svfiprintf_r+0x130>
 80054d8:	9105      	str	r1, [sp, #20]
 80054da:	e7c3      	b.n	8005464 <_svfiprintf_r+0x130>
 80054dc:	4604      	mov	r4, r0
 80054de:	2301      	movs	r3, #1
 80054e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80054e4:	e7f0      	b.n	80054c8 <_svfiprintf_r+0x194>
 80054e6:	ab03      	add	r3, sp, #12
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	462a      	mov	r2, r5
 80054ec:	4638      	mov	r0, r7
 80054ee:	4b0f      	ldr	r3, [pc, #60]	; (800552c <_svfiprintf_r+0x1f8>)
 80054f0:	a904      	add	r1, sp, #16
 80054f2:	f3af 8000 	nop.w
 80054f6:	1c42      	adds	r2, r0, #1
 80054f8:	4606      	mov	r6, r0
 80054fa:	d1d6      	bne.n	80054aa <_svfiprintf_r+0x176>
 80054fc:	89ab      	ldrh	r3, [r5, #12]
 80054fe:	065b      	lsls	r3, r3, #25
 8005500:	f53f af2c 	bmi.w	800535c <_svfiprintf_r+0x28>
 8005504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005506:	b01d      	add	sp, #116	; 0x74
 8005508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800550c:	ab03      	add	r3, sp, #12
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	462a      	mov	r2, r5
 8005512:	4638      	mov	r0, r7
 8005514:	4b05      	ldr	r3, [pc, #20]	; (800552c <_svfiprintf_r+0x1f8>)
 8005516:	a904      	add	r1, sp, #16
 8005518:	f000 f87c 	bl	8005614 <_printf_i>
 800551c:	e7eb      	b.n	80054f6 <_svfiprintf_r+0x1c2>
 800551e:	bf00      	nop
 8005520:	08006184 	.word	0x08006184
 8005524:	0800618e 	.word	0x0800618e
 8005528:	00000000 	.word	0x00000000
 800552c:	0800527d 	.word	0x0800527d
 8005530:	0800618a 	.word	0x0800618a

08005534 <_printf_common>:
 8005534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005538:	4616      	mov	r6, r2
 800553a:	4699      	mov	r9, r3
 800553c:	688a      	ldr	r2, [r1, #8]
 800553e:	690b      	ldr	r3, [r1, #16]
 8005540:	4607      	mov	r7, r0
 8005542:	4293      	cmp	r3, r2
 8005544:	bfb8      	it	lt
 8005546:	4613      	movlt	r3, r2
 8005548:	6033      	str	r3, [r6, #0]
 800554a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800554e:	460c      	mov	r4, r1
 8005550:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005554:	b10a      	cbz	r2, 800555a <_printf_common+0x26>
 8005556:	3301      	adds	r3, #1
 8005558:	6033      	str	r3, [r6, #0]
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	0699      	lsls	r1, r3, #26
 800555e:	bf42      	ittt	mi
 8005560:	6833      	ldrmi	r3, [r6, #0]
 8005562:	3302      	addmi	r3, #2
 8005564:	6033      	strmi	r3, [r6, #0]
 8005566:	6825      	ldr	r5, [r4, #0]
 8005568:	f015 0506 	ands.w	r5, r5, #6
 800556c:	d106      	bne.n	800557c <_printf_common+0x48>
 800556e:	f104 0a19 	add.w	sl, r4, #25
 8005572:	68e3      	ldr	r3, [r4, #12]
 8005574:	6832      	ldr	r2, [r6, #0]
 8005576:	1a9b      	subs	r3, r3, r2
 8005578:	42ab      	cmp	r3, r5
 800557a:	dc28      	bgt.n	80055ce <_printf_common+0x9a>
 800557c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005580:	1e13      	subs	r3, r2, #0
 8005582:	6822      	ldr	r2, [r4, #0]
 8005584:	bf18      	it	ne
 8005586:	2301      	movne	r3, #1
 8005588:	0692      	lsls	r2, r2, #26
 800558a:	d42d      	bmi.n	80055e8 <_printf_common+0xb4>
 800558c:	4649      	mov	r1, r9
 800558e:	4638      	mov	r0, r7
 8005590:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005594:	47c0      	blx	r8
 8005596:	3001      	adds	r0, #1
 8005598:	d020      	beq.n	80055dc <_printf_common+0xa8>
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	68e5      	ldr	r5, [r4, #12]
 800559e:	f003 0306 	and.w	r3, r3, #6
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	bf18      	it	ne
 80055a6:	2500      	movne	r5, #0
 80055a8:	6832      	ldr	r2, [r6, #0]
 80055aa:	f04f 0600 	mov.w	r6, #0
 80055ae:	68a3      	ldr	r3, [r4, #8]
 80055b0:	bf08      	it	eq
 80055b2:	1aad      	subeq	r5, r5, r2
 80055b4:	6922      	ldr	r2, [r4, #16]
 80055b6:	bf08      	it	eq
 80055b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055bc:	4293      	cmp	r3, r2
 80055be:	bfc4      	itt	gt
 80055c0:	1a9b      	subgt	r3, r3, r2
 80055c2:	18ed      	addgt	r5, r5, r3
 80055c4:	341a      	adds	r4, #26
 80055c6:	42b5      	cmp	r5, r6
 80055c8:	d11a      	bne.n	8005600 <_printf_common+0xcc>
 80055ca:	2000      	movs	r0, #0
 80055cc:	e008      	b.n	80055e0 <_printf_common+0xac>
 80055ce:	2301      	movs	r3, #1
 80055d0:	4652      	mov	r2, sl
 80055d2:	4649      	mov	r1, r9
 80055d4:	4638      	mov	r0, r7
 80055d6:	47c0      	blx	r8
 80055d8:	3001      	adds	r0, #1
 80055da:	d103      	bne.n	80055e4 <_printf_common+0xb0>
 80055dc:	f04f 30ff 	mov.w	r0, #4294967295
 80055e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e4:	3501      	adds	r5, #1
 80055e6:	e7c4      	b.n	8005572 <_printf_common+0x3e>
 80055e8:	2030      	movs	r0, #48	; 0x30
 80055ea:	18e1      	adds	r1, r4, r3
 80055ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055f6:	4422      	add	r2, r4
 80055f8:	3302      	adds	r3, #2
 80055fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055fe:	e7c5      	b.n	800558c <_printf_common+0x58>
 8005600:	2301      	movs	r3, #1
 8005602:	4622      	mov	r2, r4
 8005604:	4649      	mov	r1, r9
 8005606:	4638      	mov	r0, r7
 8005608:	47c0      	blx	r8
 800560a:	3001      	adds	r0, #1
 800560c:	d0e6      	beq.n	80055dc <_printf_common+0xa8>
 800560e:	3601      	adds	r6, #1
 8005610:	e7d9      	b.n	80055c6 <_printf_common+0x92>
	...

08005614 <_printf_i>:
 8005614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005618:	460c      	mov	r4, r1
 800561a:	7e27      	ldrb	r7, [r4, #24]
 800561c:	4691      	mov	r9, r2
 800561e:	2f78      	cmp	r7, #120	; 0x78
 8005620:	4680      	mov	r8, r0
 8005622:	469a      	mov	sl, r3
 8005624:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005626:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800562a:	d807      	bhi.n	800563c <_printf_i+0x28>
 800562c:	2f62      	cmp	r7, #98	; 0x62
 800562e:	d80a      	bhi.n	8005646 <_printf_i+0x32>
 8005630:	2f00      	cmp	r7, #0
 8005632:	f000 80d9 	beq.w	80057e8 <_printf_i+0x1d4>
 8005636:	2f58      	cmp	r7, #88	; 0x58
 8005638:	f000 80a4 	beq.w	8005784 <_printf_i+0x170>
 800563c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005640:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005644:	e03a      	b.n	80056bc <_printf_i+0xa8>
 8005646:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800564a:	2b15      	cmp	r3, #21
 800564c:	d8f6      	bhi.n	800563c <_printf_i+0x28>
 800564e:	a001      	add	r0, pc, #4	; (adr r0, 8005654 <_printf_i+0x40>)
 8005650:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005654:	080056ad 	.word	0x080056ad
 8005658:	080056c1 	.word	0x080056c1
 800565c:	0800563d 	.word	0x0800563d
 8005660:	0800563d 	.word	0x0800563d
 8005664:	0800563d 	.word	0x0800563d
 8005668:	0800563d 	.word	0x0800563d
 800566c:	080056c1 	.word	0x080056c1
 8005670:	0800563d 	.word	0x0800563d
 8005674:	0800563d 	.word	0x0800563d
 8005678:	0800563d 	.word	0x0800563d
 800567c:	0800563d 	.word	0x0800563d
 8005680:	080057cf 	.word	0x080057cf
 8005684:	080056f1 	.word	0x080056f1
 8005688:	080057b1 	.word	0x080057b1
 800568c:	0800563d 	.word	0x0800563d
 8005690:	0800563d 	.word	0x0800563d
 8005694:	080057f1 	.word	0x080057f1
 8005698:	0800563d 	.word	0x0800563d
 800569c:	080056f1 	.word	0x080056f1
 80056a0:	0800563d 	.word	0x0800563d
 80056a4:	0800563d 	.word	0x0800563d
 80056a8:	080057b9 	.word	0x080057b9
 80056ac:	680b      	ldr	r3, [r1, #0]
 80056ae:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80056b2:	1d1a      	adds	r2, r3, #4
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	600a      	str	r2, [r1, #0]
 80056b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056bc:	2301      	movs	r3, #1
 80056be:	e0a4      	b.n	800580a <_printf_i+0x1f6>
 80056c0:	6825      	ldr	r5, [r4, #0]
 80056c2:	6808      	ldr	r0, [r1, #0]
 80056c4:	062e      	lsls	r6, r5, #24
 80056c6:	f100 0304 	add.w	r3, r0, #4
 80056ca:	d50a      	bpl.n	80056e2 <_printf_i+0xce>
 80056cc:	6805      	ldr	r5, [r0, #0]
 80056ce:	600b      	str	r3, [r1, #0]
 80056d0:	2d00      	cmp	r5, #0
 80056d2:	da03      	bge.n	80056dc <_printf_i+0xc8>
 80056d4:	232d      	movs	r3, #45	; 0x2d
 80056d6:	426d      	negs	r5, r5
 80056d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056dc:	230a      	movs	r3, #10
 80056de:	485e      	ldr	r0, [pc, #376]	; (8005858 <_printf_i+0x244>)
 80056e0:	e019      	b.n	8005716 <_printf_i+0x102>
 80056e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80056e6:	6805      	ldr	r5, [r0, #0]
 80056e8:	600b      	str	r3, [r1, #0]
 80056ea:	bf18      	it	ne
 80056ec:	b22d      	sxthne	r5, r5
 80056ee:	e7ef      	b.n	80056d0 <_printf_i+0xbc>
 80056f0:	680b      	ldr	r3, [r1, #0]
 80056f2:	6825      	ldr	r5, [r4, #0]
 80056f4:	1d18      	adds	r0, r3, #4
 80056f6:	6008      	str	r0, [r1, #0]
 80056f8:	0628      	lsls	r0, r5, #24
 80056fa:	d501      	bpl.n	8005700 <_printf_i+0xec>
 80056fc:	681d      	ldr	r5, [r3, #0]
 80056fe:	e002      	b.n	8005706 <_printf_i+0xf2>
 8005700:	0669      	lsls	r1, r5, #25
 8005702:	d5fb      	bpl.n	80056fc <_printf_i+0xe8>
 8005704:	881d      	ldrh	r5, [r3, #0]
 8005706:	2f6f      	cmp	r7, #111	; 0x6f
 8005708:	bf0c      	ite	eq
 800570a:	2308      	moveq	r3, #8
 800570c:	230a      	movne	r3, #10
 800570e:	4852      	ldr	r0, [pc, #328]	; (8005858 <_printf_i+0x244>)
 8005710:	2100      	movs	r1, #0
 8005712:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005716:	6866      	ldr	r6, [r4, #4]
 8005718:	2e00      	cmp	r6, #0
 800571a:	bfa8      	it	ge
 800571c:	6821      	ldrge	r1, [r4, #0]
 800571e:	60a6      	str	r6, [r4, #8]
 8005720:	bfa4      	itt	ge
 8005722:	f021 0104 	bicge.w	r1, r1, #4
 8005726:	6021      	strge	r1, [r4, #0]
 8005728:	b90d      	cbnz	r5, 800572e <_printf_i+0x11a>
 800572a:	2e00      	cmp	r6, #0
 800572c:	d04d      	beq.n	80057ca <_printf_i+0x1b6>
 800572e:	4616      	mov	r6, r2
 8005730:	fbb5 f1f3 	udiv	r1, r5, r3
 8005734:	fb03 5711 	mls	r7, r3, r1, r5
 8005738:	5dc7      	ldrb	r7, [r0, r7]
 800573a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800573e:	462f      	mov	r7, r5
 8005740:	42bb      	cmp	r3, r7
 8005742:	460d      	mov	r5, r1
 8005744:	d9f4      	bls.n	8005730 <_printf_i+0x11c>
 8005746:	2b08      	cmp	r3, #8
 8005748:	d10b      	bne.n	8005762 <_printf_i+0x14e>
 800574a:	6823      	ldr	r3, [r4, #0]
 800574c:	07df      	lsls	r7, r3, #31
 800574e:	d508      	bpl.n	8005762 <_printf_i+0x14e>
 8005750:	6923      	ldr	r3, [r4, #16]
 8005752:	6861      	ldr	r1, [r4, #4]
 8005754:	4299      	cmp	r1, r3
 8005756:	bfde      	ittt	le
 8005758:	2330      	movle	r3, #48	; 0x30
 800575a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800575e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005762:	1b92      	subs	r2, r2, r6
 8005764:	6122      	str	r2, [r4, #16]
 8005766:	464b      	mov	r3, r9
 8005768:	4621      	mov	r1, r4
 800576a:	4640      	mov	r0, r8
 800576c:	f8cd a000 	str.w	sl, [sp]
 8005770:	aa03      	add	r2, sp, #12
 8005772:	f7ff fedf 	bl	8005534 <_printf_common>
 8005776:	3001      	adds	r0, #1
 8005778:	d14c      	bne.n	8005814 <_printf_i+0x200>
 800577a:	f04f 30ff 	mov.w	r0, #4294967295
 800577e:	b004      	add	sp, #16
 8005780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005784:	4834      	ldr	r0, [pc, #208]	; (8005858 <_printf_i+0x244>)
 8005786:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800578a:	680e      	ldr	r6, [r1, #0]
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005792:	061f      	lsls	r7, r3, #24
 8005794:	600e      	str	r6, [r1, #0]
 8005796:	d514      	bpl.n	80057c2 <_printf_i+0x1ae>
 8005798:	07d9      	lsls	r1, r3, #31
 800579a:	bf44      	itt	mi
 800579c:	f043 0320 	orrmi.w	r3, r3, #32
 80057a0:	6023      	strmi	r3, [r4, #0]
 80057a2:	b91d      	cbnz	r5, 80057ac <_printf_i+0x198>
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	f023 0320 	bic.w	r3, r3, #32
 80057aa:	6023      	str	r3, [r4, #0]
 80057ac:	2310      	movs	r3, #16
 80057ae:	e7af      	b.n	8005710 <_printf_i+0xfc>
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	f043 0320 	orr.w	r3, r3, #32
 80057b6:	6023      	str	r3, [r4, #0]
 80057b8:	2378      	movs	r3, #120	; 0x78
 80057ba:	4828      	ldr	r0, [pc, #160]	; (800585c <_printf_i+0x248>)
 80057bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057c0:	e7e3      	b.n	800578a <_printf_i+0x176>
 80057c2:	065e      	lsls	r6, r3, #25
 80057c4:	bf48      	it	mi
 80057c6:	b2ad      	uxthmi	r5, r5
 80057c8:	e7e6      	b.n	8005798 <_printf_i+0x184>
 80057ca:	4616      	mov	r6, r2
 80057cc:	e7bb      	b.n	8005746 <_printf_i+0x132>
 80057ce:	680b      	ldr	r3, [r1, #0]
 80057d0:	6826      	ldr	r6, [r4, #0]
 80057d2:	1d1d      	adds	r5, r3, #4
 80057d4:	6960      	ldr	r0, [r4, #20]
 80057d6:	600d      	str	r5, [r1, #0]
 80057d8:	0635      	lsls	r5, r6, #24
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	d501      	bpl.n	80057e2 <_printf_i+0x1ce>
 80057de:	6018      	str	r0, [r3, #0]
 80057e0:	e002      	b.n	80057e8 <_printf_i+0x1d4>
 80057e2:	0671      	lsls	r1, r6, #25
 80057e4:	d5fb      	bpl.n	80057de <_printf_i+0x1ca>
 80057e6:	8018      	strh	r0, [r3, #0]
 80057e8:	2300      	movs	r3, #0
 80057ea:	4616      	mov	r6, r2
 80057ec:	6123      	str	r3, [r4, #16]
 80057ee:	e7ba      	b.n	8005766 <_printf_i+0x152>
 80057f0:	680b      	ldr	r3, [r1, #0]
 80057f2:	1d1a      	adds	r2, r3, #4
 80057f4:	600a      	str	r2, [r1, #0]
 80057f6:	681e      	ldr	r6, [r3, #0]
 80057f8:	2100      	movs	r1, #0
 80057fa:	4630      	mov	r0, r6
 80057fc:	6862      	ldr	r2, [r4, #4]
 80057fe:	f000 f82f 	bl	8005860 <memchr>
 8005802:	b108      	cbz	r0, 8005808 <_printf_i+0x1f4>
 8005804:	1b80      	subs	r0, r0, r6
 8005806:	6060      	str	r0, [r4, #4]
 8005808:	6863      	ldr	r3, [r4, #4]
 800580a:	6123      	str	r3, [r4, #16]
 800580c:	2300      	movs	r3, #0
 800580e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005812:	e7a8      	b.n	8005766 <_printf_i+0x152>
 8005814:	4632      	mov	r2, r6
 8005816:	4649      	mov	r1, r9
 8005818:	4640      	mov	r0, r8
 800581a:	6923      	ldr	r3, [r4, #16]
 800581c:	47d0      	blx	sl
 800581e:	3001      	adds	r0, #1
 8005820:	d0ab      	beq.n	800577a <_printf_i+0x166>
 8005822:	6823      	ldr	r3, [r4, #0]
 8005824:	079b      	lsls	r3, r3, #30
 8005826:	d413      	bmi.n	8005850 <_printf_i+0x23c>
 8005828:	68e0      	ldr	r0, [r4, #12]
 800582a:	9b03      	ldr	r3, [sp, #12]
 800582c:	4298      	cmp	r0, r3
 800582e:	bfb8      	it	lt
 8005830:	4618      	movlt	r0, r3
 8005832:	e7a4      	b.n	800577e <_printf_i+0x16a>
 8005834:	2301      	movs	r3, #1
 8005836:	4632      	mov	r2, r6
 8005838:	4649      	mov	r1, r9
 800583a:	4640      	mov	r0, r8
 800583c:	47d0      	blx	sl
 800583e:	3001      	adds	r0, #1
 8005840:	d09b      	beq.n	800577a <_printf_i+0x166>
 8005842:	3501      	adds	r5, #1
 8005844:	68e3      	ldr	r3, [r4, #12]
 8005846:	9903      	ldr	r1, [sp, #12]
 8005848:	1a5b      	subs	r3, r3, r1
 800584a:	42ab      	cmp	r3, r5
 800584c:	dcf2      	bgt.n	8005834 <_printf_i+0x220>
 800584e:	e7eb      	b.n	8005828 <_printf_i+0x214>
 8005850:	2500      	movs	r5, #0
 8005852:	f104 0619 	add.w	r6, r4, #25
 8005856:	e7f5      	b.n	8005844 <_printf_i+0x230>
 8005858:	08006195 	.word	0x08006195
 800585c:	080061a6 	.word	0x080061a6

08005860 <memchr>:
 8005860:	4603      	mov	r3, r0
 8005862:	b510      	push	{r4, lr}
 8005864:	b2c9      	uxtb	r1, r1
 8005866:	4402      	add	r2, r0
 8005868:	4293      	cmp	r3, r2
 800586a:	4618      	mov	r0, r3
 800586c:	d101      	bne.n	8005872 <memchr+0x12>
 800586e:	2000      	movs	r0, #0
 8005870:	e003      	b.n	800587a <memchr+0x1a>
 8005872:	7804      	ldrb	r4, [r0, #0]
 8005874:	3301      	adds	r3, #1
 8005876:	428c      	cmp	r4, r1
 8005878:	d1f6      	bne.n	8005868 <memchr+0x8>
 800587a:	bd10      	pop	{r4, pc}

0800587c <memcpy>:
 800587c:	440a      	add	r2, r1
 800587e:	4291      	cmp	r1, r2
 8005880:	f100 33ff 	add.w	r3, r0, #4294967295
 8005884:	d100      	bne.n	8005888 <memcpy+0xc>
 8005886:	4770      	bx	lr
 8005888:	b510      	push	{r4, lr}
 800588a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800588e:	4291      	cmp	r1, r2
 8005890:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005894:	d1f9      	bne.n	800588a <memcpy+0xe>
 8005896:	bd10      	pop	{r4, pc}

08005898 <memmove>:
 8005898:	4288      	cmp	r0, r1
 800589a:	b510      	push	{r4, lr}
 800589c:	eb01 0402 	add.w	r4, r1, r2
 80058a0:	d902      	bls.n	80058a8 <memmove+0x10>
 80058a2:	4284      	cmp	r4, r0
 80058a4:	4623      	mov	r3, r4
 80058a6:	d807      	bhi.n	80058b8 <memmove+0x20>
 80058a8:	1e43      	subs	r3, r0, #1
 80058aa:	42a1      	cmp	r1, r4
 80058ac:	d008      	beq.n	80058c0 <memmove+0x28>
 80058ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058b6:	e7f8      	b.n	80058aa <memmove+0x12>
 80058b8:	4601      	mov	r1, r0
 80058ba:	4402      	add	r2, r0
 80058bc:	428a      	cmp	r2, r1
 80058be:	d100      	bne.n	80058c2 <memmove+0x2a>
 80058c0:	bd10      	pop	{r4, pc}
 80058c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058ca:	e7f7      	b.n	80058bc <memmove+0x24>

080058cc <_free_r>:
 80058cc:	b538      	push	{r3, r4, r5, lr}
 80058ce:	4605      	mov	r5, r0
 80058d0:	2900      	cmp	r1, #0
 80058d2:	d043      	beq.n	800595c <_free_r+0x90>
 80058d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058d8:	1f0c      	subs	r4, r1, #4
 80058da:	2b00      	cmp	r3, #0
 80058dc:	bfb8      	it	lt
 80058de:	18e4      	addlt	r4, r4, r3
 80058e0:	f000 f8d0 	bl	8005a84 <__malloc_lock>
 80058e4:	4a1e      	ldr	r2, [pc, #120]	; (8005960 <_free_r+0x94>)
 80058e6:	6813      	ldr	r3, [r2, #0]
 80058e8:	4610      	mov	r0, r2
 80058ea:	b933      	cbnz	r3, 80058fa <_free_r+0x2e>
 80058ec:	6063      	str	r3, [r4, #4]
 80058ee:	6014      	str	r4, [r2, #0]
 80058f0:	4628      	mov	r0, r5
 80058f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058f6:	f000 b8cb 	b.w	8005a90 <__malloc_unlock>
 80058fa:	42a3      	cmp	r3, r4
 80058fc:	d90a      	bls.n	8005914 <_free_r+0x48>
 80058fe:	6821      	ldr	r1, [r4, #0]
 8005900:	1862      	adds	r2, r4, r1
 8005902:	4293      	cmp	r3, r2
 8005904:	bf01      	itttt	eq
 8005906:	681a      	ldreq	r2, [r3, #0]
 8005908:	685b      	ldreq	r3, [r3, #4]
 800590a:	1852      	addeq	r2, r2, r1
 800590c:	6022      	streq	r2, [r4, #0]
 800590e:	6063      	str	r3, [r4, #4]
 8005910:	6004      	str	r4, [r0, #0]
 8005912:	e7ed      	b.n	80058f0 <_free_r+0x24>
 8005914:	461a      	mov	r2, r3
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	b10b      	cbz	r3, 800591e <_free_r+0x52>
 800591a:	42a3      	cmp	r3, r4
 800591c:	d9fa      	bls.n	8005914 <_free_r+0x48>
 800591e:	6811      	ldr	r1, [r2, #0]
 8005920:	1850      	adds	r0, r2, r1
 8005922:	42a0      	cmp	r0, r4
 8005924:	d10b      	bne.n	800593e <_free_r+0x72>
 8005926:	6820      	ldr	r0, [r4, #0]
 8005928:	4401      	add	r1, r0
 800592a:	1850      	adds	r0, r2, r1
 800592c:	4283      	cmp	r3, r0
 800592e:	6011      	str	r1, [r2, #0]
 8005930:	d1de      	bne.n	80058f0 <_free_r+0x24>
 8005932:	6818      	ldr	r0, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	4401      	add	r1, r0
 8005938:	6011      	str	r1, [r2, #0]
 800593a:	6053      	str	r3, [r2, #4]
 800593c:	e7d8      	b.n	80058f0 <_free_r+0x24>
 800593e:	d902      	bls.n	8005946 <_free_r+0x7a>
 8005940:	230c      	movs	r3, #12
 8005942:	602b      	str	r3, [r5, #0]
 8005944:	e7d4      	b.n	80058f0 <_free_r+0x24>
 8005946:	6820      	ldr	r0, [r4, #0]
 8005948:	1821      	adds	r1, r4, r0
 800594a:	428b      	cmp	r3, r1
 800594c:	bf01      	itttt	eq
 800594e:	6819      	ldreq	r1, [r3, #0]
 8005950:	685b      	ldreq	r3, [r3, #4]
 8005952:	1809      	addeq	r1, r1, r0
 8005954:	6021      	streq	r1, [r4, #0]
 8005956:	6063      	str	r3, [r4, #4]
 8005958:	6054      	str	r4, [r2, #4]
 800595a:	e7c9      	b.n	80058f0 <_free_r+0x24>
 800595c:	bd38      	pop	{r3, r4, r5, pc}
 800595e:	bf00      	nop
 8005960:	200011c8 	.word	0x200011c8

08005964 <_malloc_r>:
 8005964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005966:	1ccd      	adds	r5, r1, #3
 8005968:	f025 0503 	bic.w	r5, r5, #3
 800596c:	3508      	adds	r5, #8
 800596e:	2d0c      	cmp	r5, #12
 8005970:	bf38      	it	cc
 8005972:	250c      	movcc	r5, #12
 8005974:	2d00      	cmp	r5, #0
 8005976:	4606      	mov	r6, r0
 8005978:	db01      	blt.n	800597e <_malloc_r+0x1a>
 800597a:	42a9      	cmp	r1, r5
 800597c:	d903      	bls.n	8005986 <_malloc_r+0x22>
 800597e:	230c      	movs	r3, #12
 8005980:	6033      	str	r3, [r6, #0]
 8005982:	2000      	movs	r0, #0
 8005984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005986:	f000 f87d 	bl	8005a84 <__malloc_lock>
 800598a:	4921      	ldr	r1, [pc, #132]	; (8005a10 <_malloc_r+0xac>)
 800598c:	680a      	ldr	r2, [r1, #0]
 800598e:	4614      	mov	r4, r2
 8005990:	b99c      	cbnz	r4, 80059ba <_malloc_r+0x56>
 8005992:	4f20      	ldr	r7, [pc, #128]	; (8005a14 <_malloc_r+0xb0>)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	b923      	cbnz	r3, 80059a2 <_malloc_r+0x3e>
 8005998:	4621      	mov	r1, r4
 800599a:	4630      	mov	r0, r6
 800599c:	f000 f862 	bl	8005a64 <_sbrk_r>
 80059a0:	6038      	str	r0, [r7, #0]
 80059a2:	4629      	mov	r1, r5
 80059a4:	4630      	mov	r0, r6
 80059a6:	f000 f85d 	bl	8005a64 <_sbrk_r>
 80059aa:	1c43      	adds	r3, r0, #1
 80059ac:	d123      	bne.n	80059f6 <_malloc_r+0x92>
 80059ae:	230c      	movs	r3, #12
 80059b0:	4630      	mov	r0, r6
 80059b2:	6033      	str	r3, [r6, #0]
 80059b4:	f000 f86c 	bl	8005a90 <__malloc_unlock>
 80059b8:	e7e3      	b.n	8005982 <_malloc_r+0x1e>
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	1b5b      	subs	r3, r3, r5
 80059be:	d417      	bmi.n	80059f0 <_malloc_r+0x8c>
 80059c0:	2b0b      	cmp	r3, #11
 80059c2:	d903      	bls.n	80059cc <_malloc_r+0x68>
 80059c4:	6023      	str	r3, [r4, #0]
 80059c6:	441c      	add	r4, r3
 80059c8:	6025      	str	r5, [r4, #0]
 80059ca:	e004      	b.n	80059d6 <_malloc_r+0x72>
 80059cc:	6863      	ldr	r3, [r4, #4]
 80059ce:	42a2      	cmp	r2, r4
 80059d0:	bf0c      	ite	eq
 80059d2:	600b      	streq	r3, [r1, #0]
 80059d4:	6053      	strne	r3, [r2, #4]
 80059d6:	4630      	mov	r0, r6
 80059d8:	f000 f85a 	bl	8005a90 <__malloc_unlock>
 80059dc:	f104 000b 	add.w	r0, r4, #11
 80059e0:	1d23      	adds	r3, r4, #4
 80059e2:	f020 0007 	bic.w	r0, r0, #7
 80059e6:	1ac2      	subs	r2, r0, r3
 80059e8:	d0cc      	beq.n	8005984 <_malloc_r+0x20>
 80059ea:	1a1b      	subs	r3, r3, r0
 80059ec:	50a3      	str	r3, [r4, r2]
 80059ee:	e7c9      	b.n	8005984 <_malloc_r+0x20>
 80059f0:	4622      	mov	r2, r4
 80059f2:	6864      	ldr	r4, [r4, #4]
 80059f4:	e7cc      	b.n	8005990 <_malloc_r+0x2c>
 80059f6:	1cc4      	adds	r4, r0, #3
 80059f8:	f024 0403 	bic.w	r4, r4, #3
 80059fc:	42a0      	cmp	r0, r4
 80059fe:	d0e3      	beq.n	80059c8 <_malloc_r+0x64>
 8005a00:	1a21      	subs	r1, r4, r0
 8005a02:	4630      	mov	r0, r6
 8005a04:	f000 f82e 	bl	8005a64 <_sbrk_r>
 8005a08:	3001      	adds	r0, #1
 8005a0a:	d1dd      	bne.n	80059c8 <_malloc_r+0x64>
 8005a0c:	e7cf      	b.n	80059ae <_malloc_r+0x4a>
 8005a0e:	bf00      	nop
 8005a10:	200011c8 	.word	0x200011c8
 8005a14:	200011cc 	.word	0x200011cc

08005a18 <_realloc_r>:
 8005a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1a:	4607      	mov	r7, r0
 8005a1c:	4614      	mov	r4, r2
 8005a1e:	460e      	mov	r6, r1
 8005a20:	b921      	cbnz	r1, 8005a2c <_realloc_r+0x14>
 8005a22:	4611      	mov	r1, r2
 8005a24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005a28:	f7ff bf9c 	b.w	8005964 <_malloc_r>
 8005a2c:	b922      	cbnz	r2, 8005a38 <_realloc_r+0x20>
 8005a2e:	f7ff ff4d 	bl	80058cc <_free_r>
 8005a32:	4625      	mov	r5, r4
 8005a34:	4628      	mov	r0, r5
 8005a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a38:	f000 f830 	bl	8005a9c <_malloc_usable_size_r>
 8005a3c:	42a0      	cmp	r0, r4
 8005a3e:	d20f      	bcs.n	8005a60 <_realloc_r+0x48>
 8005a40:	4621      	mov	r1, r4
 8005a42:	4638      	mov	r0, r7
 8005a44:	f7ff ff8e 	bl	8005964 <_malloc_r>
 8005a48:	4605      	mov	r5, r0
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	d0f2      	beq.n	8005a34 <_realloc_r+0x1c>
 8005a4e:	4631      	mov	r1, r6
 8005a50:	4622      	mov	r2, r4
 8005a52:	f7ff ff13 	bl	800587c <memcpy>
 8005a56:	4631      	mov	r1, r6
 8005a58:	4638      	mov	r0, r7
 8005a5a:	f7ff ff37 	bl	80058cc <_free_r>
 8005a5e:	e7e9      	b.n	8005a34 <_realloc_r+0x1c>
 8005a60:	4635      	mov	r5, r6
 8005a62:	e7e7      	b.n	8005a34 <_realloc_r+0x1c>

08005a64 <_sbrk_r>:
 8005a64:	b538      	push	{r3, r4, r5, lr}
 8005a66:	2300      	movs	r3, #0
 8005a68:	4d05      	ldr	r5, [pc, #20]	; (8005a80 <_sbrk_r+0x1c>)
 8005a6a:	4604      	mov	r4, r0
 8005a6c:	4608      	mov	r0, r1
 8005a6e:	602b      	str	r3, [r5, #0]
 8005a70:	f7fc fef8 	bl	8002864 <_sbrk>
 8005a74:	1c43      	adds	r3, r0, #1
 8005a76:	d102      	bne.n	8005a7e <_sbrk_r+0x1a>
 8005a78:	682b      	ldr	r3, [r5, #0]
 8005a7a:	b103      	cbz	r3, 8005a7e <_sbrk_r+0x1a>
 8005a7c:	6023      	str	r3, [r4, #0]
 8005a7e:	bd38      	pop	{r3, r4, r5, pc}
 8005a80:	20003fb8 	.word	0x20003fb8

08005a84 <__malloc_lock>:
 8005a84:	4801      	ldr	r0, [pc, #4]	; (8005a8c <__malloc_lock+0x8>)
 8005a86:	f000 b811 	b.w	8005aac <__retarget_lock_acquire_recursive>
 8005a8a:	bf00      	nop
 8005a8c:	20003fc0 	.word	0x20003fc0

08005a90 <__malloc_unlock>:
 8005a90:	4801      	ldr	r0, [pc, #4]	; (8005a98 <__malloc_unlock+0x8>)
 8005a92:	f000 b80c 	b.w	8005aae <__retarget_lock_release_recursive>
 8005a96:	bf00      	nop
 8005a98:	20003fc0 	.word	0x20003fc0

08005a9c <_malloc_usable_size_r>:
 8005a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aa0:	1f18      	subs	r0, r3, #4
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	bfbc      	itt	lt
 8005aa6:	580b      	ldrlt	r3, [r1, r0]
 8005aa8:	18c0      	addlt	r0, r0, r3
 8005aaa:	4770      	bx	lr

08005aac <__retarget_lock_acquire_recursive>:
 8005aac:	4770      	bx	lr

08005aae <__retarget_lock_release_recursive>:
 8005aae:	4770      	bx	lr

08005ab0 <_init>:
 8005ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab2:	bf00      	nop
 8005ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ab6:	bc08      	pop	{r3}
 8005ab8:	469e      	mov	lr, r3
 8005aba:	4770      	bx	lr

08005abc <_fini>:
 8005abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005abe:	bf00      	nop
 8005ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ac2:	bc08      	pop	{r3}
 8005ac4:	469e      	mov	lr, r3
 8005ac6:	4770      	bx	lr
