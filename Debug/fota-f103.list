
fota-f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006850  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e8  08006a34  08006a34  00016a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800711c  0800711c  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  0800711c  0800711c  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800711c  0800711c  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800711c  0800711c  0001711c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007120  08007120  00017120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08007124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041c8  20000168  08007288  00020168  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004330  08007288  00024330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ef7  00000000  00000000  0002018d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004705  00000000  00000000  0003a084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  0003e790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b8  00000000  00000000  00040048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d2c3  00000000  00000000  00041800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d37b  00000000  00000000  0005eac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a09ef  00000000  00000000  0007be3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011c82d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006670  00000000  00000000  0011c880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000168 	.word	0x20000168
 8000200:	00000000 	.word	0x00000000
 8000204:	08006a1c 	.word	0x08006a1c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000016c 	.word	0x2000016c
 8000220:	08006a1c 	.word	0x08006a1c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <MC25LC512_CS>:
unsigned char MC25LC512_ReleaseDeepPowerDownMode(void);



void MC25LC512_CS(uint8_t CS_Status)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
	// For Cs of the EEprom
	if(CS_Status == EEPROM_CS_PIN_RESET)
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d102      	bne.n	800024a <MC25LC512_CS+0x16>
	{
		ResetChipSelect();
 8000244:	f000 fd6e 	bl	8000d24 <ResetChipSelect>
	{
		SetChipSelect();

	}

}
 8000248:	e001      	b.n	800024e <MC25LC512_CS+0x1a>
		SetChipSelect();
 800024a:	f000 fd77 	bl	8000d3c <SetChipSelect>
}
 800024e:	bf00      	nop
 8000250:	3708      	adds	r7, #8
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
	...

08000258 <MC25LC512_WriteEnableOrDisable>:
void MC25LC512_WriteEnableOrDisable(uint8_t EnableOrDisable)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	71fb      	strb	r3, [r7, #7]
	uint8_t SendOneByte = 0;
 8000262:	2300      	movs	r3, #0
 8000264:	72fb      	strb	r3, [r7, #11]
	MC25LC512_CS(EEPROM_CS_PIN_RESET);// Reset The spi Chip //Reset means Enable
 8000266:	2000      	movs	r0, #0
 8000268:	f7ff ffe4 	bl	8000234 <MC25LC512_CS>
	for(uint16_t i = 0; i < 10; i ++);
 800026c:	2300      	movs	r3, #0
 800026e:	81fb      	strh	r3, [r7, #14]
 8000270:	e002      	b.n	8000278 <MC25LC512_WriteEnableOrDisable+0x20>
 8000272:	89fb      	ldrh	r3, [r7, #14]
 8000274:	3301      	adds	r3, #1
 8000276:	81fb      	strh	r3, [r7, #14]
 8000278:	89fb      	ldrh	r3, [r7, #14]
 800027a:	2b09      	cmp	r3, #9
 800027c:	d9f9      	bls.n	8000272 <MC25LC512_WriteEnableOrDisable+0x1a>
	if(EnableOrDisable==EEPROM_Enable)
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	2b01      	cmp	r3, #1
 8000282:	d102      	bne.n	800028a <MC25LC512_WriteEnableOrDisable+0x32>
	{
			SendOneByte = MC25LCxxx_SPI_WREN;
 8000284:	2306      	movs	r3, #6
 8000286:	72fb      	strb	r3, [r7, #11]
 8000288:	e001      	b.n	800028e <MC25LC512_WriteEnableOrDisable+0x36>
	}
	else
	{
			SendOneByte = MC25LCxxx_SPI_WRDI;
 800028a:	2304      	movs	r3, #4
 800028c:	72fb      	strb	r3, [r7, #11]
	}
	HAL_SPI_Transmit(&Spi2Handle , &SendOneByte, 1, 200) ;
 800028e:	f107 010b 	add.w	r1, r7, #11
 8000292:	23c8      	movs	r3, #200	; 0xc8
 8000294:	2201      	movs	r2, #1
 8000296:	4809      	ldr	r0, [pc, #36]	; (80002bc <MC25LC512_WriteEnableOrDisable+0x64>)
 8000298:	f004 fd96 	bl	8004dc8 <HAL_SPI_Transmit>
	for(uint16_t i = 0; i < 10; i ++);
 800029c:	2300      	movs	r3, #0
 800029e:	81bb      	strh	r3, [r7, #12]
 80002a0:	e002      	b.n	80002a8 <MC25LC512_WriteEnableOrDisable+0x50>
 80002a2:	89bb      	ldrh	r3, [r7, #12]
 80002a4:	3301      	adds	r3, #1
 80002a6:	81bb      	strh	r3, [r7, #12]
 80002a8:	89bb      	ldrh	r3, [r7, #12]
 80002aa:	2b09      	cmp	r3, #9
 80002ac:	d9f9      	bls.n	80002a2 <MC25LC512_WriteEnableOrDisable+0x4a>
	MC25LC512_CS(EEPROM_CS_PIN_SET);// Set The spi Chip //Set means Disable
 80002ae:	2001      	movs	r0, #1
 80002b0:	f7ff ffc0 	bl	8000234 <MC25LC512_CS>
}
 80002b4:	bf00      	nop
 80002b6:	3710      	adds	r7, #16
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	20001294 	.word	0x20001294

080002c0 <MC25LC512_Initialize>:
	return RecieveByteOfReleaseDeepPowerMode;

}

void MC25LC512_Initialize(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	MC25LC512_CS(EEPROM_CS_PIN_SET);// Reset The spi Chip //Reset means Enable
 80002c4:	2001      	movs	r0, #1
 80002c6:	f7ff ffb5 	bl	8000234 <MC25LC512_CS>
	MC25LC512_WriteEnableOrDisable(EEPROM_Enable);
 80002ca:	2001      	movs	r0, #1
 80002cc:	f7ff ffc4 	bl	8000258 <MC25LC512_WriteEnableOrDisable>

}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <FaBoLCD_PCF8574>:
	HAL_I2C_Master_Transmit(&I2cHandle, (uint16_t)66, (uint8_t *) initData, 1, 0xffff);
	HAL_Delay(100);
}

void FaBoLCD_PCF8574(uint8_t addr)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b086      	sub	sp, #24
 80002d8:	af02      	add	r7, sp, #8
 80002da:	4603      	mov	r3, r0
 80002dc:	71fb      	strb	r3, [r7, #7]
  _i2caddr = addr;
 80002de:	4a10      	ldr	r2, [pc, #64]	; (8000320 <FaBoLCD_PCF8574+0x4c>)
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	7013      	strb	r3, [r2, #0]
  _backlight = BL;
 80002e4:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <FaBoLCD_PCF8574+0x50>)
 80002e6:	2280      	movs	r2, #128	; 0x80
 80002e8:	701a      	strb	r2, [r3, #0]
  uint8_t initData[1] = {0x80};
 80002ea:	2380      	movs	r3, #128	; 0x80
 80002ec:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit(&I2cHandle, (uint16_t)0x42, (uint8_t *) initData, 1, 0xffff);
 80002ee:	f107 020c 	add.w	r2, r7, #12
 80002f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002f6:	9300      	str	r3, [sp, #0]
 80002f8:	2301      	movs	r3, #1
 80002fa:	2142      	movs	r1, #66	; 0x42
 80002fc:	480a      	ldr	r0, [pc, #40]	; (8000328 <FaBoLCD_PCF8574+0x54>)
 80002fe:	f003 fdbf 	bl	8003e80 <HAL_I2C_Master_Transmit>
  HAL_Delay(100);
 8000302:	2064      	movs	r0, #100	; 0x64
 8000304:	f002 fee4 	bl	80030d0 <HAL_Delay>
  init();
 8000308:	f000 f810 	bl	800032c <init>
  begin(LCD_COLUMN, LCD_LINE, LCD_5x8DOTS);
 800030c:	2200      	movs	r2, #0
 800030e:	2102      	movs	r1, #2
 8000310:	2010      	movs	r0, #16
 8000312:	f000 f817 	bl	8000344 <begin>
}
 8000316:	bf00      	nop
 8000318:	3710      	adds	r7, #16
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	200011e3 	.word	0x200011e3
 8000324:	200011e0 	.word	0x200011e0
 8000328:	20001240 	.word	0x20001240

0800032c <init>:

/**
 @brief init
*/
void init()
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000330:	4b03      	ldr	r3, [pc, #12]	; (8000340 <init+0x14>)
 8000332:	2200      	movs	r2, #0
 8000334:	701a      	strb	r2, [r3, #0]
}
 8000336:	bf00      	nop
 8000338:	46bd      	mov	sp, r7
 800033a:	bc80      	pop	{r7}
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	20001217 	.word	0x20001217

08000344 <begin>:

/**
 @brief brgin
*/
void begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]
 800034e:	460b      	mov	r3, r1
 8000350:	71bb      	strb	r3, [r7, #6]
 8000352:	4613      	mov	r3, r2
 8000354:	717b      	strb	r3, [r7, #5]
  if (lines > 1) {
 8000356:	79bb      	ldrb	r3, [r7, #6]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d906      	bls.n	800036a <begin+0x26>
	_displayfunction |= LCD_2LINE;
 800035c:	4b2b      	ldr	r3, [pc, #172]	; (800040c <begin+0xc8>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	f043 0308 	orr.w	r3, r3, #8
 8000364:	b2da      	uxtb	r2, r3
 8000366:	4b29      	ldr	r3, [pc, #164]	; (800040c <begin+0xc8>)
 8000368:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 800036a:	4a29      	ldr	r2, [pc, #164]	; (8000410 <begin+0xcc>)
 800036c:	79bb      	ldrb	r3, [r7, #6]
 800036e:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8000370:	79fa      	ldrb	r2, [r7, #7]
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	3340      	adds	r3, #64	; 0x40
 8000376:	2140      	movs	r1, #64	; 0x40
 8000378:	2000      	movs	r0, #0
 800037a:	f000 f84f 	bl	800041c <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 800037e:	797b      	ldrb	r3, [r7, #5]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d009      	beq.n	8000398 <begin+0x54>
 8000384:	79bb      	ldrb	r3, [r7, #6]
 8000386:	2b01      	cmp	r3, #1
 8000388:	d106      	bne.n	8000398 <begin+0x54>
	_displayfunction |= LCD_5x10DOTS;
 800038a:	4b20      	ldr	r3, [pc, #128]	; (800040c <begin+0xc8>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	f043 0304 	orr.w	r3, r3, #4
 8000392:	b2da      	uxtb	r2, r3
 8000394:	4b1d      	ldr	r3, [pc, #116]	; (800040c <begin+0xc8>)
 8000396:	701a      	strb	r2, [r3, #0]
  }

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way before 4.5V so we'll wait 50
  HAL_Delay(50);
 8000398:	2032      	movs	r0, #50	; 0x32
 800039a:	f002 fe99 	bl	80030d0 <HAL_Delay>
  // Now we pull both RS and R/W low to begin commands
  writeI2c(0x00);
 800039e:	2000      	movs	r0, #0
 80003a0:	f000 f922 	bl	80005e8 <writeI2c>

  // this is according to the hitachi HD44780 datasheet
  // figure 24, pg 46

  // we start in 8bit mode, try to set 4 bit mode
  write4bits(DB4|DB5);
 80003a4:	2003      	movs	r0, #3
 80003a6:	f000 f90e 	bl	80005c6 <write4bits>
  HAL_Delay(5); // wait min 4.1ms
 80003aa:	2005      	movs	r0, #5
 80003ac:	f002 fe90 	bl	80030d0 <HAL_Delay>

  // second try
  write4bits(DB4|DB5);
 80003b0:	2003      	movs	r0, #3
 80003b2:	f000 f908 	bl	80005c6 <write4bits>
  HAL_Delay(5); // wait min 4.1ms
 80003b6:	2005      	movs	r0, #5
 80003b8:	f002 fe8a 	bl	80030d0 <HAL_Delay>

  // third go!
  write4bits(DB4|DB5);
 80003bc:	2003      	movs	r0, #3
 80003be:	f000 f902 	bl	80005c6 <write4bits>
  HAL_Delay(2);
 80003c2:	2002      	movs	r0, #2
 80003c4:	f002 fe84 	bl	80030d0 <HAL_Delay>

  // finally, set to 4-bit interface
  write4bits(DB5);
 80003c8:	2002      	movs	r0, #2
 80003ca:	f000 f8fc 	bl	80005c6 <write4bits>

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 80003ce:	4b0f      	ldr	r3, [pc, #60]	; (800040c <begin+0xc8>)
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	f043 0320 	orr.w	r3, r3, #32
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	4618      	mov	r0, r3
 80003da:	f000 f88f 	bl	80004fc <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80003de:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <begin+0xd0>)
 80003e0:	2204      	movs	r2, #4
 80003e2:	701a      	strb	r2, [r3, #0]
  display();
 80003e4:	f000 f874 	bl	80004d0 <display>

  // clear it off
  clear();
 80003e8:	f000 f836 	bl	8000458 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80003ec:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <begin+0xd4>)
 80003ee:	2202      	movs	r2, #2
 80003f0:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 80003f2:	4b09      	ldr	r3, [pc, #36]	; (8000418 <begin+0xd4>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	f043 0304 	orr.w	r3, r3, #4
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	4618      	mov	r0, r3
 80003fe:	f000 f87d 	bl	80004fc <command>

}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20001217 	.word	0x20001217
 8000410:	200011e2 	.word	0x200011e2
 8000414:	200011e1 	.word	0x200011e1
 8000418:	20001216 	.word	0x20001216

0800041c <setRowOffsets>:

/**
 @brief setRowOffsets
*/
void setRowOffsets(int row0, int row1, int row2, int row3)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
 8000428:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	b2da      	uxtb	r2, r3
 800042e:	4b09      	ldr	r3, [pc, #36]	; (8000454 <setRowOffsets+0x38>)
 8000430:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8000432:	68bb      	ldr	r3, [r7, #8]
 8000434:	b2da      	uxtb	r2, r3
 8000436:	4b07      	ldr	r3, [pc, #28]	; (8000454 <setRowOffsets+0x38>)
 8000438:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	b2da      	uxtb	r2, r3
 800043e:	4b05      	ldr	r3, [pc, #20]	; (8000454 <setRowOffsets+0x38>)
 8000440:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	b2da      	uxtb	r2, r3
 8000446:	4b03      	ldr	r3, [pc, #12]	; (8000454 <setRowOffsets+0x38>)
 8000448:	70da      	strb	r2, [r3, #3]
}
 800044a:	bf00      	nop
 800044c:	3714      	adds	r7, #20
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr
 8000454:	200011dc 	.word	0x200011dc

08000458 <clear>:

/**
 @brief clear
*/
void clear()
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800045c:	2001      	movs	r0, #1
 800045e:	f000 f84d 	bl	80004fc <command>
  HAL_Delay(2);  // this command takes a long time!
 8000462:	2002      	movs	r0, #2
 8000464:	f002 fe34 	bl	80030d0 <HAL_Delay>
}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}

0800046c <setCursor>:

/**
 @brief setCursor
*/
void setCursor(uint8_t col, uint8_t row)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	460a      	mov	r2, r1
 8000476:	71fb      	strb	r3, [r7, #7]
 8000478:	4613      	mov	r3, r2
 800047a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800047c:	2304      	movs	r3, #4
 800047e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000480:	79bb      	ldrb	r3, [r7, #6]
 8000482:	68fa      	ldr	r2, [r7, #12]
 8000484:	429a      	cmp	r2, r3
 8000486:	d803      	bhi.n	8000490 <setCursor+0x24>
	row = max_lines - 1;    // we count rows starting w/0
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	b2db      	uxtb	r3, r3
 800048c:	3b01      	subs	r3, #1
 800048e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000490:	4b0d      	ldr	r3, [pc, #52]	; (80004c8 <setCursor+0x5c>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	79ba      	ldrb	r2, [r7, #6]
 8000496:	429a      	cmp	r2, r3
 8000498:	d303      	bcc.n	80004a2 <setCursor+0x36>
	row = _numlines - 1;    // we count rows starting w/0
 800049a:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <setCursor+0x5c>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	3b01      	subs	r3, #1
 80004a0:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 80004a2:	79bb      	ldrb	r3, [r7, #6]
 80004a4:	4a09      	ldr	r2, [pc, #36]	; (80004cc <setCursor+0x60>)
 80004a6:	5cd2      	ldrb	r2, [r2, r3]
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	4413      	add	r3, r2
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	b25b      	sxtb	r3, r3
 80004b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004b4:	b25b      	sxtb	r3, r3
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	4618      	mov	r0, r3
 80004ba:	f000 f81f 	bl	80004fc <command>
}
 80004be:	bf00      	nop
 80004c0:	3710      	adds	r7, #16
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	200011e2 	.word	0x200011e2
 80004cc:	200011dc 	.word	0x200011dc

080004d0 <display>:
}

/**
 @brief Turn the display on (quickly)
*/
void display() {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <display+0x28>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	f043 0304 	orr.w	r3, r3, #4
 80004dc:	b2da      	uxtb	r2, r3
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <display+0x28>)
 80004e0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80004e2:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <display+0x28>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	f043 0308 	orr.w	r3, r3, #8
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 f805 	bl	80004fc <command>
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	200011e1 	.word	0x200011e1

080004fc <command>:
/*********** mid level commands, for sending data/cmds */

/**
 @brief command
*/
inline void command(uint8_t value) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
  send(value, 0);
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f000 f813 	bl	8000536 <send>
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <write>:

/**
 @brief write
*/
inline uint8_t write(uint8_t value) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
  send(value, RS);
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	2140      	movs	r1, #64	; 0x40
 8000526:	4618      	mov	r0, r3
 8000528:	f000 f805 	bl	8000536 <send>
  return 1; // assume sucess
 800052c:	2301      	movs	r3, #1
}
 800052e:	4618      	mov	r0, r3
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <send>:
/************ low level data pushing commands **********/

/**
 @brief write either command or data, 4-bit
*/
void send(uint8_t value, uint8_t mode) {
 8000536:	b580      	push	{r7, lr}
 8000538:	b084      	sub	sp, #16
 800053a:	af00      	add	r7, sp, #0
 800053c:	4603      	mov	r3, r0
 800053e:	460a      	mov	r2, r1
 8000540:	71fb      	strb	r3, [r7, #7]
 8000542:	4613      	mov	r3, r2
 8000544:	71bb      	strb	r3, [r7, #6]
  uint8_t Hbit = (value >> 4) & 0x0F;
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	091b      	lsrs	r3, r3, #4
 800054a:	73fb      	strb	r3, [r7, #15]
  uint8_t Lbit = value & 0x0F;
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	f003 030f 	and.w	r3, r3, #15
 8000552:	73bb      	strb	r3, [r7, #14]
  write4bits(Hbit|mode);
 8000554:	7bfa      	ldrb	r2, [r7, #15]
 8000556:	79bb      	ldrb	r3, [r7, #6]
 8000558:	4313      	orrs	r3, r2
 800055a:	b2db      	uxtb	r3, r3
 800055c:	4618      	mov	r0, r3
 800055e:	f000 f832 	bl	80005c6 <write4bits>
  write4bits(Lbit|mode);
 8000562:	7bba      	ldrb	r2, [r7, #14]
 8000564:	79bb      	ldrb	r3, [r7, #6]
 8000566:	4313      	orrs	r3, r2
 8000568:	b2db      	uxtb	r3, r3
 800056a:	4618      	mov	r0, r3
 800056c:	f000 f82b 	bl	80005c6 <write4bits>
}
 8000570:	bf00      	nop
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <pulseEnable>:

/**
 @brief pulseEnable
*/
void pulseEnable(uint8_t value) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
  writeI2c(value & ~EN); // EN LOW
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	f023 0310 	bic.w	r3, r3, #16
 8000588:	b2db      	uxtb	r3, r3
 800058a:	4618      	mov	r0, r3
 800058c:	f000 f82c 	bl	80005e8 <writeI2c>
  HAL_Delay(1);
 8000590:	2001      	movs	r0, #1
 8000592:	f002 fd9d 	bl	80030d0 <HAL_Delay>
  writeI2c(value|EN);    // EN HIGH
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	f043 0310 	orr.w	r3, r3, #16
 800059c:	b2db      	uxtb	r3, r3
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 f822 	bl	80005e8 <writeI2c>
  HAL_Delay(1);  // enable pulse must be >450ns
 80005a4:	2001      	movs	r0, #1
 80005a6:	f002 fd93 	bl	80030d0 <HAL_Delay>
  writeI2c(value & ~EN); // EN LOW
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	f023 0310 	bic.w	r3, r3, #16
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 f818 	bl	80005e8 <writeI2c>
  HAL_Delay(1); // commands need > 37us to settle
 80005b8:	2001      	movs	r0, #1
 80005ba:	f002 fd89 	bl	80030d0 <HAL_Delay>
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <write4bits>:

/**
 @brief write4bits
*/
void write4bits(uint8_t value) {
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b082      	sub	sp, #8
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	4603      	mov	r3, r0
 80005ce:	71fb      	strb	r3, [r7, #7]
  writeI2c(value);
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f808 	bl	80005e8 <writeI2c>
  pulseEnable(value);
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff ffcc 	bl	8000578 <pulseEnable>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <writeI2c>:

/**
 @brief writeI2c
*/
void writeI2c(uint8_t data) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af02      	add	r7, sp, #8
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
  uint8_t data_t[1];
  data_t[0] = data|_backlight;
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <writeI2c+0x38>)
 80005f4:	781a      	ldrb	r2, [r3, #0]
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	4313      	orrs	r3, r2
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit (&I2cHandle, (uint16_t)_i2caddr,(uint8_t *) data_t, 1, 0xFFFF);
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <writeI2c+0x3c>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	b299      	uxth	r1, r3
 8000604:	f107 020c 	add.w	r2, r7, #12
 8000608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2301      	movs	r3, #1
 8000610:	4805      	ldr	r0, [pc, #20]	; (8000628 <writeI2c+0x40>)
 8000612:	f003 fc35 	bl	8003e80 <HAL_I2C_Master_Transmit>
}
 8000616:	bf00      	nop
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	200011e0 	.word	0x200011e0
 8000624:	200011e3 	.word	0x200011e3
 8000628:	20001240 	.word	0x20001240

0800062c <Lcd_Initialization>:
  * @brief 	Initialize LCD function.
  * @param 	None
  * @retval None
  */
void Lcd_Initialization (void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	FaBoLCD_PCF8574(SLAVE_ADDRESS_LCD);
 8000630:	2042      	movs	r0, #66	; 0x42
 8000632:	f7ff fe4f 	bl	80002d4 <FaBoLCD_PCF8574>
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}

0800063a <Lcd_Send_Cmd>:

/**
  * @brief 	Send command to lcd.
  */
void Lcd_Send_Cmd (char cmd)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	b082      	sub	sp, #8
 800063e:	af00      	add	r7, sp, #0
 8000640:	4603      	mov	r3, r0
 8000642:	71fb      	strb	r3, [r7, #7]
	command(cmd);
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff ff58 	bl	80004fc <command>
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <Lcd_Send_Data>:
  * @brief 	Write received characters on lcd at the current cursor position.
  * @param 	data: character to write
  * @retval None
  */
void Lcd_Send_Data (char data)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
	write(data);
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ff59 	bl	8000518 <write>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <Lcd_Send_String>:
  * @brief 	Give the string to write on lcd.
  * @param 	str: pointer string of characters
  * @retval None
  */
void Lcd_Send_String (char *str)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	b082      	sub	sp, #8
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
	while (*str) Lcd_Send_Data (*str++);
 8000676:	e006      	b.n	8000686 <Lcd_Send_String+0x18>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	1c5a      	adds	r2, r3, #1
 800067c:	607a      	str	r2, [r7, #4]
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ffe7 	bl	8000654 <Lcd_Send_Data>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1f4      	bne.n	8000678 <Lcd_Send_String+0xa>
}
 800068e:	bf00      	nop
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <Lcd_Clear_Display>:
  * @brief 	Clear the lcd screen
  * @param 	None
  * @retval None
  */
void Lcd_Clear_Display (void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	Lcd_Send_Cmd (0x01); //clear display
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff ffcc 	bl	800063a <Lcd_Send_Cmd>
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <Lcd_Goto_XY>:
  * @param 	row: index on row, from 0 to 15
  * @param  col: index on column, from 0 to 1
  * @retval None
  */
void Lcd_Goto_XY (int row, int col)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
 80006ae:	6039      	str	r1, [r7, #0]
	setCursor(col, row);
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	b2d2      	uxtb	r2, r2
 80006b8:	4611      	mov	r1, r2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fed6 	bl	800046c <setCursor>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <Lcd_Show_String>:
  * @brief 	Print the string on LCD, from the coordinates (row, col).
  * @param 	row: index on row to start
  * @param  col: index on column to start
  * @retval None
  */
void Lcd_Show_String(char *str, int row, int col){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
	Lcd_Goto_XY(row, col);
 80006d4:	6879      	ldr	r1, [r7, #4]
 80006d6:	68b8      	ldr	r0, [r7, #8]
 80006d8:	f7ff ffe5 	bl	80006a6 <Lcd_Goto_XY>
//	Lcd_Send_String("                ");	// clear the row
	Lcd_Send_String(str);
 80006dc:	68f8      	ldr	r0, [r7, #12]
 80006de:	f7ff ffc6 	bl	800066e <Lcd_Send_String>
}
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <is_Sim7600_TimeOutFlag>:
 * is_Sim7600_TimeOutFlag()
 * @param None.
 * @retval Flagstatus: SET or RESET
 * @brief This function return sim7600_timeout_flag.
 */
FlagStatus is_Sim7600_TimeOutFlag(){
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
	return sim7600_timeout_flag;
 80006f0:	4b02      	ldr	r3, [pc, #8]	; (80006fc <is_Sim7600_TimeOutFlag+0x10>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	20000185 	.word	0x20000185

08000700 <Set_Sim7600_Timeout_Flag>:
 * Set_Sim7600_Timeout_Flag()
 * @param None.
 * @retval None
 * @brief This function set sim7600_timeout_flag to SET.
 */
void Set_Sim7600_Timeout_Flag(void){
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
	sim7600_timeout_flag = SET;
 8000704:	4b03      	ldr	r3, [pc, #12]	; (8000714 <Set_Sim7600_Timeout_Flag+0x14>)
 8000706:	2201      	movs	r2, #1
 8000708:	701a      	strb	r2, [r3, #0]
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	20000185 	.word	0x20000185

08000718 <Clear_Sim7600_Timeout_Flag>:
 * Clear_Sim7600_Timeout_Flag()
 * @param None.
 * @retval None
 * @brief This function set sim7600_timeout_flag to RESET.
 */
void Clear_Sim7600_Timeout_Flag(void){
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
	sim7600_timeout_flag = RESET;
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <Clear_Sim7600_Timeout_Flag+0x14>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	20000185 	.word	0x20000185

08000730 <Sim7600_State_Display>:

/**
 * Sim7600_State_Display()
 * @brief This is function for display state of State Machine. It only show State when having a state changation.
 */
void Sim7600_State_Display(void){
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	if(sim7600_state!=prev_sim7600_state){
 8000734:	4b2a      	ldr	r3, [pc, #168]	; (80007e0 <Sim7600_State_Display+0xb0>)
 8000736:	781a      	ldrb	r2, [r3, #0]
 8000738:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <Sim7600_State_Display+0xb4>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	429a      	cmp	r2, r3
 800073e:	d049      	beq.n	80007d4 <Sim7600_State_Display+0xa4>
		switch(sim7600_state){
 8000740:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <Sim7600_State_Display+0xb0>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b0a      	cmp	r3, #10
 8000746:	d847      	bhi.n	80007d8 <Sim7600_State_Display+0xa8>
 8000748:	a201      	add	r2, pc, #4	; (adr r2, 8000750 <Sim7600_State_Display+0x20>)
 800074a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800074e:	bf00      	nop
 8000750:	0800077d 	.word	0x0800077d
 8000754:	08000785 	.word	0x08000785
 8000758:	0800078d 	.word	0x0800078d
 800075c:	08000795 	.word	0x08000795
 8000760:	0800079d 	.word	0x0800079d
 8000764:	080007a5 	.word	0x080007a5
 8000768:	080007ad 	.word	0x080007ad
 800076c:	080007b5 	.word	0x080007b5
 8000770:	080007bd 	.word	0x080007bd
 8000774:	080007c5 	.word	0x080007c5
 8000778:	080007cd 	.word	0x080007cd
		case SIM7600_POWER_ON:
			LOG("\r\nSIM7600 POWER ON\r\n");
 800077c:	481a      	ldr	r0, [pc, #104]	; (80007e8 <Sim7600_State_Display+0xb8>)
 800077e:	f000 fc3d 	bl	8000ffc <UART_DEBUG_Transmit>
			break;
 8000782:	e02a      	b.n	80007da <Sim7600_State_Display+0xaa>
		case SIM7600_WAIT_FOR_POWER_ON_RESPONE:
			LOG((uint8_t*)"\r\nSIM7600 WAIT FOR POWER ON RESPONE\r\n");
 8000784:	4819      	ldr	r0, [pc, #100]	; (80007ec <Sim7600_State_Display+0xbc>)
 8000786:	f000 fc39 	bl	8000ffc <UART_DEBUG_Transmit>
			break;
 800078a:	e026      	b.n	80007da <Sim7600_State_Display+0xaa>
		case SIM7600_RESET:
			LOG((uint8_t*)"\r\nSIM7600 RESET\r\n");
 800078c:	4818      	ldr	r0, [pc, #96]	; (80007f0 <Sim7600_State_Display+0xc0>)
 800078e:	f000 fc35 	bl	8000ffc <UART_DEBUG_Transmit>
			break;
 8000792:	e022      	b.n	80007da <Sim7600_State_Display+0xaa>
		case SIM7600_WAIT_FOR_RESET_RESPONE:
			LOG((uint8_t*)"\r\nSIM7600 WAIT FOR RESET RESPONE\r\n");
 8000794:	4817      	ldr	r0, [pc, #92]	; (80007f4 <Sim7600_State_Display+0xc4>)
 8000796:	f000 fc31 	bl	8000ffc <UART_DEBUG_Transmit>
			break;
 800079a:	e01e      	b.n	80007da <Sim7600_State_Display+0xaa>
		case SIM7600_START_UP:
			LOG((uint8_t*)"\r\nSIM7600 START UP\r\n");
 800079c:	4816      	ldr	r0, [pc, #88]	; (80007f8 <Sim7600_State_Display+0xc8>)
 800079e:	f000 fc2d 	bl	8000ffc <UART_DEBUG_Transmit>
			break;
 80007a2:	e01a      	b.n	80007da <Sim7600_State_Display+0xaa>
		case SIM7600_WAIT_FOR_START_UP_RESPONE:
			LOG((uint8_t*)"\r\nSIM7600 WAIT FOR START UP RESPONE\r\n");
 80007a4:	4815      	ldr	r0, [pc, #84]	; (80007fc <Sim7600_State_Display+0xcc>)
 80007a6:	f000 fc29 	bl	8000ffc <UART_DEBUG_Transmit>
			break;
 80007aa:	e016      	b.n	80007da <Sim7600_State_Display+0xaa>
		case SIM7600_SETTING:
			LOG((uint8_t*)"\r\nSIM7600 SETTING\r\n");
 80007ac:	4814      	ldr	r0, [pc, #80]	; (8000800 <Sim7600_State_Display+0xd0>)
 80007ae:	f000 fc25 	bl	8000ffc <UART_DEBUG_Transmit>
			break;
 80007b2:	e012      	b.n	80007da <Sim7600_State_Display+0xaa>
		case SIM7600_WAIT_FOR_SETTING_RESPONE:
			LOG((uint8_t*)"\r\nSIM7600 WAIT FOR SETTING RESPONE\r\n");
 80007b4:	4813      	ldr	r0, [pc, #76]	; (8000804 <Sim7600_State_Display+0xd4>)
 80007b6:	f000 fc21 	bl	8000ffc <UART_DEBUG_Transmit>
			break;
 80007ba:	e00e      	b.n	80007da <Sim7600_State_Display+0xaa>
		case SIM7600_GET_IMEI:
			LOG((uint8_t*)"\r\nSIM7600 GET IMEI\r\n");
 80007bc:	4812      	ldr	r0, [pc, #72]	; (8000808 <Sim7600_State_Display+0xd8>)
 80007be:	f000 fc1d 	bl	8000ffc <UART_DEBUG_Transmit>
			break;
 80007c2:	e00a      	b.n	80007da <Sim7600_State_Display+0xaa>
		case SIM7600_WAIT_FOR_GET_IMEI_RESPONE:
			LOG((uint8_t*)"\r\nSIM7600 WAIT FOR GET IMEI RESPONE\r\n");
 80007c4:	4811      	ldr	r0, [pc, #68]	; (800080c <Sim7600_State_Display+0xdc>)
 80007c6:	f000 fc19 	bl	8000ffc <UART_DEBUG_Transmit>
			break;
 80007ca:	e006      	b.n	80007da <Sim7600_State_Display+0xaa>
		case SIM7600_MAX_STATE:
			LOG((uint8_t*)"\r\nSIM7600 MAX STATE\r\n");
 80007cc:	4810      	ldr	r0, [pc, #64]	; (8000810 <Sim7600_State_Display+0xe0>)
 80007ce:	f000 fc15 	bl	8000ffc <UART_DEBUG_Transmit>
			break;
 80007d2:	e002      	b.n	80007da <Sim7600_State_Display+0xaa>
		default:
			break;
		}
	}
 80007d4:	bf00      	nop
 80007d6:	e000      	b.n	80007da <Sim7600_State_Display+0xaa>
			break;
 80007d8:	bf00      	nop
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000000 	.word	0x20000000
 80007e4:	2000122e 	.word	0x2000122e
 80007e8:	08006ad8 	.word	0x08006ad8
 80007ec:	08006af0 	.word	0x08006af0
 80007f0:	08006b18 	.word	0x08006b18
 80007f4:	08006b2c 	.word	0x08006b2c
 80007f8:	08006b50 	.word	0x08006b50
 80007fc:	08006b68 	.word	0x08006b68
 8000800:	08006b90 	.word	0x08006b90
 8000804:	08006ba4 	.word	0x08006ba4
 8000808:	08006bcc 	.word	0x08006bcc
 800080c:	08006be4 	.word	0x08006be4
 8000810:	08006c0c 	.word	0x08006c0c

08000814 <Sim7600_Run>:
 * Sim7600_Run()
 * @param None
 * @retval 0 if state < SIM7600_MAX_STATE else return 1
 * @brief This is function can be called from external file. It run follow state machine method. Not have param.
 */
uint8_t Sim7600_Run(void){
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	Sim7600_State_Display();
 8000818:	f7ff ff8a 	bl	8000730 <Sim7600_State_Display>
	prev_sim7600_state = sim7600_state;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <Sim7600_Run+0x30>)
 800081e:	781a      	ldrb	r2, [r3, #0]
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <Sim7600_Run+0x34>)
 8000822:	701a      	strb	r2, [r3, #0]
	if(sim7600_state < SIM7600_MAX_STATE){
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <Sim7600_Run+0x30>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b09      	cmp	r3, #9
 800082a:	d808      	bhi.n	800083e <Sim7600_Run+0x2a>
		(*Sim7600_State_Machine[sim7600_state].func)();
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <Sim7600_Run+0x30>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4a06      	ldr	r2, [pc, #24]	; (800084c <Sim7600_Run+0x38>)
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	4413      	add	r3, r2
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	4798      	blx	r3
		return 0;
 800083a:	2300      	movs	r3, #0
 800083c:	e000      	b.n	8000840 <Sim7600_Run+0x2c>
	} else {
		return 1;
 800083e:	2301      	movs	r3, #1
	}
}
 8000840:	4618      	mov	r0, r3
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000000 	.word	0x20000000
 8000848:	2000122e 	.word	0x2000122e
 800084c:	20000028 	.word	0x20000028

08000850 <Power_Signal_Low>:
 * Power_Signal_Low()
 * @param None
 * @retval None
 * @brief This is function set Power Signal to RESET
 */
void Power_Signal_Low(void){
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIM7600_4G_PWRON_PORT, SIM7600_4G_PWRON, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 7180 	mov.w	r1, #256	; 0x100
 800085a:	4802      	ldr	r0, [pc, #8]	; (8000864 <Power_Signal_Low+0x14>)
 800085c:	f003 f9b4 	bl	8003bc8 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(SIM7600_4G_PWRON_PORT, SIM7600_4G_PWRON, GPIO_PIN_SET);
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40011000 	.word	0x40011000

08000868 <Power_Signal_High>:
 * Power_Signal_High()
 * @param None
 * @retval None
 * @brief This is function set Power Signal to SET
 */
void Power_Signal_High(void){
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIM7600_4G_PWRON_PORT, SIM7600_4G_PWRON, GPIO_PIN_SET);
 800086c:	2201      	movs	r2, #1
 800086e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000872:	4802      	ldr	r0, [pc, #8]	; (800087c <Power_Signal_High+0x14>)
 8000874:	f003 f9a8 	bl	8003bc8 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(SIM7600_4G_PWRON_PORT, SIM7600_4G_PWRON, GPIO_PIN_RESET);
}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40011000 	.word	0x40011000

08000880 <Reset_Signal_Low>:
 * Reset_Signal_Low()
 * @param None
 * @retval None
 * @brief This is function set Reset Signal to RESET
 */
void Reset_Signal_Low(void){
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIM7600_4G_PERST_PORT, SIM7600_4G_PERST, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 7100 	mov.w	r1, #512	; 0x200
 800088a:	4802      	ldr	r0, [pc, #8]	; (8000894 <Reset_Signal_Low+0x14>)
 800088c:	f003 f99c 	bl	8003bc8 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(SIM7600_4G_PERST_PORT, SIM7600_4G_PERST, GPIO_PIN_SET);
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40011000 	.word	0x40011000

08000898 <Reset_Signal_High>:
 * Reset_Signal_High()
 * @param None
 * @retval None
 * @brief This is function set Reset Signal to SET
 */
void Reset_Signal_High(void){
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIM7600_4G_PERST_PORT, SIM7600_4G_PERST, GPIO_PIN_SET);
 800089c:	2201      	movs	r2, #1
 800089e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008a2:	4802      	ldr	r0, [pc, #8]	; (80008ac <Reset_Signal_High+0x14>)
 80008a4:	f003 f990 	bl	8003bc8 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(SIM7600_4G_PERST_PORT, SIM7600_4G_PERST, GPIO_PIN_RESET);

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40011000 	.word	0x40011000

080008b0 <Sim7600_Power_On>:
 * Sim7600_Power_On()
 * @param None
 * @retval None
 * @brief This is function for control POWER_ON signal in Simcom7600 module
 */
void Sim7600_Power_On(void){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	SCH_Add_Task(Power_Signal_Low, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	4809      	ldr	r0, [pc, #36]	; (80008e0 <Sim7600_Power_On+0x30>)
 80008ba:	f001 fd87 	bl	80023cc <SCH_Add_Task>
	SCH_Add_Task(Power_Signal_High, TIMER_TO_POWER_ON_SIM7600, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	21c8      	movs	r1, #200	; 0xc8
 80008c2:	4808      	ldr	r0, [pc, #32]	; (80008e4 <Sim7600_Power_On+0x34>)
 80008c4:	f001 fd82 	bl	80023cc <SCH_Add_Task>
	Clear_Sim7600_Timeout_Flag();
 80008c8:	f7ff ff26 	bl	8000718 <Clear_Sim7600_Timeout_Flag>
	SCH_Add_Task(Set_Sim7600_Timeout_Flag, TIMER_TO_POWER_ON_SIM7600_TIMEOUT, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	21c8      	movs	r1, #200	; 0xc8
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <Sim7600_Power_On+0x38>)
 80008d2:	f001 fd7b 	bl	80023cc <SCH_Add_Task>
	sim7600_state = SIM7600_WAIT_FOR_POWER_ON_RESPONE;
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <Sim7600_Power_On+0x3c>)
 80008d8:	2201      	movs	r2, #1
 80008da:	701a      	strb	r2, [r3, #0]
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	08000851 	.word	0x08000851
 80008e4:	08000869 	.word	0x08000869
 80008e8:	08000701 	.word	0x08000701
 80008ec:	20000000 	.word	0x20000000

080008f0 <Sim7600_Wait_For_Power_On_Respone>:
 * Sim7600_Wait_For_Power_On_Respone()
 * @param None
 * @retval None
 * @brief This is function for waiting POWER_ON State respone, after timeout TIMER_TO_POWER_ON_SIM7600_TIMEOUT
 */
void Sim7600_Wait_For_Power_On_Respone(void){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	if(is_Sim7600_TimeOutFlag()){
 80008f4:	f7ff fefa 	bl	80006ec <is_Sim7600_TimeOutFlag>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d002      	beq.n	8000904 <Sim7600_Wait_For_Power_On_Respone+0x14>
		sim7600_state = SIM7600_START_UP;
 80008fe:	4b02      	ldr	r3, [pc, #8]	; (8000908 <Sim7600_Wait_For_Power_On_Respone+0x18>)
 8000900:	2204      	movs	r2, #4
 8000902:	701a      	strb	r2, [r3, #0]
	}
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000000 	.word	0x20000000

0800090c <Sim7600_Reset>:
 * @param None
 * @retval None
 * @brief This is function for control RESET signal in Simcom7600 module
 * @brief Keep RESET signal LOW during TIMER_TO_RESET_SIM7600
 */
void Sim7600_Reset(void){
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	SCH_Add_Task(Reset_Signal_High, 0, 0);
 8000910:	2200      	movs	r2, #0
 8000912:	2100      	movs	r1, #0
 8000914:	480a      	ldr	r0, [pc, #40]	; (8000940 <Sim7600_Reset+0x34>)
 8000916:	f001 fd59 	bl	80023cc <SCH_Add_Task>
	SCH_Add_Task(Reset_Signal_Low, TIMER_TO_RESET_SIM7600, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	21c8      	movs	r1, #200	; 0xc8
 800091e:	4809      	ldr	r0, [pc, #36]	; (8000944 <Sim7600_Reset+0x38>)
 8000920:	f001 fd54 	bl	80023cc <SCH_Add_Task>
	Clear_Sim7600_Timeout_Flag();
 8000924:	f7ff fef8 	bl	8000718 <Clear_Sim7600_Timeout_Flag>
	SCH_Add_Task(Set_Sim7600_Timeout_Flag, TIMER_TO_RESET_SIM7600_TIMEOUT, 0);
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800092e:	4806      	ldr	r0, [pc, #24]	; (8000948 <Sim7600_Reset+0x3c>)
 8000930:	f001 fd4c 	bl	80023cc <SCH_Add_Task>
	sim7600_state = SIM7600_WAIT_FOR_RESET_RESPONE;
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <Sim7600_Reset+0x40>)
 8000936:	2203      	movs	r2, #3
 8000938:	701a      	strb	r2, [r3, #0]
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	08000899 	.word	0x08000899
 8000944:	08000881 	.word	0x08000881
 8000948:	08000701 	.word	0x08000701
 800094c:	20000000 	.word	0x20000000

08000950 <Sim7600_Wait_For_Reset_Respone>:
 * Sim7600_Wait_For_Reset_Respone()
 * @param None
 * @retval None
 * @brief This is function for waiting simcom7600_timeout_flag is SET
 */
void Sim7600_Wait_For_Reset_Respone(void){
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	if(is_Sim7600_TimeOutFlag()){
 8000954:	f7ff feca 	bl	80006ec <is_Sim7600_TimeOutFlag>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d002      	beq.n	8000964 <Sim7600_Wait_For_Reset_Respone+0x14>
		sim7600_state = SIM7600_POWER_ON;
 800095e:	4b02      	ldr	r3, [pc, #8]	; (8000968 <Sim7600_Wait_For_Reset_Respone+0x18>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
	}
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000000 	.word	0x20000000

0800096c <Sim7600_Start_Up>:
 * Sim7600_Start_Up()
 * @param None
 * @retval None
 * @brief This is function for start up Simcom7600 module. Timeout is TIMEOUT_STARTUP_RESET.
 */
void Sim7600_Start_Up(void){
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	sim7600_state = SIM7600_WAIT_FOR_START_UP_RESPONE;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <Sim7600_Start_Up+0x20>)
 8000972:	2205      	movs	r2, #5
 8000974:	701a      	strb	r2, [r3, #0]
	Clear_Sim7600_Timeout_Flag();
 8000976:	f7ff fecf 	bl	8000718 <Clear_Sim7600_Timeout_Flag>
	SCH_Add_Task(Set_Sim7600_Timeout_Flag, TIMEOUT_STARTUP_RESET, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000980:	4803      	ldr	r0, [pc, #12]	; (8000990 <Sim7600_Start_Up+0x24>)
 8000982:	f001 fd23 	bl	80023cc <SCH_Add_Task>
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000000 	.word	0x20000000
 8000990:	08000701 	.word	0x08000701

08000994 <Sim7600_Wait_For_Start_Up_Respone>:
 * @param None
 * @retval None
 * @brief This is function for waiting start up respond.
 * @brief If Timeout so Reset Simcom7600 else AT_Result = AT_PB_DONE switch to SIM7600_GET_IMEI
 */
void Sim7600_Wait_For_Start_Up_Respone(void){
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	// Time out if too long time cannot receive PB_DONE
	if(is_Sim7600_TimeOutFlag()){
 8000998:	f7ff fea8 	bl	80006ec <is_Sim7600_TimeOutFlag>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d002      	beq.n	80009a8 <Sim7600_Wait_For_Start_Up_Respone+0x14>
		sim7600_state = SIM7600_RESET;
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <Sim7600_Wait_For_Start_Up_Respone+0x38>)
 80009a4:	2202      	movs	r2, #2
 80009a6:	701a      	strb	r2, [r3, #0]
	}
//	Wait_For_Respone(AT_PB_DONE);
	switch (Get_AT_Result()){
 80009a8:	f001 fcba 	bl	8002320 <Get_AT_Result>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b03      	cmp	r3, #3
 80009b0:	d107      	bne.n	80009c2 <Sim7600_Wait_For_Start_Up_Respone+0x2e>
		case AT_PB_DONE:
			Clear_AT_Result();
 80009b2:	f001 fcbf 	bl	8002334 <Clear_AT_Result>
			Set_Sim7600_Timeout_Flag();
 80009b6:	f7ff fea3 	bl	8000700 <Set_Sim7600_Timeout_Flag>
			sim7600_state = SIM7600_SETTING;//SIM7600_GET_IMEI;
 80009ba:	4b04      	ldr	r3, [pc, #16]	; (80009cc <Sim7600_Wait_For_Start_Up_Respone+0x38>)
 80009bc:	2206      	movs	r2, #6
 80009be:	701a      	strb	r2, [r3, #0]
			break;
 80009c0:	e002      	b.n	80009c8 <Sim7600_Wait_For_Start_Up_Respone+0x34>
		default:
			Clear_AT_Result();
 80009c2:	f001 fcb7 	bl	8002334 <Clear_AT_Result>
			break;
 80009c6:	bf00      	nop
	}
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000000 	.word	0x20000000

080009d0 <Sim7600_Setting>:
 * Sim7600_Get_Imei()
 * @param None
 * @retval None
 * @brief This is function for Get IMEI from Simcomo7600 to set LockerID.
 */
void Sim7600_Setting(void){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	// Clear_Reiceive_Buffer();
	UART_SIM7600_Transmit(setting_command[setting_index]);
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <Sim7600_Setting+0x20>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <Sim7600_Setting+0x24>)
 80009dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 fa71 	bl	8000ec8 <UART_SIM7600_Transmit>
	sim7600_state = SIM7600_WAIT_FOR_SETTING_RESPONE;
 80009e6:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <Sim7600_Setting+0x28>)
 80009e8:	2207      	movs	r2, #7
 80009ea:	701a      	strb	r2, [r3, #0]
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000186 	.word	0x20000186
 80009f4:	20000004 	.word	0x20000004
 80009f8:	20000000 	.word	0x20000000

080009fc <Sim7600_Wait_For_Setting_Respone>:
 * Sim7600_Wait_For_Get_Imei_Respone()
 * @param None
 * @retval None
 * @brief This is function for waiting respone from GET IMEI State.
 */
void Sim7600_Wait_For_Setting_Respone(void){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	if(is_Sim7600_TimeOutFlag()){
 8000a00:	f7ff fe74 	bl	80006ec <is_Sim7600_TimeOutFlag>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d030      	beq.n	8000a6c <Sim7600_Wait_For_Setting_Respone+0x70>
		switch (Get_AT_Result()){
 8000a0a:	f001 fc89 	bl	8002320 <Get_AT_Result>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d002      	beq.n	8000a1a <Sim7600_Wait_For_Setting_Respone+0x1e>
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d023      	beq.n	8000a60 <Sim7600_Wait_For_Setting_Respone+0x64>
			case AT_ERROR:
				Clear_AT_Result();
				sim7600_state = SIM7600_MAX_STATE;
				break;
			default:
				break;
 8000a18:	e02b      	b.n	8000a72 <Sim7600_Wait_For_Setting_Respone+0x76>
				Clear_AT_Result();
 8000a1a:	f001 fc8b 	bl	8002334 <Clear_AT_Result>
				if(setting_index >= (NO_SETTING_COMMAND - 1) ){
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <Sim7600_Wait_For_Setting_Respone+0x7c>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b07      	cmp	r3, #7
 8000a24:	d906      	bls.n	8000a34 <Sim7600_Wait_For_Setting_Respone+0x38>
					setting_index = 0;
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <Sim7600_Wait_For_Setting_Respone+0x7c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
					sim7600_state = SIM7600_GET_IMEI;
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <Sim7600_Wait_For_Setting_Respone+0x80>)
 8000a2e:	2208      	movs	r2, #8
 8000a30:	701a      	strb	r2, [r3, #0]
 8000a32:	e008      	b.n	8000a46 <Sim7600_Wait_For_Setting_Respone+0x4a>
					setting_index ++;
 8000a34:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <Sim7600_Wait_For_Setting_Respone+0x7c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <Sim7600_Wait_For_Setting_Respone+0x7c>)
 8000a3e:	701a      	strb	r2, [r3, #0]
					sim7600_state = SIM7600_SETTING;
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <Sim7600_Wait_For_Setting_Respone+0x80>)
 8000a42:	2206      	movs	r2, #6
 8000a44:	701a      	strb	r2, [r3, #0]
				if(setting_index == 6){
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <Sim7600_Wait_For_Setting_Respone+0x7c>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b06      	cmp	r3, #6
 8000a4c:	d110      	bne.n	8000a70 <Sim7600_Wait_For_Setting_Respone+0x74>
					Clear_Sim7600_Timeout_Flag();
 8000a4e:	f7ff fe63 	bl	8000718 <Clear_Sim7600_Timeout_Flag>
					SCH_Add_Task(Set_Sim7600_Timeout_Flag, 500, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a58:	4809      	ldr	r0, [pc, #36]	; (8000a80 <Sim7600_Wait_For_Setting_Respone+0x84>)
 8000a5a:	f001 fcb7 	bl	80023cc <SCH_Add_Task>
				break;
 8000a5e:	e007      	b.n	8000a70 <Sim7600_Wait_For_Setting_Respone+0x74>
				Clear_AT_Result();
 8000a60:	f001 fc68 	bl	8002334 <Clear_AT_Result>
				sim7600_state = SIM7600_MAX_STATE;
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <Sim7600_Wait_For_Setting_Respone+0x80>)
 8000a66:	220a      	movs	r2, #10
 8000a68:	701a      	strb	r2, [r3, #0]
				break;
 8000a6a:	e002      	b.n	8000a72 <Sim7600_Wait_For_Setting_Respone+0x76>
		}
	}
 8000a6c:	bf00      	nop
 8000a6e:	e000      	b.n	8000a72 <Sim7600_Wait_For_Setting_Respone+0x76>
				break;
 8000a70:	bf00      	nop
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000186 	.word	0x20000186
 8000a7c:	20000000 	.word	0x20000000
 8000a80:	08000701 	.word	0x08000701

08000a84 <Sim7600_Get_Imei>:
 * Sim7600_Get_Imei()
 * @param None
 * @retval None
 * @brief This is function for Get IMEI from Simcomo7600 to set LockerID.
 */
void Sim7600_Get_Imei(void){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	// Clear_Reiceive_Buffer();
	UART_SIM7600_Transmit((uint8_t*)"AT+SIMEI?\r\n");
 8000a88:	4803      	ldr	r0, [pc, #12]	; (8000a98 <Sim7600_Get_Imei+0x14>)
 8000a8a:	f000 fa1d 	bl	8000ec8 <UART_SIM7600_Transmit>
	sim7600_state = SIM7600_WAIT_FOR_GET_IMEI_RESPONE;
 8000a8e:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <Sim7600_Get_Imei+0x18>)
 8000a90:	2209      	movs	r2, #9
 8000a92:	701a      	strb	r2, [r3, #0]
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	08006c24 	.word	0x08006c24
 8000a9c:	20000000 	.word	0x20000000

08000aa0 <Sim7600_Wait_For_Get_Imei_Respone>:
 * Sim7600_Wait_For_Get_Imei_Respone()
 * @param None
 * @retval None
 * @brief This is function for waiting respone from GET IMEI State.
 */
void Sim7600_Wait_For_Get_Imei_Respone(void){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_IMEI);
	switch (Get_AT_Result()){
 8000aa4:	f001 fc3c 	bl	8002320 <Get_AT_Result>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d010      	beq.n	8000ad0 <Sim7600_Wait_For_Get_Imei_Respone+0x30>
 8000aae:	2b06      	cmp	r3, #6
 8000ab0:	d113      	bne.n	8000ada <Sim7600_Wait_For_Get_Imei_Respone+0x3a>
		case AT_IMEI:
			if(Get_Imei()){
 8000ab2:	f000 f82b 	bl	8000b0c <Get_Imei>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d010      	beq.n	8000ade <Sim7600_Wait_For_Get_Imei_Respone+0x3e>
				Clear_AT_Result();
 8000abc:	f001 fc3a 	bl	8002334 <Clear_AT_Result>
				sim7600_state = SIM7600_MAX_STATE;
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <Sim7600_Wait_For_Get_Imei_Respone+0x44>)
 8000ac2:	220a      	movs	r2, #10
 8000ac4:	701a      	strb	r2, [r3, #0]
				UART_DEBUG_Transmit_Size(imei_buffer, IMEI_LENGTH);
 8000ac6:	210f      	movs	r1, #15
 8000ac8:	4807      	ldr	r0, [pc, #28]	; (8000ae8 <Sim7600_Wait_For_Get_Imei_Respone+0x48>)
 8000aca:	f000 fab5 	bl	8001038 <UART_DEBUG_Transmit_Size>
			}
			break;
 8000ace:	e006      	b.n	8000ade <Sim7600_Wait_For_Get_Imei_Respone+0x3e>
		case AT_ERROR:
			Clear_AT_Result();
 8000ad0:	f001 fc30 	bl	8002334 <Clear_AT_Result>
			sim7600_state = SIM7600_MAX_STATE;
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <Sim7600_Wait_For_Get_Imei_Respone+0x44>)
 8000ad6:	220a      	movs	r2, #10
 8000ad8:	701a      	strb	r2, [r3, #0]
		default:
			break;
 8000ada:	bf00      	nop
 8000adc:	e000      	b.n	8000ae0 <Sim7600_Wait_For_Get_Imei_Respone+0x40>
			break;
 8000ade:	bf00      	nop
	}
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20001230 	.word	0x20001230

08000aec <SIM7600_Set_State>:
 * SIM7600_Set_State()
 * @param sim7600_state
 * @retval None
 * @brief This function set mqtt_state.
 */
void SIM7600_Set_State(Sim7600_State newState){
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
	sim7600_state = newState;
 8000af6:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <SIM7600_Set_State+0x1c>)
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	7013      	strb	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000000 	.word	0x20000000

08000b0c <Get_Imei>:





FlagStatus Get_Imei(){
 8000b0c:	b598      	push	{r3, r4, r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	if(imei_count == IMEI_LENGTH){
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <Get_Imei+0x40>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b0f      	cmp	r3, #15
 8000b16:	d104      	bne.n	8000b22 <Get_Imei+0x16>
		imei_count = 0;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <Get_Imei+0x40>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
		return SET;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e012      	b.n	8000b48 <Get_Imei+0x3c>
	}
	if(UART_SIM7600_Received_Buffer_Available()){
 8000b22:	f000 f9fd 	bl	8000f20 <UART_SIM7600_Received_Buffer_Available>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d00c      	beq.n	8000b46 <Get_Imei+0x3a>
		imei_buffer[imei_count++] = UART_SIM7600_Read_Received_Buffer();
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <Get_Imei+0x40>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	1c5a      	adds	r2, r3, #1
 8000b32:	b2d1      	uxtb	r1, r2
 8000b34:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <Get_Imei+0x40>)
 8000b36:	7011      	strb	r1, [r2, #0]
 8000b38:	461c      	mov	r4, r3
 8000b3a:	f000 fa07 	bl	8000f4c <UART_SIM7600_Read_Received_Buffer>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <Get_Imei+0x44>)
 8000b44:	551a      	strb	r2, [r3, r4]
	}
	return RESET;
 8000b46:	2300      	movs	r3, #0
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	bd98      	pop	{r3, r4, r7, pc}
 8000b4c:	20000184 	.word	0x20000184
 8000b50:	20001230 	.word	0x20001230

08000b54 <Reset_SimConfiguration_State>:

void Reset_SimConfiguration_State(){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	SIM7600_Set_State(SIM7600_RESET);
 8000b58:	2002      	movs	r0, #2
 8000b5a:	f7ff ffc7 	bl	8000aec <SIM7600_Set_State>
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <GPIO_Init>:
  * @brief 	GPIO Initialization Function: 74HC245, LED, Buzzer, SPI_CS, SwitchID, SIM7600_GPIO
  * @param 	None
  * @retval None
  */
void GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
//	GPIO_InitTypeDef GPIO_InitStruct = {0};

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <GPIO_Init+0x74>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	4a1a      	ldr	r2, [pc, #104]	; (8000bd8 <GPIO_Init+0x74>)
 8000b70:	f043 0310 	orr.w	r3, r3, #16
 8000b74:	6193      	str	r3, [r2, #24]
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <GPIO_Init+0x74>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	f003 0310 	and.w	r3, r3, #16
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <GPIO_Init+0x74>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	4a14      	ldr	r2, [pc, #80]	; (8000bd8 <GPIO_Init+0x74>)
 8000b88:	f043 0320 	orr.w	r3, r3, #32
 8000b8c:	6193      	str	r3, [r2, #24]
 8000b8e:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <GPIO_Init+0x74>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	f003 0320 	and.w	r3, r3, #32
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <GPIO_Init+0x74>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <GPIO_Init+0x74>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	6193      	str	r3, [r2, #24]
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <GPIO_Init+0x74>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <GPIO_Init+0x74>)
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	4a08      	ldr	r2, [pc, #32]	; (8000bd8 <GPIO_Init+0x74>)
 8000bb8:	f043 0308 	orr.w	r3, r3, #8
 8000bbc:	6193      	str	r3, [r2, #24]
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <GPIO_Init+0x74>)
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	f003 0308 	and.w	r3, r3, #8
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]
//	urgent_init();
//	LED_Init();
//	Buzzer_Init();
//	SPI_CS_Init();
//	Switch_Init();
	Sim7600_GPIO_Init();
 8000bca:	f000 f807 	bl	8000bdc <Sim7600_GPIO_Init>
//	Read_BoardID();
}
 8000bce:	bf00      	nop
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40021000 	.word	0x40021000

08000bdc <Sim7600_GPIO_Init>:

	GPIO_InitStruct.Pin = BUZZER_PIN;
	HAL_GPIO_Init(BUZZER_PORT, &GPIO_InitStruct);
}

void Sim7600_GPIO_Init(void){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	463b      	mov	r3, r7
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	60fb      	str	r3, [r7, #12]

	GPIO_InitStruct.Pin = SIM7600_4G_PWRON;
 8000bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bfe:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(SIM7600_4G_PWRON_PORT, &GPIO_InitStruct);
 8000c00:	463b      	mov	r3, r7
 8000c02:	4619      	mov	r1, r3
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <Sim7600_GPIO_Init+0x60>)
 8000c06:	f002 fe4b 	bl	80038a0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SIM7600_4G_PERST;
 8000c0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c0e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(SIM7600_4G_PERST_PORT, &GPIO_InitStruct);
 8000c10:	463b      	mov	r3, r7
 8000c12:	4619      	mov	r1, r3
 8000c14:	4809      	ldr	r0, [pc, #36]	; (8000c3c <Sim7600_GPIO_Init+0x60>)
 8000c16:	f002 fe43 	bl	80038a0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(SIM7600_4G_PWRON_PORT, SIM7600_4G_PWRON, SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c20:	4806      	ldr	r0, [pc, #24]	; (8000c3c <Sim7600_GPIO_Init+0x60>)
 8000c22:	f002 ffd1 	bl	8003bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SIM7600_4G_PERST_PORT, SIM7600_4G_PERST, SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c2c:	4803      	ldr	r0, [pc, #12]	; (8000c3c <Sim7600_GPIO_Init+0x60>)
 8000c2e:	f002 ffcb 	bl	8003bc8 <HAL_GPIO_WritePin>
}
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40011000 	.word	0x40011000

08000c40 <I2C_Init>:
/**
  * @brief 	I2C peripheral initialization
  * @param 	None
  * @retval None
  */
HAL_StatusTypeDef I2C_Init(void){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	/*##-1- Configure the I2C peripheral ######################################*/
	  I2cHandle.Instance             = I2C1;
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <I2C_Init+0x54>)
 8000c46:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <I2C_Init+0x58>)
 8000c48:	601a      	str	r2, [r3, #0]
	  I2cHandle.Init.ClockSpeed      = I2C_SPEEDCLOCK;
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <I2C_Init+0x54>)
 8000c4c:	4a13      	ldr	r2, [pc, #76]	; (8000c9c <I2C_Init+0x5c>)
 8000c4e:	605a      	str	r2, [r3, #4]
	  I2cHandle.Init.DutyCycle       = I2C_DUTYCYCLE;
 8000c50:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <I2C_Init+0x54>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
	  I2cHandle.Init.OwnAddress1     = 0;//I2C_ADDRESS;
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <I2C_Init+0x54>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	60da      	str	r2, [r3, #12]
	  I2cHandle.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <I2C_Init+0x54>)
 8000c5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c62:	611a      	str	r2, [r3, #16]
	  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <I2C_Init+0x54>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	615a      	str	r2, [r3, #20]
	  I2cHandle.Init.OwnAddress2     = 0;//0xFF;
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <I2C_Init+0x54>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
	  I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <I2C_Init+0x54>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
	  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8000c76:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <I2C_Init+0x54>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]

	  if(HAL_I2C_Init(&I2cHandle) != HAL_OK)
 8000c7c:	4805      	ldr	r0, [pc, #20]	; (8000c94 <I2C_Init+0x54>)
 8000c7e:	f002 ffbb 	bl	8003bf8 <HAL_I2C_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <I2C_Init+0x4c>
	  {
	    /* Initialization Error */
		  return HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e000      	b.n	8000c8e <I2C_Init+0x4e>
	    Error_Handler();
	  }
	  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20001240 	.word	0x20001240
 8000c98:	40005400 	.word	0x40005400
 8000c9c:	00061a80 	.word	0x00061a80

08000ca0 <SPI2_Init>:





HAL_StatusTypeDef SPI2_Init(void){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	/*##-1- Configure the SPI peripheral #######################################*/
		  /* Set the SPI parameters */
		  Spi2Handle.Instance               = SPI2;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <SPI2_Init+0x7c>)
 8000ca6:	4a1e      	ldr	r2, [pc, #120]	; (8000d20 <SPI2_Init+0x80>)
 8000ca8:	601a      	str	r2, [r3, #0]
		  Spi2Handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <SPI2_Init+0x7c>)
 8000cac:	2228      	movs	r2, #40	; 0x28
 8000cae:	61da      	str	r2, [r3, #28]
		  Spi2Handle.Init.Direction         = SPI_DIRECTION_2LINES;
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <SPI2_Init+0x7c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
		  Spi2Handle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <SPI2_Init+0x7c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	615a      	str	r2, [r3, #20]
		  Spi2Handle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8000cbc:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <SPI2_Init+0x7c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
		  Spi2Handle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <SPI2_Init+0x7c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	60da      	str	r2, [r3, #12]
		  Spi2Handle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <SPI2_Init+0x7c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	621a      	str	r2, [r3, #32]
		  Spi2Handle.Init.TIMode            = SPI_TIMODE_DISABLE;
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <SPI2_Init+0x7c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	625a      	str	r2, [r3, #36]	; 0x24
		  Spi2Handle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8000cd4:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <SPI2_Init+0x7c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	629a      	str	r2, [r3, #40]	; 0x28
		  Spi2Handle.Init.CRCPolynomial     = 7;
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <SPI2_Init+0x7c>)
 8000cdc:	2207      	movs	r2, #7
 8000cde:	62da      	str	r2, [r3, #44]	; 0x2c
//		  Spi2Handle.Init.NSS               = SPI_NSS_SOFT;
		  Spi2Handle.Init.NSS               = SPI_NSS_HARD_OUTPUT;
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <SPI2_Init+0x7c>)
 8000ce2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ce6:	619a      	str	r2, [r3, #24]
		  Spi2Handle.Init.Mode = SPI_MODE_MASTER;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <SPI2_Init+0x7c>)
 8000cea:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cee:	605a      	str	r2, [r3, #4]

		  if(HAL_SPI_Init(&Spi2Handle) != HAL_OK)
 8000cf0:	480a      	ldr	r0, [pc, #40]	; (8000d1c <SPI2_Init+0x7c>)
 8000cf2:	f003 ffe5 	bl	8004cc0 <HAL_SPI_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d003      	beq.n	8000d04 <SPI2_Init+0x64>
		  {
		    /* Initialization Error */
		    Error_Handler();
 8000cfc:	f001 ff76 	bl	8002bec <Error_Handler>
		    return HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	e008      	b.n	8000d16 <SPI2_Init+0x76>
		  }
		  /* SPI block is enabled prior calling SPI transmit/receive functions, in order to get CLK signal properly pulled down.
		     Otherwise, SPI CLK signal is not clean on this board and leads to errors during transfer */
		  __HAL_SPI_ENABLE(&Spi2Handle);
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <SPI2_Init+0x7c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <SPI2_Init+0x7c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d12:	601a      	str	r2, [r3, #0]
		  return HAL_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20001294 	.word	0x20001294
 8000d20:	40003800 	.word	0x40003800

08000d24 <ResetChipSelect>:

void ResetChipSelect(void){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_PORT,SPI2_NSS_PIN, GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d2e:	4802      	ldr	r0, [pc, #8]	; (8000d38 <ResetChipSelect+0x14>)
 8000d30:	f002 ff4a 	bl	8003bc8 <HAL_GPIO_WritePin>
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40010c00 	.word	0x40010c00

08000d3c <SetChipSelect>:

void SetChipSelect(void){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_PORT,SPI2_NSS_PIN, GPIO_PIN_SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d46:	4802      	ldr	r0, [pc, #8]	; (8000d50 <SetChipSelect+0x14>)
 8000d48:	f002 ff3e 	bl	8003bc8 <HAL_GPIO_WritePin>
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40010c00 	.word	0x40010c00

08000d54 <SystemClock_Config>:
 * @author thodo
 */
#include <Peripheral/app_system_clock_config.h>

HAL_StatusTypeDef SystemClock_Config(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b090      	sub	sp, #64	; 0x40
 8000d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5a:	f107 0318 	add.w	r3, r7, #24
 8000d5e:	2228      	movs	r2, #40	; 0x28
 8000d60:	2100      	movs	r1, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f005 fa18 	bl	8006198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
 8000d74:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000d76:	230a      	movs	r3, #10
 8000d78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d7e:	2310      	movs	r3, #16
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d82:	2301      	movs	r3, #1
 8000d84:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d86:	2302      	movs	r3, #2
 8000d88:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d8e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d94:	f107 0318 	add.w	r3, r7, #24
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f003 fb77 	bl	800448c <HAL_RCC_OscConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <SystemClock_Config+0x54>
  {
	  return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e017      	b.n	8000dd8 <SystemClock_Config+0x84>
	  Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da8:	230f      	movs	r3, #15
 8000daa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dac:	2302      	movs	r3, #2
 8000dae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f003 fde2 	bl	800498c <HAL_RCC_ClockConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000dce:	f001 ff0d 	bl	8002bec <Error_Handler>
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <SystemClock_Config+0x84>
  }
  return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3740      	adds	r7, #64	; 0x40
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <Timer_Init>:

/* Prescaler declaration */
uint32_t uwPrescalerValue = 0;


HAL_StatusTypeDef Timer_Init(void){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	      2) by calling HAL API function HAL_RCC_GetSysClockFreq()
	      3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
	  ----------------------------------------------------------------------- */

	  /* Compute the prescaler value to have TIMx counter clock equal to 10000 Hz */
	  uwPrescalerValue = (uint32_t)(SystemCoreClock / 10000) - 1;
 8000de4:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <Timer_Init+0x68>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a18      	ldr	r2, [pc, #96]	; (8000e4c <Timer_Init+0x6c>)
 8000dea:	fba2 2303 	umull	r2, r3, r2, r3
 8000dee:	0b5b      	lsrs	r3, r3, #13
 8000df0:	3b01      	subs	r3, #1
 8000df2:	4a17      	ldr	r2, [pc, #92]	; (8000e50 <Timer_Init+0x70>)
 8000df4:	6013      	str	r3, [r2, #0]

	  /* Set TIMx instance */
	  htim3.Instance = TIM3;
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <Timer_Init+0x74>)
 8000df8:	4a17      	ldr	r2, [pc, #92]	; (8000e58 <Timer_Init+0x78>)
 8000dfa:	601a      	str	r2, [r3, #0]
	       + Period = 10000 - 1
	       + Prescaler = (SystemCoreClock/10000) - 1
	       + ClockDivision = 0
	       + Counter direction = Up
	  */
	  htim3.Init.Period            = TIMER_CYCLE*10-1;
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <Timer_Init+0x74>)
 8000dfe:	2263      	movs	r2, #99	; 0x63
 8000e00:	60da      	str	r2, [r3, #12]
	  htim3.Init.Prescaler         = uwPrescalerValue;
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <Timer_Init+0x70>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a13      	ldr	r2, [pc, #76]	; (8000e54 <Timer_Init+0x74>)
 8000e08:	6053      	str	r3, [r2, #4]
	  htim3.Init.ClockDivision     = 0;
 8000e0a:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <Timer_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
	  htim3.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8000e10:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <Timer_Init+0x74>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
	  htim3.Init.RepetitionCounter = 0;
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <Timer_Init+0x74>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	615a      	str	r2, [r3, #20]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <Timer_Init+0x74>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	619a      	str	r2, [r3, #24]

	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e22:	480c      	ldr	r0, [pc, #48]	; (8000e54 <Timer_Init+0x74>)
 8000e24:	f004 f9b2 	bl	800518c <HAL_TIM_Base_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <Timer_Init+0x52>
	  {
	    /* Initialization Error */
		  return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e008      	b.n	8000e44 <Timer_Init+0x64>
	    Error_Handler();
	  }

	  /*##-2- Start the TIM Base generation in interrupt mode ####################*/
	  /* Start Channel1 */
	  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000e32:	4808      	ldr	r0, [pc, #32]	; (8000e54 <Timer_Init+0x74>)
 8000e34:	f004 f9fa 	bl	800522c <HAL_TIM_Base_Start_IT>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <Timer_Init+0x62>
	  {
	    /* Starting Error */
		  return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e000      	b.n	8000e44 <Timer_Init+0x64>
	    Error_Handler();
	  }
	  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	200000f4 	.word	0x200000f4
 8000e4c:	d1b71759 	.word	0xd1b71759
 8000e50:	20000188 	.word	0x20000188
 8000e54:	200012f8 	.word	0x200012f8
 8000e58:	40000400 	.word	0x40000400

08000e5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000e64:	f001 fa8a 	bl	800237c <SCH_Update>
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <UART_SIM7600_Init>:
  * @brief USART SIMCOM7600 Initialization Function
  * @param None
  * @retval None
  */
HAL_StatusTypeDef UART_SIM7600_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <UART_SIM7600_Init+0x50>)
 8000e76:	4a13      	ldr	r2, [pc, #76]	; (8000ec4 <UART_SIM7600_Init+0x54>)
 8000e78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <UART_SIM7600_Init+0x50>)
 8000e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <UART_SIM7600_Init+0x50>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e88:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <UART_SIM7600_Init+0x50>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <UART_SIM7600_Init+0x50>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <UART_SIM7600_Init+0x50>)
 8000e96:	220c      	movs	r2, #12
 8000e98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <UART_SIM7600_Init+0x50>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea0:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <UART_SIM7600_Init+0x50>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ea6:	4806      	ldr	r0, [pc, #24]	; (8000ec0 <UART_SIM7600_Init+0x50>)
 8000ea8:	f004 fbd8 	bl	800565c <HAL_UART_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <UART_SIM7600_Init+0x46>
  {
	  return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e002      	b.n	8000ebc <UART_SIM7600_Init+0x4c>
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */
  Start_Receive_IT();
 8000eb6:	f000 f8d7 	bl	8001068 <Start_Receive_IT>
  /* USER CODE END USART1_Init 2 */
  return HAL_OK;
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20002388 	.word	0x20002388
 8000ec4:	40013800 	.word	0x40013800

08000ec8 <UART_SIM7600_Transmit>:
/**
  * @brief UART_SIM7600_Transmit Initialization Function
  * @param None
  * @retval None
  */
void UART_SIM7600_Transmit(uint8_t *buffer){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	uint16_t tmpLen = strlen((char*)buffer);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff f9a7 	bl	8000224 <strlen>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	81fb      	strh	r3, [r7, #14]
	if(tmpLen == 0) {
 8000eda:	89fb      	ldrh	r3, [r7, #14]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d017      	beq.n	8000f10 <UART_SIM7600_Transmit+0x48>
		return;
	} else {
#ifdef DEBUG
		LOG(buffer);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f000 f88b 	bl	8000ffc <UART_DEBUG_Transmit>
//		if (DEBUG){
////			while(!UartTransmitReady);
//			UART_DEBUG_Transmit(buffer);
//		}
		//TODO: never do while in state machine
		while(!UartTransmitReady);
 8000ee6:	bf00      	nop
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <UART_SIM7600_Transmit+0x50>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d0fa      	beq.n	8000ee8 <UART_SIM7600_Transmit+0x20>
		if(HAL_UART_Transmit_IT(&huart1, buffer, tmpLen)!= HAL_OK){
 8000ef2:	89fb      	ldrh	r3, [r7, #14]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	4808      	ldr	r0, [pc, #32]	; (8000f1c <UART_SIM7600_Transmit+0x54>)
 8000efa:	f004 fc8e 	bl	800581a <HAL_UART_Transmit_IT>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <UART_SIM7600_Transmit+0x40>
			Error_Handler();
 8000f04:	f001 fe72 	bl	8002bec <Error_Handler>
		}
		UartTransmitReady = RESET;
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <UART_SIM7600_Transmit+0x50>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
	}
	return;
 8000f0e:	e000      	b.n	8000f12 <UART_SIM7600_Transmit+0x4a>
		return;
 8000f10:	bf00      	nop
}
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000078 	.word	0x20000078
 8000f1c:	20002388 	.word	0x20002388

08000f20 <UART_SIM7600_Received_Buffer_Available>:
  * @brief UART_SIM7600_Received_Buffer_Available Initialization Function
  * @param None
  * @param None
  * @retval None
  */
uint8_t UART_SIM7600_Received_Buffer_Available(void){
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
	if(receiveBufferIndexTail != receiveBufferIndexHead){
 8000f24:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <UART_SIM7600_Received_Buffer_Available+0x24>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <UART_SIM7600_Received_Buffer_Available+0x28>)
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d001      	beq.n	8000f38 <UART_SIM7600_Received_Buffer_Available+0x18>
		return 1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e000      	b.n	8000f3a <UART_SIM7600_Received_Buffer_Available+0x1a>
	} else {
		return 0;
 8000f38:	2300      	movs	r3, #0
	}
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	2000018e 	.word	0x2000018e
 8000f48:	2000018c 	.word	0x2000018c

08000f4c <UART_SIM7600_Read_Received_Buffer>:
  * @param None
  * @param None
  * @retval ch character at Tail index of buffer and Tail will increase 1
  */
char log[10];
uint8_t UART_SIM7600_Read_Received_Buffer(void){
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
	if(receiveBufferIndexTail == receiveBufferIndexHead) return 0xff;
 8000f52:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <UART_SIM7600_Read_Received_Buffer+0x50>)
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <UART_SIM7600_Read_Received_Buffer+0x54>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d101      	bne.n	8000f66 <UART_SIM7600_Read_Received_Buffer+0x1a>
 8000f62:	23ff      	movs	r3, #255	; 0xff
 8000f64:	e015      	b.n	8000f92 <UART_SIM7600_Read_Received_Buffer+0x46>
	uint8_t ch = aUART_RxBuffer[receiveBufferIndexTail];
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <UART_SIM7600_Read_Received_Buffer+0x50>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <UART_SIM7600_Read_Received_Buffer+0x58>)
 8000f70:	5c9b      	ldrb	r3, [r3, r2]
 8000f72:	71fb      	strb	r3, [r7, #7]
	receiveBufferIndexTail = (receiveBufferIndexTail + 1) % UART_RX_BUFFERSIZE;
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <UART_SIM7600_Read_Received_Buffer+0x50>)
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	425a      	negs	r2, r3
 8000f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f82:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000f86:	bf58      	it	pl
 8000f88:	4253      	negpl	r3, r2
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <UART_SIM7600_Read_Received_Buffer+0x50>)
 8000f8e:	801a      	strh	r2, [r3, #0]
//	sprintf(log,"%d\r\n",receiveBufferIndexTail,receiveBufferIndexHead);
//	LOG("1111");
	return ch;
 8000f90:	79fb      	ldrb	r3, [r7, #7]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	2000018e 	.word	0x2000018e
 8000fa0:	2000018c 	.word	0x2000018c
 8000fa4:	20001388 	.word	0x20001388

08000fa8 <UART_DEBUG_Init>:
  * @brief UART_DEBUG_Init Initialization Function
  * @param None
  * @retval None
  */
HAL_StatusTypeDef UART_DEBUG_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <UART_DEBUG_Init+0x4c>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <UART_DEBUG_Init+0x50>)
 8000fb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <UART_DEBUG_Init+0x4c>)
 8000fb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <UART_DEBUG_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <UART_DEBUG_Init+0x4c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <UART_DEBUG_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <UART_DEBUG_Init+0x4c>)
 8000fce:	220c      	movs	r2, #12
 8000fd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <UART_DEBUG_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <UART_DEBUG_Init+0x4c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <UART_DEBUG_Init+0x4c>)
 8000fe0:	f004 fb3c 	bl	800565c <HAL_UART_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <UART_DEBUG_Init+0x46>
  {
	  return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <UART_DEBUG_Init+0x48>
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20001340 	.word	0x20001340
 8000ff8:	40004800 	.word	0x40004800

08000ffc <UART_DEBUG_Transmit>:
/**
  * @brief USART Transmit Initialization Function
  * @param buffer buffer to transmit via UART DEBUG without known size, it will use strlen(buffer) to get size.
  * @retval None
  */
void UART_DEBUG_Transmit(uint8_t *buffer){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	uint16_t tmpLen = strlen((char*)buffer);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff f90d 	bl	8000224 <strlen>
 800100a:	4603      	mov	r3, r0
 800100c:	81fb      	strh	r3, [r7, #14]
	if(tmpLen == 0){
 800100e:	89fb      	ldrh	r3, [r7, #14]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00b      	beq.n	800102c <UART_DEBUG_Transmit+0x30>
		return;
	}
	if(HAL_UART_Transmit(&huart3, (uint8_t*)buffer, tmpLen ,0xFF)!= HAL_OK){
 8001014:	89fa      	ldrh	r2, [r7, #14]
 8001016:	23ff      	movs	r3, #255	; 0xff
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	4806      	ldr	r0, [pc, #24]	; (8001034 <UART_DEBUG_Transmit+0x38>)
 800101c:	f004 fb6b 	bl	80056f6 <HAL_UART_Transmit>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <UART_DEBUG_Transmit+0x32>
		Error_Handler();
 8001026:	f001 fde1 	bl	8002bec <Error_Handler>
 800102a:	e000      	b.n	800102e <UART_DEBUG_Transmit+0x32>
		return;
 800102c:	bf00      	nop
	}
//	UartTransmitReady = RESET;
}
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20001340 	.word	0x20001340

08001038 <UART_DEBUG_Transmit_Size>:
  * @brief UART_DEBUG_Transmit_Size Initialization Function
  * @param buffer: buffer contain data for transmit
  * @param buffer_size: size of data to transmit
  * @retval None
  */
void UART_DEBUG_Transmit_Size(uint8_t *buffer ,uint16_t buffer_size){
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
	if(HAL_UART_Transmit(&huart3, (uint8_t*)buffer, buffer_size,200)!= HAL_OK){
 8001044:	887a      	ldrh	r2, [r7, #2]
 8001046:	23c8      	movs	r3, #200	; 0xc8
 8001048:	6879      	ldr	r1, [r7, #4]
 800104a:	4806      	ldr	r0, [pc, #24]	; (8001064 <UART_DEBUG_Transmit_Size+0x2c>)
 800104c:	f004 fb53 	bl	80056f6 <HAL_UART_Transmit>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <UART_DEBUG_Transmit_Size+0x22>
		Error_Handler();
 8001056:	f001 fdc9 	bl	8002bec <Error_Handler>
	}
//	UartTransmitReady = RESET;
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20001340 	.word	0x20001340

08001068 <Start_Receive_IT>:
  * @brief Setup_Receive_IT Initialization Function
  * It will receive 1 bytes.
  * @param None
  * @retval None
  */
void Start_Receive_IT(void){
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	if(HAL_UART_Receive_IT(&huart1, &temp, 1)!= HAL_OK){
 800106c:	2201      	movs	r2, #1
 800106e:	4905      	ldr	r1, [pc, #20]	; (8001084 <Start_Receive_IT+0x1c>)
 8001070:	4805      	ldr	r0, [pc, #20]	; (8001088 <Start_Receive_IT+0x20>)
 8001072:	f004 fc16 	bl	80058a2 <HAL_UART_Receive_IT>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <Start_Receive_IT+0x18>
		Error_Handler();
 800107c:	f001 fdb6 	bl	8002bec <Error_Handler>
	}
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20001384 	.word	0x20001384
 8001088:	20002388 	.word	0x20002388

0800108c <HAL_UART_RxCpltCallback>:
  * When Simcom7600 transmit data to UART, so HAL_UART_RxCpltCallback will be called.
  * HAL_UART_RxCpltCallback will recalled HAL_UART_Receive_IT to continous UART Interrupt Service.
  * @param huart UART_HandleTypeDef be handled in Callback
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a10      	ldr	r2, [pc, #64]	; (80010dc <HAL_UART_RxCpltCallback+0x50>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d11a      	bne.n	80010d4 <HAL_UART_RxCpltCallback+0x48>
		aUART_RxBuffer[receiveBufferIndexHead] = temp;
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <HAL_UART_RxCpltCallback+0x54>)
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <HAL_UART_RxCpltCallback+0x58>)
 80010a8:	7819      	ldrb	r1, [r3, #0]
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <HAL_UART_RxCpltCallback+0x5c>)
 80010ac:	5499      	strb	r1, [r3, r2]
		receiveBufferIndexHead = (receiveBufferIndexHead + 1) % UART_RX_BUFFERSIZE;
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <HAL_UART_RxCpltCallback+0x54>)
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	3301      	adds	r3, #1
 80010b6:	425a      	negs	r2, r3
 80010b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010bc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80010c0:	bf58      	it	pl
 80010c2:	4253      	negpl	r3, r2
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_UART_RxCpltCallback+0x54>)
 80010c8:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(huart, &temp, 1);
 80010ca:	2201      	movs	r2, #1
 80010cc:	4905      	ldr	r1, [pc, #20]	; (80010e4 <HAL_UART_RxCpltCallback+0x58>)
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f004 fbe7 	bl	80058a2 <HAL_UART_Receive_IT>
	}
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40013800 	.word	0x40013800
 80010e0:	2000018c 	.word	0x2000018c
 80010e4:	20001384 	.word	0x20001384
 80010e8:	20001388 	.word	0x20001388

080010ec <HAL_UART_TxCpltCallback>:
/**
  * @brief HAL_UART_TxCpltCallback Initialization Function
  * @param UartHandle UART_HandleTypeDef be handled in Callback
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartTransmitReady = SET;
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <HAL_UART_TxCpltCallback+0x18>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	20000078 	.word	0x20000078

08001108 <Clear_Reiceive_Buffer>:
  * @brief Clear_Reiceive_Buffer Initialization Function
  * Clear all data in RX buffer.
  * @param None
  * @retval None
  */
void Clear_Reiceive_Buffer(void){
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	memset(aUART_RxBuffer,0,UART_RX_BUFFERSIZE);
 800110c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001110:	2100      	movs	r1, #0
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <Clear_Reiceive_Buffer+0x20>)
 8001114:	f005 f840 	bl	8006198 <memset>
	receiveBufferIndexHead = 0;
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <Clear_Reiceive_Buffer+0x24>)
 800111a:	2200      	movs	r2, #0
 800111c:	801a      	strh	r2, [r3, #0]
	receiveBufferIndexTail = 0;
 800111e:	4b04      	ldr	r3, [pc, #16]	; (8001130 <Clear_Reiceive_Buffer+0x28>)
 8001120:	2200      	movs	r2, #0
 8001122:	801a      	strh	r2, [r3, #0]
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20001388 	.word	0x20001388
 800112c:	2000018c 	.word	0x2000018c
 8001130:	2000018e 	.word	0x2000018e

08001134 <HTTP_Display_State>:

/**
 * HTTP_Display_State()
 * @brief This is function for display state of State Machine. It only show State when having a state changation.
 */
void HTTP_Display_State(void){
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	if(prev_http_state!=http_state){
 8001138:	4b2c      	ldr	r3, [pc, #176]	; (80011ec <HTTP_Display_State+0xb8>)
 800113a:	781a      	ldrb	r2, [r3, #0]
 800113c:	4b2c      	ldr	r3, [pc, #176]	; (80011f0 <HTTP_Display_State+0xbc>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	429a      	cmp	r2, r3
 8001142:	d04d      	beq.n	80011e0 <HTTP_Display_State+0xac>
		prev_http_state = http_state;
 8001144:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <HTTP_Display_State+0xbc>)
 8001146:	781a      	ldrb	r2, [r3, #0]
 8001148:	4b28      	ldr	r3, [pc, #160]	; (80011ec <HTTP_Display_State+0xb8>)
 800114a:	701a      	strb	r2, [r3, #0]
		switch (http_state) {
 800114c:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <HTTP_Display_State+0xbc>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b0a      	cmp	r3, #10
 8001152:	d847      	bhi.n	80011e4 <HTTP_Display_State+0xb0>
 8001154:	a201      	add	r2, pc, #4	; (adr r2, 800115c <HTTP_Display_State+0x28>)
 8001156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115a:	bf00      	nop
 800115c:	08001189 	.word	0x08001189
 8001160:	08001191 	.word	0x08001191
 8001164:	08001199 	.word	0x08001199
 8001168:	080011a1 	.word	0x080011a1
 800116c:	080011a9 	.word	0x080011a9
 8001170:	080011b1 	.word	0x080011b1
 8001174:	080011b9 	.word	0x080011b9
 8001178:	080011c1 	.word	0x080011c1
 800117c:	080011c9 	.word	0x080011c9
 8001180:	080011d1 	.word	0x080011d1
 8001184:	080011d9 	.word	0x080011d9
			case HTTP_INIT:
				LOG("\r\nHTTP INIT\r\n");
 8001188:	481a      	ldr	r0, [pc, #104]	; (80011f4 <HTTP_Display_State+0xc0>)
 800118a:	f7ff ff37 	bl	8000ffc <UART_DEBUG_Transmit>
				break;
 800118e:	e02a      	b.n	80011e6 <HTTP_Display_State+0xb2>
			case HTTP_WAIT_FOR_INIT:
				LOG("\r\nHTTP WAIT FOR INIT\r\n");
 8001190:	4819      	ldr	r0, [pc, #100]	; (80011f8 <HTTP_Display_State+0xc4>)
 8001192:	f7ff ff33 	bl	8000ffc <UART_DEBUG_Transmit>
				break;
 8001196:	e026      	b.n	80011e6 <HTTP_Display_State+0xb2>
			case HTTP_PARA:
				LOG("\r\nHTTP PARA\r\n");
 8001198:	4818      	ldr	r0, [pc, #96]	; (80011fc <HTTP_Display_State+0xc8>)
 800119a:	f7ff ff2f 	bl	8000ffc <UART_DEBUG_Transmit>
				break;
 800119e:	e022      	b.n	80011e6 <HTTP_Display_State+0xb2>
			case HTTP_WAIT_FOR_PARA:
				LOG("\r\nHTTP WAIT FOR PARA\r\n");
 80011a0:	4817      	ldr	r0, [pc, #92]	; (8001200 <HTTP_Display_State+0xcc>)
 80011a2:	f7ff ff2b 	bl	8000ffc <UART_DEBUG_Transmit>
				break;
 80011a6:	e01e      	b.n	80011e6 <HTTP_Display_State+0xb2>
			case HTTP_ACTION:
				LOG("\r\nHTTP ACTION\r\n");
 80011a8:	4816      	ldr	r0, [pc, #88]	; (8001204 <HTTP_Display_State+0xd0>)
 80011aa:	f7ff ff27 	bl	8000ffc <UART_DEBUG_Transmit>
				break;
 80011ae:	e01a      	b.n	80011e6 <HTTP_Display_State+0xb2>
			case HTTP_WAIT_FOR_ACTION:
				LOG("\r\nHTTP WAIT FOR ACTION\r\n");
 80011b0:	4815      	ldr	r0, [pc, #84]	; (8001208 <HTTP_Display_State+0xd4>)
 80011b2:	f7ff ff23 	bl	8000ffc <UART_DEBUG_Transmit>
				//TODO recheck, break or not ?
				break;
 80011b6:	e016      	b.n	80011e6 <HTTP_Display_State+0xb2>
			case HTTP_READ:
				LOG("\r\nHTTP READ\r\n");
 80011b8:	4814      	ldr	r0, [pc, #80]	; (800120c <HTTP_Display_State+0xd8>)
 80011ba:	f7ff ff1f 	bl	8000ffc <UART_DEBUG_Transmit>
				break;
 80011be:	e012      	b.n	80011e6 <HTTP_Display_State+0xb2>
			case HTTP_WAIT_FOR_READ:
				LOG("\r\nHTTP WAIT FOR READ\r\n");
 80011c0:	4813      	ldr	r0, [pc, #76]	; (8001210 <HTTP_Display_State+0xdc>)
 80011c2:	f7ff ff1b 	bl	8000ffc <UART_DEBUG_Transmit>
				break;
 80011c6:	e00e      	b.n	80011e6 <HTTP_Display_State+0xb2>
			case HTTP_TERM:
				LOG("\r\nHTTP TERM\r\n");
 80011c8:	4812      	ldr	r0, [pc, #72]	; (8001214 <HTTP_Display_State+0xe0>)
 80011ca:	f7ff ff17 	bl	8000ffc <UART_DEBUG_Transmit>
				break;
 80011ce:	e00a      	b.n	80011e6 <HTTP_Display_State+0xb2>
			case HTTP_WAIT_FOR_TERM:
				LOG("\r\nHTTP WAIT FOR TERM\r\n");
 80011d0:	4811      	ldr	r0, [pc, #68]	; (8001218 <HTTP_Display_State+0xe4>)
 80011d2:	f7ff ff13 	bl	8000ffc <UART_DEBUG_Transmit>
				break;
 80011d6:	e006      	b.n	80011e6 <HTTP_Display_State+0xb2>
			case HTTP_DONE:
				LOG("\r\nHTTP DONE\r\n");
 80011d8:	4810      	ldr	r0, [pc, #64]	; (800121c <HTTP_Display_State+0xe8>)
 80011da:	f7ff ff0f 	bl	8000ffc <UART_DEBUG_Transmit>
				break;
 80011de:	e002      	b.n	80011e6 <HTTP_Display_State+0xb2>
			default:
				break;
		}
	}
 80011e0:	bf00      	nop
 80011e2:	e000      	b.n	80011e6 <HTTP_Display_State+0xb2>
				break;
 80011e4:	bf00      	nop

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000019a 	.word	0x2000019a
 80011f0:	2000019b 	.word	0x2000019b
 80011f4:	08006c40 	.word	0x08006c40
 80011f8:	08006c50 	.word	0x08006c50
 80011fc:	08006c68 	.word	0x08006c68
 8001200:	08006c78 	.word	0x08006c78
 8001204:	08006c90 	.word	0x08006c90
 8001208:	08006ca0 	.word	0x08006ca0
 800120c:	08006cbc 	.word	0x08006cbc
 8001210:	08006ccc 	.word	0x08006ccc
 8001214:	08006ce4 	.word	0x08006ce4
 8001218:	08006cf4 	.word	0x08006cf4
 800121c:	08006d0c 	.word	0x08006d0c

08001220 <HTTP_Run>:

/**
 * HTTP_Run()
 * @brief This is function can be called from external file. It run follow state machine method. Not have param.
 */
uint8_t HTTP_Run(){
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	HTTP_Display_State();
 8001224:	f7ff ff86 	bl	8001134 <HTTP_Display_State>
	if(http_state < HTTP_DONE){
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <HTTP_Run+0x3c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b09      	cmp	r3, #9
 800122e:	d808      	bhi.n	8001242 <HTTP_Run+0x22>
		(*http_state_machine[http_state].func)();
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HTTP_Run+0x3c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <HTTP_Run+0x40>)
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	4413      	add	r3, r2
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	4798      	blx	r3
		return 0;
 800123e:	2300      	movs	r3, #0
 8001240:	e009      	b.n	8001256 <HTTP_Run+0x36>
	}
	else if(http_state == HTTP_DONE){
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HTTP_Run+0x3c>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b0a      	cmp	r3, #10
 8001248:	d104      	bne.n	8001254 <HTTP_Run+0x34>
		LOG("Get into HTTP DONE");
 800124a:	4806      	ldr	r0, [pc, #24]	; (8001264 <HTTP_Run+0x44>)
 800124c:	f7ff fed6 	bl	8000ffc <UART_DEBUG_Transmit>
		return 1;
 8001250:	2301      	movs	r3, #1
 8001252:	e000      	b.n	8001256 <HTTP_Run+0x36>
	}
	else{
		//HTTP Error
		return 2;
 8001254:	2302      	movs	r3, #2
	}
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000019b 	.word	0x2000019b
 8001260:	20000084 	.word	0x20000084
 8001264:	08006d1c 	.word	0x08006d1c

08001268 <HTTP_Init>:

/**
 * HTTP_Init()
 * @brief This is function for initiating Http service
 */
void HTTP_Init(){
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	content_length = 0;
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <HTTP_Init+0x34>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
	Clear_Reiceive_Buffer();
 8001272:	f7ff ff49 	bl	8001108 <Clear_Reiceive_Buffer>
	if(default_atcommand){
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <HTTP_Init+0x38>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HTTP_Init+0x1e>
		sprintf(http_at_command,"AT+HTTPINIT\r\n");
 800127e:	4909      	ldr	r1, [pc, #36]	; (80012a4 <HTTP_Init+0x3c>)
 8001280:	4809      	ldr	r0, [pc, #36]	; (80012a8 <HTTP_Init+0x40>)
 8001282:	f004 ff91 	bl	80061a8 <siprintf>
	}
	UART_SIM7600_Transmit((uint8_t *)http_at_command);
 8001286:	4808      	ldr	r0, [pc, #32]	; (80012a8 <HTTP_Init+0x40>)
 8001288:	f7ff fe1e 	bl	8000ec8 <UART_SIM7600_Transmit>
	Clear_Http_Command();
 800128c:	f000 fe82 	bl	8001f94 <Clear_Http_Command>
	http_state = HTTP_WAIT_FOR_INIT;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HTTP_Init+0x44>)
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000194 	.word	0x20000194
 80012a0:	2000007a 	.word	0x2000007a
 80012a4:	08006d30 	.word	0x08006d30
 80012a8:	20003550 	.word	0x20003550
 80012ac:	2000019b 	.word	0x2000019b

080012b0 <HTTP_Wait_For_Init>:

/**
 * HTTP_Wait_For_Init()
 * @brief This is function for waiting respond from initiating Http service
 */
void HTTP_Wait_For_Init(){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_OK);
	switch (Get_AT_Result()){
 80012b4:	f001 f834 	bl	8002320 <Get_AT_Result>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d002      	beq.n	80012c4 <HTTP_Wait_For_Init+0x14>
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d006      	beq.n	80012d0 <HTTP_Wait_For_Init+0x20>
		case AT_ERROR:
			Clear_AT_Result();
			http_state=HTTP_MAX_STATE;
			break;
		default:
			break;
 80012c2:	e00b      	b.n	80012dc <HTTP_Wait_For_Init+0x2c>
			Clear_AT_Result();
 80012c4:	f001 f836 	bl	8002334 <Clear_AT_Result>
			http_state=HTTP_PARA;
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HTTP_Wait_For_Init+0x30>)
 80012ca:	2202      	movs	r2, #2
 80012cc:	701a      	strb	r2, [r3, #0]
			break;
 80012ce:	e005      	b.n	80012dc <HTTP_Wait_For_Init+0x2c>
			Clear_AT_Result();
 80012d0:	f001 f830 	bl	8002334 <Clear_AT_Result>
			http_state=HTTP_MAX_STATE;
 80012d4:	4b02      	ldr	r3, [pc, #8]	; (80012e0 <HTTP_Wait_For_Init+0x30>)
 80012d6:	220b      	movs	r2, #11
 80012d8:	701a      	strb	r2, [r3, #0]
			break;
 80012da:	bf00      	nop
	}
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	2000019b 	.word	0x2000019b

080012e4 <HTTP_Para>:

/**
 * HTTP_Para()
 * @brief This is function for passing parameter to HTTP Request
 */
void HTTP_Para(){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	if (default_atcommand) {
 80012e8:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <HTTP_Para+0x3c>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00d      	beq.n	800130c <HTTP_Para+0x28>
		if(fota_check_version){
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <HTTP_Para+0x40>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d004      	beq.n	8001302 <HTTP_Para+0x1e>
			sprintf(http_at_command,"AT+HTTPPARA=\"URL\",\"http://ota.chipfc.com/ebox_firmware/version.txt\"\r\n");
 80012f8:	490b      	ldr	r1, [pc, #44]	; (8001328 <HTTP_Para+0x44>)
 80012fa:	480c      	ldr	r0, [pc, #48]	; (800132c <HTTP_Para+0x48>)
 80012fc:	f004 ff54 	bl	80061a8 <siprintf>
 8001300:	e004      	b.n	800130c <HTTP_Para+0x28>
		}
		else{
			sprintf(http_at_command,"AT+HTTPPARA=\"URL\",\"http://ota.chipfc.com/ebox_firmware/%s/eBoxK2.hex\"\r\n",version);
 8001302:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <HTTP_Para+0x4c>)
 8001304:	490b      	ldr	r1, [pc, #44]	; (8001334 <HTTP_Para+0x50>)
 8001306:	4809      	ldr	r0, [pc, #36]	; (800132c <HTTP_Para+0x48>)
 8001308:	f004 ff4e 	bl	80061a8 <siprintf>
		}
	}
	UART_SIM7600_Transmit((uint8_t*)http_at_command);
 800130c:	4807      	ldr	r0, [pc, #28]	; (800132c <HTTP_Para+0x48>)
 800130e:	f7ff fddb 	bl	8000ec8 <UART_SIM7600_Transmit>
	Clear_Http_Command();
 8001312:	f000 fe3f 	bl	8001f94 <Clear_Http_Command>
	http_state = HTTP_WAIT_FOR_PARA;
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HTTP_Para+0x54>)
 8001318:	2203      	movs	r2, #3
 800131a:	701a      	strb	r2, [r3, #0]
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	2000007a 	.word	0x2000007a
 8001324:	2000007b 	.word	0x2000007b
 8001328:	08006d40 	.word	0x08006d40
 800132c:	20003550 	.word	0x20003550
 8001330:	20002530 	.word	0x20002530
 8001334:	08006d88 	.word	0x08006d88
 8001338:	2000019b 	.word	0x2000019b

0800133c <HTTP_Wait_For_Para>:
/**
 * HTTP_Wait_For_Para()
 * @brief This is function for waiting respone from  HTTP_PARA state
 * If AT_Result is AT_OK so switch to HTTP_ACTION else it's AT_ERROR so switch to HTTP_MAX_STATE
 */
void HTTP_Wait_For_Para(){
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_OK);
	switch (Get_AT_Result()){
 8001340:	f000 ffee 	bl	8002320 <Get_AT_Result>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <HTTP_Wait_For_Para+0x14>
 800134a:	2b01      	cmp	r3, #1
 800134c:	d006      	beq.n	800135c <HTTP_Wait_For_Para+0x20>
		case AT_ERROR:
			Clear_AT_Result();
			http_state=HTTP_MAX_STATE;
			break;
		default:
			break;
 800134e:	e00b      	b.n	8001368 <HTTP_Wait_For_Para+0x2c>
			Clear_AT_Result();
 8001350:	f000 fff0 	bl	8002334 <Clear_AT_Result>
			http_state=HTTP_ACTION;
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <HTTP_Wait_For_Para+0x30>)
 8001356:	2204      	movs	r2, #4
 8001358:	701a      	strb	r2, [r3, #0]
			break;
 800135a:	e005      	b.n	8001368 <HTTP_Wait_For_Para+0x2c>
			Clear_AT_Result();
 800135c:	f000 ffea 	bl	8002334 <Clear_AT_Result>
			http_state=HTTP_MAX_STATE;
 8001360:	4b02      	ldr	r3, [pc, #8]	; (800136c <HTTP_Wait_For_Para+0x30>)
 8001362:	220b      	movs	r2, #11
 8001364:	701a      	strb	r2, [r3, #0]
			break;
 8001366:	bf00      	nop
	}
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	2000019b 	.word	0x2000019b

08001370 <HTTP_Action>:
/**
 * HTTP_Action()
 * @brief This is function for create request with method : GET,POST,PUT
 * Passing 0 :GET ,1:POST ,...
 */
void HTTP_Action(){
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
//	Clear_Reiceive_Buffer();
	if (default_atcommand) {
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <HTTP_Action+0x38>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <HTTP_Action+0x14>
		sprintf(http_at_command,"AT+HTTPACTION=0\r\n");
 800137c:	490b      	ldr	r1, [pc, #44]	; (80013ac <HTTP_Action+0x3c>)
 800137e:	480c      	ldr	r0, [pc, #48]	; (80013b0 <HTTP_Action+0x40>)
 8001380:	f004 ff12 	bl	80061a8 <siprintf>
	}
	UART_SIM7600_Transmit((uint8_t*)http_at_command);
 8001384:	480a      	ldr	r0, [pc, #40]	; (80013b0 <HTTP_Action+0x40>)
 8001386:	f7ff fd9f 	bl	8000ec8 <UART_SIM7600_Transmit>
	Clear_Http_Command();
 800138a:	f000 fe03 	bl	8001f94 <Clear_Http_Command>
	Clear_Http_Timeout_Flag();
 800138e:	f000 f9cb 	bl	8001728 <Clear_Http_Timeout_Flag>
	SCH_Add_Task(Set_Http_Timeout_Flag, ACTION_TIMEOUT, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	21c8      	movs	r1, #200	; 0xc8
 8001396:	4807      	ldr	r0, [pc, #28]	; (80013b4 <HTTP_Action+0x44>)
 8001398:	f001 f818 	bl	80023cc <SCH_Add_Task>
	http_state = HTTP_WAIT_FOR_ACTION;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HTTP_Action+0x48>)
 800139e:	2205      	movs	r2, #5
 80013a0:	701a      	strb	r2, [r3, #0]
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	2000007a 	.word	0x2000007a
 80013ac:	08006dd0 	.word	0x08006dd0
 80013b0:	20003550 	.word	0x20003550
 80013b4:	08001711 	.word	0x08001711
 80013b8:	2000019b 	.word	0x2000019b

080013bc <HTTP_Wait_For_Action>:
 * HTTP_Wait_For_Action()
 * @brief This is function for waiting HTTP_ACTION respone
 * If AT_Result is AT_OK so switch to HTTP_READ to read HTTP Respone body
 * else AT_ERROR so switch to HTTP_MAX_STATE to reset Simcom7600
 */
void HTTP_Wait_For_Action(){
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	if(is_Http_TimeOutFlag()){
 80013c0:	f000 f99c 	bl	80016fc <is_Http_TimeOutFlag>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d035      	beq.n	8001436 <HTTP_Wait_For_Action+0x7a>
//		Wait_For_Respone(AT_OK);
		switch (Get_AT_Result()){
 80013ca:	f000 ffa9 	bl	8002320 <Get_AT_Result>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b05      	cmp	r3, #5
 80013d2:	d009      	beq.n	80013e8 <HTTP_Wait_For_Action+0x2c>
 80013d4:	2b05      	cmp	r3, #5
 80013d6:	dc30      	bgt.n	800143a <HTTP_Wait_For_Action+0x7e>
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d002      	beq.n	80013e2 <HTTP_Wait_For_Action+0x26>
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d024      	beq.n	800142a <HTTP_Wait_For_Action+0x6e>
			case AT_ERROR:
				Clear_AT_Result();
				http_state = HTTP_MAX_STATE;
				break;
			default:
				break;
 80013e0:	e02b      	b.n	800143a <HTTP_Wait_For_Action+0x7e>
				Clear_AT_Result();
 80013e2:	f000 ffa7 	bl	8002334 <Clear_AT_Result>
				break;
 80013e6:	e02b      	b.n	8001440 <HTTP_Wait_For_Action+0x84>
				if(HTTP_Get_Content_Length()){
 80013e8:	f000 fd8a 	bl	8001f00 <HTTP_Get_Content_Length>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d025      	beq.n	800143e <HTTP_Wait_For_Action+0x82>
					http_response_remain = HTTP_Return_Content_Length();
 80013f2:	f000 fddb 	bl	8001fac <HTTP_Return_Content_Length>
 80013f6:	4603      	mov	r3, r0
 80013f8:	4a12      	ldr	r2, [pc, #72]	; (8001444 <HTTP_Wait_For_Action+0x88>)
 80013fa:	6013      	str	r3, [r2, #0]
					firmware_size = http_response_remain;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <HTTP_Wait_For_Action+0x88>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a11      	ldr	r2, [pc, #68]	; (8001448 <HTTP_Wait_For_Action+0x8c>)
 8001402:	6013      	str	r3, [r2, #0]
					content_length = 0;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <HTTP_Wait_For_Action+0x90>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
					sprintf(logMsg,"\r\n%d\r\n",http_response_remain);
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <HTTP_Wait_For_Action+0x88>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	490f      	ldr	r1, [pc, #60]	; (8001450 <HTTP_Wait_For_Action+0x94>)
 8001412:	4810      	ldr	r0, [pc, #64]	; (8001454 <HTTP_Wait_For_Action+0x98>)
 8001414:	f004 fec8 	bl	80061a8 <siprintf>
					LOG(logMsg);
 8001418:	480e      	ldr	r0, [pc, #56]	; (8001454 <HTTP_Wait_For_Action+0x98>)
 800141a:	f7ff fdef 	bl	8000ffc <UART_DEBUG_Transmit>
					Clear_AT_Result();
 800141e:	f000 ff89 	bl	8002334 <Clear_AT_Result>
					http_state = HTTP_READ;
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <HTTP_Wait_For_Action+0x9c>)
 8001424:	2206      	movs	r2, #6
 8001426:	701a      	strb	r2, [r3, #0]
				break;
 8001428:	e009      	b.n	800143e <HTTP_Wait_For_Action+0x82>
				Clear_AT_Result();
 800142a:	f000 ff83 	bl	8002334 <Clear_AT_Result>
				http_state = HTTP_MAX_STATE;
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HTTP_Wait_For_Action+0x9c>)
 8001430:	220b      	movs	r2, #11
 8001432:	701a      	strb	r2, [r3, #0]
				break;
 8001434:	e004      	b.n	8001440 <HTTP_Wait_For_Action+0x84>
		}
	}
 8001436:	bf00      	nop
 8001438:	e002      	b.n	8001440 <HTTP_Wait_For_Action+0x84>
				break;
 800143a:	bf00      	nop
 800143c:	e000      	b.n	8001440 <HTTP_Wait_For_Action+0x84>
				break;
 800143e:	bf00      	nop
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200001a0 	.word	0x200001a0
 8001448:	200001ac 	.word	0x200001ac
 800144c:	20000194 	.word	0x20000194
 8001450:	08006de4 	.word	0x08006de4
 8001454:	20003f7c 	.word	0x20003f7c
 8001458:	2000019b 	.word	0x2000019b

0800145c <HTTP_Read>:

/**
 * HTTP_Read()
 * @brief This is function for read HTTP respone body, passing for AT number of read data. Default is MAX_HTTP_BODY = 400
 */
void HTTP_Read(){
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
	uint32_t read_size;
	if(fota_check_version){
 8001462:	4b4a      	ldr	r3, [pc, #296]	; (800158c <HTTP_Read+0x130>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HTTP_Read+0x16>
		read_size = http_response_remain;
 800146a:	4b49      	ldr	r3, [pc, #292]	; (8001590 <HTTP_Read+0x134>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	e059      	b.n	8001526 <HTTP_Read+0xca>
	}
	else{
		static uint8_t num_show_lcd = 0;
		if(http_response_remain == 0){
 8001472:	4b47      	ldr	r3, [pc, #284]	; (8001590 <HTTP_Read+0x134>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10b      	bne.n	8001492 <HTTP_Read+0x36>
			sprintf(logMsg,"Complete 100%");
 800147a:	4946      	ldr	r1, [pc, #280]	; (8001594 <HTTP_Read+0x138>)
 800147c:	4846      	ldr	r0, [pc, #280]	; (8001598 <HTTP_Read+0x13c>)
 800147e:	f004 fe93 	bl	80061a8 <siprintf>
			Lcd_Clear_Display();
 8001482:	f7ff f909 	bl	8000698 <Lcd_Clear_Display>
			Lcd_Show_String(logMsg, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	4843      	ldr	r0, [pc, #268]	; (8001598 <HTTP_Read+0x13c>)
 800148c:	f7ff f91c 	bl	80006c8 <Lcd_Show_String>
 8001490:	e02b      	b.n	80014ea <HTTP_Read+0x8e>
		}
		else if((firmware_size - http_response_remain) > 10240 * num_show_lcd){
 8001492:	4b42      	ldr	r3, [pc, #264]	; (800159c <HTTP_Read+0x140>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	4b3e      	ldr	r3, [pc, #248]	; (8001590 <HTTP_Read+0x134>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	1ad2      	subs	r2, r2, r3
 800149c:	4b40      	ldr	r3, [pc, #256]	; (80015a0 <HTTP_Read+0x144>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4619      	mov	r1, r3
 80014a2:	460b      	mov	r3, r1
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	440b      	add	r3, r1
 80014a8:	02db      	lsls	r3, r3, #11
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d91d      	bls.n	80014ea <HTTP_Read+0x8e>
			sprintf(logMsg,"Complete %ld%",(firmware_size- http_response_remain) * 100 / firmware_size);
 80014ae:	4b3b      	ldr	r3, [pc, #236]	; (800159c <HTTP_Read+0x140>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	4b37      	ldr	r3, [pc, #220]	; (8001590 <HTTP_Read+0x134>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2264      	movs	r2, #100	; 0x64
 80014ba:	fb02 f203 	mul.w	r2, r2, r3
 80014be:	4b37      	ldr	r3, [pc, #220]	; (800159c <HTTP_Read+0x140>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	461a      	mov	r2, r3
 80014c8:	4936      	ldr	r1, [pc, #216]	; (80015a4 <HTTP_Read+0x148>)
 80014ca:	4833      	ldr	r0, [pc, #204]	; (8001598 <HTTP_Read+0x13c>)
 80014cc:	f004 fe6c 	bl	80061a8 <siprintf>
			Lcd_Clear_Display();
 80014d0:	f7ff f8e2 	bl	8000698 <Lcd_Clear_Display>
			Lcd_Show_String(logMsg, 0, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	482f      	ldr	r0, [pc, #188]	; (8001598 <HTTP_Read+0x13c>)
 80014da:	f7ff f8f5 	bl	80006c8 <Lcd_Show_String>
			num_show_lcd ++;
 80014de:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <HTTP_Read+0x144>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	3301      	adds	r3, #1
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <HTTP_Read+0x144>)
 80014e8:	701a      	strb	r2, [r3, #0]
		}
		if(http_response_remain > (FIRMWARE_READ_SIZE_PER_TIME)){
 80014ea:	4b29      	ldr	r3, [pc, #164]	; (8001590 <HTTP_Read+0x134>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014f2:	d909      	bls.n	8001508 <HTTP_Read+0xac>
			read_size = FIRMWARE_READ_SIZE_PER_TIME;
 80014f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014f8:	607b      	str	r3, [r7, #4]
			http_response_remain = http_response_remain -  (FIRMWARE_READ_SIZE_PER_TIME);
 80014fa:	4b25      	ldr	r3, [pc, #148]	; (8001590 <HTTP_Read+0x134>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001502:	4a23      	ldr	r2, [pc, #140]	; (8001590 <HTTP_Read+0x134>)
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e00e      	b.n	8001526 <HTTP_Read+0xca>
		}
		else if (http_response_remain > 0 && http_response_remain < (FIRMWARE_READ_SIZE_PER_TIME)){
 8001508:	4b21      	ldr	r3, [pc, #132]	; (8001590 <HTTP_Read+0x134>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00a      	beq.n	8001526 <HTTP_Read+0xca>
 8001510:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <HTTP_Read+0x134>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001518:	d205      	bcs.n	8001526 <HTTP_Read+0xca>
			read_size = http_response_remain;
 800151a:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <HTTP_Read+0x134>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	607b      	str	r3, [r7, #4]
			http_response_remain = 0;
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <HTTP_Read+0x134>)
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
		}
	}
	if (default_atcommand) {
 8001526:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <HTTP_Read+0x14c>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d004      	beq.n	8001538 <HTTP_Read+0xdc>
		sprintf(http_at_command,"AT+HTTPREAD=0,%d\r\n",read_size);
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	491e      	ldr	r1, [pc, #120]	; (80015ac <HTTP_Read+0x150>)
 8001532:	481f      	ldr	r0, [pc, #124]	; (80015b0 <HTTP_Read+0x154>)
 8001534:	f004 fe38 	bl	80061a8 <siprintf>
	}

	sprintf(logMsg,"http_response_remain: %ld\r\n",http_response_remain);
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HTTP_Read+0x134>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	491d      	ldr	r1, [pc, #116]	; (80015b4 <HTTP_Read+0x158>)
 8001540:	4815      	ldr	r0, [pc, #84]	; (8001598 <HTTP_Read+0x13c>)
 8001542:	f004 fe31 	bl	80061a8 <siprintf>
	LOG(logMsg);
 8001546:	4814      	ldr	r0, [pc, #80]	; (8001598 <HTTP_Read+0x13c>)
 8001548:	f7ff fd58 	bl	8000ffc <UART_DEBUG_Transmit>
	sprintf(logMsg,"firmware_index: %ld\r\n",firmware_index);
 800154c:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <HTTP_Read+0x15c>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	491a      	ldr	r1, [pc, #104]	; (80015bc <HTTP_Read+0x160>)
 8001554:	4810      	ldr	r0, [pc, #64]	; (8001598 <HTTP_Read+0x13c>)
 8001556:	f004 fe27 	bl	80061a8 <siprintf>
	LOG(logMsg);
 800155a:	480f      	ldr	r0, [pc, #60]	; (8001598 <HTTP_Read+0x13c>)
 800155c:	f7ff fd4e 	bl	8000ffc <UART_DEBUG_Transmit>
	UART_SIM7600_Transmit((uint8_t *)http_at_command);
 8001560:	4813      	ldr	r0, [pc, #76]	; (80015b0 <HTTP_Read+0x154>)
 8001562:	f7ff fcb1 	bl	8000ec8 <UART_SIM7600_Transmit>
	Clear_Http_Timeout_Flag();
 8001566:	f000 f8df 	bl	8001728 <Clear_Http_Timeout_Flag>
	SCH_Add_Task(Set_Http_Timeout_Flag, 100, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2164      	movs	r1, #100	; 0x64
 800156e:	4814      	ldr	r0, [pc, #80]	; (80015c0 <HTTP_Read+0x164>)
 8001570:	f000 ff2c 	bl	80023cc <SCH_Add_Task>
	Clear_Http_Command();
 8001574:	f000 fd0e 	bl	8001f94 <Clear_Http_Command>
	HAL_Delay(100);
 8001578:	2064      	movs	r0, #100	; 0x64
 800157a:	f001 fda9 	bl	80030d0 <HAL_Delay>
	http_state = HTTP_WAIT_FOR_READ;
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <HTTP_Read+0x168>)
 8001580:	2207      	movs	r2, #7
 8001582:	701a      	strb	r2, [r3, #0]
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	2000007b 	.word	0x2000007b
 8001590:	200001a0 	.word	0x200001a0
 8001594:	08006dec 	.word	0x08006dec
 8001598:	20003f7c 	.word	0x20003f7c
 800159c:	200001ac 	.word	0x200001ac
 80015a0:	200001ba 	.word	0x200001ba
 80015a4:	08006dfc 	.word	0x08006dfc
 80015a8:	2000007a 	.word	0x2000007a
 80015ac:	08006e0c 	.word	0x08006e0c
 80015b0:	20003550 	.word	0x20003550
 80015b4:	08006e20 	.word	0x08006e20
 80015b8:	200001aa 	.word	0x200001aa
 80015bc:	08006e3c 	.word	0x08006e3c
 80015c0:	08001711 	.word	0x08001711
 80015c4:	2000019b 	.word	0x2000019b

080015c8 <HTTP_Wait_For_Read>:
 * else if AT_Result = AT_NOT_FOUND switch to HTTP_PARA every timeout
 * else if AT_Result = AT_ERROR switch to HTTP_MAX_STATE to reset Simcom7600
 */
char log[50];
uint32_t firmware_index_end;
void HTTP_Wait_For_Read(){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	static FlagStatus flag_ret;
	if(fota_check_version){
 80015cc:	4b26      	ldr	r3, [pc, #152]	; (8001668 <HTTP_Wait_For_Read+0xa0>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d017      	beq.n	8001604 <HTTP_Wait_For_Read+0x3c>
		switch (Get_AT_Result()) {
 80015d4:	f000 fea4 	bl	8002320 <Get_AT_Result>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d13a      	bne.n	8001654 <HTTP_Wait_For_Read+0x8c>
			case AT_OK:
				flag_ret = HTTP_Firmware_Version();
 80015de:	f000 f8af 	bl	8001740 <HTTP_Firmware_Version>
 80015e2:	4603      	mov	r3, r0
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b21      	ldr	r3, [pc, #132]	; (800166c <HTTP_Wait_For_Read+0xa4>)
 80015e8:	701a      	strb	r2, [r3, #0]
				if(flag_ret){
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <HTTP_Wait_For_Read+0xa4>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d032      	beq.n	8001658 <HTTP_Wait_For_Read+0x90>
					fota_check_version = RESET;
 80015f2:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <HTTP_Wait_For_Read+0xa0>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
					Clear_AT_Result();
 80015f8:	f000 fe9c 	bl	8002334 <Clear_AT_Result>
					http_state = HTTP_PARA;
 80015fc:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <HTTP_Wait_For_Read+0xa8>)
 80015fe:	2202      	movs	r2, #2
 8001600:	701a      	strb	r2, [r3, #0]
					return;
 8001602:	e02f      	b.n	8001664 <HTTP_Wait_For_Read+0x9c>
			default:
				break;
		}
	}
	else{
		switch (Get_AT_Result()) {
 8001604:	f000 fe8c 	bl	8002320 <Get_AT_Result>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d126      	bne.n	800165c <HTTP_Wait_For_Read+0x94>
			case AT_OK:
				flag_ret = HTTP_Firmware_Data();
 800160e:	f000 f977 	bl	8001900 <HTTP_Firmware_Data>
 8001612:	4603      	mov	r3, r0
 8001614:	461a      	mov	r2, r3
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <HTTP_Wait_For_Read+0xa4>)
 8001618:	701a      	strb	r2, [r3, #0]
				if(flag_ret){
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <HTTP_Wait_For_Read+0xa4>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d01e      	beq.n	8001660 <HTTP_Wait_For_Read+0x98>
					if(checksum_correct){
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <HTTP_Wait_For_Read+0xac>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d009      	beq.n	800163e <HTTP_Wait_For_Read+0x76>
						if(http_response_remain == 0){
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <HTTP_Wait_For_Read+0xb0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10a      	bne.n	8001648 <HTTP_Wait_For_Read+0x80>
							LOG("Jump To Current Firmware");
 8001632:	4812      	ldr	r0, [pc, #72]	; (800167c <HTTP_Wait_For_Read+0xb4>)
 8001634:	f7ff fce2 	bl	8000ffc <UART_DEBUG_Transmit>
							Jump_To_Current_Firmware();
 8001638:	f001 f950 	bl	80028dc <Jump_To_Current_Firmware>
 800163c:	e004      	b.n	8001648 <HTTP_Wait_For_Read+0x80>
						}
					}
					else{
						LOG("Jump To Factory Firmware");
 800163e:	4810      	ldr	r0, [pc, #64]	; (8001680 <HTTP_Wait_For_Read+0xb8>)
 8001640:	f7ff fcdc 	bl	8000ffc <UART_DEBUG_Transmit>
						Jump_To_Factory_Firmware();
 8001644:	f001 f958 	bl	80028f8 <Jump_To_Factory_Firmware>
					}
					Clear_AT_Result();
 8001648:	f000 fe74 	bl	8002334 <Clear_AT_Result>
					http_state = HTTP_READ;
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HTTP_Wait_For_Read+0xa8>)
 800164e:	2206      	movs	r2, #6
 8001650:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001652:	e005      	b.n	8001660 <HTTP_Wait_For_Read+0x98>
				break;
 8001654:	bf00      	nop
 8001656:	e004      	b.n	8001662 <HTTP_Wait_For_Read+0x9a>
				break;
 8001658:	bf00      	nop
 800165a:	e002      	b.n	8001662 <HTTP_Wait_For_Read+0x9a>
			default:
				break;
 800165c:	bf00      	nop
 800165e:	e000      	b.n	8001662 <HTTP_Wait_For_Read+0x9a>
				break;
 8001660:	bf00      	nop
		}
	}
	return;
 8001662:	bf00      	nop
}
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	2000007b 	.word	0x2000007b
 800166c:	200001bb 	.word	0x200001bb
 8001670:	2000019b 	.word	0x2000019b
 8001674:	2000007c 	.word	0x2000007c
 8001678:	200001a0 	.word	0x200001a0
 800167c:	08006e54 	.word	0x08006e54
 8001680:	08006e70 	.word	0x08006e70

08001684 <HTTP_Term>:

/**
 * HTTP_Term()
 * @brief This is function for terminaring HTTP Service
 */
void HTTP_Term(){
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
//	Clear_Reiceive_Buffer();
	if (default_atcommand) {
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <HTTP_Term+0x28>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HTTP_Term+0x14>
		sprintf(http_at_command,"AT+HTTPTERM\r\n");
 8001690:	4907      	ldr	r1, [pc, #28]	; (80016b0 <HTTP_Term+0x2c>)
 8001692:	4808      	ldr	r0, [pc, #32]	; (80016b4 <HTTP_Term+0x30>)
 8001694:	f004 fd88 	bl	80061a8 <siprintf>
	}
	UART_SIM7600_Transmit((uint8_t*)http_at_command);
 8001698:	4806      	ldr	r0, [pc, #24]	; (80016b4 <HTTP_Term+0x30>)
 800169a:	f7ff fc15 	bl	8000ec8 <UART_SIM7600_Transmit>
	Clear_Http_Command();
 800169e:	f000 fc79 	bl	8001f94 <Clear_Http_Command>
	http_state = HTTP_WAIT_FOR_TERM;
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HTTP_Term+0x34>)
 80016a4:	2209      	movs	r2, #9
 80016a6:	701a      	strb	r2, [r3, #0]
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	2000007a 	.word	0x2000007a
 80016b0:	08006e8c 	.word	0x08006e8c
 80016b4:	20003550 	.word	0x20003550
 80016b8:	2000019b 	.word	0x2000019b

080016bc <HTTP_Wait_For_Term>:
 * HTTP_Wait_For_Term()
 * @brief This is function for waiting HTTP_TERM state respone
 * If AT_Result is AT_OK so switch to HTTP_DONE
 * else switch to HTTP_MAX_STATE and reset Simcom7600
 */
void HTTP_Wait_For_Term(){
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
//	Wait_For_Respone(AT_OK);
	switch (Get_AT_Result()){
 80016c0:	f000 fe2e 	bl	8002320 <Get_AT_Result>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d002      	beq.n	80016d0 <HTTP_Wait_For_Term+0x14>
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d006      	beq.n	80016dc <HTTP_Wait_For_Term+0x20>
		case AT_ERROR:
			Clear_AT_Result();
			http_state=HTTP_MAX_STATE;
			break;
		default:
			break;
 80016ce:	e00b      	b.n	80016e8 <HTTP_Wait_For_Term+0x2c>
			Clear_AT_Result();
 80016d0:	f000 fe30 	bl	8002334 <Clear_AT_Result>
			http_state=HTTP_INIT;
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HTTP_Wait_For_Term+0x30>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
			break;
 80016da:	e005      	b.n	80016e8 <HTTP_Wait_For_Term+0x2c>
			Clear_AT_Result();
 80016dc:	f000 fe2a 	bl	8002334 <Clear_AT_Result>
			http_state=HTTP_MAX_STATE;
 80016e0:	4b02      	ldr	r3, [pc, #8]	; (80016ec <HTTP_Wait_For_Term+0x30>)
 80016e2:	220b      	movs	r2, #11
 80016e4:	701a      	strb	r2, [r3, #0]
			break;
 80016e6:	bf00      	nop
	}
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	2000019b 	.word	0x2000019b

080016f0 <HTTP_Done>:

/**
 * HTTP_Done()
 * @brief This is function for waiting FSM get out of HTTP Operation
 */
void HTTP_Done(){
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
	return;
 80016f4:	bf00      	nop
}
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <is_Http_TimeOutFlag>:
/**
 * is_Http_TimeOutFlag()
 * @brief Get http_timeout_flag
 * @return http_timeout_flag
 */
FlagStatus is_Http_TimeOutFlag(void){
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
	return http_timeout_flag;
 8001700:	4b02      	ldr	r3, [pc, #8]	; (800170c <is_Http_TimeOutFlag+0x10>)
 8001702:	781b      	ldrb	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	20000079 	.word	0x20000079

08001710 <Set_Http_Timeout_Flag>:

/**
 * Set_Http_Timeout_Flag()
 * @brief Set http_timeout_flag to SET
 */
void Set_Http_Timeout_Flag(void){
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	http_timeout_flag = SET;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <Set_Http_Timeout_Flag+0x14>)
 8001716:	2201      	movs	r2, #1
 8001718:	701a      	strb	r2, [r3, #0]
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000079 	.word	0x20000079

08001728 <Clear_Http_Timeout_Flag>:

/**
 * Clear_Http_Timeout_Flag()
 * @brief Clear http_timeout_flag to RESET
 */
void Clear_Http_Timeout_Flag(void){
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
	http_timeout_flag = RESET;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <Clear_Http_Timeout_Flag+0x14>)
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000079 	.word	0x20000079

08001740 <HTTP_Firmware_Version>:

uint8_t temp_version_name_buffer[TEMP_VERSION_BUFFER_LENGTH];
uint8_t temp_version_name_index = 0;
FlagStatus prepare_record_version_name = RESET;
FlagStatus start_record_version_name = RESET;
FlagStatus HTTP_Firmware_Version(){
 8001740:	b598      	push	{r3, r4, r7, lr}
 8001742:	af00      	add	r7, sp, #0
	if(UART_SIM7600_Received_Buffer_Available()){
 8001744:	f7ff fbec 	bl	8000f20 <UART_SIM7600_Received_Buffer_Available>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d059      	beq.n	8001802 <HTTP_Firmware_Version+0xc2>
		temp_version_name_buffer[temp_version_name_index] = UART_SIM7600_Read_Received_Buffer();
 800174e:	4b2e      	ldr	r3, [pc, #184]	; (8001808 <HTTP_Firmware_Version+0xc8>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	461c      	mov	r4, r3
 8001754:	f7ff fbfa 	bl	8000f4c <UART_SIM7600_Read_Received_Buffer>
 8001758:	4603      	mov	r3, r0
 800175a:	461a      	mov	r2, r3
 800175c:	4b2b      	ldr	r3, [pc, #172]	; (800180c <HTTP_Firmware_Version+0xcc>)
 800175e:	551a      	strb	r2, [r3, r4]
//		UART_DEBUG_Transmit_Size(temp_version_name_buffer + temp_version_name_index, 1);
		if(isReceiveData_New(temp_version_name_buffer, temp_version_name_index + 1, TEMP_VERSION_BUFFER_LENGTH, "+HTTPREAD: DATA")){
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <HTTP_Firmware_Version+0xc8>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	1c59      	adds	r1, r3, #1
 8001766:	4b2a      	ldr	r3, [pc, #168]	; (8001810 <HTTP_Firmware_Version+0xd0>)
 8001768:	2264      	movs	r2, #100	; 0x64
 800176a:	4828      	ldr	r0, [pc, #160]	; (800180c <HTTP_Firmware_Version+0xcc>)
 800176c:	f000 fc60 	bl	8002030 <isReceiveData_New>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d002      	beq.n	800177c <HTTP_Firmware_Version+0x3c>
			prepare_record_version_name = SET;
 8001776:	4b27      	ldr	r3, [pc, #156]	; (8001814 <HTTP_Firmware_Version+0xd4>)
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
		}
		if(prepare_record_version_name){
 800177c:	4b25      	ldr	r3, [pc, #148]	; (8001814 <HTTP_Firmware_Version+0xd4>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d02e      	beq.n	80017e2 <HTTP_Firmware_Version+0xa2>
			if(start_record_version_name){
 8001784:	4b24      	ldr	r3, [pc, #144]	; (8001818 <HTTP_Firmware_Version+0xd8>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d01c      	beq.n	80017c6 <HTTP_Firmware_Version+0x86>
				//Check whether stop record version name
				if(temp_version_name_buffer[temp_version_name_index]=='\r'){
 800178c:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <HTTP_Firmware_Version+0xc8>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b1e      	ldr	r3, [pc, #120]	; (800180c <HTTP_Firmware_Version+0xcc>)
 8001794:	5c9b      	ldrb	r3, [r3, r2]
 8001796:	2b0d      	cmp	r3, #13
 8001798:	d107      	bne.n	80017aa <HTTP_Firmware_Version+0x6a>
					start_record_version_name = RESET;
 800179a:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <HTTP_Firmware_Version+0xd8>)
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
					prepare_record_version_name = RESET;
 80017a0:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <HTTP_Firmware_Version+0xd4>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
					return SET;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e02c      	b.n	8001804 <HTTP_Firmware_Version+0xc4>
				}
				else{
					version[version_index++] = temp_version_name_buffer[temp_version_name_index];
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <HTTP_Firmware_Version+0xc8>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	4619      	mov	r1, r3
 80017b0:	4b1a      	ldr	r3, [pc, #104]	; (800181c <HTTP_Firmware_Version+0xdc>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	b2d0      	uxtb	r0, r2
 80017b8:	4a18      	ldr	r2, [pc, #96]	; (800181c <HTTP_Firmware_Version+0xdc>)
 80017ba:	7010      	strb	r0, [r2, #0]
 80017bc:	461a      	mov	r2, r3
 80017be:	4b13      	ldr	r3, [pc, #76]	; (800180c <HTTP_Firmware_Version+0xcc>)
 80017c0:	5c59      	ldrb	r1, [r3, r1]
 80017c2:	4b17      	ldr	r3, [pc, #92]	; (8001820 <HTTP_Firmware_Version+0xe0>)
 80017c4:	5499      	strb	r1, [r3, r2]
				}
			}
			if(isReceiveData_New(temp_version_name_buffer, temp_version_name_index + 1, TEMP_VERSION_BUFFER_LENGTH, "\r\n")){
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <HTTP_Firmware_Version+0xc8>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	1c59      	adds	r1, r3, #1
 80017cc:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HTTP_Firmware_Version+0xe4>)
 80017ce:	2264      	movs	r2, #100	; 0x64
 80017d0:	480e      	ldr	r0, [pc, #56]	; (800180c <HTTP_Firmware_Version+0xcc>)
 80017d2:	f000 fc2d 	bl	8002030 <isReceiveData_New>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <HTTP_Firmware_Version+0xa2>
				start_record_version_name = SET;
 80017dc:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <HTTP_Firmware_Version+0xd8>)
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
			}

		}
		temp_version_name_index = (temp_version_name_index + 1)% TEMP_VERSION_BUFFER_LENGTH;
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HTTP_Firmware_Version+0xc8>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	3301      	adds	r3, #1
 80017e8:	4a0f      	ldr	r2, [pc, #60]	; (8001828 <HTTP_Firmware_Version+0xe8>)
 80017ea:	fb82 1203 	smull	r1, r2, r2, r3
 80017ee:	1151      	asrs	r1, r2, #5
 80017f0:	17da      	asrs	r2, r3, #31
 80017f2:	1a8a      	subs	r2, r1, r2
 80017f4:	2164      	movs	r1, #100	; 0x64
 80017f6:	fb01 f202 	mul.w	r2, r1, r2
 80017fa:	1a9a      	subs	r2, r3, r2
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	4b02      	ldr	r3, [pc, #8]	; (8001808 <HTTP_Firmware_Version+0xc8>)
 8001800:	701a      	strb	r2, [r3, #0]
	}
	return RESET;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	bd98      	pop	{r3, r4, r7, pc}
 8001808:	200001b0 	.word	0x200001b0
 800180c:	20003f18 	.word	0x20003f18
 8001810:	08006eb0 	.word	0x08006eb0
 8001814:	200001b1 	.word	0x200001b1
 8001818:	200001b2 	.word	0x200001b2
 800181c:	20000190 	.word	0x20000190
 8001820:	20002530 	.word	0x20002530
 8001824:	08006ec0 	.word	0x08006ec0
 8001828:	51eb851f 	.word	0x51eb851f

0800182c <is_Firmware_Line_Data_Correct>:

/*
 * Line is: ":0101010101010 and checksum :01, last is "\r\n""
 * We ignore ':' character and calculate checksum from 01....010 and ignore checksum value
 */
FlagStatus is_Firmware_Line_Data_Correct(uint8_t *buffer, uint16_t buffer_len){
 800182c:	b590      	push	{r4, r7, lr}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	807b      	strh	r3, [r7, #2]
	static FlagStatus ret;
	checksum = 0;
 8001838:	4b2f      	ldr	r3, [pc, #188]	; (80018f8 <is_Firmware_Line_Data_Correct+0xcc>)
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]

	for (uint16_t var = 0; var < buffer_len - 3 - 2; var=var+2) {
 800183e:	2300      	movs	r3, #0
 8001840:	81fb      	strh	r3, [r7, #14]
 8001842:	e01f      	b.n	8001884 <is_Firmware_Line_Data_Correct+0x58>
//		sprintf(log,"%c-%c\r\n",buffer[var],buffer[var+1]);
//		LOG(log);
		checksum = checksum + (Char2Hex(buffer[var]) << 4) + Char2Hex(buffer[var+1]);
 8001844:	89fb      	ldrh	r3, [r7, #14]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f000 fc37 	bl	80020c0 <Char2Hex>
 8001852:	4603      	mov	r3, r0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <is_Firmware_Line_Data_Correct+0xcc>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	4413      	add	r3, r2
 8001860:	b2dc      	uxtb	r4, r3
 8001862:	89fb      	ldrh	r3, [r7, #14]
 8001864:	3301      	adds	r3, #1
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f000 fc27 	bl	80020c0 <Char2Hex>
 8001872:	4603      	mov	r3, r0
 8001874:	b2db      	uxtb	r3, r3
 8001876:	4423      	add	r3, r4
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <is_Firmware_Line_Data_Correct+0xcc>)
 800187c:	701a      	strb	r2, [r3, #0]
	for (uint16_t var = 0; var < buffer_len - 3 - 2; var=var+2) {
 800187e:	89fb      	ldrh	r3, [r7, #14]
 8001880:	3302      	adds	r3, #2
 8001882:	81fb      	strh	r3, [r7, #14]
 8001884:	89fa      	ldrh	r2, [r7, #14]
 8001886:	887b      	ldrh	r3, [r7, #2]
 8001888:	3b05      	subs	r3, #5
 800188a:	429a      	cmp	r2, r3
 800188c:	dbda      	blt.n	8001844 <is_Firmware_Line_Data_Correct+0x18>
	}
	checksum =~checksum;
 800188e:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <is_Firmware_Line_Data_Correct+0xcc>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	43db      	mvns	r3, r3
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <is_Firmware_Line_Data_Correct+0xcc>)
 8001898:	701a      	strb	r2, [r3, #0]
	checksum += 1;
 800189a:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <is_Firmware_Line_Data_Correct+0xcc>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <is_Firmware_Line_Data_Correct+0xcc>)
 80018a4:	701a      	strb	r2, [r3, #0]
	uint8_t checksum_inline = (Char2Hex(buffer[buffer_len - 3 -2 ]) << 4) + Char2Hex(buffer[buffer_len -3-2 +1 ]);
 80018a6:	887b      	ldrh	r3, [r7, #2]
 80018a8:	3b05      	subs	r3, #5
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f000 fc05 	bl	80020c0 <Char2Hex>
 80018b6:	4603      	mov	r3, r0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	b2dc      	uxtb	r4, r3
 80018be:	887b      	ldrh	r3, [r7, #2]
 80018c0:	3b04      	subs	r3, #4
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f000 fbf9 	bl	80020c0 <Char2Hex>
 80018ce:	4603      	mov	r3, r0
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	4423      	add	r3, r4
 80018d4:	737b      	strb	r3, [r7, #13]
//	sprintf(log,"Check sum %x\r\n",checksum);
//	LOG(log);
//	sprintf(log,"Calculated Check sum %x\r\n",checksum_inline);
//	LOG(log);
	ret = (checksum == checksum_inline);
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <is_Firmware_Line_Data_Correct+0xcc>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	7b7a      	ldrb	r2, [r7, #13]
 80018dc:	429a      	cmp	r2, r3
 80018de:	bf0c      	ite	eq
 80018e0:	2301      	moveq	r3, #1
 80018e2:	2300      	movne	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <is_Firmware_Line_Data_Correct+0xd0>)
 80018ea:	701a      	strb	r2, [r3, #0]
	return ret;
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <is_Firmware_Line_Data_Correct+0xd0>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd90      	pop	{r4, r7, pc}
 80018f8:	2000019c 	.word	0x2000019c
 80018fc:	200001bc 	.word	0x200001bc

08001900 <HTTP_Firmware_Data>:
uint8_t temp_at_response_buffer[LINE_BUFFER_LENGTH];
uint16_t temp_at_response_index = 0;
uint8_t temp_char;
char new_log[10];
FlagStatus first_http_read = SET;
FlagStatus HTTP_Firmware_Data(){
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
	 *  	"data": "0ABCDGEGGASD...
	 *  			ASDB12312512412...
	 *  			01231291512925192"
	 *  So We need seperate "new_version" and "checksum" field out of "data"
	 */
	if(UART_SIM7600_Received_Buffer_Available()){
 8001906:	f7ff fb0b 	bl	8000f20 <UART_SIM7600_Received_Buffer_Available>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 82ea 	beq.w	8001ee6 <HTTP_Firmware_Data+0x5e6>
		temp_at_response_buffer[temp_at_response_index] = UART_SIM7600_Read_Received_Buffer();
 8001912:	4ba6      	ldr	r3, [pc, #664]	; (8001bac <HTTP_Firmware_Data+0x2ac>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	461c      	mov	r4, r3
 8001918:	f7ff fb18 	bl	8000f4c <UART_SIM7600_Read_Received_Buffer>
 800191c:	4603      	mov	r3, r0
 800191e:	461a      	mov	r2, r3
 8001920:	4ba3      	ldr	r3, [pc, #652]	; (8001bb0 <HTTP_Firmware_Data+0x2b0>)
 8001922:	551a      	strb	r2, [r3, r4]
//		UART_DEBUG_Transmit_Size(temp_at_response_buffer + temp_at_response_index, 1);
		//Check if end of SIM respond
		if(isReceiveData_New(temp_at_response_buffer, temp_at_response_index+1, LINE_BUFFER_LENGTH, "\r\n+HTTPREAD:0")){
 8001924:	4ba1      	ldr	r3, [pc, #644]	; (8001bac <HTTP_Firmware_Data+0x2ac>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	1c59      	adds	r1, r3, #1
 800192a:	4ba2      	ldr	r3, [pc, #648]	; (8001bb4 <HTTP_Firmware_Data+0x2b4>)
 800192c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001930:	489f      	ldr	r0, [pc, #636]	; (8001bb0 <HTTP_Firmware_Data+0x2b0>)
 8001932:	f000 fb7d 	bl	8002030 <isReceiveData_New>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d060      	beq.n	80019fe <HTTP_Firmware_Data+0xfe>
//			LOG("1");
			if(firmware_index >= PAGESIZE){
 800193c:	4b9e      	ldr	r3, [pc, #632]	; (8001bb8 <HTTP_Firmware_Data+0x2b8>)
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001944:	d331      	bcc.n	80019aa <HTTP_Firmware_Data+0xaa>
				Flash_Erase(firmware_address, 1);
 8001946:	4b9d      	ldr	r3, [pc, #628]	; (8001bbc <HTTP_Firmware_Data+0x2bc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2101      	movs	r1, #1
 800194c:	4618      	mov	r0, r3
 800194e:	f000 fff7 	bl	8002940 <Flash_Erase>
				Flash_Write_Char(firmware_address, firmware_data, PAGESIZE);
 8001952:	4b9a      	ldr	r3, [pc, #616]	; (8001bbc <HTTP_Firmware_Data+0x2bc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800195a:	4999      	ldr	r1, [pc, #612]	; (8001bc0 <HTTP_Firmware_Data+0x2c0>)
 800195c:	4618      	mov	r0, r3
 800195e:	f001 f841 	bl	80029e4 <Flash_Write_Char>
//				LOG("3");
				firmware_address+= PAGESIZE;
 8001962:	4b96      	ldr	r3, [pc, #600]	; (8001bbc <HTTP_Firmware_Data+0x2bc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800196a:	4a94      	ldr	r2, [pc, #592]	; (8001bbc <HTTP_Firmware_Data+0x2bc>)
 800196c:	6013      	str	r3, [r2, #0]
//				memcpy(firmware_data,firmware_data+PAGESIZE,firmware_index-PAGESIZE);
				for (int var = PAGESIZE; var < firmware_index; ++var) {
 800196e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	e00b      	b.n	800198e <HTTP_Firmware_Data+0x8e>
					firmware_data[var-PAGESIZE] = firmware_data[var];
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800197c:	4990      	ldr	r1, [pc, #576]	; (8001bc0 <HTTP_Firmware_Data+0x2c0>)
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	440a      	add	r2, r1
 8001982:	7811      	ldrb	r1, [r2, #0]
 8001984:	4a8e      	ldr	r2, [pc, #568]	; (8001bc0 <HTTP_Firmware_Data+0x2c0>)
 8001986:	54d1      	strb	r1, [r2, r3]
				for (int var = PAGESIZE; var < firmware_index; ++var) {
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	3301      	adds	r3, #1
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b8a      	ldr	r3, [pc, #552]	; (8001bb8 <HTTP_Firmware_Data+0x2b8>)
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	461a      	mov	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4293      	cmp	r3, r2
 8001998:	dbed      	blt.n	8001976 <HTTP_Firmware_Data+0x76>
				}
				firmware_index = firmware_index - PAGESIZE;
 800199a:	4b87      	ldr	r3, [pc, #540]	; (8001bb8 <HTTP_Firmware_Data+0x2b8>)
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	4b84      	ldr	r3, [pc, #528]	; (8001bb8 <HTTP_Firmware_Data+0x2b8>)
 80019a6:	801a      	strh	r2, [r3, #0]
 80019a8:	e01e      	b.n	80019e8 <HTTP_Firmware_Data+0xe8>
			}
			else if(http_response_remain == 0){
 80019aa:	4b86      	ldr	r3, [pc, #536]	; (8001bc4 <HTTP_Firmware_Data+0x2c4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d11a      	bne.n	80019e8 <HTTP_Firmware_Data+0xe8>
				Flash_Erase(firmware_address, firmware_index);
 80019b2:	4b82      	ldr	r3, [pc, #520]	; (8001bbc <HTTP_Firmware_Data+0x2bc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a80      	ldr	r2, [pc, #512]	; (8001bb8 <HTTP_Firmware_Data+0x2b8>)
 80019b8:	8812      	ldrh	r2, [r2, #0]
 80019ba:	4611      	mov	r1, r2
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 ffbf 	bl	8002940 <Flash_Erase>
				Flash_Write_Char(firmware_address, firmware_data, firmware_index);
 80019c2:	4b7e      	ldr	r3, [pc, #504]	; (8001bbc <HTTP_Firmware_Data+0x2bc>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a7c      	ldr	r2, [pc, #496]	; (8001bb8 <HTTP_Firmware_Data+0x2b8>)
 80019c8:	8812      	ldrh	r2, [r2, #0]
 80019ca:	497d      	ldr	r1, [pc, #500]	; (8001bc0 <HTTP_Firmware_Data+0x2c0>)
 80019cc:	4618      	mov	r0, r3
 80019ce:	f001 f809 	bl	80029e4 <Flash_Write_Char>
				firmware_address+= firmware_index;
 80019d2:	4b79      	ldr	r3, [pc, #484]	; (8001bb8 <HTTP_Firmware_Data+0x2b8>)
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	4b78      	ldr	r3, [pc, #480]	; (8001bbc <HTTP_Firmware_Data+0x2bc>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4413      	add	r3, r2
 80019de:	4a77      	ldr	r2, [pc, #476]	; (8001bbc <HTTP_Firmware_Data+0x2bc>)
 80019e0:	6013      	str	r3, [r2, #0]
				firmware_index = 0;
 80019e2:	4b75      	ldr	r3, [pc, #468]	; (8001bb8 <HTTP_Firmware_Data+0x2b8>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	801a      	strh	r2, [r3, #0]
			}
			line_buffer_index = line_buffer_index - strlen("\r\n+HTTPREAD:0") + 1;
 80019e8:	4b77      	ldr	r3, [pc, #476]	; (8001bc8 <HTTP_Firmware_Data+0x2c8>)
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	3b0c      	subs	r3, #12
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	4b75      	ldr	r3, [pc, #468]	; (8001bc8 <HTTP_Firmware_Data+0x2c8>)
 80019f2:	801a      	strh	r2, [r3, #0]
			start_record_firmware_data = RESET;
 80019f4:	4b75      	ldr	r3, [pc, #468]	; (8001bcc <HTTP_Firmware_Data+0x2cc>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
			return SET;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e274      	b.n	8001ee8 <HTTP_Firmware_Data+0x5e8>
		}
		// Check whether start of SIM Respond
		else if(isReceiveData_New(temp_at_response_buffer, temp_at_response_index+1, LINE_BUFFER_LENGTH, "HTTPREAD: DATA")){
 80019fe:	4b6b      	ldr	r3, [pc, #428]	; (8001bac <HTTP_Firmware_Data+0x2ac>)
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	1c59      	adds	r1, r3, #1
 8001a04:	4b72      	ldr	r3, [pc, #456]	; (8001bd0 <HTTP_Firmware_Data+0x2d0>)
 8001a06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a0a:	4869      	ldr	r0, [pc, #420]	; (8001bb0 <HTTP_Firmware_Data+0x2b0>)
 8001a0c:	f000 fb10 	bl	8002030 <isReceiveData_New>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d004      	beq.n	8001a20 <HTTP_Firmware_Data+0x120>
//			LOG("2");
			prepare_record_firmware_data = SET;
 8001a16:	4b6f      	ldr	r3, [pc, #444]	; (8001bd4 <HTTP_Firmware_Data+0x2d4>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
			return RESET;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	e263      	b.n	8001ee8 <HTTP_Firmware_Data+0x5e8>
		}
		else if(prepare_record_firmware_data){
 8001a20:	4b6c      	ldr	r3, [pc, #432]	; (8001bd4 <HTTP_Firmware_Data+0x2d4>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d014      	beq.n	8001a52 <HTTP_Firmware_Data+0x152>
//			LOG("3");
			if(isReceiveData_New(temp_at_response_buffer, temp_at_response_index+1, LINE_BUFFER_LENGTH, "\r\n")){
 8001a28:	4b60      	ldr	r3, [pc, #384]	; (8001bac <HTTP_Firmware_Data+0x2ac>)
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	1c59      	adds	r1, r3, #1
 8001a2e:	4b6a      	ldr	r3, [pc, #424]	; (8001bd8 <HTTP_Firmware_Data+0x2d8>)
 8001a30:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a34:	485e      	ldr	r0, [pc, #376]	; (8001bb0 <HTTP_Firmware_Data+0x2b0>)
 8001a36:	f000 fafb 	bl	8002030 <isReceiveData_New>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 8241 	beq.w	8001ec4 <HTTP_Firmware_Data+0x5c4>
				start_record_firmware_data = SET;
 8001a42:	4b62      	ldr	r3, [pc, #392]	; (8001bcc <HTTP_Firmware_Data+0x2cc>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]
				prepare_record_firmware_data = RESET;
 8001a48:	4b62      	ldr	r3, [pc, #392]	; (8001bd4 <HTTP_Firmware_Data+0x2d4>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
				// reset line_index
				return RESET;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e24a      	b.n	8001ee8 <HTTP_Firmware_Data+0x5e8>
			}
		}
		else if(start_record_firmware_data){
 8001a52:	4b5e      	ldr	r3, [pc, #376]	; (8001bcc <HTTP_Firmware_Data+0x2cc>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 8234 	beq.w	8001ec4 <HTTP_Firmware_Data+0x5c4>
//			LOG("4");
			// Check whether that data is not end of HTTP READ
			line_buffer[line_buffer_index] = temp_at_response_buffer[temp_at_response_index];
 8001a5c:	4b53      	ldr	r3, [pc, #332]	; (8001bac <HTTP_Firmware_Data+0x2ac>)
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	4619      	mov	r1, r3
 8001a62:	4b59      	ldr	r3, [pc, #356]	; (8001bc8 <HTTP_Firmware_Data+0x2c8>)
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	4b51      	ldr	r3, [pc, #324]	; (8001bb0 <HTTP_Firmware_Data+0x2b0>)
 8001a6a:	5c59      	ldrb	r1, [r3, r1]
 8001a6c:	4b5b      	ldr	r3, [pc, #364]	; (8001bdc <HTTP_Firmware_Data+0x2dc>)
 8001a6e:	5499      	strb	r1, [r3, r2]
			line_buffer_index = (line_buffer_index +1)%LINE_BUFFER_LENGTH;
 8001a70:	4b55      	ldr	r3, [pc, #340]	; (8001bc8 <HTTP_Firmware_Data+0x2c8>)
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	3301      	adds	r3, #1
 8001a76:	4a5a      	ldr	r2, [pc, #360]	; (8001be0 <HTTP_Firmware_Data+0x2e0>)
 8001a78:	fb82 1203 	smull	r1, r2, r2, r3
 8001a7c:	1151      	asrs	r1, r2, #5
 8001a7e:	17da      	asrs	r2, r3, #31
 8001a80:	1a8a      	subs	r2, r1, r2
 8001a82:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001a86:	fb01 f202 	mul.w	r2, r1, r2
 8001a8a:	1a9a      	subs	r2, r3, r2
 8001a8c:	b292      	uxth	r2, r2
 8001a8e:	4b4e      	ldr	r3, [pc, #312]	; (8001bc8 <HTTP_Firmware_Data+0x2c8>)
 8001a90:	801a      	strh	r2, [r3, #0]
			if(http_response_remain == 0){
 8001a92:	4b4c      	ldr	r3, [pc, #304]	; (8001bc4 <HTTP_Firmware_Data+0x2c4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f040 8122 	bne.w	8001ce0 <HTTP_Firmware_Data+0x3e0>
				if(isReceiveData_New(line_buffer, line_buffer_index, LINE_BUFFER_LENGTH, "\r\n+")|| isReceiveData_New(line_buffer, line_buffer_index, LINE_BUFFER_LENGTH, "\r\n:")){
 8001a9c:	4b4a      	ldr	r3, [pc, #296]	; (8001bc8 <HTTP_Firmware_Data+0x2c8>)
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4b50      	ldr	r3, [pc, #320]	; (8001be4 <HTTP_Firmware_Data+0x2e4>)
 8001aa4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001aa8:	484c      	ldr	r0, [pc, #304]	; (8001bdc <HTTP_Firmware_Data+0x2dc>)
 8001aaa:	f000 fac1 	bl	8002030 <isReceiveData_New>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d10c      	bne.n	8001ace <HTTP_Firmware_Data+0x1ce>
 8001ab4:	4b44      	ldr	r3, [pc, #272]	; (8001bc8 <HTTP_Firmware_Data+0x2c8>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4b4b      	ldr	r3, [pc, #300]	; (8001be8 <HTTP_Firmware_Data+0x2e8>)
 8001abc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ac0:	4846      	ldr	r0, [pc, #280]	; (8001bdc <HTTP_Firmware_Data+0x2dc>)
 8001ac2:	f000 fab5 	bl	8002030 <isReceiveData_New>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 81fb 	beq.w	8001ec4 <HTTP_Firmware_Data+0x5c4>
					if(isReceiveData_New(line_buffer, line_buffer_index, LINE_BUFFER_LENGTH, "\r\n+")){
 8001ace:	4b3e      	ldr	r3, [pc, #248]	; (8001bc8 <HTTP_Firmware_Data+0x2c8>)
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4b43      	ldr	r3, [pc, #268]	; (8001be4 <HTTP_Firmware_Data+0x2e4>)
 8001ad6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ada:	4840      	ldr	r0, [pc, #256]	; (8001bdc <HTTP_Firmware_Data+0x2dc>)
 8001adc:	f000 faa8 	bl	8002030 <isReceiveData_New>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d005      	beq.n	8001af2 <HTTP_Firmware_Data+0x1f2>
						line_buffer_index-=2;
 8001ae6:	4b38      	ldr	r3, [pc, #224]	; (8001bc8 <HTTP_Firmware_Data+0x2c8>)
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	3b02      	subs	r3, #2
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	4b36      	ldr	r3, [pc, #216]	; (8001bc8 <HTTP_Firmware_Data+0x2c8>)
 8001af0:	801a      	strh	r2, [r3, #0]
//					sprintf(log,"\r\ntemp_at_response_index: %ld\r\n",temp_at_response_index);
//					LOG(log);
//					sprintf(log,"\r\nline_buffer_index: %ld\r\n",line_buffer_index);
//					LOG(log);
					// Calculator checksum
					if(first_http_read){
 8001af2:	4b3e      	ldr	r3, [pc, #248]	; (8001bec <HTTP_Firmware_Data+0x2ec>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d006      	beq.n	8001b08 <HTTP_Firmware_Data+0x208>
						first_http_read = RESET;
 8001afa:	4b3c      	ldr	r3, [pc, #240]	; (8001bec <HTTP_Firmware_Data+0x2ec>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
						line_buffer_index = 0;
 8001b00:	4b31      	ldr	r3, [pc, #196]	; (8001bc8 <HTTP_Firmware_Data+0x2c8>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	801a      	strh	r2, [r3, #0]
 8001b06:	e1dd      	b.n	8001ec4 <HTTP_Firmware_Data+0x5c4>
					}
					else{
						if(is_Firmware_Line_Data_Correct(line_buffer, line_buffer_index)){
 8001b08:	4b2f      	ldr	r3, [pc, #188]	; (8001bc8 <HTTP_Firmware_Data+0x2c8>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4833      	ldr	r0, [pc, #204]	; (8001bdc <HTTP_Firmware_Data+0x2dc>)
 8001b10:	f7ff fe8c 	bl	800182c <is_Firmware_Line_Data_Correct>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 80da 	beq.w	8001cd0 <HTTP_Firmware_Data+0x3d0>
							// Check whether that line is the firmware data or not
							if(Char2Hex(line_buffer[7])==0){
 8001b1c:	4b2f      	ldr	r3, [pc, #188]	; (8001bdc <HTTP_Firmware_Data+0x2dc>)
 8001b1e:	79db      	ldrb	r3, [r3, #7]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 facd 	bl	80020c0 <Char2Hex>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f040 80cd 	bne.w	8001cc8 <HTTP_Firmware_Data+0x3c8>
								firmware_address_curr_offet = ((uint16_t)(Char2Hex(line_buffer[2]))<<12) +((uint16_t)(Char2Hex(line_buffer[3]))<<8) +((uint16_t)(Char2Hex(line_buffer[4]))<<4)+(uint16_t)(Char2Hex(line_buffer[5]));
 8001b2e:	4b2b      	ldr	r3, [pc, #172]	; (8001bdc <HTTP_Firmware_Data+0x2dc>)
 8001b30:	789b      	ldrb	r3, [r3, #2]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 fac4 	bl	80020c0 <Char2Hex>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	031b      	lsls	r3, r3, #12
 8001b3e:	b29c      	uxth	r4, r3
 8001b40:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <HTTP_Firmware_Data+0x2dc>)
 8001b42:	78db      	ldrb	r3, [r3, #3]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 fabb 	bl	80020c0 <Char2Hex>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	4423      	add	r3, r4
 8001b54:	b29c      	uxth	r4, r3
 8001b56:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <HTTP_Firmware_Data+0x2dc>)
 8001b58:	791b      	ldrb	r3, [r3, #4]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 fab0 	bl	80020c0 <Char2Hex>
 8001b60:	4603      	mov	r3, r0
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	4423      	add	r3, r4
 8001b6a:	b29c      	uxth	r4, r3
 8001b6c:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <HTTP_Firmware_Data+0x2dc>)
 8001b6e:	795b      	ldrb	r3, [r3, #5]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f000 faa5 	bl	80020c0 <Char2Hex>
 8001b76:	4603      	mov	r3, r0
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	4423      	add	r3, r4
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <HTTP_Firmware_Data+0x2f0>)
 8001b80:	801a      	strh	r2, [r3, #0]
								if(firmware_address_prev_offet >= 0xFFF0){
 8001b82:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <HTTP_Firmware_Data+0x2f4>)
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d938      	bls.n	8001c00 <HTTP_Firmware_Data+0x300>
									num_byte_FF_add_to_end_buffer = 0xFFFF - firmware_address_prev_offet + 1 + firmware_address_curr_offet -  (uint16_t)prev_num_byte;
 8001b8e:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <HTTP_Firmware_Data+0x2f0>)
 8001b90:	881a      	ldrh	r2, [r3, #0]
 8001b92:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <HTTP_Firmware_Data+0x2f4>)
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <HTTP_Firmware_Data+0x2f8>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <HTTP_Firmware_Data+0x2fc>)
 8001ba6:	801a      	strh	r2, [r3, #0]
 8001ba8:	e037      	b.n	8001c1a <HTTP_Firmware_Data+0x31a>
 8001baa:	bf00      	nop
 8001bac:	200001b8 	.word	0x200001b8
 8001bb0:	20002400 	.word	0x20002400
 8001bb4:	08006ec4 	.word	0x08006ec4
 8001bb8:	200001aa 	.word	0x200001aa
 8001bbc:	20000080 	.word	0x20000080
 8001bc0:	2000254c 	.word	0x2000254c
 8001bc4:	200001a0 	.word	0x200001a0
 8001bc8:	200001b6 	.word	0x200001b6
 8001bcc:	200001b4 	.word	0x200001b4
 8001bd0:	08006ed4 	.word	0x08006ed4
 8001bd4:	200001b3 	.word	0x200001b3
 8001bd8:	08006ec0 	.word	0x08006ec0
 8001bdc:	200035ec 	.word	0x200035ec
 8001be0:	1b4e81b5 	.word	0x1b4e81b5
 8001be4:	08006ee4 	.word	0x08006ee4
 8001be8:	08006ee8 	.word	0x08006ee8
 8001bec:	200000dc 	.word	0x200000dc
 8001bf0:	200001a6 	.word	0x200001a6
 8001bf4:	200001a4 	.word	0x200001a4
 8001bf8:	200001a8 	.word	0x200001a8
 8001bfc:	20000198 	.word	0x20000198
								}
								else{
									num_byte_FF_add_to_end_buffer = firmware_address_curr_offet - firmware_address_prev_offet - prev_num_byte;
 8001c00:	4ba0      	ldr	r3, [pc, #640]	; (8001e84 <HTTP_Firmware_Data+0x584>)
 8001c02:	881a      	ldrh	r2, [r3, #0]
 8001c04:	4ba0      	ldr	r3, [pc, #640]	; (8001e88 <HTTP_Firmware_Data+0x588>)
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	4b9f      	ldr	r3, [pc, #636]	; (8001e8c <HTTP_Firmware_Data+0x58c>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	4b9e      	ldr	r3, [pc, #632]	; (8001e90 <HTTP_Firmware_Data+0x590>)
 8001c18:	801a      	strh	r2, [r3, #0]
								}
								for (uint16_t var = 0; var < num_byte_FF_add_to_end_buffer; var++) {
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	817b      	strh	r3, [r7, #10]
 8001c1e:	e00c      	b.n	8001c3a <HTTP_Firmware_Data+0x33a>
									firmware_data[firmware_index++] = 0xFF;
 8001c20:	4b9c      	ldr	r3, [pc, #624]	; (8001e94 <HTTP_Firmware_Data+0x594>)
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	1c5a      	adds	r2, r3, #1
 8001c26:	b291      	uxth	r1, r2
 8001c28:	4a9a      	ldr	r2, [pc, #616]	; (8001e94 <HTTP_Firmware_Data+0x594>)
 8001c2a:	8011      	strh	r1, [r2, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b9a      	ldr	r3, [pc, #616]	; (8001e98 <HTTP_Firmware_Data+0x598>)
 8001c30:	21ff      	movs	r1, #255	; 0xff
 8001c32:	5499      	strb	r1, [r3, r2]
								for (uint16_t var = 0; var < num_byte_FF_add_to_end_buffer; var++) {
 8001c34:	897b      	ldrh	r3, [r7, #10]
 8001c36:	3301      	adds	r3, #1
 8001c38:	817b      	strh	r3, [r7, #10]
 8001c3a:	4b95      	ldr	r3, [pc, #596]	; (8001e90 <HTTP_Firmware_Data+0x590>)
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	897a      	ldrh	r2, [r7, #10]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d3ed      	bcc.n	8001c20 <HTTP_Firmware_Data+0x320>
								}
								prev_num_byte = (Char2Hex(line_buffer[0])<<4) + Char2Hex(line_buffer[1]);
 8001c44:	4b95      	ldr	r3, [pc, #596]	; (8001e9c <HTTP_Firmware_Data+0x59c>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 fa39 	bl	80020c0 <Char2Hex>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	011b      	lsls	r3, r3, #4
 8001c54:	b2dc      	uxtb	r4, r3
 8001c56:	4b91      	ldr	r3, [pc, #580]	; (8001e9c <HTTP_Firmware_Data+0x59c>)
 8001c58:	785b      	ldrb	r3, [r3, #1]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 fa30 	bl	80020c0 <Char2Hex>
 8001c60:	4603      	mov	r3, r0
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	4423      	add	r3, r4
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	4b88      	ldr	r3, [pc, #544]	; (8001e8c <HTTP_Firmware_Data+0x58c>)
 8001c6a:	701a      	strb	r2, [r3, #0]
								firmware_address_prev_offet = firmware_address_curr_offet;
 8001c6c:	4b85      	ldr	r3, [pc, #532]	; (8001e84 <HTTP_Firmware_Data+0x584>)
 8001c6e:	881a      	ldrh	r2, [r3, #0]
 8001c70:	4b85      	ldr	r3, [pc, #532]	; (8001e88 <HTTP_Firmware_Data+0x588>)
 8001c72:	801a      	strh	r2, [r3, #0]


								for (uint16_t var = 8; var < line_buffer_index - 3 -2; var=var+2) {
 8001c74:	2308      	movs	r3, #8
 8001c76:	813b      	strh	r3, [r7, #8]
 8001c78:	e020      	b.n	8001cbc <HTTP_Firmware_Data+0x3bc>
									//Save line to firmware data
									firmware_data[firmware_index++] = (Char2Hex(line_buffer[var])<<4)+ Char2Hex(line_buffer[var+1]);
 8001c7a:	893b      	ldrh	r3, [r7, #8]
 8001c7c:	4a87      	ldr	r2, [pc, #540]	; (8001e9c <HTTP_Firmware_Data+0x59c>)
 8001c7e:	5cd3      	ldrb	r3, [r2, r3]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f000 fa1d 	bl	80020c0 <Char2Hex>
 8001c86:	4603      	mov	r3, r0
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	b2dc      	uxtb	r4, r3
 8001c8e:	893b      	ldrh	r3, [r7, #8]
 8001c90:	3301      	adds	r3, #1
 8001c92:	4a82      	ldr	r2, [pc, #520]	; (8001e9c <HTTP_Firmware_Data+0x59c>)
 8001c94:	5cd3      	ldrb	r3, [r2, r3]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 fa12 	bl	80020c0 <Char2Hex>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	4b7c      	ldr	r3, [pc, #496]	; (8001e94 <HTTP_Firmware_Data+0x594>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	1c59      	adds	r1, r3, #1
 8001ca6:	b288      	uxth	r0, r1
 8001ca8:	497a      	ldr	r1, [pc, #488]	; (8001e94 <HTTP_Firmware_Data+0x594>)
 8001caa:	8008      	strh	r0, [r1, #0]
 8001cac:	4619      	mov	r1, r3
 8001cae:	18a3      	adds	r3, r4, r2
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4b79      	ldr	r3, [pc, #484]	; (8001e98 <HTTP_Firmware_Data+0x598>)
 8001cb4:	545a      	strb	r2, [r3, r1]
								for (uint16_t var = 8; var < line_buffer_index - 3 -2; var=var+2) {
 8001cb6:	893b      	ldrh	r3, [r7, #8]
 8001cb8:	3302      	adds	r3, #2
 8001cba:	813b      	strh	r3, [r7, #8]
 8001cbc:	893a      	ldrh	r2, [r7, #8]
 8001cbe:	4b78      	ldr	r3, [pc, #480]	; (8001ea0 <HTTP_Firmware_Data+0x5a0>)
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	3b05      	subs	r3, #5
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	dbd8      	blt.n	8001c7a <HTTP_Firmware_Data+0x37a>
								}
							}
							line_buffer_index = 0;
 8001cc8:	4b75      	ldr	r3, [pc, #468]	; (8001ea0 <HTTP_Firmware_Data+0x5a0>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	801a      	strh	r2, [r3, #0]
 8001cce:	e0f9      	b.n	8001ec4 <HTTP_Firmware_Data+0x5c4>
						}
						else{
							checksum_correct = RESET;
 8001cd0:	4b74      	ldr	r3, [pc, #464]	; (8001ea4 <HTTP_Firmware_Data+0x5a4>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	701a      	strb	r2, [r3, #0]
							LOG("\r\nChecksum is Wrong\r\n");
 8001cd6:	4874      	ldr	r0, [pc, #464]	; (8001ea8 <HTTP_Firmware_Data+0x5a8>)
 8001cd8:	f7ff f990 	bl	8000ffc <UART_DEBUG_Transmit>
							return SET;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e103      	b.n	8001ee8 <HTTP_Firmware_Data+0x5e8>
						}
					}
				}
			}
			else{
				if(isReceiveData_New(line_buffer, line_buffer_index, LINE_BUFFER_LENGTH, "\r\n:")){
 8001ce0:	4b6f      	ldr	r3, [pc, #444]	; (8001ea0 <HTTP_Firmware_Data+0x5a0>)
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4b71      	ldr	r3, [pc, #452]	; (8001eac <HTTP_Firmware_Data+0x5ac>)
 8001ce8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cec:	486b      	ldr	r0, [pc, #428]	; (8001e9c <HTTP_Firmware_Data+0x59c>)
 8001cee:	f000 f99f 	bl	8002030 <isReceiveData_New>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 80e5 	beq.w	8001ec4 <HTTP_Firmware_Data+0x5c4>
//					sprintf(log,"\r\n temp_at_response_index: %ld\r\n",temp_at_response_index);
//					LOG(log);
//					sprintf(log,"\r\n line_buffer_index: %ld\r\n",line_buffer_index);
//					LOG(log);
					// Calculator checksum
					if(first_http_read){
 8001cfa:	4b6d      	ldr	r3, [pc, #436]	; (8001eb0 <HTTP_Firmware_Data+0x5b0>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d006      	beq.n	8001d10 <HTTP_Firmware_Data+0x410>
						first_http_read = RESET;
 8001d02:	4b6b      	ldr	r3, [pc, #428]	; (8001eb0 <HTTP_Firmware_Data+0x5b0>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
						line_buffer_index = 0;
 8001d08:	4b65      	ldr	r3, [pc, #404]	; (8001ea0 <HTTP_Firmware_Data+0x5a0>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	801a      	strh	r2, [r3, #0]
 8001d0e:	e0d9      	b.n	8001ec4 <HTTP_Firmware_Data+0x5c4>
					}
					else{
//						LOG("7");
						if(is_Firmware_Line_Data_Correct(line_buffer, line_buffer_index)){
 8001d10:	4b63      	ldr	r3, [pc, #396]	; (8001ea0 <HTTP_Firmware_Data+0x5a0>)
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	4861      	ldr	r0, [pc, #388]	; (8001e9c <HTTP_Firmware_Data+0x59c>)
 8001d18:	f7ff fd88 	bl	800182c <is_Firmware_Line_Data_Correct>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 80c8 	beq.w	8001eb4 <HTTP_Firmware_Data+0x5b4>
							// Check whether that line is the firmware data or not
//							LOG("8");
							if(Char2Hex(line_buffer[7])==0){
 8001d24:	4b5d      	ldr	r3, [pc, #372]	; (8001e9c <HTTP_Firmware_Data+0x59c>)
 8001d26:	79db      	ldrb	r3, [r3, #7]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 f9c9 	bl	80020c0 <Char2Hex>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f040 80a2 	bne.w	8001e7a <HTTP_Firmware_Data+0x57a>
//								LOG("9");
								firmware_address_curr_offet = ((uint16_t)(Char2Hex(line_buffer[2]))<<12) +((uint16_t)(Char2Hex(line_buffer[3]))<<8) + ((uint16_t)(Char2Hex(line_buffer[4]))<<4)+(uint16_t)(Char2Hex(line_buffer[5]));
 8001d36:	4b59      	ldr	r3, [pc, #356]	; (8001e9c <HTTP_Firmware_Data+0x59c>)
 8001d38:	789b      	ldrb	r3, [r3, #2]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 f9c0 	bl	80020c0 <Char2Hex>
 8001d40:	4603      	mov	r3, r0
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	031b      	lsls	r3, r3, #12
 8001d46:	b29c      	uxth	r4, r3
 8001d48:	4b54      	ldr	r3, [pc, #336]	; (8001e9c <HTTP_Firmware_Data+0x59c>)
 8001d4a:	78db      	ldrb	r3, [r3, #3]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 f9b7 	bl	80020c0 <Char2Hex>
 8001d52:	4603      	mov	r3, r0
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	021b      	lsls	r3, r3, #8
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	4423      	add	r3, r4
 8001d5c:	b29c      	uxth	r4, r3
 8001d5e:	4b4f      	ldr	r3, [pc, #316]	; (8001e9c <HTTP_Firmware_Data+0x59c>)
 8001d60:	791b      	ldrb	r3, [r3, #4]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f9ac 	bl	80020c0 <Char2Hex>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	011b      	lsls	r3, r3, #4
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	4423      	add	r3, r4
 8001d72:	b29c      	uxth	r4, r3
 8001d74:	4b49      	ldr	r3, [pc, #292]	; (8001e9c <HTTP_Firmware_Data+0x59c>)
 8001d76:	795b      	ldrb	r3, [r3, #5]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 f9a1 	bl	80020c0 <Char2Hex>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	4423      	add	r3, r4
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	4b3f      	ldr	r3, [pc, #252]	; (8001e84 <HTTP_Firmware_Data+0x584>)
 8001d88:	801a      	strh	r2, [r3, #0]
								if(firmware_address_prev_offet >= 0xFFF0){
 8001d8a:	4b3f      	ldr	r3, [pc, #252]	; (8001e88 <HTTP_Firmware_Data+0x588>)
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d90d      	bls.n	8001db2 <HTTP_Firmware_Data+0x4b2>
									num_byte_FF_add_to_end_buffer = 0xFFFF - firmware_address_prev_offet + 1 + firmware_address_curr_offet - prev_num_byte;
 8001d96:	4b3b      	ldr	r3, [pc, #236]	; (8001e84 <HTTP_Firmware_Data+0x584>)
 8001d98:	881a      	ldrh	r2, [r3, #0]
 8001d9a:	4b3b      	ldr	r3, [pc, #236]	; (8001e88 <HTTP_Firmware_Data+0x588>)
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	4b3a      	ldr	r3, [pc, #232]	; (8001e8c <HTTP_Firmware_Data+0x58c>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	4b38      	ldr	r3, [pc, #224]	; (8001e90 <HTTP_Firmware_Data+0x590>)
 8001dae:	801a      	strh	r2, [r3, #0]
 8001db0:	e00c      	b.n	8001dcc <HTTP_Firmware_Data+0x4cc>
								}
								else{
									num_byte_FF_add_to_end_buffer = firmware_address_curr_offet - firmware_address_prev_offet - prev_num_byte;
 8001db2:	4b34      	ldr	r3, [pc, #208]	; (8001e84 <HTTP_Firmware_Data+0x584>)
 8001db4:	881a      	ldrh	r2, [r3, #0]
 8001db6:	4b34      	ldr	r3, [pc, #208]	; (8001e88 <HTTP_Firmware_Data+0x588>)
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	4b33      	ldr	r3, [pc, #204]	; (8001e8c <HTTP_Firmware_Data+0x58c>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	4b31      	ldr	r3, [pc, #196]	; (8001e90 <HTTP_Firmware_Data+0x590>)
 8001dca:	801a      	strh	r2, [r3, #0]
								}
//								LOG("10");
								for (uint16_t var = 0; var < num_byte_FF_add_to_end_buffer; var++) {
 8001dcc:	2300      	movs	r3, #0
 8001dce:	80fb      	strh	r3, [r7, #6]
 8001dd0:	e00c      	b.n	8001dec <HTTP_Firmware_Data+0x4ec>
									firmware_data[firmware_index++] = 0xFF;
 8001dd2:	4b30      	ldr	r3, [pc, #192]	; (8001e94 <HTTP_Firmware_Data+0x594>)
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	b291      	uxth	r1, r2
 8001dda:	4a2e      	ldr	r2, [pc, #184]	; (8001e94 <HTTP_Firmware_Data+0x594>)
 8001ddc:	8011      	strh	r1, [r2, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	4b2d      	ldr	r3, [pc, #180]	; (8001e98 <HTTP_Firmware_Data+0x598>)
 8001de2:	21ff      	movs	r1, #255	; 0xff
 8001de4:	5499      	strb	r1, [r3, r2]
								for (uint16_t var = 0; var < num_byte_FF_add_to_end_buffer; var++) {
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	3301      	adds	r3, #1
 8001dea:	80fb      	strh	r3, [r7, #6]
 8001dec:	4b28      	ldr	r3, [pc, #160]	; (8001e90 <HTTP_Firmware_Data+0x590>)
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	88fa      	ldrh	r2, [r7, #6]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d3ed      	bcc.n	8001dd2 <HTTP_Firmware_Data+0x4d2>
								}
//								LOG("11");
								prev_num_byte = (Char2Hex(line_buffer[0])<<4) + Char2Hex(line_buffer[1]);
 8001df6:	4b29      	ldr	r3, [pc, #164]	; (8001e9c <HTTP_Firmware_Data+0x59c>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 f960 	bl	80020c0 <Char2Hex>
 8001e00:	4603      	mov	r3, r0
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	b2dc      	uxtb	r4, r3
 8001e08:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <HTTP_Firmware_Data+0x59c>)
 8001e0a:	785b      	ldrb	r3, [r3, #1]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f000 f957 	bl	80020c0 <Char2Hex>
 8001e12:	4603      	mov	r3, r0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	4423      	add	r3, r4
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <HTTP_Firmware_Data+0x58c>)
 8001e1c:	701a      	strb	r2, [r3, #0]
								firmware_address_prev_offet = firmware_address_curr_offet;
 8001e1e:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HTTP_Firmware_Data+0x584>)
 8001e20:	881a      	ldrh	r2, [r3, #0]
 8001e22:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <HTTP_Firmware_Data+0x588>)
 8001e24:	801a      	strh	r2, [r3, #0]
//								LOG("12");
								for (uint16_t var = 8; var < line_buffer_index - 3 -2; var=var+2) {
 8001e26:	2308      	movs	r3, #8
 8001e28:	80bb      	strh	r3, [r7, #4]
 8001e2a:	e020      	b.n	8001e6e <HTTP_Firmware_Data+0x56e>
									//Save line to firmware data
									firmware_data[firmware_index++] = (Char2Hex(line_buffer[var])<<4)+ Char2Hex(line_buffer[var+1]);
 8001e2c:	88bb      	ldrh	r3, [r7, #4]
 8001e2e:	4a1b      	ldr	r2, [pc, #108]	; (8001e9c <HTTP_Firmware_Data+0x59c>)
 8001e30:	5cd3      	ldrb	r3, [r2, r3]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f944 	bl	80020c0 <Char2Hex>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	011b      	lsls	r3, r3, #4
 8001e3e:	b2dc      	uxtb	r4, r3
 8001e40:	88bb      	ldrh	r3, [r7, #4]
 8001e42:	3301      	adds	r3, #1
 8001e44:	4a15      	ldr	r2, [pc, #84]	; (8001e9c <HTTP_Firmware_Data+0x59c>)
 8001e46:	5cd3      	ldrb	r3, [r2, r3]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 f939 	bl	80020c0 <Char2Hex>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <HTTP_Firmware_Data+0x594>)
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	1c59      	adds	r1, r3, #1
 8001e58:	b288      	uxth	r0, r1
 8001e5a:	490e      	ldr	r1, [pc, #56]	; (8001e94 <HTTP_Firmware_Data+0x594>)
 8001e5c:	8008      	strh	r0, [r1, #0]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	18a3      	adds	r3, r4, r2
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <HTTP_Firmware_Data+0x598>)
 8001e66:	545a      	strb	r2, [r3, r1]
								for (uint16_t var = 8; var < line_buffer_index - 3 -2; var=var+2) {
 8001e68:	88bb      	ldrh	r3, [r7, #4]
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	80bb      	strh	r3, [r7, #4]
 8001e6e:	88ba      	ldrh	r2, [r7, #4]
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HTTP_Firmware_Data+0x5a0>)
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	3b05      	subs	r3, #5
 8001e76:	429a      	cmp	r2, r3
 8001e78:	dbd8      	blt.n	8001e2c <HTTP_Firmware_Data+0x52c>
								}
//								LOG("13");
							}
							line_buffer_index = 0;
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HTTP_Firmware_Data+0x5a0>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	801a      	strh	r2, [r3, #0]
 8001e80:	e020      	b.n	8001ec4 <HTTP_Firmware_Data+0x5c4>
 8001e82:	bf00      	nop
 8001e84:	200001a6 	.word	0x200001a6
 8001e88:	200001a4 	.word	0x200001a4
 8001e8c:	200001a8 	.word	0x200001a8
 8001e90:	20000198 	.word	0x20000198
 8001e94:	200001aa 	.word	0x200001aa
 8001e98:	2000254c 	.word	0x2000254c
 8001e9c:	200035ec 	.word	0x200035ec
 8001ea0:	200001b6 	.word	0x200001b6
 8001ea4:	2000007c 	.word	0x2000007c
 8001ea8:	08006eec 	.word	0x08006eec
 8001eac:	08006ee8 	.word	0x08006ee8
 8001eb0:	200000dc 	.word	0x200000dc
//							LOG("14");
						}
						else{
							checksum_correct = RESET;
 8001eb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <HTTP_Firmware_Data+0x5f0>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
							LOG("\r\nChecksum is Wrong\r\n");
 8001eba:	480e      	ldr	r0, [pc, #56]	; (8001ef4 <HTTP_Firmware_Data+0x5f4>)
 8001ebc:	f7ff f89e 	bl	8000ffc <UART_DEBUG_Transmit>
							return SET;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e011      	b.n	8001ee8 <HTTP_Firmware_Data+0x5e8>
						}
					}
				}
			}
		}
		temp_at_response_index = (temp_at_response_index +1)%LINE_BUFFER_LENGTH;
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <HTTP_Firmware_Data+0x5f8>)
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	4a0c      	ldr	r2, [pc, #48]	; (8001efc <HTTP_Firmware_Data+0x5fc>)
 8001ecc:	fb82 1203 	smull	r1, r2, r2, r3
 8001ed0:	1151      	asrs	r1, r2, #5
 8001ed2:	17da      	asrs	r2, r3, #31
 8001ed4:	1a8a      	subs	r2, r1, r2
 8001ed6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001eda:	fb01 f202 	mul.w	r2, r1, r2
 8001ede:	1a9a      	subs	r2, r3, r2
 8001ee0:	b292      	uxth	r2, r2
 8001ee2:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <HTTP_Firmware_Data+0x5f8>)
 8001ee4:	801a      	strh	r2, [r3, #0]
	}
	return RESET;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd90      	pop	{r4, r7, pc}
 8001ef0:	2000007c 	.word	0x2000007c
 8001ef4:	08006eec 	.word	0x08006eec
 8001ef8:	200001b8 	.word	0x200001b8
 8001efc:	1b4e81b5 	.word	0x1b4e81b5

08001f00 <HTTP_Get_Content_Length>:



FlagStatus HTTP_Get_Content_Length(){
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
	if(UART_SIM7600_Received_Buffer_Available()){
 8001f04:	f7ff f80c 	bl	8000f20 <UART_SIM7600_Received_Buffer_Available>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d029      	beq.n	8001f62 <HTTP_Get_Content_Length+0x62>
		temp = UART_SIM7600_Read_Received_Buffer();
 8001f0e:	f7ff f81d 	bl	8000f4c <UART_SIM7600_Read_Received_Buffer>
 8001f12:	4603      	mov	r3, r0
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <HTTP_Get_Content_Length+0x68>)
 8001f18:	701a      	strb	r2, [r3, #0]
		if(temp == '\r'){
 8001f1a:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <HTTP_Get_Content_Length+0x68>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b0d      	cmp	r3, #13
 8001f20:	d104      	bne.n	8001f2c <HTTP_Get_Content_Length+0x2c>
			http_num_ignore = 0;
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HTTP_Get_Content_Length+0x6c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
			return SET;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e01b      	b.n	8001f64 <HTTP_Get_Content_Length+0x64>
		}
		if(http_num_ignore==2){
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <HTTP_Get_Content_Length+0x6c>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d10c      	bne.n	8001f4e <HTTP_Get_Content_Length+0x4e>
			content_length = content_length*10 + (uint32_t)temp - (uint32_t)48;
 8001f34:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <HTTP_Get_Content_Length+0x70>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <HTTP_Get_Content_Length+0x68>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	3b30      	subs	r3, #48	; 0x30
 8001f4a:	4a09      	ldr	r2, [pc, #36]	; (8001f70 <HTTP_Get_Content_Length+0x70>)
 8001f4c:	6013      	str	r3, [r2, #0]
		}
		if(temp == ','){
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HTTP_Get_Content_Length+0x68>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b2c      	cmp	r3, #44	; 0x2c
 8001f54:	d105      	bne.n	8001f62 <HTTP_Get_Content_Length+0x62>
			http_num_ignore ++;
 8001f56:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HTTP_Get_Content_Length+0x6c>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <HTTP_Get_Content_Length+0x6c>)
 8001f60:	701a      	strb	r2, [r3, #0]
		}
	}
	return RESET;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20001384 	.word	0x20001384
 8001f6c:	20000191 	.word	0x20000191
 8001f70:	20000194 	.word	0x20000194

08001f74 <HTTP_Set_State>:

/**
 * HTTP_Set_State()
 * @brief This is function for setting state to HTTP State Machine
 */
void HTTP_Set_State(HTTP_State _http_state){
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
	http_state = _http_state;
 8001f7e:	4a04      	ldr	r2, [pc, #16]	; (8001f90 <HTTP_Set_State+0x1c>)
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	7013      	strb	r3, [r2, #0]
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	2000019b 	.word	0x2000019b

08001f94 <Clear_Http_Command>:
void Reset_HttpConfiguration_State(){
	Reset_No_Board();
	HTTP_Set_State(HTTP_INIT);
}

void Clear_Http_Command(){
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
	default_atcommand = SET;
 8001f98:	4b03      	ldr	r3, [pc, #12]	; (8001fa8 <Clear_Http_Command+0x14>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	701a      	strb	r2, [r3, #0]
}
 8001f9e:	bf00      	nop
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	2000007a 	.word	0x2000007a

08001fac <HTTP_Return_Content_Length>:
void Set_Http_Command(char * atcommand){
	sprintf(http_at_command,"%s",atcommand);
	default_atcommand = RESET;
}

uint32_t HTTP_Return_Content_Length(){
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
	return content_length;
 8001fb0:	4b02      	ldr	r3, [pc, #8]	; (8001fbc <HTTP_Return_Content_Length+0x10>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	20000194 	.word	0x20000194

08001fc0 <isReceiveData>:
 * 			buffer_len = 6 => It just point to "I love"
 * 			data = "love"
 *
 * 			=> return SET ~ True
 */
FlagStatus isReceiveData(char *buffer , uint16_t buffer_len , const char * data){
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	817b      	strh	r3, [r7, #10]
	uint8_t tmpLen = strlen((char*)data);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe f928 	bl	8000224 <strlen>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	75bb      	strb	r3, [r7, #22]
	if(buffer_len < tmpLen ){
 8001fd8:	7dbb      	ldrb	r3, [r7, #22]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	897a      	ldrh	r2, [r7, #10]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d201      	bcs.n	8001fe6 <isReceiveData+0x26>
		return RESET;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e020      	b.n	8002028 <isReceiveData+0x68>
	}
	else{
		uint8_t tmpLen = strlen((char*)data);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7fe f91c 	bl	8000224 <strlen>
 8001fec:	4603      	mov	r3, r0
 8001fee:	757b      	strb	r3, [r7, #21]
		for (uint8_t index = 0; index < tmpLen; index++) {
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	75fb      	strb	r3, [r7, #23]
 8001ff4:	e013      	b.n	800201e <isReceiveData+0x5e>
			if(buffer[buffer_len -tmpLen + index] != data[index]){
 8001ff6:	897a      	ldrh	r2, [r7, #10]
 8001ff8:	7d7b      	ldrb	r3, [r7, #21]
 8001ffa:	1ad2      	subs	r2, r2, r3
 8001ffc:	7dfb      	ldrb	r3, [r7, #23]
 8001ffe:	4413      	add	r3, r2
 8002000:	461a      	mov	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4413      	add	r3, r2
 8002006:	781a      	ldrb	r2, [r3, #0]
 8002008:	7dfb      	ldrb	r3, [r7, #23]
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	440b      	add	r3, r1
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <isReceiveData+0x58>
				return RESET;
 8002014:	2300      	movs	r3, #0
 8002016:	e007      	b.n	8002028 <isReceiveData+0x68>
		for (uint8_t index = 0; index < tmpLen; index++) {
 8002018:	7dfb      	ldrb	r3, [r7, #23]
 800201a:	3301      	adds	r3, #1
 800201c:	75fb      	strb	r3, [r7, #23]
 800201e:	7dfa      	ldrb	r2, [r7, #23]
 8002020:	7d7b      	ldrb	r3, [r7, #21]
 8002022:	429a      	cmp	r2, r3
 8002024:	d3e7      	bcc.n	8001ff6 <isReceiveData+0x36>
			}
		}
	}
	return SET;
 8002026:	2301      	movs	r3, #1
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <isReceiveData_New>:


FlagStatus isReceiveData_New(char *buffer , uint16_t buffer_len , uint16_t buffer_size , const char * data){
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	607b      	str	r3, [r7, #4]
 800203a:	460b      	mov	r3, r1
 800203c:	817b      	strh	r3, [r7, #10]
 800203e:	4613      	mov	r3, r2
 8002040:	813b      	strh	r3, [r7, #8]
	uint16_t tmpLen = strlen((char*)data);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7fe f8ee 	bl	8000224 <strlen>
 8002048:	4603      	mov	r3, r0
 800204a:	82bb      	strh	r3, [r7, #20]
	for (uint16_t index = 0; index < tmpLen; index++) {
 800204c:	2300      	movs	r3, #0
 800204e:	82fb      	strh	r3, [r7, #22]
 8002050:	e02d      	b.n	80020ae <isReceiveData_New+0x7e>
		if(buffer[buffer_len -tmpLen <0 ? (buffer_size + buffer_len - tmpLen + index)%buffer_size :(buffer_len - tmpLen + index)%buffer_size ] != data[index]){
 8002052:	897a      	ldrh	r2, [r7, #10]
 8002054:	8abb      	ldrh	r3, [r7, #20]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	da0e      	bge.n	800207a <isReceiveData_New+0x4a>
 800205c:	893a      	ldrh	r2, [r7, #8]
 800205e:	897b      	ldrh	r3, [r7, #10]
 8002060:	441a      	add	r2, r3
 8002062:	8abb      	ldrh	r3, [r7, #20]
 8002064:	1ad2      	subs	r2, r2, r3
 8002066:	8afb      	ldrh	r3, [r7, #22]
 8002068:	4413      	add	r3, r2
 800206a:	893a      	ldrh	r2, [r7, #8]
 800206c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002070:	fb02 f201 	mul.w	r2, r2, r1
 8002074:	1a9b      	subs	r3, r3, r2
 8002076:	461a      	mov	r2, r3
 8002078:	e00b      	b.n	8002092 <isReceiveData_New+0x62>
 800207a:	897a      	ldrh	r2, [r7, #10]
 800207c:	8abb      	ldrh	r3, [r7, #20]
 800207e:	1ad2      	subs	r2, r2, r3
 8002080:	8afb      	ldrh	r3, [r7, #22]
 8002082:	4413      	add	r3, r2
 8002084:	893a      	ldrh	r2, [r7, #8]
 8002086:	fb93 f1f2 	sdiv	r1, r3, r2
 800208a:	fb02 f201 	mul.w	r2, r2, r1
 800208e:	1a9b      	subs	r3, r3, r2
 8002090:	461a      	mov	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4413      	add	r3, r2
 8002096:	781a      	ldrb	r2, [r3, #0]
 8002098:	8afb      	ldrh	r3, [r7, #22]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	440b      	add	r3, r1
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d001      	beq.n	80020a8 <isReceiveData_New+0x78>
			return RESET;
 80020a4:	2300      	movs	r3, #0
 80020a6:	e007      	b.n	80020b8 <isReceiveData_New+0x88>
	for (uint16_t index = 0; index < tmpLen; index++) {
 80020a8:	8afb      	ldrh	r3, [r7, #22]
 80020aa:	3301      	adds	r3, #1
 80020ac:	82fb      	strh	r3, [r7, #22]
 80020ae:	8afa      	ldrh	r2, [r7, #22]
 80020b0:	8abb      	ldrh	r3, [r7, #20]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d3cd      	bcc.n	8002052 <isReceiveData_New+0x22>
		}
	}
	return SET;
 80020b6:	2301      	movs	r3, #1
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <Char2Hex>:
	}
	return result;
}


uint8_t Char2Hex(char character){
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
	uint8_t result;
	if( character >='0' && character <= '9'){
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	2b2f      	cmp	r3, #47	; 0x2f
 80020ce:	d906      	bls.n	80020de <Char2Hex+0x1e>
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	2b39      	cmp	r3, #57	; 0x39
 80020d4:	d803      	bhi.n	80020de <Char2Hex+0x1e>
		result = character - (uint8_t)('0') ;
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	3b30      	subs	r3, #48	; 0x30
 80020da:	73fb      	strb	r3, [r7, #15]
 80020dc:	e008      	b.n	80020f0 <Char2Hex+0x30>
	}
	else if(character >='A' && character <= 'F'){
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	2b40      	cmp	r3, #64	; 0x40
 80020e2:	d905      	bls.n	80020f0 <Char2Hex+0x30>
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	2b46      	cmp	r3, #70	; 0x46
 80020e8:	d802      	bhi.n	80020f0 <Char2Hex+0x30>
		result = character - (uint8_t)('A') + 10;
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	3b37      	subs	r3, #55	; 0x37
 80020ee:	73fb      	strb	r3, [r7, #15]
	}
	return result;
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <AT_Processing>:
  * If Available It will Read 1 byte and add to temp buffer.
  * Then Temp buffer will be compared to pattern being passed in isReceiveData function.
  * @param None
  * @retval None
  */
void AT_Processing(){
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
	if(at_result != AT_NONE){
 8002100:	4b73      	ldr	r3, [pc, #460]	; (80022d0 <AT_Processing+0x1d4>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b0a      	cmp	r3, #10
 8002106:	f040 80de 	bne.w	80022c6 <AT_Processing+0x1ca>
		return;
	}
	else if(UART_SIM7600_Received_Buffer_Available()){
 800210a:	f7fe ff09 	bl	8000f20 <UART_SIM7600_Received_Buffer_Available>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80da 	beq.w	80022ca <AT_Processing+0x1ce>
		data_respone[data_respone_index]=UART_SIM7600_Read_Received_Buffer();
 8002116:	f7fe ff19 	bl	8000f4c <UART_SIM7600_Read_Received_Buffer>
 800211a:	4601      	mov	r1, r0
 800211c:	4b6d      	ldr	r3, [pc, #436]	; (80022d4 <AT_Processing+0x1d8>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	b2c9      	uxtb	r1, r1
 8002124:	4b6c      	ldr	r3, [pc, #432]	; (80022d8 <AT_Processing+0x1dc>)
 8002126:	5499      	strb	r1, [r3, r2]
//		UART_DEBUG_Transmit_Size(data_respone + data_respone_index, 1);
//		LOG("1");
		data_respone_index++;
 8002128:	4b6a      	ldr	r3, [pc, #424]	; (80022d4 <AT_Processing+0x1d8>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	3301      	adds	r3, #1
 800212e:	b2da      	uxtb	r2, r3
 8002130:	4b68      	ldr	r3, [pc, #416]	; (80022d4 <AT_Processing+0x1d8>)
 8002132:	701a      	strb	r2, [r3, #0]

		if(isReceiveData((char*)data_respone, (uint16_t)data_respone_index, OK)){
 8002134:	4b67      	ldr	r3, [pc, #412]	; (80022d4 <AT_Processing+0x1d8>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	b29b      	uxth	r3, r3
 800213a:	4a68      	ldr	r2, [pc, #416]	; (80022dc <AT_Processing+0x1e0>)
 800213c:	6812      	ldr	r2, [r2, #0]
 800213e:	4619      	mov	r1, r3
 8002140:	4865      	ldr	r0, [pc, #404]	; (80022d8 <AT_Processing+0x1dc>)
 8002142:	f7ff ff3d 	bl	8001fc0 <isReceiveData>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00d      	beq.n	8002168 <AT_Processing+0x6c>
			LOG("\r\nOK\r\n");
 800214c:	4864      	ldr	r0, [pc, #400]	; (80022e0 <AT_Processing+0x1e4>)
 800214e:	f7fe ff55 	bl	8000ffc <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 8002152:	4b60      	ldr	r3, [pc, #384]	; (80022d4 <AT_Processing+0x1d8>)
 8002154:	781a      	ldrb	r2, [r3, #0]
 8002156:	4b63      	ldr	r3, [pc, #396]	; (80022e4 <AT_Processing+0x1e8>)
 8002158:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 800215a:	4b5e      	ldr	r3, [pc, #376]	; (80022d4 <AT_Processing+0x1d8>)
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
			at_result = AT_OK;
 8002160:	4b5b      	ldr	r3, [pc, #364]	; (80022d0 <AT_Processing+0x1d4>)
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
			at_result = AT_FIRMWARE_CHECKSUM;
		}
	}
//	UART_DEBUG_Transmit_Size(aUART_RxBuffer, RXBUFFERSIZE);
	return;
 8002166:	e0b0      	b.n	80022ca <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)ERROR_1/*ERROR_1*/)){
 8002168:	4b5a      	ldr	r3, [pc, #360]	; (80022d4 <AT_Processing+0x1d8>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	b29b      	uxth	r3, r3
 800216e:	4a5e      	ldr	r2, [pc, #376]	; (80022e8 <AT_Processing+0x1ec>)
 8002170:	4619      	mov	r1, r3
 8002172:	4859      	ldr	r0, [pc, #356]	; (80022d8 <AT_Processing+0x1dc>)
 8002174:	f7ff ff24 	bl	8001fc0 <isReceiveData>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00d      	beq.n	800219a <AT_Processing+0x9e>
			LOG("\r\nERROR\r\n");
 800217e:	485b      	ldr	r0, [pc, #364]	; (80022ec <AT_Processing+0x1f0>)
 8002180:	f7fe ff3c 	bl	8000ffc <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 8002184:	4b53      	ldr	r3, [pc, #332]	; (80022d4 <AT_Processing+0x1d8>)
 8002186:	781a      	ldrb	r2, [r3, #0]
 8002188:	4b56      	ldr	r3, [pc, #344]	; (80022e4 <AT_Processing+0x1e8>)
 800218a:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 800218c:	4b51      	ldr	r3, [pc, #324]	; (80022d4 <AT_Processing+0x1d8>)
 800218e:	2200      	movs	r2, #0
 8002190:	701a      	strb	r2, [r3, #0]
			at_result = AT_ERROR;
 8002192:	4b4f      	ldr	r3, [pc, #316]	; (80022d0 <AT_Processing+0x1d4>)
 8002194:	2201      	movs	r2, #1
 8002196:	701a      	strb	r2, [r3, #0]
	return;
 8002198:	e097      	b.n	80022ca <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)PB_DONE /*PB_DONE*/)){
 800219a:	4b4e      	ldr	r3, [pc, #312]	; (80022d4 <AT_Processing+0x1d8>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	4a53      	ldr	r2, [pc, #332]	; (80022f0 <AT_Processing+0x1f4>)
 80021a2:	4619      	mov	r1, r3
 80021a4:	484c      	ldr	r0, [pc, #304]	; (80022d8 <AT_Processing+0x1dc>)
 80021a6:	f7ff ff0b 	bl	8001fc0 <isReceiveData>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00d      	beq.n	80021cc <AT_Processing+0xd0>
			LOG("\r\nPB DONE\r\n");
 80021b0:	4850      	ldr	r0, [pc, #320]	; (80022f4 <AT_Processing+0x1f8>)
 80021b2:	f7fe ff23 	bl	8000ffc <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 80021b6:	4b47      	ldr	r3, [pc, #284]	; (80022d4 <AT_Processing+0x1d8>)
 80021b8:	781a      	ldrb	r2, [r3, #0]
 80021ba:	4b4a      	ldr	r3, [pc, #296]	; (80022e4 <AT_Processing+0x1e8>)
 80021bc:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 80021be:	4b45      	ldr	r3, [pc, #276]	; (80022d4 <AT_Processing+0x1d8>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
			at_result = AT_PB_DONE;
 80021c4:	4b42      	ldr	r3, [pc, #264]	; (80022d0 <AT_Processing+0x1d4>)
 80021c6:	2203      	movs	r2, #3
 80021c8:	701a      	strb	r2, [r3, #0]
	return;
 80021ca:	e07e      	b.n	80022ca <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)IMEI_CHECK)){
 80021cc:	4b41      	ldr	r3, [pc, #260]	; (80022d4 <AT_Processing+0x1d8>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	4a49      	ldr	r2, [pc, #292]	; (80022f8 <AT_Processing+0x1fc>)
 80021d4:	4619      	mov	r1, r3
 80021d6:	4840      	ldr	r0, [pc, #256]	; (80022d8 <AT_Processing+0x1dc>)
 80021d8:	f7ff fef2 	bl	8001fc0 <isReceiveData>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00d      	beq.n	80021fe <AT_Processing+0x102>
			LOG("\r\nRECEIVE IMEI\r\n");
 80021e2:	4846      	ldr	r0, [pc, #280]	; (80022fc <AT_Processing+0x200>)
 80021e4:	f7fe ff0a 	bl	8000ffc <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 80021e8:	4b3a      	ldr	r3, [pc, #232]	; (80022d4 <AT_Processing+0x1d8>)
 80021ea:	781a      	ldrb	r2, [r3, #0]
 80021ec:	4b3d      	ldr	r3, [pc, #244]	; (80022e4 <AT_Processing+0x1e8>)
 80021ee:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 80021f0:	4b38      	ldr	r3, [pc, #224]	; (80022d4 <AT_Processing+0x1d8>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
			at_result = AT_IMEI;
 80021f6:	4b36      	ldr	r3, [pc, #216]	; (80022d0 <AT_Processing+0x1d4>)
 80021f8:	2206      	movs	r2, #6
 80021fa:	701a      	strb	r2, [r3, #0]
	return;
 80021fc:	e065      	b.n	80022ca <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)RECEIVE_RESPONSE)){
 80021fe:	4b35      	ldr	r3, [pc, #212]	; (80022d4 <AT_Processing+0x1d8>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	b29b      	uxth	r3, r3
 8002204:	4a3e      	ldr	r2, [pc, #248]	; (8002300 <AT_Processing+0x204>)
 8002206:	4619      	mov	r1, r3
 8002208:	4833      	ldr	r0, [pc, #204]	; (80022d8 <AT_Processing+0x1dc>)
 800220a:	f7ff fed9 	bl	8001fc0 <isReceiveData>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00d      	beq.n	8002230 <AT_Processing+0x134>
			LOG("\r\nRECEIVE HTTP RESPONSE\r\n");
 8002214:	483b      	ldr	r0, [pc, #236]	; (8002304 <AT_Processing+0x208>)
 8002216:	f7fe fef1 	bl	8000ffc <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 800221a:	4b2e      	ldr	r3, [pc, #184]	; (80022d4 <AT_Processing+0x1d8>)
 800221c:	781a      	ldrb	r2, [r3, #0]
 800221e:	4b31      	ldr	r3, [pc, #196]	; (80022e4 <AT_Processing+0x1e8>)
 8002220:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 8002222:	4b2c      	ldr	r3, [pc, #176]	; (80022d4 <AT_Processing+0x1d8>)
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
			at_result = AT_HTTP_RESPONSE;
 8002228:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <AT_Processing+0x1d4>)
 800222a:	2205      	movs	r2, #5
 800222c:	701a      	strb	r2, [r3, #0]
	return;
 800222e:	e04c      	b.n	80022ca <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)FIRMWARE_VERSION)){
 8002230:	4b28      	ldr	r3, [pc, #160]	; (80022d4 <AT_Processing+0x1d8>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b29b      	uxth	r3, r3
 8002236:	4a34      	ldr	r2, [pc, #208]	; (8002308 <AT_Processing+0x20c>)
 8002238:	4619      	mov	r1, r3
 800223a:	4827      	ldr	r0, [pc, #156]	; (80022d8 <AT_Processing+0x1dc>)
 800223c:	f7ff fec0 	bl	8001fc0 <isReceiveData>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00d      	beq.n	8002262 <AT_Processing+0x166>
			LOG("\r\nRECEIVE VERSION RESPONSE\r\n");
 8002246:	4831      	ldr	r0, [pc, #196]	; (800230c <AT_Processing+0x210>)
 8002248:	f7fe fed8 	bl	8000ffc <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 800224c:	4b21      	ldr	r3, [pc, #132]	; (80022d4 <AT_Processing+0x1d8>)
 800224e:	781a      	ldrb	r2, [r3, #0]
 8002250:	4b24      	ldr	r3, [pc, #144]	; (80022e4 <AT_Processing+0x1e8>)
 8002252:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 8002254:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <AT_Processing+0x1d8>)
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
			at_result = AT_FIRMWARE_VERSION;
 800225a:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <AT_Processing+0x1d4>)
 800225c:	2207      	movs	r2, #7
 800225e:	701a      	strb	r2, [r3, #0]
	return;
 8002260:	e033      	b.n	80022ca <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)FIRMWARE_DATA)){
 8002262:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <AT_Processing+0x1d8>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	b29b      	uxth	r3, r3
 8002268:	4a29      	ldr	r2, [pc, #164]	; (8002310 <AT_Processing+0x214>)
 800226a:	4619      	mov	r1, r3
 800226c:	481a      	ldr	r0, [pc, #104]	; (80022d8 <AT_Processing+0x1dc>)
 800226e:	f7ff fea7 	bl	8001fc0 <isReceiveData>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00d      	beq.n	8002294 <AT_Processing+0x198>
			LOG("\r\nRECEIVE FIRMWARE DATA\r\n");
 8002278:	4826      	ldr	r0, [pc, #152]	; (8002314 <AT_Processing+0x218>)
 800227a:	f7fe febf 	bl	8000ffc <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 800227e:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <AT_Processing+0x1d8>)
 8002280:	781a      	ldrb	r2, [r3, #0]
 8002282:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <AT_Processing+0x1e8>)
 8002284:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 8002286:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <AT_Processing+0x1d8>)
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
			at_result = AT_FIRMWARE_DATA;
 800228c:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <AT_Processing+0x1d4>)
 800228e:	2208      	movs	r2, #8
 8002290:	701a      	strb	r2, [r3, #0]
	return;
 8002292:	e01a      	b.n	80022ca <AT_Processing+0x1ce>
		else if(isReceiveData((char*)data_respone, data_respone_index, (char*)FIRMWARE_CHECKSUM)){
 8002294:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <AT_Processing+0x1d8>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	b29b      	uxth	r3, r3
 800229a:	4a1f      	ldr	r2, [pc, #124]	; (8002318 <AT_Processing+0x21c>)
 800229c:	4619      	mov	r1, r3
 800229e:	480e      	ldr	r0, [pc, #56]	; (80022d8 <AT_Processing+0x1dc>)
 80022a0:	f7ff fe8e 	bl	8001fc0 <isReceiveData>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00f      	beq.n	80022ca <AT_Processing+0x1ce>
			LOG("\r\nRECEIVE FIRMWARE CHECKSUM\r\n");
 80022aa:	481c      	ldr	r0, [pc, #112]	; (800231c <AT_Processing+0x220>)
 80022ac:	f7fe fea6 	bl	8000ffc <UART_DEBUG_Transmit>
			data_respone_length = data_respone_index;
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <AT_Processing+0x1d8>)
 80022b2:	781a      	ldrb	r2, [r3, #0]
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <AT_Processing+0x1e8>)
 80022b6:	701a      	strb	r2, [r3, #0]
			data_respone_index = 0;
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <AT_Processing+0x1d8>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
			at_result = AT_FIRMWARE_CHECKSUM;
 80022be:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <AT_Processing+0x1d4>)
 80022c0:	2209      	movs	r2, #9
 80022c2:	701a      	strb	r2, [r3, #0]
	return;
 80022c4:	e001      	b.n	80022ca <AT_Processing+0x1ce>
		return;
 80022c6:	bf00      	nop
 80022c8:	e000      	b.n	80022cc <AT_Processing+0x1d0>
	return;
 80022ca:	bf00      	nop
}
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200000dd 	.word	0x200000dd
 80022d4:	200011c1 	.word	0x200011c1
 80022d8:	200001c0 	.word	0x200001c0
 80022dc:	200000e0 	.word	0x200000e0
 80022e0:	08006f0c 	.word	0x08006f0c
 80022e4:	200011c0 	.word	0x200011c0
 80022e8:	0800708c 	.word	0x0800708c
 80022ec:	08006f14 	.word	0x08006f14
 80022f0:	08007084 	.word	0x08007084
 80022f4:	08006f20 	.word	0x08006f20
 80022f8:	08007094 	.word	0x08007094
 80022fc:	08006f2c 	.word	0x08006f2c
 8002300:	080070a0 	.word	0x080070a0
 8002304:	08006f40 	.word	0x08006f40
 8002308:	080070b0 	.word	0x080070b0
 800230c:	08006f5c 	.word	0x08006f5c
 8002310:	080070c8 	.word	0x080070c8
 8002314:	08006f7c 	.word	0x08006f7c
 8002318:	080070bc 	.word	0x080070bc
 800231c:	08006f98 	.word	0x08006f98

08002320 <Get_AT_Result>:
/**
  * @brief Get_AT_Result Initialization Function
  * @param None
  * @retval at_result
  */
AT_Result Get_AT_Result(){
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
	return at_result;
 8002324:	4b02      	ldr	r3, [pc, #8]	; (8002330 <Get_AT_Result+0x10>)
 8002326:	781b      	ldrb	r3, [r3, #0]
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr
 8002330:	200000dd 	.word	0x200000dd

08002334 <Clear_AT_Result>:
/**
  * @brief Clear_AT_Result Initialization Function
  * @param None
  * @retval None
  */
void Clear_AT_Result(){
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
	at_result = AT_NONE;
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <Clear_AT_Result+0x14>)
 800233a:	220a      	movs	r2, #10
 800233c:	701a      	strb	r2, [r3, #0]
}
 800233e:	bf00      	nop
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	200000dd 	.word	0x200000dd

0800234c <Get_New_Task_ID>:

uint32_t count_SCH_Update = 0;
uint8_t testFlag = 0;
uint8_t strScheduler[] = "                                                                    ";

uint32_t Get_New_Task_ID(void){
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
	newTaskID++;
 8002350:	4b09      	ldr	r3, [pc, #36]	; (8002378 <Get_New_Task_ID+0x2c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	3301      	adds	r3, #1
 8002356:	4a08      	ldr	r2, [pc, #32]	; (8002378 <Get_New_Task_ID+0x2c>)
 8002358:	6013      	str	r3, [r2, #0]
	if(newTaskID == NO_TASK_ID){
 800235a:	4b07      	ldr	r3, [pc, #28]	; (8002378 <Get_New_Task_ID+0x2c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d104      	bne.n	800236c <Get_New_Task_ID+0x20>
		newTaskID++;
 8002362:	4b05      	ldr	r3, [pc, #20]	; (8002378 <Get_New_Task_ID+0x2c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	3301      	adds	r3, #1
 8002368:	4a03      	ldr	r2, [pc, #12]	; (8002378 <Get_New_Task_ID+0x2c>)
 800236a:	6013      	str	r3, [r2, #0]
	}
	return newTaskID;
 800236c:	4b02      	ldr	r3, [pc, #8]	; (8002378 <Get_New_Task_ID+0x2c>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr
 8002378:	200011c4 	.word	0x200011c4

0800237c <SCH_Update>:


void SCH_Update(void){
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
	// Check if there is a task at this location
	count_SCH_Update ++;
 8002380:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <SCH_Update+0x48>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	4a0f      	ldr	r2, [pc, #60]	; (80023c4 <SCH_Update+0x48>)
 8002388:	6013      	str	r3, [r2, #0]
	if (SCH_tasks_G[0].pTask && SCH_tasks_G[0].RunMe == 0) {
 800238a:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <SCH_Update+0x4c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d013      	beq.n	80023ba <SCH_Update+0x3e>
 8002392:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <SCH_Update+0x4c>)
 8002394:	7b1b      	ldrb	r3, [r3, #12]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10f      	bne.n	80023ba <SCH_Update+0x3e>
		if(SCH_tasks_G[0].Delay > 0){
 800239a:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <SCH_Update+0x4c>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d004      	beq.n	80023ac <SCH_Update+0x30>
			SCH_tasks_G[0].Delay = SCH_tasks_G[0].Delay - 1;
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <SCH_Update+0x4c>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	4a07      	ldr	r2, [pc, #28]	; (80023c8 <SCH_Update+0x4c>)
 80023aa:	6053      	str	r3, [r2, #4]
		}
		if (SCH_tasks_G[0].Delay == 0) {
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <SCH_Update+0x4c>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d102      	bne.n	80023ba <SCH_Update+0x3e>
			SCH_tasks_G[0].RunMe = 1;
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <SCH_Update+0x4c>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	731a      	strb	r2, [r3, #12]
		}
	}
}
 80023ba:	bf00      	nop
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	200011c8 	.word	0x200011c8
 80023c8:	20003fd8 	.word	0x20003fd8

080023cc <SCH_Add_Task>:
uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 80023cc:	b590      	push	{r4, r7, lr}
 80023ce:	b089      	sub	sp, #36	; 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
	uint8_t newTaskIndex = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	77fb      	strb	r3, [r7, #31]
	uint32_t sumDelay = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	61bb      	str	r3, [r7, #24]
	uint32_t newDelay = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	613b      	str	r3, [r7, #16]

	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 80023e4:	2300      	movs	r3, #0
 80023e6:	77fb      	strb	r3, [r7, #31]
 80023e8:	e133      	b.n	8002652 <SCH_Add_Task+0x286>
		sumDelay = sumDelay + SCH_tasks_G[newTaskIndex].Delay;
 80023ea:	7ffa      	ldrb	r2, [r7, #31]
 80023ec:	49a1      	ldr	r1, [pc, #644]	; (8002674 <SCH_Add_Task+0x2a8>)
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	3304      	adds	r3, #4
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4413      	add	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
		if(sumDelay > DELAY){
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	429a      	cmp	r2, r3
 8002408:	f240 80c1 	bls.w	800258e <SCH_Add_Task+0x1c2>
			newDelay = DELAY - (sumDelay - SCH_tasks_G[newTaskIndex].Delay);
 800240c:	7ffa      	ldrb	r2, [r7, #31]
 800240e:	4999      	ldr	r1, [pc, #612]	; (8002674 <SCH_Add_Task+0x2a8>)
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	3304      	adds	r3, #4
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	4413      	add	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
			SCH_tasks_G[newTaskIndex].Delay = sumDelay - DELAY;
 8002428:	7ffa      	ldrb	r2, [r7, #31]
 800242a:	69b9      	ldr	r1, [r7, #24]
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	1ac9      	subs	r1, r1, r3
 8002430:	4890      	ldr	r0, [pc, #576]	; (8002674 <SCH_Add_Task+0x2a8>)
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4403      	add	r3, r0
 800243c:	3304      	adds	r3, #4
 800243e:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 8002440:	2327      	movs	r3, #39	; 0x27
 8002442:	75fb      	strb	r3, [r7, #23]
 8002444:	e04c      	b.n	80024e0 <SCH_Add_Task+0x114>
//				if(SCH_tasks_G[i - 1].pTask != 0)
				{
					SCH_tasks_G[i].pTask = SCH_tasks_G[i - 1].pTask;
 8002446:	7dfb      	ldrb	r3, [r7, #23]
 8002448:	1e59      	subs	r1, r3, #1
 800244a:	7dfa      	ldrb	r2, [r7, #23]
 800244c:	4889      	ldr	r0, [pc, #548]	; (8002674 <SCH_Add_Task+0x2a8>)
 800244e:	460b      	mov	r3, r1
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4403      	add	r3, r0
 8002458:	6819      	ldr	r1, [r3, #0]
 800245a:	4886      	ldr	r0, [pc, #536]	; (8002674 <SCH_Add_Task+0x2a8>)
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4403      	add	r3, r0
 8002466:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].Period = SCH_tasks_G[i - 1].Period;
 8002468:	7dfb      	ldrb	r3, [r7, #23]
 800246a:	1e59      	subs	r1, r3, #1
 800246c:	7dfa      	ldrb	r2, [r7, #23]
 800246e:	4881      	ldr	r0, [pc, #516]	; (8002674 <SCH_Add_Task+0x2a8>)
 8002470:	460b      	mov	r3, r1
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4403      	add	r3, r0
 800247a:	3308      	adds	r3, #8
 800247c:	6819      	ldr	r1, [r3, #0]
 800247e:	487d      	ldr	r0, [pc, #500]	; (8002674 <SCH_Add_Task+0x2a8>)
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4403      	add	r3, r0
 800248a:	3308      	adds	r3, #8
 800248c:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].Delay = SCH_tasks_G[i - 1].Delay;
 800248e:	7dfb      	ldrb	r3, [r7, #23]
 8002490:	1e59      	subs	r1, r3, #1
 8002492:	7dfa      	ldrb	r2, [r7, #23]
 8002494:	4877      	ldr	r0, [pc, #476]	; (8002674 <SCH_Add_Task+0x2a8>)
 8002496:	460b      	mov	r3, r1
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4403      	add	r3, r0
 80024a0:	3304      	adds	r3, #4
 80024a2:	6819      	ldr	r1, [r3, #0]
 80024a4:	4873      	ldr	r0, [pc, #460]	; (8002674 <SCH_Add_Task+0x2a8>)
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4403      	add	r3, r0
 80024b0:	3304      	adds	r3, #4
 80024b2:	6019      	str	r1, [r3, #0]
//					SCH_tasks_G[i].RunMe = SCH_tasks_G[i - 1].RunMe;
					SCH_tasks_G[i].TaskID = SCH_tasks_G[i - 1].TaskID;
 80024b4:	7dfb      	ldrb	r3, [r7, #23]
 80024b6:	1e59      	subs	r1, r3, #1
 80024b8:	7dfa      	ldrb	r2, [r7, #23]
 80024ba:	486e      	ldr	r0, [pc, #440]	; (8002674 <SCH_Add_Task+0x2a8>)
 80024bc:	460b      	mov	r3, r1
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4403      	add	r3, r0
 80024c6:	3310      	adds	r3, #16
 80024c8:	6819      	ldr	r1, [r3, #0]
 80024ca:	486a      	ldr	r0, [pc, #424]	; (8002674 <SCH_Add_Task+0x2a8>)
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4403      	add	r3, r0
 80024d6:	3310      	adds	r3, #16
 80024d8:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 80024da:	7dfb      	ldrb	r3, [r7, #23]
 80024dc:	3b01      	subs	r3, #1
 80024de:	75fb      	strb	r3, [r7, #23]
 80024e0:	7dfa      	ldrb	r2, [r7, #23]
 80024e2:	7ffb      	ldrb	r3, [r7, #31]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d8ae      	bhi.n	8002446 <SCH_Add_Task+0x7a>
				}
			}
			SCH_tasks_G[newTaskIndex].pTask = pFunction;
 80024e8:	7ffa      	ldrb	r2, [r7, #31]
 80024ea:	4962      	ldr	r1, [pc, #392]	; (8002674 <SCH_Add_Task+0x2a8>)
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Delay = newDelay;
 80024fa:	7ffa      	ldrb	r2, [r7, #31]
 80024fc:	495d      	ldr	r1, [pc, #372]	; (8002674 <SCH_Add_Task+0x2a8>)
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	3304      	adds	r3, #4
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Period = PERIOD;
 800250e:	7ffa      	ldrb	r2, [r7, #31]
 8002510:	4958      	ldr	r1, [pc, #352]	; (8002674 <SCH_Add_Task+0x2a8>)
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	3308      	adds	r3, #8
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	601a      	str	r2, [r3, #0]
			if(SCH_tasks_G[newTaskIndex].Delay == 0){
 8002522:	7ffa      	ldrb	r2, [r7, #31]
 8002524:	4953      	ldr	r1, [pc, #332]	; (8002674 <SCH_Add_Task+0x2a8>)
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	3304      	adds	r3, #4
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10a      	bne.n	800254e <SCH_Add_Task+0x182>
				SCH_tasks_G[newTaskIndex].RunMe = 1;
 8002538:	7ffa      	ldrb	r2, [r7, #31]
 800253a:	494e      	ldr	r1, [pc, #312]	; (8002674 <SCH_Add_Task+0x2a8>)
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	330c      	adds	r3, #12
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
 800254c:	e009      	b.n	8002562 <SCH_Add_Task+0x196>
			} else {
				SCH_tasks_G[newTaskIndex].RunMe = 0;
 800254e:	7ffa      	ldrb	r2, [r7, #31]
 8002550:	4948      	ldr	r1, [pc, #288]	; (8002674 <SCH_Add_Task+0x2a8>)
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	330c      	adds	r3, #12
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
			}
			SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 8002562:	7ffc      	ldrb	r4, [r7, #31]
 8002564:	f7ff fef2 	bl	800234c <Get_New_Task_ID>
 8002568:	4602      	mov	r2, r0
 800256a:	4942      	ldr	r1, [pc, #264]	; (8002674 <SCH_Add_Task+0x2a8>)
 800256c:	4623      	mov	r3, r4
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4423      	add	r3, r4
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	3310      	adds	r3, #16
 8002578:	601a      	str	r2, [r3, #0]
			return SCH_tasks_G[newTaskIndex].TaskID;
 800257a:	7ffa      	ldrb	r2, [r7, #31]
 800257c:	493d      	ldr	r1, [pc, #244]	; (8002674 <SCH_Add_Task+0x2a8>)
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	3310      	adds	r3, #16
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	e06e      	b.n	800266c <SCH_Add_Task+0x2a0>
		} else {
			if(SCH_tasks_G[newTaskIndex].pTask == 0x0000){
 800258e:	7ffa      	ldrb	r2, [r7, #31]
 8002590:	4938      	ldr	r1, [pc, #224]	; (8002674 <SCH_Add_Task+0x2a8>)
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d154      	bne.n	800264c <SCH_Add_Task+0x280>
				SCH_tasks_G[newTaskIndex].pTask = pFunction;
 80025a2:	7ffa      	ldrb	r2, [r7, #31]
 80025a4:	4933      	ldr	r1, [pc, #204]	; (8002674 <SCH_Add_Task+0x2a8>)
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[newTaskIndex].Delay = DELAY - sumDelay;
 80025b4:	7ffa      	ldrb	r2, [r7, #31]
 80025b6:	68b9      	ldr	r1, [r7, #8]
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	1ac9      	subs	r1, r1, r3
 80025bc:	482d      	ldr	r0, [pc, #180]	; (8002674 <SCH_Add_Task+0x2a8>)
 80025be:	4613      	mov	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4403      	add	r3, r0
 80025c8:	3304      	adds	r3, #4
 80025ca:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[newTaskIndex].Period = PERIOD;
 80025cc:	7ffa      	ldrb	r2, [r7, #31]
 80025ce:	4929      	ldr	r1, [pc, #164]	; (8002674 <SCH_Add_Task+0x2a8>)
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	3308      	adds	r3, #8
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	601a      	str	r2, [r3, #0]
				if(SCH_tasks_G[newTaskIndex].Delay == 0){
 80025e0:	7ffa      	ldrb	r2, [r7, #31]
 80025e2:	4924      	ldr	r1, [pc, #144]	; (8002674 <SCH_Add_Task+0x2a8>)
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	3304      	adds	r3, #4
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10a      	bne.n	800260c <SCH_Add_Task+0x240>
					SCH_tasks_G[newTaskIndex].RunMe = 1;
 80025f6:	7ffa      	ldrb	r2, [r7, #31]
 80025f8:	491e      	ldr	r1, [pc, #120]	; (8002674 <SCH_Add_Task+0x2a8>)
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	330c      	adds	r3, #12
 8002606:	2201      	movs	r2, #1
 8002608:	701a      	strb	r2, [r3, #0]
 800260a:	e009      	b.n	8002620 <SCH_Add_Task+0x254>
				} else {
					SCH_tasks_G[newTaskIndex].RunMe = 0;
 800260c:	7ffa      	ldrb	r2, [r7, #31]
 800260e:	4919      	ldr	r1, [pc, #100]	; (8002674 <SCH_Add_Task+0x2a8>)
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	330c      	adds	r3, #12
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
				}
				SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 8002620:	7ffc      	ldrb	r4, [r7, #31]
 8002622:	f7ff fe93 	bl	800234c <Get_New_Task_ID>
 8002626:	4602      	mov	r2, r0
 8002628:	4912      	ldr	r1, [pc, #72]	; (8002674 <SCH_Add_Task+0x2a8>)
 800262a:	4623      	mov	r3, r4
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4423      	add	r3, r4
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	3310      	adds	r3, #16
 8002636:	601a      	str	r2, [r3, #0]
				return SCH_tasks_G[newTaskIndex].TaskID;
 8002638:	7ffa      	ldrb	r2, [r7, #31]
 800263a:	490e      	ldr	r1, [pc, #56]	; (8002674 <SCH_Add_Task+0x2a8>)
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	3310      	adds	r3, #16
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	e00f      	b.n	800266c <SCH_Add_Task+0x2a0>
	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 800264c:	7ffb      	ldrb	r3, [r7, #31]
 800264e:	3301      	adds	r3, #1
 8002650:	77fb      	strb	r3, [r7, #31]
 8002652:	7ffb      	ldrb	r3, [r7, #31]
 8002654:	2b27      	cmp	r3, #39	; 0x27
 8002656:	f67f aec8 	bls.w	80023ea <SCH_Add_Task+0x1e>
			}
		}
	}
	return SCH_tasks_G[newTaskIndex].TaskID;
 800265a:	7ffa      	ldrb	r2, [r7, #31]
 800265c:	4905      	ldr	r1, [pc, #20]	; (8002674 <SCH_Add_Task+0x2a8>)
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	440b      	add	r3, r1
 8002668:	3310      	adds	r3, #16
 800266a:	681b      	ldr	r3, [r3, #0]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3724      	adds	r7, #36	; 0x24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd90      	pop	{r4, r7, pc}
 8002674:	20003fd8 	.word	0x20003fd8

08002678 <SCH_Delete_Task>:


uint8_t SCH_Delete_Task(uint32_t taskID){
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	uint8_t Return_code  = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	737b      	strb	r3, [r7, #13]
	uint8_t taskIndex;
	uint8_t j;
	if(taskID != NO_TASK_ID){
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 80e2 	beq.w	8002850 <SCH_Delete_Task+0x1d8>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 800268c:	2300      	movs	r3, #0
 800268e:	73fb      	strb	r3, [r7, #15]
 8002690:	e0da      	b.n	8002848 <SCH_Delete_Task+0x1d0>
			if(SCH_tasks_G[taskIndex].TaskID == taskID){
 8002692:	7bfa      	ldrb	r2, [r7, #15]
 8002694:	4971      	ldr	r1, [pc, #452]	; (800285c <SCH_Delete_Task+0x1e4>)
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	440b      	add	r3, r1
 80026a0:	3310      	adds	r3, #16
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	f040 80cb 	bne.w	8002842 <SCH_Delete_Task+0x1ca>
				Return_code = 1;
 80026ac:	2301      	movs	r3, #1
 80026ae:	737b      	strb	r3, [r7, #13]
				if(taskIndex != 0 && taskIndex < SCH_MAX_TASKS - 1){
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d02b      	beq.n	800270e <SCH_Delete_Task+0x96>
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	2b26      	cmp	r3, #38	; 0x26
 80026ba:	d828      	bhi.n	800270e <SCH_Delete_Task+0x96>
					if(SCH_tasks_G[taskIndex+1].pTask != 0x0000){
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	4966      	ldr	r1, [pc, #408]	; (800285c <SCH_Delete_Task+0x1e4>)
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d01d      	beq.n	800270e <SCH_Delete_Task+0x96>
						SCH_tasks_G[taskIndex+1].Delay += SCH_tasks_G[taskIndex].Delay;
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	4961      	ldr	r1, [pc, #388]	; (800285c <SCH_Delete_Task+0x1e4>)
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	3304      	adds	r3, #4
 80026e4:	6819      	ldr	r1, [r3, #0]
 80026e6:	7bfa      	ldrb	r2, [r7, #15]
 80026e8:	485c      	ldr	r0, [pc, #368]	; (800285c <SCH_Delete_Task+0x1e4>)
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4403      	add	r3, r0
 80026f4:	3304      	adds	r3, #4
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	3201      	adds	r2, #1
 80026fc:	4419      	add	r1, r3
 80026fe:	4857      	ldr	r0, [pc, #348]	; (800285c <SCH_Delete_Task+0x1e4>)
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4403      	add	r3, r0
 800270a:	3304      	adds	r3, #4
 800270c:	6019      	str	r1, [r3, #0]
					}
				}

				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	73bb      	strb	r3, [r7, #14]
 8002712:	e060      	b.n	80027d6 <SCH_Delete_Task+0x15e>
					SCH_tasks_G[j].pTask = SCH_tasks_G[j+1].pTask;
 8002714:	7bbb      	ldrb	r3, [r7, #14]
 8002716:	1c59      	adds	r1, r3, #1
 8002718:	7bba      	ldrb	r2, [r7, #14]
 800271a:	4850      	ldr	r0, [pc, #320]	; (800285c <SCH_Delete_Task+0x1e4>)
 800271c:	460b      	mov	r3, r1
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4403      	add	r3, r0
 8002726:	6819      	ldr	r1, [r3, #0]
 8002728:	484c      	ldr	r0, [pc, #304]	; (800285c <SCH_Delete_Task+0x1e4>)
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4403      	add	r3, r0
 8002734:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Period = SCH_tasks_G[j+1].Period;
 8002736:	7bbb      	ldrb	r3, [r7, #14]
 8002738:	1c59      	adds	r1, r3, #1
 800273a:	7bba      	ldrb	r2, [r7, #14]
 800273c:	4847      	ldr	r0, [pc, #284]	; (800285c <SCH_Delete_Task+0x1e4>)
 800273e:	460b      	mov	r3, r1
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4403      	add	r3, r0
 8002748:	3308      	adds	r3, #8
 800274a:	6819      	ldr	r1, [r3, #0]
 800274c:	4843      	ldr	r0, [pc, #268]	; (800285c <SCH_Delete_Task+0x1e4>)
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4403      	add	r3, r0
 8002758:	3308      	adds	r3, #8
 800275a:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Delay = SCH_tasks_G[j+1].Delay;
 800275c:	7bbb      	ldrb	r3, [r7, #14]
 800275e:	1c59      	adds	r1, r3, #1
 8002760:	7bba      	ldrb	r2, [r7, #14]
 8002762:	483e      	ldr	r0, [pc, #248]	; (800285c <SCH_Delete_Task+0x1e4>)
 8002764:	460b      	mov	r3, r1
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4403      	add	r3, r0
 800276e:	3304      	adds	r3, #4
 8002770:	6819      	ldr	r1, [r3, #0]
 8002772:	483a      	ldr	r0, [pc, #232]	; (800285c <SCH_Delete_Task+0x1e4>)
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4403      	add	r3, r0
 800277e:	3304      	adds	r3, #4
 8002780:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].RunMe = SCH_tasks_G[j+1].RunMe;
 8002782:	7bbb      	ldrb	r3, [r7, #14]
 8002784:	1c59      	adds	r1, r3, #1
 8002786:	7bba      	ldrb	r2, [r7, #14]
 8002788:	4834      	ldr	r0, [pc, #208]	; (800285c <SCH_Delete_Task+0x1e4>)
 800278a:	460b      	mov	r3, r1
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	440b      	add	r3, r1
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4403      	add	r3, r0
 8002794:	330c      	adds	r3, #12
 8002796:	7818      	ldrb	r0, [r3, #0]
 8002798:	4930      	ldr	r1, [pc, #192]	; (800285c <SCH_Delete_Task+0x1e4>)
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	330c      	adds	r3, #12
 80027a6:	4602      	mov	r2, r0
 80027a8:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[j].TaskID = SCH_tasks_G[j+1].TaskID;
 80027aa:	7bbb      	ldrb	r3, [r7, #14]
 80027ac:	1c59      	adds	r1, r3, #1
 80027ae:	7bba      	ldrb	r2, [r7, #14]
 80027b0:	482a      	ldr	r0, [pc, #168]	; (800285c <SCH_Delete_Task+0x1e4>)
 80027b2:	460b      	mov	r3, r1
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	440b      	add	r3, r1
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4403      	add	r3, r0
 80027bc:	3310      	adds	r3, #16
 80027be:	6819      	ldr	r1, [r3, #0]
 80027c0:	4826      	ldr	r0, [pc, #152]	; (800285c <SCH_Delete_Task+0x1e4>)
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4403      	add	r3, r0
 80027cc:	3310      	adds	r3, #16
 80027ce:	6019      	str	r1, [r3, #0]
				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 80027d0:	7bbb      	ldrb	r3, [r7, #14]
 80027d2:	3301      	adds	r3, #1
 80027d4:	73bb      	strb	r3, [r7, #14]
 80027d6:	7bbb      	ldrb	r3, [r7, #14]
 80027d8:	2b26      	cmp	r3, #38	; 0x26
 80027da:	d99b      	bls.n	8002714 <SCH_Delete_Task+0x9c>
				}
				SCH_tasks_G[j].pTask = 0;
 80027dc:	7bba      	ldrb	r2, [r7, #14]
 80027de:	491f      	ldr	r1, [pc, #124]	; (800285c <SCH_Delete_Task+0x1e4>)
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Period = 0;
 80027ee:	7bba      	ldrb	r2, [r7, #14]
 80027f0:	491a      	ldr	r1, [pc, #104]	; (800285c <SCH_Delete_Task+0x1e4>)
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	3308      	adds	r3, #8
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Delay = 0;
 8002802:	7bba      	ldrb	r2, [r7, #14]
 8002804:	4915      	ldr	r1, [pc, #84]	; (800285c <SCH_Delete_Task+0x1e4>)
 8002806:	4613      	mov	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	3304      	adds	r3, #4
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].RunMe = 0;
 8002816:	7bba      	ldrb	r2, [r7, #14]
 8002818:	4910      	ldr	r1, [pc, #64]	; (800285c <SCH_Delete_Task+0x1e4>)
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	330c      	adds	r3, #12
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
				SCH_tasks_G[j].TaskID = 0;
 800282a:	7bba      	ldrb	r2, [r7, #14]
 800282c:	490b      	ldr	r1, [pc, #44]	; (800285c <SCH_Delete_Task+0x1e4>)
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	3310      	adds	r3, #16
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
				return Return_code;
 800283e:	7b7b      	ldrb	r3, [r7, #13]
 8002840:	e007      	b.n	8002852 <SCH_Delete_Task+0x1da>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	3301      	adds	r3, #1
 8002846:	73fb      	strb	r3, [r7, #15]
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	2b27      	cmp	r3, #39	; 0x27
 800284c:	f67f af21 	bls.w	8002692 <SCH_Delete_Task+0x1a>
			}
		}
	}
	return Return_code; // return status
 8002850:	7b7b      	ldrb	r3, [r7, #13]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr
 800285c:	20003fd8 	.word	0x20003fd8

08002860 <SCH_Dispatch_Tasks>:



void SCH_Dispatch_Tasks(void){
 8002860:	b5b0      	push	{r4, r5, r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].RunMe > 0) {
 8002866:	4b11      	ldr	r3, [pc, #68]	; (80028ac <SCH_Dispatch_Tasks+0x4c>)
 8002868:	7b1b      	ldrb	r3, [r3, #12]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d019      	beq.n	80028a2 <SCH_Dispatch_Tasks+0x42>
//		sprintf((char*) strScheduler, "count=%d\r\n", (int) count_SCH_Update);
//		UART3_SendToHost((uint8_t *)strScheduler);
		(*SCH_tasks_G[0].pTask)(); // Run the task
 800286e:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <SCH_Dispatch_Tasks+0x4c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4798      	blx	r3
		SCH_tasks_G[0].RunMe = 0; // Reset / reduce RunMe flag
 8002874:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <SCH_Dispatch_Tasks+0x4c>)
 8002876:	2200      	movs	r2, #0
 8002878:	731a      	strb	r2, [r3, #12]
		sTask temtask = SCH_tasks_G[0];
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <SCH_Dispatch_Tasks+0x4c>)
 800287c:	1d3c      	adds	r4, r7, #4
 800287e:	461d      	mov	r5, r3
 8002880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002884:	682b      	ldr	r3, [r5, #0]
 8002886:	6023      	str	r3, [r4, #0]
		SCH_Delete_Task(temtask.TaskID);
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff fef4 	bl	8002678 <SCH_Delete_Task>
		if (temtask.Period != 0) {
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d005      	beq.n	80028a2 <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(temtask.pTask, temtask.Period, temtask.Period);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68f9      	ldr	r1, [r7, #12]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fd95 	bl	80023cc <SCH_Add_Task>
		}
	}
}
 80028a2:	bf00      	nop
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bdb0      	pop	{r4, r5, r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20003fd8 	.word	0x20003fd8

080028b0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80028b4:	f3bf 8f4f 	dsb	sy
}
 80028b8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80028ba:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <__NVIC_SystemReset+0x24>)
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80028c2:	4904      	ldr	r1, [pc, #16]	; (80028d4 <__NVIC_SystemReset+0x24>)
 80028c4:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <__NVIC_SystemReset+0x28>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80028ca:	f3bf 8f4f 	dsb	sy
}
 80028ce:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <__NVIC_SystemReset+0x20>
 80028d4:	e000ed00 	.word	0xe000ed00
 80028d8:	05fa0004 	.word	0x05fa0004

080028dc <Jump_To_Current_Firmware>:
	Flash_Erase(CURRENT_VERSION_ADDR,1);
	Flash_Write_Char(CURRENT_VERSION_ADDR, version,strlen(VERSION));
}


void Jump_To_Current_Firmware(){
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
	Flash_Erase(FIRMWARE_CHOOSEN,1);
 80028e0:	2101      	movs	r1, #1
 80028e2:	4804      	ldr	r0, [pc, #16]	; (80028f4 <Jump_To_Current_Firmware+0x18>)
 80028e4:	f000 f82c 	bl	8002940 <Flash_Erase>
    Flash_Write_Int(FIRMWARE_CHOOSEN, CURRENT_FIRMWARE_CHOOSEN);
 80028e8:	2102      	movs	r1, #2
 80028ea:	4802      	ldr	r0, [pc, #8]	; (80028f4 <Jump_To_Current_Firmware+0x18>)
 80028ec:	f000 f84c 	bl	8002988 <Flash_Write_Int>
//	void (*app_reset_handler)(void) = (void*)(*(volatile uint32_t*) (CURRENT_FIRMWARE_ADDR + 4));
//	app_reset_handler();
	NVIC_SystemReset();
 80028f0:	f7ff ffde 	bl	80028b0 <__NVIC_SystemReset>
 80028f4:	08060000 	.word	0x08060000

080028f8 <Jump_To_Factory_Firmware>:
}

void Jump_To_Factory_Firmware(){
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
	Flash_Erase(FIRMWARE_CHOOSEN,1);
 80028fc:	2101      	movs	r1, #1
 80028fe:	4804      	ldr	r0, [pc, #16]	; (8002910 <Jump_To_Factory_Firmware+0x18>)
 8002900:	f000 f81e 	bl	8002940 <Flash_Erase>
    Flash_Write_Int(FIRMWARE_CHOOSEN, FACTORY_FIRMWARE_CHOOSEN);
 8002904:	2101      	movs	r1, #1
 8002906:	4802      	ldr	r0, [pc, #8]	; (8002910 <Jump_To_Factory_Firmware+0x18>)
 8002908:	f000 f83e 	bl	8002988 <Flash_Write_Int>
//	void (*app_reset_handler)(void) = (void*)(*(volatile uint32_t*) (FOTA_FIRMWARE_ADDR + 4));
//	app_reset_handler();
	NVIC_SystemReset();
 800290c:	f7ff ffd0 	bl	80028b0 <__NVIC_SystemReset>
 8002910:	08060000 	.word	0x08060000

08002914 <Get_Update_Firmware_Status>:
void Update_Firmware_Success(){
	Flash_Erase(UPDATE_STATUS_ADDR,1);
    Flash_Write_Int(UPDATE_STATUS_ADDR, UPDATE_SUCCESS);
}

uint8_t Get_Update_Firmware_Status(){
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
	return update_status;
 8002918:	4b02      	ldr	r3, [pc, #8]	; (8002924 <Get_Update_Firmware_Status+0x10>)
 800291a:	781b      	ldrb	r3, [r3, #0]
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr
 8002924:	2000252c 	.word	0x2000252c

08002928 <Flash_Lock>:
		data[i] = 0;
	}
}

void Flash_Lock()
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
	HAL_FLASH_Lock();
 800292c:	f000 fe6a 	bl	8003604 <HAL_FLASH_Lock>
}
 8002930:	bf00      	nop
 8002932:	bd80      	pop	{r7, pc}

08002934 <Flash_Unlock>:

void Flash_Unlock()
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8002938:	f000 fe3e 	bl	80035b8 <HAL_FLASH_Unlock>
}
 800293c:	bf00      	nop
 800293e:	bd80      	pop	{r7, pc}

08002940 <Flash_Erase>:

void Flash_Erase(uint32_t addr,uint32_t num_bytes)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
	uint32_t num_page = (uint32_t)(num_bytes/FLASH_PAGE_SIZE)+1;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	0adb      	lsrs	r3, r3, #11
 800294e:	3301      	adds	r3, #1
 8002950:	61fb      	str	r3, [r7, #28]
	uint32_t page_error;
	Flash_Unlock();
 8002952:	f7ff ffef 	bl	8002934 <Flash_Unlock>
	FLASH_EraseInitTypeDef erase_instance;
	erase_instance.TypeErase = FLASH_TYPEERASE_PAGES;
 8002956:	2300      	movs	r3, #0
 8002958:	60bb      	str	r3, [r7, #8]
	erase_instance.NbPages = num_page;
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	617b      	str	r3, [r7, #20]
	erase_instance.PageAddress = addr;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	613b      	str	r3, [r7, #16]
	HAL_FLASHEx_Erase(&erase_instance, &page_error);
 8002962:	f107 0218 	add.w	r2, r7, #24
 8002966:	f107 0308 	add.w	r3, r7, #8
 800296a:	4611      	mov	r1, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f000 feef 	bl	8003750 <HAL_FLASHEx_Erase>
	Flash_Lock();
 8002972:	f7ff ffd9 	bl	8002928 <Flash_Lock>
	LOG("Erase done\r\n");
 8002976:	4803      	ldr	r0, [pc, #12]	; (8002984 <Flash_Erase+0x44>)
 8002978:	f7fe fb40 	bl	8000ffc <UART_DEBUG_Transmit>
}
 800297c:	bf00      	nop
 800297e:	3720      	adds	r7, #32
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	08006fb8 	.word	0x08006fb8

08002988 <Flash_Write_Int>:

void Flash_Write_Int(uint32_t addr, int data)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
	Flash_Unlock();
 8002992:	f7ff ffcf 	bl	8002934 <Flash_Unlock>
	FLASH->CR |= FLASH_CR_PG;				/*!< Programming */
 8002996:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <Flash_Write_Int+0x58>)
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	4a11      	ldr	r2, [pc, #68]	; (80029e0 <Flash_Write_Int+0x58>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	6113      	str	r3, [r2, #16]
	while((FLASH->SR&FLASH_SR_BSY));
 80029a2:	bf00      	nop
 80029a4:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <Flash_Write_Int+0x58>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f9      	bne.n	80029a4 <Flash_Write_Int+0x1c>
	*(__IO uint16_t*)addr = data;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	b292      	uxth	r2, r2
 80029b6:	801a      	strh	r2, [r3, #0]
	while((FLASH->SR&FLASH_SR_BSY));
 80029b8:	bf00      	nop
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <Flash_Write_Int+0x58>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f9      	bne.n	80029ba <Flash_Write_Int+0x32>
	FLASH->CR &= ~FLASH_CR_PG;
 80029c6:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <Flash_Write_Int+0x58>)
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	4a05      	ldr	r2, [pc, #20]	; (80029e0 <Flash_Write_Int+0x58>)
 80029cc:	f023 0301 	bic.w	r3, r3, #1
 80029d0:	6113      	str	r3, [r2, #16]
	Flash_Lock();
 80029d2:	f7ff ffa9 	bl	8002928 <Flash_Lock>
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40022000 	.word	0x40022000

080029e4 <Flash_Write_Char>:
	return *val;
}


void Flash_Write_Char(uint32_t addr, uint8_t* data ,uint32_t data_len)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	; 0x28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
	char log[20];
	sprintf(log,"leng_char: %d\r\n",data_len);
 80029f0:	f107 0310 	add.w	r3, r7, #16
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	4920      	ldr	r1, [pc, #128]	; (8002a78 <Flash_Write_Char+0x94>)
 80029f8:	4618      	mov	r0, r3
 80029fa:	f003 fbd5 	bl	80061a8 <siprintf>
	LOG(log);
 80029fe:	f107 0310 	add.w	r3, r7, #16
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fe fafa 	bl	8000ffc <UART_DEBUG_Transmit>
	int i;
	uint16_t temp;
	Flash_Unlock();
 8002a08:	f7ff ff94 	bl	8002934 <Flash_Unlock>
	FLASH->CR |= FLASH_CR_PG;
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <Flash_Write_Char+0x98>)
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	4a1a      	ldr	r2, [pc, #104]	; (8002a7c <Flash_Write_Char+0x98>)
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	6113      	str	r3, [r2, #16]
	for(i=0; i<data_len; i+=2)
 8002a18:	2300      	movs	r3, #0
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1c:	e011      	b.n	8002a42 <Flash_Write_Char+0x5e>
	{
	  while((FLASH->SR&FLASH_SR_BSY));
 8002a1e:	bf00      	nop
 8002a20:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <Flash_Write_Char+0x98>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1f9      	bne.n	8002a20 <Flash_Write_Char+0x3c>
	  *(__IO uint16_t*)(addr + i) = *(uint16_t*)(data+i);
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	4413      	add	r3, r2
 8002a32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	440a      	add	r2, r1
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	8013      	strh	r3, [r2, #0]
	for(i=0; i<data_len; i+=2)
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	3302      	adds	r3, #2
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d8e9      	bhi.n	8002a1e <Flash_Write_Char+0x3a>
	}
	while((FLASH->SR&FLASH_SR_BSY));
 8002a4a:	bf00      	nop
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <Flash_Write_Char+0x98>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1f9      	bne.n	8002a4c <Flash_Write_Char+0x68>
	FLASH->CR &= ~FLASH_CR_PG;
 8002a58:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <Flash_Write_Char+0x98>)
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	4a07      	ldr	r2, [pc, #28]	; (8002a7c <Flash_Write_Char+0x98>)
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	6113      	str	r3, [r2, #16]
	Flash_Lock();
 8002a64:	f7ff ff60 	bl	8002928 <Flash_Lock>
	LOG("Write DOne");
 8002a68:	4805      	ldr	r0, [pc, #20]	; (8002a80 <Flash_Write_Char+0x9c>)
 8002a6a:	f7fe fac7 	bl	8000ffc <UART_DEBUG_Transmit>
}
 8002a6e:	bf00      	nop
 8002a70:	3728      	adds	r7, #40	; 0x28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	08006fc8 	.word	0x08006fc8
 8002a7c:	40022000 	.word	0x40022000
 8002a80:	08006fd8 	.word	0x08006fd8

08002a84 <FSM_Display_State>:

/**
 * HTTP_Display_State()
 * @brief This is function for display state of State Machine. It only show State when having a state changation.
 */
void FSM_Display_State(void){
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
	if(fsm_curr_state!=fsm_prev_state){
 8002a88:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <FSM_Display_State+0x3c>)
 8002a8a:	781a      	ldrb	r2, [r3, #0]
 8002a8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <FSM_Display_State+0x40>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d012      	beq.n	8002aba <FSM_Display_State+0x36>
		fsm_prev_state = fsm_curr_state;
 8002a94:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <FSM_Display_State+0x3c>)
 8002a96:	781a      	ldrb	r2, [r3, #0]
 8002a98:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <FSM_Display_State+0x40>)
 8002a9a:	701a      	strb	r2, [r3, #0]
		switch (fsm_curr_state) {
 8002a9c:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <FSM_Display_State+0x3c>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <FSM_Display_State+0x26>
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d004      	beq.n	8002ab2 <FSM_Display_State+0x2e>
				break;
			case VERSION_CHECKING_HTTP:
				LOG("\r\nVERSION CHECKING HTTP\r\n");
				break;
			default:
				break;
 8002aa8:	e008      	b.n	8002abc <FSM_Display_State+0x38>
				LOG("\r\nSTART SIMCOM\r\n");
 8002aaa:	4807      	ldr	r0, [pc, #28]	; (8002ac8 <FSM_Display_State+0x44>)
 8002aac:	f7fe faa6 	bl	8000ffc <UART_DEBUG_Transmit>
				break;
 8002ab0:	e004      	b.n	8002abc <FSM_Display_State+0x38>
				LOG("\r\nVERSION CHECKING HTTP\r\n");
 8002ab2:	4806      	ldr	r0, [pc, #24]	; (8002acc <FSM_Display_State+0x48>)
 8002ab4:	f7fe faa2 	bl	8000ffc <UART_DEBUG_Transmit>
				break;
 8002ab8:	e000      	b.n	8002abc <FSM_Display_State+0x38>
		}
	}
 8002aba:	bf00      	nop

}
 8002abc:	bf00      	nop
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	200011cc 	.word	0x200011cc
 8002ac4:	200011cd 	.word	0x200011cd
 8002ac8:	08006fe4 	.word	0x08006fe4
 8002acc:	08006ff8 	.word	0x08006ff8

08002ad0 <FSM_Run>:

/**
 * HTTP_Run()
 * @brief This is function can be called from external file. It run follow state machine method. Not have param.
 */
uint8_t FSM_Run(void){
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
	FSM_Display_State();
 8002ad4:	f7ff ffd6 	bl	8002a84 <FSM_Display_State>
	if(fsm_curr_state < FSM_MAX_STATE){
 8002ad8:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <FSM_Run+0x28>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d808      	bhi.n	8002af2 <FSM_Run+0x22>
		(*fsm_state_machine[fsm_curr_state].func)();
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <FSM_Run+0x28>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	4a05      	ldr	r2, [pc, #20]	; (8002afc <FSM_Run+0x2c>)
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4413      	add	r3, r2
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	4798      	blx	r3
		return 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e000      	b.n	8002af4 <FSM_Run+0x24>
	}
	else{
		return 1;
 8002af2:	2301      	movs	r3, #1
	}
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	200011cc 	.word	0x200011cc
 8002afc:	200000e4 	.word	0x200000e4

08002b00 <Start_Simcom>:


void Start_Simcom(){
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
	if(Sim7600_Run()){
 8002b04:	f7fd fe86 	bl	8000814 <Sim7600_Run>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <Start_Simcom+0x14>
		fsm_curr_state = VERSION_CHECKING_HTTP;
 8002b0e:	4b02      	ldr	r3, [pc, #8]	; (8002b18 <Start_Simcom+0x18>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	701a      	strb	r2, [r3, #0]
	}
}
 8002b14:	bf00      	nop
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	200011cc 	.word	0x200011cc

08002b1c <Version_Checking_Http>:
void Version_Checking_Http(){
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
	ret = HTTP_Run();
 8002b20:	f7fe fb7e 	bl	8001220 <HTTP_Run>
 8002b24:	4603      	mov	r3, r0
 8002b26:	461a      	mov	r2, r3
 8002b28:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <Version_Checking_Http+0x64>)
 8002b2a:	701a      	strb	r2, [r3, #0]
	if(ret == 1){
 8002b2c:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <Version_Checking_Http+0x64>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d116      	bne.n	8002b62 <Version_Checking_Http+0x46>
		LOG("Get into\r\n");
 8002b34:	4813      	ldr	r0, [pc, #76]	; (8002b84 <Version_Checking_Http+0x68>)
 8002b36:	f7fe fa61 	bl	8000ffc <UART_DEBUG_Transmit>
		if(Get_Update_Firmware_Status() == UPDATE_FAILED){
 8002b3a:	f7ff feeb 	bl	8002914 <Get_Update_Firmware_Status>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d105      	bne.n	8002b50 <Version_Checking_Http+0x34>
			LOG("Get into Update Failed\r\n");
 8002b44:	4810      	ldr	r0, [pc, #64]	; (8002b88 <Version_Checking_Http+0x6c>)
 8002b46:	f7fe fa59 	bl	8000ffc <UART_DEBUG_Transmit>
			Jump_To_Factory_Firmware();
 8002b4a:	f7ff fed5 	bl	80028f8 <Jump_To_Factory_Firmware>
	else if(ret == 2){
		Reset_SimConfiguration_State();
		HTTP_Set_State(HTTP_INIT);
		fsm_curr_state = START_SIMCOM;
	}
}
 8002b4e:	e014      	b.n	8002b7a <Version_Checking_Http+0x5e>
			LOG("Get into Update Success\r\n");
 8002b50:	480e      	ldr	r0, [pc, #56]	; (8002b8c <Version_Checking_Http+0x70>)
 8002b52:	f7fe fa53 	bl	8000ffc <UART_DEBUG_Transmit>
			fsm_curr_state = COPY_NEW_FIRMWARE;
 8002b56:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <Version_Checking_Http+0x74>)
 8002b58:	2202      	movs	r2, #2
 8002b5a:	701a      	strb	r2, [r3, #0]
			Jump_To_Current_Firmware();
 8002b5c:	f7ff febe 	bl	80028dc <Jump_To_Current_Firmware>
}
 8002b60:	e00b      	b.n	8002b7a <Version_Checking_Http+0x5e>
	else if(ret == 2){
 8002b62:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <Version_Checking_Http+0x64>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d107      	bne.n	8002b7a <Version_Checking_Http+0x5e>
		Reset_SimConfiguration_State();
 8002b6a:	f7fd fff3 	bl	8000b54 <Reset_SimConfiguration_State>
		HTTP_Set_State(HTTP_INIT);
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f7ff fa00 	bl	8001f74 <HTTP_Set_State>
		fsm_curr_state = START_SIMCOM;
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <Version_Checking_Http+0x74>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	701a      	strb	r2, [r3, #0]
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	200011ce 	.word	0x200011ce
 8002b84:	08007014 	.word	0x08007014
 8002b88:	08007020 	.word	0x08007020
 8002b8c:	0800703c 	.word	0x0800703c
 8002b90:	200011cc 	.word	0x200011cc

08002b94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b98:	f000 fa38 	bl	800300c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b9c:	f7fe f8da 	bl	8000d54 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  UART_SIM7600_Init();
 8002ba0:	f7fe f966 	bl	8000e70 <UART_SIM7600_Init>
  UART_DEBUG_Init();
 8002ba4:	f7fe fa00 	bl	8000fa8 <UART_DEBUG_Init>
  I2C_Init();
 8002ba8:	f7fe f84a 	bl	8000c40 <I2C_Init>
  Lcd_Initialization();
 8002bac:	f7fd fd3e 	bl	800062c <Lcd_Initialization>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  GPIO_Init();
 8002bb0:	f7fd ffd8 	bl	8000b64 <GPIO_Init>
  Timer_Init();
 8002bb4:	f7fe f914 	bl	8000de0 <Timer_Init>
  SPI2_Init();
 8002bb8:	f7fe f872 	bl	8000ca0 <SPI2_Init>
  MC25LC512_Initialize();
 8002bbc:	f7fd fb80 	bl	80002c0 <MC25LC512_Initialize>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  UART_DEBUG_Transmit("Fota Start\r\n");
 8002bc0:	4808      	ldr	r0, [pc, #32]	; (8002be4 <main+0x50>)
 8002bc2:	f7fe fa1b 	bl	8000ffc <UART_DEBUG_Transmit>
  Lcd_Clear_Display();
 8002bc6:	f7fd fd67 	bl	8000698 <Lcd_Clear_Display>
  Lcd_Show_String("FOTA START", 0, 0);
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4806      	ldr	r0, [pc, #24]	; (8002be8 <main+0x54>)
 8002bd0:	f7fd fd7a 	bl	80006c8 <Lcd_Show_String>
  while (1)
  {
    /* USER CODE END WHILE */
	  FSM_Run();
 8002bd4:	f7ff ff7c 	bl	8002ad0 <FSM_Run>
	  SCH_Dispatch_Tasks();
 8002bd8:	f7ff fe42 	bl	8002860 <SCH_Dispatch_Tasks>
	  AT_Processing();
 8002bdc:	f7ff fa8e 	bl	80020fc <AT_Processing>
  {
 8002be0:	e7f8      	b.n	8002bd4 <main+0x40>
 8002be2:	bf00      	nop
 8002be4:	08007058 	.word	0x08007058
 8002be8:	08007068 	.word	0x08007068

08002bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002bf0:	b672      	cpsid	i
}
 8002bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bf4:	e7fe      	b.n	8002bf4 <Error_Handler+0x8>
	...

08002bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002bfe:	4b15      	ldr	r3, [pc, #84]	; (8002c54 <HAL_MspInit+0x5c>)
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	4a14      	ldr	r2, [pc, #80]	; (8002c54 <HAL_MspInit+0x5c>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	6193      	str	r3, [r2, #24]
 8002c0a:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <HAL_MspInit+0x5c>)
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	60bb      	str	r3, [r7, #8]
 8002c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c16:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <HAL_MspInit+0x5c>)
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	4a0e      	ldr	r2, [pc, #56]	; (8002c54 <HAL_MspInit+0x5c>)
 8002c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c20:	61d3      	str	r3, [r2, #28]
 8002c22:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <HAL_MspInit+0x5c>)
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002c2e:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <HAL_MspInit+0x60>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	4a04      	ldr	r2, [pc, #16]	; (8002c58 <HAL_MspInit+0x60>)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr
 8002c54:	40021000 	.word	0x40021000
 8002c58:	40010000 	.word	0x40010000

08002c5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c64:	f107 0310 	add.w	r3, r7, #16
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	609a      	str	r2, [r3, #8]
 8002c70:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a15      	ldr	r2, [pc, #84]	; (8002ccc <HAL_I2C_MspInit+0x70>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d123      	bne.n	8002cc4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c7c:	4b14      	ldr	r3, [pc, #80]	; (8002cd0 <HAL_I2C_MspInit+0x74>)
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	4a13      	ldr	r2, [pc, #76]	; (8002cd0 <HAL_I2C_MspInit+0x74>)
 8002c82:	f043 0308 	orr.w	r3, r3, #8
 8002c86:	6193      	str	r3, [r2, #24]
 8002c88:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <HAL_I2C_MspInit+0x74>)
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c94:	23c0      	movs	r3, #192	; 0xc0
 8002c96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c98:	2312      	movs	r3, #18
 8002c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca0:	f107 0310 	add.w	r3, r7, #16
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	480b      	ldr	r0, [pc, #44]	; (8002cd4 <HAL_I2C_MspInit+0x78>)
 8002ca8:	f000 fdfa 	bl	80038a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cac:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <HAL_I2C_MspInit+0x74>)
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	4a07      	ldr	r2, [pc, #28]	; (8002cd0 <HAL_I2C_MspInit+0x74>)
 8002cb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cb6:	61d3      	str	r3, [r2, #28]
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <HAL_I2C_MspInit+0x74>)
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002cc4:	bf00      	nop
 8002cc6:	3720      	adds	r7, #32
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40005400 	.word	0x40005400
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40010c00 	.word	0x40010c00

08002cd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce0:	f107 0310 	add.w	r3, r7, #16
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a16      	ldr	r2, [pc, #88]	; (8002d4c <HAL_SPI_MspInit+0x74>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d124      	bne.n	8002d42 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002cf8:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <HAL_SPI_MspInit+0x78>)
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	4a14      	ldr	r2, [pc, #80]	; (8002d50 <HAL_SPI_MspInit+0x78>)
 8002cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d02:	61d3      	str	r3, [r2, #28]
 8002d04:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <HAL_SPI_MspInit+0x78>)
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d10:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <HAL_SPI_MspInit+0x78>)
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	4a0e      	ldr	r2, [pc, #56]	; (8002d50 <HAL_SPI_MspInit+0x78>)
 8002d16:	f043 0308 	orr.w	r3, r3, #8
 8002d1a:	6193      	str	r3, [r2, #24]
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <HAL_SPI_MspInit+0x78>)
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002d28:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002d2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d32:	2303      	movs	r3, #3
 8002d34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d36:	f107 0310 	add.w	r3, r7, #16
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4805      	ldr	r0, [pc, #20]	; (8002d54 <HAL_SPI_MspInit+0x7c>)
 8002d3e:	f000 fdaf 	bl	80038a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002d42:	bf00      	nop
 8002d44:	3720      	adds	r7, #32
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40003800 	.word	0x40003800
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40010c00 	.word	0x40010c00

08002d58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a0d      	ldr	r2, [pc, #52]	; (8002d9c <HAL_TIM_Base_MspInit+0x44>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d113      	bne.n	8002d92 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <HAL_TIM_Base_MspInit+0x48>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	4a0c      	ldr	r2, [pc, #48]	; (8002da0 <HAL_TIM_Base_MspInit+0x48>)
 8002d70:	f043 0302 	orr.w	r3, r3, #2
 8002d74:	61d3      	str	r3, [r2, #28]
 8002d76:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <HAL_TIM_Base_MspInit+0x48>)
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002d82:	2200      	movs	r2, #0
 8002d84:	2100      	movs	r1, #0
 8002d86:	201d      	movs	r0, #29
 8002d88:	f000 fa9d 	bl	80032c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d8c:	201d      	movs	r0, #29
 8002d8e:	f000 fab6 	bl	80032fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d92:	bf00      	nop
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40000400 	.word	0x40000400
 8002da0:	40021000 	.word	0x40021000

08002da4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08a      	sub	sp, #40	; 0x28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dac:	f107 0318 	add.w	r3, r7, #24
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a3c      	ldr	r2, [pc, #240]	; (8002eb0 <HAL_UART_MspInit+0x10c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d13a      	bne.n	8002e3a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dc4:	4b3b      	ldr	r3, [pc, #236]	; (8002eb4 <HAL_UART_MspInit+0x110>)
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	4a3a      	ldr	r2, [pc, #232]	; (8002eb4 <HAL_UART_MspInit+0x110>)
 8002dca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dce:	6193      	str	r3, [r2, #24]
 8002dd0:	4b38      	ldr	r3, [pc, #224]	; (8002eb4 <HAL_UART_MspInit+0x110>)
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ddc:	4b35      	ldr	r3, [pc, #212]	; (8002eb4 <HAL_UART_MspInit+0x110>)
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	4a34      	ldr	r2, [pc, #208]	; (8002eb4 <HAL_UART_MspInit+0x110>)
 8002de2:	f043 0304 	orr.w	r3, r3, #4
 8002de6:	6193      	str	r3, [r2, #24]
 8002de8:	4b32      	ldr	r3, [pc, #200]	; (8002eb4 <HAL_UART_MspInit+0x110>)
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e02:	f107 0318 	add.w	r3, r7, #24
 8002e06:	4619      	mov	r1, r3
 8002e08:	482b      	ldr	r0, [pc, #172]	; (8002eb8 <HAL_UART_MspInit+0x114>)
 8002e0a:	f000 fd49 	bl	80038a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1c:	f107 0318 	add.w	r3, r7, #24
 8002e20:	4619      	mov	r1, r3
 8002e22:	4825      	ldr	r0, [pc, #148]	; (8002eb8 <HAL_UART_MspInit+0x114>)
 8002e24:	f000 fd3c 	bl	80038a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	2025      	movs	r0, #37	; 0x25
 8002e2e:	f000 fa4a 	bl	80032c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e32:	2025      	movs	r0, #37	; 0x25
 8002e34:	f000 fa63 	bl	80032fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e38:	e036      	b.n	8002ea8 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a1f      	ldr	r2, [pc, #124]	; (8002ebc <HAL_UART_MspInit+0x118>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d131      	bne.n	8002ea8 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e44:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <HAL_UART_MspInit+0x110>)
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	4a1a      	ldr	r2, [pc, #104]	; (8002eb4 <HAL_UART_MspInit+0x110>)
 8002e4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e4e:	61d3      	str	r3, [r2, #28]
 8002e50:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <HAL_UART_MspInit+0x110>)
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e5c:	4b15      	ldr	r3, [pc, #84]	; (8002eb4 <HAL_UART_MspInit+0x110>)
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	4a14      	ldr	r2, [pc, #80]	; (8002eb4 <HAL_UART_MspInit+0x110>)
 8002e62:	f043 0308 	orr.w	r3, r3, #8
 8002e66:	6193      	str	r3, [r2, #24]
 8002e68:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <HAL_UART_MspInit+0x110>)
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e82:	f107 0318 	add.w	r3, r7, #24
 8002e86:	4619      	mov	r1, r3
 8002e88:	480d      	ldr	r0, [pc, #52]	; (8002ec0 <HAL_UART_MspInit+0x11c>)
 8002e8a:	f000 fd09 	bl	80038a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e9c:	f107 0318 	add.w	r3, r7, #24
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4807      	ldr	r0, [pc, #28]	; (8002ec0 <HAL_UART_MspInit+0x11c>)
 8002ea4:	f000 fcfc 	bl	80038a0 <HAL_GPIO_Init>
}
 8002ea8:	bf00      	nop
 8002eaa:	3728      	adds	r7, #40	; 0x28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40013800 	.word	0x40013800
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	40010800 	.word	0x40010800
 8002ebc:	40004800 	.word	0x40004800
 8002ec0:	40010c00 	.word	0x40010c00

08002ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ec8:	e7fe      	b.n	8002ec8 <NMI_Handler+0x4>

08002eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ece:	e7fe      	b.n	8002ece <HardFault_Handler+0x4>

08002ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ed4:	e7fe      	b.n	8002ed4 <MemManage_Handler+0x4>

08002ed6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eda:	e7fe      	b.n	8002eda <BusFault_Handler+0x4>

08002edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ee0:	e7fe      	b.n	8002ee0 <UsageFault_Handler+0x4>

08002ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ee6:	bf00      	nop
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr

08002eee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr

08002efa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002efa:	b480      	push	{r7}
 8002efc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002efe:	bf00      	nop
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr

08002f06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f0a:	f000 f8c5 	bl	8003098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f18:	4802      	ldr	r0, [pc, #8]	; (8002f24 <TIM3_IRQHandler+0x10>)
 8002f1a:	f002 f9e7 	bl	80052ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	200012f8 	.word	0x200012f8

08002f28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f2c:	4802      	ldr	r0, [pc, #8]	; (8002f38 <USART1_IRQHandler+0x10>)
 8002f2e:	f002 fce9 	bl	8005904 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	20002388 	.word	0x20002388

08002f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f44:	4a14      	ldr	r2, [pc, #80]	; (8002f98 <_sbrk+0x5c>)
 8002f46:	4b15      	ldr	r3, [pc, #84]	; (8002f9c <_sbrk+0x60>)
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f50:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <_sbrk+0x64>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d102      	bne.n	8002f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f58:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <_sbrk+0x64>)
 8002f5a:	4a12      	ldr	r2, [pc, #72]	; (8002fa4 <_sbrk+0x68>)
 8002f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f5e:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <_sbrk+0x64>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4413      	add	r3, r2
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d207      	bcs.n	8002f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f6c:	f003 f8ea 	bl	8006144 <__errno>
 8002f70:	4603      	mov	r3, r0
 8002f72:	220c      	movs	r2, #12
 8002f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f76:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7a:	e009      	b.n	8002f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f7c:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <_sbrk+0x64>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f82:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <_sbrk+0x64>)
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4413      	add	r3, r2
 8002f8a:	4a05      	ldr	r2, [pc, #20]	; (8002fa0 <_sbrk+0x64>)
 8002f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20010000 	.word	0x20010000
 8002f9c:	00000400 	.word	0x00000400
 8002fa0:	200011d0 	.word	0x200011d0
 8002fa4:	20004330 	.word	0x20004330

08002fa8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8002fac:	4b03      	ldr	r3, [pc, #12]	; (8002fbc <SystemInit+0x14>)
 8002fae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fb2:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fb4:	bf00      	nop
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr
 8002fbc:	e000ed00 	.word	0xe000ed00

08002fc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fc0:	480c      	ldr	r0, [pc, #48]	; (8002ff4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fc2:	490d      	ldr	r1, [pc, #52]	; (8002ff8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fc4:	4a0d      	ldr	r2, [pc, #52]	; (8002ffc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fc8:	e002      	b.n	8002fd0 <LoopCopyDataInit>

08002fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fce:	3304      	adds	r3, #4

08002fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fd4:	d3f9      	bcc.n	8002fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fd6:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002fd8:	4c0a      	ldr	r4, [pc, #40]	; (8003004 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fdc:	e001      	b.n	8002fe2 <LoopFillZerobss>

08002fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fe0:	3204      	adds	r2, #4

08002fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fe4:	d3fb      	bcc.n	8002fde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002fe6:	f7ff ffdf 	bl	8002fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fea:	f003 f8b1 	bl	8006150 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fee:	f7ff fdd1 	bl	8002b94 <main>
  bx lr
 8002ff2:	4770      	bx	lr
  ldr r0, =_sdata
 8002ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ff8:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8002ffc:	08007124 	.word	0x08007124
  ldr r2, =_sbss
 8003000:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8003004:	20004330 	.word	0x20004330

08003008 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003008:	e7fe      	b.n	8003008 <ADC1_2_IRQHandler>
	...

0800300c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003010:	4b08      	ldr	r3, [pc, #32]	; (8003034 <HAL_Init+0x28>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a07      	ldr	r2, [pc, #28]	; (8003034 <HAL_Init+0x28>)
 8003016:	f043 0310 	orr.w	r3, r3, #16
 800301a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800301c:	2003      	movs	r0, #3
 800301e:	f000 f947 	bl	80032b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003022:	200f      	movs	r0, #15
 8003024:	f000 f808 	bl	8003038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003028:	f7ff fde6 	bl	8002bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40022000 	.word	0x40022000

08003038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003040:	4b12      	ldr	r3, [pc, #72]	; (800308c <HAL_InitTick+0x54>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <HAL_InitTick+0x58>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	4619      	mov	r1, r3
 800304a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800304e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003052:	fbb2 f3f3 	udiv	r3, r2, r3
 8003056:	4618      	mov	r0, r3
 8003058:	f000 f95f 	bl	800331a <HAL_SYSTICK_Config>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e00e      	b.n	8003084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b0f      	cmp	r3, #15
 800306a:	d80a      	bhi.n	8003082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800306c:	2200      	movs	r2, #0
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	f04f 30ff 	mov.w	r0, #4294967295
 8003074:	f000 f927 	bl	80032c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003078:	4a06      	ldr	r2, [pc, #24]	; (8003094 <HAL_InitTick+0x5c>)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	e000      	b.n	8003084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
}
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	200000f4 	.word	0x200000f4
 8003090:	200000fc 	.word	0x200000fc
 8003094:	200000f8 	.word	0x200000f8

08003098 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800309c:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <HAL_IncTick+0x1c>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_IncTick+0x20>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4413      	add	r3, r2
 80030a8:	4a03      	ldr	r2, [pc, #12]	; (80030b8 <HAL_IncTick+0x20>)
 80030aa:	6013      	str	r3, [r2, #0]
}
 80030ac:	bf00      	nop
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr
 80030b4:	200000fc 	.word	0x200000fc
 80030b8:	200042f8 	.word	0x200042f8

080030bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return uwTick;
 80030c0:	4b02      	ldr	r3, [pc, #8]	; (80030cc <HAL_GetTick+0x10>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr
 80030cc:	200042f8 	.word	0x200042f8

080030d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d8:	f7ff fff0 	bl	80030bc <HAL_GetTick>
 80030dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d005      	beq.n	80030f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ea:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <HAL_Delay+0x44>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4413      	add	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030f6:	bf00      	nop
 80030f8:	f7ff ffe0 	bl	80030bc <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	429a      	cmp	r2, r3
 8003106:	d8f7      	bhi.n	80030f8 <HAL_Delay+0x28>
  {
  }
}
 8003108:	bf00      	nop
 800310a:	bf00      	nop
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	200000fc 	.word	0x200000fc

08003118 <__NVIC_SetPriorityGrouping>:
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003128:	4b0c      	ldr	r3, [pc, #48]	; (800315c <__NVIC_SetPriorityGrouping+0x44>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003134:	4013      	ands	r3, r2
 8003136:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800314a:	4a04      	ldr	r2, [pc, #16]	; (800315c <__NVIC_SetPriorityGrouping+0x44>)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	60d3      	str	r3, [r2, #12]
}
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <__NVIC_GetPriorityGrouping>:
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003164:	4b04      	ldr	r3, [pc, #16]	; (8003178 <__NVIC_GetPriorityGrouping+0x18>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	0a1b      	lsrs	r3, r3, #8
 800316a:	f003 0307 	and.w	r3, r3, #7
}
 800316e:	4618      	mov	r0, r3
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <__NVIC_EnableIRQ>:
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	2b00      	cmp	r3, #0
 800318c:	db0b      	blt.n	80031a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	f003 021f 	and.w	r2, r3, #31
 8003194:	4906      	ldr	r1, [pc, #24]	; (80031b0 <__NVIC_EnableIRQ+0x34>)
 8003196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	2001      	movs	r0, #1
 800319e:	fa00 f202 	lsl.w	r2, r0, r2
 80031a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr
 80031b0:	e000e100 	.word	0xe000e100

080031b4 <__NVIC_SetPriority>:
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	6039      	str	r1, [r7, #0]
 80031be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	db0a      	blt.n	80031de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	490c      	ldr	r1, [pc, #48]	; (8003200 <__NVIC_SetPriority+0x4c>)
 80031ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d2:	0112      	lsls	r2, r2, #4
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	440b      	add	r3, r1
 80031d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80031dc:	e00a      	b.n	80031f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	4908      	ldr	r1, [pc, #32]	; (8003204 <__NVIC_SetPriority+0x50>)
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	3b04      	subs	r3, #4
 80031ec:	0112      	lsls	r2, r2, #4
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	440b      	add	r3, r1
 80031f2:	761a      	strb	r2, [r3, #24]
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	e000e100 	.word	0xe000e100
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <NVIC_EncodePriority>:
{
 8003208:	b480      	push	{r7}
 800320a:	b089      	sub	sp, #36	; 0x24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f1c3 0307 	rsb	r3, r3, #7
 8003222:	2b04      	cmp	r3, #4
 8003224:	bf28      	it	cs
 8003226:	2304      	movcs	r3, #4
 8003228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3304      	adds	r3, #4
 800322e:	2b06      	cmp	r3, #6
 8003230:	d902      	bls.n	8003238 <NVIC_EncodePriority+0x30>
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3b03      	subs	r3, #3
 8003236:	e000      	b.n	800323a <NVIC_EncodePriority+0x32>
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800323c:	f04f 32ff 	mov.w	r2, #4294967295
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43da      	mvns	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	401a      	ands	r2, r3
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003250:	f04f 31ff 	mov.w	r1, #4294967295
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	fa01 f303 	lsl.w	r3, r1, r3
 800325a:	43d9      	mvns	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003260:	4313      	orrs	r3, r2
}
 8003262:	4618      	mov	r0, r3
 8003264:	3724      	adds	r7, #36	; 0x24
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr

0800326c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3b01      	subs	r3, #1
 8003278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800327c:	d301      	bcc.n	8003282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800327e:	2301      	movs	r3, #1
 8003280:	e00f      	b.n	80032a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003282:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <SysTick_Config+0x40>)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3b01      	subs	r3, #1
 8003288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800328a:	210f      	movs	r1, #15
 800328c:	f04f 30ff 	mov.w	r0, #4294967295
 8003290:	f7ff ff90 	bl	80031b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <SysTick_Config+0x40>)
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800329a:	4b04      	ldr	r3, [pc, #16]	; (80032ac <SysTick_Config+0x40>)
 800329c:	2207      	movs	r2, #7
 800329e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	e000e010 	.word	0xe000e010

080032b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ff2d 	bl	8003118 <__NVIC_SetPriorityGrouping>
}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b086      	sub	sp, #24
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	4603      	mov	r3, r0
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032d8:	f7ff ff42 	bl	8003160 <__NVIC_GetPriorityGrouping>
 80032dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	6978      	ldr	r0, [r7, #20]
 80032e4:	f7ff ff90 	bl	8003208 <NVIC_EncodePriority>
 80032e8:	4602      	mov	r2, r0
 80032ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ee:	4611      	mov	r1, r2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff ff5f 	bl	80031b4 <__NVIC_SetPriority>
}
 80032f6:	bf00      	nop
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b082      	sub	sp, #8
 8003302:	af00      	add	r7, sp, #0
 8003304:	4603      	mov	r3, r0
 8003306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff ff35 	bl	800317c <__NVIC_EnableIRQ>
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b082      	sub	sp, #8
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff ffa2 	bl	800326c <SysTick_Config>
 8003328:	4603      	mov	r3, r0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003332:	b480      	push	{r7}
 8003334:	b085      	sub	sp, #20
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003344:	2b02      	cmp	r3, #2
 8003346:	d008      	beq.n	800335a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2204      	movs	r2, #4
 800334c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e020      	b.n	800339c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 020e 	bic.w	r2, r2, #14
 8003368:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0201 	bic.w	r2, r2, #1
 8003378:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003382:	2101      	movs	r1, #1
 8003384:	fa01 f202 	lsl.w	r2, r1, r2
 8003388:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800339a:	7bfb      	ldrb	r3, [r7, #15]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr
	...

080033a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b0:	2300      	movs	r3, #0
 80033b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d005      	beq.n	80033ca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2204      	movs	r2, #4
 80033c2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
 80033c8:	e0d6      	b.n	8003578 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 020e 	bic.w	r2, r2, #14
 80033d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0201 	bic.w	r2, r2, #1
 80033e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	4b64      	ldr	r3, [pc, #400]	; (8003584 <HAL_DMA_Abort_IT+0x1dc>)
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d958      	bls.n	80034a8 <HAL_DMA_Abort_IT+0x100>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a63      	ldr	r2, [pc, #396]	; (8003588 <HAL_DMA_Abort_IT+0x1e0>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d04f      	beq.n	80034a0 <HAL_DMA_Abort_IT+0xf8>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a61      	ldr	r2, [pc, #388]	; (800358c <HAL_DMA_Abort_IT+0x1e4>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d048      	beq.n	800349c <HAL_DMA_Abort_IT+0xf4>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a60      	ldr	r2, [pc, #384]	; (8003590 <HAL_DMA_Abort_IT+0x1e8>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d040      	beq.n	8003496 <HAL_DMA_Abort_IT+0xee>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a5e      	ldr	r2, [pc, #376]	; (8003594 <HAL_DMA_Abort_IT+0x1ec>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d038      	beq.n	8003490 <HAL_DMA_Abort_IT+0xe8>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a5d      	ldr	r2, [pc, #372]	; (8003598 <HAL_DMA_Abort_IT+0x1f0>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d030      	beq.n	800348a <HAL_DMA_Abort_IT+0xe2>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a5b      	ldr	r2, [pc, #364]	; (800359c <HAL_DMA_Abort_IT+0x1f4>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d028      	beq.n	8003484 <HAL_DMA_Abort_IT+0xdc>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a53      	ldr	r2, [pc, #332]	; (8003584 <HAL_DMA_Abort_IT+0x1dc>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d020      	beq.n	800347e <HAL_DMA_Abort_IT+0xd6>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a57      	ldr	r2, [pc, #348]	; (80035a0 <HAL_DMA_Abort_IT+0x1f8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d019      	beq.n	800347a <HAL_DMA_Abort_IT+0xd2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a56      	ldr	r2, [pc, #344]	; (80035a4 <HAL_DMA_Abort_IT+0x1fc>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d012      	beq.n	8003476 <HAL_DMA_Abort_IT+0xce>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a54      	ldr	r2, [pc, #336]	; (80035a8 <HAL_DMA_Abort_IT+0x200>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00a      	beq.n	8003470 <HAL_DMA_Abort_IT+0xc8>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a53      	ldr	r2, [pc, #332]	; (80035ac <HAL_DMA_Abort_IT+0x204>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d102      	bne.n	800346a <HAL_DMA_Abort_IT+0xc2>
 8003464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003468:	e01b      	b.n	80034a2 <HAL_DMA_Abort_IT+0xfa>
 800346a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800346e:	e018      	b.n	80034a2 <HAL_DMA_Abort_IT+0xfa>
 8003470:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003474:	e015      	b.n	80034a2 <HAL_DMA_Abort_IT+0xfa>
 8003476:	2310      	movs	r3, #16
 8003478:	e013      	b.n	80034a2 <HAL_DMA_Abort_IT+0xfa>
 800347a:	2301      	movs	r3, #1
 800347c:	e011      	b.n	80034a2 <HAL_DMA_Abort_IT+0xfa>
 800347e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003482:	e00e      	b.n	80034a2 <HAL_DMA_Abort_IT+0xfa>
 8003484:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003488:	e00b      	b.n	80034a2 <HAL_DMA_Abort_IT+0xfa>
 800348a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800348e:	e008      	b.n	80034a2 <HAL_DMA_Abort_IT+0xfa>
 8003490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003494:	e005      	b.n	80034a2 <HAL_DMA_Abort_IT+0xfa>
 8003496:	f44f 7380 	mov.w	r3, #256	; 0x100
 800349a:	e002      	b.n	80034a2 <HAL_DMA_Abort_IT+0xfa>
 800349c:	2310      	movs	r3, #16
 800349e:	e000      	b.n	80034a2 <HAL_DMA_Abort_IT+0xfa>
 80034a0:	2301      	movs	r3, #1
 80034a2:	4a43      	ldr	r2, [pc, #268]	; (80035b0 <HAL_DMA_Abort_IT+0x208>)
 80034a4:	6053      	str	r3, [r2, #4]
 80034a6:	e057      	b.n	8003558 <HAL_DMA_Abort_IT+0x1b0>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a36      	ldr	r2, [pc, #216]	; (8003588 <HAL_DMA_Abort_IT+0x1e0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d04f      	beq.n	8003552 <HAL_DMA_Abort_IT+0x1aa>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a35      	ldr	r2, [pc, #212]	; (800358c <HAL_DMA_Abort_IT+0x1e4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d048      	beq.n	800354e <HAL_DMA_Abort_IT+0x1a6>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a33      	ldr	r2, [pc, #204]	; (8003590 <HAL_DMA_Abort_IT+0x1e8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d040      	beq.n	8003548 <HAL_DMA_Abort_IT+0x1a0>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a32      	ldr	r2, [pc, #200]	; (8003594 <HAL_DMA_Abort_IT+0x1ec>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d038      	beq.n	8003542 <HAL_DMA_Abort_IT+0x19a>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a30      	ldr	r2, [pc, #192]	; (8003598 <HAL_DMA_Abort_IT+0x1f0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d030      	beq.n	800353c <HAL_DMA_Abort_IT+0x194>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a2f      	ldr	r2, [pc, #188]	; (800359c <HAL_DMA_Abort_IT+0x1f4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d028      	beq.n	8003536 <HAL_DMA_Abort_IT+0x18e>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a26      	ldr	r2, [pc, #152]	; (8003584 <HAL_DMA_Abort_IT+0x1dc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d020      	beq.n	8003530 <HAL_DMA_Abort_IT+0x188>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a2b      	ldr	r2, [pc, #172]	; (80035a0 <HAL_DMA_Abort_IT+0x1f8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d019      	beq.n	800352c <HAL_DMA_Abort_IT+0x184>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a29      	ldr	r2, [pc, #164]	; (80035a4 <HAL_DMA_Abort_IT+0x1fc>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d012      	beq.n	8003528 <HAL_DMA_Abort_IT+0x180>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a28      	ldr	r2, [pc, #160]	; (80035a8 <HAL_DMA_Abort_IT+0x200>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d00a      	beq.n	8003522 <HAL_DMA_Abort_IT+0x17a>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a26      	ldr	r2, [pc, #152]	; (80035ac <HAL_DMA_Abort_IT+0x204>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d102      	bne.n	800351c <HAL_DMA_Abort_IT+0x174>
 8003516:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800351a:	e01b      	b.n	8003554 <HAL_DMA_Abort_IT+0x1ac>
 800351c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003520:	e018      	b.n	8003554 <HAL_DMA_Abort_IT+0x1ac>
 8003522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003526:	e015      	b.n	8003554 <HAL_DMA_Abort_IT+0x1ac>
 8003528:	2310      	movs	r3, #16
 800352a:	e013      	b.n	8003554 <HAL_DMA_Abort_IT+0x1ac>
 800352c:	2301      	movs	r3, #1
 800352e:	e011      	b.n	8003554 <HAL_DMA_Abort_IT+0x1ac>
 8003530:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003534:	e00e      	b.n	8003554 <HAL_DMA_Abort_IT+0x1ac>
 8003536:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800353a:	e00b      	b.n	8003554 <HAL_DMA_Abort_IT+0x1ac>
 800353c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003540:	e008      	b.n	8003554 <HAL_DMA_Abort_IT+0x1ac>
 8003542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003546:	e005      	b.n	8003554 <HAL_DMA_Abort_IT+0x1ac>
 8003548:	f44f 7380 	mov.w	r3, #256	; 0x100
 800354c:	e002      	b.n	8003554 <HAL_DMA_Abort_IT+0x1ac>
 800354e:	2310      	movs	r3, #16
 8003550:	e000      	b.n	8003554 <HAL_DMA_Abort_IT+0x1ac>
 8003552:	2301      	movs	r3, #1
 8003554:	4a17      	ldr	r2, [pc, #92]	; (80035b4 <HAL_DMA_Abort_IT+0x20c>)
 8003556:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	4798      	blx	r3
    } 
  }
  return status;
 8003578:	7bfb      	ldrb	r3, [r7, #15]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40020080 	.word	0x40020080
 8003588:	40020008 	.word	0x40020008
 800358c:	4002001c 	.word	0x4002001c
 8003590:	40020030 	.word	0x40020030
 8003594:	40020044 	.word	0x40020044
 8003598:	40020058 	.word	0x40020058
 800359c:	4002006c 	.word	0x4002006c
 80035a0:	40020408 	.word	0x40020408
 80035a4:	4002041c 	.word	0x4002041c
 80035a8:	40020430 	.word	0x40020430
 80035ac:	40020444 	.word	0x40020444
 80035b0:	40020400 	.word	0x40020400
 80035b4:	40020000 	.word	0x40020000

080035b8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80035c2:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <HAL_FLASH_Unlock+0x40>)
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00d      	beq.n	80035ea <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80035ce:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <HAL_FLASH_Unlock+0x40>)
 80035d0:	4a0a      	ldr	r2, [pc, #40]	; (80035fc <HAL_FLASH_Unlock+0x44>)
 80035d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80035d4:	4b08      	ldr	r3, [pc, #32]	; (80035f8 <HAL_FLASH_Unlock+0x40>)
 80035d6:	4a0a      	ldr	r2, [pc, #40]	; (8003600 <HAL_FLASH_Unlock+0x48>)
 80035d8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80035da:	4b07      	ldr	r3, [pc, #28]	; (80035f8 <HAL_FLASH_Unlock+0x40>)
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80035ea:	79fb      	ldrb	r3, [r7, #7]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40022000 	.word	0x40022000
 80035fc:	45670123 	.word	0x45670123
 8003600:	cdef89ab 	.word	0xcdef89ab

08003604 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <HAL_FLASH_Lock+0x1c>)
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	4a04      	ldr	r2, [pc, #16]	; (8003620 <HAL_FLASH_Lock+0x1c>)
 800360e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003612:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40022000 	.word	0x40022000

08003624 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800362c:	f7ff fd46 	bl	80030bc <HAL_GetTick>
 8003630:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003632:	e010      	b.n	8003656 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363a:	d00c      	beq.n	8003656 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d007      	beq.n	8003652 <FLASH_WaitForLastOperation+0x2e>
 8003642:	f7ff fd3b 	bl	80030bc <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	429a      	cmp	r2, r3
 8003650:	d201      	bcs.n	8003656 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e025      	b.n	80036a2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003656:	4b15      	ldr	r3, [pc, #84]	; (80036ac <FLASH_WaitForLastOperation+0x88>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1e8      	bne.n	8003634 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003662:	4b12      	ldr	r3, [pc, #72]	; (80036ac <FLASH_WaitForLastOperation+0x88>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800366e:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <FLASH_WaitForLastOperation+0x88>)
 8003670:	2220      	movs	r2, #32
 8003672:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003674:	4b0d      	ldr	r3, [pc, #52]	; (80036ac <FLASH_WaitForLastOperation+0x88>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f003 0310 	and.w	r3, r3, #16
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10b      	bne.n	8003698 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003680:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <FLASH_WaitForLastOperation+0x88>)
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003688:	2b00      	cmp	r3, #0
 800368a:	d105      	bne.n	8003698 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800368c:	4b07      	ldr	r3, [pc, #28]	; (80036ac <FLASH_WaitForLastOperation+0x88>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003698:	f000 f80a 	bl	80036b0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e000      	b.n	80036a2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40022000 	.word	0x40022000

080036b0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80036ba:	4b23      	ldr	r3, [pc, #140]	; (8003748 <FLASH_SetErrorCode+0x98>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f003 0310 	and.w	r3, r3, #16
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d009      	beq.n	80036da <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80036c6:	4b21      	ldr	r3, [pc, #132]	; (800374c <FLASH_SetErrorCode+0x9c>)
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	f043 0302 	orr.w	r3, r3, #2
 80036ce:	4a1f      	ldr	r2, [pc, #124]	; (800374c <FLASH_SetErrorCode+0x9c>)
 80036d0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f043 0310 	orr.w	r3, r3, #16
 80036d8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80036da:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <FLASH_SetErrorCode+0x98>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d009      	beq.n	80036fa <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80036e6:	4b19      	ldr	r3, [pc, #100]	; (800374c <FLASH_SetErrorCode+0x9c>)
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	4a17      	ldr	r2, [pc, #92]	; (800374c <FLASH_SetErrorCode+0x9c>)
 80036f0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f043 0304 	orr.w	r3, r3, #4
 80036f8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80036fa:	4b13      	ldr	r3, [pc, #76]	; (8003748 <FLASH_SetErrorCode+0x98>)
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00b      	beq.n	800371e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003706:	4b11      	ldr	r3, [pc, #68]	; (800374c <FLASH_SetErrorCode+0x9c>)
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f043 0304 	orr.w	r3, r3, #4
 800370e:	4a0f      	ldr	r2, [pc, #60]	; (800374c <FLASH_SetErrorCode+0x9c>)
 8003710:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003712:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <FLASH_SetErrorCode+0x98>)
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	4a0c      	ldr	r2, [pc, #48]	; (8003748 <FLASH_SetErrorCode+0x98>)
 8003718:	f023 0301 	bic.w	r3, r3, #1
 800371c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f240 1201 	movw	r2, #257	; 0x101
 8003724:	4293      	cmp	r3, r2
 8003726:	d106      	bne.n	8003736 <FLASH_SetErrorCode+0x86>
 8003728:	4b07      	ldr	r3, [pc, #28]	; (8003748 <FLASH_SetErrorCode+0x98>)
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	4a06      	ldr	r2, [pc, #24]	; (8003748 <FLASH_SetErrorCode+0x98>)
 800372e:	f023 0301 	bic.w	r3, r3, #1
 8003732:	61d3      	str	r3, [r2, #28]
}  
 8003734:	e002      	b.n	800373c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003736:	4a04      	ldr	r2, [pc, #16]	; (8003748 <FLASH_SetErrorCode+0x98>)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	60d3      	str	r3, [r2, #12]
}  
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	bc80      	pop	{r7}
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40022000 	.word	0x40022000
 800374c:	20004300 	.word	0x20004300

08003750 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003762:	4b2f      	ldr	r3, [pc, #188]	; (8003820 <HAL_FLASHEx_Erase+0xd0>)
 8003764:	7e1b      	ldrb	r3, [r3, #24]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_FLASHEx_Erase+0x1e>
 800376a:	2302      	movs	r3, #2
 800376c:	e053      	b.n	8003816 <HAL_FLASHEx_Erase+0xc6>
 800376e:	4b2c      	ldr	r3, [pc, #176]	; (8003820 <HAL_FLASHEx_Erase+0xd0>)
 8003770:	2201      	movs	r2, #1
 8003772:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b02      	cmp	r3, #2
 800377a:	d116      	bne.n	80037aa <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800377c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003780:	f7ff ff50 	bl	8003624 <FLASH_WaitForLastOperation>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d141      	bne.n	800380e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800378a:	2001      	movs	r0, #1
 800378c:	f000 f84c 	bl	8003828 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003790:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003794:	f7ff ff46 	bl	8003624 <FLASH_WaitForLastOperation>
 8003798:	4603      	mov	r3, r0
 800379a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800379c:	4b21      	ldr	r3, [pc, #132]	; (8003824 <HAL_FLASHEx_Erase+0xd4>)
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	4a20      	ldr	r2, [pc, #128]	; (8003824 <HAL_FLASHEx_Erase+0xd4>)
 80037a2:	f023 0304 	bic.w	r3, r3, #4
 80037a6:	6113      	str	r3, [r2, #16]
 80037a8:	e031      	b.n	800380e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80037aa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037ae:	f7ff ff39 	bl	8003624 <FLASH_WaitForLastOperation>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d12a      	bne.n	800380e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	f04f 32ff 	mov.w	r2, #4294967295
 80037be:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	e019      	b.n	80037fc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80037c8:	68b8      	ldr	r0, [r7, #8]
 80037ca:	f000 f849 	bl	8003860 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037ce:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037d2:	f7ff ff27 	bl	8003624 <FLASH_WaitForLastOperation>
 80037d6:	4603      	mov	r3, r0
 80037d8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80037da:	4b12      	ldr	r3, [pc, #72]	; (8003824 <HAL_FLASHEx_Erase+0xd4>)
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	4a11      	ldr	r2, [pc, #68]	; (8003824 <HAL_FLASHEx_Erase+0xd4>)
 80037e0:	f023 0302 	bic.w	r3, r3, #2
 80037e4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	601a      	str	r2, [r3, #0]
            break;
 80037f2:	e00c      	b.n	800380e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037fa:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	02da      	lsls	r2, r3, #11
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	429a      	cmp	r2, r3
 800380c:	d3dc      	bcc.n	80037c8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800380e:	4b04      	ldr	r3, [pc, #16]	; (8003820 <HAL_FLASHEx_Erase+0xd0>)
 8003810:	2200      	movs	r2, #0
 8003812:	761a      	strb	r2, [r3, #24]

  return status;
 8003814:	7bfb      	ldrb	r3, [r7, #15]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20004300 	.word	0x20004300
 8003824:	40022000 	.word	0x40022000

08003828 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003830:	4b09      	ldr	r3, [pc, #36]	; (8003858 <FLASH_MassErase+0x30>)
 8003832:	2200      	movs	r2, #0
 8003834:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003836:	4b09      	ldr	r3, [pc, #36]	; (800385c <FLASH_MassErase+0x34>)
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	4a08      	ldr	r2, [pc, #32]	; (800385c <FLASH_MassErase+0x34>)
 800383c:	f043 0304 	orr.w	r3, r3, #4
 8003840:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <FLASH_MassErase+0x34>)
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	4a05      	ldr	r2, [pc, #20]	; (800385c <FLASH_MassErase+0x34>)
 8003848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800384c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr
 8003858:	20004300 	.word	0x20004300
 800385c:	40022000 	.word	0x40022000

08003860 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003868:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <FLASH_PageErase+0x38>)
 800386a:	2200      	movs	r2, #0
 800386c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800386e:	4b0b      	ldr	r3, [pc, #44]	; (800389c <FLASH_PageErase+0x3c>)
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	4a0a      	ldr	r2, [pc, #40]	; (800389c <FLASH_PageErase+0x3c>)
 8003874:	f043 0302 	orr.w	r3, r3, #2
 8003878:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800387a:	4a08      	ldr	r2, [pc, #32]	; (800389c <FLASH_PageErase+0x3c>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003880:	4b06      	ldr	r3, [pc, #24]	; (800389c <FLASH_PageErase+0x3c>)
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	4a05      	ldr	r2, [pc, #20]	; (800389c <FLASH_PageErase+0x3c>)
 8003886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800388a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	20004300 	.word	0x20004300
 800389c:	40022000 	.word	0x40022000

080038a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b08b      	sub	sp, #44	; 0x2c
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038aa:	2300      	movs	r3, #0
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80038ae:	2300      	movs	r3, #0
 80038b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038b2:	e179      	b.n	8003ba8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80038b4:	2201      	movs	r2, #1
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69fa      	ldr	r2, [r7, #28]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	f040 8168 	bne.w	8003ba2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4aa0      	ldr	r2, [pc, #640]	; (8003b58 <HAL_GPIO_Init+0x2b8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d05e      	beq.n	800399a <HAL_GPIO_Init+0xfa>
 80038dc:	4a9e      	ldr	r2, [pc, #632]	; (8003b58 <HAL_GPIO_Init+0x2b8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d875      	bhi.n	80039ce <HAL_GPIO_Init+0x12e>
 80038e2:	4a9e      	ldr	r2, [pc, #632]	; (8003b5c <HAL_GPIO_Init+0x2bc>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d058      	beq.n	800399a <HAL_GPIO_Init+0xfa>
 80038e8:	4a9c      	ldr	r2, [pc, #624]	; (8003b5c <HAL_GPIO_Init+0x2bc>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d86f      	bhi.n	80039ce <HAL_GPIO_Init+0x12e>
 80038ee:	4a9c      	ldr	r2, [pc, #624]	; (8003b60 <HAL_GPIO_Init+0x2c0>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d052      	beq.n	800399a <HAL_GPIO_Init+0xfa>
 80038f4:	4a9a      	ldr	r2, [pc, #616]	; (8003b60 <HAL_GPIO_Init+0x2c0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d869      	bhi.n	80039ce <HAL_GPIO_Init+0x12e>
 80038fa:	4a9a      	ldr	r2, [pc, #616]	; (8003b64 <HAL_GPIO_Init+0x2c4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d04c      	beq.n	800399a <HAL_GPIO_Init+0xfa>
 8003900:	4a98      	ldr	r2, [pc, #608]	; (8003b64 <HAL_GPIO_Init+0x2c4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d863      	bhi.n	80039ce <HAL_GPIO_Init+0x12e>
 8003906:	4a98      	ldr	r2, [pc, #608]	; (8003b68 <HAL_GPIO_Init+0x2c8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d046      	beq.n	800399a <HAL_GPIO_Init+0xfa>
 800390c:	4a96      	ldr	r2, [pc, #600]	; (8003b68 <HAL_GPIO_Init+0x2c8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d85d      	bhi.n	80039ce <HAL_GPIO_Init+0x12e>
 8003912:	2b12      	cmp	r3, #18
 8003914:	d82a      	bhi.n	800396c <HAL_GPIO_Init+0xcc>
 8003916:	2b12      	cmp	r3, #18
 8003918:	d859      	bhi.n	80039ce <HAL_GPIO_Init+0x12e>
 800391a:	a201      	add	r2, pc, #4	; (adr r2, 8003920 <HAL_GPIO_Init+0x80>)
 800391c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003920:	0800399b 	.word	0x0800399b
 8003924:	08003975 	.word	0x08003975
 8003928:	08003987 	.word	0x08003987
 800392c:	080039c9 	.word	0x080039c9
 8003930:	080039cf 	.word	0x080039cf
 8003934:	080039cf 	.word	0x080039cf
 8003938:	080039cf 	.word	0x080039cf
 800393c:	080039cf 	.word	0x080039cf
 8003940:	080039cf 	.word	0x080039cf
 8003944:	080039cf 	.word	0x080039cf
 8003948:	080039cf 	.word	0x080039cf
 800394c:	080039cf 	.word	0x080039cf
 8003950:	080039cf 	.word	0x080039cf
 8003954:	080039cf 	.word	0x080039cf
 8003958:	080039cf 	.word	0x080039cf
 800395c:	080039cf 	.word	0x080039cf
 8003960:	080039cf 	.word	0x080039cf
 8003964:	0800397d 	.word	0x0800397d
 8003968:	08003991 	.word	0x08003991
 800396c:	4a7f      	ldr	r2, [pc, #508]	; (8003b6c <HAL_GPIO_Init+0x2cc>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d013      	beq.n	800399a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003972:	e02c      	b.n	80039ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	623b      	str	r3, [r7, #32]
          break;
 800397a:	e029      	b.n	80039d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	3304      	adds	r3, #4
 8003982:	623b      	str	r3, [r7, #32]
          break;
 8003984:	e024      	b.n	80039d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	3308      	adds	r3, #8
 800398c:	623b      	str	r3, [r7, #32]
          break;
 800398e:	e01f      	b.n	80039d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	330c      	adds	r3, #12
 8003996:	623b      	str	r3, [r7, #32]
          break;
 8003998:	e01a      	b.n	80039d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d102      	bne.n	80039a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80039a2:	2304      	movs	r3, #4
 80039a4:	623b      	str	r3, [r7, #32]
          break;
 80039a6:	e013      	b.n	80039d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d105      	bne.n	80039bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039b0:	2308      	movs	r3, #8
 80039b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69fa      	ldr	r2, [r7, #28]
 80039b8:	611a      	str	r2, [r3, #16]
          break;
 80039ba:	e009      	b.n	80039d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039bc:	2308      	movs	r3, #8
 80039be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	69fa      	ldr	r2, [r7, #28]
 80039c4:	615a      	str	r2, [r3, #20]
          break;
 80039c6:	e003      	b.n	80039d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80039c8:	2300      	movs	r3, #0
 80039ca:	623b      	str	r3, [r7, #32]
          break;
 80039cc:	e000      	b.n	80039d0 <HAL_GPIO_Init+0x130>
          break;
 80039ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	2bff      	cmp	r3, #255	; 0xff
 80039d4:	d801      	bhi.n	80039da <HAL_GPIO_Init+0x13a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	e001      	b.n	80039de <HAL_GPIO_Init+0x13e>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3304      	adds	r3, #4
 80039de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	2bff      	cmp	r3, #255	; 0xff
 80039e4:	d802      	bhi.n	80039ec <HAL_GPIO_Init+0x14c>
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	e002      	b.n	80039f2 <HAL_GPIO_Init+0x152>
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	3b08      	subs	r3, #8
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	210f      	movs	r1, #15
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003a00:	43db      	mvns	r3, r3
 8003a02:	401a      	ands	r2, r3
 8003a04:	6a39      	ldr	r1, [r7, #32]
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 80c1 	beq.w	8003ba2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a20:	4b53      	ldr	r3, [pc, #332]	; (8003b70 <HAL_GPIO_Init+0x2d0>)
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	4a52      	ldr	r2, [pc, #328]	; (8003b70 <HAL_GPIO_Init+0x2d0>)
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	6193      	str	r3, [r2, #24]
 8003a2c:	4b50      	ldr	r3, [pc, #320]	; (8003b70 <HAL_GPIO_Init+0x2d0>)
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a38:	4a4e      	ldr	r2, [pc, #312]	; (8003b74 <HAL_GPIO_Init+0x2d4>)
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	089b      	lsrs	r3, r3, #2
 8003a3e:	3302      	adds	r3, #2
 8003a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	f003 0303 	and.w	r3, r3, #3
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	220f      	movs	r2, #15
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a46      	ldr	r2, [pc, #280]	; (8003b78 <HAL_GPIO_Init+0x2d8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d01f      	beq.n	8003aa4 <HAL_GPIO_Init+0x204>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a45      	ldr	r2, [pc, #276]	; (8003b7c <HAL_GPIO_Init+0x2dc>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d019      	beq.n	8003aa0 <HAL_GPIO_Init+0x200>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a44      	ldr	r2, [pc, #272]	; (8003b80 <HAL_GPIO_Init+0x2e0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d013      	beq.n	8003a9c <HAL_GPIO_Init+0x1fc>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a43      	ldr	r2, [pc, #268]	; (8003b84 <HAL_GPIO_Init+0x2e4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00d      	beq.n	8003a98 <HAL_GPIO_Init+0x1f8>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a42      	ldr	r2, [pc, #264]	; (8003b88 <HAL_GPIO_Init+0x2e8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d007      	beq.n	8003a94 <HAL_GPIO_Init+0x1f4>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a41      	ldr	r2, [pc, #260]	; (8003b8c <HAL_GPIO_Init+0x2ec>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d101      	bne.n	8003a90 <HAL_GPIO_Init+0x1f0>
 8003a8c:	2305      	movs	r3, #5
 8003a8e:	e00a      	b.n	8003aa6 <HAL_GPIO_Init+0x206>
 8003a90:	2306      	movs	r3, #6
 8003a92:	e008      	b.n	8003aa6 <HAL_GPIO_Init+0x206>
 8003a94:	2304      	movs	r3, #4
 8003a96:	e006      	b.n	8003aa6 <HAL_GPIO_Init+0x206>
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e004      	b.n	8003aa6 <HAL_GPIO_Init+0x206>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e002      	b.n	8003aa6 <HAL_GPIO_Init+0x206>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <HAL_GPIO_Init+0x206>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa8:	f002 0203 	and.w	r2, r2, #3
 8003aac:	0092      	lsls	r2, r2, #2
 8003aae:	4093      	lsls	r3, r2
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ab6:	492f      	ldr	r1, [pc, #188]	; (8003b74 <HAL_GPIO_Init+0x2d4>)
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	089b      	lsrs	r3, r3, #2
 8003abc:	3302      	adds	r3, #2
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d006      	beq.n	8003ade <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ad0:	4b2f      	ldr	r3, [pc, #188]	; (8003b90 <HAL_GPIO_Init+0x2f0>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	492e      	ldr	r1, [pc, #184]	; (8003b90 <HAL_GPIO_Init+0x2f0>)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	600b      	str	r3, [r1, #0]
 8003adc:	e006      	b.n	8003aec <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ade:	4b2c      	ldr	r3, [pc, #176]	; (8003b90 <HAL_GPIO_Init+0x2f0>)
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	492a      	ldr	r1, [pc, #168]	; (8003b90 <HAL_GPIO_Init+0x2f0>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d006      	beq.n	8003b06 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003af8:	4b25      	ldr	r3, [pc, #148]	; (8003b90 <HAL_GPIO_Init+0x2f0>)
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	4924      	ldr	r1, [pc, #144]	; (8003b90 <HAL_GPIO_Init+0x2f0>)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	604b      	str	r3, [r1, #4]
 8003b04:	e006      	b.n	8003b14 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b06:	4b22      	ldr	r3, [pc, #136]	; (8003b90 <HAL_GPIO_Init+0x2f0>)
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	4920      	ldr	r1, [pc, #128]	; (8003b90 <HAL_GPIO_Init+0x2f0>)
 8003b10:	4013      	ands	r3, r2
 8003b12:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d006      	beq.n	8003b2e <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b20:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <HAL_GPIO_Init+0x2f0>)
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	491a      	ldr	r1, [pc, #104]	; (8003b90 <HAL_GPIO_Init+0x2f0>)
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	608b      	str	r3, [r1, #8]
 8003b2c:	e006      	b.n	8003b3c <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b2e:	4b18      	ldr	r3, [pc, #96]	; (8003b90 <HAL_GPIO_Init+0x2f0>)
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	43db      	mvns	r3, r3
 8003b36:	4916      	ldr	r1, [pc, #88]	; (8003b90 <HAL_GPIO_Init+0x2f0>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d025      	beq.n	8003b94 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b48:	4b11      	ldr	r3, [pc, #68]	; (8003b90 <HAL_GPIO_Init+0x2f0>)
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	4910      	ldr	r1, [pc, #64]	; (8003b90 <HAL_GPIO_Init+0x2f0>)
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60cb      	str	r3, [r1, #12]
 8003b54:	e025      	b.n	8003ba2 <HAL_GPIO_Init+0x302>
 8003b56:	bf00      	nop
 8003b58:	10320000 	.word	0x10320000
 8003b5c:	10310000 	.word	0x10310000
 8003b60:	10220000 	.word	0x10220000
 8003b64:	10210000 	.word	0x10210000
 8003b68:	10120000 	.word	0x10120000
 8003b6c:	10110000 	.word	0x10110000
 8003b70:	40021000 	.word	0x40021000
 8003b74:	40010000 	.word	0x40010000
 8003b78:	40010800 	.word	0x40010800
 8003b7c:	40010c00 	.word	0x40010c00
 8003b80:	40011000 	.word	0x40011000
 8003b84:	40011400 	.word	0x40011400
 8003b88:	40011800 	.word	0x40011800
 8003b8c:	40011c00 	.word	0x40011c00
 8003b90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_GPIO_Init+0x324>)
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	4909      	ldr	r1, [pc, #36]	; (8003bc4 <HAL_GPIO_Init+0x324>)
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f47f ae7e 	bne.w	80038b4 <HAL_GPIO_Init+0x14>
  }
}
 8003bb8:	bf00      	nop
 8003bba:	bf00      	nop
 8003bbc:	372c      	adds	r7, #44	; 0x2c
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr
 8003bc4:	40010400 	.word	0x40010400

08003bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	807b      	strh	r3, [r7, #2]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bd8:	787b      	ldrb	r3, [r7, #1]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bde:	887a      	ldrh	r2, [r7, #2]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003be4:	e003      	b.n	8003bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003be6:	887b      	ldrh	r3, [r7, #2]
 8003be8:	041a      	lsls	r2, r3, #16
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	611a      	str	r2, [r3, #16]
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e12b      	b.n	8003e62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff f81c 	bl	8002c5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2224      	movs	r2, #36	; 0x24
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0201 	bic.w	r2, r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c5c:	f000 ffea 	bl	8004c34 <HAL_RCC_GetPCLK1Freq>
 8003c60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	4a81      	ldr	r2, [pc, #516]	; (8003e6c <HAL_I2C_Init+0x274>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d807      	bhi.n	8003c7c <HAL_I2C_Init+0x84>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4a80      	ldr	r2, [pc, #512]	; (8003e70 <HAL_I2C_Init+0x278>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	bf94      	ite	ls
 8003c74:	2301      	movls	r3, #1
 8003c76:	2300      	movhi	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	e006      	b.n	8003c8a <HAL_I2C_Init+0x92>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4a7d      	ldr	r2, [pc, #500]	; (8003e74 <HAL_I2C_Init+0x27c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	bf94      	ite	ls
 8003c84:	2301      	movls	r3, #1
 8003c86:	2300      	movhi	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e0e7      	b.n	8003e62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4a78      	ldr	r2, [pc, #480]	; (8003e78 <HAL_I2C_Init+0x280>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	0c9b      	lsrs	r3, r3, #18
 8003c9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	4a6a      	ldr	r2, [pc, #424]	; (8003e6c <HAL_I2C_Init+0x274>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d802      	bhi.n	8003ccc <HAL_I2C_Init+0xd4>
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	e009      	b.n	8003ce0 <HAL_I2C_Init+0xe8>
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cd2:	fb02 f303 	mul.w	r3, r2, r3
 8003cd6:	4a69      	ldr	r2, [pc, #420]	; (8003e7c <HAL_I2C_Init+0x284>)
 8003cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cdc:	099b      	lsrs	r3, r3, #6
 8003cde:	3301      	adds	r3, #1
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6812      	ldr	r2, [r2, #0]
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cf2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	495c      	ldr	r1, [pc, #368]	; (8003e6c <HAL_I2C_Init+0x274>)
 8003cfc:	428b      	cmp	r3, r1
 8003cfe:	d819      	bhi.n	8003d34 <HAL_I2C_Init+0x13c>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	1e59      	subs	r1, r3, #1
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d0e:	1c59      	adds	r1, r3, #1
 8003d10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d14:	400b      	ands	r3, r1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_I2C_Init+0x138>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1e59      	subs	r1, r3, #1
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d28:	3301      	adds	r3, #1
 8003d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d2e:	e051      	b.n	8003dd4 <HAL_I2C_Init+0x1dc>
 8003d30:	2304      	movs	r3, #4
 8003d32:	e04f      	b.n	8003dd4 <HAL_I2C_Init+0x1dc>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d111      	bne.n	8003d60 <HAL_I2C_Init+0x168>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	1e58      	subs	r0, r3, #1
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6859      	ldr	r1, [r3, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	440b      	add	r3, r1
 8003d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d4e:	3301      	adds	r3, #1
 8003d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	bf0c      	ite	eq
 8003d58:	2301      	moveq	r3, #1
 8003d5a:	2300      	movne	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	e012      	b.n	8003d86 <HAL_I2C_Init+0x18e>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	1e58      	subs	r0, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6859      	ldr	r1, [r3, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	0099      	lsls	r1, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d76:	3301      	adds	r3, #1
 8003d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	bf0c      	ite	eq
 8003d80:	2301      	moveq	r3, #1
 8003d82:	2300      	movne	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_I2C_Init+0x196>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e022      	b.n	8003dd4 <HAL_I2C_Init+0x1dc>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10e      	bne.n	8003db4 <HAL_I2C_Init+0x1bc>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1e58      	subs	r0, r3, #1
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6859      	ldr	r1, [r3, #4]
 8003d9e:	460b      	mov	r3, r1
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	440b      	add	r3, r1
 8003da4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003da8:	3301      	adds	r3, #1
 8003daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003db2:	e00f      	b.n	8003dd4 <HAL_I2C_Init+0x1dc>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	1e58      	subs	r0, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6859      	ldr	r1, [r3, #4]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	0099      	lsls	r1, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dca:	3301      	adds	r3, #1
 8003dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	6809      	ldr	r1, [r1, #0]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69da      	ldr	r2, [r3, #28]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6911      	ldr	r1, [r2, #16]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	68d2      	ldr	r2, [r2, #12]
 8003e0e:	4311      	orrs	r1, r2
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	430b      	orrs	r3, r1
 8003e16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695a      	ldr	r2, [r3, #20]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	000186a0 	.word	0x000186a0
 8003e70:	001e847f 	.word	0x001e847f
 8003e74:	003d08ff 	.word	0x003d08ff
 8003e78:	431bde83 	.word	0x431bde83
 8003e7c:	10624dd3 	.word	0x10624dd3

08003e80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af02      	add	r7, sp, #8
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	607a      	str	r2, [r7, #4]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	817b      	strh	r3, [r7, #10]
 8003e90:	4613      	mov	r3, r2
 8003e92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e94:	f7ff f912 	bl	80030bc <HAL_GetTick>
 8003e98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b20      	cmp	r3, #32
 8003ea4:	f040 80e0 	bne.w	8004068 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	2319      	movs	r3, #25
 8003eae:	2201      	movs	r2, #1
 8003eb0:	4970      	ldr	r1, [pc, #448]	; (8004074 <HAL_I2C_Master_Transmit+0x1f4>)
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 f964 	bl	8004180 <I2C_WaitOnFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e0d3      	b.n	800406a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_I2C_Master_Transmit+0x50>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e0cc      	b.n	800406a <HAL_I2C_Master_Transmit+0x1ea>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d007      	beq.n	8003ef6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0201 	orr.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2221      	movs	r2, #33	; 0x21
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2210      	movs	r2, #16
 8003f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	893a      	ldrh	r2, [r7, #8]
 8003f26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4a50      	ldr	r2, [pc, #320]	; (8004078 <HAL_I2C_Master_Transmit+0x1f8>)
 8003f36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f38:	8979      	ldrh	r1, [r7, #10]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	6a3a      	ldr	r2, [r7, #32]
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 f89c 	bl	800407c <I2C_MasterRequestWrite>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e08d      	b.n	800406a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f4e:	2300      	movs	r3, #0
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f64:	e066      	b.n	8004034 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	6a39      	ldr	r1, [r7, #32]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 f9de 	bl	800432c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00d      	beq.n	8003f92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d107      	bne.n	8003f8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e06b      	b.n	800406a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	781a      	ldrb	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d11b      	bne.n	8004008 <HAL_I2C_Master_Transmit+0x188>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d017      	beq.n	8004008 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	781a      	ldrb	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	6a39      	ldr	r1, [r7, #32]
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 f9ce 	bl	80043ae <I2C_WaitOnBTFFlagUntilTimeout>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00d      	beq.n	8004034 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	2b04      	cmp	r3, #4
 800401e:	d107      	bne.n	8004030 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800402e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e01a      	b.n	800406a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004038:	2b00      	cmp	r3, #0
 800403a:	d194      	bne.n	8003f66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800404a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	e000      	b.n	800406a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004068:	2302      	movs	r3, #2
  }
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	00100002 	.word	0x00100002
 8004078:	ffff0000 	.word	0xffff0000

0800407c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b088      	sub	sp, #32
 8004080:	af02      	add	r7, sp, #8
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	607a      	str	r2, [r7, #4]
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	460b      	mov	r3, r1
 800408a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2b08      	cmp	r3, #8
 8004096:	d006      	beq.n	80040a6 <I2C_MasterRequestWrite+0x2a>
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d003      	beq.n	80040a6 <I2C_MasterRequestWrite+0x2a>
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040a4:	d108      	bne.n	80040b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	e00b      	b.n	80040d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	2b12      	cmp	r3, #18
 80040be:	d107      	bne.n	80040d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 f84f 	bl	8004180 <I2C_WaitOnFlagUntilTimeout>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00d      	beq.n	8004104 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f6:	d103      	bne.n	8004100 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e035      	b.n	8004170 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800410c:	d108      	bne.n	8004120 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800410e:	897b      	ldrh	r3, [r7, #10]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	461a      	mov	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800411c:	611a      	str	r2, [r3, #16]
 800411e:	e01b      	b.n	8004158 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004120:	897b      	ldrh	r3, [r7, #10]
 8004122:	11db      	asrs	r3, r3, #7
 8004124:	b2db      	uxtb	r3, r3
 8004126:	f003 0306 	and.w	r3, r3, #6
 800412a:	b2db      	uxtb	r3, r3
 800412c:	f063 030f 	orn	r3, r3, #15
 8004130:	b2da      	uxtb	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	490e      	ldr	r1, [pc, #56]	; (8004178 <I2C_MasterRequestWrite+0xfc>)
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 f875 	bl	800422e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e010      	b.n	8004170 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800414e:	897b      	ldrh	r3, [r7, #10]
 8004150:	b2da      	uxtb	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	4907      	ldr	r1, [pc, #28]	; (800417c <I2C_MasterRequestWrite+0x100>)
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 f865 	bl	800422e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	00010008 	.word	0x00010008
 800417c:	00010002 	.word	0x00010002

08004180 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	603b      	str	r3, [r7, #0]
 800418c:	4613      	mov	r3, r2
 800418e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004190:	e025      	b.n	80041de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004198:	d021      	beq.n	80041de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419a:	f7fe ff8f 	bl	80030bc <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d302      	bcc.n	80041b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d116      	bne.n	80041de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	f043 0220 	orr.w	r2, r3, #32
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e023      	b.n	8004226 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	0c1b      	lsrs	r3, r3, #16
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d10d      	bne.n	8004204 <I2C_WaitOnFlagUntilTimeout+0x84>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	43da      	mvns	r2, r3
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4013      	ands	r3, r2
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	bf0c      	ite	eq
 80041fa:	2301      	moveq	r3, #1
 80041fc:	2300      	movne	r3, #0
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	461a      	mov	r2, r3
 8004202:	e00c      	b.n	800421e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	43da      	mvns	r2, r3
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4013      	ands	r3, r2
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	bf0c      	ite	eq
 8004216:	2301      	moveq	r3, #1
 8004218:	2300      	movne	r3, #0
 800421a:	b2db      	uxtb	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	429a      	cmp	r2, r3
 8004222:	d0b6      	beq.n	8004192 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b084      	sub	sp, #16
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	607a      	str	r2, [r7, #4]
 800423a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800423c:	e051      	b.n	80042e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800424c:	d123      	bne.n	8004296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800425c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004266:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2220      	movs	r2, #32
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	f043 0204 	orr.w	r2, r3, #4
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e046      	b.n	8004324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d021      	beq.n	80042e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800429e:	f7fe ff0d 	bl	80030bc <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d302      	bcc.n	80042b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d116      	bne.n	80042e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	f043 0220 	orr.w	r2, r3, #32
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e020      	b.n	8004324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	0c1b      	lsrs	r3, r3, #16
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d10c      	bne.n	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	43da      	mvns	r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	4013      	ands	r3, r2
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	bf14      	ite	ne
 80042fe:	2301      	movne	r3, #1
 8004300:	2300      	moveq	r3, #0
 8004302:	b2db      	uxtb	r3, r3
 8004304:	e00b      	b.n	800431e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	43da      	mvns	r2, r3
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	4013      	ands	r3, r2
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	bf14      	ite	ne
 8004318:	2301      	movne	r3, #1
 800431a:	2300      	moveq	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d18d      	bne.n	800423e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004338:	e02d      	b.n	8004396 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 f878 	bl	8004430 <I2C_IsAcknowledgeFailed>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e02d      	b.n	80043a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004350:	d021      	beq.n	8004396 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004352:	f7fe feb3 	bl	80030bc <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	429a      	cmp	r2, r3
 8004360:	d302      	bcc.n	8004368 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d116      	bne.n	8004396 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f043 0220 	orr.w	r2, r3, #32
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e007      	b.n	80043a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a0:	2b80      	cmp	r3, #128	; 0x80
 80043a2:	d1ca      	bne.n	800433a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b084      	sub	sp, #16
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043ba:	e02d      	b.n	8004418 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 f837 	bl	8004430 <I2C_IsAcknowledgeFailed>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e02d      	b.n	8004428 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d2:	d021      	beq.n	8004418 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d4:	f7fe fe72 	bl	80030bc <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d302      	bcc.n	80043ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d116      	bne.n	8004418 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	f043 0220 	orr.w	r2, r3, #32
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e007      	b.n	8004428 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b04      	cmp	r3, #4
 8004424:	d1ca      	bne.n	80043bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004446:	d11b      	bne.n	8004480 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004450:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446c:	f043 0204 	orr.w	r2, r3, #4
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr

0800448c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e26c      	b.n	8004978 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 8087 	beq.w	80045ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044ac:	4b92      	ldr	r3, [pc, #584]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 030c 	and.w	r3, r3, #12
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d00c      	beq.n	80044d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044b8:	4b8f      	ldr	r3, [pc, #572]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f003 030c 	and.w	r3, r3, #12
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d112      	bne.n	80044ea <HAL_RCC_OscConfig+0x5e>
 80044c4:	4b8c      	ldr	r3, [pc, #560]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d0:	d10b      	bne.n	80044ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d2:	4b89      	ldr	r3, [pc, #548]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d06c      	beq.n	80045b8 <HAL_RCC_OscConfig+0x12c>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d168      	bne.n	80045b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e246      	b.n	8004978 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f2:	d106      	bne.n	8004502 <HAL_RCC_OscConfig+0x76>
 80044f4:	4b80      	ldr	r3, [pc, #512]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a7f      	ldr	r2, [pc, #508]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 80044fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	e02e      	b.n	8004560 <HAL_RCC_OscConfig+0xd4>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10c      	bne.n	8004524 <HAL_RCC_OscConfig+0x98>
 800450a:	4b7b      	ldr	r3, [pc, #492]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a7a      	ldr	r2, [pc, #488]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 8004510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	4b78      	ldr	r3, [pc, #480]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a77      	ldr	r2, [pc, #476]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 800451c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	e01d      	b.n	8004560 <HAL_RCC_OscConfig+0xd4>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800452c:	d10c      	bne.n	8004548 <HAL_RCC_OscConfig+0xbc>
 800452e:	4b72      	ldr	r3, [pc, #456]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a71      	ldr	r2, [pc, #452]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 8004534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	4b6f      	ldr	r3, [pc, #444]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a6e      	ldr	r2, [pc, #440]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 8004540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	e00b      	b.n	8004560 <HAL_RCC_OscConfig+0xd4>
 8004548:	4b6b      	ldr	r3, [pc, #428]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a6a      	ldr	r2, [pc, #424]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 800454e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	4b68      	ldr	r3, [pc, #416]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a67      	ldr	r2, [pc, #412]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 800455a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800455e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d013      	beq.n	8004590 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004568:	f7fe fda8 	bl	80030bc <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004570:	f7fe fda4 	bl	80030bc <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b64      	cmp	r3, #100	; 0x64
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e1fa      	b.n	8004978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004582:	4b5d      	ldr	r3, [pc, #372]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0xe4>
 800458e:	e014      	b.n	80045ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004590:	f7fe fd94 	bl	80030bc <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004598:	f7fe fd90 	bl	80030bc <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b64      	cmp	r3, #100	; 0x64
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e1e6      	b.n	8004978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045aa:	4b53      	ldr	r3, [pc, #332]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f0      	bne.n	8004598 <HAL_RCC_OscConfig+0x10c>
 80045b6:	e000      	b.n	80045ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d063      	beq.n	800468e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045c6:	4b4c      	ldr	r3, [pc, #304]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f003 030c 	and.w	r3, r3, #12
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00b      	beq.n	80045ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045d2:	4b49      	ldr	r3, [pc, #292]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f003 030c 	and.w	r3, r3, #12
 80045da:	2b08      	cmp	r3, #8
 80045dc:	d11c      	bne.n	8004618 <HAL_RCC_OscConfig+0x18c>
 80045de:	4b46      	ldr	r3, [pc, #280]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d116      	bne.n	8004618 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ea:	4b43      	ldr	r3, [pc, #268]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <HAL_RCC_OscConfig+0x176>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d001      	beq.n	8004602 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e1ba      	b.n	8004978 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004602:	4b3d      	ldr	r3, [pc, #244]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	4939      	ldr	r1, [pc, #228]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 8004612:	4313      	orrs	r3, r2
 8004614:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004616:	e03a      	b.n	800468e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d020      	beq.n	8004662 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004620:	4b36      	ldr	r3, [pc, #216]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 8004622:	2201      	movs	r2, #1
 8004624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004626:	f7fe fd49 	bl	80030bc <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462c:	e008      	b.n	8004640 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800462e:	f7fe fd45 	bl	80030bc <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e19b      	b.n	8004978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004640:	4b2d      	ldr	r3, [pc, #180]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0f0      	beq.n	800462e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800464c:	4b2a      	ldr	r3, [pc, #168]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	4927      	ldr	r1, [pc, #156]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 800465c:	4313      	orrs	r3, r2
 800465e:	600b      	str	r3, [r1, #0]
 8004660:	e015      	b.n	800468e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004662:	4b26      	ldr	r3, [pc, #152]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004668:	f7fe fd28 	bl	80030bc <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004670:	f7fe fd24 	bl	80030bc <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e17a      	b.n	8004978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004682:	4b1d      	ldr	r3, [pc, #116]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1f0      	bne.n	8004670 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d03a      	beq.n	8004710 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d019      	beq.n	80046d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046a2:	4b17      	ldr	r3, [pc, #92]	; (8004700 <HAL_RCC_OscConfig+0x274>)
 80046a4:	2201      	movs	r2, #1
 80046a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a8:	f7fe fd08 	bl	80030bc <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046b0:	f7fe fd04 	bl	80030bc <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e15a      	b.n	8004978 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046c2:	4b0d      	ldr	r3, [pc, #52]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0f0      	beq.n	80046b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046ce:	2001      	movs	r0, #1
 80046d0:	f000 fad8 	bl	8004c84 <RCC_Delay>
 80046d4:	e01c      	b.n	8004710 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046d6:	4b0a      	ldr	r3, [pc, #40]	; (8004700 <HAL_RCC_OscConfig+0x274>)
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046dc:	f7fe fcee 	bl	80030bc <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e2:	e00f      	b.n	8004704 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e4:	f7fe fcea 	bl	80030bc <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d908      	bls.n	8004704 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e140      	b.n	8004978 <HAL_RCC_OscConfig+0x4ec>
 80046f6:	bf00      	nop
 80046f8:	40021000 	.word	0x40021000
 80046fc:	42420000 	.word	0x42420000
 8004700:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004704:	4b9e      	ldr	r3, [pc, #632]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e9      	bne.n	80046e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 80a6 	beq.w	800486a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800471e:	2300      	movs	r3, #0
 8004720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004722:	4b97      	ldr	r3, [pc, #604]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10d      	bne.n	800474a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800472e:	4b94      	ldr	r3, [pc, #592]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	4a93      	ldr	r2, [pc, #588]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 8004734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004738:	61d3      	str	r3, [r2, #28]
 800473a:	4b91      	ldr	r3, [pc, #580]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004742:	60bb      	str	r3, [r7, #8]
 8004744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004746:	2301      	movs	r3, #1
 8004748:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474a:	4b8e      	ldr	r3, [pc, #568]	; (8004984 <HAL_RCC_OscConfig+0x4f8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004752:	2b00      	cmp	r3, #0
 8004754:	d118      	bne.n	8004788 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004756:	4b8b      	ldr	r3, [pc, #556]	; (8004984 <HAL_RCC_OscConfig+0x4f8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a8a      	ldr	r2, [pc, #552]	; (8004984 <HAL_RCC_OscConfig+0x4f8>)
 800475c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004762:	f7fe fcab 	bl	80030bc <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800476a:	f7fe fca7 	bl	80030bc <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b64      	cmp	r3, #100	; 0x64
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e0fd      	b.n	8004978 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477c:	4b81      	ldr	r3, [pc, #516]	; (8004984 <HAL_RCC_OscConfig+0x4f8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f0      	beq.n	800476a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d106      	bne.n	800479e <HAL_RCC_OscConfig+0x312>
 8004790:	4b7b      	ldr	r3, [pc, #492]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	4a7a      	ldr	r2, [pc, #488]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 8004796:	f043 0301 	orr.w	r3, r3, #1
 800479a:	6213      	str	r3, [r2, #32]
 800479c:	e02d      	b.n	80047fa <HAL_RCC_OscConfig+0x36e>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10c      	bne.n	80047c0 <HAL_RCC_OscConfig+0x334>
 80047a6:	4b76      	ldr	r3, [pc, #472]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	4a75      	ldr	r2, [pc, #468]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 80047ac:	f023 0301 	bic.w	r3, r3, #1
 80047b0:	6213      	str	r3, [r2, #32]
 80047b2:	4b73      	ldr	r3, [pc, #460]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	4a72      	ldr	r2, [pc, #456]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 80047b8:	f023 0304 	bic.w	r3, r3, #4
 80047bc:	6213      	str	r3, [r2, #32]
 80047be:	e01c      	b.n	80047fa <HAL_RCC_OscConfig+0x36e>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	2b05      	cmp	r3, #5
 80047c6:	d10c      	bne.n	80047e2 <HAL_RCC_OscConfig+0x356>
 80047c8:	4b6d      	ldr	r3, [pc, #436]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	4a6c      	ldr	r2, [pc, #432]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 80047ce:	f043 0304 	orr.w	r3, r3, #4
 80047d2:	6213      	str	r3, [r2, #32]
 80047d4:	4b6a      	ldr	r3, [pc, #424]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	4a69      	ldr	r2, [pc, #420]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 80047da:	f043 0301 	orr.w	r3, r3, #1
 80047de:	6213      	str	r3, [r2, #32]
 80047e0:	e00b      	b.n	80047fa <HAL_RCC_OscConfig+0x36e>
 80047e2:	4b67      	ldr	r3, [pc, #412]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	4a66      	ldr	r2, [pc, #408]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 80047e8:	f023 0301 	bic.w	r3, r3, #1
 80047ec:	6213      	str	r3, [r2, #32]
 80047ee:	4b64      	ldr	r3, [pc, #400]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	4a63      	ldr	r2, [pc, #396]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 80047f4:	f023 0304 	bic.w	r3, r3, #4
 80047f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d015      	beq.n	800482e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004802:	f7fe fc5b 	bl	80030bc <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004808:	e00a      	b.n	8004820 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480a:	f7fe fc57 	bl	80030bc <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	f241 3288 	movw	r2, #5000	; 0x1388
 8004818:	4293      	cmp	r3, r2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e0ab      	b.n	8004978 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004820:	4b57      	ldr	r3, [pc, #348]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0ee      	beq.n	800480a <HAL_RCC_OscConfig+0x37e>
 800482c:	e014      	b.n	8004858 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800482e:	f7fe fc45 	bl	80030bc <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004834:	e00a      	b.n	800484c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004836:	f7fe fc41 	bl	80030bc <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	f241 3288 	movw	r2, #5000	; 0x1388
 8004844:	4293      	cmp	r3, r2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e095      	b.n	8004978 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800484c:	4b4c      	ldr	r3, [pc, #304]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1ee      	bne.n	8004836 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004858:	7dfb      	ldrb	r3, [r7, #23]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d105      	bne.n	800486a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800485e:	4b48      	ldr	r3, [pc, #288]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	4a47      	ldr	r2, [pc, #284]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 8004864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004868:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 8081 	beq.w	8004976 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004874:	4b42      	ldr	r3, [pc, #264]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f003 030c 	and.w	r3, r3, #12
 800487c:	2b08      	cmp	r3, #8
 800487e:	d061      	beq.n	8004944 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d146      	bne.n	8004916 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004888:	4b3f      	ldr	r3, [pc, #252]	; (8004988 <HAL_RCC_OscConfig+0x4fc>)
 800488a:	2200      	movs	r2, #0
 800488c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488e:	f7fe fc15 	bl	80030bc <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004896:	f7fe fc11 	bl	80030bc <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e067      	b.n	8004978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048a8:	4b35      	ldr	r3, [pc, #212]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1f0      	bne.n	8004896 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048bc:	d108      	bne.n	80048d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048be:	4b30      	ldr	r3, [pc, #192]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	492d      	ldr	r1, [pc, #180]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048d0:	4b2b      	ldr	r3, [pc, #172]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a19      	ldr	r1, [r3, #32]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	430b      	orrs	r3, r1
 80048e2:	4927      	ldr	r1, [pc, #156]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048e8:	4b27      	ldr	r3, [pc, #156]	; (8004988 <HAL_RCC_OscConfig+0x4fc>)
 80048ea:	2201      	movs	r2, #1
 80048ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ee:	f7fe fbe5 	bl	80030bc <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f6:	f7fe fbe1 	bl	80030bc <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e037      	b.n	8004978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004908:	4b1d      	ldr	r3, [pc, #116]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f0      	beq.n	80048f6 <HAL_RCC_OscConfig+0x46a>
 8004914:	e02f      	b.n	8004976 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004916:	4b1c      	ldr	r3, [pc, #112]	; (8004988 <HAL_RCC_OscConfig+0x4fc>)
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491c:	f7fe fbce 	bl	80030bc <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004924:	f7fe fbca 	bl	80030bc <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e020      	b.n	8004978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004936:	4b12      	ldr	r3, [pc, #72]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f0      	bne.n	8004924 <HAL_RCC_OscConfig+0x498>
 8004942:	e018      	b.n	8004976 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e013      	b.n	8004978 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004950:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <HAL_RCC_OscConfig+0x4f4>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	429a      	cmp	r2, r3
 8004962:	d106      	bne.n	8004972 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800496e:	429a      	cmp	r2, r3
 8004970:	d001      	beq.n	8004976 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40021000 	.word	0x40021000
 8004984:	40007000 	.word	0x40007000
 8004988:	42420060 	.word	0x42420060

0800498c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e0d0      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049a0:	4b6a      	ldr	r3, [pc, #424]	; (8004b4c <HAL_RCC_ClockConfig+0x1c0>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d910      	bls.n	80049d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ae:	4b67      	ldr	r3, [pc, #412]	; (8004b4c <HAL_RCC_ClockConfig+0x1c0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f023 0207 	bic.w	r2, r3, #7
 80049b6:	4965      	ldr	r1, [pc, #404]	; (8004b4c <HAL_RCC_ClockConfig+0x1c0>)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049be:	4b63      	ldr	r3, [pc, #396]	; (8004b4c <HAL_RCC_ClockConfig+0x1c0>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d001      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e0b8      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d020      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049e8:	4b59      	ldr	r3, [pc, #356]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	4a58      	ldr	r2, [pc, #352]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 80049ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0308 	and.w	r3, r3, #8
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d005      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a00:	4b53      	ldr	r3, [pc, #332]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	4a52      	ldr	r2, [pc, #328]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a06:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004a0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a0c:	4b50      	ldr	r3, [pc, #320]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	494d      	ldr	r1, [pc, #308]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d040      	beq.n	8004aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d107      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a32:	4b47      	ldr	r3, [pc, #284]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d115      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e07f      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d107      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a4a:	4b41      	ldr	r3, [pc, #260]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d109      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e073      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5a:	4b3d      	ldr	r3, [pc, #244]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e06b      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a6a:	4b39      	ldr	r3, [pc, #228]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f023 0203 	bic.w	r2, r3, #3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	4936      	ldr	r1, [pc, #216]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a7c:	f7fe fb1e 	bl	80030bc <HAL_GetTick>
 8004a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a82:	e00a      	b.n	8004a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a84:	f7fe fb1a 	bl	80030bc <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e053      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9a:	4b2d      	ldr	r3, [pc, #180]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f003 020c 	and.w	r2, r3, #12
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d1eb      	bne.n	8004a84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004aac:	4b27      	ldr	r3, [pc, #156]	; (8004b4c <HAL_RCC_ClockConfig+0x1c0>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d210      	bcs.n	8004adc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aba:	4b24      	ldr	r3, [pc, #144]	; (8004b4c <HAL_RCC_ClockConfig+0x1c0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f023 0207 	bic.w	r2, r3, #7
 8004ac2:	4922      	ldr	r1, [pc, #136]	; (8004b4c <HAL_RCC_ClockConfig+0x1c0>)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aca:	4b20      	ldr	r3, [pc, #128]	; (8004b4c <HAL_RCC_ClockConfig+0x1c0>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d001      	beq.n	8004adc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e032      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d008      	beq.n	8004afa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ae8:	4b19      	ldr	r3, [pc, #100]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	4916      	ldr	r1, [pc, #88]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d009      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b06:	4b12      	ldr	r3, [pc, #72]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	490e      	ldr	r1, [pc, #56]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b1a:	f000 f821 	bl	8004b60 <HAL_RCC_GetSysClockFreq>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	091b      	lsrs	r3, r3, #4
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	490a      	ldr	r1, [pc, #40]	; (8004b54 <HAL_RCC_ClockConfig+0x1c8>)
 8004b2c:	5ccb      	ldrb	r3, [r1, r3]
 8004b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b32:	4a09      	ldr	r2, [pc, #36]	; (8004b58 <HAL_RCC_ClockConfig+0x1cc>)
 8004b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b36:	4b09      	ldr	r3, [pc, #36]	; (8004b5c <HAL_RCC_ClockConfig+0x1d0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fe fa7c 	bl	8003038 <HAL_InitTick>

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40022000 	.word	0x40022000
 8004b50:	40021000 	.word	0x40021000
 8004b54:	080070d0 	.word	0x080070d0
 8004b58:	200000f4 	.word	0x200000f4
 8004b5c:	200000f8 	.word	0x200000f8

08004b60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b60:	b490      	push	{r4, r7}
 8004b62:	b08a      	sub	sp, #40	; 0x28
 8004b64:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b66:	4b2a      	ldr	r3, [pc, #168]	; (8004c10 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b68:	1d3c      	adds	r4, r7, #4
 8004b6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b70:	f240 2301 	movw	r3, #513	; 0x201
 8004b74:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	61fb      	str	r3, [r7, #28]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61bb      	str	r3, [r7, #24]
 8004b7e:	2300      	movs	r3, #0
 8004b80:	627b      	str	r3, [r7, #36]	; 0x24
 8004b82:	2300      	movs	r3, #0
 8004b84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b8a:	4b22      	ldr	r3, [pc, #136]	; (8004c14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	f003 030c 	and.w	r3, r3, #12
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d002      	beq.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x40>
 8004b9a:	2b08      	cmp	r3, #8
 8004b9c:	d003      	beq.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x46>
 8004b9e:	e02d      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ba0:	4b1d      	ldr	r3, [pc, #116]	; (8004c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ba2:	623b      	str	r3, [r7, #32]
      break;
 8004ba4:	e02d      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	0c9b      	lsrs	r3, r3, #18
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004bb8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d013      	beq.n	8004bec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bc4:	4b13      	ldr	r3, [pc, #76]	; (8004c14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	0c5b      	lsrs	r3, r3, #17
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004bd8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	4a0e      	ldr	r2, [pc, #56]	; (8004c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bde:	fb02 f203 	mul.w	r2, r2, r3
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bea:	e004      	b.n	8004bf6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	4a0b      	ldr	r2, [pc, #44]	; (8004c1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bf0:	fb02 f303 	mul.w	r3, r2, r3
 8004bf4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	623b      	str	r3, [r7, #32]
      break;
 8004bfa:	e002      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bfc:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bfe:	623b      	str	r3, [r7, #32]
      break;
 8004c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c02:	6a3b      	ldr	r3, [r7, #32]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3728      	adds	r7, #40	; 0x28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bc90      	pop	{r4, r7}
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	08007074 	.word	0x08007074
 8004c14:	40021000 	.word	0x40021000
 8004c18:	007a1200 	.word	0x007a1200
 8004c1c:	003d0900 	.word	0x003d0900

08004c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c24:	4b02      	ldr	r3, [pc, #8]	; (8004c30 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c26:	681b      	ldr	r3, [r3, #0]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bc80      	pop	{r7}
 8004c2e:	4770      	bx	lr
 8004c30:	200000f4 	.word	0x200000f4

08004c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c38:	f7ff fff2 	bl	8004c20 <HAL_RCC_GetHCLKFreq>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	0a1b      	lsrs	r3, r3, #8
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	4903      	ldr	r1, [pc, #12]	; (8004c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c4a:	5ccb      	ldrb	r3, [r1, r3]
 8004c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40021000 	.word	0x40021000
 8004c58:	080070e0 	.word	0x080070e0

08004c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c60:	f7ff ffde 	bl	8004c20 <HAL_RCC_GetHCLKFreq>
 8004c64:	4602      	mov	r2, r0
 8004c66:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	0adb      	lsrs	r3, r3, #11
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	4903      	ldr	r1, [pc, #12]	; (8004c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c72:	5ccb      	ldrb	r3, [r1, r3]
 8004c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	080070e0 	.word	0x080070e0

08004c84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c8c:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <RCC_Delay+0x34>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a0a      	ldr	r2, [pc, #40]	; (8004cbc <RCC_Delay+0x38>)
 8004c92:	fba2 2303 	umull	r2, r3, r2, r3
 8004c96:	0a5b      	lsrs	r3, r3, #9
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	fb02 f303 	mul.w	r3, r2, r3
 8004c9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ca0:	bf00      	nop
  }
  while (Delay --);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	1e5a      	subs	r2, r3, #1
 8004ca6:	60fa      	str	r2, [r7, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1f9      	bne.n	8004ca0 <RCC_Delay+0x1c>
}
 8004cac:	bf00      	nop
 8004cae:	bf00      	nop
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bc80      	pop	{r7}
 8004cb6:	4770      	bx	lr
 8004cb8:	200000f4 	.word	0x200000f4
 8004cbc:	10624dd3 	.word	0x10624dd3

08004cc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e076      	b.n	8004dc0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d108      	bne.n	8004cec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ce2:	d009      	beq.n	8004cf8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	61da      	str	r2, [r3, #28]
 8004cea:	e005      	b.n	8004cf8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d106      	bne.n	8004d18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7fd ffe0 	bl	8002cd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	431a      	orrs	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7c:	ea42 0103 	orr.w	r1, r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d84:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	0c1a      	lsrs	r2, r3, #16
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f002 0204 	and.w	r2, r2, #4
 8004d9e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	69da      	ldr	r2, [r3, #28]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	603b      	str	r3, [r7, #0]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_SPI_Transmit+0x22>
 8004de6:	2302      	movs	r3, #2
 8004de8:	e126      	b.n	8005038 <HAL_SPI_Transmit+0x270>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004df2:	f7fe f963 	bl	80030bc <HAL_GetTick>
 8004df6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004df8:	88fb      	ldrh	r3, [r7, #6]
 8004dfa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d002      	beq.n	8004e0e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e08:	2302      	movs	r3, #2
 8004e0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e0c:	e10b      	b.n	8005026 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d002      	beq.n	8004e1a <HAL_SPI_Transmit+0x52>
 8004e14:	88fb      	ldrh	r3, [r7, #6]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d102      	bne.n	8004e20 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e1e:	e102      	b.n	8005026 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2203      	movs	r2, #3
 8004e24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	88fa      	ldrh	r2, [r7, #6]
 8004e38:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	88fa      	ldrh	r2, [r7, #6]
 8004e3e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e66:	d10f      	bne.n	8004e88 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e86:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e92:	2b40      	cmp	r3, #64	; 0x40
 8004e94:	d007      	beq.n	8004ea6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ea4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eae:	d14b      	bne.n	8004f48 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <HAL_SPI_Transmit+0xf6>
 8004eb8:	8afb      	ldrh	r3, [r7, #22]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d13e      	bne.n	8004f3c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	881a      	ldrh	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	1c9a      	adds	r2, r3, #2
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	3b01      	subs	r3, #1
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ee2:	e02b      	b.n	8004f3c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d112      	bne.n	8004f18 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef6:	881a      	ldrh	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f02:	1c9a      	adds	r2, r3, #2
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f16:	e011      	b.n	8004f3c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f18:	f7fe f8d0 	bl	80030bc <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d803      	bhi.n	8004f30 <HAL_SPI_Transmit+0x168>
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2e:	d102      	bne.n	8004f36 <HAL_SPI_Transmit+0x16e>
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d102      	bne.n	8004f3c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f3a:	e074      	b.n	8005026 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1ce      	bne.n	8004ee4 <HAL_SPI_Transmit+0x11c>
 8004f46:	e04c      	b.n	8004fe2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d002      	beq.n	8004f56 <HAL_SPI_Transmit+0x18e>
 8004f50:	8afb      	ldrh	r3, [r7, #22]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d140      	bne.n	8004fd8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	330c      	adds	r3, #12
 8004f60:	7812      	ldrb	r2, [r2, #0]
 8004f62:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f7c:	e02c      	b.n	8004fd8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d113      	bne.n	8004fb4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	330c      	adds	r3, #12
 8004f96:	7812      	ldrb	r2, [r2, #0]
 8004f98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	86da      	strh	r2, [r3, #54]	; 0x36
 8004fb2:	e011      	b.n	8004fd8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fb4:	f7fe f882 	bl	80030bc <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d803      	bhi.n	8004fcc <HAL_SPI_Transmit+0x204>
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fca:	d102      	bne.n	8004fd2 <HAL_SPI_Transmit+0x20a>
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d102      	bne.n	8004fd8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004fd6:	e026      	b.n	8005026 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1cd      	bne.n	8004f7e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	6839      	ldr	r1, [r7, #0]
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 f8b2 	bl	8005150 <SPI_EndRxTxTransaction>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d002      	beq.n	8004ff8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10a      	bne.n	8005016 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005000:	2300      	movs	r3, #0
 8005002:	613b      	str	r3, [r7, #16]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	613b      	str	r3, [r7, #16]
 8005014:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	77fb      	strb	r3, [r7, #31]
 8005022:	e000      	b.n	8005026 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005024:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005036:	7ffb      	ldrb	r3, [r7, #31]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3720      	adds	r7, #32
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	603b      	str	r3, [r7, #0]
 800504c:	4613      	mov	r3, r2
 800504e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005050:	f7fe f834 	bl	80030bc <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005058:	1a9b      	subs	r3, r3, r2
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	4413      	add	r3, r2
 800505e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005060:	f7fe f82c 	bl	80030bc <HAL_GetTick>
 8005064:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005066:	4b39      	ldr	r3, [pc, #228]	; (800514c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	015b      	lsls	r3, r3, #5
 800506c:	0d1b      	lsrs	r3, r3, #20
 800506e:	69fa      	ldr	r2, [r7, #28]
 8005070:	fb02 f303 	mul.w	r3, r2, r3
 8005074:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005076:	e054      	b.n	8005122 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507e:	d050      	beq.n	8005122 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005080:	f7fe f81c 	bl	80030bc <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	69fa      	ldr	r2, [r7, #28]
 800508c:	429a      	cmp	r2, r3
 800508e:	d902      	bls.n	8005096 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d13d      	bne.n	8005112 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050ae:	d111      	bne.n	80050d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050b8:	d004      	beq.n	80050c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c2:	d107      	bne.n	80050d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050dc:	d10f      	bne.n	80050fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e017      	b.n	8005142 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	3b01      	subs	r3, #1
 8005120:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	4013      	ands	r3, r2
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	429a      	cmp	r2, r3
 8005130:	bf0c      	ite	eq
 8005132:	2301      	moveq	r3, #1
 8005134:	2300      	movne	r3, #0
 8005136:	b2db      	uxtb	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	429a      	cmp	r2, r3
 800513e:	d19b      	bne.n	8005078 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3720      	adds	r7, #32
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	200000f4 	.word	0x200000f4

08005150 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af02      	add	r7, sp, #8
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2200      	movs	r2, #0
 8005164:	2180      	movs	r1, #128	; 0x80
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f7ff ff6a 	bl	8005040 <SPI_WaitFlagStateUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d007      	beq.n	8005182 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005176:	f043 0220 	orr.w	r2, r3, #32
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e000      	b.n	8005184 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e041      	b.n	8005222 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d106      	bne.n	80051b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7fd fdd0 	bl	8002d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3304      	adds	r3, #4
 80051c8:	4619      	mov	r1, r3
 80051ca:	4610      	mov	r0, r2
 80051cc:	f000 f9ba 	bl	8005544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b01      	cmp	r3, #1
 800523e:	d001      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e044      	b.n	80052ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0201 	orr.w	r2, r2, #1
 800525a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1d      	ldr	r2, [pc, #116]	; (80052d8 <HAL_TIM_Base_Start_IT+0xac>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d018      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x6c>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a1c      	ldr	r2, [pc, #112]	; (80052dc <HAL_TIM_Base_Start_IT+0xb0>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d013      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x6c>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005278:	d00e      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x6c>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a18      	ldr	r2, [pc, #96]	; (80052e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d009      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x6c>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a16      	ldr	r2, [pc, #88]	; (80052e4 <HAL_TIM_Base_Start_IT+0xb8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d004      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x6c>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a15      	ldr	r2, [pc, #84]	; (80052e8 <HAL_TIM_Base_Start_IT+0xbc>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d111      	bne.n	80052bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b06      	cmp	r3, #6
 80052a8:	d010      	beq.n	80052cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f042 0201 	orr.w	r2, r2, #1
 80052b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ba:	e007      	b.n	80052cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bc80      	pop	{r7}
 80052d6:	4770      	bx	lr
 80052d8:	40012c00 	.word	0x40012c00
 80052dc:	40013400 	.word	0x40013400
 80052e0:	40000400 	.word	0x40000400
 80052e4:	40000800 	.word	0x40000800
 80052e8:	40000c00 	.word	0x40000c00

080052ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d122      	bne.n	8005348 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b02      	cmp	r3, #2
 800530e:	d11b      	bne.n	8005348 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f06f 0202 	mvn.w	r2, #2
 8005318:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f8ed 	bl	800550e <HAL_TIM_IC_CaptureCallback>
 8005334:	e005      	b.n	8005342 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f8e0 	bl	80054fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f8ef 	bl	8005520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	f003 0304 	and.w	r3, r3, #4
 8005352:	2b04      	cmp	r3, #4
 8005354:	d122      	bne.n	800539c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b04      	cmp	r3, #4
 8005362:	d11b      	bne.n	800539c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f06f 0204 	mvn.w	r2, #4
 800536c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2202      	movs	r2, #2
 8005372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f8c3 	bl	800550e <HAL_TIM_IC_CaptureCallback>
 8005388:	e005      	b.n	8005396 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f8b6 	bl	80054fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f8c5 	bl	8005520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b08      	cmp	r3, #8
 80053a8:	d122      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b08      	cmp	r3, #8
 80053b6:	d11b      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f06f 0208 	mvn.w	r2, #8
 80053c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2204      	movs	r2, #4
 80053c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f899 	bl	800550e <HAL_TIM_IC_CaptureCallback>
 80053dc:	e005      	b.n	80053ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f88c 	bl	80054fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f89b 	bl	8005520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f003 0310 	and.w	r3, r3, #16
 80053fa:	2b10      	cmp	r3, #16
 80053fc:	d122      	bne.n	8005444 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f003 0310 	and.w	r3, r3, #16
 8005408:	2b10      	cmp	r3, #16
 800540a:	d11b      	bne.n	8005444 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f06f 0210 	mvn.w	r2, #16
 8005414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2208      	movs	r2, #8
 800541a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f86f 	bl	800550e <HAL_TIM_IC_CaptureCallback>
 8005430:	e005      	b.n	800543e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f862 	bl	80054fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f871 	bl	8005520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b01      	cmp	r3, #1
 8005450:	d10e      	bne.n	8005470 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b01      	cmp	r3, #1
 800545e:	d107      	bne.n	8005470 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f06f 0201 	mvn.w	r2, #1
 8005468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7fb fcf6 	bl	8000e5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547a:	2b80      	cmp	r3, #128	; 0x80
 800547c:	d10e      	bne.n	800549c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005488:	2b80      	cmp	r3, #128	; 0x80
 800548a:	d107      	bne.n	800549c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f8d7 	bl	800564a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a6:	2b40      	cmp	r3, #64	; 0x40
 80054a8:	d10e      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b4:	2b40      	cmp	r3, #64	; 0x40
 80054b6:	d107      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f835 	bl	8005532 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0320 	and.w	r3, r3, #32
 80054d2:	2b20      	cmp	r3, #32
 80054d4:	d10e      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f003 0320 	and.w	r3, r3, #32
 80054e0:	2b20      	cmp	r3, #32
 80054e2:	d107      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f06f 0220 	mvn.w	r2, #32
 80054ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f8a2 	bl	8005638 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054f4:	bf00      	nop
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	bc80      	pop	{r7}
 800550c:	4770      	bx	lr

0800550e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	bc80      	pop	{r7}
 800551e:	4770      	bx	lr

08005520 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	bc80      	pop	{r7}
 8005530:	4770      	bx	lr

08005532 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005532:	b480      	push	{r7}
 8005534:	b083      	sub	sp, #12
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	bc80      	pop	{r7}
 8005542:	4770      	bx	lr

08005544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a33      	ldr	r2, [pc, #204]	; (8005624 <TIM_Base_SetConfig+0xe0>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d013      	beq.n	8005584 <TIM_Base_SetConfig+0x40>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a32      	ldr	r2, [pc, #200]	; (8005628 <TIM_Base_SetConfig+0xe4>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d00f      	beq.n	8005584 <TIM_Base_SetConfig+0x40>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800556a:	d00b      	beq.n	8005584 <TIM_Base_SetConfig+0x40>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a2f      	ldr	r2, [pc, #188]	; (800562c <TIM_Base_SetConfig+0xe8>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d007      	beq.n	8005584 <TIM_Base_SetConfig+0x40>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a2e      	ldr	r2, [pc, #184]	; (8005630 <TIM_Base_SetConfig+0xec>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d003      	beq.n	8005584 <TIM_Base_SetConfig+0x40>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a2d      	ldr	r2, [pc, #180]	; (8005634 <TIM_Base_SetConfig+0xf0>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d108      	bne.n	8005596 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4313      	orrs	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a22      	ldr	r2, [pc, #136]	; (8005624 <TIM_Base_SetConfig+0xe0>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d013      	beq.n	80055c6 <TIM_Base_SetConfig+0x82>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a21      	ldr	r2, [pc, #132]	; (8005628 <TIM_Base_SetConfig+0xe4>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00f      	beq.n	80055c6 <TIM_Base_SetConfig+0x82>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ac:	d00b      	beq.n	80055c6 <TIM_Base_SetConfig+0x82>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a1e      	ldr	r2, [pc, #120]	; (800562c <TIM_Base_SetConfig+0xe8>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d007      	beq.n	80055c6 <TIM_Base_SetConfig+0x82>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a1d      	ldr	r2, [pc, #116]	; (8005630 <TIM_Base_SetConfig+0xec>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d003      	beq.n	80055c6 <TIM_Base_SetConfig+0x82>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a1c      	ldr	r2, [pc, #112]	; (8005634 <TIM_Base_SetConfig+0xf0>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d108      	bne.n	80055d8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a09      	ldr	r2, [pc, #36]	; (8005624 <TIM_Base_SetConfig+0xe0>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d003      	beq.n	800560c <TIM_Base_SetConfig+0xc8>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a08      	ldr	r2, [pc, #32]	; (8005628 <TIM_Base_SetConfig+0xe4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d103      	bne.n	8005614 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	691a      	ldr	r2, [r3, #16]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	615a      	str	r2, [r3, #20]
}
 800561a:	bf00      	nop
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	bc80      	pop	{r7}
 8005622:	4770      	bx	lr
 8005624:	40012c00 	.word	0x40012c00
 8005628:	40013400 	.word	0x40013400
 800562c:	40000400 	.word	0x40000400
 8005630:	40000800 	.word	0x40000800
 8005634:	40000c00 	.word	0x40000c00

08005638 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	bc80      	pop	{r7}
 8005648:	4770      	bx	lr

0800564a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	bc80      	pop	{r7}
 800565a:	4770      	bx	lr

0800565c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e03f      	b.n	80056ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d106      	bne.n	8005688 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7fd fb8e 	bl	8002da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2224      	movs	r2, #36	; 0x24
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68da      	ldr	r2, [r3, #12]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800569e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fcc1 	bl	8006028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	695a      	ldr	r2, [r3, #20]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2220      	movs	r2, #32
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b08a      	sub	sp, #40	; 0x28
 80056fa:	af02      	add	r7, sp, #8
 80056fc:	60f8      	str	r0, [r7, #12]
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	603b      	str	r3, [r7, #0]
 8005702:	4613      	mov	r3, r2
 8005704:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005706:	2300      	movs	r3, #0
 8005708:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b20      	cmp	r3, #32
 8005714:	d17c      	bne.n	8005810 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <HAL_UART_Transmit+0x2c>
 800571c:	88fb      	ldrh	r3, [r7, #6]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e075      	b.n	8005812 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <HAL_UART_Transmit+0x3e>
 8005730:	2302      	movs	r3, #2
 8005732:	e06e      	b.n	8005812 <HAL_UART_Transmit+0x11c>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2221      	movs	r2, #33	; 0x21
 8005746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800574a:	f7fd fcb7 	bl	80030bc <HAL_GetTick>
 800574e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	88fa      	ldrh	r2, [r7, #6]
 8005754:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	88fa      	ldrh	r2, [r7, #6]
 800575a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005764:	d108      	bne.n	8005778 <HAL_UART_Transmit+0x82>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d104      	bne.n	8005778 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800576e:	2300      	movs	r3, #0
 8005770:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	61bb      	str	r3, [r7, #24]
 8005776:	e003      	b.n	8005780 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800577c:	2300      	movs	r3, #0
 800577e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005788:	e02a      	b.n	80057e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2200      	movs	r2, #0
 8005792:	2180      	movs	r1, #128	; 0x80
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 fa73 	bl	8005c80 <UART_WaitOnFlagUntilTimeout>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e036      	b.n	8005812 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10b      	bne.n	80057c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	881b      	ldrh	r3, [r3, #0]
 80057ae:	461a      	mov	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	3302      	adds	r3, #2
 80057be:	61bb      	str	r3, [r7, #24]
 80057c0:	e007      	b.n	80057d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	781a      	ldrb	r2, [r3, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	3301      	adds	r3, #1
 80057d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1cf      	bne.n	800578a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2200      	movs	r2, #0
 80057f2:	2140      	movs	r1, #64	; 0x40
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f000 fa43 	bl	8005c80 <UART_WaitOnFlagUntilTimeout>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e006      	b.n	8005812 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	e000      	b.n	8005812 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005810:	2302      	movs	r3, #2
  }
}
 8005812:	4618      	mov	r0, r3
 8005814:	3720      	adds	r7, #32
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800581a:	b480      	push	{r7}
 800581c:	b085      	sub	sp, #20
 800581e:	af00      	add	r7, sp, #0
 8005820:	60f8      	str	r0, [r7, #12]
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	4613      	mov	r3, r2
 8005826:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b20      	cmp	r3, #32
 8005832:	d130      	bne.n	8005896 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <HAL_UART_Transmit_IT+0x26>
 800583a:	88fb      	ldrh	r3, [r7, #6]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e029      	b.n	8005898 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800584a:	2b01      	cmp	r3, #1
 800584c:	d101      	bne.n	8005852 <HAL_UART_Transmit_IT+0x38>
 800584e:	2302      	movs	r3, #2
 8005850:	e022      	b.n	8005898 <HAL_UART_Transmit_IT+0x7e>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	88fa      	ldrh	r2, [r7, #6]
 8005864:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	88fa      	ldrh	r2, [r7, #6]
 800586a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2221      	movs	r2, #33	; 0x21
 8005876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68da      	ldr	r2, [r3, #12]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005890:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005892:	2300      	movs	r3, #0
 8005894:	e000      	b.n	8005898 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005896:	2302      	movs	r3, #2
  }
}
 8005898:	4618      	mov	r0, r3
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	bc80      	pop	{r7}
 80058a0:	4770      	bx	lr

080058a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b084      	sub	sp, #16
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	60f8      	str	r0, [r7, #12]
 80058aa:	60b9      	str	r1, [r7, #8]
 80058ac:	4613      	mov	r3, r2
 80058ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	d11d      	bne.n	80058f8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <HAL_UART_Receive_IT+0x26>
 80058c2:	88fb      	ldrh	r3, [r7, #6]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d101      	bne.n	80058cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e016      	b.n	80058fa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d101      	bne.n	80058da <HAL_UART_Receive_IT+0x38>
 80058d6:	2302      	movs	r3, #2
 80058d8:	e00f      	b.n	80058fa <HAL_UART_Receive_IT+0x58>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80058e8:	88fb      	ldrh	r3, [r7, #6]
 80058ea:	461a      	mov	r2, r3
 80058ec:	68b9      	ldr	r1, [r7, #8]
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 fa10 	bl	8005d14 <UART_Start_Receive_IT>
 80058f4:	4603      	mov	r3, r0
 80058f6:	e000      	b.n	80058fa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80058f8:	2302      	movs	r3, #2
  }
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b08a      	sub	sp, #40	; 0x28
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005924:	2300      	movs	r3, #0
 8005926:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005928:	2300      	movs	r3, #0
 800592a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	f003 030f 	and.w	r3, r3, #15
 8005932:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10d      	bne.n	8005956 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	f003 0320 	and.w	r3, r3, #32
 8005940:	2b00      	cmp	r3, #0
 8005942:	d008      	beq.n	8005956 <HAL_UART_IRQHandler+0x52>
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	f003 0320 	and.w	r3, r3, #32
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 fac0 	bl	8005ed4 <UART_Receive_IT>
      return;
 8005954:	e17b      	b.n	8005c4e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 80b1 	beq.w	8005ac0 <HAL_UART_IRQHandler+0x1bc>
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	2b00      	cmp	r3, #0
 8005966:	d105      	bne.n	8005974 <HAL_UART_IRQHandler+0x70>
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 80a6 	beq.w	8005ac0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00a      	beq.n	8005994 <HAL_UART_IRQHandler+0x90>
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005984:	2b00      	cmp	r3, #0
 8005986:	d005      	beq.n	8005994 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598c:	f043 0201 	orr.w	r2, r3, #1
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	f003 0304 	and.w	r3, r3, #4
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <HAL_UART_IRQHandler+0xb0>
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d005      	beq.n	80059b4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ac:	f043 0202 	orr.w	r2, r3, #2
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <HAL_UART_IRQHandler+0xd0>
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059cc:	f043 0204 	orr.w	r2, r3, #4
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	f003 0308 	and.w	r3, r3, #8
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00f      	beq.n	80059fe <HAL_UART_IRQHandler+0xfa>
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	f003 0320 	and.w	r3, r3, #32
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d104      	bne.n	80059f2 <HAL_UART_IRQHandler+0xee>
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d005      	beq.n	80059fe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	f043 0208 	orr.w	r2, r3, #8
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 811e 	beq.w	8005c44 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	f003 0320 	and.w	r3, r3, #32
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d007      	beq.n	8005a22 <HAL_UART_IRQHandler+0x11e>
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	f003 0320 	and.w	r3, r3, #32
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fa59 	bl	8005ed4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	bf14      	ite	ne
 8005a30:	2301      	movne	r3, #1
 8005a32:	2300      	moveq	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3c:	f003 0308 	and.w	r3, r3, #8
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d102      	bne.n	8005a4a <HAL_UART_IRQHandler+0x146>
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d031      	beq.n	8005aae <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f99b 	bl	8005d86 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d023      	beq.n	8005aa6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	695a      	ldr	r2, [r3, #20]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a6c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d013      	beq.n	8005a9e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7a:	4a76      	ldr	r2, [pc, #472]	; (8005c54 <HAL_UART_IRQHandler+0x350>)
 8005a7c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fd fc90 	bl	80033a8 <HAL_DMA_Abort_IT>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d016      	beq.n	8005abc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a98:	4610      	mov	r0, r2
 8005a9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a9c:	e00e      	b.n	8005abc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f8da 	bl	8005c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa4:	e00a      	b.n	8005abc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f8d6 	bl	8005c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aac:	e006      	b.n	8005abc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f8d2 	bl	8005c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005aba:	e0c3      	b.n	8005c44 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005abc:	bf00      	nop
    return;
 8005abe:	e0c1      	b.n	8005c44 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	f040 80a1 	bne.w	8005c0c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	f003 0310 	and.w	r3, r3, #16
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 809b 	beq.w	8005c0c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	f003 0310 	and.w	r3, r3, #16
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 8095 	beq.w	8005c0c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d04e      	beq.n	8005ba4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005b10:	8a3b      	ldrh	r3, [r7, #16]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 8098 	beq.w	8005c48 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b1c:	8a3a      	ldrh	r2, [r7, #16]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	f080 8092 	bcs.w	8005c48 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	8a3a      	ldrh	r2, [r7, #16]
 8005b28:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	2b20      	cmp	r3, #32
 8005b32:	d02b      	beq.n	8005b8c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b42:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	695a      	ldr	r2, [r3, #20]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0201 	bic.w	r2, r2, #1
 8005b52:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	695a      	ldr	r2, [r3, #20]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b62:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68da      	ldr	r2, [r3, #12]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0210 	bic.w	r2, r2, #16
 8005b80:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fd fbd3 	bl	8003332 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f864 	bl	8005c6a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005ba2:	e051      	b.n	8005c48 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d047      	beq.n	8005c4c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005bbc:	8a7b      	ldrh	r3, [r7, #18]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d044      	beq.n	8005c4c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005bd0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	695a      	ldr	r2, [r3, #20]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 0201 	bic.w	r2, r2, #1
 8005be0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0210 	bic.w	r2, r2, #16
 8005bfe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c00:	8a7b      	ldrh	r3, [r7, #18]
 8005c02:	4619      	mov	r1, r3
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 f830 	bl	8005c6a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005c0a:	e01f      	b.n	8005c4c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d008      	beq.n	8005c28 <HAL_UART_IRQHandler+0x324>
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d003      	beq.n	8005c28 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f8f0 	bl	8005e06 <UART_Transmit_IT>
    return;
 8005c26:	e012      	b.n	8005c4e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00d      	beq.n	8005c4e <HAL_UART_IRQHandler+0x34a>
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d008      	beq.n	8005c4e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f931 	bl	8005ea4 <UART_EndTransmit_IT>
    return;
 8005c42:	e004      	b.n	8005c4e <HAL_UART_IRQHandler+0x34a>
    return;
 8005c44:	bf00      	nop
 8005c46:	e002      	b.n	8005c4e <HAL_UART_IRQHandler+0x34a>
      return;
 8005c48:	bf00      	nop
 8005c4a:	e000      	b.n	8005c4e <HAL_UART_IRQHandler+0x34a>
      return;
 8005c4c:	bf00      	nop
  }
}
 8005c4e:	3728      	adds	r7, #40	; 0x28
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	08005ddf 	.word	0x08005ddf

08005c58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bc80      	pop	{r7}
 8005c68:	4770      	bx	lr

08005c6a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	460b      	mov	r3, r1
 8005c74:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c76:	bf00      	nop
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bc80      	pop	{r7}
 8005c7e:	4770      	bx	lr

08005c80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	603b      	str	r3, [r7, #0]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c90:	e02c      	b.n	8005cec <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c98:	d028      	beq.n	8005cec <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d007      	beq.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ca0:	f7fd fa0c 	bl	80030bc <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d21d      	bcs.n	8005cec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005cbe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	695a      	ldr	r2, [r3, #20]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0201 	bic.w	r2, r2, #1
 8005cce:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e00f      	b.n	8005d0c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	bf0c      	ite	eq
 8005cfc:	2301      	moveq	r3, #1
 8005cfe:	2300      	movne	r3, #0
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	461a      	mov	r2, r3
 8005d04:	79fb      	ldrb	r3, [r7, #7]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d0c3      	beq.n	8005c92 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	88fa      	ldrh	r2, [r7, #6]
 8005d2c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	88fa      	ldrh	r2, [r7, #6]
 8005d32:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2222      	movs	r2, #34	; 0x22
 8005d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68da      	ldr	r2, [r3, #12]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d58:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	695a      	ldr	r2, [r3, #20]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f042 0201 	orr.w	r2, r2, #1
 8005d68:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68da      	ldr	r2, [r3, #12]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f042 0220 	orr.w	r2, r2, #32
 8005d78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bc80      	pop	{r7}
 8005d84:	4770      	bx	lr

08005d86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68da      	ldr	r2, [r3, #12]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005d9c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	695a      	ldr	r2, [r3, #20]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f022 0201 	bic.w	r2, r2, #1
 8005dac:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d107      	bne.n	8005dc6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0210 	bic.w	r2, r2, #16
 8005dc4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bc80      	pop	{r7}
 8005ddc:	4770      	bx	lr

08005dde <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b084      	sub	sp, #16
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f7ff ff2d 	bl	8005c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dfe:	bf00      	nop
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b085      	sub	sp, #20
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b21      	cmp	r3, #33	; 0x21
 8005e18:	d13e      	bne.n	8005e98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e22:	d114      	bne.n	8005e4e <UART_Transmit_IT+0x48>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d110      	bne.n	8005e4e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	881b      	ldrh	r3, [r3, #0]
 8005e36:	461a      	mov	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	1c9a      	adds	r2, r3, #2
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	621a      	str	r2, [r3, #32]
 8005e4c:	e008      	b.n	8005e60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	1c59      	adds	r1, r3, #1
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	6211      	str	r1, [r2, #32]
 8005e58:	781a      	ldrb	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	3b01      	subs	r3, #1
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10f      	bne.n	8005e94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	e000      	b.n	8005e9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e98:	2302      	movs	r3, #2
  }
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bc80      	pop	{r7}
 8005ea2:	4770      	bx	lr

08005ea4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7fb f911 	bl	80010ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b22      	cmp	r3, #34	; 0x22
 8005ee6:	f040 8099 	bne.w	800601c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef2:	d117      	bne.n	8005f24 <UART_Receive_IT+0x50>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d113      	bne.n	8005f24 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005efc:	2300      	movs	r3, #0
 8005efe:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f04:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1c:	1c9a      	adds	r2, r3, #2
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	629a      	str	r2, [r3, #40]	; 0x28
 8005f22:	e026      	b.n	8005f72 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f28:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f36:	d007      	beq.n	8005f48 <UART_Receive_IT+0x74>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10a      	bne.n	8005f56 <UART_Receive_IT+0x82>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d106      	bne.n	8005f56 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	e008      	b.n	8005f68 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6c:	1c5a      	adds	r2, r3, #1
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	4619      	mov	r1, r3
 8005f80:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d148      	bne.n	8006018 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68da      	ldr	r2, [r3, #12]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f022 0220 	bic.w	r2, r2, #32
 8005f94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68da      	ldr	r2, [r3, #12]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fa4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	695a      	ldr	r2, [r3, #20]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 0201 	bic.w	r2, r2, #1
 8005fb4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d123      	bne.n	800600e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68da      	ldr	r2, [r3, #12]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0210 	bic.w	r2, r2, #16
 8005fda:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0310 	and.w	r3, r3, #16
 8005fe6:	2b10      	cmp	r3, #16
 8005fe8:	d10a      	bne.n	8006000 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fea:	2300      	movs	r3, #0
 8005fec:	60fb      	str	r3, [r7, #12]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	60fb      	str	r3, [r7, #12]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	60fb      	str	r3, [r7, #12]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006004:	4619      	mov	r1, r3
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7ff fe2f 	bl	8005c6a <HAL_UARTEx_RxEventCallback>
 800600c:	e002      	b.n	8006014 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7fb f83c 	bl	800108c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006014:	2300      	movs	r3, #0
 8006016:	e002      	b.n	800601e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	e000      	b.n	800601e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800601c:	2302      	movs	r3, #2
  }
}
 800601e:	4618      	mov	r0, r3
 8006020:	3718      	adds	r7, #24
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
	...

08006028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68da      	ldr	r2, [r3, #12]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	430a      	orrs	r2, r1
 8006044:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	689a      	ldr	r2, [r3, #8]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	431a      	orrs	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	4313      	orrs	r3, r2
 8006056:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006062:	f023 030c 	bic.w	r3, r3, #12
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	6812      	ldr	r2, [r2, #0]
 800606a:	68b9      	ldr	r1, [r7, #8]
 800606c:	430b      	orrs	r3, r1
 800606e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	699a      	ldr	r2, [r3, #24]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	430a      	orrs	r2, r1
 8006084:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a2c      	ldr	r2, [pc, #176]	; (800613c <UART_SetConfig+0x114>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d103      	bne.n	8006098 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006090:	f7fe fde4 	bl	8004c5c <HAL_RCC_GetPCLK2Freq>
 8006094:	60f8      	str	r0, [r7, #12]
 8006096:	e002      	b.n	800609e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006098:	f7fe fdcc 	bl	8004c34 <HAL_RCC_GetPCLK1Freq>
 800609c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4613      	mov	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	009a      	lsls	r2, r3, #2
 80060a8:	441a      	add	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b4:	4a22      	ldr	r2, [pc, #136]	; (8006140 <UART_SetConfig+0x118>)
 80060b6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ba:	095b      	lsrs	r3, r3, #5
 80060bc:	0119      	lsls	r1, r3, #4
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	009a      	lsls	r2, r3, #2
 80060c8:	441a      	add	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80060d4:	4b1a      	ldr	r3, [pc, #104]	; (8006140 <UART_SetConfig+0x118>)
 80060d6:	fba3 0302 	umull	r0, r3, r3, r2
 80060da:	095b      	lsrs	r3, r3, #5
 80060dc:	2064      	movs	r0, #100	; 0x64
 80060de:	fb00 f303 	mul.w	r3, r0, r3
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	011b      	lsls	r3, r3, #4
 80060e6:	3332      	adds	r3, #50	; 0x32
 80060e8:	4a15      	ldr	r2, [pc, #84]	; (8006140 <UART_SetConfig+0x118>)
 80060ea:	fba2 2303 	umull	r2, r3, r2, r3
 80060ee:	095b      	lsrs	r3, r3, #5
 80060f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060f4:	4419      	add	r1, r3
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	4613      	mov	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	009a      	lsls	r2, r3, #2
 8006100:	441a      	add	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	fbb2 f2f3 	udiv	r2, r2, r3
 800610c:	4b0c      	ldr	r3, [pc, #48]	; (8006140 <UART_SetConfig+0x118>)
 800610e:	fba3 0302 	umull	r0, r3, r3, r2
 8006112:	095b      	lsrs	r3, r3, #5
 8006114:	2064      	movs	r0, #100	; 0x64
 8006116:	fb00 f303 	mul.w	r3, r0, r3
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	011b      	lsls	r3, r3, #4
 800611e:	3332      	adds	r3, #50	; 0x32
 8006120:	4a07      	ldr	r2, [pc, #28]	; (8006140 <UART_SetConfig+0x118>)
 8006122:	fba2 2303 	umull	r2, r3, r2, r3
 8006126:	095b      	lsrs	r3, r3, #5
 8006128:	f003 020f 	and.w	r2, r3, #15
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	440a      	add	r2, r1
 8006132:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006134:	bf00      	nop
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	40013800 	.word	0x40013800
 8006140:	51eb851f 	.word	0x51eb851f

08006144 <__errno>:
 8006144:	4b01      	ldr	r3, [pc, #4]	; (800614c <__errno+0x8>)
 8006146:	6818      	ldr	r0, [r3, #0]
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	20000100 	.word	0x20000100

08006150 <__libc_init_array>:
 8006150:	b570      	push	{r4, r5, r6, lr}
 8006152:	2600      	movs	r6, #0
 8006154:	4d0c      	ldr	r5, [pc, #48]	; (8006188 <__libc_init_array+0x38>)
 8006156:	4c0d      	ldr	r4, [pc, #52]	; (800618c <__libc_init_array+0x3c>)
 8006158:	1b64      	subs	r4, r4, r5
 800615a:	10a4      	asrs	r4, r4, #2
 800615c:	42a6      	cmp	r6, r4
 800615e:	d109      	bne.n	8006174 <__libc_init_array+0x24>
 8006160:	f000 fc5c 	bl	8006a1c <_init>
 8006164:	2600      	movs	r6, #0
 8006166:	4d0a      	ldr	r5, [pc, #40]	; (8006190 <__libc_init_array+0x40>)
 8006168:	4c0a      	ldr	r4, [pc, #40]	; (8006194 <__libc_init_array+0x44>)
 800616a:	1b64      	subs	r4, r4, r5
 800616c:	10a4      	asrs	r4, r4, #2
 800616e:	42a6      	cmp	r6, r4
 8006170:	d105      	bne.n	800617e <__libc_init_array+0x2e>
 8006172:	bd70      	pop	{r4, r5, r6, pc}
 8006174:	f855 3b04 	ldr.w	r3, [r5], #4
 8006178:	4798      	blx	r3
 800617a:	3601      	adds	r6, #1
 800617c:	e7ee      	b.n	800615c <__libc_init_array+0xc>
 800617e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006182:	4798      	blx	r3
 8006184:	3601      	adds	r6, #1
 8006186:	e7f2      	b.n	800616e <__libc_init_array+0x1e>
 8006188:	0800711c 	.word	0x0800711c
 800618c:	0800711c 	.word	0x0800711c
 8006190:	0800711c 	.word	0x0800711c
 8006194:	08007120 	.word	0x08007120

08006198 <memset>:
 8006198:	4603      	mov	r3, r0
 800619a:	4402      	add	r2, r0
 800619c:	4293      	cmp	r3, r2
 800619e:	d100      	bne.n	80061a2 <memset+0xa>
 80061a0:	4770      	bx	lr
 80061a2:	f803 1b01 	strb.w	r1, [r3], #1
 80061a6:	e7f9      	b.n	800619c <memset+0x4>

080061a8 <siprintf>:
 80061a8:	b40e      	push	{r1, r2, r3}
 80061aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061ae:	b500      	push	{lr}
 80061b0:	b09c      	sub	sp, #112	; 0x70
 80061b2:	ab1d      	add	r3, sp, #116	; 0x74
 80061b4:	9002      	str	r0, [sp, #8]
 80061b6:	9006      	str	r0, [sp, #24]
 80061b8:	9107      	str	r1, [sp, #28]
 80061ba:	9104      	str	r1, [sp, #16]
 80061bc:	4808      	ldr	r0, [pc, #32]	; (80061e0 <siprintf+0x38>)
 80061be:	4909      	ldr	r1, [pc, #36]	; (80061e4 <siprintf+0x3c>)
 80061c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80061c4:	9105      	str	r1, [sp, #20]
 80061c6:	6800      	ldr	r0, [r0, #0]
 80061c8:	a902      	add	r1, sp, #8
 80061ca:	9301      	str	r3, [sp, #4]
 80061cc:	f000 f868 	bl	80062a0 <_svfiprintf_r>
 80061d0:	2200      	movs	r2, #0
 80061d2:	9b02      	ldr	r3, [sp, #8]
 80061d4:	701a      	strb	r2, [r3, #0]
 80061d6:	b01c      	add	sp, #112	; 0x70
 80061d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80061dc:	b003      	add	sp, #12
 80061de:	4770      	bx	lr
 80061e0:	20000100 	.word	0x20000100
 80061e4:	ffff0208 	.word	0xffff0208

080061e8 <__ssputs_r>:
 80061e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061ec:	688e      	ldr	r6, [r1, #8]
 80061ee:	4682      	mov	sl, r0
 80061f0:	429e      	cmp	r6, r3
 80061f2:	460c      	mov	r4, r1
 80061f4:	4690      	mov	r8, r2
 80061f6:	461f      	mov	r7, r3
 80061f8:	d838      	bhi.n	800626c <__ssputs_r+0x84>
 80061fa:	898a      	ldrh	r2, [r1, #12]
 80061fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006200:	d032      	beq.n	8006268 <__ssputs_r+0x80>
 8006202:	6825      	ldr	r5, [r4, #0]
 8006204:	6909      	ldr	r1, [r1, #16]
 8006206:	3301      	adds	r3, #1
 8006208:	eba5 0901 	sub.w	r9, r5, r1
 800620c:	6965      	ldr	r5, [r4, #20]
 800620e:	444b      	add	r3, r9
 8006210:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006214:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006218:	106d      	asrs	r5, r5, #1
 800621a:	429d      	cmp	r5, r3
 800621c:	bf38      	it	cc
 800621e:	461d      	movcc	r5, r3
 8006220:	0553      	lsls	r3, r2, #21
 8006222:	d531      	bpl.n	8006288 <__ssputs_r+0xa0>
 8006224:	4629      	mov	r1, r5
 8006226:	f000 fb53 	bl	80068d0 <_malloc_r>
 800622a:	4606      	mov	r6, r0
 800622c:	b950      	cbnz	r0, 8006244 <__ssputs_r+0x5c>
 800622e:	230c      	movs	r3, #12
 8006230:	f04f 30ff 	mov.w	r0, #4294967295
 8006234:	f8ca 3000 	str.w	r3, [sl]
 8006238:	89a3      	ldrh	r3, [r4, #12]
 800623a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800623e:	81a3      	strh	r3, [r4, #12]
 8006240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006244:	464a      	mov	r2, r9
 8006246:	6921      	ldr	r1, [r4, #16]
 8006248:	f000 face 	bl	80067e8 <memcpy>
 800624c:	89a3      	ldrh	r3, [r4, #12]
 800624e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006256:	81a3      	strh	r3, [r4, #12]
 8006258:	6126      	str	r6, [r4, #16]
 800625a:	444e      	add	r6, r9
 800625c:	6026      	str	r6, [r4, #0]
 800625e:	463e      	mov	r6, r7
 8006260:	6165      	str	r5, [r4, #20]
 8006262:	eba5 0509 	sub.w	r5, r5, r9
 8006266:	60a5      	str	r5, [r4, #8]
 8006268:	42be      	cmp	r6, r7
 800626a:	d900      	bls.n	800626e <__ssputs_r+0x86>
 800626c:	463e      	mov	r6, r7
 800626e:	4632      	mov	r2, r6
 8006270:	4641      	mov	r1, r8
 8006272:	6820      	ldr	r0, [r4, #0]
 8006274:	f000 fac6 	bl	8006804 <memmove>
 8006278:	68a3      	ldr	r3, [r4, #8]
 800627a:	6822      	ldr	r2, [r4, #0]
 800627c:	1b9b      	subs	r3, r3, r6
 800627e:	4432      	add	r2, r6
 8006280:	2000      	movs	r0, #0
 8006282:	60a3      	str	r3, [r4, #8]
 8006284:	6022      	str	r2, [r4, #0]
 8006286:	e7db      	b.n	8006240 <__ssputs_r+0x58>
 8006288:	462a      	mov	r2, r5
 800628a:	f000 fb7b 	bl	8006984 <_realloc_r>
 800628e:	4606      	mov	r6, r0
 8006290:	2800      	cmp	r0, #0
 8006292:	d1e1      	bne.n	8006258 <__ssputs_r+0x70>
 8006294:	4650      	mov	r0, sl
 8006296:	6921      	ldr	r1, [r4, #16]
 8006298:	f000 face 	bl	8006838 <_free_r>
 800629c:	e7c7      	b.n	800622e <__ssputs_r+0x46>
	...

080062a0 <_svfiprintf_r>:
 80062a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a4:	4698      	mov	r8, r3
 80062a6:	898b      	ldrh	r3, [r1, #12]
 80062a8:	4607      	mov	r7, r0
 80062aa:	061b      	lsls	r3, r3, #24
 80062ac:	460d      	mov	r5, r1
 80062ae:	4614      	mov	r4, r2
 80062b0:	b09d      	sub	sp, #116	; 0x74
 80062b2:	d50e      	bpl.n	80062d2 <_svfiprintf_r+0x32>
 80062b4:	690b      	ldr	r3, [r1, #16]
 80062b6:	b963      	cbnz	r3, 80062d2 <_svfiprintf_r+0x32>
 80062b8:	2140      	movs	r1, #64	; 0x40
 80062ba:	f000 fb09 	bl	80068d0 <_malloc_r>
 80062be:	6028      	str	r0, [r5, #0]
 80062c0:	6128      	str	r0, [r5, #16]
 80062c2:	b920      	cbnz	r0, 80062ce <_svfiprintf_r+0x2e>
 80062c4:	230c      	movs	r3, #12
 80062c6:	603b      	str	r3, [r7, #0]
 80062c8:	f04f 30ff 	mov.w	r0, #4294967295
 80062cc:	e0d1      	b.n	8006472 <_svfiprintf_r+0x1d2>
 80062ce:	2340      	movs	r3, #64	; 0x40
 80062d0:	616b      	str	r3, [r5, #20]
 80062d2:	2300      	movs	r3, #0
 80062d4:	9309      	str	r3, [sp, #36]	; 0x24
 80062d6:	2320      	movs	r3, #32
 80062d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062dc:	2330      	movs	r3, #48	; 0x30
 80062de:	f04f 0901 	mov.w	r9, #1
 80062e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80062e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800648c <_svfiprintf_r+0x1ec>
 80062ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062ee:	4623      	mov	r3, r4
 80062f0:	469a      	mov	sl, r3
 80062f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062f6:	b10a      	cbz	r2, 80062fc <_svfiprintf_r+0x5c>
 80062f8:	2a25      	cmp	r2, #37	; 0x25
 80062fa:	d1f9      	bne.n	80062f0 <_svfiprintf_r+0x50>
 80062fc:	ebba 0b04 	subs.w	fp, sl, r4
 8006300:	d00b      	beq.n	800631a <_svfiprintf_r+0x7a>
 8006302:	465b      	mov	r3, fp
 8006304:	4622      	mov	r2, r4
 8006306:	4629      	mov	r1, r5
 8006308:	4638      	mov	r0, r7
 800630a:	f7ff ff6d 	bl	80061e8 <__ssputs_r>
 800630e:	3001      	adds	r0, #1
 8006310:	f000 80aa 	beq.w	8006468 <_svfiprintf_r+0x1c8>
 8006314:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006316:	445a      	add	r2, fp
 8006318:	9209      	str	r2, [sp, #36]	; 0x24
 800631a:	f89a 3000 	ldrb.w	r3, [sl]
 800631e:	2b00      	cmp	r3, #0
 8006320:	f000 80a2 	beq.w	8006468 <_svfiprintf_r+0x1c8>
 8006324:	2300      	movs	r3, #0
 8006326:	f04f 32ff 	mov.w	r2, #4294967295
 800632a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800632e:	f10a 0a01 	add.w	sl, sl, #1
 8006332:	9304      	str	r3, [sp, #16]
 8006334:	9307      	str	r3, [sp, #28]
 8006336:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800633a:	931a      	str	r3, [sp, #104]	; 0x68
 800633c:	4654      	mov	r4, sl
 800633e:	2205      	movs	r2, #5
 8006340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006344:	4851      	ldr	r0, [pc, #324]	; (800648c <_svfiprintf_r+0x1ec>)
 8006346:	f000 fa41 	bl	80067cc <memchr>
 800634a:	9a04      	ldr	r2, [sp, #16]
 800634c:	b9d8      	cbnz	r0, 8006386 <_svfiprintf_r+0xe6>
 800634e:	06d0      	lsls	r0, r2, #27
 8006350:	bf44      	itt	mi
 8006352:	2320      	movmi	r3, #32
 8006354:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006358:	0711      	lsls	r1, r2, #28
 800635a:	bf44      	itt	mi
 800635c:	232b      	movmi	r3, #43	; 0x2b
 800635e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006362:	f89a 3000 	ldrb.w	r3, [sl]
 8006366:	2b2a      	cmp	r3, #42	; 0x2a
 8006368:	d015      	beq.n	8006396 <_svfiprintf_r+0xf6>
 800636a:	4654      	mov	r4, sl
 800636c:	2000      	movs	r0, #0
 800636e:	f04f 0c0a 	mov.w	ip, #10
 8006372:	9a07      	ldr	r2, [sp, #28]
 8006374:	4621      	mov	r1, r4
 8006376:	f811 3b01 	ldrb.w	r3, [r1], #1
 800637a:	3b30      	subs	r3, #48	; 0x30
 800637c:	2b09      	cmp	r3, #9
 800637e:	d94e      	bls.n	800641e <_svfiprintf_r+0x17e>
 8006380:	b1b0      	cbz	r0, 80063b0 <_svfiprintf_r+0x110>
 8006382:	9207      	str	r2, [sp, #28]
 8006384:	e014      	b.n	80063b0 <_svfiprintf_r+0x110>
 8006386:	eba0 0308 	sub.w	r3, r0, r8
 800638a:	fa09 f303 	lsl.w	r3, r9, r3
 800638e:	4313      	orrs	r3, r2
 8006390:	46a2      	mov	sl, r4
 8006392:	9304      	str	r3, [sp, #16]
 8006394:	e7d2      	b.n	800633c <_svfiprintf_r+0x9c>
 8006396:	9b03      	ldr	r3, [sp, #12]
 8006398:	1d19      	adds	r1, r3, #4
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	9103      	str	r1, [sp, #12]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	bfbb      	ittet	lt
 80063a2:	425b      	neglt	r3, r3
 80063a4:	f042 0202 	orrlt.w	r2, r2, #2
 80063a8:	9307      	strge	r3, [sp, #28]
 80063aa:	9307      	strlt	r3, [sp, #28]
 80063ac:	bfb8      	it	lt
 80063ae:	9204      	strlt	r2, [sp, #16]
 80063b0:	7823      	ldrb	r3, [r4, #0]
 80063b2:	2b2e      	cmp	r3, #46	; 0x2e
 80063b4:	d10c      	bne.n	80063d0 <_svfiprintf_r+0x130>
 80063b6:	7863      	ldrb	r3, [r4, #1]
 80063b8:	2b2a      	cmp	r3, #42	; 0x2a
 80063ba:	d135      	bne.n	8006428 <_svfiprintf_r+0x188>
 80063bc:	9b03      	ldr	r3, [sp, #12]
 80063be:	3402      	adds	r4, #2
 80063c0:	1d1a      	adds	r2, r3, #4
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	9203      	str	r2, [sp, #12]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	bfb8      	it	lt
 80063ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80063ce:	9305      	str	r3, [sp, #20]
 80063d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800649c <_svfiprintf_r+0x1fc>
 80063d4:	2203      	movs	r2, #3
 80063d6:	4650      	mov	r0, sl
 80063d8:	7821      	ldrb	r1, [r4, #0]
 80063da:	f000 f9f7 	bl	80067cc <memchr>
 80063de:	b140      	cbz	r0, 80063f2 <_svfiprintf_r+0x152>
 80063e0:	2340      	movs	r3, #64	; 0x40
 80063e2:	eba0 000a 	sub.w	r0, r0, sl
 80063e6:	fa03 f000 	lsl.w	r0, r3, r0
 80063ea:	9b04      	ldr	r3, [sp, #16]
 80063ec:	3401      	adds	r4, #1
 80063ee:	4303      	orrs	r3, r0
 80063f0:	9304      	str	r3, [sp, #16]
 80063f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063f6:	2206      	movs	r2, #6
 80063f8:	4825      	ldr	r0, [pc, #148]	; (8006490 <_svfiprintf_r+0x1f0>)
 80063fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063fe:	f000 f9e5 	bl	80067cc <memchr>
 8006402:	2800      	cmp	r0, #0
 8006404:	d038      	beq.n	8006478 <_svfiprintf_r+0x1d8>
 8006406:	4b23      	ldr	r3, [pc, #140]	; (8006494 <_svfiprintf_r+0x1f4>)
 8006408:	bb1b      	cbnz	r3, 8006452 <_svfiprintf_r+0x1b2>
 800640a:	9b03      	ldr	r3, [sp, #12]
 800640c:	3307      	adds	r3, #7
 800640e:	f023 0307 	bic.w	r3, r3, #7
 8006412:	3308      	adds	r3, #8
 8006414:	9303      	str	r3, [sp, #12]
 8006416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006418:	4433      	add	r3, r6
 800641a:	9309      	str	r3, [sp, #36]	; 0x24
 800641c:	e767      	b.n	80062ee <_svfiprintf_r+0x4e>
 800641e:	460c      	mov	r4, r1
 8006420:	2001      	movs	r0, #1
 8006422:	fb0c 3202 	mla	r2, ip, r2, r3
 8006426:	e7a5      	b.n	8006374 <_svfiprintf_r+0xd4>
 8006428:	2300      	movs	r3, #0
 800642a:	f04f 0c0a 	mov.w	ip, #10
 800642e:	4619      	mov	r1, r3
 8006430:	3401      	adds	r4, #1
 8006432:	9305      	str	r3, [sp, #20]
 8006434:	4620      	mov	r0, r4
 8006436:	f810 2b01 	ldrb.w	r2, [r0], #1
 800643a:	3a30      	subs	r2, #48	; 0x30
 800643c:	2a09      	cmp	r2, #9
 800643e:	d903      	bls.n	8006448 <_svfiprintf_r+0x1a8>
 8006440:	2b00      	cmp	r3, #0
 8006442:	d0c5      	beq.n	80063d0 <_svfiprintf_r+0x130>
 8006444:	9105      	str	r1, [sp, #20]
 8006446:	e7c3      	b.n	80063d0 <_svfiprintf_r+0x130>
 8006448:	4604      	mov	r4, r0
 800644a:	2301      	movs	r3, #1
 800644c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006450:	e7f0      	b.n	8006434 <_svfiprintf_r+0x194>
 8006452:	ab03      	add	r3, sp, #12
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	462a      	mov	r2, r5
 8006458:	4638      	mov	r0, r7
 800645a:	4b0f      	ldr	r3, [pc, #60]	; (8006498 <_svfiprintf_r+0x1f8>)
 800645c:	a904      	add	r1, sp, #16
 800645e:	f3af 8000 	nop.w
 8006462:	1c42      	adds	r2, r0, #1
 8006464:	4606      	mov	r6, r0
 8006466:	d1d6      	bne.n	8006416 <_svfiprintf_r+0x176>
 8006468:	89ab      	ldrh	r3, [r5, #12]
 800646a:	065b      	lsls	r3, r3, #25
 800646c:	f53f af2c 	bmi.w	80062c8 <_svfiprintf_r+0x28>
 8006470:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006472:	b01d      	add	sp, #116	; 0x74
 8006474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006478:	ab03      	add	r3, sp, #12
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	462a      	mov	r2, r5
 800647e:	4638      	mov	r0, r7
 8006480:	4b05      	ldr	r3, [pc, #20]	; (8006498 <_svfiprintf_r+0x1f8>)
 8006482:	a904      	add	r1, sp, #16
 8006484:	f000 f87c 	bl	8006580 <_printf_i>
 8006488:	e7eb      	b.n	8006462 <_svfiprintf_r+0x1c2>
 800648a:	bf00      	nop
 800648c:	080070e8 	.word	0x080070e8
 8006490:	080070f2 	.word	0x080070f2
 8006494:	00000000 	.word	0x00000000
 8006498:	080061e9 	.word	0x080061e9
 800649c:	080070ee 	.word	0x080070ee

080064a0 <_printf_common>:
 80064a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064a4:	4616      	mov	r6, r2
 80064a6:	4699      	mov	r9, r3
 80064a8:	688a      	ldr	r2, [r1, #8]
 80064aa:	690b      	ldr	r3, [r1, #16]
 80064ac:	4607      	mov	r7, r0
 80064ae:	4293      	cmp	r3, r2
 80064b0:	bfb8      	it	lt
 80064b2:	4613      	movlt	r3, r2
 80064b4:	6033      	str	r3, [r6, #0]
 80064b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064ba:	460c      	mov	r4, r1
 80064bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064c0:	b10a      	cbz	r2, 80064c6 <_printf_common+0x26>
 80064c2:	3301      	adds	r3, #1
 80064c4:	6033      	str	r3, [r6, #0]
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	0699      	lsls	r1, r3, #26
 80064ca:	bf42      	ittt	mi
 80064cc:	6833      	ldrmi	r3, [r6, #0]
 80064ce:	3302      	addmi	r3, #2
 80064d0:	6033      	strmi	r3, [r6, #0]
 80064d2:	6825      	ldr	r5, [r4, #0]
 80064d4:	f015 0506 	ands.w	r5, r5, #6
 80064d8:	d106      	bne.n	80064e8 <_printf_common+0x48>
 80064da:	f104 0a19 	add.w	sl, r4, #25
 80064de:	68e3      	ldr	r3, [r4, #12]
 80064e0:	6832      	ldr	r2, [r6, #0]
 80064e2:	1a9b      	subs	r3, r3, r2
 80064e4:	42ab      	cmp	r3, r5
 80064e6:	dc28      	bgt.n	800653a <_printf_common+0x9a>
 80064e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064ec:	1e13      	subs	r3, r2, #0
 80064ee:	6822      	ldr	r2, [r4, #0]
 80064f0:	bf18      	it	ne
 80064f2:	2301      	movne	r3, #1
 80064f4:	0692      	lsls	r2, r2, #26
 80064f6:	d42d      	bmi.n	8006554 <_printf_common+0xb4>
 80064f8:	4649      	mov	r1, r9
 80064fa:	4638      	mov	r0, r7
 80064fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006500:	47c0      	blx	r8
 8006502:	3001      	adds	r0, #1
 8006504:	d020      	beq.n	8006548 <_printf_common+0xa8>
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	68e5      	ldr	r5, [r4, #12]
 800650a:	f003 0306 	and.w	r3, r3, #6
 800650e:	2b04      	cmp	r3, #4
 8006510:	bf18      	it	ne
 8006512:	2500      	movne	r5, #0
 8006514:	6832      	ldr	r2, [r6, #0]
 8006516:	f04f 0600 	mov.w	r6, #0
 800651a:	68a3      	ldr	r3, [r4, #8]
 800651c:	bf08      	it	eq
 800651e:	1aad      	subeq	r5, r5, r2
 8006520:	6922      	ldr	r2, [r4, #16]
 8006522:	bf08      	it	eq
 8006524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006528:	4293      	cmp	r3, r2
 800652a:	bfc4      	itt	gt
 800652c:	1a9b      	subgt	r3, r3, r2
 800652e:	18ed      	addgt	r5, r5, r3
 8006530:	341a      	adds	r4, #26
 8006532:	42b5      	cmp	r5, r6
 8006534:	d11a      	bne.n	800656c <_printf_common+0xcc>
 8006536:	2000      	movs	r0, #0
 8006538:	e008      	b.n	800654c <_printf_common+0xac>
 800653a:	2301      	movs	r3, #1
 800653c:	4652      	mov	r2, sl
 800653e:	4649      	mov	r1, r9
 8006540:	4638      	mov	r0, r7
 8006542:	47c0      	blx	r8
 8006544:	3001      	adds	r0, #1
 8006546:	d103      	bne.n	8006550 <_printf_common+0xb0>
 8006548:	f04f 30ff 	mov.w	r0, #4294967295
 800654c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006550:	3501      	adds	r5, #1
 8006552:	e7c4      	b.n	80064de <_printf_common+0x3e>
 8006554:	2030      	movs	r0, #48	; 0x30
 8006556:	18e1      	adds	r1, r4, r3
 8006558:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800655c:	1c5a      	adds	r2, r3, #1
 800655e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006562:	4422      	add	r2, r4
 8006564:	3302      	adds	r3, #2
 8006566:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800656a:	e7c5      	b.n	80064f8 <_printf_common+0x58>
 800656c:	2301      	movs	r3, #1
 800656e:	4622      	mov	r2, r4
 8006570:	4649      	mov	r1, r9
 8006572:	4638      	mov	r0, r7
 8006574:	47c0      	blx	r8
 8006576:	3001      	adds	r0, #1
 8006578:	d0e6      	beq.n	8006548 <_printf_common+0xa8>
 800657a:	3601      	adds	r6, #1
 800657c:	e7d9      	b.n	8006532 <_printf_common+0x92>
	...

08006580 <_printf_i>:
 8006580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006584:	460c      	mov	r4, r1
 8006586:	7e27      	ldrb	r7, [r4, #24]
 8006588:	4691      	mov	r9, r2
 800658a:	2f78      	cmp	r7, #120	; 0x78
 800658c:	4680      	mov	r8, r0
 800658e:	469a      	mov	sl, r3
 8006590:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006592:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006596:	d807      	bhi.n	80065a8 <_printf_i+0x28>
 8006598:	2f62      	cmp	r7, #98	; 0x62
 800659a:	d80a      	bhi.n	80065b2 <_printf_i+0x32>
 800659c:	2f00      	cmp	r7, #0
 800659e:	f000 80d9 	beq.w	8006754 <_printf_i+0x1d4>
 80065a2:	2f58      	cmp	r7, #88	; 0x58
 80065a4:	f000 80a4 	beq.w	80066f0 <_printf_i+0x170>
 80065a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80065ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065b0:	e03a      	b.n	8006628 <_printf_i+0xa8>
 80065b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065b6:	2b15      	cmp	r3, #21
 80065b8:	d8f6      	bhi.n	80065a8 <_printf_i+0x28>
 80065ba:	a001      	add	r0, pc, #4	; (adr r0, 80065c0 <_printf_i+0x40>)
 80065bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80065c0:	08006619 	.word	0x08006619
 80065c4:	0800662d 	.word	0x0800662d
 80065c8:	080065a9 	.word	0x080065a9
 80065cc:	080065a9 	.word	0x080065a9
 80065d0:	080065a9 	.word	0x080065a9
 80065d4:	080065a9 	.word	0x080065a9
 80065d8:	0800662d 	.word	0x0800662d
 80065dc:	080065a9 	.word	0x080065a9
 80065e0:	080065a9 	.word	0x080065a9
 80065e4:	080065a9 	.word	0x080065a9
 80065e8:	080065a9 	.word	0x080065a9
 80065ec:	0800673b 	.word	0x0800673b
 80065f0:	0800665d 	.word	0x0800665d
 80065f4:	0800671d 	.word	0x0800671d
 80065f8:	080065a9 	.word	0x080065a9
 80065fc:	080065a9 	.word	0x080065a9
 8006600:	0800675d 	.word	0x0800675d
 8006604:	080065a9 	.word	0x080065a9
 8006608:	0800665d 	.word	0x0800665d
 800660c:	080065a9 	.word	0x080065a9
 8006610:	080065a9 	.word	0x080065a9
 8006614:	08006725 	.word	0x08006725
 8006618:	680b      	ldr	r3, [r1, #0]
 800661a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800661e:	1d1a      	adds	r2, r3, #4
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	600a      	str	r2, [r1, #0]
 8006624:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006628:	2301      	movs	r3, #1
 800662a:	e0a4      	b.n	8006776 <_printf_i+0x1f6>
 800662c:	6825      	ldr	r5, [r4, #0]
 800662e:	6808      	ldr	r0, [r1, #0]
 8006630:	062e      	lsls	r6, r5, #24
 8006632:	f100 0304 	add.w	r3, r0, #4
 8006636:	d50a      	bpl.n	800664e <_printf_i+0xce>
 8006638:	6805      	ldr	r5, [r0, #0]
 800663a:	600b      	str	r3, [r1, #0]
 800663c:	2d00      	cmp	r5, #0
 800663e:	da03      	bge.n	8006648 <_printf_i+0xc8>
 8006640:	232d      	movs	r3, #45	; 0x2d
 8006642:	426d      	negs	r5, r5
 8006644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006648:	230a      	movs	r3, #10
 800664a:	485e      	ldr	r0, [pc, #376]	; (80067c4 <_printf_i+0x244>)
 800664c:	e019      	b.n	8006682 <_printf_i+0x102>
 800664e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006652:	6805      	ldr	r5, [r0, #0]
 8006654:	600b      	str	r3, [r1, #0]
 8006656:	bf18      	it	ne
 8006658:	b22d      	sxthne	r5, r5
 800665a:	e7ef      	b.n	800663c <_printf_i+0xbc>
 800665c:	680b      	ldr	r3, [r1, #0]
 800665e:	6825      	ldr	r5, [r4, #0]
 8006660:	1d18      	adds	r0, r3, #4
 8006662:	6008      	str	r0, [r1, #0]
 8006664:	0628      	lsls	r0, r5, #24
 8006666:	d501      	bpl.n	800666c <_printf_i+0xec>
 8006668:	681d      	ldr	r5, [r3, #0]
 800666a:	e002      	b.n	8006672 <_printf_i+0xf2>
 800666c:	0669      	lsls	r1, r5, #25
 800666e:	d5fb      	bpl.n	8006668 <_printf_i+0xe8>
 8006670:	881d      	ldrh	r5, [r3, #0]
 8006672:	2f6f      	cmp	r7, #111	; 0x6f
 8006674:	bf0c      	ite	eq
 8006676:	2308      	moveq	r3, #8
 8006678:	230a      	movne	r3, #10
 800667a:	4852      	ldr	r0, [pc, #328]	; (80067c4 <_printf_i+0x244>)
 800667c:	2100      	movs	r1, #0
 800667e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006682:	6866      	ldr	r6, [r4, #4]
 8006684:	2e00      	cmp	r6, #0
 8006686:	bfa8      	it	ge
 8006688:	6821      	ldrge	r1, [r4, #0]
 800668a:	60a6      	str	r6, [r4, #8]
 800668c:	bfa4      	itt	ge
 800668e:	f021 0104 	bicge.w	r1, r1, #4
 8006692:	6021      	strge	r1, [r4, #0]
 8006694:	b90d      	cbnz	r5, 800669a <_printf_i+0x11a>
 8006696:	2e00      	cmp	r6, #0
 8006698:	d04d      	beq.n	8006736 <_printf_i+0x1b6>
 800669a:	4616      	mov	r6, r2
 800669c:	fbb5 f1f3 	udiv	r1, r5, r3
 80066a0:	fb03 5711 	mls	r7, r3, r1, r5
 80066a4:	5dc7      	ldrb	r7, [r0, r7]
 80066a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066aa:	462f      	mov	r7, r5
 80066ac:	42bb      	cmp	r3, r7
 80066ae:	460d      	mov	r5, r1
 80066b0:	d9f4      	bls.n	800669c <_printf_i+0x11c>
 80066b2:	2b08      	cmp	r3, #8
 80066b4:	d10b      	bne.n	80066ce <_printf_i+0x14e>
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	07df      	lsls	r7, r3, #31
 80066ba:	d508      	bpl.n	80066ce <_printf_i+0x14e>
 80066bc:	6923      	ldr	r3, [r4, #16]
 80066be:	6861      	ldr	r1, [r4, #4]
 80066c0:	4299      	cmp	r1, r3
 80066c2:	bfde      	ittt	le
 80066c4:	2330      	movle	r3, #48	; 0x30
 80066c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80066ce:	1b92      	subs	r2, r2, r6
 80066d0:	6122      	str	r2, [r4, #16]
 80066d2:	464b      	mov	r3, r9
 80066d4:	4621      	mov	r1, r4
 80066d6:	4640      	mov	r0, r8
 80066d8:	f8cd a000 	str.w	sl, [sp]
 80066dc:	aa03      	add	r2, sp, #12
 80066de:	f7ff fedf 	bl	80064a0 <_printf_common>
 80066e2:	3001      	adds	r0, #1
 80066e4:	d14c      	bne.n	8006780 <_printf_i+0x200>
 80066e6:	f04f 30ff 	mov.w	r0, #4294967295
 80066ea:	b004      	add	sp, #16
 80066ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066f0:	4834      	ldr	r0, [pc, #208]	; (80067c4 <_printf_i+0x244>)
 80066f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80066f6:	680e      	ldr	r6, [r1, #0]
 80066f8:	6823      	ldr	r3, [r4, #0]
 80066fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80066fe:	061f      	lsls	r7, r3, #24
 8006700:	600e      	str	r6, [r1, #0]
 8006702:	d514      	bpl.n	800672e <_printf_i+0x1ae>
 8006704:	07d9      	lsls	r1, r3, #31
 8006706:	bf44      	itt	mi
 8006708:	f043 0320 	orrmi.w	r3, r3, #32
 800670c:	6023      	strmi	r3, [r4, #0]
 800670e:	b91d      	cbnz	r5, 8006718 <_printf_i+0x198>
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	f023 0320 	bic.w	r3, r3, #32
 8006716:	6023      	str	r3, [r4, #0]
 8006718:	2310      	movs	r3, #16
 800671a:	e7af      	b.n	800667c <_printf_i+0xfc>
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	f043 0320 	orr.w	r3, r3, #32
 8006722:	6023      	str	r3, [r4, #0]
 8006724:	2378      	movs	r3, #120	; 0x78
 8006726:	4828      	ldr	r0, [pc, #160]	; (80067c8 <_printf_i+0x248>)
 8006728:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800672c:	e7e3      	b.n	80066f6 <_printf_i+0x176>
 800672e:	065e      	lsls	r6, r3, #25
 8006730:	bf48      	it	mi
 8006732:	b2ad      	uxthmi	r5, r5
 8006734:	e7e6      	b.n	8006704 <_printf_i+0x184>
 8006736:	4616      	mov	r6, r2
 8006738:	e7bb      	b.n	80066b2 <_printf_i+0x132>
 800673a:	680b      	ldr	r3, [r1, #0]
 800673c:	6826      	ldr	r6, [r4, #0]
 800673e:	1d1d      	adds	r5, r3, #4
 8006740:	6960      	ldr	r0, [r4, #20]
 8006742:	600d      	str	r5, [r1, #0]
 8006744:	0635      	lsls	r5, r6, #24
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	d501      	bpl.n	800674e <_printf_i+0x1ce>
 800674a:	6018      	str	r0, [r3, #0]
 800674c:	e002      	b.n	8006754 <_printf_i+0x1d4>
 800674e:	0671      	lsls	r1, r6, #25
 8006750:	d5fb      	bpl.n	800674a <_printf_i+0x1ca>
 8006752:	8018      	strh	r0, [r3, #0]
 8006754:	2300      	movs	r3, #0
 8006756:	4616      	mov	r6, r2
 8006758:	6123      	str	r3, [r4, #16]
 800675a:	e7ba      	b.n	80066d2 <_printf_i+0x152>
 800675c:	680b      	ldr	r3, [r1, #0]
 800675e:	1d1a      	adds	r2, r3, #4
 8006760:	600a      	str	r2, [r1, #0]
 8006762:	681e      	ldr	r6, [r3, #0]
 8006764:	2100      	movs	r1, #0
 8006766:	4630      	mov	r0, r6
 8006768:	6862      	ldr	r2, [r4, #4]
 800676a:	f000 f82f 	bl	80067cc <memchr>
 800676e:	b108      	cbz	r0, 8006774 <_printf_i+0x1f4>
 8006770:	1b80      	subs	r0, r0, r6
 8006772:	6060      	str	r0, [r4, #4]
 8006774:	6863      	ldr	r3, [r4, #4]
 8006776:	6123      	str	r3, [r4, #16]
 8006778:	2300      	movs	r3, #0
 800677a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800677e:	e7a8      	b.n	80066d2 <_printf_i+0x152>
 8006780:	4632      	mov	r2, r6
 8006782:	4649      	mov	r1, r9
 8006784:	4640      	mov	r0, r8
 8006786:	6923      	ldr	r3, [r4, #16]
 8006788:	47d0      	blx	sl
 800678a:	3001      	adds	r0, #1
 800678c:	d0ab      	beq.n	80066e6 <_printf_i+0x166>
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	079b      	lsls	r3, r3, #30
 8006792:	d413      	bmi.n	80067bc <_printf_i+0x23c>
 8006794:	68e0      	ldr	r0, [r4, #12]
 8006796:	9b03      	ldr	r3, [sp, #12]
 8006798:	4298      	cmp	r0, r3
 800679a:	bfb8      	it	lt
 800679c:	4618      	movlt	r0, r3
 800679e:	e7a4      	b.n	80066ea <_printf_i+0x16a>
 80067a0:	2301      	movs	r3, #1
 80067a2:	4632      	mov	r2, r6
 80067a4:	4649      	mov	r1, r9
 80067a6:	4640      	mov	r0, r8
 80067a8:	47d0      	blx	sl
 80067aa:	3001      	adds	r0, #1
 80067ac:	d09b      	beq.n	80066e6 <_printf_i+0x166>
 80067ae:	3501      	adds	r5, #1
 80067b0:	68e3      	ldr	r3, [r4, #12]
 80067b2:	9903      	ldr	r1, [sp, #12]
 80067b4:	1a5b      	subs	r3, r3, r1
 80067b6:	42ab      	cmp	r3, r5
 80067b8:	dcf2      	bgt.n	80067a0 <_printf_i+0x220>
 80067ba:	e7eb      	b.n	8006794 <_printf_i+0x214>
 80067bc:	2500      	movs	r5, #0
 80067be:	f104 0619 	add.w	r6, r4, #25
 80067c2:	e7f5      	b.n	80067b0 <_printf_i+0x230>
 80067c4:	080070f9 	.word	0x080070f9
 80067c8:	0800710a 	.word	0x0800710a

080067cc <memchr>:
 80067cc:	4603      	mov	r3, r0
 80067ce:	b510      	push	{r4, lr}
 80067d0:	b2c9      	uxtb	r1, r1
 80067d2:	4402      	add	r2, r0
 80067d4:	4293      	cmp	r3, r2
 80067d6:	4618      	mov	r0, r3
 80067d8:	d101      	bne.n	80067de <memchr+0x12>
 80067da:	2000      	movs	r0, #0
 80067dc:	e003      	b.n	80067e6 <memchr+0x1a>
 80067de:	7804      	ldrb	r4, [r0, #0]
 80067e0:	3301      	adds	r3, #1
 80067e2:	428c      	cmp	r4, r1
 80067e4:	d1f6      	bne.n	80067d4 <memchr+0x8>
 80067e6:	bd10      	pop	{r4, pc}

080067e8 <memcpy>:
 80067e8:	440a      	add	r2, r1
 80067ea:	4291      	cmp	r1, r2
 80067ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80067f0:	d100      	bne.n	80067f4 <memcpy+0xc>
 80067f2:	4770      	bx	lr
 80067f4:	b510      	push	{r4, lr}
 80067f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067fa:	4291      	cmp	r1, r2
 80067fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006800:	d1f9      	bne.n	80067f6 <memcpy+0xe>
 8006802:	bd10      	pop	{r4, pc}

08006804 <memmove>:
 8006804:	4288      	cmp	r0, r1
 8006806:	b510      	push	{r4, lr}
 8006808:	eb01 0402 	add.w	r4, r1, r2
 800680c:	d902      	bls.n	8006814 <memmove+0x10>
 800680e:	4284      	cmp	r4, r0
 8006810:	4623      	mov	r3, r4
 8006812:	d807      	bhi.n	8006824 <memmove+0x20>
 8006814:	1e43      	subs	r3, r0, #1
 8006816:	42a1      	cmp	r1, r4
 8006818:	d008      	beq.n	800682c <memmove+0x28>
 800681a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800681e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006822:	e7f8      	b.n	8006816 <memmove+0x12>
 8006824:	4601      	mov	r1, r0
 8006826:	4402      	add	r2, r0
 8006828:	428a      	cmp	r2, r1
 800682a:	d100      	bne.n	800682e <memmove+0x2a>
 800682c:	bd10      	pop	{r4, pc}
 800682e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006832:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006836:	e7f7      	b.n	8006828 <memmove+0x24>

08006838 <_free_r>:
 8006838:	b538      	push	{r3, r4, r5, lr}
 800683a:	4605      	mov	r5, r0
 800683c:	2900      	cmp	r1, #0
 800683e:	d043      	beq.n	80068c8 <_free_r+0x90>
 8006840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006844:	1f0c      	subs	r4, r1, #4
 8006846:	2b00      	cmp	r3, #0
 8006848:	bfb8      	it	lt
 800684a:	18e4      	addlt	r4, r4, r3
 800684c:	f000 f8d0 	bl	80069f0 <__malloc_lock>
 8006850:	4a1e      	ldr	r2, [pc, #120]	; (80068cc <_free_r+0x94>)
 8006852:	6813      	ldr	r3, [r2, #0]
 8006854:	4610      	mov	r0, r2
 8006856:	b933      	cbnz	r3, 8006866 <_free_r+0x2e>
 8006858:	6063      	str	r3, [r4, #4]
 800685a:	6014      	str	r4, [r2, #0]
 800685c:	4628      	mov	r0, r5
 800685e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006862:	f000 b8cb 	b.w	80069fc <__malloc_unlock>
 8006866:	42a3      	cmp	r3, r4
 8006868:	d90a      	bls.n	8006880 <_free_r+0x48>
 800686a:	6821      	ldr	r1, [r4, #0]
 800686c:	1862      	adds	r2, r4, r1
 800686e:	4293      	cmp	r3, r2
 8006870:	bf01      	itttt	eq
 8006872:	681a      	ldreq	r2, [r3, #0]
 8006874:	685b      	ldreq	r3, [r3, #4]
 8006876:	1852      	addeq	r2, r2, r1
 8006878:	6022      	streq	r2, [r4, #0]
 800687a:	6063      	str	r3, [r4, #4]
 800687c:	6004      	str	r4, [r0, #0]
 800687e:	e7ed      	b.n	800685c <_free_r+0x24>
 8006880:	461a      	mov	r2, r3
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	b10b      	cbz	r3, 800688a <_free_r+0x52>
 8006886:	42a3      	cmp	r3, r4
 8006888:	d9fa      	bls.n	8006880 <_free_r+0x48>
 800688a:	6811      	ldr	r1, [r2, #0]
 800688c:	1850      	adds	r0, r2, r1
 800688e:	42a0      	cmp	r0, r4
 8006890:	d10b      	bne.n	80068aa <_free_r+0x72>
 8006892:	6820      	ldr	r0, [r4, #0]
 8006894:	4401      	add	r1, r0
 8006896:	1850      	adds	r0, r2, r1
 8006898:	4283      	cmp	r3, r0
 800689a:	6011      	str	r1, [r2, #0]
 800689c:	d1de      	bne.n	800685c <_free_r+0x24>
 800689e:	6818      	ldr	r0, [r3, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	4401      	add	r1, r0
 80068a4:	6011      	str	r1, [r2, #0]
 80068a6:	6053      	str	r3, [r2, #4]
 80068a8:	e7d8      	b.n	800685c <_free_r+0x24>
 80068aa:	d902      	bls.n	80068b2 <_free_r+0x7a>
 80068ac:	230c      	movs	r3, #12
 80068ae:	602b      	str	r3, [r5, #0]
 80068b0:	e7d4      	b.n	800685c <_free_r+0x24>
 80068b2:	6820      	ldr	r0, [r4, #0]
 80068b4:	1821      	adds	r1, r4, r0
 80068b6:	428b      	cmp	r3, r1
 80068b8:	bf01      	itttt	eq
 80068ba:	6819      	ldreq	r1, [r3, #0]
 80068bc:	685b      	ldreq	r3, [r3, #4]
 80068be:	1809      	addeq	r1, r1, r0
 80068c0:	6021      	streq	r1, [r4, #0]
 80068c2:	6063      	str	r3, [r4, #4]
 80068c4:	6054      	str	r4, [r2, #4]
 80068c6:	e7c9      	b.n	800685c <_free_r+0x24>
 80068c8:	bd38      	pop	{r3, r4, r5, pc}
 80068ca:	bf00      	nop
 80068cc:	200011d4 	.word	0x200011d4

080068d0 <_malloc_r>:
 80068d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d2:	1ccd      	adds	r5, r1, #3
 80068d4:	f025 0503 	bic.w	r5, r5, #3
 80068d8:	3508      	adds	r5, #8
 80068da:	2d0c      	cmp	r5, #12
 80068dc:	bf38      	it	cc
 80068de:	250c      	movcc	r5, #12
 80068e0:	2d00      	cmp	r5, #0
 80068e2:	4606      	mov	r6, r0
 80068e4:	db01      	blt.n	80068ea <_malloc_r+0x1a>
 80068e6:	42a9      	cmp	r1, r5
 80068e8:	d903      	bls.n	80068f2 <_malloc_r+0x22>
 80068ea:	230c      	movs	r3, #12
 80068ec:	6033      	str	r3, [r6, #0]
 80068ee:	2000      	movs	r0, #0
 80068f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068f2:	f000 f87d 	bl	80069f0 <__malloc_lock>
 80068f6:	4921      	ldr	r1, [pc, #132]	; (800697c <_malloc_r+0xac>)
 80068f8:	680a      	ldr	r2, [r1, #0]
 80068fa:	4614      	mov	r4, r2
 80068fc:	b99c      	cbnz	r4, 8006926 <_malloc_r+0x56>
 80068fe:	4f20      	ldr	r7, [pc, #128]	; (8006980 <_malloc_r+0xb0>)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	b923      	cbnz	r3, 800690e <_malloc_r+0x3e>
 8006904:	4621      	mov	r1, r4
 8006906:	4630      	mov	r0, r6
 8006908:	f000 f862 	bl	80069d0 <_sbrk_r>
 800690c:	6038      	str	r0, [r7, #0]
 800690e:	4629      	mov	r1, r5
 8006910:	4630      	mov	r0, r6
 8006912:	f000 f85d 	bl	80069d0 <_sbrk_r>
 8006916:	1c43      	adds	r3, r0, #1
 8006918:	d123      	bne.n	8006962 <_malloc_r+0x92>
 800691a:	230c      	movs	r3, #12
 800691c:	4630      	mov	r0, r6
 800691e:	6033      	str	r3, [r6, #0]
 8006920:	f000 f86c 	bl	80069fc <__malloc_unlock>
 8006924:	e7e3      	b.n	80068ee <_malloc_r+0x1e>
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	1b5b      	subs	r3, r3, r5
 800692a:	d417      	bmi.n	800695c <_malloc_r+0x8c>
 800692c:	2b0b      	cmp	r3, #11
 800692e:	d903      	bls.n	8006938 <_malloc_r+0x68>
 8006930:	6023      	str	r3, [r4, #0]
 8006932:	441c      	add	r4, r3
 8006934:	6025      	str	r5, [r4, #0]
 8006936:	e004      	b.n	8006942 <_malloc_r+0x72>
 8006938:	6863      	ldr	r3, [r4, #4]
 800693a:	42a2      	cmp	r2, r4
 800693c:	bf0c      	ite	eq
 800693e:	600b      	streq	r3, [r1, #0]
 8006940:	6053      	strne	r3, [r2, #4]
 8006942:	4630      	mov	r0, r6
 8006944:	f000 f85a 	bl	80069fc <__malloc_unlock>
 8006948:	f104 000b 	add.w	r0, r4, #11
 800694c:	1d23      	adds	r3, r4, #4
 800694e:	f020 0007 	bic.w	r0, r0, #7
 8006952:	1ac2      	subs	r2, r0, r3
 8006954:	d0cc      	beq.n	80068f0 <_malloc_r+0x20>
 8006956:	1a1b      	subs	r3, r3, r0
 8006958:	50a3      	str	r3, [r4, r2]
 800695a:	e7c9      	b.n	80068f0 <_malloc_r+0x20>
 800695c:	4622      	mov	r2, r4
 800695e:	6864      	ldr	r4, [r4, #4]
 8006960:	e7cc      	b.n	80068fc <_malloc_r+0x2c>
 8006962:	1cc4      	adds	r4, r0, #3
 8006964:	f024 0403 	bic.w	r4, r4, #3
 8006968:	42a0      	cmp	r0, r4
 800696a:	d0e3      	beq.n	8006934 <_malloc_r+0x64>
 800696c:	1a21      	subs	r1, r4, r0
 800696e:	4630      	mov	r0, r6
 8006970:	f000 f82e 	bl	80069d0 <_sbrk_r>
 8006974:	3001      	adds	r0, #1
 8006976:	d1dd      	bne.n	8006934 <_malloc_r+0x64>
 8006978:	e7cf      	b.n	800691a <_malloc_r+0x4a>
 800697a:	bf00      	nop
 800697c:	200011d4 	.word	0x200011d4
 8006980:	200011d8 	.word	0x200011d8

08006984 <_realloc_r>:
 8006984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006986:	4607      	mov	r7, r0
 8006988:	4614      	mov	r4, r2
 800698a:	460e      	mov	r6, r1
 800698c:	b921      	cbnz	r1, 8006998 <_realloc_r+0x14>
 800698e:	4611      	mov	r1, r2
 8006990:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006994:	f7ff bf9c 	b.w	80068d0 <_malloc_r>
 8006998:	b922      	cbnz	r2, 80069a4 <_realloc_r+0x20>
 800699a:	f7ff ff4d 	bl	8006838 <_free_r>
 800699e:	4625      	mov	r5, r4
 80069a0:	4628      	mov	r0, r5
 80069a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069a4:	f000 f830 	bl	8006a08 <_malloc_usable_size_r>
 80069a8:	42a0      	cmp	r0, r4
 80069aa:	d20f      	bcs.n	80069cc <_realloc_r+0x48>
 80069ac:	4621      	mov	r1, r4
 80069ae:	4638      	mov	r0, r7
 80069b0:	f7ff ff8e 	bl	80068d0 <_malloc_r>
 80069b4:	4605      	mov	r5, r0
 80069b6:	2800      	cmp	r0, #0
 80069b8:	d0f2      	beq.n	80069a0 <_realloc_r+0x1c>
 80069ba:	4631      	mov	r1, r6
 80069bc:	4622      	mov	r2, r4
 80069be:	f7ff ff13 	bl	80067e8 <memcpy>
 80069c2:	4631      	mov	r1, r6
 80069c4:	4638      	mov	r0, r7
 80069c6:	f7ff ff37 	bl	8006838 <_free_r>
 80069ca:	e7e9      	b.n	80069a0 <_realloc_r+0x1c>
 80069cc:	4635      	mov	r5, r6
 80069ce:	e7e7      	b.n	80069a0 <_realloc_r+0x1c>

080069d0 <_sbrk_r>:
 80069d0:	b538      	push	{r3, r4, r5, lr}
 80069d2:	2300      	movs	r3, #0
 80069d4:	4d05      	ldr	r5, [pc, #20]	; (80069ec <_sbrk_r+0x1c>)
 80069d6:	4604      	mov	r4, r0
 80069d8:	4608      	mov	r0, r1
 80069da:	602b      	str	r3, [r5, #0]
 80069dc:	f7fc faae 	bl	8002f3c <_sbrk>
 80069e0:	1c43      	adds	r3, r0, #1
 80069e2:	d102      	bne.n	80069ea <_sbrk_r+0x1a>
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	b103      	cbz	r3, 80069ea <_sbrk_r+0x1a>
 80069e8:	6023      	str	r3, [r4, #0]
 80069ea:	bd38      	pop	{r3, r4, r5, pc}
 80069ec:	20004320 	.word	0x20004320

080069f0 <__malloc_lock>:
 80069f0:	4801      	ldr	r0, [pc, #4]	; (80069f8 <__malloc_lock+0x8>)
 80069f2:	f000 b811 	b.w	8006a18 <__retarget_lock_acquire_recursive>
 80069f6:	bf00      	nop
 80069f8:	20004328 	.word	0x20004328

080069fc <__malloc_unlock>:
 80069fc:	4801      	ldr	r0, [pc, #4]	; (8006a04 <__malloc_unlock+0x8>)
 80069fe:	f000 b80c 	b.w	8006a1a <__retarget_lock_release_recursive>
 8006a02:	bf00      	nop
 8006a04:	20004328 	.word	0x20004328

08006a08 <_malloc_usable_size_r>:
 8006a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a0c:	1f18      	subs	r0, r3, #4
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	bfbc      	itt	lt
 8006a12:	580b      	ldrlt	r3, [r1, r0]
 8006a14:	18c0      	addlt	r0, r0, r3
 8006a16:	4770      	bx	lr

08006a18 <__retarget_lock_acquire_recursive>:
 8006a18:	4770      	bx	lr

08006a1a <__retarget_lock_release_recursive>:
 8006a1a:	4770      	bx	lr

08006a1c <_init>:
 8006a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1e:	bf00      	nop
 8006a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a22:	bc08      	pop	{r3}
 8006a24:	469e      	mov	lr, r3
 8006a26:	4770      	bx	lr

08006a28 <_fini>:
 8006a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2a:	bf00      	nop
 8006a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a2e:	bc08      	pop	{r3}
 8006a30:	469e      	mov	lr, r3
 8006a32:	4770      	bx	lr
