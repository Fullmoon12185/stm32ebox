
eBoxK2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  0800a9d0  0800a9d0  0001a9d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae0c  0800ae0c  000201c8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ae0c  0800ae0c  000201c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ae0c  0800ae0c  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae0c  0800ae0c  0001ae0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae10  0800ae10  0001ae10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  0800ae14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d00  200001c8  0800afdc  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ec8  0800afdc  00022ec8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020fa4  00000000  00000000  000201f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004a99  00000000  00000000  00041195  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001890  00000000  00000000  00045c30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001678  00000000  00000000  000474c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a90e  00000000  00000000  00048b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018011  00000000  00000000  00063446  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000802b5  00000000  00000000  0007b457  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fb70c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067bc  00000000  00000000  000fb788  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001c8 	.word	0x200001c8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a9b8 	.word	0x0800a9b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001cc 	.word	0x200001cc
 8000148:	0800a9b8 	.word	0x0800a9b8

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__gedf2>:
 80008e8:	f04f 3cff 	mov.w	ip, #4294967295
 80008ec:	e006      	b.n	80008fc <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__ledf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	e002      	b.n	80008fc <__cmpdf2+0x4>
 80008f6:	bf00      	nop

080008f8 <__cmpdf2>:
 80008f8:	f04f 0c01 	mov.w	ip, #1
 80008fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000912:	d01b      	beq.n	800094c <__cmpdf2+0x54>
 8000914:	b001      	add	sp, #4
 8000916:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091a:	bf0c      	ite	eq
 800091c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000920:	ea91 0f03 	teqne	r1, r3
 8000924:	bf02      	ittt	eq
 8000926:	ea90 0f02 	teqeq	r0, r2
 800092a:	2000      	moveq	r0, #0
 800092c:	4770      	bxeq	lr
 800092e:	f110 0f00 	cmn.w	r0, #0
 8000932:	ea91 0f03 	teq	r1, r3
 8000936:	bf58      	it	pl
 8000938:	4299      	cmppl	r1, r3
 800093a:	bf08      	it	eq
 800093c:	4290      	cmpeq	r0, r2
 800093e:	bf2c      	ite	cs
 8000940:	17d8      	asrcs	r0, r3, #31
 8000942:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000946:	f040 0001 	orr.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	d102      	bne.n	800095c <__cmpdf2+0x64>
 8000956:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095a:	d107      	bne.n	800096c <__cmpdf2+0x74>
 800095c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d1d6      	bne.n	8000914 <__cmpdf2+0x1c>
 8000966:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096a:	d0d3      	beq.n	8000914 <__cmpdf2+0x1c>
 800096c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_cdrcmple>:
 8000974:	4684      	mov	ip, r0
 8000976:	4610      	mov	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	468c      	mov	ip, r1
 800097c:	4619      	mov	r1, r3
 800097e:	4663      	mov	r3, ip
 8000980:	e000      	b.n	8000984 <__aeabi_cdcmpeq>
 8000982:	bf00      	nop

08000984 <__aeabi_cdcmpeq>:
 8000984:	b501      	push	{r0, lr}
 8000986:	f7ff ffb7 	bl	80008f8 <__cmpdf2>
 800098a:	2800      	cmp	r0, #0
 800098c:	bf48      	it	mi
 800098e:	f110 0f00 	cmnmi.w	r0, #0
 8000992:	bd01      	pop	{r0, pc}

08000994 <__aeabi_dcmpeq>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff fff4 	bl	8000984 <__aeabi_cdcmpeq>
 800099c:	bf0c      	ite	eq
 800099e:	2001      	moveq	r0, #1
 80009a0:	2000      	movne	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmplt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffea 	bl	8000984 <__aeabi_cdcmpeq>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmple>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffe0 	bl	8000984 <__aeabi_cdcmpeq>
 80009c4:	bf94      	ite	ls
 80009c6:	2001      	movls	r0, #1
 80009c8:	2000      	movhi	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmpge>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffce 	bl	8000974 <__aeabi_cdrcmple>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpgt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffc4 	bl	8000974 <__aeabi_cdrcmple>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpun>:
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d102      	bne.n	8000a08 <__aeabi_dcmpun+0x10>
 8000a02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a06:	d10a      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__aeabi_dcmpun+0x20>
 8000a12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a16:	d102      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a18:	f04f 0000 	mov.w	r0, #0
 8000a1c:	4770      	bx	lr
 8000a1e:	f04f 0001 	mov.w	r0, #1
 8000a22:	4770      	bx	lr

08000a24 <__aeabi_d2uiz>:
 8000a24:	004a      	lsls	r2, r1, #1
 8000a26:	d211      	bcs.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a2c:	d211      	bcs.n	8000a52 <__aeabi_d2uiz+0x2e>
 8000a2e:	d50d      	bpl.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d40e      	bmi.n	8000a58 <__aeabi_d2uiz+0x34>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d102      	bne.n	8000a5e <__aeabi_d2uiz+0x3a>
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	4770      	bx	lr
 8000a5e:	f04f 0000 	mov.w	r0, #0
 8000a62:	4770      	bx	lr

08000a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_Init+0x28>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <HAL_Init+0x28>)
 8000a6e:	f043 0310 	orr.w	r3, r3, #16
 8000a72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a74:	2003      	movs	r0, #3
 8000a76:	f000 fd5f 	bl	8001538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f000 f808 	bl	8000a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a80:	f008 fe98 	bl	80097b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40022000 	.word	0x40022000

08000a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_InitTick+0x54>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_InitTick+0x58>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 fd85 	bl	80015be <HAL_SYSTICK_Config>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e00e      	b.n	8000adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	d80a      	bhi.n	8000ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	f000 fd3f 	bl	800154e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad0:	4a06      	ldr	r2, [pc, #24]	; (8000aec <HAL_InitTick+0x5c>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e000      	b.n	8000adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	2000015c 	.word	0x2000015c
 8000ae8:	20000004 	.word	0x20000004
 8000aec:	20000000 	.word	0x20000000

08000af0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_IncTick+0x1c>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HAL_IncTick+0x20>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a03      	ldr	r2, [pc, #12]	; (8000b10 <HAL_IncTick+0x20>)
 8000b02:	6013      	str	r3, [r2, #0]
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	20000004 	.word	0x20000004
 8000b10:	20000234 	.word	0x20000234

08000b14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return uwTick;
 8000b18:	4b02      	ldr	r3, [pc, #8]	; (8000b24 <HAL_GetTick+0x10>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	20000234 	.word	0x20000234

08000b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b30:	f7ff fff0 	bl	8000b14 <HAL_GetTick>
 8000b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b40:	d005      	beq.n	8000b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_Delay+0x40>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b4e:	bf00      	nop
 8000b50:	f7ff ffe0 	bl	8000b14 <HAL_GetTick>
 8000b54:	4602      	mov	r2, r0
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d8f7      	bhi.n	8000b50 <HAL_Delay+0x28>
  {
  }
}
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000004 	.word	0x20000004

08000b6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b74:	2300      	movs	r3, #0
 8000b76:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e0be      	b.n	8000d0c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d109      	bne.n	8000bb0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f008 ff9c 	bl	8009ae8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f000 fb33 	bl	800121c <ADC_ConversionStop_Disable>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bbe:	f003 0310 	and.w	r3, r3, #16
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f040 8099 	bne.w	8000cfa <HAL_ADC_Init+0x18e>
 8000bc8:	7dfb      	ldrb	r3, [r7, #23]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f040 8095 	bne.w	8000cfa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bd8:	f023 0302 	bic.w	r3, r3, #2
 8000bdc:	f043 0202 	orr.w	r2, r3, #2
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	7b1b      	ldrb	r3, [r3, #12]
 8000bf2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bf4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c04:	d003      	beq.n	8000c0e <HAL_ADC_Init+0xa2>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d102      	bne.n	8000c14 <HAL_ADC_Init+0xa8>
 8000c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c12:	e000      	b.n	8000c16 <HAL_ADC_Init+0xaa>
 8000c14:	2300      	movs	r3, #0
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	7d1b      	ldrb	r3, [r3, #20]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d119      	bne.n	8000c58 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	7b1b      	ldrb	r3, [r3, #12]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d109      	bne.n	8000c40 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	035a      	lsls	r2, r3, #13
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	e00b      	b.n	8000c58 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c44:	f043 0220 	orr.w	r2, r3, #32
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c50:	f043 0201 	orr.w	r2, r3, #1
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	689a      	ldr	r2, [r3, #8]
 8000c72:	4b28      	ldr	r3, [pc, #160]	; (8000d14 <HAL_ADC_Init+0x1a8>)
 8000c74:	4013      	ands	r3, r2
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	6812      	ldr	r2, [r2, #0]
 8000c7a:	68b9      	ldr	r1, [r7, #8]
 8000c7c:	430b      	orrs	r3, r1
 8000c7e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c88:	d003      	beq.n	8000c92 <HAL_ADC_Init+0x126>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d104      	bne.n	8000c9c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	691b      	ldr	r3, [r3, #16]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	051b      	lsls	r3, r3, #20
 8000c9a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	430a      	orrs	r2, r1
 8000cae:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	689a      	ldr	r2, [r3, #8]
 8000cb6:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <HAL_ADC_Init+0x1ac>)
 8000cb8:	4013      	ands	r3, r2
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d10b      	bne.n	8000cd8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cca:	f023 0303 	bic.w	r3, r3, #3
 8000cce:	f043 0201 	orr.w	r2, r3, #1
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cd6:	e018      	b.n	8000d0a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cdc:	f023 0312 	bic.w	r3, r3, #18
 8000ce0:	f043 0210 	orr.w	r2, r3, #16
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cec:	f043 0201 	orr.w	r2, r3, #1
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cf8:	e007      	b.n	8000d0a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfe:	f043 0210 	orr.w	r2, r3, #16
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	ffe1f7fd 	.word	0xffe1f7fd
 8000d18:	ff1f0efe 	.word	0xff1f0efe

08000d1c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a64      	ldr	r2, [pc, #400]	; (8000ec4 <HAL_ADC_Start_DMA+0x1a8>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d004      	beq.n	8000d40 <HAL_ADC_Start_DMA+0x24>
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a63      	ldr	r2, [pc, #396]	; (8000ec8 <HAL_ADC_Start_DMA+0x1ac>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d106      	bne.n	8000d4e <HAL_ADC_Start_DMA+0x32>
 8000d40:	4b60      	ldr	r3, [pc, #384]	; (8000ec4 <HAL_ADC_Start_DMA+0x1a8>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f040 80b3 	bne.w	8000eb4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d101      	bne.n	8000d5c <HAL_ADC_Start_DMA+0x40>
 8000d58:	2302      	movs	r3, #2
 8000d5a:	e0ae      	b.n	8000eba <HAL_ADC_Start_DMA+0x19e>
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2201      	movs	r2, #1
 8000d60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	f000 fa07 	bl	8001178 <ADC_Enable>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000d6e:	7dfb      	ldrb	r3, [r7, #23]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f040 809a 	bne.w	8000eaa <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d7e:	f023 0301 	bic.w	r3, r3, #1
 8000d82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a4e      	ldr	r2, [pc, #312]	; (8000ec8 <HAL_ADC_Start_DMA+0x1ac>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d105      	bne.n	8000da0 <HAL_ADC_Start_DMA+0x84>
 8000d94:	4b4b      	ldr	r3, [pc, #300]	; (8000ec4 <HAL_ADC_Start_DMA+0x1a8>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d115      	bne.n	8000dcc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d026      	beq.n	8000e08 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dbe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dc2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dca:	e01d      	b.n	8000e08 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a39      	ldr	r2, [pc, #228]	; (8000ec4 <HAL_ADC_Start_DMA+0x1a8>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d004      	beq.n	8000dec <HAL_ADC_Start_DMA+0xd0>
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a38      	ldr	r2, [pc, #224]	; (8000ec8 <HAL_ADC_Start_DMA+0x1ac>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d10d      	bne.n	8000e08 <HAL_ADC_Start_DMA+0xec>
 8000dec:	4b35      	ldr	r3, [pc, #212]	; (8000ec4 <HAL_ADC_Start_DMA+0x1a8>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d007      	beq.n	8000e08 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e00:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d006      	beq.n	8000e22 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e18:	f023 0206 	bic.w	r2, r3, #6
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e20:	e002      	b.n	8000e28 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2200      	movs	r2, #0
 8000e26:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	6a1b      	ldr	r3, [r3, #32]
 8000e34:	4a25      	ldr	r2, [pc, #148]	; (8000ecc <HAL_ADC_Start_DMA+0x1b0>)
 8000e36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	6a1b      	ldr	r3, [r3, #32]
 8000e3c:	4a24      	ldr	r2, [pc, #144]	; (8000ed0 <HAL_ADC_Start_DMA+0x1b4>)
 8000e3e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	6a1b      	ldr	r3, [r3, #32]
 8000e44:	4a23      	ldr	r2, [pc, #140]	; (8000ed4 <HAL_ADC_Start_DMA+0x1b8>)
 8000e46:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f06f 0202 	mvn.w	r2, #2
 8000e50:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e60:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	6a18      	ldr	r0, [r3, #32]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	334c      	adds	r3, #76	; 0x4c
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f000 fc0b 	bl	800168c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e80:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e84:	d108      	bne.n	8000e98 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e94:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000e96:	e00f      	b.n	8000eb8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000ea6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000ea8:	e006      	b.n	8000eb8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000eb2:	e001      	b.n	8000eb8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40012400 	.word	0x40012400
 8000ec8:	40012800 	.word	0x40012800
 8000ecc:	08001291 	.word	0x08001291
 8000ed0:	0800130d 	.word	0x0800130d
 8000ed4:	08001329 	.word	0x08001329

08000ed8 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d101      	bne.n	8000ef2 <HAL_ADC_Stop_DMA+0x1a>
 8000eee:	2302      	movs	r3, #2
 8000ef0:	e033      	b.n	8000f5a <HAL_ADC_Stop_DMA+0x82>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 f98e 	bl	800121c <ADC_ConversionStop_Disable>
 8000f00:	4603      	mov	r3, r0
 8000f02:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d122      	bne.n	8000f50 <HAL_ADC_Stop_DMA+0x78>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f18:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6a1b      	ldr	r3, [r3, #32]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 fc13 	bl	800174a <HAL_DMA_Abort>
 8000f24:	4603      	mov	r3, r0
 8000f26:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10a      	bne.n	8000f44 <HAL_ADC_Stop_DMA+0x6c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f36:	f023 0301 	bic.w	r3, r3, #1
 8000f3a:	f043 0201 	orr.w	r2, r3, #1
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	629a      	str	r2, [r3, #40]	; 0x28
 8000f42:	e005      	b.n	8000f50 <HAL_ADC_Stop_DMA+0x78>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr

08000f74 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
	...

08000f88 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d101      	bne.n	8000fa8 <HAL_ADC_ConfigChannel+0x20>
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	e0dc      	b.n	8001162 <HAL_ADC_ConfigChannel+0x1da>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2201      	movs	r2, #1
 8000fac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b06      	cmp	r3, #6
 8000fb6:	d81c      	bhi.n	8000ff2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	3b05      	subs	r3, #5
 8000fca:	221f      	movs	r2, #31
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	4019      	ands	r1, r3
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	6818      	ldr	r0, [r3, #0]
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685a      	ldr	r2, [r3, #4]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	3b05      	subs	r3, #5
 8000fe4:	fa00 f203 	lsl.w	r2, r0, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	430a      	orrs	r2, r1
 8000fee:	635a      	str	r2, [r3, #52]	; 0x34
 8000ff0:	e03c      	b.n	800106c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2b0c      	cmp	r3, #12
 8000ff8:	d81c      	bhi.n	8001034 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	4613      	mov	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	3b23      	subs	r3, #35	; 0x23
 800100c:	221f      	movs	r2, #31
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	4019      	ands	r1, r3
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	6818      	ldr	r0, [r3, #0]
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	4613      	mov	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	3b23      	subs	r3, #35	; 0x23
 8001026:	fa00 f203 	lsl.w	r2, r0, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	430a      	orrs	r2, r1
 8001030:	631a      	str	r2, [r3, #48]	; 0x30
 8001032:	e01b      	b.n	800106c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	3b41      	subs	r3, #65	; 0x41
 8001046:	221f      	movs	r2, #31
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	4019      	ands	r1, r3
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	3b41      	subs	r3, #65	; 0x41
 8001060:	fa00 f203 	lsl.w	r2, r0, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	430a      	orrs	r2, r1
 800106a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b09      	cmp	r3, #9
 8001072:	d91c      	bls.n	80010ae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	68d9      	ldr	r1, [r3, #12]
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	4613      	mov	r3, r2
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	4413      	add	r3, r2
 8001084:	3b1e      	subs	r3, #30
 8001086:	2207      	movs	r2, #7
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	4019      	ands	r1, r3
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	6898      	ldr	r0, [r3, #8]
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4613      	mov	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4413      	add	r3, r2
 800109e:	3b1e      	subs	r3, #30
 80010a0:	fa00 f203 	lsl.w	r2, r0, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	430a      	orrs	r2, r1
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	e019      	b.n	80010e2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6919      	ldr	r1, [r3, #16]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	2207      	movs	r2, #7
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	4019      	ands	r1, r3
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	6898      	ldr	r0, [r3, #8]
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4613      	mov	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4413      	add	r3, r2
 80010d6:	fa00 f203 	lsl.w	r2, r0, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	430a      	orrs	r2, r1
 80010e0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b10      	cmp	r3, #16
 80010e8:	d003      	beq.n	80010f2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010ee:	2b11      	cmp	r3, #17
 80010f0:	d132      	bne.n	8001158 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a1d      	ldr	r2, [pc, #116]	; (800116c <HAL_ADC_ConfigChannel+0x1e4>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d125      	bne.n	8001148 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d126      	bne.n	8001158 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001118:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b10      	cmp	r3, #16
 8001120:	d11a      	bne.n	8001158 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <HAL_ADC_ConfigChannel+0x1e8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a13      	ldr	r2, [pc, #76]	; (8001174 <HAL_ADC_ConfigChannel+0x1ec>)
 8001128:	fba2 2303 	umull	r2, r3, r2, r3
 800112c:	0c9a      	lsrs	r2, r3, #18
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001138:	e002      	b.n	8001140 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	3b01      	subs	r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f9      	bne.n	800113a <HAL_ADC_ConfigChannel+0x1b2>
 8001146:	e007      	b.n	8001158 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114c:	f043 0220 	orr.w	r2, r3, #32
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001160:	7bfb      	ldrb	r3, [r7, #15]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	40012400 	.word	0x40012400
 8001170:	2000015c 	.word	0x2000015c
 8001174:	431bde83 	.word	0x431bde83

08001178 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001184:	2300      	movs	r3, #0
 8001186:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b01      	cmp	r3, #1
 8001194:	d039      	beq.n	800120a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f042 0201 	orr.w	r2, r2, #1
 80011a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011a6:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <ADC_Enable+0x9c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a1b      	ldr	r2, [pc, #108]	; (8001218 <ADC_Enable+0xa0>)
 80011ac:	fba2 2303 	umull	r2, r3, r2, r3
 80011b0:	0c9b      	lsrs	r3, r3, #18
 80011b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80011b4:	e002      	b.n	80011bc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	3b01      	subs	r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1f9      	bne.n	80011b6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011c2:	f7ff fca7 	bl	8000b14 <HAL_GetTick>
 80011c6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80011c8:	e018      	b.n	80011fc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80011ca:	f7ff fca3 	bl	8000b14 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d911      	bls.n	80011fc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011dc:	f043 0210 	orr.w	r2, r3, #16
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e8:	f043 0201 	orr.w	r2, r3, #1
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e007      	b.n	800120c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b01      	cmp	r3, #1
 8001208:	d1df      	bne.n	80011ca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	2000015c 	.word	0x2000015c
 8001218:	431bde83 	.word	0x431bde83

0800121c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b01      	cmp	r3, #1
 8001234:	d127      	bne.n	8001286 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f022 0201 	bic.w	r2, r2, #1
 8001244:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001246:	f7ff fc65 	bl	8000b14 <HAL_GetTick>
 800124a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800124c:	e014      	b.n	8001278 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800124e:	f7ff fc61 	bl	8000b14 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d90d      	bls.n	8001278 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001260:	f043 0210 	orr.w	r2, r3, #16
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126c:	f043 0201 	orr.w	r2, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e007      	b.n	8001288 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b01      	cmp	r3, #1
 8001284:	d0e3      	beq.n	800124e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d127      	bne.n	80012fa <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80012c0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80012c4:	d115      	bne.n	80012f2 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d111      	bne.n	80012f2 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d105      	bne.n	80012f2 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ea:	f043 0201 	orr.w	r2, r3, #1
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f003 feea 	bl	80050cc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80012f8:	e004      	b.n	8001304 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	4798      	blx	r3
}
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f7ff fe21 	bl	8000f62 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001334:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001346:	f043 0204 	orr.w	r2, r3, #4
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f7ff fe10 	bl	8000f74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <__NVIC_SetPriorityGrouping+0x44>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001378:	4013      	ands	r3, r2
 800137a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800138c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800138e:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	60d3      	str	r3, [r2, #12]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <__NVIC_GetPriorityGrouping+0x18>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	0a1b      	lsrs	r3, r3, #8
 80013ae:	f003 0307 	and.w	r3, r3, #7
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	db0b      	blt.n	80013ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	f003 021f 	and.w	r2, r3, #31
 80013d8:	4906      	ldr	r1, [pc, #24]	; (80013f4 <__NVIC_EnableIRQ+0x34>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	095b      	lsrs	r3, r3, #5
 80013e0:	2001      	movs	r0, #1
 80013e2:	fa00 f202 	lsl.w	r2, r0, r2
 80013e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	e000e100 	.word	0xe000e100

080013f8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	2b00      	cmp	r3, #0
 8001408:	db10      	blt.n	800142c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	f003 021f 	and.w	r2, r3, #31
 8001410:	4909      	ldr	r1, [pc, #36]	; (8001438 <__NVIC_DisableIRQ+0x40>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	2001      	movs	r0, #1
 800141a:	fa00 f202 	lsl.w	r2, r0, r2
 800141e:	3320      	adds	r3, #32
 8001420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001424:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001428:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000e100 	.word	0xe000e100

0800143c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	db0a      	blt.n	8001466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	490c      	ldr	r1, [pc, #48]	; (8001488 <__NVIC_SetPriority+0x4c>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	0112      	lsls	r2, r2, #4
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	440b      	add	r3, r1
 8001460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001464:	e00a      	b.n	800147c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4908      	ldr	r1, [pc, #32]	; (800148c <__NVIC_SetPriority+0x50>)
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	3b04      	subs	r3, #4
 8001474:	0112      	lsls	r2, r2, #4
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	440b      	add	r3, r1
 800147a:	761a      	strb	r2, [r3, #24]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000e100 	.word	0xe000e100
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	; 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f1c3 0307 	rsb	r3, r3, #7
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	bf28      	it	cs
 80014ae:	2304      	movcs	r3, #4
 80014b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3304      	adds	r3, #4
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d902      	bls.n	80014c0 <NVIC_EncodePriority+0x30>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3b03      	subs	r3, #3
 80014be:	e000      	b.n	80014c2 <NVIC_EncodePriority+0x32>
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	401a      	ands	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43d9      	mvns	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	4313      	orrs	r3, r2
         );
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001504:	d301      	bcc.n	800150a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001506:	2301      	movs	r3, #1
 8001508:	e00f      	b.n	800152a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <SysTick_Config+0x40>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001512:	210f      	movs	r1, #15
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	f7ff ff90 	bl	800143c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <SysTick_Config+0x40>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001522:	4b04      	ldr	r3, [pc, #16]	; (8001534 <SysTick_Config+0x40>)
 8001524:	2207      	movs	r2, #7
 8001526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	e000e010 	.word	0xe000e010

08001538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ff0b 	bl	800135c <__NVIC_SetPriorityGrouping>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001560:	f7ff ff20 	bl	80013a4 <__NVIC_GetPriorityGrouping>
 8001564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	68b9      	ldr	r1, [r7, #8]
 800156a:	6978      	ldr	r0, [r7, #20]
 800156c:	f7ff ff90 	bl	8001490 <NVIC_EncodePriority>
 8001570:	4602      	mov	r2, r0
 8001572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff5f 	bl	800143c <__NVIC_SetPriority>
}
 800157e:	bf00      	nop
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff13 	bl	80013c0 <__NVIC_EnableIRQ>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80015ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff21 	bl	80013f8 <__NVIC_DisableIRQ>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ff94 	bl	80014f4 <SysTick_Config>
 80015cc:	4603      	mov	r3, r0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e043      	b.n	8001676 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b22      	ldr	r3, [pc, #136]	; (8001680 <HAL_DMA_Init+0xa8>)
 80015f6:	4413      	add	r3, r2
 80015f8:	4a22      	ldr	r2, [pc, #136]	; (8001684 <HAL_DMA_Init+0xac>)
 80015fa:	fba2 2303 	umull	r2, r3, r2, r3
 80015fe:	091b      	lsrs	r3, r3, #4
 8001600:	009a      	lsls	r2, r3, #2
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a1f      	ldr	r2, [pc, #124]	; (8001688 <HAL_DMA_Init+0xb0>)
 800160a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2202      	movs	r2, #2
 8001610:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001622:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001626:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001630:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800163c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001648:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	4313      	orrs	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	bffdfff8 	.word	0xbffdfff8
 8001684:	cccccccd 	.word	0xcccccccd
 8001688:	40020000 	.word	0x40020000

0800168c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d101      	bne.n	80016ac <HAL_DMA_Start_IT+0x20>
 80016a8:	2302      	movs	r3, #2
 80016aa:	e04a      	b.n	8001742 <HAL_DMA_Start_IT+0xb6>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d13a      	bne.n	8001734 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2202      	movs	r2, #2
 80016c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2200      	movs	r2, #0
 80016ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0201 	bic.w	r2, r2, #1
 80016da:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 f9e8 	bl	8001ab8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d008      	beq.n	8001702 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 020e 	orr.w	r2, r2, #14
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	e00f      	b.n	8001722 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0204 	bic.w	r2, r2, #4
 8001710:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f042 020a 	orr.w	r2, r2, #10
 8001720:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f042 0201 	orr.w	r2, r2, #1
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	e005      	b.n	8001740 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800173c:	2302      	movs	r3, #2
 800173e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001740:	7dfb      	ldrb	r3, [r7, #23]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800174a:	b480      	push	{r7}
 800174c:	b085      	sub	sp, #20
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800175c:	2b02      	cmp	r3, #2
 800175e:	d008      	beq.n	8001772 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2204      	movs	r2, #4
 8001764:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e020      	b.n	80017b4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 020e 	bic.w	r2, r2, #14
 8001780:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0201 	bic.w	r2, r2, #1
 8001790:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800179a:	2101      	movs	r1, #1
 800179c:	fa01 f202 	lsl.w	r2, r1, r2
 80017a0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
	...

080017c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d005      	beq.n	80017e2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2204      	movs	r2, #4
 80017da:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	73fb      	strb	r3, [r7, #15]
 80017e0:	e051      	b.n	8001886 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 020e 	bic.w	r2, r2, #14
 80017f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 0201 	bic.w	r2, r2, #1
 8001800:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a22      	ldr	r2, [pc, #136]	; (8001890 <HAL_DMA_Abort_IT+0xd0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d029      	beq.n	8001860 <HAL_DMA_Abort_IT+0xa0>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a20      	ldr	r2, [pc, #128]	; (8001894 <HAL_DMA_Abort_IT+0xd4>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d022      	beq.n	800185c <HAL_DMA_Abort_IT+0x9c>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a1f      	ldr	r2, [pc, #124]	; (8001898 <HAL_DMA_Abort_IT+0xd8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d01a      	beq.n	8001856 <HAL_DMA_Abort_IT+0x96>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a1d      	ldr	r2, [pc, #116]	; (800189c <HAL_DMA_Abort_IT+0xdc>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d012      	beq.n	8001850 <HAL_DMA_Abort_IT+0x90>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a1c      	ldr	r2, [pc, #112]	; (80018a0 <HAL_DMA_Abort_IT+0xe0>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d00a      	beq.n	800184a <HAL_DMA_Abort_IT+0x8a>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a1a      	ldr	r2, [pc, #104]	; (80018a4 <HAL_DMA_Abort_IT+0xe4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d102      	bne.n	8001844 <HAL_DMA_Abort_IT+0x84>
 800183e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001842:	e00e      	b.n	8001862 <HAL_DMA_Abort_IT+0xa2>
 8001844:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001848:	e00b      	b.n	8001862 <HAL_DMA_Abort_IT+0xa2>
 800184a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800184e:	e008      	b.n	8001862 <HAL_DMA_Abort_IT+0xa2>
 8001850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001854:	e005      	b.n	8001862 <HAL_DMA_Abort_IT+0xa2>
 8001856:	f44f 7380 	mov.w	r3, #256	; 0x100
 800185a:	e002      	b.n	8001862 <HAL_DMA_Abort_IT+0xa2>
 800185c:	2310      	movs	r3, #16
 800185e:	e000      	b.n	8001862 <HAL_DMA_Abort_IT+0xa2>
 8001860:	2301      	movs	r3, #1
 8001862:	4a11      	ldr	r2, [pc, #68]	; (80018a8 <HAL_DMA_Abort_IT+0xe8>)
 8001864:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	4798      	blx	r3
    } 
  }
  return status;
 8001886:	7bfb      	ldrb	r3, [r7, #15]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40020008 	.word	0x40020008
 8001894:	4002001c 	.word	0x4002001c
 8001898:	40020030 	.word	0x40020030
 800189c:	40020044 	.word	0x40020044
 80018a0:	40020058 	.word	0x40020058
 80018a4:	4002006c 	.word	0x4002006c
 80018a8:	40020000 	.word	0x40020000

080018ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	2204      	movs	r2, #4
 80018ca:	409a      	lsls	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d04f      	beq.n	8001974 <HAL_DMA_IRQHandler+0xc8>
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d04a      	beq.n	8001974 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0320 	and.w	r3, r3, #32
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d107      	bne.n	80018fc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0204 	bic.w	r2, r2, #4
 80018fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a66      	ldr	r2, [pc, #408]	; (8001a9c <HAL_DMA_IRQHandler+0x1f0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d029      	beq.n	800195a <HAL_DMA_IRQHandler+0xae>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a65      	ldr	r2, [pc, #404]	; (8001aa0 <HAL_DMA_IRQHandler+0x1f4>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d022      	beq.n	8001956 <HAL_DMA_IRQHandler+0xaa>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a63      	ldr	r2, [pc, #396]	; (8001aa4 <HAL_DMA_IRQHandler+0x1f8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d01a      	beq.n	8001950 <HAL_DMA_IRQHandler+0xa4>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a62      	ldr	r2, [pc, #392]	; (8001aa8 <HAL_DMA_IRQHandler+0x1fc>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d012      	beq.n	800194a <HAL_DMA_IRQHandler+0x9e>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a60      	ldr	r2, [pc, #384]	; (8001aac <HAL_DMA_IRQHandler+0x200>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d00a      	beq.n	8001944 <HAL_DMA_IRQHandler+0x98>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a5f      	ldr	r2, [pc, #380]	; (8001ab0 <HAL_DMA_IRQHandler+0x204>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d102      	bne.n	800193e <HAL_DMA_IRQHandler+0x92>
 8001938:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800193c:	e00e      	b.n	800195c <HAL_DMA_IRQHandler+0xb0>
 800193e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001942:	e00b      	b.n	800195c <HAL_DMA_IRQHandler+0xb0>
 8001944:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001948:	e008      	b.n	800195c <HAL_DMA_IRQHandler+0xb0>
 800194a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800194e:	e005      	b.n	800195c <HAL_DMA_IRQHandler+0xb0>
 8001950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001954:	e002      	b.n	800195c <HAL_DMA_IRQHandler+0xb0>
 8001956:	2340      	movs	r3, #64	; 0x40
 8001958:	e000      	b.n	800195c <HAL_DMA_IRQHandler+0xb0>
 800195a:	2304      	movs	r3, #4
 800195c:	4a55      	ldr	r2, [pc, #340]	; (8001ab4 <HAL_DMA_IRQHandler+0x208>)
 800195e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 8094 	beq.w	8001a92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001972:	e08e      	b.n	8001a92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	2202      	movs	r2, #2
 800197a:	409a      	lsls	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4013      	ands	r3, r2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d056      	beq.n	8001a32 <HAL_DMA_IRQHandler+0x186>
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d051      	beq.n	8001a32 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0320 	and.w	r3, r3, #32
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10b      	bne.n	80019b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 020a 	bic.w	r2, r2, #10
 80019aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a38      	ldr	r2, [pc, #224]	; (8001a9c <HAL_DMA_IRQHandler+0x1f0>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d029      	beq.n	8001a12 <HAL_DMA_IRQHandler+0x166>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a37      	ldr	r2, [pc, #220]	; (8001aa0 <HAL_DMA_IRQHandler+0x1f4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d022      	beq.n	8001a0e <HAL_DMA_IRQHandler+0x162>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a35      	ldr	r2, [pc, #212]	; (8001aa4 <HAL_DMA_IRQHandler+0x1f8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d01a      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x15c>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a34      	ldr	r2, [pc, #208]	; (8001aa8 <HAL_DMA_IRQHandler+0x1fc>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d012      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x156>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a32      	ldr	r2, [pc, #200]	; (8001aac <HAL_DMA_IRQHandler+0x200>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d00a      	beq.n	80019fc <HAL_DMA_IRQHandler+0x150>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a31      	ldr	r2, [pc, #196]	; (8001ab0 <HAL_DMA_IRQHandler+0x204>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d102      	bne.n	80019f6 <HAL_DMA_IRQHandler+0x14a>
 80019f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019f4:	e00e      	b.n	8001a14 <HAL_DMA_IRQHandler+0x168>
 80019f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019fa:	e00b      	b.n	8001a14 <HAL_DMA_IRQHandler+0x168>
 80019fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a00:	e008      	b.n	8001a14 <HAL_DMA_IRQHandler+0x168>
 8001a02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a06:	e005      	b.n	8001a14 <HAL_DMA_IRQHandler+0x168>
 8001a08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a0c:	e002      	b.n	8001a14 <HAL_DMA_IRQHandler+0x168>
 8001a0e:	2320      	movs	r3, #32
 8001a10:	e000      	b.n	8001a14 <HAL_DMA_IRQHandler+0x168>
 8001a12:	2302      	movs	r3, #2
 8001a14:	4a27      	ldr	r2, [pc, #156]	; (8001ab4 <HAL_DMA_IRQHandler+0x208>)
 8001a16:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d034      	beq.n	8001a92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a30:	e02f      	b.n	8001a92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	2208      	movs	r2, #8
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d028      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x1e8>
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d023      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 020e 	bic.w	r2, r2, #14
 8001a5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a64:	2101      	movs	r1, #1
 8001a66:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d004      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	4798      	blx	r3
    }
  }
  return;
 8001a92:	bf00      	nop
 8001a94:	bf00      	nop
}
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40020008 	.word	0x40020008
 8001aa0:	4002001c 	.word	0x4002001c
 8001aa4:	40020030 	.word	0x40020030
 8001aa8:	40020044 	.word	0x40020044
 8001aac:	40020058 	.word	0x40020058
 8001ab0:	4002006c 	.word	0x4002006c
 8001ab4:	40020000 	.word	0x40020000

08001ab8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ace:	2101      	movs	r1, #1
 8001ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b10      	cmp	r3, #16
 8001ae4:	d108      	bne.n	8001af8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001af6:	e007      	b.n	8001b08 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68ba      	ldr	r2, [r7, #8]
 8001afe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	60da      	str	r2, [r3, #12]
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr
	...

08001b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b08b      	sub	sp, #44	; 0x2c
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b22:	2300      	movs	r3, #0
 8001b24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b26:	e127      	b.n	8001d78 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b28:	2201      	movs	r2, #1
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	69fa      	ldr	r2, [r7, #28]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	f040 8116 	bne.w	8001d72 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b12      	cmp	r3, #18
 8001b4c:	d034      	beq.n	8001bb8 <HAL_GPIO_Init+0xa4>
 8001b4e:	2b12      	cmp	r3, #18
 8001b50:	d80d      	bhi.n	8001b6e <HAL_GPIO_Init+0x5a>
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d02b      	beq.n	8001bae <HAL_GPIO_Init+0x9a>
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d804      	bhi.n	8001b64 <HAL_GPIO_Init+0x50>
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d031      	beq.n	8001bc2 <HAL_GPIO_Init+0xae>
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d01c      	beq.n	8001b9c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b62:	e048      	b.n	8001bf6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d043      	beq.n	8001bf0 <HAL_GPIO_Init+0xdc>
 8001b68:	2b11      	cmp	r3, #17
 8001b6a:	d01b      	beq.n	8001ba4 <HAL_GPIO_Init+0x90>
          break;
 8001b6c:	e043      	b.n	8001bf6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b6e:	4a89      	ldr	r2, [pc, #548]	; (8001d94 <HAL_GPIO_Init+0x280>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d026      	beq.n	8001bc2 <HAL_GPIO_Init+0xae>
 8001b74:	4a87      	ldr	r2, [pc, #540]	; (8001d94 <HAL_GPIO_Init+0x280>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d806      	bhi.n	8001b88 <HAL_GPIO_Init+0x74>
 8001b7a:	4a87      	ldr	r2, [pc, #540]	; (8001d98 <HAL_GPIO_Init+0x284>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d020      	beq.n	8001bc2 <HAL_GPIO_Init+0xae>
 8001b80:	4a86      	ldr	r2, [pc, #536]	; (8001d9c <HAL_GPIO_Init+0x288>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d01d      	beq.n	8001bc2 <HAL_GPIO_Init+0xae>
          break;
 8001b86:	e036      	b.n	8001bf6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b88:	4a85      	ldr	r2, [pc, #532]	; (8001da0 <HAL_GPIO_Init+0x28c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d019      	beq.n	8001bc2 <HAL_GPIO_Init+0xae>
 8001b8e:	4a85      	ldr	r2, [pc, #532]	; (8001da4 <HAL_GPIO_Init+0x290>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d016      	beq.n	8001bc2 <HAL_GPIO_Init+0xae>
 8001b94:	4a84      	ldr	r2, [pc, #528]	; (8001da8 <HAL_GPIO_Init+0x294>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d013      	beq.n	8001bc2 <HAL_GPIO_Init+0xae>
          break;
 8001b9a:	e02c      	b.n	8001bf6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	623b      	str	r3, [r7, #32]
          break;
 8001ba2:	e028      	b.n	8001bf6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	623b      	str	r3, [r7, #32]
          break;
 8001bac:	e023      	b.n	8001bf6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	3308      	adds	r3, #8
 8001bb4:	623b      	str	r3, [r7, #32]
          break;
 8001bb6:	e01e      	b.n	8001bf6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	330c      	adds	r3, #12
 8001bbe:	623b      	str	r3, [r7, #32]
          break;
 8001bc0:	e019      	b.n	8001bf6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d102      	bne.n	8001bd0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bca:	2304      	movs	r3, #4
 8001bcc:	623b      	str	r3, [r7, #32]
          break;
 8001bce:	e012      	b.n	8001bf6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d105      	bne.n	8001be4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bd8:	2308      	movs	r3, #8
 8001bda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69fa      	ldr	r2, [r7, #28]
 8001be0:	611a      	str	r2, [r3, #16]
          break;
 8001be2:	e008      	b.n	8001bf6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001be4:	2308      	movs	r3, #8
 8001be6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	615a      	str	r2, [r3, #20]
          break;
 8001bee:	e002      	b.n	8001bf6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	623b      	str	r3, [r7, #32]
          break;
 8001bf4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	2bff      	cmp	r3, #255	; 0xff
 8001bfa:	d801      	bhi.n	8001c00 <HAL_GPIO_Init+0xec>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	e001      	b.n	8001c04 <HAL_GPIO_Init+0xf0>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3304      	adds	r3, #4
 8001c04:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	2bff      	cmp	r3, #255	; 0xff
 8001c0a:	d802      	bhi.n	8001c12 <HAL_GPIO_Init+0xfe>
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	e002      	b.n	8001c18 <HAL_GPIO_Init+0x104>
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	3b08      	subs	r3, #8
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	210f      	movs	r1, #15
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	fa01 f303 	lsl.w	r3, r1, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	401a      	ands	r2, r3
 8001c2a:	6a39      	ldr	r1, [r7, #32]
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c32:	431a      	orrs	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 8096 	beq.w	8001d72 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c46:	4b59      	ldr	r3, [pc, #356]	; (8001dac <HAL_GPIO_Init+0x298>)
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	4a58      	ldr	r2, [pc, #352]	; (8001dac <HAL_GPIO_Init+0x298>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6193      	str	r3, [r2, #24]
 8001c52:	4b56      	ldr	r3, [pc, #344]	; (8001dac <HAL_GPIO_Init+0x298>)
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c5e:	4a54      	ldr	r2, [pc, #336]	; (8001db0 <HAL_GPIO_Init+0x29c>)
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	089b      	lsrs	r3, r3, #2
 8001c64:	3302      	adds	r3, #2
 8001c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	220f      	movs	r2, #15
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a4b      	ldr	r2, [pc, #300]	; (8001db4 <HAL_GPIO_Init+0x2a0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d013      	beq.n	8001cb2 <HAL_GPIO_Init+0x19e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a4a      	ldr	r2, [pc, #296]	; (8001db8 <HAL_GPIO_Init+0x2a4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d00d      	beq.n	8001cae <HAL_GPIO_Init+0x19a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a49      	ldr	r2, [pc, #292]	; (8001dbc <HAL_GPIO_Init+0x2a8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d007      	beq.n	8001caa <HAL_GPIO_Init+0x196>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a48      	ldr	r2, [pc, #288]	; (8001dc0 <HAL_GPIO_Init+0x2ac>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d101      	bne.n	8001ca6 <HAL_GPIO_Init+0x192>
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e006      	b.n	8001cb4 <HAL_GPIO_Init+0x1a0>
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	e004      	b.n	8001cb4 <HAL_GPIO_Init+0x1a0>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e002      	b.n	8001cb4 <HAL_GPIO_Init+0x1a0>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_GPIO_Init+0x1a0>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb6:	f002 0203 	and.w	r2, r2, #3
 8001cba:	0092      	lsls	r2, r2, #2
 8001cbc:	4093      	lsls	r3, r2
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cc4:	493a      	ldr	r1, [pc, #232]	; (8001db0 <HAL_GPIO_Init+0x29c>)
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d006      	beq.n	8001cec <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cde:	4b39      	ldr	r3, [pc, #228]	; (8001dc4 <HAL_GPIO_Init+0x2b0>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	4938      	ldr	r1, [pc, #224]	; (8001dc4 <HAL_GPIO_Init+0x2b0>)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	600b      	str	r3, [r1, #0]
 8001cea:	e006      	b.n	8001cfa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cec:	4b35      	ldr	r3, [pc, #212]	; (8001dc4 <HAL_GPIO_Init+0x2b0>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	4933      	ldr	r1, [pc, #204]	; (8001dc4 <HAL_GPIO_Init+0x2b0>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d006      	beq.n	8001d14 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d06:	4b2f      	ldr	r3, [pc, #188]	; (8001dc4 <HAL_GPIO_Init+0x2b0>)
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	492e      	ldr	r1, [pc, #184]	; (8001dc4 <HAL_GPIO_Init+0x2b0>)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	604b      	str	r3, [r1, #4]
 8001d12:	e006      	b.n	8001d22 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d14:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <HAL_GPIO_Init+0x2b0>)
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	4929      	ldr	r1, [pc, #164]	; (8001dc4 <HAL_GPIO_Init+0x2b0>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d006      	beq.n	8001d3c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d2e:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <HAL_GPIO_Init+0x2b0>)
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	4924      	ldr	r1, [pc, #144]	; (8001dc4 <HAL_GPIO_Init+0x2b0>)
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	608b      	str	r3, [r1, #8]
 8001d3a:	e006      	b.n	8001d4a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d3c:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <HAL_GPIO_Init+0x2b0>)
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	491f      	ldr	r1, [pc, #124]	; (8001dc4 <HAL_GPIO_Init+0x2b0>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d006      	beq.n	8001d64 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d56:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <HAL_GPIO_Init+0x2b0>)
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	491a      	ldr	r1, [pc, #104]	; (8001dc4 <HAL_GPIO_Init+0x2b0>)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	60cb      	str	r3, [r1, #12]
 8001d62:	e006      	b.n	8001d72 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d64:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <HAL_GPIO_Init+0x2b0>)
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	4915      	ldr	r1, [pc, #84]	; (8001dc4 <HAL_GPIO_Init+0x2b0>)
 8001d6e:	4013      	ands	r3, r2
 8001d70:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	3301      	adds	r3, #1
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f47f aed0 	bne.w	8001b28 <HAL_GPIO_Init+0x14>
  }
}
 8001d88:	bf00      	nop
 8001d8a:	372c      	adds	r7, #44	; 0x2c
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	10210000 	.word	0x10210000
 8001d98:	10110000 	.word	0x10110000
 8001d9c:	10120000 	.word	0x10120000
 8001da0:	10310000 	.word	0x10310000
 8001da4:	10320000 	.word	0x10320000
 8001da8:	10220000 	.word	0x10220000
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40010000 	.word	0x40010000
 8001db4:	40010800 	.word	0x40010800
 8001db8:	40010c00 	.word	0x40010c00
 8001dbc:	40011000 	.word	0x40011000
 8001dc0:	40011400 	.word	0x40011400
 8001dc4:	40010400 	.word	0x40010400

08001dc8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b089      	sub	sp, #36	; 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001dd6:	e09a      	b.n	8001f0e <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001dd8:	2201      	movs	r2, #1
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 808d 	beq.w	8001f08 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001dee:	4a4e      	ldr	r2, [pc, #312]	; (8001f28 <HAL_GPIO_DeInit+0x160>)
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	3302      	adds	r3, #2
 8001df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfa:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	220f      	movs	r2, #15
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a46      	ldr	r2, [pc, #280]	; (8001f2c <HAL_GPIO_DeInit+0x164>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d013      	beq.n	8001e40 <HAL_GPIO_DeInit+0x78>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a45      	ldr	r2, [pc, #276]	; (8001f30 <HAL_GPIO_DeInit+0x168>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d00d      	beq.n	8001e3c <HAL_GPIO_DeInit+0x74>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a44      	ldr	r2, [pc, #272]	; (8001f34 <HAL_GPIO_DeInit+0x16c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d007      	beq.n	8001e38 <HAL_GPIO_DeInit+0x70>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a43      	ldr	r2, [pc, #268]	; (8001f38 <HAL_GPIO_DeInit+0x170>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d101      	bne.n	8001e34 <HAL_GPIO_DeInit+0x6c>
 8001e30:	2303      	movs	r3, #3
 8001e32:	e006      	b.n	8001e42 <HAL_GPIO_DeInit+0x7a>
 8001e34:	2304      	movs	r3, #4
 8001e36:	e004      	b.n	8001e42 <HAL_GPIO_DeInit+0x7a>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e002      	b.n	8001e42 <HAL_GPIO_DeInit+0x7a>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <HAL_GPIO_DeInit+0x7a>
 8001e40:	2300      	movs	r3, #0
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	f002 0203 	and.w	r2, r2, #3
 8001e48:	0092      	lsls	r2, r2, #2
 8001e4a:	4093      	lsls	r3, r2
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d132      	bne.n	8001eb8 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001e62:	4a31      	ldr	r2, [pc, #196]	; (8001f28 <HAL_GPIO_DeInit+0x160>)
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	089b      	lsrs	r3, r3, #2
 8001e68:	3302      	adds	r3, #2
 8001e6a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	43da      	mvns	r2, r3
 8001e72:	482d      	ldr	r0, [pc, #180]	; (8001f28 <HAL_GPIO_DeInit+0x160>)
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	089b      	lsrs	r3, r3, #2
 8001e78:	400a      	ands	r2, r1
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001e80:	4b2e      	ldr	r3, [pc, #184]	; (8001f3c <HAL_GPIO_DeInit+0x174>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	492c      	ldr	r1, [pc, #176]	; (8001f3c <HAL_GPIO_DeInit+0x174>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001e8e:	4b2b      	ldr	r3, [pc, #172]	; (8001f3c <HAL_GPIO_DeInit+0x174>)
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	4929      	ldr	r1, [pc, #164]	; (8001f3c <HAL_GPIO_DeInit+0x174>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001e9c:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <HAL_GPIO_DeInit+0x174>)
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	4925      	ldr	r1, [pc, #148]	; (8001f3c <HAL_GPIO_DeInit+0x174>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001eaa:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <HAL_GPIO_DeInit+0x174>)
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	4922      	ldr	r1, [pc, #136]	; (8001f3c <HAL_GPIO_DeInit+0x174>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	2bff      	cmp	r3, #255	; 0xff
 8001ebc:	d801      	bhi.n	8001ec2 <HAL_GPIO_DeInit+0xfa>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	e001      	b.n	8001ec6 <HAL_GPIO_DeInit+0xfe>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	2bff      	cmp	r3, #255	; 0xff
 8001ecc:	d802      	bhi.n	8001ed4 <HAL_GPIO_DeInit+0x10c>
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	e002      	b.n	8001eda <HAL_GPIO_DeInit+0x112>
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	3b08      	subs	r3, #8
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	210f      	movs	r1, #15
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	401a      	ands	r2, r3
 8001eec:	2104      	movs	r1, #4
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	401a      	ands	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	fa22 f303 	lsr.w	r3, r2, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f47f af5e 	bne.w	8001dd8 <HAL_GPIO_DeInit+0x10>
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	3724      	adds	r7, #36	; 0x24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40010000 	.word	0x40010000
 8001f2c:	40010800 	.word	0x40010800
 8001f30:	40010c00 	.word	0x40010c00
 8001f34:	40011000 	.word	0x40011000
 8001f38:	40011400 	.word	0x40011400
 8001f3c:	40010400 	.word	0x40010400

08001f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	807b      	strh	r3, [r7, #2]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f50:	787b      	ldrb	r3, [r7, #1]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f56:	887a      	ldrh	r2, [r7, #2]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f5c:	e003      	b.n	8001f66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f5e:	887b      	ldrh	r3, [r7, #2]
 8001f60:	041a      	lsls	r2, r3, #16
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	611a      	str	r2, [r3, #16]
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f7c:	695a      	ldr	r2, [r3, #20]
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	4013      	ands	r3, r2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d006      	beq.n	8001f94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f86:	4a05      	ldr	r2, [pc, #20]	; (8001f9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f88:	88fb      	ldrh	r3, [r7, #6]
 8001f8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f8c:	88fb      	ldrh	r3, [r7, #6]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f003 f9a0 	bl	80052d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40010400 	.word	0x40010400

08001fa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e10f      	b.n	80021d2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d106      	bne.n	8001fcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f007 fe94 	bl	8009cf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2224      	movs	r2, #36	; 0x24
 8001fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0201 	bic.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fe4:	f001 fb0e 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 8001fe8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4a7b      	ldr	r2, [pc, #492]	; (80021dc <HAL_I2C_Init+0x23c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d807      	bhi.n	8002004 <HAL_I2C_Init+0x64>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4a7a      	ldr	r2, [pc, #488]	; (80021e0 <HAL_I2C_Init+0x240>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	bf94      	ite	ls
 8001ffc:	2301      	movls	r3, #1
 8001ffe:	2300      	movhi	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	e006      	b.n	8002012 <HAL_I2C_Init+0x72>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4a77      	ldr	r2, [pc, #476]	; (80021e4 <HAL_I2C_Init+0x244>)
 8002008:	4293      	cmp	r3, r2
 800200a:	bf94      	ite	ls
 800200c:	2301      	movls	r3, #1
 800200e:	2300      	movhi	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e0db      	b.n	80021d2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4a72      	ldr	r2, [pc, #456]	; (80021e8 <HAL_I2C_Init+0x248>)
 800201e:	fba2 2303 	umull	r2, r3, r2, r3
 8002022:	0c9b      	lsrs	r3, r3, #18
 8002024:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	430a      	orrs	r2, r1
 8002038:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	4a64      	ldr	r2, [pc, #400]	; (80021dc <HAL_I2C_Init+0x23c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d802      	bhi.n	8002054 <HAL_I2C_Init+0xb4>
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	3301      	adds	r3, #1
 8002052:	e009      	b.n	8002068 <HAL_I2C_Init+0xc8>
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800205a:	fb02 f303 	mul.w	r3, r2, r3
 800205e:	4a63      	ldr	r2, [pc, #396]	; (80021ec <HAL_I2C_Init+0x24c>)
 8002060:	fba2 2303 	umull	r2, r3, r2, r3
 8002064:	099b      	lsrs	r3, r3, #6
 8002066:	3301      	adds	r3, #1
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	430b      	orrs	r3, r1
 800206e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800207a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4956      	ldr	r1, [pc, #344]	; (80021dc <HAL_I2C_Init+0x23c>)
 8002084:	428b      	cmp	r3, r1
 8002086:	d80d      	bhi.n	80020a4 <HAL_I2C_Init+0x104>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	1e59      	subs	r1, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	fbb1 f3f3 	udiv	r3, r1, r3
 8002096:	3301      	adds	r3, #1
 8002098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800209c:	2b04      	cmp	r3, #4
 800209e:	bf38      	it	cc
 80020a0:	2304      	movcc	r3, #4
 80020a2:	e04f      	b.n	8002144 <HAL_I2C_Init+0x1a4>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d111      	bne.n	80020d0 <HAL_I2C_Init+0x130>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1e58      	subs	r0, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	440b      	add	r3, r1
 80020ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80020be:	3301      	adds	r3, #1
 80020c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf0c      	ite	eq
 80020c8:	2301      	moveq	r3, #1
 80020ca:	2300      	movne	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	e012      	b.n	80020f6 <HAL_I2C_Init+0x156>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1e58      	subs	r0, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6859      	ldr	r1, [r3, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	0099      	lsls	r1, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e6:	3301      	adds	r3, #1
 80020e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	bf0c      	ite	eq
 80020f0:	2301      	moveq	r3, #1
 80020f2:	2300      	movne	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_I2C_Init+0x15e>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e022      	b.n	8002144 <HAL_I2C_Init+0x1a4>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10e      	bne.n	8002124 <HAL_I2C_Init+0x184>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1e58      	subs	r0, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6859      	ldr	r1, [r3, #4]
 800210e:	460b      	mov	r3, r1
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	440b      	add	r3, r1
 8002114:	fbb0 f3f3 	udiv	r3, r0, r3
 8002118:	3301      	adds	r3, #1
 800211a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800211e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002122:	e00f      	b.n	8002144 <HAL_I2C_Init+0x1a4>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1e58      	subs	r0, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6859      	ldr	r1, [r3, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	0099      	lsls	r1, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	fbb0 f3f3 	udiv	r3, r0, r3
 800213a:	3301      	adds	r3, #1
 800213c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002140:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	6809      	ldr	r1, [r1, #0]
 8002148:	4313      	orrs	r3, r2
 800214a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69da      	ldr	r2, [r3, #28]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002172:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6911      	ldr	r1, [r2, #16]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68d2      	ldr	r2, [r2, #12]
 800217e:	4311      	orrs	r1, r2
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	430b      	orrs	r3, r1
 8002186:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0201 	orr.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2220      	movs	r2, #32
 80021be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	000186a0 	.word	0x000186a0
 80021e0:	001e847f 	.word	0x001e847f
 80021e4:	003d08ff 	.word	0x003d08ff
 80021e8:	431bde83 	.word	0x431bde83
 80021ec:	10624dd3 	.word	0x10624dd3

080021f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	461a      	mov	r2, r3
 80021fc:	460b      	mov	r3, r1
 80021fe:	817b      	strh	r3, [r7, #10]
 8002200:	4613      	mov	r3, r2
 8002202:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002204:	f7fe fc86 	bl	8000b14 <HAL_GetTick>
 8002208:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b20      	cmp	r3, #32
 8002214:	f040 80e0 	bne.w	80023d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	2319      	movs	r3, #25
 800221e:	2201      	movs	r2, #1
 8002220:	4970      	ldr	r1, [pc, #448]	; (80023e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 fc3c 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800222e:	2302      	movs	r3, #2
 8002230:	e0d3      	b.n	80023da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002238:	2b01      	cmp	r3, #1
 800223a:	d101      	bne.n	8002240 <HAL_I2C_Master_Transmit+0x50>
 800223c:	2302      	movs	r3, #2
 800223e:	e0cc      	b.n	80023da <HAL_I2C_Master_Transmit+0x1ea>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b01      	cmp	r3, #1
 8002254:	d007      	beq.n	8002266 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0201 	orr.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002274:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2221      	movs	r2, #33	; 0x21
 800227a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2210      	movs	r2, #16
 8002282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	893a      	ldrh	r2, [r7, #8]
 8002296:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4a50      	ldr	r2, [pc, #320]	; (80023e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80022a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022a8:	8979      	ldrh	r1, [r7, #10]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	6a3a      	ldr	r2, [r7, #32]
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 faca 	bl	8002848 <I2C_MasterRequestWrite>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e08d      	b.n	80023da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022d4:	e066      	b.n	80023a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	6a39      	ldr	r1, [r7, #32]
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 fcb6 	bl	8002c4c <I2C_WaitOnTXEFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00d      	beq.n	8002302 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d107      	bne.n	80022fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e06b      	b.n	80023da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	781a      	ldrb	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231c:	b29b      	uxth	r3, r3
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b04      	cmp	r3, #4
 800233e:	d11b      	bne.n	8002378 <HAL_I2C_Master_Transmit+0x188>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002344:	2b00      	cmp	r3, #0
 8002346:	d017      	beq.n	8002378 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	781a      	ldrb	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002362:	b29b      	uxth	r3, r3
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	6a39      	ldr	r1, [r7, #32]
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 fca6 	bl	8002cce <I2C_WaitOnBTFFlagUntilTimeout>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00d      	beq.n	80023a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	2b04      	cmp	r3, #4
 800238e:	d107      	bne.n	80023a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e01a      	b.n	80023da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d194      	bne.n	80022d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	e000      	b.n	80023da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023d8:	2302      	movs	r3, #2
  }
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	00100002 	.word	0x00100002
 80023e8:	ffff0000 	.word	0xffff0000

080023ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08c      	sub	sp, #48	; 0x30
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	461a      	mov	r2, r3
 80023f8:	460b      	mov	r3, r1
 80023fa:	817b      	strh	r3, [r7, #10]
 80023fc:	4613      	mov	r3, r2
 80023fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002400:	f7fe fb88 	bl	8000b14 <HAL_GetTick>
 8002404:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b20      	cmp	r3, #32
 8002410:	f040 8213 	bne.w	800283a <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	2319      	movs	r3, #25
 800241a:	2201      	movs	r2, #1
 800241c:	497e      	ldr	r1, [pc, #504]	; (8002618 <HAL_I2C_Master_Receive+0x22c>)
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 fb3e 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800242a:	2302      	movs	r3, #2
 800242c:	e206      	b.n	800283c <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_I2C_Master_Receive+0x50>
 8002438:	2302      	movs	r3, #2
 800243a:	e1ff      	b.n	800283c <HAL_I2C_Master_Receive+0x450>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b01      	cmp	r3, #1
 8002450:	d007      	beq.n	8002462 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 0201 	orr.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002470:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2222      	movs	r2, #34	; 0x22
 8002476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2210      	movs	r2, #16
 800247e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	893a      	ldrh	r2, [r7, #8]
 8002492:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4a5e      	ldr	r2, [pc, #376]	; (800261c <HAL_I2C_Master_Receive+0x230>)
 80024a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024a4:	8979      	ldrh	r1, [r7, #10]
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 fa42 	bl	8002934 <I2C_MasterRequestRead>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e1c0      	b.n	800283c <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d113      	bne.n	80024ea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c2:	2300      	movs	r3, #0
 80024c4:	623b      	str	r3, [r7, #32]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	623b      	str	r3, [r7, #32]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	623b      	str	r3, [r7, #32]
 80024d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	e194      	b.n	8002814 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d11d      	bne.n	800252e <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002500:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002502:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002504:	2300      	movs	r3, #0
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	61fb      	str	r3, [r7, #28]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	61fb      	str	r3, [r7, #28]
 8002518:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002528:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800252a:	b662      	cpsie	i
 800252c:	e172      	b.n	8002814 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002532:	2b02      	cmp	r3, #2
 8002534:	d11d      	bne.n	8002572 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002544:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002546:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002548:	2300      	movs	r3, #0
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	61bb      	str	r3, [r7, #24]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800256c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800256e:	b662      	cpsie	i
 8002570:	e150      	b.n	8002814 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002580:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002598:	e13c      	b.n	8002814 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259e:	2b03      	cmp	r3, #3
 80025a0:	f200 80f5 	bhi.w	800278e <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d123      	bne.n	80025f4 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 fbcd 	bl	8002d50 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e13d      	b.n	800283c <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691a      	ldr	r2, [r3, #16]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025f2:	e10f      	b.n	8002814 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d150      	bne.n	800269e <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002602:	2200      	movs	r2, #0
 8002604:	4906      	ldr	r1, [pc, #24]	; (8002620 <HAL_I2C_Master_Receive+0x234>)
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 fa4a 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d008      	beq.n	8002624 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e112      	b.n	800283c <HAL_I2C_Master_Receive+0x450>
 8002616:	bf00      	nop
 8002618:	00100002 	.word	0x00100002
 800261c:	ffff0000 	.word	0xffff0000
 8002620:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002624:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002634:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002652:	3b01      	subs	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265e:	b29b      	uxth	r3, r3
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002668:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002692:	b29b      	uxth	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800269c:	e0ba      	b.n	8002814 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a4:	2200      	movs	r2, #0
 80026a6:	4967      	ldr	r1, [pc, #412]	; (8002844 <HAL_I2C_Master_Receive+0x458>)
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 f9f9 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0c1      	b.n	800283c <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026c8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002702:	2200      	movs	r2, #0
 8002704:	494f      	ldr	r1, [pc, #316]	; (8002844 <HAL_I2C_Master_Receive+0x458>)
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f9ca 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e092      	b.n	800283c <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002724:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274e:	b29b      	uxth	r3, r3
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002758:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800278c:	e042      	b.n	8002814 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800278e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002790:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 fadc 	bl	8002d50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e04c      	b.n	800283c <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d118      	bne.n	8002814 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280a:	b29b      	uxth	r3, r3
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002818:	2b00      	cmp	r3, #0
 800281a:	f47f aebe 	bne.w	800259a <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e000      	b.n	800283c <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 800283a:	2302      	movs	r3, #2
  }
}
 800283c:	4618      	mov	r0, r3
 800283e:	3728      	adds	r7, #40	; 0x28
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	00010004 	.word	0x00010004

08002848 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af02      	add	r7, sp, #8
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	460b      	mov	r3, r1
 8002856:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2b08      	cmp	r3, #8
 8002862:	d006      	beq.n	8002872 <I2C_MasterRequestWrite+0x2a>
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d003      	beq.n	8002872 <I2C_MasterRequestWrite+0x2a>
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002870:	d108      	bne.n	8002884 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	e00b      	b.n	800289c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	2b12      	cmp	r3, #18
 800288a:	d107      	bne.n	800289c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800289a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 f8f9 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e035      	b.n	8002924 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028c0:	d108      	bne.n	80028d4 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028c2:	897b      	ldrh	r3, [r7, #10]
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	461a      	mov	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028d0:	611a      	str	r2, [r3, #16]
 80028d2:	e01b      	b.n	800290c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028d4:	897b      	ldrh	r3, [r7, #10]
 80028d6:	11db      	asrs	r3, r3, #7
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	f003 0306 	and.w	r3, r3, #6
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f063 030f 	orn	r3, r3, #15
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	490e      	ldr	r1, [pc, #56]	; (800292c <I2C_MasterRequestWrite+0xe4>)
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 f92b 	bl	8002b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e010      	b.n	8002924 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002902:	897b      	ldrh	r3, [r7, #10]
 8002904:	b2da      	uxtb	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	4907      	ldr	r1, [pc, #28]	; (8002930 <I2C_MasterRequestWrite+0xe8>)
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f91b 	bl	8002b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	00010008 	.word	0x00010008
 8002930:	00010002 	.word	0x00010002

08002934 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af02      	add	r7, sp, #8
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	460b      	mov	r3, r1
 8002942:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002958:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2b08      	cmp	r3, #8
 800295e:	d006      	beq.n	800296e <I2C_MasterRequestRead+0x3a>
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d003      	beq.n	800296e <I2C_MasterRequestRead+0x3a>
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800296c:	d108      	bne.n	8002980 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	e00b      	b.n	8002998 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	2b11      	cmp	r3, #17
 8002986:	d107      	bne.n	8002998 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002996:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 f87b 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e06d      	b.n	8002a90 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029bc:	d108      	bne.n	80029d0 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80029be:	897b      	ldrh	r3, [r7, #10]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	611a      	str	r2, [r3, #16]
 80029ce:	e053      	b.n	8002a78 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029d0:	897b      	ldrh	r3, [r7, #10]
 80029d2:	11db      	asrs	r3, r3, #7
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	f003 0306 	and.w	r3, r3, #6
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f063 030f 	orn	r3, r3, #15
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	492a      	ldr	r1, [pc, #168]	; (8002a98 <I2C_MasterRequestRead+0x164>)
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 f8ad 	bl	8002b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e048      	b.n	8002a90 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029fe:	897b      	ldrh	r3, [r7, #10]
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	4923      	ldr	r1, [pc, #140]	; (8002a9c <I2C_MasterRequestRead+0x168>)
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 f89d 	bl	8002b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e038      	b.n	8002a90 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a42:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 f825 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e017      	b.n	8002a90 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002a60:	897b      	ldrh	r3, [r7, #10]
 8002a62:	11db      	asrs	r3, r3, #7
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	f003 0306 	and.w	r3, r3, #6
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	f063 030e 	orn	r3, r3, #14
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	4907      	ldr	r1, [pc, #28]	; (8002a9c <I2C_MasterRequestRead+0x168>)
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f865 	bl	8002b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	00010008 	.word	0x00010008
 8002a9c:	00010002 	.word	0x00010002

08002aa0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	4613      	mov	r3, r2
 8002aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ab0:	e025      	b.n	8002afe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab8:	d021      	beq.n	8002afe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aba:	f7fe f82b 	bl	8000b14 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d302      	bcc.n	8002ad0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d116      	bne.n	8002afe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f043 0220 	orr.w	r2, r3, #32
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e023      	b.n	8002b46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	0c1b      	lsrs	r3, r3, #16
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d10d      	bne.n	8002b24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4013      	ands	r3, r2
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	bf0c      	ite	eq
 8002b1a:	2301      	moveq	r3, #1
 8002b1c:	2300      	movne	r3, #0
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	461a      	mov	r2, r3
 8002b22:	e00c      	b.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	bf0c      	ite	eq
 8002b36:	2301      	moveq	r3, #1
 8002b38:	2300      	movne	r3, #0
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d0b6      	beq.n	8002ab2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b084      	sub	sp, #16
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
 8002b5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b5c:	e051      	b.n	8002c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b6c:	d123      	bne.n	8002bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f043 0204 	orr.w	r2, r3, #4
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e046      	b.n	8002c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbc:	d021      	beq.n	8002c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bbe:	f7fd ffa9 	bl	8000b14 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d302      	bcc.n	8002bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d116      	bne.n	8002c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f043 0220 	orr.w	r2, r3, #32
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e020      	b.n	8002c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	0c1b      	lsrs	r3, r3, #16
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d10c      	bne.n	8002c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	43da      	mvns	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4013      	ands	r3, r2
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	bf14      	ite	ne
 8002c1e:	2301      	movne	r3, #1
 8002c20:	2300      	moveq	r3, #0
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	e00b      	b.n	8002c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	43da      	mvns	r2, r3
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	4013      	ands	r3, r2
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bf14      	ite	ne
 8002c38:	2301      	movne	r3, #1
 8002c3a:	2300      	moveq	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d18d      	bne.n	8002b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c58:	e02d      	b.n	8002cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f8ce 	bl	8002dfc <I2C_IsAcknowledgeFailed>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e02d      	b.n	8002cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c70:	d021      	beq.n	8002cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c72:	f7fd ff4f 	bl	8000b14 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d302      	bcc.n	8002c88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d116      	bne.n	8002cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f043 0220 	orr.w	r2, r3, #32
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e007      	b.n	8002cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b80      	cmp	r3, #128	; 0x80
 8002cc2:	d1ca      	bne.n	8002c5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cda:	e02d      	b.n	8002d38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f88d 	bl	8002dfc <I2C_IsAcknowledgeFailed>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e02d      	b.n	8002d48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf2:	d021      	beq.n	8002d38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf4:	f7fd ff0e 	bl	8000b14 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d302      	bcc.n	8002d0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d116      	bne.n	8002d38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f043 0220 	orr.w	r2, r3, #32
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e007      	b.n	8002d48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d1ca      	bne.n	8002cdc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d5c:	e042      	b.n	8002de4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	2b10      	cmp	r3, #16
 8002d6a:	d119      	bne.n	8002da0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0210 	mvn.w	r2, #16
 8002d74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e029      	b.n	8002df4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da0:	f7fd feb8 	bl	8000b14 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d302      	bcc.n	8002db6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d116      	bne.n	8002de4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	f043 0220 	orr.w	r2, r3, #32
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e007      	b.n	8002df4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dee:	2b40      	cmp	r3, #64	; 0x40
 8002df0:	d1b5      	bne.n	8002d5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e12:	d11b      	bne.n	8002e4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	f043 0204 	orr.w	r2, r3, #4
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e26c      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 8087 	beq.w	8002f86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e78:	4b92      	ldr	r3, [pc, #584]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 030c 	and.w	r3, r3, #12
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d00c      	beq.n	8002e9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e84:	4b8f      	ldr	r3, [pc, #572]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 030c 	and.w	r3, r3, #12
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d112      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x5e>
 8002e90:	4b8c      	ldr	r3, [pc, #560]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e9c:	d10b      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e9e:	4b89      	ldr	r3, [pc, #548]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d06c      	beq.n	8002f84 <HAL_RCC_OscConfig+0x12c>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d168      	bne.n	8002f84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e246      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ebe:	d106      	bne.n	8002ece <HAL_RCC_OscConfig+0x76>
 8002ec0:	4b80      	ldr	r3, [pc, #512]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a7f      	ldr	r2, [pc, #508]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	e02e      	b.n	8002f2c <HAL_RCC_OscConfig+0xd4>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x98>
 8002ed6:	4b7b      	ldr	r3, [pc, #492]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a7a      	ldr	r2, [pc, #488]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	4b78      	ldr	r3, [pc, #480]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a77      	ldr	r2, [pc, #476]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e01d      	b.n	8002f2c <HAL_RCC_OscConfig+0xd4>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCC_OscConfig+0xbc>
 8002efa:	4b72      	ldr	r3, [pc, #456]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a71      	ldr	r2, [pc, #452]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	4b6f      	ldr	r3, [pc, #444]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a6e      	ldr	r2, [pc, #440]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e00b      	b.n	8002f2c <HAL_RCC_OscConfig+0xd4>
 8002f14:	4b6b      	ldr	r3, [pc, #428]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a6a      	ldr	r2, [pc, #424]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	4b68      	ldr	r3, [pc, #416]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a67      	ldr	r2, [pc, #412]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d013      	beq.n	8002f5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fd fdee 	bl	8000b14 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f3c:	f7fd fdea 	bl	8000b14 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b64      	cmp	r3, #100	; 0x64
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e1fa      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4e:	4b5d      	ldr	r3, [pc, #372]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0xe4>
 8002f5a:	e014      	b.n	8002f86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7fd fdda 	bl	8000b14 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f64:	f7fd fdd6 	bl	8000b14 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	; 0x64
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e1e6      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f76:	4b53      	ldr	r3, [pc, #332]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x10c>
 8002f82:	e000      	b.n	8002f86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d063      	beq.n	800305a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f92:	4b4c      	ldr	r3, [pc, #304]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f9e:	4b49      	ldr	r3, [pc, #292]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d11c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x18c>
 8002faa:	4b46      	ldr	r3, [pc, #280]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d116      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb6:	4b43      	ldr	r3, [pc, #268]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <HAL_RCC_OscConfig+0x176>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d001      	beq.n	8002fce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e1ba      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fce:	4b3d      	ldr	r3, [pc, #244]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4939      	ldr	r1, [pc, #228]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe2:	e03a      	b.n	800305a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d020      	beq.n	800302e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fec:	4b36      	ldr	r3, [pc, #216]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8002fee:	2201      	movs	r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff2:	f7fd fd8f 	bl	8000b14 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ffa:	f7fd fd8b 	bl	8000b14 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e19b      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300c:	4b2d      	ldr	r3, [pc, #180]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003018:	4b2a      	ldr	r3, [pc, #168]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4927      	ldr	r1, [pc, #156]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8003028:	4313      	orrs	r3, r2
 800302a:	600b      	str	r3, [r1, #0]
 800302c:	e015      	b.n	800305a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800302e:	4b26      	ldr	r3, [pc, #152]	; (80030c8 <HAL_RCC_OscConfig+0x270>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003034:	f7fd fd6e 	bl	8000b14 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303c:	f7fd fd6a 	bl	8000b14 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e17a      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800304e:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d03a      	beq.n	80030dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d019      	beq.n	80030a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800306e:	4b17      	ldr	r3, [pc, #92]	; (80030cc <HAL_RCC_OscConfig+0x274>)
 8003070:	2201      	movs	r2, #1
 8003072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003074:	f7fd fd4e 	bl	8000b14 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800307c:	f7fd fd4a 	bl	8000b14 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e15a      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800308e:	4b0d      	ldr	r3, [pc, #52]	; (80030c4 <HAL_RCC_OscConfig+0x26c>)
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800309a:	2001      	movs	r0, #1
 800309c:	f000 fada 	bl	8003654 <RCC_Delay>
 80030a0:	e01c      	b.n	80030dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a2:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <HAL_RCC_OscConfig+0x274>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a8:	f7fd fd34 	bl	8000b14 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ae:	e00f      	b.n	80030d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030b0:	f7fd fd30 	bl	8000b14 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d908      	bls.n	80030d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e140      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
 80030c2:	bf00      	nop
 80030c4:	40021000 	.word	0x40021000
 80030c8:	42420000 	.word	0x42420000
 80030cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d0:	4b9e      	ldr	r3, [pc, #632]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1e9      	bne.n	80030b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 80a6 	beq.w	8003236 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ea:	2300      	movs	r3, #0
 80030ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ee:	4b97      	ldr	r3, [pc, #604]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10d      	bne.n	8003116 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fa:	4b94      	ldr	r3, [pc, #592]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	4a93      	ldr	r2, [pc, #588]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 8003100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003104:	61d3      	str	r3, [r2, #28]
 8003106:	4b91      	ldr	r3, [pc, #580]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003112:	2301      	movs	r3, #1
 8003114:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003116:	4b8e      	ldr	r3, [pc, #568]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311e:	2b00      	cmp	r3, #0
 8003120:	d118      	bne.n	8003154 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003122:	4b8b      	ldr	r3, [pc, #556]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a8a      	ldr	r2, [pc, #552]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 8003128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312e:	f7fd fcf1 	bl	8000b14 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003136:	f7fd fced 	bl	8000b14 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b64      	cmp	r3, #100	; 0x64
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e0fd      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003148:	4b81      	ldr	r3, [pc, #516]	; (8003350 <HAL_RCC_OscConfig+0x4f8>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d106      	bne.n	800316a <HAL_RCC_OscConfig+0x312>
 800315c:	4b7b      	ldr	r3, [pc, #492]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	4a7a      	ldr	r2, [pc, #488]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	6213      	str	r3, [r2, #32]
 8003168:	e02d      	b.n	80031c6 <HAL_RCC_OscConfig+0x36e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10c      	bne.n	800318c <HAL_RCC_OscConfig+0x334>
 8003172:	4b76      	ldr	r3, [pc, #472]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	4a75      	ldr	r2, [pc, #468]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 8003178:	f023 0301 	bic.w	r3, r3, #1
 800317c:	6213      	str	r3, [r2, #32]
 800317e:	4b73      	ldr	r3, [pc, #460]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	4a72      	ldr	r2, [pc, #456]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 8003184:	f023 0304 	bic.w	r3, r3, #4
 8003188:	6213      	str	r3, [r2, #32]
 800318a:	e01c      	b.n	80031c6 <HAL_RCC_OscConfig+0x36e>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	2b05      	cmp	r3, #5
 8003192:	d10c      	bne.n	80031ae <HAL_RCC_OscConfig+0x356>
 8003194:	4b6d      	ldr	r3, [pc, #436]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	4a6c      	ldr	r2, [pc, #432]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 800319a:	f043 0304 	orr.w	r3, r3, #4
 800319e:	6213      	str	r3, [r2, #32]
 80031a0:	4b6a      	ldr	r3, [pc, #424]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	4a69      	ldr	r2, [pc, #420]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	6213      	str	r3, [r2, #32]
 80031ac:	e00b      	b.n	80031c6 <HAL_RCC_OscConfig+0x36e>
 80031ae:	4b67      	ldr	r3, [pc, #412]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	4a66      	ldr	r2, [pc, #408]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 80031b4:	f023 0301 	bic.w	r3, r3, #1
 80031b8:	6213      	str	r3, [r2, #32]
 80031ba:	4b64      	ldr	r3, [pc, #400]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	4a63      	ldr	r2, [pc, #396]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 80031c0:	f023 0304 	bic.w	r3, r3, #4
 80031c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d015      	beq.n	80031fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ce:	f7fd fca1 	bl	8000b14 <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d4:	e00a      	b.n	80031ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d6:	f7fd fc9d 	bl	8000b14 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e0ab      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ec:	4b57      	ldr	r3, [pc, #348]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0ee      	beq.n	80031d6 <HAL_RCC_OscConfig+0x37e>
 80031f8:	e014      	b.n	8003224 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031fa:	f7fd fc8b 	bl	8000b14 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003200:	e00a      	b.n	8003218 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003202:	f7fd fc87 	bl	8000b14 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003210:	4293      	cmp	r3, r2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e095      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003218:	4b4c      	ldr	r3, [pc, #304]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1ee      	bne.n	8003202 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003224:	7dfb      	ldrb	r3, [r7, #23]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d105      	bne.n	8003236 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800322a:	4b48      	ldr	r3, [pc, #288]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	4a47      	ldr	r2, [pc, #284]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 8003230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003234:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 8081 	beq.w	8003342 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003240:	4b42      	ldr	r3, [pc, #264]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 030c 	and.w	r3, r3, #12
 8003248:	2b08      	cmp	r3, #8
 800324a:	d061      	beq.n	8003310 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	2b02      	cmp	r3, #2
 8003252:	d146      	bne.n	80032e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003254:	4b3f      	ldr	r3, [pc, #252]	; (8003354 <HAL_RCC_OscConfig+0x4fc>)
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325a:	f7fd fc5b 	bl	8000b14 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003262:	f7fd fc57 	bl	8000b14 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e067      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003274:	4b35      	ldr	r3, [pc, #212]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1f0      	bne.n	8003262 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003288:	d108      	bne.n	800329c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800328a:	4b30      	ldr	r3, [pc, #192]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	492d      	ldr	r1, [pc, #180]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 8003298:	4313      	orrs	r3, r2
 800329a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800329c:	4b2b      	ldr	r3, [pc, #172]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a19      	ldr	r1, [r3, #32]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	430b      	orrs	r3, r1
 80032ae:	4927      	ldr	r1, [pc, #156]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032b4:	4b27      	ldr	r3, [pc, #156]	; (8003354 <HAL_RCC_OscConfig+0x4fc>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ba:	f7fd fc2b 	bl	8000b14 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c2:	f7fd fc27 	bl	8000b14 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e037      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032d4:	4b1d      	ldr	r3, [pc, #116]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x46a>
 80032e0:	e02f      	b.n	8003342 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e2:	4b1c      	ldr	r3, [pc, #112]	; (8003354 <HAL_RCC_OscConfig+0x4fc>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e8:	f7fd fc14 	bl	8000b14 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f0:	f7fd fc10 	bl	8000b14 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e020      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003302:	4b12      	ldr	r3, [pc, #72]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0x498>
 800330e:	e018      	b.n	8003342 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e013      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <HAL_RCC_OscConfig+0x4f4>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	429a      	cmp	r2, r3
 800332e:	d106      	bne.n	800333e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333a:	429a      	cmp	r2, r3
 800333c:	d001      	beq.n	8003342 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40021000 	.word	0x40021000
 8003350:	40007000 	.word	0x40007000
 8003354:	42420060 	.word	0x42420060

08003358 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e0d0      	b.n	800350e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800336c:	4b6a      	ldr	r3, [pc, #424]	; (8003518 <HAL_RCC_ClockConfig+0x1c0>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d910      	bls.n	800339c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337a:	4b67      	ldr	r3, [pc, #412]	; (8003518 <HAL_RCC_ClockConfig+0x1c0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 0207 	bic.w	r2, r3, #7
 8003382:	4965      	ldr	r1, [pc, #404]	; (8003518 <HAL_RCC_ClockConfig+0x1c0>)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	4313      	orrs	r3, r2
 8003388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b63      	ldr	r3, [pc, #396]	; (8003518 <HAL_RCC_ClockConfig+0x1c0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0b8      	b.n	800350e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d020      	beq.n	80033ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033b4:	4b59      	ldr	r3, [pc, #356]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	4a58      	ldr	r2, [pc, #352]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80033ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033cc:	4b53      	ldr	r3, [pc, #332]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	4a52      	ldr	r2, [pc, #328]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80033d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d8:	4b50      	ldr	r3, [pc, #320]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	494d      	ldr	r1, [pc, #308]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d040      	beq.n	8003478 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d107      	bne.n	800340e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	4b47      	ldr	r3, [pc, #284]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d115      	bne.n	8003436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e07f      	b.n	800350e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d107      	bne.n	8003426 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003416:	4b41      	ldr	r3, [pc, #260]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d109      	bne.n	8003436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e073      	b.n	800350e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003426:	4b3d      	ldr	r3, [pc, #244]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e06b      	b.n	800350e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003436:	4b39      	ldr	r3, [pc, #228]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f023 0203 	bic.w	r2, r3, #3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	4936      	ldr	r1, [pc, #216]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 8003444:	4313      	orrs	r3, r2
 8003446:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003448:	f7fd fb64 	bl	8000b14 <HAL_GetTick>
 800344c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344e:	e00a      	b.n	8003466 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003450:	f7fd fb60 	bl	8000b14 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	f241 3288 	movw	r2, #5000	; 0x1388
 800345e:	4293      	cmp	r3, r2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e053      	b.n	800350e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003466:	4b2d      	ldr	r3, [pc, #180]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f003 020c 	and.w	r2, r3, #12
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	429a      	cmp	r2, r3
 8003476:	d1eb      	bne.n	8003450 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003478:	4b27      	ldr	r3, [pc, #156]	; (8003518 <HAL_RCC_ClockConfig+0x1c0>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d210      	bcs.n	80034a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003486:	4b24      	ldr	r3, [pc, #144]	; (8003518 <HAL_RCC_ClockConfig+0x1c0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f023 0207 	bic.w	r2, r3, #7
 800348e:	4922      	ldr	r1, [pc, #136]	; (8003518 <HAL_RCC_ClockConfig+0x1c0>)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	4313      	orrs	r3, r2
 8003494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003496:	4b20      	ldr	r3, [pc, #128]	; (8003518 <HAL_RCC_ClockConfig+0x1c0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e032      	b.n	800350e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b4:	4b19      	ldr	r3, [pc, #100]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	4916      	ldr	r1, [pc, #88]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d009      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034d2:	4b12      	ldr	r3, [pc, #72]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	490e      	ldr	r1, [pc, #56]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034e6:	f000 f821 	bl	800352c <HAL_RCC_GetSysClockFreq>
 80034ea:	4601      	mov	r1, r0
 80034ec:	4b0b      	ldr	r3, [pc, #44]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	091b      	lsrs	r3, r3, #4
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <HAL_RCC_ClockConfig+0x1c8>)
 80034f8:	5cd3      	ldrb	r3, [r2, r3]
 80034fa:	fa21 f303 	lsr.w	r3, r1, r3
 80034fe:	4a09      	ldr	r2, [pc, #36]	; (8003524 <HAL_RCC_ClockConfig+0x1cc>)
 8003500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003502:	4b09      	ldr	r3, [pc, #36]	; (8003528 <HAL_RCC_ClockConfig+0x1d0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7fd fac2 	bl	8000a90 <HAL_InitTick>

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40022000 	.word	0x40022000
 800351c:	40021000 	.word	0x40021000
 8003520:	0800adbc 	.word	0x0800adbc
 8003524:	2000015c 	.word	0x2000015c
 8003528:	20000000 	.word	0x20000000

0800352c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800352c:	b490      	push	{r4, r7}
 800352e:	b08a      	sub	sp, #40	; 0x28
 8003530:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003532:	4b2a      	ldr	r3, [pc, #168]	; (80035dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003534:	1d3c      	adds	r4, r7, #4
 8003536:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800353c:	4b28      	ldr	r3, [pc, #160]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	2300      	movs	r3, #0
 8003548:	61bb      	str	r3, [r7, #24]
 800354a:	2300      	movs	r3, #0
 800354c:	627b      	str	r3, [r7, #36]	; 0x24
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003556:	4b23      	ldr	r3, [pc, #140]	; (80035e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f003 030c 	and.w	r3, r3, #12
 8003562:	2b04      	cmp	r3, #4
 8003564:	d002      	beq.n	800356c <HAL_RCC_GetSysClockFreq+0x40>
 8003566:	2b08      	cmp	r3, #8
 8003568:	d003      	beq.n	8003572 <HAL_RCC_GetSysClockFreq+0x46>
 800356a:	e02d      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800356c:	4b1e      	ldr	r3, [pc, #120]	; (80035e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800356e:	623b      	str	r3, [r7, #32]
      break;
 8003570:	e02d      	b.n	80035ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	0c9b      	lsrs	r3, r3, #18
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800357e:	4413      	add	r3, r2
 8003580:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003584:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d013      	beq.n	80035b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003590:	4b14      	ldr	r3, [pc, #80]	; (80035e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	0c5b      	lsrs	r3, r3, #17
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800359e:	4413      	add	r3, r2
 80035a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	4a0f      	ldr	r2, [pc, #60]	; (80035e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035aa:	fb02 f203 	mul.w	r2, r2, r3
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
 80035b6:	e004      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	4a0c      	ldr	r2, [pc, #48]	; (80035ec <HAL_RCC_GetSysClockFreq+0xc0>)
 80035bc:	fb02 f303 	mul.w	r3, r2, r3
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	623b      	str	r3, [r7, #32]
      break;
 80035c6:	e002      	b.n	80035ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035c8:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035ca:	623b      	str	r3, [r7, #32]
      break;
 80035cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ce:	6a3b      	ldr	r3, [r7, #32]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3728      	adds	r7, #40	; 0x28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc90      	pop	{r4, r7}
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	0800a9d0 	.word	0x0800a9d0
 80035e0:	0800a9e0 	.word	0x0800a9e0
 80035e4:	40021000 	.word	0x40021000
 80035e8:	007a1200 	.word	0x007a1200
 80035ec:	003d0900 	.word	0x003d0900

080035f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f4:	4b02      	ldr	r3, [pc, #8]	; (8003600 <HAL_RCC_GetHCLKFreq+0x10>)
 80035f6:	681b      	ldr	r3, [r3, #0]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr
 8003600:	2000015c 	.word	0x2000015c

08003604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003608:	f7ff fff2 	bl	80035f0 <HAL_RCC_GetHCLKFreq>
 800360c:	4601      	mov	r1, r0
 800360e:	4b05      	ldr	r3, [pc, #20]	; (8003624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	0a1b      	lsrs	r3, r3, #8
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	4a03      	ldr	r2, [pc, #12]	; (8003628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800361a:	5cd3      	ldrb	r3, [r2, r3]
 800361c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40021000 	.word	0x40021000
 8003628:	0800adcc 	.word	0x0800adcc

0800362c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003630:	f7ff ffde 	bl	80035f0 <HAL_RCC_GetHCLKFreq>
 8003634:	4601      	mov	r1, r0
 8003636:	4b05      	ldr	r3, [pc, #20]	; (800364c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	0adb      	lsrs	r3, r3, #11
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	4a03      	ldr	r2, [pc, #12]	; (8003650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003642:	5cd3      	ldrb	r3, [r2, r3]
 8003644:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003648:	4618      	mov	r0, r3
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40021000 	.word	0x40021000
 8003650:	0800adcc 	.word	0x0800adcc

08003654 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800365c:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <RCC_Delay+0x34>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a0a      	ldr	r2, [pc, #40]	; (800368c <RCC_Delay+0x38>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	0a5b      	lsrs	r3, r3, #9
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	fb02 f303 	mul.w	r3, r2, r3
 800366e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003670:	bf00      	nop
  }
  while (Delay --);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	1e5a      	subs	r2, r3, #1
 8003676:	60fa      	str	r2, [r7, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1f9      	bne.n	8003670 <RCC_Delay+0x1c>
}
 800367c:	bf00      	nop
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	2000015c 	.word	0x2000015c
 800368c:	10624dd3 	.word	0x10624dd3

08003690 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	613b      	str	r3, [r7, #16]
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d07d      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80036ac:	2300      	movs	r3, #0
 80036ae:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036b0:	4b4f      	ldr	r3, [pc, #316]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10d      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036bc:	4b4c      	ldr	r3, [pc, #304]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	4a4b      	ldr	r2, [pc, #300]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c6:	61d3      	str	r3, [r2, #28]
 80036c8:	4b49      	ldr	r3, [pc, #292]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d0:	60bb      	str	r3, [r7, #8]
 80036d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036d4:	2301      	movs	r3, #1
 80036d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d8:	4b46      	ldr	r3, [pc, #280]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d118      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036e4:	4b43      	ldr	r3, [pc, #268]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a42      	ldr	r2, [pc, #264]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036f0:	f7fd fa10 	bl	8000b14 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f6:	e008      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036f8:	f7fd fa0c 	bl	8000b14 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b64      	cmp	r3, #100	; 0x64
 8003704:	d901      	bls.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e06d      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370a:	4b3a      	ldr	r3, [pc, #232]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003716:	4b36      	ldr	r3, [pc, #216]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d02e      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	429a      	cmp	r2, r3
 8003732:	d027      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003734:	4b2e      	ldr	r3, [pc, #184]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800373c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800373e:	4b2e      	ldr	r3, [pc, #184]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003740:	2201      	movs	r2, #1
 8003742:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003744:	4b2c      	ldr	r3, [pc, #176]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800374a:	4a29      	ldr	r2, [pc, #164]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d014      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375a:	f7fd f9db 	bl	8000b14 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003760:	e00a      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003762:	f7fd f9d7 	bl	8000b14 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003770:	4293      	cmp	r3, r2
 8003772:	d901      	bls.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e036      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003778:	4b1d      	ldr	r3, [pc, #116]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0ee      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003784:	4b1a      	ldr	r3, [pc, #104]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	4917      	ldr	r1, [pc, #92]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003792:	4313      	orrs	r3, r2
 8003794:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003796:	7dfb      	ldrb	r3, [r7, #23]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d105      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800379c:	4b14      	ldr	r3, [pc, #80]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	4a13      	ldr	r2, [pc, #76]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d008      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037b4:	4b0e      	ldr	r3, [pc, #56]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	490b      	ldr	r1, [pc, #44]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d008      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037d2:	4b07      	ldr	r3, [pc, #28]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	4904      	ldr	r1, [pc, #16]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40021000 	.word	0x40021000
 80037f4:	40007000 	.word	0x40007000
 80037f8:	42420440 	.word	0x42420440

080037fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e053      	b.n	80038b6 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d106      	bne.n	800382e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f006 f9f5 	bl	8009c18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2202      	movs	r2, #2
 8003832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003844:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	431a      	orrs	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	431a      	orrs	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	ea42 0103 	orr.w	r1, r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	0c1a      	lsrs	r2, r3, #16
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f002 0204 	and.w	r2, r2, #4
 8003894:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69da      	ldr	r2, [r3, #28]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b088      	sub	sp, #32
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	60f8      	str	r0, [r7, #12]
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	603b      	str	r3, [r7, #0]
 80038ca:	4613      	mov	r3, r2
 80038cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_SPI_Transmit+0x22>
 80038dc:	2302      	movs	r3, #2
 80038de:	e11e      	b.n	8003b1e <HAL_SPI_Transmit+0x260>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038e8:	f7fd f914 	bl	8000b14 <HAL_GetTick>
 80038ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038ee:	88fb      	ldrh	r3, [r7, #6]
 80038f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d002      	beq.n	8003904 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038fe:	2302      	movs	r3, #2
 8003900:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003902:	e103      	b.n	8003b0c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <HAL_SPI_Transmit+0x52>
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d102      	bne.n	8003916 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003914:	e0fa      	b.n	8003b0c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2203      	movs	r2, #3
 800391a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	88fa      	ldrh	r2, [r7, #6]
 800392e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	88fa      	ldrh	r2, [r7, #6]
 8003934:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800395c:	d107      	bne.n	800396e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800396c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003978:	2b40      	cmp	r3, #64	; 0x40
 800397a:	d007      	beq.n	800398c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800398a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003994:	d14b      	bne.n	8003a2e <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d002      	beq.n	80039a4 <HAL_SPI_Transmit+0xe6>
 800399e:	8afb      	ldrh	r3, [r7, #22]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d13e      	bne.n	8003a22 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a8:	881a      	ldrh	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b4:	1c9a      	adds	r2, r3, #2
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039be:	b29b      	uxth	r3, r3
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039c8:	e02b      	b.n	8003a22 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d112      	bne.n	80039fe <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039dc:	881a      	ldrh	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e8:	1c9a      	adds	r2, r3, #2
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	3b01      	subs	r3, #1
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80039fc:	e011      	b.n	8003a22 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039fe:	f7fd f889 	bl	8000b14 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d803      	bhi.n	8003a16 <HAL_SPI_Transmit+0x158>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a14:	d102      	bne.n	8003a1c <HAL_SPI_Transmit+0x15e>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d102      	bne.n	8003a22 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a20:	e074      	b.n	8003b0c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1ce      	bne.n	80039ca <HAL_SPI_Transmit+0x10c>
 8003a2c:	e04c      	b.n	8003ac8 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <HAL_SPI_Transmit+0x17e>
 8003a36:	8afb      	ldrh	r3, [r7, #22]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d140      	bne.n	8003abe <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	330c      	adds	r3, #12
 8003a46:	7812      	ldrb	r2, [r2, #0]
 8003a48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a62:	e02c      	b.n	8003abe <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d113      	bne.n	8003a9a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	7812      	ldrb	r2, [r2, #0]
 8003a7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a98:	e011      	b.n	8003abe <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a9a:	f7fd f83b 	bl	8000b14 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d803      	bhi.n	8003ab2 <HAL_SPI_Transmit+0x1f4>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab0:	d102      	bne.n	8003ab8 <HAL_SPI_Transmit+0x1fa>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d102      	bne.n	8003abe <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003abc:	e026      	b.n	8003b0c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1cd      	bne.n	8003a64 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	6839      	ldr	r1, [r7, #0]
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 fb91 	bl	80041f4 <SPI_EndRxTxTransaction>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2220      	movs	r2, #32
 8003adc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10a      	bne.n	8003afc <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	77fb      	strb	r3, [r7, #31]
 8003b08:	e000      	b.n	8003b0c <HAL_SPI_Transmit+0x24e>
  }

error:
 8003b0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3720      	adds	r7, #32
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b088      	sub	sp, #32
 8003b2a:	af02      	add	r7, sp, #8
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	603b      	str	r3, [r7, #0]
 8003b32:	4613      	mov	r3, r2
 8003b34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b36:	2300      	movs	r3, #0
 8003b38:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b42:	d112      	bne.n	8003b6a <HAL_SPI_Receive+0x44>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10e      	bne.n	8003b6a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2204      	movs	r2, #4
 8003b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b54:	88fa      	ldrh	r2, [r7, #6]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	68b9      	ldr	r1, [r7, #8]
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 f8e9 	bl	8003d38 <HAL_SPI_TransmitReceive>
 8003b66:	4603      	mov	r3, r0
 8003b68:	e0e2      	b.n	8003d30 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d101      	bne.n	8003b78 <HAL_SPI_Receive+0x52>
 8003b74:	2302      	movs	r3, #2
 8003b76:	e0db      	b.n	8003d30 <HAL_SPI_Receive+0x20a>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b80:	f7fc ffc8 	bl	8000b14 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d002      	beq.n	8003b98 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003b92:	2302      	movs	r3, #2
 8003b94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b96:	e0c2      	b.n	8003d1e <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <HAL_SPI_Receive+0x7e>
 8003b9e:	88fb      	ldrh	r3, [r7, #6]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d102      	bne.n	8003baa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ba8:	e0b9      	b.n	8003d1e <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2204      	movs	r2, #4
 8003bae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	88fa      	ldrh	r2, [r7, #6]
 8003bc2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	88fa      	ldrh	r2, [r7, #6]
 8003bc8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bf0:	d107      	bne.n	8003c02 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c00:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0c:	2b40      	cmp	r3, #64	; 0x40
 8003c0e:	d007      	beq.n	8003c20 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c1e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d162      	bne.n	8003cee <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c28:	e02e      	b.n	8003c88 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d115      	bne.n	8003c64 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f103 020c 	add.w	r2, r3, #12
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c44:	7812      	ldrb	r2, [r2, #0]
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c62:	e011      	b.n	8003c88 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c64:	f7fc ff56 	bl	8000b14 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d803      	bhi.n	8003c7c <HAL_SPI_Receive+0x156>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7a:	d102      	bne.n	8003c82 <HAL_SPI_Receive+0x15c>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d102      	bne.n	8003c88 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c86:	e04a      	b.n	8003d1e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1cb      	bne.n	8003c2a <HAL_SPI_Receive+0x104>
 8003c92:	e031      	b.n	8003cf8 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d113      	bne.n	8003cca <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	b292      	uxth	r2, r2
 8003cae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb4:	1c9a      	adds	r2, r3, #2
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cc8:	e011      	b.n	8003cee <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cca:	f7fc ff23 	bl	8000b14 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d803      	bhi.n	8003ce2 <HAL_SPI_Receive+0x1bc>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce0:	d102      	bne.n	8003ce8 <HAL_SPI_Receive+0x1c2>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d102      	bne.n	8003cee <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003cec:	e017      	b.n	8003d1e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1cd      	bne.n	8003c94 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	6839      	ldr	r1, [r7, #0]
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 fa27 	bl	8004150 <SPI_EndRxTransaction>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	75fb      	strb	r3, [r7, #23]
 8003d1a:	e000      	b.n	8003d1e <HAL_SPI_Receive+0x1f8>
  }

error :
 8003d1c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08c      	sub	sp, #48	; 0x30
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d46:	2301      	movs	r3, #1
 8003d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <HAL_SPI_TransmitReceive+0x26>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e18a      	b.n	8004074 <HAL_SPI_TransmitReceive+0x33c>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d66:	f7fc fed5 	bl	8000b14 <HAL_GetTick>
 8003d6a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003d7c:	887b      	ldrh	r3, [r7, #2]
 8003d7e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d00f      	beq.n	8003da8 <HAL_SPI_TransmitReceive+0x70>
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d8e:	d107      	bne.n	8003da0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d103      	bne.n	8003da0 <HAL_SPI_TransmitReceive+0x68>
 8003d98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d003      	beq.n	8003da8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003da0:	2302      	movs	r3, #2
 8003da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003da6:	e15b      	b.n	8004060 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d005      	beq.n	8003dba <HAL_SPI_TransmitReceive+0x82>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <HAL_SPI_TransmitReceive+0x82>
 8003db4:	887b      	ldrh	r3, [r7, #2]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d103      	bne.n	8003dc2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003dc0:	e14e      	b.n	8004060 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d003      	beq.n	8003dd6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2205      	movs	r2, #5
 8003dd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	887a      	ldrh	r2, [r7, #2]
 8003de6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	887a      	ldrh	r2, [r7, #2]
 8003dec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	887a      	ldrh	r2, [r7, #2]
 8003df8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	887a      	ldrh	r2, [r7, #2]
 8003dfe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e16:	2b40      	cmp	r3, #64	; 0x40
 8003e18:	d007      	beq.n	8003e2a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e32:	d178      	bne.n	8003f26 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <HAL_SPI_TransmitReceive+0x10a>
 8003e3c:	8b7b      	ldrh	r3, [r7, #26]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d166      	bne.n	8003f10 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	881a      	ldrh	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	1c9a      	adds	r2, r3, #2
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e66:	e053      	b.n	8003f10 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d11b      	bne.n	8003eae <HAL_SPI_TransmitReceive+0x176>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d016      	beq.n	8003eae <HAL_SPI_TransmitReceive+0x176>
 8003e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d113      	bne.n	8003eae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	881a      	ldrh	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	1c9a      	adds	r2, r3, #2
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d119      	bne.n	8003ef0 <HAL_SPI_TransmitReceive+0x1b8>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d014      	beq.n	8003ef0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed0:	b292      	uxth	r2, r2
 8003ed2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed8:	1c9a      	adds	r2, r3, #2
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003eec:	2301      	movs	r3, #1
 8003eee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ef0:	f7fc fe10 	bl	8000b14 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d807      	bhi.n	8003f10 <HAL_SPI_TransmitReceive+0x1d8>
 8003f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f06:	d003      	beq.n	8003f10 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f0e:	e0a7      	b.n	8004060 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1a6      	bne.n	8003e68 <HAL_SPI_TransmitReceive+0x130>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1a1      	bne.n	8003e68 <HAL_SPI_TransmitReceive+0x130>
 8003f24:	e07c      	b.n	8004020 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_SPI_TransmitReceive+0x1fc>
 8003f2e:	8b7b      	ldrh	r3, [r7, #26]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d16b      	bne.n	800400c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	330c      	adds	r3, #12
 8003f3e:	7812      	ldrb	r2, [r2, #0]
 8003f40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f5a:	e057      	b.n	800400c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d11c      	bne.n	8003fa4 <HAL_SPI_TransmitReceive+0x26c>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d017      	beq.n	8003fa4 <HAL_SPI_TransmitReceive+0x26c>
 8003f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d114      	bne.n	8003fa4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	330c      	adds	r3, #12
 8003f84:	7812      	ldrb	r2, [r2, #0]
 8003f86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d119      	bne.n	8003fe6 <HAL_SPI_TransmitReceive+0x2ae>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d014      	beq.n	8003fe6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003fe6:	f7fc fd95 	bl	8000b14 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d803      	bhi.n	8003ffe <HAL_SPI_TransmitReceive+0x2c6>
 8003ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffc:	d102      	bne.n	8004004 <HAL_SPI_TransmitReceive+0x2cc>
 8003ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004000:	2b00      	cmp	r3, #0
 8004002:	d103      	bne.n	800400c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800400a:	e029      	b.n	8004060 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1a2      	bne.n	8003f5c <HAL_SPI_TransmitReceive+0x224>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d19d      	bne.n	8003f5c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004022:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 f8e5 	bl	80041f4 <SPI_EndRxTxTransaction>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d006      	beq.n	800403e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2220      	movs	r2, #32
 800403a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800403c:	e010      	b.n	8004060 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10b      	bne.n	800405e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004046:	2300      	movs	r3, #0
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	e000      	b.n	8004060 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800405e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004070:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004074:	4618      	mov	r0, r3
 8004076:	3730      	adds	r7, #48	; 0x30
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	4613      	mov	r3, r2
 800408a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800408c:	e04c      	b.n	8004128 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004094:	d048      	beq.n	8004128 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004096:	f7fc fd3d 	bl	8000b14 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d902      	bls.n	80040ac <SPI_WaitFlagStateUntilTimeout+0x30>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d13d      	bne.n	8004128 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040c4:	d111      	bne.n	80040ea <SPI_WaitFlagStateUntilTimeout+0x6e>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ce:	d004      	beq.n	80040da <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d8:	d107      	bne.n	80040ea <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040f2:	d10f      	bne.n	8004114 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004112:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e00f      	b.n	8004148 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	4013      	ands	r3, r2
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	429a      	cmp	r2, r3
 8004136:	bf0c      	ite	eq
 8004138:	2301      	moveq	r3, #1
 800413a:	2300      	movne	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	461a      	mov	r2, r3
 8004140:	79fb      	ldrb	r3, [r7, #7]
 8004142:	429a      	cmp	r2, r3
 8004144:	d1a3      	bne.n	800408e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af02      	add	r7, sp, #8
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004164:	d111      	bne.n	800418a <SPI_EndRxTransaction+0x3a>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800416e:	d004      	beq.n	800417a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004178:	d107      	bne.n	800418a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004188:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004192:	d117      	bne.n	80041c4 <SPI_EndRxTransaction+0x74>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800419c:	d112      	bne.n	80041c4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2200      	movs	r2, #0
 80041a6:	2101      	movs	r1, #1
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f7ff ff67 	bl	800407c <SPI_WaitFlagStateUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d01a      	beq.n	80041ea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b8:	f043 0220 	orr.w	r2, r3, #32
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e013      	b.n	80041ec <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2200      	movs	r2, #0
 80041cc:	2180      	movs	r1, #128	; 0x80
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f7ff ff54 	bl	800407c <SPI_WaitFlagStateUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d007      	beq.n	80041ea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	f043 0220 	orr.w	r2, r3, #32
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e000      	b.n	80041ec <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2200      	movs	r2, #0
 8004208:	2180      	movs	r1, #128	; 0x80
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f7ff ff36 	bl	800407c <SPI_WaitFlagStateUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d007      	beq.n	8004226 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421a:	f043 0220 	orr.w	r2, r3, #32
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e000      	b.n	8004228 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e01d      	b.n	800427e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f005 fc28 	bl	8009aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3304      	adds	r3, #4
 800426c:	4619      	mov	r1, r3
 800426e:	4610      	mov	r0, r2
 8004270:	f000 f958 	bl	8004524 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004286:	b480      	push	{r7}
 8004288:	b085      	sub	sp, #20
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0201 	orr.w	r2, r2, #1
 800429c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2b06      	cmp	r3, #6
 80042ae:	d007      	beq.n	80042c0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d122      	bne.n	8004328 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d11b      	bne.n	8004328 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f06f 0202 	mvn.w	r2, #2
 80042f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	f003 0303 	and.w	r3, r3, #3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f8ed 	bl	80044ee <HAL_TIM_IC_CaptureCallback>
 8004314:	e005      	b.n	8004322 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f8e0 	bl	80044dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f8ef 	bl	8004500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b04      	cmp	r3, #4
 8004334:	d122      	bne.n	800437c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b04      	cmp	r3, #4
 8004342:	d11b      	bne.n	800437c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f06f 0204 	mvn.w	r2, #4
 800434c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2202      	movs	r2, #2
 8004352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f8c3 	bl	80044ee <HAL_TIM_IC_CaptureCallback>
 8004368:	e005      	b.n	8004376 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f8b6 	bl	80044dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f8c5 	bl	8004500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b08      	cmp	r3, #8
 8004388:	d122      	bne.n	80043d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b08      	cmp	r3, #8
 8004396:	d11b      	bne.n	80043d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f06f 0208 	mvn.w	r2, #8
 80043a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2204      	movs	r2, #4
 80043a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f899 	bl	80044ee <HAL_TIM_IC_CaptureCallback>
 80043bc:	e005      	b.n	80043ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f88c 	bl	80044dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f89b 	bl	8004500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f003 0310 	and.w	r3, r3, #16
 80043da:	2b10      	cmp	r3, #16
 80043dc:	d122      	bne.n	8004424 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	2b10      	cmp	r3, #16
 80043ea:	d11b      	bne.n	8004424 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f06f 0210 	mvn.w	r2, #16
 80043f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2208      	movs	r2, #8
 80043fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f86f 	bl	80044ee <HAL_TIM_IC_CaptureCallback>
 8004410:	e005      	b.n	800441e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f862 	bl	80044dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f871 	bl	8004500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b01      	cmp	r3, #1
 8004430:	d10e      	bne.n	8004450 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b01      	cmp	r3, #1
 800443e:	d107      	bne.n	8004450 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f06f 0201 	mvn.w	r2, #1
 8004448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f004 ffae 	bl	80093ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445a:	2b80      	cmp	r3, #128	; 0x80
 800445c:	d10e      	bne.n	800447c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004468:	2b80      	cmp	r3, #128	; 0x80
 800446a:	d107      	bne.n	800447c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f8bf 	bl	80045fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004486:	2b40      	cmp	r3, #64	; 0x40
 8004488:	d10e      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004494:	2b40      	cmp	r3, #64	; 0x40
 8004496:	d107      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f835 	bl	8004512 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0320 	and.w	r3, r3, #32
 80044b2:	2b20      	cmp	r3, #32
 80044b4:	d10e      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0320 	and.w	r3, r3, #32
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	d107      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0220 	mvn.w	r2, #32
 80044cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f88a 	bl	80045e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044d4:	bf00      	nop
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr

080044ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr

08004500 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	bc80      	pop	{r7}
 8004510:	4770      	bx	lr

08004512 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr

08004524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a29      	ldr	r2, [pc, #164]	; (80045dc <TIM_Base_SetConfig+0xb8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00b      	beq.n	8004554 <TIM_Base_SetConfig+0x30>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004542:	d007      	beq.n	8004554 <TIM_Base_SetConfig+0x30>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a26      	ldr	r2, [pc, #152]	; (80045e0 <TIM_Base_SetConfig+0xbc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d003      	beq.n	8004554 <TIM_Base_SetConfig+0x30>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a25      	ldr	r2, [pc, #148]	; (80045e4 <TIM_Base_SetConfig+0xc0>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d108      	bne.n	8004566 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a1c      	ldr	r2, [pc, #112]	; (80045dc <TIM_Base_SetConfig+0xb8>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d00b      	beq.n	8004586 <TIM_Base_SetConfig+0x62>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004574:	d007      	beq.n	8004586 <TIM_Base_SetConfig+0x62>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a19      	ldr	r2, [pc, #100]	; (80045e0 <TIM_Base_SetConfig+0xbc>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d003      	beq.n	8004586 <TIM_Base_SetConfig+0x62>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a18      	ldr	r2, [pc, #96]	; (80045e4 <TIM_Base_SetConfig+0xc0>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d108      	bne.n	8004598 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800458c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	4313      	orrs	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a07      	ldr	r2, [pc, #28]	; (80045dc <TIM_Base_SetConfig+0xb8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d103      	bne.n	80045cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	615a      	str	r2, [r3, #20]
}
 80045d2:	bf00      	nop
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr
 80045dc:	40012c00 	.word	0x40012c00
 80045e0:	40000400 	.word	0x40000400
 80045e4:	40000800 	.word	0x40000800

080045e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bc80      	pop	{r7}
 80045f8:	4770      	bx	lr

080045fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr

0800460c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e03f      	b.n	800469e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d106      	bne.n	8004638 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f005 f8f0 	bl	8009818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2224      	movs	r2, #36	; 0x24
 800463c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800464e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 fbcd 	bl	8004df0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004664:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695a      	ldr	r2, [r3, #20]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004674:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004684:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e01e      	b.n	80046f6 <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2224      	movs	r2, #36	; 0x24
 80046bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046ce:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f005 f983 	bl	80099dc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b088      	sub	sp, #32
 8004702:	af02      	add	r7, sp, #8
 8004704:	60f8      	str	r0, [r7, #12]
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	603b      	str	r3, [r7, #0]
 800470a:	4613      	mov	r3, r2
 800470c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800470e:	2300      	movs	r3, #0
 8004710:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b20      	cmp	r3, #32
 800471c:	f040 8083 	bne.w	8004826 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <HAL_UART_Transmit+0x2e>
 8004726:	88fb      	ldrh	r3, [r7, #6]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e07b      	b.n	8004828 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004736:	2b01      	cmp	r3, #1
 8004738:	d101      	bne.n	800473e <HAL_UART_Transmit+0x40>
 800473a:	2302      	movs	r3, #2
 800473c:	e074      	b.n	8004828 <HAL_UART_Transmit+0x12a>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2221      	movs	r2, #33	; 0x21
 8004750:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004754:	f7fc f9de 	bl	8000b14 <HAL_GetTick>
 8004758:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	88fa      	ldrh	r2, [r7, #6]
 800475e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	88fa      	ldrh	r2, [r7, #6]
 8004764:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004766:	e042      	b.n	80047ee <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800476c:	b29b      	uxth	r3, r3
 800476e:	3b01      	subs	r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800477e:	d122      	bne.n	80047c6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	2200      	movs	r2, #0
 8004788:	2180      	movs	r1, #128	; 0x80
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 f9dd 	bl	8004b4a <UART_WaitOnFlagUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e046      	b.n	8004828 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	881b      	ldrh	r3, [r3, #0]
 80047a2:	461a      	mov	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047ac:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d103      	bne.n	80047be <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	3302      	adds	r3, #2
 80047ba:	60bb      	str	r3, [r7, #8]
 80047bc:	e017      	b.n	80047ee <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	3301      	adds	r3, #1
 80047c2:	60bb      	str	r3, [r7, #8]
 80047c4:	e013      	b.n	80047ee <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2200      	movs	r2, #0
 80047ce:	2180      	movs	r1, #128	; 0x80
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 f9ba 	bl	8004b4a <UART_WaitOnFlagUntilTimeout>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e023      	b.n	8004828 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	60ba      	str	r2, [r7, #8]
 80047e6:	781a      	ldrb	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1b7      	bne.n	8004768 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2200      	movs	r2, #0
 8004800:	2140      	movs	r1, #64	; 0x40
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 f9a1 	bl	8004b4a <UART_WaitOnFlagUntilTimeout>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e00a      	b.n	8004828 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2220      	movs	r2, #32
 8004816:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	e000      	b.n	8004828 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004826:	2302      	movs	r3, #2
  }
}
 8004828:	4618      	mov	r0, r3
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	4613      	mov	r3, r2
 800483c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b20      	cmp	r3, #32
 8004848:	d130      	bne.n	80048ac <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <HAL_UART_Transmit_IT+0x26>
 8004850:	88fb      	ldrh	r3, [r7, #6]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e029      	b.n	80048ae <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_UART_Transmit_IT+0x38>
 8004864:	2302      	movs	r3, #2
 8004866:	e022      	b.n	80048ae <HAL_UART_Transmit_IT+0x7e>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	88fa      	ldrh	r2, [r7, #6]
 800487a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	88fa      	ldrh	r2, [r7, #6]
 8004880:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2221      	movs	r2, #33	; 0x21
 800488c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048a6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	e000      	b.n	80048ae <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80048ac:	2302      	movs	r3, #2
  }
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc80      	pop	{r7}
 80048b6:	4770      	bx	lr

080048b8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	4613      	mov	r3, r2
 80048c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b20      	cmp	r3, #32
 80048d0:	d130      	bne.n	8004934 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d002      	beq.n	80048de <HAL_UART_Receive_IT+0x26>
 80048d8:	88fb      	ldrh	r3, [r7, #6]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e029      	b.n	8004936 <HAL_UART_Receive_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_UART_Receive_IT+0x38>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e022      	b.n	8004936 <HAL_UART_Receive_IT+0x7e>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	88fa      	ldrh	r2, [r7, #6]
 8004902:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	88fa      	ldrh	r2, [r7, #6]
 8004908:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2222      	movs	r2, #34	; 0x22
 8004914:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
//    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0220 	orr.w	r2, r2, #32
 800492e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004930:	2300      	movs	r3, #0
 8004932:	e000      	b.n	8004936 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004934:	2302      	movs	r3, #2
  }
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr

08004940 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004960:	2300      	movs	r3, #0
 8004962:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004964:	2300      	movs	r3, #0
 8004966:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10d      	bne.n	8004992 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	f003 0320 	and.w	r3, r3, #32
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_UART_IRQHandler+0x52>
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	f003 0320 	and.w	r3, r3, #32
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f9c5 	bl	8004d1a <UART_Receive_IT>
      return;
 8004990:	e0cc      	b.n	8004b2c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 80ab 	beq.w	8004af0 <HAL_UART_IRQHandler+0x1b0>
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d105      	bne.n	80049b0 <HAL_UART_IRQHandler+0x70>
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 80a0 	beq.w	8004af0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00a      	beq.n	80049d0 <HAL_UART_IRQHandler+0x90>
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c8:	f043 0201 	orr.w	r2, r3, #1
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <HAL_UART_IRQHandler+0xb0>
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d005      	beq.n	80049f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e8:	f043 0202 	orr.w	r2, r3, #2
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <HAL_UART_IRQHandler+0xd0>
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a08:	f043 0204 	orr.w	r2, r3, #4
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	f003 0308 	and.w	r3, r3, #8
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <HAL_UART_IRQHandler+0xf0>
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a28:	f043 0208 	orr.w	r2, r3, #8
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d078      	beq.n	8004b2a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	f003 0320 	and.w	r3, r3, #32
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d007      	beq.n	8004a52 <HAL_UART_IRQHandler+0x112>
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	f003 0320 	and.w	r3, r3, #32
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <HAL_UART_IRQHandler+0x112>
      {
    	  Custom_UART_Receive_IT(huart);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f004 fd9d 	bl	800958c <Custom_UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	bf14      	ite	ne
 8004a60:	2301      	movne	r3, #1
 8004a62:	2300      	moveq	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6c:	f003 0308 	and.w	r3, r3, #8
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d102      	bne.n	8004a7a <HAL_UART_IRQHandler+0x13a>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d031      	beq.n	8004ade <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f8af 	bl	8004bde <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d023      	beq.n	8004ad6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695a      	ldr	r2, [r3, #20]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a9c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d013      	beq.n	8004ace <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aaa:	4a22      	ldr	r2, [pc, #136]	; (8004b34 <HAL_UART_IRQHandler+0x1f4>)
 8004aac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fc fe84 	bl	80017c0 <HAL_DMA_Abort_IT>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d016      	beq.n	8004aec <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ac8:	4610      	mov	r0, r2
 8004aca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004acc:	e00e      	b.n	8004aec <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f004 fcf2 	bl	80094b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad4:	e00a      	b.n	8004aec <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f004 fcee 	bl	80094b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004adc:	e006      	b.n	8004aec <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f004 fcea 	bl	80094b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004aea:	e01e      	b.n	8004b2a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aec:	bf00      	nop
    return;
 8004aee:	e01c      	b.n	8004b2a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d008      	beq.n	8004b0c <HAL_UART_IRQHandler+0x1cc>
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f89b 	bl	8004c40 <UART_Transmit_IT>
    return;
 8004b0a:	e00f      	b.n	8004b2c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <HAL_UART_IRQHandler+0x1ec>
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f8e2 	bl	8004cea <UART_EndTransmit_IT>
    return;
 8004b26:	bf00      	nop
 8004b28:	e000      	b.n	8004b2c <HAL_UART_IRQHandler+0x1ec>
    return;
 8004b2a:	bf00      	nop
  }
}
 8004b2c:	3720      	adds	r7, #32
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	08004c19 	.word	0x08004c19

08004b38 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bc80      	pop	{r7}
 8004b48:	4770      	bx	lr

08004b4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b084      	sub	sp, #16
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	60f8      	str	r0, [r7, #12]
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	603b      	str	r3, [r7, #0]
 8004b56:	4613      	mov	r3, r2
 8004b58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b5a:	e02c      	b.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b62:	d028      	beq.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d007      	beq.n	8004b7a <UART_WaitOnFlagUntilTimeout+0x30>
 8004b6a:	f7fb ffd3 	bl	8000b14 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d21d      	bcs.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b88:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	695a      	ldr	r2, [r3, #20]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 0201 	bic.w	r2, r2, #1
 8004b98:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e00f      	b.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	bf0c      	ite	eq
 8004bc6:	2301      	moveq	r3, #1
 8004bc8:	2300      	movne	r3, #0
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	461a      	mov	r2, r3
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d0c3      	beq.n	8004b5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b083      	sub	sp, #12
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004bf4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695a      	ldr	r2, [r3, #20]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0201 	bic.w	r2, r2, #1
 8004c04:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr

08004c18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f004 fc40 	bl	80094b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c38:	bf00      	nop
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b21      	cmp	r3, #33	; 0x21
 8004c52:	d144      	bne.n	8004cde <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5c:	d11a      	bne.n	8004c94 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c72:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d105      	bne.n	8004c88 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	1c9a      	adds	r2, r3, #2
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	621a      	str	r2, [r3, #32]
 8004c86:	e00e      	b.n	8004ca6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	621a      	str	r2, [r3, #32]
 8004c92:	e008      	b.n	8004ca6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	1c59      	adds	r1, r3, #1
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6211      	str	r1, [r2, #32]
 8004c9e:	781a      	ldrb	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10f      	bne.n	8004cda <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cc8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cd8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e000      	b.n	8004ce0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004cde:	2302      	movs	r3, #2
  }
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bc80      	pop	{r7}
 8004ce8:	4770      	bx	lr

08004cea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b082      	sub	sp, #8
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f004 fbc6 	bl	800949c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b084      	sub	sp, #16
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint8_t ch;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b22      	cmp	r3, #34	; 0x22
 8004d2c:	d15a      	bne.n	8004de4 <UART_Receive_IT+0xca>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d36:	d123      	bne.n	8004d80 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3c:	60bb      	str	r3, [r7, #8]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10e      	bne.n	8004d64 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5c:	1c9a      	adds	r2, r3, #2
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	629a      	str	r2, [r3, #40]	; 0x28
 8004d62:	e027      	b.n	8004db4 <UART_Receive_IT+0x9a>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	629a      	str	r2, [r3, #40]	; 0x28
 8004d7e:	e019      	b.n	8004db4 <UART_Receive_IT+0x9a>
      }
    }
    else
    {
    	ch = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	73fb      	strb	r3, [r7, #15]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d107      	bne.n	8004da0 <UART_Receive_IT+0x86>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(ch & (uint8_t)0x00FF);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d94:	1c59      	adds	r1, r3, #1
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6291      	str	r1, [r2, #40]	; 0x28
 8004d9a:	7bfa      	ldrb	r2, [r7, #15]
 8004d9c:	701a      	strb	r2, [r3, #0]
 8004d9e:	e009      	b.n	8004db4 <UART_Receive_IT+0x9a>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(ch & (uint8_t)0x007F);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da4:	1c59      	adds	r1, r3, #1
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6291      	str	r1, [r2, #40]	; 0x28
 8004daa:	7bfa      	ldrb	r2, [r7, #15]
 8004dac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U || ch == '\r')
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <UART_Receive_IT+0xb4>
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	2b0d      	cmp	r3, #13
 8004dcc:	d108      	bne.n	8004de0 <UART_Receive_IT+0xc6>
//
//      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
//      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7ff feae 	bl	8004b38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	e002      	b.n	8004de6 <UART_Receive_IT+0xcc>
    }
    return HAL_OK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	e000      	b.n	8004de6 <UART_Receive_IT+0xcc>
  }
  else
  {
    return HAL_BUSY;
 8004de4:	2302      	movs	r3, #2
  }
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689a      	ldr	r2, [r3, #8]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e2a:	f023 030c 	bic.w	r3, r3, #12
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6812      	ldr	r2, [r2, #0]
 8004e32:	68f9      	ldr	r1, [r7, #12]
 8004e34:	430b      	orrs	r3, r1
 8004e36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	699a      	ldr	r2, [r3, #24]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a52      	ldr	r2, [pc, #328]	; (8004f9c <UART_SetConfig+0x1ac>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d14e      	bne.n	8004ef6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e58:	f7fe fbe8 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 8004e5c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	4613      	mov	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	009a      	lsls	r2, r3, #2
 8004e68:	441a      	add	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e74:	4a4a      	ldr	r2, [pc, #296]	; (8004fa0 <UART_SetConfig+0x1b0>)
 8004e76:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7a:	095b      	lsrs	r3, r3, #5
 8004e7c:	0119      	lsls	r1, r3, #4
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	4613      	mov	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	009a      	lsls	r2, r3, #2
 8004e88:	441a      	add	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e94:	4b42      	ldr	r3, [pc, #264]	; (8004fa0 <UART_SetConfig+0x1b0>)
 8004e96:	fba3 0302 	umull	r0, r3, r3, r2
 8004e9a:	095b      	lsrs	r3, r3, #5
 8004e9c:	2064      	movs	r0, #100	; 0x64
 8004e9e:	fb00 f303 	mul.w	r3, r0, r3
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	3332      	adds	r3, #50	; 0x32
 8004ea8:	4a3d      	ldr	r2, [pc, #244]	; (8004fa0 <UART_SetConfig+0x1b0>)
 8004eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eb4:	4419      	add	r1, r3
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	009a      	lsls	r2, r3, #2
 8004ec0:	441a      	add	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ecc:	4b34      	ldr	r3, [pc, #208]	; (8004fa0 <UART_SetConfig+0x1b0>)
 8004ece:	fba3 0302 	umull	r0, r3, r3, r2
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	2064      	movs	r0, #100	; 0x64
 8004ed6:	fb00 f303 	mul.w	r3, r0, r3
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	3332      	adds	r3, #50	; 0x32
 8004ee0:	4a2f      	ldr	r2, [pc, #188]	; (8004fa0 <UART_SetConfig+0x1b0>)
 8004ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee6:	095b      	lsrs	r3, r3, #5
 8004ee8:	f003 020f 	and.w	r2, r3, #15
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	440a      	add	r2, r1
 8004ef2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004ef4:	e04d      	b.n	8004f92 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ef6:	f7fe fb85 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 8004efa:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	4613      	mov	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	009a      	lsls	r2, r3, #2
 8004f06:	441a      	add	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f12:	4a23      	ldr	r2, [pc, #140]	; (8004fa0 <UART_SetConfig+0x1b0>)
 8004f14:	fba2 2303 	umull	r2, r3, r2, r3
 8004f18:	095b      	lsrs	r3, r3, #5
 8004f1a:	0119      	lsls	r1, r3, #4
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	009a      	lsls	r2, r3, #2
 8004f26:	441a      	add	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f32:	4b1b      	ldr	r3, [pc, #108]	; (8004fa0 <UART_SetConfig+0x1b0>)
 8004f34:	fba3 0302 	umull	r0, r3, r3, r2
 8004f38:	095b      	lsrs	r3, r3, #5
 8004f3a:	2064      	movs	r0, #100	; 0x64
 8004f3c:	fb00 f303 	mul.w	r3, r0, r3
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	3332      	adds	r3, #50	; 0x32
 8004f46:	4a16      	ldr	r2, [pc, #88]	; (8004fa0 <UART_SetConfig+0x1b0>)
 8004f48:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4c:	095b      	lsrs	r3, r3, #5
 8004f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f52:	4419      	add	r1, r3
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	4613      	mov	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	009a      	lsls	r2, r3, #2
 8004f5e:	441a      	add	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f6a:	4b0d      	ldr	r3, [pc, #52]	; (8004fa0 <UART_SetConfig+0x1b0>)
 8004f6c:	fba3 0302 	umull	r0, r3, r3, r2
 8004f70:	095b      	lsrs	r3, r3, #5
 8004f72:	2064      	movs	r0, #100	; 0x64
 8004f74:	fb00 f303 	mul.w	r3, r0, r3
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	011b      	lsls	r3, r3, #4
 8004f7c:	3332      	adds	r3, #50	; 0x32
 8004f7e:	4a08      	ldr	r2, [pc, #32]	; (8004fa0 <UART_SetConfig+0x1b0>)
 8004f80:	fba2 2303 	umull	r2, r3, r2, r3
 8004f84:	095b      	lsrs	r3, r3, #5
 8004f86:	f003 020f 	and.w	r2, r3, #15
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	440a      	add	r2, r1
 8004f90:	609a      	str	r2, [r3, #8]
}
 8004f92:	bf00      	nop
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40013800 	.word	0x40013800
 8004fa0:	51eb851f 	.word	0x51eb851f

08004fa4 <MC25LC512_CS>:




void MC25LC512_CS(uint8_t CS_Status)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	4603      	mov	r3, r0
 8004fac:	71fb      	strb	r3, [r7, #7]

	// For Cs of the EEprom
	if(CS_Status == EEPROM_CS_PIN_RESET)
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d105      	bne.n	8004fc0 <MC25LC512_CS+0x1c>
	{
		ResetChipSelect();
 8004fb4:	f004 f924 	bl	8009200 <ResetChipSelect>
		HAL_Delay(5);
 8004fb8:	2005      	movs	r0, #5
 8004fba:	f7fb fdb5 	bl	8000b28 <HAL_Delay>
	{
		SetChipSelect();
		HAL_Delay(5);
	}

}
 8004fbe:	e004      	b.n	8004fca <MC25LC512_CS+0x26>
		SetChipSelect();
 8004fc0:	f004 f92a 	bl	8009218 <SetChipSelect>
		HAL_Delay(5);
 8004fc4:	2005      	movs	r0, #5
 8004fc6:	f7fb fdaf 	bl	8000b28 <HAL_Delay>
}
 8004fca:	bf00      	nop
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <MC25LC512_WriteEnableOrDisable>:
void MC25LC512_WriteEnableOrDisable(uint8_t EnableOrDisable)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	4603      	mov	r3, r0
 8004fdc:	71fb      	strb	r3, [r7, #7]
	uint8_t SendOneByte = 0;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	73fb      	strb	r3, [r7, #15]
	MC25LC512_CS(EEPROM_CS_PIN_RESET);// Reset The spi Chip //Reset means Enable
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	f7ff ffde 	bl	8004fa4 <MC25LC512_CS>

	if(EnableOrDisable==EEPROM_Enable)
 8004fe8:	79fb      	ldrb	r3, [r7, #7]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d102      	bne.n	8004ff4 <MC25LC512_WriteEnableOrDisable+0x20>
	{
			SendOneByte = MC25LCxxx_SPI_WREN;
 8004fee:	2306      	movs	r3, #6
 8004ff0:	73fb      	strb	r3, [r7, #15]
 8004ff2:	e001      	b.n	8004ff8 <MC25LC512_WriteEnableOrDisable+0x24>
	}
	else
	{
			SendOneByte = MC25LCxxx_SPI_WRDI;
 8004ff4:	2304      	movs	r3, #4
 8004ff6:	73fb      	strb	r3, [r7, #15]
	}
	HAL_SPI_Transmit(&Spi2Handle , &SendOneByte, 1, 200) ;
 8004ff8:	f107 010f 	add.w	r1, r7, #15
 8004ffc:	23c8      	movs	r3, #200	; 0xc8
 8004ffe:	2201      	movs	r2, #1
 8005000:	4804      	ldr	r0, [pc, #16]	; (8005014 <MC25LC512_WriteEnableOrDisable+0x40>)
 8005002:	f7fe fc5c 	bl	80038be <HAL_SPI_Transmit>
	MC25LC512_CS(EEPROM_CS_PIN_SET);// Set The spi Chip //Set means Disable
 8005006:	2001      	movs	r0, #1
 8005008:	f7ff ffcc 	bl	8004fa4 <MC25LC512_CS>
}
 800500c:	bf00      	nop
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	20002c64 	.word	0x20002c64

08005018 <MC25LC512_ReleaseDeepPowerDownMode>:
uint8_t MC25LC512_ReleaseDeepPowerDownMode(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0

	uint8_t SendOneByte;
	uint8_t RecieveByteOfReleaseDeepPowerMode = 0;
 800501e:	2300      	movs	r3, #0
 8005020:	71bb      	strb	r3, [r7, #6]
	SendOneByte = MC25LCxxx_SPI_RDID;
 8005022:	23ab      	movs	r3, #171	; 0xab
 8005024:	71fb      	strb	r3, [r7, #7]

	MC25LC512_CS(EEPROM_CS_PIN_RESET);// Reset The spi Chip //Reset means Enable
 8005026:	2000      	movs	r0, #0
 8005028:	f7ff ffbc 	bl	8004fa4 <MC25LC512_CS>

	HAL_SPI_Transmit(&Spi2Handle, &SendOneByte, 1, 200);
 800502c:	1df9      	adds	r1, r7, #7
 800502e:	23c8      	movs	r3, #200	; 0xc8
 8005030:	2201      	movs	r2, #1
 8005032:	480e      	ldr	r0, [pc, #56]	; (800506c <MC25LC512_ReleaseDeepPowerDownMode+0x54>)
 8005034:	f7fe fc43 	bl	80038be <HAL_SPI_Transmit>

	HAL_SPI_Receive(&Spi2Handle , &RecieveByteOfReleaseDeepPowerMode, 1,200) ;//Address of Manufaturer id High
 8005038:	1db9      	adds	r1, r7, #6
 800503a:	23c8      	movs	r3, #200	; 0xc8
 800503c:	2201      	movs	r2, #1
 800503e:	480b      	ldr	r0, [pc, #44]	; (800506c <MC25LC512_ReleaseDeepPowerDownMode+0x54>)
 8005040:	f7fe fd71 	bl	8003b26 <HAL_SPI_Receive>
	HAL_SPI_Receive(&Spi2Handle , &RecieveByteOfReleaseDeepPowerMode, 1,200) ;//Address of Manufaturer id Low
 8005044:	1db9      	adds	r1, r7, #6
 8005046:	23c8      	movs	r3, #200	; 0xc8
 8005048:	2201      	movs	r2, #1
 800504a:	4808      	ldr	r0, [pc, #32]	; (800506c <MC25LC512_ReleaseDeepPowerDownMode+0x54>)
 800504c:	f7fe fd6b 	bl	8003b26 <HAL_SPI_Receive>
	HAL_SPI_Receive(&Spi2Handle , &RecieveByteOfReleaseDeepPowerMode, 1,200) ;//Manufaturer id
 8005050:	1db9      	adds	r1, r7, #6
 8005052:	23c8      	movs	r3, #200	; 0xc8
 8005054:	2201      	movs	r2, #1
 8005056:	4805      	ldr	r0, [pc, #20]	; (800506c <MC25LC512_ReleaseDeepPowerDownMode+0x54>)
 8005058:	f7fe fd65 	bl	8003b26 <HAL_SPI_Receive>

	MC25LC512_CS(EEPROM_CS_PIN_SET);// Set The spi Chip //Set means Disable
 800505c:	2001      	movs	r0, #1
 800505e:	f7ff ffa1 	bl	8004fa4 <MC25LC512_CS>

	return RecieveByteOfReleaseDeepPowerMode;
 8005062:	79bb      	ldrb	r3, [r7, #6]

}
 8005064:	4618      	mov	r0, r3
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	20002c64 	.word	0x20002c64

08005070 <MC25LC512_Initilize>:

void MC25LC512_Initilize(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0

	MC25LC512_CS(EEPROM_CS_PIN_SET);// Reset The spi Chip //Reset means Enable
 8005074:	2001      	movs	r0, #1
 8005076:	f7ff ff95 	bl	8004fa4 <MC25LC512_CS>
	MC25LC512_ReleaseDeepPowerDownMode();
 800507a:	f7ff ffcd 	bl	8005018 <MC25LC512_ReleaseDeepPowerDownMode>
	MC25LC512_ReadStatusRegister();
 800507e:	f000 f805 	bl	800508c <MC25LC512_ReadStatusRegister>
	MC25LC512_WriteEnableOrDisable(EEPROM_Enable);
 8005082:	2001      	movs	r0, #1
 8005084:	f7ff ffa6 	bl	8004fd4 <MC25LC512_WriteEnableOrDisable>

}
 8005088:	bf00      	nop
 800508a:	bd80      	pop	{r7, pc}

0800508c <MC25LC512_ReadStatusRegister>:
	MC25LC512_CS(EEPROM_CS_PIN_SET);// Reset The spi Chip //Reset means Enable
	MC25LC512_WriteEnableOrDisable(EEPROM_Enable);

}
uint8_t MC25LC512_ReadStatusRegister(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0

	uint8_t SendOneByte = 0;
 8005092:	2300      	movs	r3, #0
 8005094:	71fb      	strb	r3, [r7, #7]
	uint8_t ReceiveOneByte;
	SendOneByte = MC25LCxxx_SPI_RDSR;
 8005096:	2305      	movs	r3, #5
 8005098:	71fb      	strb	r3, [r7, #7]
	MC25LC512_CS(EEPROM_CS_PIN_RESET);// Reset The spi Chip //Reset means Enable
 800509a:	2000      	movs	r0, #0
 800509c:	f7ff ff82 	bl	8004fa4 <MC25LC512_CS>
	HAL_SPI_Transmit(&Spi2Handle, &SendOneByte, 1, 200);
 80050a0:	1df9      	adds	r1, r7, #7
 80050a2:	23c8      	movs	r3, #200	; 0xc8
 80050a4:	2201      	movs	r2, #1
 80050a6:	4808      	ldr	r0, [pc, #32]	; (80050c8 <MC25LC512_ReadStatusRegister+0x3c>)
 80050a8:	f7fe fc09 	bl	80038be <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Spi2Handle, &ReceiveOneByte, 1, 200) ;//Address of Manufaturer id High
 80050ac:	1db9      	adds	r1, r7, #6
 80050ae:	23c8      	movs	r3, #200	; 0xc8
 80050b0:	2201      	movs	r2, #1
 80050b2:	4805      	ldr	r0, [pc, #20]	; (80050c8 <MC25LC512_ReadStatusRegister+0x3c>)
 80050b4:	f7fe fd37 	bl	8003b26 <HAL_SPI_Receive>
	MC25LC512_CS(EEPROM_CS_PIN_SET);// Set The spi Chip //Set means Disable
 80050b8:	2001      	movs	r0, #1
 80050ba:	f7ff ff73 	bl	8004fa4 <MC25LC512_CS>
	return ReceiveOneByte;
 80050be:	79bb      	ldrb	r3, [r7, #6]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20002c64 	.word	0x20002c64

080050cc <HAL_ADC_ConvCpltCallback>:
  * @note   This example shows a simple way to report end of conversion
  *         and get conversion result. You can add your own implementation.
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
	AdcDmaStoreFlag = SET;
 80050d4:	4b03      	ldr	r3, [pc, #12]	; (80050e4 <HAL_ADC_ConvCpltCallback+0x18>)
 80050d6:	2201      	movs	r2, #1
 80050d8:	701a      	strb	r2, [r3, #0]
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	bc80      	pop	{r7}
 80050e2:	4770      	bx	lr
 80050e4:	200001e8 	.word	0x200001e8

080050e8 <ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void ADC1_Init(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80050ee:	1d3b      	adds	r3, r7, #4
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	605a      	str	r2, [r3, #4]
 80050f6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC1Handle.Instance = ADC1;
 80050f8:	4b74      	ldr	r3, [pc, #464]	; (80052cc <ADC1_Init+0x1e4>)
 80050fa:	4a75      	ldr	r2, [pc, #468]	; (80052d0 <ADC1_Init+0x1e8>)
 80050fc:	601a      	str	r2, [r3, #0]
  ADC1Handle.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80050fe:	4b73      	ldr	r3, [pc, #460]	; (80052cc <ADC1_Init+0x1e4>)
 8005100:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005104:	609a      	str	r2, [r3, #8]
  ADC1Handle.Init.ContinuousConvMode = ENABLE;
 8005106:	4b71      	ldr	r3, [pc, #452]	; (80052cc <ADC1_Init+0x1e4>)
 8005108:	2201      	movs	r2, #1
 800510a:	731a      	strb	r2, [r3, #12]
  ADC1Handle.Init.DiscontinuousConvMode = DISABLE;
 800510c:	4b6f      	ldr	r3, [pc, #444]	; (80052cc <ADC1_Init+0x1e4>)
 800510e:	2200      	movs	r2, #0
 8005110:	751a      	strb	r2, [r3, #20]
  ADC1Handle.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005112:	4b6e      	ldr	r3, [pc, #440]	; (80052cc <ADC1_Init+0x1e4>)
 8005114:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8005118:	61da      	str	r2, [r3, #28]
  ADC1Handle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800511a:	4b6c      	ldr	r3, [pc, #432]	; (80052cc <ADC1_Init+0x1e4>)
 800511c:	2200      	movs	r2, #0
 800511e:	605a      	str	r2, [r3, #4]
  ADC1Handle.Init.NbrOfConversion = 14;
 8005120:	4b6a      	ldr	r3, [pc, #424]	; (80052cc <ADC1_Init+0x1e4>)
 8005122:	220e      	movs	r2, #14
 8005124:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&ADC1Handle) != HAL_OK)
 8005126:	4869      	ldr	r0, [pc, #420]	; (80052cc <ADC1_Init+0x1e4>)
 8005128:	f7fb fd20 	bl	8000b6c <HAL_ADC_Init>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <ADC1_Init+0x4e>
  {
    Error_Handler();
 8005132:	f004 fb39 	bl	80097a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005136:	2300      	movs	r3, #0
 8005138:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800513a:	2301      	movs	r3, #1
 800513c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800513e:	2303      	movs	r3, #3
 8005140:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&ADC1Handle, &sConfig) != HAL_OK)
 8005142:	1d3b      	adds	r3, r7, #4
 8005144:	4619      	mov	r1, r3
 8005146:	4861      	ldr	r0, [pc, #388]	; (80052cc <ADC1_Init+0x1e4>)
 8005148:	f7fb ff1e 	bl	8000f88 <HAL_ADC_ConfigChannel>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <ADC1_Init+0x6e>
  {
    Error_Handler();
 8005152:	f004 fb29 	bl	80097a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005156:	2301      	movs	r3, #1
 8005158:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800515a:	2302      	movs	r3, #2
 800515c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&ADC1Handle, &sConfig) != HAL_OK)
 800515e:	1d3b      	adds	r3, r7, #4
 8005160:	4619      	mov	r1, r3
 8005162:	485a      	ldr	r0, [pc, #360]	; (80052cc <ADC1_Init+0x1e4>)
 8005164:	f7fb ff10 	bl	8000f88 <HAL_ADC_ConfigChannel>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <ADC1_Init+0x8a>
  {
    Error_Handler();
 800516e:	f004 fb1b 	bl	80097a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005172:	2302      	movs	r3, #2
 8005174:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8005176:	2303      	movs	r3, #3
 8005178:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&ADC1Handle, &sConfig) != HAL_OK)
 800517a:	1d3b      	adds	r3, r7, #4
 800517c:	4619      	mov	r1, r3
 800517e:	4853      	ldr	r0, [pc, #332]	; (80052cc <ADC1_Init+0x1e4>)
 8005180:	f7fb ff02 	bl	8000f88 <HAL_ADC_ConfigChannel>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <ADC1_Init+0xa6>
  {
    Error_Handler();
 800518a:	f004 fb0d 	bl	80097a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800518e:	2303      	movs	r3, #3
 8005190:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8005192:	2304      	movs	r3, #4
 8005194:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&ADC1Handle, &sConfig) != HAL_OK)
 8005196:	1d3b      	adds	r3, r7, #4
 8005198:	4619      	mov	r1, r3
 800519a:	484c      	ldr	r0, [pc, #304]	; (80052cc <ADC1_Init+0x1e4>)
 800519c:	f7fb fef4 	bl	8000f88 <HAL_ADC_ConfigChannel>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <ADC1_Init+0xc2>
  {
    Error_Handler();
 80051a6:	f004 faff 	bl	80097a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80051aa:	2304      	movs	r3, #4
 80051ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80051ae:	2305      	movs	r3, #5
 80051b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&ADC1Handle, &sConfig) != HAL_OK)
 80051b2:	1d3b      	adds	r3, r7, #4
 80051b4:	4619      	mov	r1, r3
 80051b6:	4845      	ldr	r0, [pc, #276]	; (80052cc <ADC1_Init+0x1e4>)
 80051b8:	f7fb fee6 	bl	8000f88 <HAL_ADC_ConfigChannel>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <ADC1_Init+0xde>
  {
    Error_Handler();
 80051c2:	f004 faf1 	bl	80097a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80051c6:	2305      	movs	r3, #5
 80051c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80051ca:	2306      	movs	r3, #6
 80051cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&ADC1Handle, &sConfig) != HAL_OK)
 80051ce:	1d3b      	adds	r3, r7, #4
 80051d0:	4619      	mov	r1, r3
 80051d2:	483e      	ldr	r0, [pc, #248]	; (80052cc <ADC1_Init+0x1e4>)
 80051d4:	f7fb fed8 	bl	8000f88 <HAL_ADC_ConfigChannel>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <ADC1_Init+0xfa>
  {
    Error_Handler();
 80051de:	f004 fae3 	bl	80097a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80051e2:	2306      	movs	r3, #6
 80051e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80051e6:	2307      	movs	r3, #7
 80051e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&ADC1Handle, &sConfig) != HAL_OK)
 80051ea:	1d3b      	adds	r3, r7, #4
 80051ec:	4619      	mov	r1, r3
 80051ee:	4837      	ldr	r0, [pc, #220]	; (80052cc <ADC1_Init+0x1e4>)
 80051f0:	f7fb feca 	bl	8000f88 <HAL_ADC_ConfigChannel>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <ADC1_Init+0x116>
  {
    Error_Handler();
 80051fa:	f004 fad5 	bl	80097a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80051fe:	2307      	movs	r3, #7
 8005200:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8005202:	2308      	movs	r3, #8
 8005204:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&ADC1Handle, &sConfig) != HAL_OK)
 8005206:	1d3b      	adds	r3, r7, #4
 8005208:	4619      	mov	r1, r3
 800520a:	4830      	ldr	r0, [pc, #192]	; (80052cc <ADC1_Init+0x1e4>)
 800520c:	f7fb febc 	bl	8000f88 <HAL_ADC_ConfigChannel>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <ADC1_Init+0x132>
  {
    Error_Handler();
 8005216:	f004 fac7 	bl	80097a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800521a:	2308      	movs	r3, #8
 800521c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800521e:	2309      	movs	r3, #9
 8005220:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&ADC1Handle, &sConfig) != HAL_OK)
 8005222:	1d3b      	adds	r3, r7, #4
 8005224:	4619      	mov	r1, r3
 8005226:	4829      	ldr	r0, [pc, #164]	; (80052cc <ADC1_Init+0x1e4>)
 8005228:	f7fb feae 	bl	8000f88 <HAL_ADC_ConfigChannel>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <ADC1_Init+0x14e>
  {
    Error_Handler();
 8005232:	f004 fab9 	bl	80097a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005236:	2309      	movs	r3, #9
 8005238:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800523a:	230a      	movs	r3, #10
 800523c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&ADC1Handle, &sConfig) != HAL_OK)
 800523e:	1d3b      	adds	r3, r7, #4
 8005240:	4619      	mov	r1, r3
 8005242:	4822      	ldr	r0, [pc, #136]	; (80052cc <ADC1_Init+0x1e4>)
 8005244:	f7fb fea0 	bl	8000f88 <HAL_ADC_ConfigChannel>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <ADC1_Init+0x16a>
  {
    Error_Handler();
 800524e:	f004 faab 	bl	80097a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005252:	230a      	movs	r3, #10
 8005254:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8005256:	230b      	movs	r3, #11
 8005258:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&ADC1Handle, &sConfig) != HAL_OK)
 800525a:	1d3b      	adds	r3, r7, #4
 800525c:	4619      	mov	r1, r3
 800525e:	481b      	ldr	r0, [pc, #108]	; (80052cc <ADC1_Init+0x1e4>)
 8005260:	f7fb fe92 	bl	8000f88 <HAL_ADC_ConfigChannel>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <ADC1_Init+0x186>
  {
    Error_Handler();
 800526a:	f004 fa9d 	bl	80097a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800526e:	230b      	movs	r3, #11
 8005270:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8005272:	230c      	movs	r3, #12
 8005274:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&ADC1Handle, &sConfig) != HAL_OK)
 8005276:	1d3b      	adds	r3, r7, #4
 8005278:	4619      	mov	r1, r3
 800527a:	4814      	ldr	r0, [pc, #80]	; (80052cc <ADC1_Init+0x1e4>)
 800527c:	f7fb fe84 	bl	8000f88 <HAL_ADC_ConfigChannel>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <ADC1_Init+0x1a2>
  {
    Error_Handler();
 8005286:	f004 fa8f 	bl	80097a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800528a:	230c      	movs	r3, #12
 800528c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 800528e:	230d      	movs	r3, #13
 8005290:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&ADC1Handle, &sConfig) != HAL_OK)
 8005292:	1d3b      	adds	r3, r7, #4
 8005294:	4619      	mov	r1, r3
 8005296:	480d      	ldr	r0, [pc, #52]	; (80052cc <ADC1_Init+0x1e4>)
 8005298:	f7fb fe76 	bl	8000f88 <HAL_ADC_ConfigChannel>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <ADC1_Init+0x1be>
  {
    Error_Handler();
 80052a2:	f004 fa81 	bl	80097a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80052a6:	2310      	movs	r3, #16
 80052a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 80052aa:	230e      	movs	r3, #14
 80052ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&ADC1Handle, &sConfig) != HAL_OK)
 80052ae:	1d3b      	adds	r3, r7, #4
 80052b0:	4619      	mov	r1, r3
 80052b2:	4806      	ldr	r0, [pc, #24]	; (80052cc <ADC1_Init+0x1e4>)
 80052b4:	f7fb fe68 	bl	8000f88 <HAL_ADC_ConfigChannel>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <ADC1_Init+0x1da>
  {
    Error_Handler();
 80052be:	f004 fa73 	bl	80097a8 <Error_Handler>
  }
}
 80052c2:	bf00      	nop
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20002640 	.word	0x20002640
 80052d0:	40012400 	.word	0x40012400

080052d4 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	4603      	mov	r3, r0
 80052dc:	80fb      	strh	r3, [r7, #6]
	is_Ready_To_Find_Min_Max_Voltage = SET;
 80052de:	4b04      	ldr	r3, [pc, #16]	; (80052f0 <HAL_GPIO_EXTI_Callback+0x1c>)
 80052e0:	2201      	movs	r2, #1
 80052e2:	701a      	strb	r2, [r3, #0]
//	test2();
	return;
 80052e4:	bf00      	nop
}
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bc80      	pop	{r7}
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	200001ea 	.word	0x200001ea

080052f4 <ADC_DMA_Init>:
/**
  * Enable DMA controller clock
  */
void ADC_DMA_Init(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80052fa:	4b0c      	ldr	r3, [pc, #48]	; (800532c <ADC_DMA_Init+0x38>)
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	4a0b      	ldr	r2, [pc, #44]	; (800532c <ADC_DMA_Init+0x38>)
 8005300:	f043 0301 	orr.w	r3, r3, #1
 8005304:	6153      	str	r3, [r2, #20]
 8005306:	4b09      	ldr	r3, [pc, #36]	; (800532c <ADC_DMA_Init+0x38>)
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	607b      	str	r3, [r7, #4]
 8005310:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005312:	2200      	movs	r2, #0
 8005314:	2100      	movs	r1, #0
 8005316:	200b      	movs	r0, #11
 8005318:	f7fc f919 	bl	800154e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800531c:	200b      	movs	r0, #11
 800531e:	f7fc f932 	bl	8001586 <HAL_NVIC_EnableIRQ>

}
 8005322:	bf00      	nop
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	40021000 	.word	0x40021000

08005330 <ADC_Start_Getting_Values>:
void ADC_Start_Getting_Values(void){
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&ADC1Handle, (uint32_t*) AdcDmaBuffer, NUMBER_OF_ADC_CHANNELS);
 8005334:	220e      	movs	r2, #14
 8005336:	4903      	ldr	r1, [pc, #12]	; (8005344 <ADC_Start_Getting_Values+0x14>)
 8005338:	4803      	ldr	r0, [pc, #12]	; (8005348 <ADC_Start_Getting_Values+0x18>)
 800533a:	f7fb fcef 	bl	8000d1c <HAL_ADC_Start_DMA>
}
 800533e:	bf00      	nop
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	20000558 	.word	0x20000558
 8005348:	20002640 	.word	0x20002640

0800534c <ADC_Stop_Getting_Values>:

void ADC_Stop_Getting_Values(void){
 800534c:	b580      	push	{r7, lr}
 800534e:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&ADC1Handle);
 8005350:	4802      	ldr	r0, [pc, #8]	; (800535c <ADC_Stop_Getting_Values+0x10>)
 8005352:	f7fb fdc1 	bl	8000ed8 <HAL_ADC_Stop_DMA>
}
 8005356:	bf00      	nop
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	20002640 	.word	0x20002640

08005360 <Adc_Clear_Timeout_Flag>:


void Adc_Clear_Timeout_Flag(void){
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
	adc_TimeoutFlag = 0;
 8005364:	4b03      	ldr	r3, [pc, #12]	; (8005374 <Adc_Clear_Timeout_Flag+0x14>)
 8005366:	2200      	movs	r2, #0
 8005368:	701a      	strb	r2, [r3, #0]
}
 800536a:	bf00      	nop
 800536c:	46bd      	mov	sp, r7
 800536e:	bc80      	pop	{r7}
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	200001e9 	.word	0x200001e9

08005378 <Adc_Reading_Timeout>:
void Adc_Reading_Timeout(void){
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0
	adc_TimeoutFlag = 1;
 800537c:	4b03      	ldr	r3, [pc, #12]	; (800538c <Adc_Reading_Timeout+0x14>)
 800537e:	2201      	movs	r2, #1
 8005380:	701a      	strb	r2, [r3, #0]
}
 8005382:	bf00      	nop
 8005384:	46bd      	mov	sp, r7
 8005386:	bc80      	pop	{r7}
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	200001e9 	.word	0x200001e9

08005390 <is_Adc_Reading_Timeout>:
uint8_t is_Adc_Reading_Timeout(void){
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
	return adc_TimeoutFlag;
 8005394:	4b02      	ldr	r3, [pc, #8]	; (80053a0 <is_Adc_Reading_Timeout+0x10>)
 8005396:	781b      	ldrb	r3, [r3, #0]
}
 8005398:	4618      	mov	r0, r3
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr
 80053a0:	200001e9 	.word	0x200001e9

080053a4 <Is_Done_Getting_ADC>:
		}
		break;
	}
}

FlagStatus Is_Done_Getting_ADC(void){
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
	if(adcState == ADC_REPORT_POWER_DATA)
 80053a8:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <Is_Done_Getting_ADC+0x1c>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b05      	cmp	r3, #5
 80053ae:	d101      	bne.n	80053b4 <Is_Done_Getting_ADC+0x10>
		return SET;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e000      	b.n	80053b6 <Is_Done_Getting_ADC+0x12>
	return RESET;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bc80      	pop	{r7}
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	200001eb 	.word	0x200001eb

080053c4 <PowerConsumption_FSM>:


uint8_t filterNoiseState = 0;

void PowerConsumption_FSM(void){
 80053c4:	b5b0      	push	{r4, r5, r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af02      	add	r7, sp, #8
	static uint8_t externalInterruptCounter = 0;
	static uint8_t cycleCounter = 0;
	Adc_State_Display();
 80053ca:	f000 fa93 	bl	80058f4 <Adc_State_Display>
	switch(adcState){
 80053ce:	4ba6      	ldr	r3, [pc, #664]	; (8005668 <PowerConsumption_FSM+0x2a4>)
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	2b05      	cmp	r3, #5
 80053d4:	f200 8269 	bhi.w	80058aa <PowerConsumption_FSM+0x4e6>
 80053d8:	a201      	add	r2, pc, #4	; (adr r2, 80053e0 <PowerConsumption_FSM+0x1c>)
 80053da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053de:	bf00      	nop
 80053e0:	080053f9 	.word	0x080053f9
 80053e4:	08005439 	.word	0x08005439
 80053e8:	08005463 	.word	0x08005463
 80053ec:	080054a5 	.word	0x080054a5
 80053f0:	08005521 	.word	0x08005521
 80053f4:	08005855 	.word	0x08005855
	case ADC_SETUP_TIMER_ONE_SECOND:
		SCH_Delete_Task(adc_Timeout_Task_Index);
 80053f8:	4b9c      	ldr	r3, [pc, #624]	; (800566c <PowerConsumption_FSM+0x2a8>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f002 fb91 	bl	8007b24 <SCH_Delete_Task>
		Adc_Clear_Timeout_Flag();
 8005402:	f7ff ffad 	bl	8005360 <Adc_Clear_Timeout_Flag>
		adc_Timeout_Task_Index = SCH_Add_Task(Adc_Reading_Timeout, 100, 0);
 8005406:	2200      	movs	r2, #0
 8005408:	2164      	movs	r1, #100	; 0x64
 800540a:	4899      	ldr	r0, [pc, #612]	; (8005670 <PowerConsumption_FSM+0x2ac>)
 800540c:	f002 fb10 	bl	8007a30 <SCH_Add_Task>
 8005410:	4603      	mov	r3, r0
 8005412:	461a      	mov	r2, r3
 8005414:	4b95      	ldr	r3, [pc, #596]	; (800566c <PowerConsumption_FSM+0x2a8>)
 8005416:	701a      	strb	r2, [r3, #0]
		is_Ready_To_Find_Min_Max_Voltage = RESET;
 8005418:	4b96      	ldr	r3, [pc, #600]	; (8005674 <PowerConsumption_FSM+0x2b0>)
 800541a:	2200      	movs	r2, #0
 800541c:	701a      	strb	r2, [r3, #0]
		externalInterruptCounter = 0;
 800541e:	4b96      	ldr	r3, [pc, #600]	; (8005678 <PowerConsumption_FSM+0x2b4>)
 8005420:	2200      	movs	r2, #0
 8005422:	701a      	strb	r2, [r3, #0]
		AdcDmaBufferIndexFilter = 0;
 8005424:	4b95      	ldr	r3, [pc, #596]	; (800567c <PowerConsumption_FSM+0x2b8>)
 8005426:	2200      	movs	r2, #0
 8005428:	601a      	str	r2, [r3, #0]
		cycleCounter = 0;
 800542a:	4b95      	ldr	r3, [pc, #596]	; (8005680 <PowerConsumption_FSM+0x2bc>)
 800542c:	2200      	movs	r2, #0
 800542e:	701a      	strb	r2, [r3, #0]
		adcState = ADC_FIND_ZERO_VOLTAGE_POINT;
 8005430:	4b8d      	ldr	r3, [pc, #564]	; (8005668 <PowerConsumption_FSM+0x2a4>)
 8005432:	2201      	movs	r2, #1
 8005434:	701a      	strb	r2, [r3, #0]
		break;
 8005436:	e243      	b.n	80058c0 <PowerConsumption_FSM+0x4fc>
	case ADC_FIND_ZERO_VOLTAGE_POINT:
		if(is_Ready_To_Find_Min_Max_Voltage == SET){
 8005438:	4b8e      	ldr	r3, [pc, #568]	; (8005674 <PowerConsumption_FSM+0x2b0>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	2b01      	cmp	r3, #1
 800543e:	f040 8238 	bne.w	80058b2 <PowerConsumption_FSM+0x4ee>
			is_Ready_To_Find_Min_Max_Voltage = RESET;
 8005442:	4b8c      	ldr	r3, [pc, #560]	; (8005674 <PowerConsumption_FSM+0x2b0>)
 8005444:	2200      	movs	r2, #0
 8005446:	701a      	strb	r2, [r3, #0]
			externalInterruptCounter++;
 8005448:	4b8b      	ldr	r3, [pc, #556]	; (8005678 <PowerConsumption_FSM+0x2b4>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	3301      	adds	r3, #1
 800544e:	b2da      	uxtb	r2, r3
 8005450:	4b89      	ldr	r3, [pc, #548]	; (8005678 <PowerConsumption_FSM+0x2b4>)
 8005452:	701a      	strb	r2, [r3, #0]
			AdcDmaBufferIndexFilter = 0;
 8005454:	4b89      	ldr	r3, [pc, #548]	; (800567c <PowerConsumption_FSM+0x2b8>)
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]
			adcState = ADC_START_GETTING;
 800545a:	4b83      	ldr	r3, [pc, #524]	; (8005668 <PowerConsumption_FSM+0x2a4>)
 800545c:	2202      	movs	r2, #2
 800545e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005460:	e227      	b.n	80058b2 <PowerConsumption_FSM+0x4ee>

	case ADC_START_GETTING:
		if(is_Ready_To_Find_Min_Max_Voltage == SET){
 8005462:	4b84      	ldr	r3, [pc, #528]	; (8005674 <PowerConsumption_FSM+0x2b0>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d109      	bne.n	800547e <PowerConsumption_FSM+0xba>
			is_Ready_To_Find_Min_Max_Voltage = RESET;
 800546a:	4b82      	ldr	r3, [pc, #520]	; (8005674 <PowerConsumption_FSM+0x2b0>)
 800546c:	2200      	movs	r2, #0
 800546e:	701a      	strb	r2, [r3, #0]
			externalInterruptCounter++;
 8005470:	4b81      	ldr	r3, [pc, #516]	; (8005678 <PowerConsumption_FSM+0x2b4>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	3301      	adds	r3, #1
 8005476:	b2da      	uxtb	r2, r3
 8005478:	4b7f      	ldr	r3, [pc, #508]	; (8005678 <PowerConsumption_FSM+0x2b4>)
 800547a:	701a      	strb	r2, [r3, #0]
				adcState = ADC_WAIT_FOR_DATA_COMPLETE_TRANSMIT;
			} else if(externalInterruptCounter >= 3) {
				adcState = ADC_COMPUTE_PEAK_TO_PEAK_VOLTAGE;
			}
		}
		break;
 800547c:	e21b      	b.n	80058b6 <PowerConsumption_FSM+0x4f2>
			if(externalInterruptCounter < 3){
 800547e:	4b7e      	ldr	r3, [pc, #504]	; (8005678 <PowerConsumption_FSM+0x2b4>)
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2b02      	cmp	r3, #2
 8005484:	d805      	bhi.n	8005492 <PowerConsumption_FSM+0xce>
				ADC_Start_Getting_Values();
 8005486:	f7ff ff53 	bl	8005330 <ADC_Start_Getting_Values>
				adcState = ADC_WAIT_FOR_DATA_COMPLETE_TRANSMIT;
 800548a:	4b77      	ldr	r3, [pc, #476]	; (8005668 <PowerConsumption_FSM+0x2a4>)
 800548c:	2203      	movs	r2, #3
 800548e:	701a      	strb	r2, [r3, #0]
		break;
 8005490:	e211      	b.n	80058b6 <PowerConsumption_FSM+0x4f2>
			} else if(externalInterruptCounter >= 3) {
 8005492:	4b79      	ldr	r3, [pc, #484]	; (8005678 <PowerConsumption_FSM+0x2b4>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2b02      	cmp	r3, #2
 8005498:	f240 820d 	bls.w	80058b6 <PowerConsumption_FSM+0x4f2>
				adcState = ADC_COMPUTE_PEAK_TO_PEAK_VOLTAGE;
 800549c:	4b72      	ldr	r3, [pc, #456]	; (8005668 <PowerConsumption_FSM+0x2a4>)
 800549e:	2204      	movs	r2, #4
 80054a0:	701a      	strb	r2, [r3, #0]
		break;
 80054a2:	e208      	b.n	80058b6 <PowerConsumption_FSM+0x4f2>

	case ADC_WAIT_FOR_DATA_COMPLETE_TRANSMIT:
		if(AdcDmaStoreFlag == SET){
 80054a4:	4b77      	ldr	r3, [pc, #476]	; (8005684 <PowerConsumption_FSM+0x2c0>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	f040 8206 	bne.w	80058ba <PowerConsumption_FSM+0x4f6>
			ADC_Stop_Getting_Values();
 80054ae:	f7ff ff4d 	bl	800534c <ADC_Stop_Getting_Values>
			AdcDmaStoreFlag = RESET;
 80054b2:	4b74      	ldr	r3, [pc, #464]	; (8005684 <PowerConsumption_FSM+0x2c0>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	701a      	strb	r2, [r3, #0]
			for (uint8_t channelIndex = 0; channelIndex < NUMBER_OF_RELAYS; channelIndex++) {
 80054b8:	2300      	movs	r3, #0
 80054ba:	73fb      	strb	r3, [r7, #15]
 80054bc:	e013      	b.n	80054e6 <PowerConsumption_FSM+0x122>
				AdcBuffer[channelIndex][AdcDmaBufferIndexFilter] = AdcDmaBuffer[channelIndex] - AdcDmaBuffer[REFERENCE_1V8_VOLTAGE_INDEX];
 80054be:	7bfb      	ldrb	r3, [r7, #15]
 80054c0:	4a71      	ldr	r2, [pc, #452]	; (8005688 <PowerConsumption_FSM+0x2c4>)
 80054c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80054c6:	4b70      	ldr	r3, [pc, #448]	; (8005688 <PowerConsumption_FSM+0x2c4>)
 80054c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054ca:	7bf9      	ldrb	r1, [r7, #15]
 80054cc:	4b6b      	ldr	r3, [pc, #428]	; (800567c <PowerConsumption_FSM+0x2b8>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	1a82      	subs	r2, r0, r2
 80054d2:	486e      	ldr	r0, [pc, #440]	; (800568c <PowerConsumption_FSM+0x2c8>)
 80054d4:	24c8      	movs	r4, #200	; 0xc8
 80054d6:	fb04 f101 	mul.w	r1, r4, r1
 80054da:	440b      	add	r3, r1
 80054dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			for (uint8_t channelIndex = 0; channelIndex < NUMBER_OF_RELAYS; channelIndex++) {
 80054e0:	7bfb      	ldrb	r3, [r7, #15]
 80054e2:	3301      	adds	r3, #1
 80054e4:	73fb      	strb	r3, [r7, #15]
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
 80054e8:	2b09      	cmp	r3, #9
 80054ea:	d9e8      	bls.n	80054be <PowerConsumption_FSM+0xfa>
//				if(AdcBuffer[channelIndex][AdcDmaBufferIndexFilter] < 10 && AdcBuffer[channelIndex][AdcDmaBufferIndexFilter] > -10){
//					AdcBuffer[channelIndex][AdcDmaBufferIndexFilter] = 0;
//				}
			}
			AdcDmaBufferIndexFilter++;
 80054ec:	4b63      	ldr	r3, [pc, #396]	; (800567c <PowerConsumption_FSM+0x2b8>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3301      	adds	r3, #1
 80054f2:	4a62      	ldr	r2, [pc, #392]	; (800567c <PowerConsumption_FSM+0x2b8>)
 80054f4:	6013      	str	r3, [r2, #0]
			if(AdcDmaBufferIndexFilter % NUMBER_OF_SAMPLES_PER_SECOND == 0){
 80054f6:	4b61      	ldr	r3, [pc, #388]	; (800567c <PowerConsumption_FSM+0x2b8>)
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	4b65      	ldr	r3, [pc, #404]	; (8005690 <PowerConsumption_FSM+0x2cc>)
 80054fc:	fb83 1302 	smull	r1, r3, r3, r2
 8005500:	1199      	asrs	r1, r3, #6
 8005502:	17d3      	asrs	r3, r2, #31
 8005504:	1acb      	subs	r3, r1, r3
 8005506:	21c8      	movs	r1, #200	; 0xc8
 8005508:	fb01 f303 	mul.w	r3, r1, r3
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d102      	bne.n	8005518 <PowerConsumption_FSM+0x154>
				AdcDmaBufferIndexFilter = 0;
 8005512:	4b5a      	ldr	r3, [pc, #360]	; (800567c <PowerConsumption_FSM+0x2b8>)
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]
			}
			adcState = ADC_START_GETTING;
 8005518:	4b53      	ldr	r3, [pc, #332]	; (8005668 <PowerConsumption_FSM+0x2a4>)
 800551a:	2202      	movs	r2, #2
 800551c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800551e:	e1cc      	b.n	80058ba <PowerConsumption_FSM+0x4f6>
	case ADC_COMPUTE_PEAK_TO_PEAK_VOLTAGE:
		for(uint8_t channelIndex = 0; channelIndex < NUMBER_OF_RELAYS; channelIndex ++){
 8005520:	2300      	movs	r3, #0
 8005522:	73bb      	strb	r3, [r7, #14]
 8005524:	e127      	b.n	8005776 <PowerConsumption_FSM+0x3b2>
			for(uint8_t sampleIndex = 0; sampleIndex < AdcDmaBufferIndexFilter; sampleIndex ++){
 8005526:	2300      	movs	r3, #0
 8005528:	737b      	strb	r3, [r7, #13]
 800552a:	e11b      	b.n	8005764 <PowerConsumption_FSM+0x3a0>
//				if(channelIndex == 3){
//					sprintf((char*) strtmp, "%d\r\n", (int) AdcBuffer[channelIndex][sampleIndex]);
//					UART3_SendToHost((uint8_t *)strtmp);
//				}
				if(sampleIndex == 0){
 800552c:	7b7b      	ldrb	r3, [r7, #13]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d11a      	bne.n	8005568 <PowerConsumption_FSM+0x1a4>
					AdcBufferPeakMax[channelIndex] = AdcBuffer[channelIndex][sampleIndex];
 8005532:	7bb9      	ldrb	r1, [r7, #14]
 8005534:	7b7a      	ldrb	r2, [r7, #13]
 8005536:	7bbb      	ldrb	r3, [r7, #14]
 8005538:	4854      	ldr	r0, [pc, #336]	; (800568c <PowerConsumption_FSM+0x2c8>)
 800553a:	24c8      	movs	r4, #200	; 0xc8
 800553c:	fb04 f101 	mul.w	r1, r4, r1
 8005540:	440a      	add	r2, r1
 8005542:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8005546:	4953      	ldr	r1, [pc, #332]	; (8005694 <PowerConsumption_FSM+0x2d0>)
 8005548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					AdcBufferPeakMin[channelIndex] = AdcBuffer[channelIndex][sampleIndex];
 800554c:	7bb9      	ldrb	r1, [r7, #14]
 800554e:	7b7a      	ldrb	r2, [r7, #13]
 8005550:	7bbb      	ldrb	r3, [r7, #14]
 8005552:	484e      	ldr	r0, [pc, #312]	; (800568c <PowerConsumption_FSM+0x2c8>)
 8005554:	24c8      	movs	r4, #200	; 0xc8
 8005556:	fb04 f101 	mul.w	r1, r4, r1
 800555a:	440a      	add	r2, r1
 800555c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8005560:	494d      	ldr	r1, [pc, #308]	; (8005698 <PowerConsumption_FSM+0x2d4>)
 8005562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005566:	e037      	b.n	80055d8 <PowerConsumption_FSM+0x214>
				} else {
					if(AdcBufferPeakMax[channelIndex] < AdcBuffer[channelIndex][sampleIndex]){
 8005568:	7bbb      	ldrb	r3, [r7, #14]
 800556a:	4a4a      	ldr	r2, [pc, #296]	; (8005694 <PowerConsumption_FSM+0x2d0>)
 800556c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005570:	7bb9      	ldrb	r1, [r7, #14]
 8005572:	7b7b      	ldrb	r3, [r7, #13]
 8005574:	4845      	ldr	r0, [pc, #276]	; (800568c <PowerConsumption_FSM+0x2c8>)
 8005576:	24c8      	movs	r4, #200	; 0xc8
 8005578:	fb04 f101 	mul.w	r1, r4, r1
 800557c:	440b      	add	r3, r1
 800557e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005582:	429a      	cmp	r2, r3
 8005584:	da0c      	bge.n	80055a0 <PowerConsumption_FSM+0x1dc>
						AdcBufferPeakMax[channelIndex] = AdcBuffer[channelIndex][sampleIndex];
 8005586:	7bb9      	ldrb	r1, [r7, #14]
 8005588:	7b7a      	ldrb	r2, [r7, #13]
 800558a:	7bbb      	ldrb	r3, [r7, #14]
 800558c:	483f      	ldr	r0, [pc, #252]	; (800568c <PowerConsumption_FSM+0x2c8>)
 800558e:	24c8      	movs	r4, #200	; 0xc8
 8005590:	fb04 f101 	mul.w	r1, r4, r1
 8005594:	440a      	add	r2, r1
 8005596:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800559a:	493e      	ldr	r1, [pc, #248]	; (8005694 <PowerConsumption_FSM+0x2d0>)
 800559c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					}
					if(AdcBufferPeakMin[channelIndex] > AdcBuffer[channelIndex][sampleIndex]){
 80055a0:	7bbb      	ldrb	r3, [r7, #14]
 80055a2:	4a3d      	ldr	r2, [pc, #244]	; (8005698 <PowerConsumption_FSM+0x2d4>)
 80055a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80055a8:	7bb9      	ldrb	r1, [r7, #14]
 80055aa:	7b7b      	ldrb	r3, [r7, #13]
 80055ac:	4837      	ldr	r0, [pc, #220]	; (800568c <PowerConsumption_FSM+0x2c8>)
 80055ae:	24c8      	movs	r4, #200	; 0xc8
 80055b0:	fb04 f101 	mul.w	r1, r4, r1
 80055b4:	440b      	add	r3, r1
 80055b6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	dd0c      	ble.n	80055d8 <PowerConsumption_FSM+0x214>
						AdcBufferPeakMin[channelIndex] = AdcBuffer[channelIndex][sampleIndex];
 80055be:	7bb9      	ldrb	r1, [r7, #14]
 80055c0:	7b7a      	ldrb	r2, [r7, #13]
 80055c2:	7bbb      	ldrb	r3, [r7, #14]
 80055c4:	4831      	ldr	r0, [pc, #196]	; (800568c <PowerConsumption_FSM+0x2c8>)
 80055c6:	24c8      	movs	r4, #200	; 0xc8
 80055c8:	fb04 f101 	mul.w	r1, r4, r1
 80055cc:	440a      	add	r2, r1
 80055ce:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80055d2:	4931      	ldr	r1, [pc, #196]	; (8005698 <PowerConsumption_FSM+0x2d4>)
 80055d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					}
				}
				int32_t tempRealADCValue = AdcBuffer[channelIndex][sampleIndex];
 80055d8:	7bba      	ldrb	r2, [r7, #14]
 80055da:	7b7b      	ldrb	r3, [r7, #13]
 80055dc:	492b      	ldr	r1, [pc, #172]	; (800568c <PowerConsumption_FSM+0x2c8>)
 80055de:	20c8      	movs	r0, #200	; 0xc8
 80055e0:	fb00 f202 	mul.w	r2, r0, r2
 80055e4:	4413      	add	r3, r2
 80055e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80055ea:	603b      	str	r3, [r7, #0]
				array_Of_Vrms_ADC_Values[channelIndex] += tempRealADCValue * tempRealADCValue;
 80055ec:	7bbb      	ldrb	r3, [r7, #14]
 80055ee:	4a2b      	ldr	r2, [pc, #172]	; (800569c <PowerConsumption_FSM+0x2d8>)
 80055f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	6839      	ldr	r1, [r7, #0]
 80055f8:	fb01 f303 	mul.w	r3, r1, r3
 80055fc:	4619      	mov	r1, r3
 80055fe:	7bbb      	ldrb	r3, [r7, #14]
 8005600:	440a      	add	r2, r1
 8005602:	4926      	ldr	r1, [pc, #152]	; (800569c <PowerConsumption_FSM+0x2d8>)
 8005604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if(sampleIndex == AdcDmaBufferIndexFilter - 1){
 8005608:	7b7a      	ldrb	r2, [r7, #13]
 800560a:	4b1c      	ldr	r3, [pc, #112]	; (800567c <PowerConsumption_FSM+0x2b8>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3b01      	subs	r3, #1
 8005610:	429a      	cmp	r2, r3
 8005612:	f040 80a4 	bne.w	800575e <PowerConsumption_FSM+0x39a>
					int32_t tempPeakPeak = AdcBufferPeakMax[channelIndex] - AdcBufferPeakMin[channelIndex];
 8005616:	7bbb      	ldrb	r3, [r7, #14]
 8005618:	4a1e      	ldr	r2, [pc, #120]	; (8005694 <PowerConsumption_FSM+0x2d0>)
 800561a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800561e:	7bbb      	ldrb	r3, [r7, #14]
 8005620:	491d      	ldr	r1, [pc, #116]	; (8005698 <PowerConsumption_FSM+0x2d4>)
 8005622:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	60bb      	str	r3, [r7, #8]

					if(AdcBufferPeakMax[channelIndex] <= 10 || AdcBufferPeakMin[channelIndex] >= -10){
 800562a:	7bbb      	ldrb	r3, [r7, #14]
 800562c:	4a19      	ldr	r2, [pc, #100]	; (8005694 <PowerConsumption_FSM+0x2d0>)
 800562e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005632:	2b0a      	cmp	r3, #10
 8005634:	dd06      	ble.n	8005644 <PowerConsumption_FSM+0x280>
 8005636:	7bbb      	ldrb	r3, [r7, #14]
 8005638:	4a17      	ldr	r2, [pc, #92]	; (8005698 <PowerConsumption_FSM+0x2d4>)
 800563a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800563e:	f113 0f0a 	cmn.w	r3, #10
 8005642:	db02      	blt.n	800564a <PowerConsumption_FSM+0x286>
						tempPeakPeak = 0;
 8005644:	2300      	movs	r3, #0
 8005646:	60bb      	str	r3, [r7, #8]
 8005648:	e004      	b.n	8005654 <PowerConsumption_FSM+0x290>
					} else if(tempPeakPeak < 60){
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2b3b      	cmp	r3, #59	; 0x3b
 800564e:	dc01      	bgt.n	8005654 <PowerConsumption_FSM+0x290>
						tempPeakPeak = 0;
 8005650:	2300      	movs	r3, #0
 8005652:	60bb      	str	r3, [r7, #8]
					}
					if(cycleCounter == 0){
 8005654:	4b0a      	ldr	r3, [pc, #40]	; (8005680 <PowerConsumption_FSM+0x2bc>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d123      	bne.n	80056a4 <PowerConsumption_FSM+0x2e0>
						AdcBufferPeakPeak[channelIndex] = tempPeakPeak;
 800565c:	7bbb      	ldrb	r3, [r7, #14]
 800565e:	4910      	ldr	r1, [pc, #64]	; (80056a0 <PowerConsumption_FSM+0x2dc>)
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005666:	e027      	b.n	80056b8 <PowerConsumption_FSM+0x2f4>
 8005668:	200001eb 	.word	0x200001eb
 800566c:	20000005 	.word	0x20000005
 8005670:	08005379 	.word	0x08005379
 8005674:	200001ea 	.word	0x200001ea
 8005678:	200001ec 	.word	0x200001ec
 800567c:	200001e4 	.word	0x200001e4
 8005680:	200001ed 	.word	0x200001ed
 8005684:	200001e8 	.word	0x200001e8
 8005688:	20000558 	.word	0x20000558
 800568c:	20000700 	.word	0x20000700
 8005690:	51eb851f 	.word	0x51eb851f
 8005694:	200006d8 	.word	0x200006d8
 8005698:	20002754 	.word	0x20002754
 800569c:	2000272c 	.word	0x2000272c
 80056a0:	200006b0 	.word	0x200006b0
					} else {
						AdcBufferPeakPeak[channelIndex] = AdcBufferPeakPeak[channelIndex] + tempPeakPeak;
 80056a4:	7bbb      	ldrb	r3, [r7, #14]
 80056a6:	4a88      	ldr	r2, [pc, #544]	; (80058c8 <PowerConsumption_FSM+0x504>)
 80056a8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80056ac:	7bbb      	ldrb	r3, [r7, #14]
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	440a      	add	r2, r1
 80056b2:	4985      	ldr	r1, [pc, #532]	; (80058c8 <PowerConsumption_FSM+0x504>)
 80056b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					}
					array_Of_Vrms_ADC_Values[channelIndex] = (array_Of_Vrms_ADC_Values[channelIndex])/AdcDmaBufferIndexFilter;
 80056b8:	7bbb      	ldrb	r3, [r7, #14]
 80056ba:	4a84      	ldr	r2, [pc, #528]	; (80058cc <PowerConsumption_FSM+0x508>)
 80056bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80056c0:	4b83      	ldr	r3, [pc, #524]	; (80058d0 <PowerConsumption_FSM+0x50c>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4619      	mov	r1, r3
 80056c6:	7bbb      	ldrb	r3, [r7, #14]
 80056c8:	fbb2 f2f1 	udiv	r2, r2, r1
 80056cc:	497f      	ldr	r1, [pc, #508]	; (80058cc <PowerConsumption_FSM+0x508>)
 80056ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(cycleCounter == 0){
 80056d2:	4b80      	ldr	r3, [pc, #512]	; (80058d4 <PowerConsumption_FSM+0x510>)
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d118      	bne.n	800570c <PowerConsumption_FSM+0x348>
						array_Of_Average_Vrms_ADC_Values[channelIndex] = sqrt(array_Of_Vrms_ADC_Values[channelIndex]);
 80056da:	7bbb      	ldrb	r3, [r7, #14]
 80056dc:	4a7b      	ldr	r2, [pc, #492]	; (80058cc <PowerConsumption_FSM+0x508>)
 80056de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fa fe74 	bl	80003d0 <__aeabi_ui2d>
 80056e8:	4603      	mov	r3, r0
 80056ea:	460c      	mov	r4, r1
 80056ec:	4618      	mov	r0, r3
 80056ee:	4621      	mov	r1, r4
 80056f0:	f005 f860 	bl	800a7b4 <sqrt>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	7bbc      	ldrb	r4, [r7, #14]
 80056fa:	4610      	mov	r0, r2
 80056fc:	4619      	mov	r1, r3
 80056fe:	f7fb f991 	bl	8000a24 <__aeabi_d2uiz>
 8005702:	4602      	mov	r2, r0
 8005704:	4b74      	ldr	r3, [pc, #464]	; (80058d8 <PowerConsumption_FSM+0x514>)
 8005706:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800570a:	e028      	b.n	800575e <PowerConsumption_FSM+0x39a>
					} else {
						array_Of_Average_Vrms_ADC_Values[channelIndex] = array_Of_Average_Vrms_ADC_Values[channelIndex] + sqrt(array_Of_Vrms_ADC_Values[channelIndex]);
 800570c:	7bbb      	ldrb	r3, [r7, #14]
 800570e:	4a72      	ldr	r2, [pc, #456]	; (80058d8 <PowerConsumption_FSM+0x514>)
 8005710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005714:	4618      	mov	r0, r3
 8005716:	f7fa fe5b 	bl	80003d0 <__aeabi_ui2d>
 800571a:	4604      	mov	r4, r0
 800571c:	460d      	mov	r5, r1
 800571e:	7bbb      	ldrb	r3, [r7, #14]
 8005720:	4a6a      	ldr	r2, [pc, #424]	; (80058cc <PowerConsumption_FSM+0x508>)
 8005722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005726:	4618      	mov	r0, r3
 8005728:	f7fa fe52 	bl	80003d0 <__aeabi_ui2d>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	4610      	mov	r0, r2
 8005732:	4619      	mov	r1, r3
 8005734:	f005 f83e 	bl	800a7b4 <sqrt>
 8005738:	4602      	mov	r2, r0
 800573a:	460b      	mov	r3, r1
 800573c:	4620      	mov	r0, r4
 800573e:	4629      	mov	r1, r5
 8005740:	f7fa fd0a 	bl	8000158 <__adddf3>
 8005744:	4603      	mov	r3, r0
 8005746:	460c      	mov	r4, r1
 8005748:	461a      	mov	r2, r3
 800574a:	4623      	mov	r3, r4
 800574c:	7bbc      	ldrb	r4, [r7, #14]
 800574e:	4610      	mov	r0, r2
 8005750:	4619      	mov	r1, r3
 8005752:	f7fb f967 	bl	8000a24 <__aeabi_d2uiz>
 8005756:	4602      	mov	r2, r0
 8005758:	4b5f      	ldr	r3, [pc, #380]	; (80058d8 <PowerConsumption_FSM+0x514>)
 800575a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			for(uint8_t sampleIndex = 0; sampleIndex < AdcDmaBufferIndexFilter; sampleIndex ++){
 800575e:	7b7b      	ldrb	r3, [r7, #13]
 8005760:	3301      	adds	r3, #1
 8005762:	737b      	strb	r3, [r7, #13]
 8005764:	7b7a      	ldrb	r2, [r7, #13]
 8005766:	4b5a      	ldr	r3, [pc, #360]	; (80058d0 <PowerConsumption_FSM+0x50c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	f6ff aede 	blt.w	800552c <PowerConsumption_FSM+0x168>
		for(uint8_t channelIndex = 0; channelIndex < NUMBER_OF_RELAYS; channelIndex ++){
 8005770:	7bbb      	ldrb	r3, [r7, #14]
 8005772:	3301      	adds	r3, #1
 8005774:	73bb      	strb	r3, [r7, #14]
 8005776:	7bbb      	ldrb	r3, [r7, #14]
 8005778:	2b09      	cmp	r3, #9
 800577a:	f67f aed4 	bls.w	8005526 <PowerConsumption_FSM+0x162>
					}
				}

			}
		}
		cycleCounter++;
 800577e:	4b55      	ldr	r3, [pc, #340]	; (80058d4 <PowerConsumption_FSM+0x510>)
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	3301      	adds	r3, #1
 8005784:	b2da      	uxtb	r2, r3
 8005786:	4b53      	ldr	r3, [pc, #332]	; (80058d4 <PowerConsumption_FSM+0x510>)
 8005788:	701a      	strb	r2, [r3, #0]
		if(cycleCounter >= NUMBER_OF_SAMPLES_PER_AVERAGE){
 800578a:	4b52      	ldr	r3, [pc, #328]	; (80058d4 <PowerConsumption_FSM+0x510>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	2b03      	cmp	r3, #3
 8005790:	d959      	bls.n	8005846 <PowerConsumption_FSM+0x482>
			cycleCounter = 0;
 8005792:	4b50      	ldr	r3, [pc, #320]	; (80058d4 <PowerConsumption_FSM+0x510>)
 8005794:	2200      	movs	r2, #0
 8005796:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < NUMBER_OF_RELAYS; i++){
 8005798:	2300      	movs	r3, #0
 800579a:	71fb      	strb	r3, [r7, #7]
 800579c:	e047      	b.n	800582e <PowerConsumption_FSM+0x46a>
				AdcBufferPeakPeak[i] = AdcBufferPeakPeak[i] >> SAMPLE_STEPS;
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	4a49      	ldr	r2, [pc, #292]	; (80058c8 <PowerConsumption_FSM+0x504>)
 80057a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80057a6:	79fb      	ldrb	r3, [r7, #7]
 80057a8:	1092      	asrs	r2, r2, #2
 80057aa:	4947      	ldr	r1, [pc, #284]	; (80058c8 <PowerConsumption_FSM+0x504>)
 80057ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				array_Of_Average_Vrms_ADC_Values[i] = array_Of_Average_Vrms_ADC_Values[i] >> SAMPLE_STEPS;
 80057b0:	79fb      	ldrb	r3, [r7, #7]
 80057b2:	4a49      	ldr	r2, [pc, #292]	; (80058d8 <PowerConsumption_FSM+0x514>)
 80057b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80057b8:	79fb      	ldrb	r3, [r7, #7]
 80057ba:	0892      	lsrs	r2, r2, #2
 80057bc:	4946      	ldr	r1, [pc, #280]	; (80058d8 <PowerConsumption_FSM+0x514>)
 80057be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
//				PowerFactor[i] = (array_Of_Average_Vrms_ADC_Values[i]*1000 * 100 * 2) / (AdcBufferPeakPeak[i] * 707);
				PowerFactor[i] = (array_Of_Average_Vrms_ADC_Values[i]*283) / (AdcBufferPeakPeak[i]);
 80057c2:	79fb      	ldrb	r3, [r7, #7]
 80057c4:	4a44      	ldr	r2, [pc, #272]	; (80058d8 <PowerConsumption_FSM+0x514>)
 80057c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ca:	f240 121b 	movw	r2, #283	; 0x11b
 80057ce:	fb02 f303 	mul.w	r3, r2, r3
 80057d2:	79fa      	ldrb	r2, [r7, #7]
 80057d4:	493c      	ldr	r1, [pc, #240]	; (80058c8 <PowerConsumption_FSM+0x504>)
 80057d6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80057da:	fbb3 f2f2 	udiv	r2, r3, r2
 80057de:	79fb      	ldrb	r3, [r7, #7]
 80057e0:	4611      	mov	r1, r2
 80057e2:	4a3e      	ldr	r2, [pc, #248]	; (80058dc <PowerConsumption_FSM+0x518>)
 80057e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if(PowerFactor[i] > 98){
 80057e8:	79fb      	ldrb	r3, [r7, #7]
 80057ea:	4a3c      	ldr	r2, [pc, #240]	; (80058dc <PowerConsumption_FSM+0x518>)
 80057ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057f0:	2b62      	cmp	r3, #98	; 0x62
 80057f2:	dd04      	ble.n	80057fe <PowerConsumption_FSM+0x43a>
					PowerFactor[i] = 100;
 80057f4:	79fb      	ldrb	r3, [r7, #7]
 80057f6:	4a39      	ldr	r2, [pc, #228]	; (80058dc <PowerConsumption_FSM+0x518>)
 80057f8:	2164      	movs	r1, #100	; 0x64
 80057fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				Node_Update(i+1, array_Of_Average_Vrms_ADC_Values[i] * 237, 225, PowerFactor[i], 1);
 80057fe:	79fb      	ldrb	r3, [r7, #7]
 8005800:	3301      	adds	r3, #1
 8005802:	b2d8      	uxtb	r0, r3
 8005804:	79fb      	ldrb	r3, [r7, #7]
 8005806:	4a34      	ldr	r2, [pc, #208]	; (80058d8 <PowerConsumption_FSM+0x514>)
 8005808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800580c:	22ed      	movs	r2, #237	; 0xed
 800580e:	fb02 f103 	mul.w	r1, r2, r3
 8005812:	79fb      	ldrb	r3, [r7, #7]
 8005814:	4a31      	ldr	r2, [pc, #196]	; (80058dc <PowerConsumption_FSM+0x518>)
 8005816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800581a:	b2da      	uxtb	r2, r3
 800581c:	2301      	movs	r3, #1
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	4613      	mov	r3, r2
 8005822:	22e1      	movs	r2, #225	; 0xe1
 8005824:	f001 fd96 	bl	8007354 <Node_Update>
			for (uint8_t i = 0; i < NUMBER_OF_RELAYS; i++){
 8005828:	79fb      	ldrb	r3, [r7, #7]
 800582a:	3301      	adds	r3, #1
 800582c:	71fb      	strb	r3, [r7, #7]
 800582e:	79fb      	ldrb	r3, [r7, #7]
 8005830:	2b09      	cmp	r3, #9
 8005832:	d9b4      	bls.n	800579e <PowerConsumption_FSM+0x3da>
			}

			adcState = ADC_REPORT_POWER_DATA;
 8005834:	4b2a      	ldr	r3, [pc, #168]	; (80058e0 <PowerConsumption_FSM+0x51c>)
 8005836:	2205      	movs	r2, #5
 8005838:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, RESET);
 800583a:	2200      	movs	r2, #0
 800583c:	2104      	movs	r1, #4
 800583e:	4829      	ldr	r0, [pc, #164]	; (80058e4 <PowerConsumption_FSM+0x520>)
 8005840:	f7fc fb7e 	bl	8001f40 <HAL_GPIO_WritePin>
		} else {
			externalInterruptCounter = 0;
			adcState = ADC_FIND_ZERO_VOLTAGE_POINT;
		}
		break;
 8005844:	e03c      	b.n	80058c0 <PowerConsumption_FSM+0x4fc>
			externalInterruptCounter = 0;
 8005846:	4b28      	ldr	r3, [pc, #160]	; (80058e8 <PowerConsumption_FSM+0x524>)
 8005848:	2200      	movs	r2, #0
 800584a:	701a      	strb	r2, [r3, #0]
			adcState = ADC_FIND_ZERO_VOLTAGE_POINT;
 800584c:	4b24      	ldr	r3, [pc, #144]	; (80058e0 <PowerConsumption_FSM+0x51c>)
 800584e:	2201      	movs	r2, #1
 8005850:	701a      	strb	r2, [r3, #0]
		break;
 8005852:	e035      	b.n	80058c0 <PowerConsumption_FSM+0x4fc>

	case ADC_REPORT_POWER_DATA:
		if(is_Adc_Reading_Timeout()){
 8005854:	f7ff fd9c 	bl	8005390 <is_Adc_Reading_Timeout>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d02f      	beq.n	80058be <PowerConsumption_FSM+0x4fa>
			HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, SET);
 800585e:	2201      	movs	r2, #1
 8005860:	2104      	movs	r1, #4
 8005862:	4820      	ldr	r0, [pc, #128]	; (80058e4 <PowerConsumption_FSM+0x520>)
 8005864:	f7fc fb6c 	bl	8001f40 <HAL_GPIO_WritePin>
			for (uint8_t channelIndex = 0; channelIndex < NUMBER_OF_RELAYS; channelIndex++) {
 8005868:	2300      	movs	r3, #0
 800586a:	71bb      	strb	r3, [r7, #6]
 800586c:	e016      	b.n	800589c <PowerConsumption_FSM+0x4d8>
				array_Of_Vrms_ADC_Values[channelIndex]  = 0;
 800586e:	79bb      	ldrb	r3, [r7, #6]
 8005870:	4a16      	ldr	r2, [pc, #88]	; (80058cc <PowerConsumption_FSM+0x508>)
 8005872:	2100      	movs	r1, #0
 8005874:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				array_Of_Average_Vrms_ADC_Values[channelIndex] = 0;
 8005878:	79bb      	ldrb	r3, [r7, #6]
 800587a:	4a17      	ldr	r2, [pc, #92]	; (80058d8 <PowerConsumption_FSM+0x514>)
 800587c:	2100      	movs	r1, #0
 800587e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				AdcBufferPeakMax[channelIndex] = 0;
 8005882:	79bb      	ldrb	r3, [r7, #6]
 8005884:	4a19      	ldr	r2, [pc, #100]	; (80058ec <PowerConsumption_FSM+0x528>)
 8005886:	2100      	movs	r1, #0
 8005888:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				AdcBufferPeakMin[channelIndex] = 0;
 800588c:	79bb      	ldrb	r3, [r7, #6]
 800588e:	4a18      	ldr	r2, [pc, #96]	; (80058f0 <PowerConsumption_FSM+0x52c>)
 8005890:	2100      	movs	r1, #0
 8005892:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (uint8_t channelIndex = 0; channelIndex < NUMBER_OF_RELAYS; channelIndex++) {
 8005896:	79bb      	ldrb	r3, [r7, #6]
 8005898:	3301      	adds	r3, #1
 800589a:	71bb      	strb	r3, [r7, #6]
 800589c:	79bb      	ldrb	r3, [r7, #6]
 800589e:	2b09      	cmp	r3, #9
 80058a0:	d9e5      	bls.n	800586e <PowerConsumption_FSM+0x4aa>
			}
			adcState = ADC_SETUP_TIMER_ONE_SECOND;
 80058a2:	4b0f      	ldr	r3, [pc, #60]	; (80058e0 <PowerConsumption_FSM+0x51c>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	701a      	strb	r2, [r3, #0]
		}
		break;
 80058a8:	e009      	b.n	80058be <PowerConsumption_FSM+0x4fa>

	default:
		adcState = ADC_SETUP_TIMER_ONE_SECOND;
 80058aa:	4b0d      	ldr	r3, [pc, #52]	; (80058e0 <PowerConsumption_FSM+0x51c>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	701a      	strb	r2, [r3, #0]
		break;
 80058b0:	e006      	b.n	80058c0 <PowerConsumption_FSM+0x4fc>
		break;
 80058b2:	bf00      	nop
 80058b4:	e004      	b.n	80058c0 <PowerConsumption_FSM+0x4fc>
		break;
 80058b6:	bf00      	nop
 80058b8:	e002      	b.n	80058c0 <PowerConsumption_FSM+0x4fc>
		break;
 80058ba:	bf00      	nop
 80058bc:	e000      	b.n	80058c0 <PowerConsumption_FSM+0x4fc>
		break;
 80058be:	bf00      	nop
	}
}
 80058c0:	bf00      	nop
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bdb0      	pop	{r4, r5, r7, pc}
 80058c8:	200006b0 	.word	0x200006b0
 80058cc:	2000272c 	.word	0x2000272c
 80058d0:	200001e4 	.word	0x200001e4
 80058d4:	200001ed 	.word	0x200001ed
 80058d8:	20002704 	.word	0x20002704
 80058dc:	200005e0 	.word	0x200005e0
 80058e0:	200001eb 	.word	0x200001eb
 80058e4:	40010c00 	.word	0x40010c00
 80058e8:	200001ec 	.word	0x200001ec
 80058ec:	200006d8 	.word	0x200006d8
 80058f0:	20002754 	.word	0x20002754

080058f4 <Adc_State_Display>:

*/



void Adc_State_Display(void){
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
	if(pre_adcState != adcState){
 80058f8:	4b0d      	ldr	r3, [pc, #52]	; (8005930 <Adc_State_Display+0x3c>)
 80058fa:	781a      	ldrb	r2, [r3, #0]
 80058fc:	4b0d      	ldr	r3, [pc, #52]	; (8005934 <Adc_State_Display+0x40>)
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	429a      	cmp	r2, r3
 8005902:	d012      	beq.n	800592a <Adc_State_Display+0x36>
		pre_adcState = adcState;
 8005904:	4b0b      	ldr	r3, [pc, #44]	; (8005934 <Adc_State_Display+0x40>)
 8005906:	781a      	ldrb	r2, [r3, #0]
 8005908:	4b09      	ldr	r3, [pc, #36]	; (8005930 <Adc_State_Display+0x3c>)
 800590a:	701a      	strb	r2, [r3, #0]
		switch(adcState){
 800590c:	4b09      	ldr	r3, [pc, #36]	; (8005934 <Adc_State_Display+0x40>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2b05      	cmp	r3, #5
 8005912:	d002      	beq.n	800591a <Adc_State_Display+0x26>
 8005914:	2b06      	cmp	r3, #6
 8005916:	d004      	beq.n	8005922 <Adc_State_Display+0x2e>

		case MAX_NUMBER_OF_ADC_STATES:
			DEBUG_ADC(UART3_SendToHost((uint8_t*)"MAX_NUMBER_OF_ADC_STATES\r"););
			break;
		default:
			break;
 8005918:	e008      	b.n	800592c <Adc_State_Display+0x38>
			DEBUG_ADC(UART3_SendToHost((uint8_t*)"ADC_REPORT_POWER_DATA\r"););
 800591a:	4807      	ldr	r0, [pc, #28]	; (8005938 <Adc_State_Display+0x44>)
 800591c:	f003 fdd6 	bl	80094cc <UART3_SendToHost>
			break;
 8005920:	e004      	b.n	800592c <Adc_State_Display+0x38>
			DEBUG_ADC(UART3_SendToHost((uint8_t*)"MAX_NUMBER_OF_ADC_STATES\r"););
 8005922:	4806      	ldr	r0, [pc, #24]	; (800593c <Adc_State_Display+0x48>)
 8005924:	f003 fdd2 	bl	80094cc <UART3_SendToHost>
			break;
 8005928:	e000      	b.n	800592c <Adc_State_Display+0x38>
		}
	}
 800592a:	bf00      	nop

}
 800592c:	bf00      	nop
 800592e:	bd80      	pop	{r7, pc}
 8005930:	20000006 	.word	0x20000006
 8005934:	200001eb 	.word	0x200001eb
 8005938:	0800a9e4 	.word	0x0800a9e4
 800593c:	0800a9fc 	.word	0x0800a9fc

08005940 <Clear_Ping_Request_Timeout_Flag>:
uint8_t is_Publish_Message_Timeout(void);

void Update_Publish_Status_Message(void);
void Update_Publish_Power_Message(uint8_t outletID, int32_t displayData);

void Clear_Ping_Request_Timeout_Flag(void){
 8005940:	b480      	push	{r7}
 8005942:	af00      	add	r7, sp, #0
	ping_Request_TimeoutFlag = 0;
 8005944:	4b03      	ldr	r3, [pc, #12]	; (8005954 <Clear_Ping_Request_Timeout_Flag+0x14>)
 8005946:	2200      	movs	r2, #0
 8005948:	701a      	strb	r2, [r3, #0]
}
 800594a:	bf00      	nop
 800594c:	46bd      	mov	sp, r7
 800594e:	bc80      	pop	{r7}
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	200001ee 	.word	0x200001ee

08005958 <Set_Ping_Request_Timeout_Flag>:
void Set_Ping_Request_Timeout_Flag(void){
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
	ping_Request_TimeoutFlag = 1;
 800595c:	4b03      	ldr	r3, [pc, #12]	; (800596c <Set_Ping_Request_Timeout_Flag+0x14>)
 800595e:	2201      	movs	r2, #1
 8005960:	701a      	strb	r2, [r3, #0]
}
 8005962:	bf00      	nop
 8005964:	46bd      	mov	sp, r7
 8005966:	bc80      	pop	{r7}
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	200001ee 	.word	0x200001ee

08005970 <is_Ping_Request_Timeout>:
uint8_t is_Ping_Request_Timeout(void){
 8005970:	b480      	push	{r7}
 8005972:	af00      	add	r7, sp, #0
	return ping_Request_TimeoutFlag;
 8005974:	4b02      	ldr	r3, [pc, #8]	; (8005980 <is_Ping_Request_Timeout+0x10>)
 8005976:	781b      	ldrb	r3, [r3, #0]
}
 8005978:	4618      	mov	r0, r3
 800597a:	46bd      	mov	sp, r7
 800597c:	bc80      	pop	{r7}
 800597e:	4770      	bx	lr
 8005980:	200001ee 	.word	0x200001ee

08005984 <Clear_Publish_Message_Timeout_Flag>:

void Clear_Publish_Message_Timeout_Flag(void){
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0
	publish_message_TimeoutFlag = 0;
 8005988:	4b03      	ldr	r3, [pc, #12]	; (8005998 <Clear_Publish_Message_Timeout_Flag+0x14>)
 800598a:	2200      	movs	r2, #0
 800598c:	701a      	strb	r2, [r3, #0]
}
 800598e:	bf00      	nop
 8005990:	46bd      	mov	sp, r7
 8005992:	bc80      	pop	{r7}
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	200001ef 	.word	0x200001ef

0800599c <Set_Publish_Message_Timeout_Flag>:
void Set_Publish_Message_Timeout_Flag(void){
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0
	publish_message_TimeoutFlag = 1;
 80059a0:	4b03      	ldr	r3, [pc, #12]	; (80059b0 <Set_Publish_Message_Timeout_Flag+0x14>)
 80059a2:	2201      	movs	r2, #1
 80059a4:	701a      	strb	r2, [r3, #0]
}
 80059a6:	bf00      	nop
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bc80      	pop	{r7}
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	200001ef 	.word	0x200001ef

080059b4 <is_Publish_Message_Timeout>:
uint8_t is_Publish_Message_Timeout(void){
 80059b4:	b480      	push	{r7}
 80059b6:	af00      	add	r7, sp, #0
	return publish_message_TimeoutFlag;
 80059b8:	4b02      	ldr	r3, [pc, #8]	; (80059c4 <is_Publish_Message_Timeout+0x10>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr
 80059c4:	200001ef 	.word	0x200001ef

080059c8 <Update_Power_Consumption>:

void Update_Power_Consumption(void){
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
	for(uint8_t outletID = 0; outletID < NUMBER_OF_RELAYS; outletID++){
 80059ce:	2300      	movs	r3, #0
 80059d0:	71fb      	strb	r3, [r7, #7]
 80059d2:	e01f      	b.n	8005a14 <Update_Power_Consumption+0x4c>
		if(Get_Relay_Status(outletID)){
 80059d4:	79fb      	ldrb	r3, [r7, #7]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f001 ffb6 	bl	8007948 <Get_Relay_Status>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d010      	beq.n	8005a04 <Update_Power_Consumption+0x3c>
			array_Of_Power_Consumption_In_WattHour[outletID] = array_Of_Power_Consumption_In_WattHour[outletID] + (outletID + 1) * 10;
 80059e2:	79fb      	ldrb	r3, [r7, #7]
 80059e4:	4a0f      	ldr	r2, [pc, #60]	; (8005a24 <Update_Power_Consumption+0x5c>)
 80059e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80059ea:	79fb      	ldrb	r3, [r7, #7]
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	4613      	mov	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	461a      	mov	r2, r3
 80059f8:	79fb      	ldrb	r3, [r7, #7]
 80059fa:	440a      	add	r2, r1
 80059fc:	4909      	ldr	r1, [pc, #36]	; (8005a24 <Update_Power_Consumption+0x5c>)
 80059fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005a02:	e004      	b.n	8005a0e <Update_Power_Consumption+0x46>
		} else {
			array_Of_Power_Consumption_In_WattHour[outletID] = 0;
 8005a04:	79fb      	ldrb	r3, [r7, #7]
 8005a06:	4a07      	ldr	r2, [pc, #28]	; (8005a24 <Update_Power_Consumption+0x5c>)
 8005a08:	2100      	movs	r1, #0
 8005a0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint8_t outletID = 0; outletID < NUMBER_OF_RELAYS; outletID++){
 8005a0e:	79fb      	ldrb	r3, [r7, #7]
 8005a10:	3301      	adds	r3, #1
 8005a12:	71fb      	strb	r3, [r7, #7]
 8005a14:	79fb      	ldrb	r3, [r7, #7]
 8005a16:	2b09      	cmp	r3, #9
 8005a18:	d9dc      	bls.n	80059d4 <Update_Power_Consumption+0xc>
		}
	}
}
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	20002698 	.word	0x20002698

08005a28 <Update_Publish_Power_Message_All_Outlets>:
		publish_message[publishMessageIndex++] = tempValue + 0x30;
	}
	publish_message_length = publishMessageIndex;
}

void Update_Publish_Power_Message_All_Outlets(void){
 8005a28:	b5b0      	push	{r4, r5, r7, lr}
 8005a2a:	b08e      	sub	sp, #56	; 0x38
 8005a2c:	af00      	add	r7, sp, #0

	uint8_t publishMessageIndex = 0;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint32_t tempValue;
	for(publishMessageIndex = 0; publishMessageIndex < 20; publishMessageIndex ++){
 8005a34:	2300      	movs	r3, #0
 8005a36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005a3a:	e009      	b.n	8005a50 <Update_Publish_Power_Message_All_Outlets+0x28>
		publish_message[publishMessageIndex] = 0;
 8005a3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a40:	4a80      	ldr	r2, [pc, #512]	; (8005c44 <Update_Publish_Power_Message_All_Outlets+0x21c>)
 8005a42:	2100      	movs	r1, #0
 8005a44:	54d1      	strb	r1, [r2, r3]
	for(publishMessageIndex = 0; publishMessageIndex < 20; publishMessageIndex ++){
 8005a46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005a50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a54:	2b13      	cmp	r3, #19
 8005a56:	d9f1      	bls.n	8005a3c <Update_Publish_Power_Message_All_Outlets+0x14>
	}
	publishMessageIndex = 0;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
//	publish_message[publishMessageIndex++] = BOX_ID + 0x30;
	for(uint8_t outletID = 0; outletID < NUMBER_OF_RELAYS; outletID++){
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8005a64:	e33c      	b.n	80060e0 <Update_Publish_Power_Message_All_Outlets+0x6b8>
		publish_message[publishMessageIndex++] = outletID + 0x30;
 8005a66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 8005a70:	461a      	mov	r2, r3
 8005a72:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005a76:	3330      	adds	r3, #48	; 0x30
 8005a78:	b2d9      	uxtb	r1, r3
 8005a7a:	4b72      	ldr	r3, [pc, #456]	; (8005c44 <Update_Publish_Power_Message_All_Outlets+0x21c>)
 8005a7c:	5499      	strb	r1, [r3, r2]
		publish_message[publishMessageIndex++] = '-';
 8005a7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 8005a88:	461a      	mov	r2, r3
 8005a8a:	4b6e      	ldr	r3, [pc, #440]	; (8005c44 <Update_Publish_Power_Message_All_Outlets+0x21c>)
 8005a8c:	212d      	movs	r1, #45	; 0x2d
 8005a8e:	5499      	strb	r1, [r3, r2]
		tempValue = Get_Power_Consumption(outletID);
 8005a90:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005a94:	4618      	mov	r0, r3
 8005a96:	f001 fc45 	bl	8007324 <Get_Power_Consumption>
 8005a9a:	6338      	str	r0, [r7, #48]	; 0x30
		if(outletID == 3){
 8005a9c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005aa0:	2b03      	cmp	r3, #3
 8005aa2:	d114      	bne.n	8005ace <Update_Publish_Power_Message_All_Outlets+0xa6>
			uint8_t strtmpfsm[] = "                                               ";
 8005aa4:	4b68      	ldr	r3, [pc, #416]	; (8005c48 <Update_Publish_Power_Message_All_Outlets+0x220>)
 8005aa6:	463c      	mov	r4, r7
 8005aa8:	461d      	mov	r5, r3
 8005aaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005aac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ab2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005ab6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			sprintf((char*) strtmpfsm, "%d\r\n", (int) tempValue);
 8005aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005abc:	463b      	mov	r3, r7
 8005abe:	4963      	ldr	r1, [pc, #396]	; (8005c4c <Update_Publish_Power_Message_All_Outlets+0x224>)
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f004 fa65 	bl	8009f90 <siprintf>
			UART3_SendToHost((uint8_t *)strtmpfsm);
 8005ac6:	463b      	mov	r3, r7
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f003 fcff 	bl	80094cc <UART3_SendToHost>

		}
		if(tempValue >= 1000000){
 8005ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad0:	4a5f      	ldr	r2, [pc, #380]	; (8005c50 <Update_Publish_Power_Message_All_Outlets+0x228>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	f240 80ce 	bls.w	8005c74 <Update_Publish_Power_Message_All_Outlets+0x24c>
			publish_message[publishMessageIndex++] = tempValue/1000000 + 0x30;
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ada:	4a5e      	ldr	r2, [pc, #376]	; (8005c54 <Update_Publish_Power_Message_All_Outlets+0x22c>)
 8005adc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae0:	0c9b      	lsrs	r3, r3, #18
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ae8:	1c59      	adds	r1, r3, #1
 8005aea:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8005aee:	4619      	mov	r1, r3
 8005af0:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	4b53      	ldr	r3, [pc, #332]	; (8005c44 <Update_Publish_Power_Message_All_Outlets+0x21c>)
 8005af8:	545a      	strb	r2, [r3, r1]
			tempValue = tempValue % 1000000;
 8005afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afc:	4a55      	ldr	r2, [pc, #340]	; (8005c54 <Update_Publish_Power_Message_All_Outlets+0x22c>)
 8005afe:	fba2 1203 	umull	r1, r2, r2, r3
 8005b02:	0c92      	lsrs	r2, r2, #18
 8005b04:	4954      	ldr	r1, [pc, #336]	; (8005c58 <Update_Publish_Power_Message_All_Outlets+0x230>)
 8005b06:	fb01 f202 	mul.w	r2, r1, r2
 8005b0a:	1a9b      	subs	r3, r3, r2
 8005b0c:	633b      	str	r3, [r7, #48]	; 0x30
			publish_message[publishMessageIndex++] = tempValue/100000 + 0x30;
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b10:	095b      	lsrs	r3, r3, #5
 8005b12:	4a52      	ldr	r2, [pc, #328]	; (8005c5c <Update_Publish_Power_Message_All_Outlets+0x234>)
 8005b14:	fba2 2303 	umull	r2, r3, r2, r3
 8005b18:	09db      	lsrs	r3, r3, #7
 8005b1a:	b2da      	uxtb	r2, r3
 8005b1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b20:	1c59      	adds	r1, r3, #1
 8005b22:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8005b26:	4619      	mov	r1, r3
 8005b28:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	4b45      	ldr	r3, [pc, #276]	; (8005c44 <Update_Publish_Power_Message_All_Outlets+0x21c>)
 8005b30:	545a      	strb	r2, [r3, r1]
			tempValue = tempValue % 100000;
 8005b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b34:	095a      	lsrs	r2, r3, #5
 8005b36:	4949      	ldr	r1, [pc, #292]	; (8005c5c <Update_Publish_Power_Message_All_Outlets+0x234>)
 8005b38:	fba1 1202 	umull	r1, r2, r1, r2
 8005b3c:	09d2      	lsrs	r2, r2, #7
 8005b3e:	4948      	ldr	r1, [pc, #288]	; (8005c60 <Update_Publish_Power_Message_All_Outlets+0x238>)
 8005b40:	fb01 f202 	mul.w	r2, r1, r2
 8005b44:	1a9b      	subs	r3, r3, r2
 8005b46:	633b      	str	r3, [r7, #48]	; 0x30
			publish_message[publishMessageIndex++] = tempValue/10000 + 0x30;
 8005b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4a:	4a46      	ldr	r2, [pc, #280]	; (8005c64 <Update_Publish_Power_Message_All_Outlets+0x23c>)
 8005b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b50:	0b5b      	lsrs	r3, r3, #13
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b58:	1c59      	adds	r1, r3, #1
 8005b5a:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8005b5e:	4619      	mov	r1, r3
 8005b60:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	4b37      	ldr	r3, [pc, #220]	; (8005c44 <Update_Publish_Power_Message_All_Outlets+0x21c>)
 8005b68:	545a      	strb	r2, [r3, r1]
			tempValue = tempValue % 10000;
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6c:	4a3d      	ldr	r2, [pc, #244]	; (8005c64 <Update_Publish_Power_Message_All_Outlets+0x23c>)
 8005b6e:	fba2 1203 	umull	r1, r2, r2, r3
 8005b72:	0b52      	lsrs	r2, r2, #13
 8005b74:	f242 7110 	movw	r1, #10000	; 0x2710
 8005b78:	fb01 f202 	mul.w	r2, r1, r2
 8005b7c:	1a9b      	subs	r3, r3, r2
 8005b7e:	633b      	str	r3, [r7, #48]	; 0x30
			publish_message[publishMessageIndex++] = tempValue/1000 + 0x30;
 8005b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b82:	4a39      	ldr	r2, [pc, #228]	; (8005c68 <Update_Publish_Power_Message_All_Outlets+0x240>)
 8005b84:	fba2 2303 	umull	r2, r3, r2, r3
 8005b88:	099b      	lsrs	r3, r3, #6
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b90:	1c59      	adds	r1, r3, #1
 8005b92:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8005b96:	4619      	mov	r1, r3
 8005b98:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	4b29      	ldr	r3, [pc, #164]	; (8005c44 <Update_Publish_Power_Message_All_Outlets+0x21c>)
 8005ba0:	545a      	strb	r2, [r3, r1]
			tempValue = tempValue % 1000;
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba4:	4a30      	ldr	r2, [pc, #192]	; (8005c68 <Update_Publish_Power_Message_All_Outlets+0x240>)
 8005ba6:	fba2 1203 	umull	r1, r2, r2, r3
 8005baa:	0992      	lsrs	r2, r2, #6
 8005bac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005bb0:	fb01 f202 	mul.w	r2, r1, r2
 8005bb4:	1a9b      	subs	r3, r3, r2
 8005bb6:	633b      	str	r3, [r7, #48]	; 0x30
			publish_message[publishMessageIndex++] = tempValue/100 + 0x30;
 8005bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bba:	4a2c      	ldr	r2, [pc, #176]	; (8005c6c <Update_Publish_Power_Message_All_Outlets+0x244>)
 8005bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc0:	095b      	lsrs	r3, r3, #5
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005bc8:	1c59      	adds	r1, r3, #1
 8005bca:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8005bce:	4619      	mov	r1, r3
 8005bd0:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	4b1b      	ldr	r3, [pc, #108]	; (8005c44 <Update_Publish_Power_Message_All_Outlets+0x21c>)
 8005bd8:	545a      	strb	r2, [r3, r1]
			tempValue = tempValue % 100;
 8005bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bdc:	4a23      	ldr	r2, [pc, #140]	; (8005c6c <Update_Publish_Power_Message_All_Outlets+0x244>)
 8005bde:	fba2 1203 	umull	r1, r2, r2, r3
 8005be2:	0952      	lsrs	r2, r2, #5
 8005be4:	2164      	movs	r1, #100	; 0x64
 8005be6:	fb01 f202 	mul.w	r2, r1, r2
 8005bea:	1a9b      	subs	r3, r3, r2
 8005bec:	633b      	str	r3, [r7, #48]	; 0x30
			publish_message[publishMessageIndex++] = tempValue/10 + 0x30;
 8005bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf0:	4a1f      	ldr	r2, [pc, #124]	; (8005c70 <Update_Publish_Power_Message_All_Outlets+0x248>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	08db      	lsrs	r3, r3, #3
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005bfe:	1c59      	adds	r1, r3, #1
 8005c00:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8005c04:	4619      	mov	r1, r3
 8005c06:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	4b0d      	ldr	r3, [pc, #52]	; (8005c44 <Update_Publish_Power_Message_All_Outlets+0x21c>)
 8005c0e:	545a      	strb	r2, [r3, r1]
			tempValue = tempValue % 10;
 8005c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c12:	4b17      	ldr	r3, [pc, #92]	; (8005c70 <Update_Publish_Power_Message_All_Outlets+0x248>)
 8005c14:	fba3 1302 	umull	r1, r3, r3, r2
 8005c18:	08d9      	lsrs	r1, r3, #3
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	440b      	add	r3, r1
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	633b      	str	r3, [r7, #48]	; 0x30
			publish_message[publishMessageIndex++] = tempValue + 0x30;
 8005c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005c2e:	1c59      	adds	r1, r3, #1
 8005c30:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8005c34:	4619      	mov	r1, r3
 8005c36:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	4b01      	ldr	r3, [pc, #4]	; (8005c44 <Update_Publish_Power_Message_All_Outlets+0x21c>)
 8005c3e:	545a      	strb	r2, [r3, r1]
 8005c40:	e23c      	b.n	80060bc <Update_Publish_Power_Message_All_Outlets+0x694>
 8005c42:	bf00      	nop
 8005c44:	20002b64 	.word	0x20002b64
 8005c48:	0800aa20 	.word	0x0800aa20
 8005c4c:	0800aa18 	.word	0x0800aa18
 8005c50:	000f423f 	.word	0x000f423f
 8005c54:	431bde83 	.word	0x431bde83
 8005c58:	000f4240 	.word	0x000f4240
 8005c5c:	0a7c5ac5 	.word	0x0a7c5ac5
 8005c60:	000186a0 	.word	0x000186a0
 8005c64:	d1b71759 	.word	0xd1b71759
 8005c68:	10624dd3 	.word	0x10624dd3
 8005c6c:	51eb851f 	.word	0x51eb851f
 8005c70:	cccccccd 	.word	0xcccccccd

		} else if(tempValue >= 100000){
 8005c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c76:	4a90      	ldr	r2, [pc, #576]	; (8005eb8 <Update_Publish_Power_Message_All_Outlets+0x490>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	f240 809a 	bls.w	8005db2 <Update_Publish_Power_Message_All_Outlets+0x38a>
			publish_message[publishMessageIndex++] = tempValue/100000 + 0x30;
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c80:	095b      	lsrs	r3, r3, #5
 8005c82:	4a8e      	ldr	r2, [pc, #568]	; (8005ebc <Update_Publish_Power_Message_All_Outlets+0x494>)
 8005c84:	fba2 2303 	umull	r2, r3, r2, r3
 8005c88:	09db      	lsrs	r3, r3, #7
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005c90:	1c59      	adds	r1, r3, #1
 8005c92:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8005c96:	4619      	mov	r1, r3
 8005c98:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	4b88      	ldr	r3, [pc, #544]	; (8005ec0 <Update_Publish_Power_Message_All_Outlets+0x498>)
 8005ca0:	545a      	strb	r2, [r3, r1]
			tempValue = tempValue % 100000;
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	095a      	lsrs	r2, r3, #5
 8005ca6:	4985      	ldr	r1, [pc, #532]	; (8005ebc <Update_Publish_Power_Message_All_Outlets+0x494>)
 8005ca8:	fba1 1202 	umull	r1, r2, r1, r2
 8005cac:	09d2      	lsrs	r2, r2, #7
 8005cae:	4985      	ldr	r1, [pc, #532]	; (8005ec4 <Update_Publish_Power_Message_All_Outlets+0x49c>)
 8005cb0:	fb01 f202 	mul.w	r2, r1, r2
 8005cb4:	1a9b      	subs	r3, r3, r2
 8005cb6:	633b      	str	r3, [r7, #48]	; 0x30
			publish_message[publishMessageIndex++] = tempValue/10000 + 0x30;
 8005cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cba:	4a83      	ldr	r2, [pc, #524]	; (8005ec8 <Update_Publish_Power_Message_All_Outlets+0x4a0>)
 8005cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc0:	0b5b      	lsrs	r3, r3, #13
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005cc8:	1c59      	adds	r1, r3, #1
 8005cca:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8005cce:	4619      	mov	r1, r3
 8005cd0:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	4b7a      	ldr	r3, [pc, #488]	; (8005ec0 <Update_Publish_Power_Message_All_Outlets+0x498>)
 8005cd8:	545a      	strb	r2, [r3, r1]
			tempValue = tempValue % 10000;
 8005cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cdc:	4a7a      	ldr	r2, [pc, #488]	; (8005ec8 <Update_Publish_Power_Message_All_Outlets+0x4a0>)
 8005cde:	fba2 1203 	umull	r1, r2, r2, r3
 8005ce2:	0b52      	lsrs	r2, r2, #13
 8005ce4:	f242 7110 	movw	r1, #10000	; 0x2710
 8005ce8:	fb01 f202 	mul.w	r2, r1, r2
 8005cec:	1a9b      	subs	r3, r3, r2
 8005cee:	633b      	str	r3, [r7, #48]	; 0x30
			publish_message[publishMessageIndex++] = tempValue/1000 + 0x30;
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf2:	4a76      	ldr	r2, [pc, #472]	; (8005ecc <Update_Publish_Power_Message_All_Outlets+0x4a4>)
 8005cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf8:	099b      	lsrs	r3, r3, #6
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d00:	1c59      	adds	r1, r3, #1
 8005d02:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8005d06:	4619      	mov	r1, r3
 8005d08:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	4b6c      	ldr	r3, [pc, #432]	; (8005ec0 <Update_Publish_Power_Message_All_Outlets+0x498>)
 8005d10:	545a      	strb	r2, [r3, r1]
			tempValue = tempValue % 1000;
 8005d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d14:	4a6d      	ldr	r2, [pc, #436]	; (8005ecc <Update_Publish_Power_Message_All_Outlets+0x4a4>)
 8005d16:	fba2 1203 	umull	r1, r2, r2, r3
 8005d1a:	0992      	lsrs	r2, r2, #6
 8005d1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005d20:	fb01 f202 	mul.w	r2, r1, r2
 8005d24:	1a9b      	subs	r3, r3, r2
 8005d26:	633b      	str	r3, [r7, #48]	; 0x30
			publish_message[publishMessageIndex++] = tempValue/100 + 0x30;
 8005d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2a:	4a69      	ldr	r2, [pc, #420]	; (8005ed0 <Update_Publish_Power_Message_All_Outlets+0x4a8>)
 8005d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d30:	095b      	lsrs	r3, r3, #5
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d38:	1c59      	adds	r1, r3, #1
 8005d3a:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8005d3e:	4619      	mov	r1, r3
 8005d40:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	4b5e      	ldr	r3, [pc, #376]	; (8005ec0 <Update_Publish_Power_Message_All_Outlets+0x498>)
 8005d48:	545a      	strb	r2, [r3, r1]
			tempValue = tempValue % 100;
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4c:	4a60      	ldr	r2, [pc, #384]	; (8005ed0 <Update_Publish_Power_Message_All_Outlets+0x4a8>)
 8005d4e:	fba2 1203 	umull	r1, r2, r2, r3
 8005d52:	0952      	lsrs	r2, r2, #5
 8005d54:	2164      	movs	r1, #100	; 0x64
 8005d56:	fb01 f202 	mul.w	r2, r1, r2
 8005d5a:	1a9b      	subs	r3, r3, r2
 8005d5c:	633b      	str	r3, [r7, #48]	; 0x30
			publish_message[publishMessageIndex++] = tempValue/10 + 0x30;
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d60:	4a5c      	ldr	r2, [pc, #368]	; (8005ed4 <Update_Publish_Power_Message_All_Outlets+0x4ac>)
 8005d62:	fba2 2303 	umull	r2, r3, r2, r3
 8005d66:	08db      	lsrs	r3, r3, #3
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d6e:	1c59      	adds	r1, r3, #1
 8005d70:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8005d74:	4619      	mov	r1, r3
 8005d76:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	4b50      	ldr	r3, [pc, #320]	; (8005ec0 <Update_Publish_Power_Message_All_Outlets+0x498>)
 8005d7e:	545a      	strb	r2, [r3, r1]
			tempValue = tempValue % 10;
 8005d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d82:	4b54      	ldr	r3, [pc, #336]	; (8005ed4 <Update_Publish_Power_Message_All_Outlets+0x4ac>)
 8005d84:	fba3 1302 	umull	r1, r3, r3, r2
 8005d88:	08d9      	lsrs	r1, r3, #3
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	440b      	add	r3, r1
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	633b      	str	r3, [r7, #48]	; 0x30
			publish_message[publishMessageIndex++] = tempValue + 0x30;
 8005d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d9e:	1c59      	adds	r1, r3, #1
 8005da0:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8005da4:	4619      	mov	r1, r3
 8005da6:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	4b44      	ldr	r3, [pc, #272]	; (8005ec0 <Update_Publish_Power_Message_All_Outlets+0x498>)
 8005dae:	545a      	strb	r2, [r3, r1]
 8005db0:	e184      	b.n	80060bc <Update_Publish_Power_Message_All_Outlets+0x694>

		} else if(tempValue >= 10000){
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	f242 720f 	movw	r2, #9999	; 0x270f
 8005db8:	4293      	cmp	r3, r2
 8005dba:	f240 808d 	bls.w	8005ed8 <Update_Publish_Power_Message_All_Outlets+0x4b0>
			publish_message[publishMessageIndex++] = tempValue/10000 + 0x30;
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc0:	4a41      	ldr	r2, [pc, #260]	; (8005ec8 <Update_Publish_Power_Message_All_Outlets+0x4a0>)
 8005dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc6:	0b5b      	lsrs	r3, r3, #13
 8005dc8:	b2da      	uxtb	r2, r3
 8005dca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005dce:	1c59      	adds	r1, r3, #1
 8005dd0:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	4b38      	ldr	r3, [pc, #224]	; (8005ec0 <Update_Publish_Power_Message_All_Outlets+0x498>)
 8005dde:	545a      	strb	r2, [r3, r1]
			tempValue = tempValue % 10000;
 8005de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de2:	4a39      	ldr	r2, [pc, #228]	; (8005ec8 <Update_Publish_Power_Message_All_Outlets+0x4a0>)
 8005de4:	fba2 1203 	umull	r1, r2, r2, r3
 8005de8:	0b52      	lsrs	r2, r2, #13
 8005dea:	f242 7110 	movw	r1, #10000	; 0x2710
 8005dee:	fb01 f202 	mul.w	r2, r1, r2
 8005df2:	1a9b      	subs	r3, r3, r2
 8005df4:	633b      	str	r3, [r7, #48]	; 0x30
			publish_message[publishMessageIndex++] = tempValue/1000 + 0x30;
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	4a34      	ldr	r2, [pc, #208]	; (8005ecc <Update_Publish_Power_Message_All_Outlets+0x4a4>)
 8005dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfe:	099b      	lsrs	r3, r3, #6
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e06:	1c59      	adds	r1, r3, #1
 8005e08:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	4b2a      	ldr	r3, [pc, #168]	; (8005ec0 <Update_Publish_Power_Message_All_Outlets+0x498>)
 8005e16:	545a      	strb	r2, [r3, r1]
			tempValue = tempValue % 1000;
 8005e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1a:	4a2c      	ldr	r2, [pc, #176]	; (8005ecc <Update_Publish_Power_Message_All_Outlets+0x4a4>)
 8005e1c:	fba2 1203 	umull	r1, r2, r2, r3
 8005e20:	0992      	lsrs	r2, r2, #6
 8005e22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005e26:	fb01 f202 	mul.w	r2, r1, r2
 8005e2a:	1a9b      	subs	r3, r3, r2
 8005e2c:	633b      	str	r3, [r7, #48]	; 0x30
			publish_message[publishMessageIndex++] = tempValue/100 + 0x30;
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e30:	4a27      	ldr	r2, [pc, #156]	; (8005ed0 <Update_Publish_Power_Message_All_Outlets+0x4a8>)
 8005e32:	fba2 2303 	umull	r2, r3, r2, r3
 8005e36:	095b      	lsrs	r3, r3, #5
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e3e:	1c59      	adds	r1, r3, #1
 8005e40:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8005e44:	4619      	mov	r1, r3
 8005e46:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	4b1c      	ldr	r3, [pc, #112]	; (8005ec0 <Update_Publish_Power_Message_All_Outlets+0x498>)
 8005e4e:	545a      	strb	r2, [r3, r1]
			tempValue = tempValue % 100;
 8005e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e52:	4a1f      	ldr	r2, [pc, #124]	; (8005ed0 <Update_Publish_Power_Message_All_Outlets+0x4a8>)
 8005e54:	fba2 1203 	umull	r1, r2, r2, r3
 8005e58:	0952      	lsrs	r2, r2, #5
 8005e5a:	2164      	movs	r1, #100	; 0x64
 8005e5c:	fb01 f202 	mul.w	r2, r1, r2
 8005e60:	1a9b      	subs	r3, r3, r2
 8005e62:	633b      	str	r3, [r7, #48]	; 0x30
			publish_message[publishMessageIndex++] = tempValue/10 + 0x30;
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	4a1b      	ldr	r2, [pc, #108]	; (8005ed4 <Update_Publish_Power_Message_All_Outlets+0x4ac>)
 8005e68:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6c:	08db      	lsrs	r3, r3, #3
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e74:	1c59      	adds	r1, r3, #1
 8005e76:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	4b0f      	ldr	r3, [pc, #60]	; (8005ec0 <Update_Publish_Power_Message_All_Outlets+0x498>)
 8005e84:	545a      	strb	r2, [r3, r1]
			tempValue = tempValue % 10;
 8005e86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e88:	4b12      	ldr	r3, [pc, #72]	; (8005ed4 <Update_Publish_Power_Message_All_Outlets+0x4ac>)
 8005e8a:	fba3 1302 	umull	r1, r3, r3, r2
 8005e8e:	08d9      	lsrs	r1, r3, #3
 8005e90:	460b      	mov	r3, r1
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	440b      	add	r3, r1
 8005e96:	005b      	lsls	r3, r3, #1
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	633b      	str	r3, [r7, #48]	; 0x30
			publish_message[publishMessageIndex++] = tempValue + 0x30;
 8005e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ea4:	1c59      	adds	r1, r3, #1
 8005ea6:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8005eaa:	4619      	mov	r1, r3
 8005eac:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	4b03      	ldr	r3, [pc, #12]	; (8005ec0 <Update_Publish_Power_Message_All_Outlets+0x498>)
 8005eb4:	545a      	strb	r2, [r3, r1]
 8005eb6:	e101      	b.n	80060bc <Update_Publish_Power_Message_All_Outlets+0x694>
 8005eb8:	0001869f 	.word	0x0001869f
 8005ebc:	0a7c5ac5 	.word	0x0a7c5ac5
 8005ec0:	20002b64 	.word	0x20002b64
 8005ec4:	000186a0 	.word	0x000186a0
 8005ec8:	d1b71759 	.word	0xd1b71759
 8005ecc:	10624dd3 	.word	0x10624dd3
 8005ed0:	51eb851f 	.word	0x51eb851f
 8005ed4:	cccccccd 	.word	0xcccccccd

		} else if (tempValue >= 1000){
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ede:	d36b      	bcc.n	8005fb8 <Update_Publish_Power_Message_All_Outlets+0x590>
			tempValue = tempValue % 10000;
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee2:	4a86      	ldr	r2, [pc, #536]	; (80060fc <Update_Publish_Power_Message_All_Outlets+0x6d4>)
 8005ee4:	fba2 1203 	umull	r1, r2, r2, r3
 8005ee8:	0b52      	lsrs	r2, r2, #13
 8005eea:	f242 7110 	movw	r1, #10000	; 0x2710
 8005eee:	fb01 f202 	mul.w	r2, r1, r2
 8005ef2:	1a9b      	subs	r3, r3, r2
 8005ef4:	633b      	str	r3, [r7, #48]	; 0x30
			publish_message[publishMessageIndex++] = tempValue/1000 + 0x30;
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef8:	4a81      	ldr	r2, [pc, #516]	; (8006100 <Update_Publish_Power_Message_All_Outlets+0x6d8>)
 8005efa:	fba2 2303 	umull	r2, r3, r2, r3
 8005efe:	099b      	lsrs	r3, r3, #6
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f06:	1c59      	adds	r1, r3, #1
 8005f08:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	4b7b      	ldr	r3, [pc, #492]	; (8006104 <Update_Publish_Power_Message_All_Outlets+0x6dc>)
 8005f16:	545a      	strb	r2, [r3, r1]
			tempValue = tempValue % 1000;
 8005f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1a:	4a79      	ldr	r2, [pc, #484]	; (8006100 <Update_Publish_Power_Message_All_Outlets+0x6d8>)
 8005f1c:	fba2 1203 	umull	r1, r2, r2, r3
 8005f20:	0992      	lsrs	r2, r2, #6
 8005f22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005f26:	fb01 f202 	mul.w	r2, r1, r2
 8005f2a:	1a9b      	subs	r3, r3, r2
 8005f2c:	633b      	str	r3, [r7, #48]	; 0x30
			publish_message[publishMessageIndex++] = tempValue/100 + 0x30;
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f30:	4a75      	ldr	r2, [pc, #468]	; (8006108 <Update_Publish_Power_Message_All_Outlets+0x6e0>)
 8005f32:	fba2 2303 	umull	r2, r3, r2, r3
 8005f36:	095b      	lsrs	r3, r3, #5
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f3e:	1c59      	adds	r1, r3, #1
 8005f40:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8005f44:	4619      	mov	r1, r3
 8005f46:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005f4a:	b2da      	uxtb	r2, r3
 8005f4c:	4b6d      	ldr	r3, [pc, #436]	; (8006104 <Update_Publish_Power_Message_All_Outlets+0x6dc>)
 8005f4e:	545a      	strb	r2, [r3, r1]
			tempValue = tempValue % 100;
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	4a6d      	ldr	r2, [pc, #436]	; (8006108 <Update_Publish_Power_Message_All_Outlets+0x6e0>)
 8005f54:	fba2 1203 	umull	r1, r2, r2, r3
 8005f58:	0952      	lsrs	r2, r2, #5
 8005f5a:	2164      	movs	r1, #100	; 0x64
 8005f5c:	fb01 f202 	mul.w	r2, r1, r2
 8005f60:	1a9b      	subs	r3, r3, r2
 8005f62:	633b      	str	r3, [r7, #48]	; 0x30
			publish_message[publishMessageIndex++] = tempValue/10 + 0x30;
 8005f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f66:	4a69      	ldr	r2, [pc, #420]	; (800610c <Update_Publish_Power_Message_All_Outlets+0x6e4>)
 8005f68:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6c:	08db      	lsrs	r3, r3, #3
 8005f6e:	b2da      	uxtb	r2, r3
 8005f70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f74:	1c59      	adds	r1, r3, #1
 8005f76:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	4b60      	ldr	r3, [pc, #384]	; (8006104 <Update_Publish_Power_Message_All_Outlets+0x6dc>)
 8005f84:	545a      	strb	r2, [r3, r1]
			tempValue = tempValue % 10;
 8005f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f88:	4b60      	ldr	r3, [pc, #384]	; (800610c <Update_Publish_Power_Message_All_Outlets+0x6e4>)
 8005f8a:	fba3 1302 	umull	r1, r3, r3, r2
 8005f8e:	08d9      	lsrs	r1, r3, #3
 8005f90:	460b      	mov	r3, r1
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	440b      	add	r3, r1
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	633b      	str	r3, [r7, #48]	; 0x30
			publish_message[publishMessageIndex++] = tempValue + 0x30;
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005fa4:	1c59      	adds	r1, r3, #1
 8005fa6:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8005faa:	4619      	mov	r1, r3
 8005fac:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	4b54      	ldr	r3, [pc, #336]	; (8006104 <Update_Publish_Power_Message_All_Outlets+0x6dc>)
 8005fb4:	545a      	strb	r2, [r3, r1]
 8005fb6:	e081      	b.n	80060bc <Update_Publish_Power_Message_All_Outlets+0x694>


		} else if (tempValue >= 100){
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	2b63      	cmp	r3, #99	; 0x63
 8005fbc:	d944      	bls.n	8006048 <Update_Publish_Power_Message_All_Outlets+0x620>
			publish_message[publishMessageIndex++] = tempValue/100 + 0x30;
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc0:	4a51      	ldr	r2, [pc, #324]	; (8006108 <Update_Publish_Power_Message_All_Outlets+0x6e0>)
 8005fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc6:	095b      	lsrs	r3, r3, #5
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005fce:	1c59      	adds	r1, r3, #1
 8005fd0:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	4b49      	ldr	r3, [pc, #292]	; (8006104 <Update_Publish_Power_Message_All_Outlets+0x6dc>)
 8005fde:	545a      	strb	r2, [r3, r1]
			tempValue = tempValue % 100;
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe2:	4a49      	ldr	r2, [pc, #292]	; (8006108 <Update_Publish_Power_Message_All_Outlets+0x6e0>)
 8005fe4:	fba2 1203 	umull	r1, r2, r2, r3
 8005fe8:	0952      	lsrs	r2, r2, #5
 8005fea:	2164      	movs	r1, #100	; 0x64
 8005fec:	fb01 f202 	mul.w	r2, r1, r2
 8005ff0:	1a9b      	subs	r3, r3, r2
 8005ff2:	633b      	str	r3, [r7, #48]	; 0x30
			publish_message[publishMessageIndex++] = tempValue/10 + 0x30;
 8005ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff6:	4a45      	ldr	r2, [pc, #276]	; (800610c <Update_Publish_Power_Message_All_Outlets+0x6e4>)
 8005ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffc:	08db      	lsrs	r3, r3, #3
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006004:	1c59      	adds	r1, r3, #1
 8006006:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 800600a:	4619      	mov	r1, r3
 800600c:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8006010:	b2da      	uxtb	r2, r3
 8006012:	4b3c      	ldr	r3, [pc, #240]	; (8006104 <Update_Publish_Power_Message_All_Outlets+0x6dc>)
 8006014:	545a      	strb	r2, [r3, r1]
			tempValue = tempValue % 10;
 8006016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006018:	4b3c      	ldr	r3, [pc, #240]	; (800610c <Update_Publish_Power_Message_All_Outlets+0x6e4>)
 800601a:	fba3 1302 	umull	r1, r3, r3, r2
 800601e:	08d9      	lsrs	r1, r3, #3
 8006020:	460b      	mov	r3, r1
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	440b      	add	r3, r1
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	633b      	str	r3, [r7, #48]	; 0x30
			publish_message[publishMessageIndex++] = tempValue + 0x30;
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	b2da      	uxtb	r2, r3
 8006030:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006034:	1c59      	adds	r1, r3, #1
 8006036:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 800603a:	4619      	mov	r1, r3
 800603c:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8006040:	b2da      	uxtb	r2, r3
 8006042:	4b30      	ldr	r3, [pc, #192]	; (8006104 <Update_Publish_Power_Message_All_Outlets+0x6dc>)
 8006044:	545a      	strb	r2, [r3, r1]
 8006046:	e039      	b.n	80060bc <Update_Publish_Power_Message_All_Outlets+0x694>

		} else if(tempValue >= 10){
 8006048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604a:	2b09      	cmp	r3, #9
 800604c:	d929      	bls.n	80060a2 <Update_Publish_Power_Message_All_Outlets+0x67a>
			publish_message[publishMessageIndex++] = tempValue/10 + 0x30;
 800604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006050:	4a2e      	ldr	r2, [pc, #184]	; (800610c <Update_Publish_Power_Message_All_Outlets+0x6e4>)
 8006052:	fba2 2303 	umull	r2, r3, r2, r3
 8006056:	08db      	lsrs	r3, r3, #3
 8006058:	b2da      	uxtb	r2, r3
 800605a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800605e:	1c59      	adds	r1, r3, #1
 8006060:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8006064:	4619      	mov	r1, r3
 8006066:	f102 0330 	add.w	r3, r2, #48	; 0x30
 800606a:	b2da      	uxtb	r2, r3
 800606c:	4b25      	ldr	r3, [pc, #148]	; (8006104 <Update_Publish_Power_Message_All_Outlets+0x6dc>)
 800606e:	545a      	strb	r2, [r3, r1]
			tempValue = tempValue % 10;
 8006070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006072:	4b26      	ldr	r3, [pc, #152]	; (800610c <Update_Publish_Power_Message_All_Outlets+0x6e4>)
 8006074:	fba3 1302 	umull	r1, r3, r3, r2
 8006078:	08d9      	lsrs	r1, r3, #3
 800607a:	460b      	mov	r3, r1
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	440b      	add	r3, r1
 8006080:	005b      	lsls	r3, r3, #1
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	633b      	str	r3, [r7, #48]	; 0x30
			publish_message[publishMessageIndex++] = tempValue + 0x30;
 8006086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006088:	b2da      	uxtb	r2, r3
 800608a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800608e:	1c59      	adds	r1, r3, #1
 8006090:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8006094:	4619      	mov	r1, r3
 8006096:	f102 0330 	add.w	r3, r2, #48	; 0x30
 800609a:	b2da      	uxtb	r2, r3
 800609c:	4b19      	ldr	r3, [pc, #100]	; (8006104 <Update_Publish_Power_Message_All_Outlets+0x6dc>)
 800609e:	545a      	strb	r2, [r3, r1]
 80060a0:	e00c      	b.n	80060bc <Update_Publish_Power_Message_All_Outlets+0x694>
		} else {
			publish_message[publishMessageIndex++] = tempValue + 0x30;
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060aa:	1c59      	adds	r1, r3, #1
 80060ac:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 80060b0:	4619      	mov	r1, r3
 80060b2:	f102 0330 	add.w	r3, r2, #48	; 0x30
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	4b12      	ldr	r3, [pc, #72]	; (8006104 <Update_Publish_Power_Message_All_Outlets+0x6dc>)
 80060ba:	545a      	strb	r2, [r3, r1]
		}
		if(outletID < NUMBER_OF_RELAYS - 1)
 80060bc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80060c0:	2b08      	cmp	r3, #8
 80060c2:	d808      	bhi.n	80060d6 <Update_Publish_Power_Message_All_Outlets+0x6ae>
			publish_message[publishMessageIndex++] = ',';
 80060c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 80060ce:	461a      	mov	r2, r3
 80060d0:	4b0c      	ldr	r3, [pc, #48]	; (8006104 <Update_Publish_Power_Message_All_Outlets+0x6dc>)
 80060d2:	212c      	movs	r1, #44	; 0x2c
 80060d4:	5499      	strb	r1, [r3, r2]
	for(uint8_t outletID = 0; outletID < NUMBER_OF_RELAYS; outletID++){
 80060d6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80060da:	3301      	adds	r3, #1
 80060dc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80060e0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80060e4:	2b09      	cmp	r3, #9
 80060e6:	f67f acbe 	bls.w	8005a66 <Update_Publish_Power_Message_All_Outlets+0x3e>
	}
	publish_message_length = publishMessageIndex;
 80060ea:	4a09      	ldr	r2, [pc, #36]	; (8006110 <Update_Publish_Power_Message_All_Outlets+0x6e8>)
 80060ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060f0:	7013      	strb	r3, [r2, #0]
}
 80060f2:	bf00      	nop
 80060f4:	3738      	adds	r7, #56	; 0x38
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bdb0      	pop	{r4, r5, r7, pc}
 80060fa:	bf00      	nop
 80060fc:	d1b71759 	.word	0xd1b71759
 8006100:	10624dd3 	.word	0x10624dd3
 8006104:	20002b64 	.word	0x20002b64
 8006108:	51eb851f 	.word	0x51eb851f
 800610c:	cccccccd 	.word	0xcccccccd
 8006110:	20000218 	.word	0x20000218

08006114 <Update_Publish_Status_Message>:


void Update_Publish_Status_Message(void){
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
	static uint8_t chargingStatus = 1;
	uint8_t publishMessageIndex = 0;
 800611a:	2300      	movs	r3, #0
 800611c:	71fb      	strb	r3, [r7, #7]
	for(publishMessageIndex = 0; publishMessageIndex < MQTT_MESSAGE_BUFFER_LENGTH; publishMessageIndex ++){
 800611e:	2300      	movs	r3, #0
 8006120:	71fb      	strb	r3, [r7, #7]
 8006122:	e006      	b.n	8006132 <Update_Publish_Status_Message+0x1e>
		publish_message[publishMessageIndex] = 0;
 8006124:	79fb      	ldrb	r3, [r7, #7]
 8006126:	4a2f      	ldr	r2, [pc, #188]	; (80061e4 <Update_Publish_Status_Message+0xd0>)
 8006128:	2100      	movs	r1, #0
 800612a:	54d1      	strb	r1, [r2, r3]
	for(publishMessageIndex = 0; publishMessageIndex < MQTT_MESSAGE_BUFFER_LENGTH; publishMessageIndex ++){
 800612c:	79fb      	ldrb	r3, [r7, #7]
 800612e:	3301      	adds	r3, #1
 8006130:	71fb      	strb	r3, [r7, #7]
 8006132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006136:	2b00      	cmp	r3, #0
 8006138:	daf4      	bge.n	8006124 <Update_Publish_Status_Message+0x10>
	}
	publishMessageIndex = 0;
 800613a:	2300      	movs	r3, #0
 800613c:	71fb      	strb	r3, [r7, #7]
//	publish_message[publishMessageIndex++] = BOX_ID + 0x30;

	for(uint8_t outletID = 0; outletID < NUMBER_OF_RELAYS; outletID ++){
 800613e:	2300      	movs	r3, #0
 8006140:	71bb      	strb	r3, [r7, #6]
 8006142:	e044      	b.n	80061ce <Update_Publish_Status_Message+0xba>
		publish_message[publishMessageIndex++] = outletID + 0x30;
 8006144:	79fb      	ldrb	r3, [r7, #7]
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	71fa      	strb	r2, [r7, #7]
 800614a:	461a      	mov	r2, r3
 800614c:	79bb      	ldrb	r3, [r7, #6]
 800614e:	3330      	adds	r3, #48	; 0x30
 8006150:	b2d9      	uxtb	r1, r3
 8006152:	4b24      	ldr	r3, [pc, #144]	; (80061e4 <Update_Publish_Status_Message+0xd0>)
 8006154:	5499      	strb	r1, [r3, r2]
		publish_message[publishMessageIndex++] = '-';
 8006156:	79fb      	ldrb	r3, [r7, #7]
 8006158:	1c5a      	adds	r2, r3, #1
 800615a:	71fa      	strb	r2, [r7, #7]
 800615c:	461a      	mov	r2, r3
 800615e:	4b21      	ldr	r3, [pc, #132]	; (80061e4 <Update_Publish_Status_Message+0xd0>)
 8006160:	212d      	movs	r1, #45	; 0x2d
 8006162:	5499      	strb	r1, [r3, r2]
		if(Get_Relay_Status(outletID)){
 8006164:	79bb      	ldrb	r3, [r7, #6]
 8006166:	4618      	mov	r0, r3
 8006168:	f001 fbee 	bl	8007948 <Get_Relay_Status>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d019      	beq.n	80061a6 <Update_Publish_Status_Message+0x92>
			if(array_Of_Power_Consumption_In_WattHour[outletID] < 1000){
 8006172:	79bb      	ldrb	r3, [r7, #6]
 8006174:	4a1c      	ldr	r2, [pc, #112]	; (80061e8 <Update_Publish_Status_Message+0xd4>)
 8006176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800617a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800617e:	da03      	bge.n	8006188 <Update_Publish_Status_Message+0x74>
				chargingStatus = 1;
 8006180:	4b1a      	ldr	r3, [pc, #104]	; (80061ec <Update_Publish_Status_Message+0xd8>)
 8006182:	2201      	movs	r2, #1
 8006184:	701a      	strb	r2, [r3, #0]
 8006186:	e002      	b.n	800618e <Update_Publish_Status_Message+0x7a>
			} else {
				chargingStatus = 2;
 8006188:	4b18      	ldr	r3, [pc, #96]	; (80061ec <Update_Publish_Status_Message+0xd8>)
 800618a:	2202      	movs	r2, #2
 800618c:	701a      	strb	r2, [r3, #0]
			}
			publish_message[publishMessageIndex++] = chargingStatus + 0x30;
 800618e:	4b17      	ldr	r3, [pc, #92]	; (80061ec <Update_Publish_Status_Message+0xd8>)
 8006190:	781a      	ldrb	r2, [r3, #0]
 8006192:	79fb      	ldrb	r3, [r7, #7]
 8006194:	1c59      	adds	r1, r3, #1
 8006196:	71f9      	strb	r1, [r7, #7]
 8006198:	4619      	mov	r1, r3
 800619a:	f102 0330 	add.w	r3, r2, #48	; 0x30
 800619e:	b2da      	uxtb	r2, r3
 80061a0:	4b10      	ldr	r3, [pc, #64]	; (80061e4 <Update_Publish_Status_Message+0xd0>)
 80061a2:	545a      	strb	r2, [r3, r1]
 80061a4:	e006      	b.n	80061b4 <Update_Publish_Status_Message+0xa0>
		} else {
			publish_message[publishMessageIndex++] = 0x30;
 80061a6:	79fb      	ldrb	r3, [r7, #7]
 80061a8:	1c5a      	adds	r2, r3, #1
 80061aa:	71fa      	strb	r2, [r7, #7]
 80061ac:	461a      	mov	r2, r3
 80061ae:	4b0d      	ldr	r3, [pc, #52]	; (80061e4 <Update_Publish_Status_Message+0xd0>)
 80061b0:	2130      	movs	r1, #48	; 0x30
 80061b2:	5499      	strb	r1, [r3, r2]
		}
		if(outletID < NUMBER_OF_RELAYS - 1)
 80061b4:	79bb      	ldrb	r3, [r7, #6]
 80061b6:	2b08      	cmp	r3, #8
 80061b8:	d806      	bhi.n	80061c8 <Update_Publish_Status_Message+0xb4>
			publish_message[publishMessageIndex++] = ',';
 80061ba:	79fb      	ldrb	r3, [r7, #7]
 80061bc:	1c5a      	adds	r2, r3, #1
 80061be:	71fa      	strb	r2, [r7, #7]
 80061c0:	461a      	mov	r2, r3
 80061c2:	4b08      	ldr	r3, [pc, #32]	; (80061e4 <Update_Publish_Status_Message+0xd0>)
 80061c4:	212c      	movs	r1, #44	; 0x2c
 80061c6:	5499      	strb	r1, [r3, r2]
	for(uint8_t outletID = 0; outletID < NUMBER_OF_RELAYS; outletID ++){
 80061c8:	79bb      	ldrb	r3, [r7, #6]
 80061ca:	3301      	adds	r3, #1
 80061cc:	71bb      	strb	r3, [r7, #6]
 80061ce:	79bb      	ldrb	r3, [r7, #6]
 80061d0:	2b09      	cmp	r3, #9
 80061d2:	d9b7      	bls.n	8006144 <Update_Publish_Status_Message+0x30>
	}
	publish_message_length = publishMessageIndex;
 80061d4:	4a06      	ldr	r2, [pc, #24]	; (80061f0 <Update_Publish_Status_Message+0xdc>)
 80061d6:	79fb      	ldrb	r3, [r7, #7]
 80061d8:	7013      	strb	r3, [r2, #0]
}
 80061da:	bf00      	nop
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20002b64 	.word	0x20002b64
 80061e8:	20002698 	.word	0x20002698
 80061ec:	20000009 	.word	0x20000009
 80061f0:	20000218 	.word	0x20000218

080061f4 <Server_Communication>:
	}
}



void Server_Communication(void){
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
//	static uint8_t publishChannelIndex = 0;
//	static uint16_t whTest = 0;
//	Led_Status_Display();
	switch(serverCommunicationFsmState){
 80061f8:	4b86      	ldr	r3, [pc, #536]	; (8006414 <Server_Communication+0x220>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	2b03      	cmp	r3, #3
 80061fe:	f200 80fd 	bhi.w	80063fc <Server_Communication+0x208>
 8006202:	a201      	add	r2, pc, #4	; (adr r2, 8006208 <Server_Communication+0x14>)
 8006204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006208:	08006219 	.word	0x08006219
 800620c:	08006253 	.word	0x08006253
 8006210:	08006297 	.word	0x08006297
 8006214:	080062cf 	.word	0x080062cf
	case SIM3G_OPEN_CONNECTION:
		if(Sim3g_Run()){
 8006218:	f001 fcbe 	bl	8007b98 <Sim3g_Run>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 80ee 	beq.w	8006400 <Server_Communication+0x20c>
			Set_Mqtt_State(MQTT_OPEN_STATE);
 8006224:	2000      	movs	r0, #0
 8006226:	f002 f8db 	bl	80083e0 <Set_Mqtt_State>
			SCH_Delete_Task(ping_Request_TimeoutIndex);
 800622a:	4b7b      	ldr	r3, [pc, #492]	; (8006418 <Server_Communication+0x224>)
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	4618      	mov	r0, r3
 8006230:	f001 fc78 	bl	8007b24 <SCH_Delete_Task>
			Clear_Ping_Request_Timeout_Flag();
 8006234:	f7ff fb84 	bl	8005940 <Clear_Ping_Request_Timeout_Flag>
			ping_Request_TimeoutIndex = SCH_Add_Task(Set_Ping_Request_Timeout_Flag, 200, 0);
 8006238:	2200      	movs	r2, #0
 800623a:	21c8      	movs	r1, #200	; 0xc8
 800623c:	4877      	ldr	r0, [pc, #476]	; (800641c <Server_Communication+0x228>)
 800623e:	f001 fbf7 	bl	8007a30 <SCH_Add_Task>
 8006242:	4603      	mov	r3, r0
 8006244:	461a      	mov	r2, r3
 8006246:	4b74      	ldr	r3, [pc, #464]	; (8006418 <Server_Communication+0x224>)
 8006248:	701a      	strb	r2, [r3, #0]
			serverCommunicationFsmState = SIM3G_WAIT_FOR_A_MOMENT;
 800624a:	4b72      	ldr	r3, [pc, #456]	; (8006414 <Server_Communication+0x220>)
 800624c:	2201      	movs	r2, #1
 800624e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006250:	e0d6      	b.n	8006400 <Server_Communication+0x20c>
	case SIM3G_WAIT_FOR_A_MOMENT:
		if(is_Ping_Request_Timeout()){
 8006252:	f7ff fb8d 	bl	8005970 <is_Ping_Request_Timeout>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 80d3 	beq.w	8006404 <Server_Communication+0x210>
			Clear_Ping_Request_Timeout_Flag();
 800625e:	f7ff fb6f 	bl	8005940 <Clear_Ping_Request_Timeout_Flag>
			ping_Request_TimeoutIndex = SCH_Add_Task(Set_Ping_Request_Timeout_Flag, TIME_FOR_PING_REQUEST, 0);
 8006262:	2200      	movs	r2, #0
 8006264:	f241 7170 	movw	r1, #6000	; 0x1770
 8006268:	486c      	ldr	r0, [pc, #432]	; (800641c <Server_Communication+0x228>)
 800626a:	f001 fbe1 	bl	8007a30 <SCH_Add_Task>
 800626e:	4603      	mov	r3, r0
 8006270:	461a      	mov	r2, r3
 8006272:	4b69      	ldr	r3, [pc, #420]	; (8006418 <Server_Communication+0x224>)
 8006274:	701a      	strb	r2, [r3, #0]

			Clear_Publish_Message_Timeout_Flag();
 8006276:	f7ff fb85 	bl	8005984 <Clear_Publish_Message_Timeout_Flag>
			publish_message_TimeoutIndex = SCH_Add_Task(Set_Publish_Message_Timeout_Flag,TIME_FOR_PUBLISH_MESSAGE, 0);
 800627a:	2200      	movs	r2, #0
 800627c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006280:	4867      	ldr	r0, [pc, #412]	; (8006420 <Server_Communication+0x22c>)
 8006282:	f001 fbd5 	bl	8007a30 <SCH_Add_Task>
 8006286:	4603      	mov	r3, r0
 8006288:	461a      	mov	r2, r3
 800628a:	4b66      	ldr	r3, [pc, #408]	; (8006424 <Server_Communication+0x230>)
 800628c:	701a      	strb	r2, [r3, #0]

			serverCommunicationFsmState = SIM3G_SETUP_SUBSCRIBE_TOPICS;
 800628e:	4b61      	ldr	r3, [pc, #388]	; (8006414 <Server_Communication+0x220>)
 8006290:	2202      	movs	r2, #2
 8006292:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006294:	e0b6      	b.n	8006404 <Server_Communication+0x210>
	case SIM3G_SETUP_SUBSCRIBE_TOPICS:
		if(Uart1_Received_Buffer_Available() == 0){
 8006296:	f003 f9b1 	bl	80095fc <Uart1_Received_Buffer_Available>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	f040 80b3 	bne.w	8006408 <Server_Communication+0x214>
			if(MQTT_Run()){
 80062a2:	f002 f843 	bl	800832c <MQTT_Run>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d006      	beq.n	80062ba <Server_Communication+0xc6>
				Set_Sim3G_State(RESET_SIM3G);
 80062ac:	2004      	movs	r0, #4
 80062ae:	f001 fc89 	bl	8007bc4 <Set_Sim3G_State>
				serverCommunicationFsmState = SIM3G_OPEN_CONNECTION;
 80062b2:	4b58      	ldr	r3, [pc, #352]	; (8006414 <Server_Communication+0x220>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	701a      	strb	r2, [r3, #0]
				if(Get_Mqtt_State() == MQTT_WAIT_FOR_NEW_COMMAND){
					serverCommunicationFsmState = SIM3G_SETUP_PUBLISH_TOPICS;
				}
			}
		}
		break;
 80062b8:	e0a6      	b.n	8006408 <Server_Communication+0x214>
				if(Get_Mqtt_State() == MQTT_WAIT_FOR_NEW_COMMAND){
 80062ba:	f002 f8a1 	bl	8008400 <Get_Mqtt_State>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b10      	cmp	r3, #16
 80062c2:	f040 80a1 	bne.w	8006408 <Server_Communication+0x214>
					serverCommunicationFsmState = SIM3G_SETUP_PUBLISH_TOPICS;
 80062c6:	4b53      	ldr	r3, [pc, #332]	; (8006414 <Server_Communication+0x220>)
 80062c8:	2203      	movs	r2, #3
 80062ca:	701a      	strb	r2, [r3, #0]
		break;
 80062cc:	e09c      	b.n	8006408 <Server_Communication+0x214>
	case SIM3G_SETUP_PUBLISH_TOPICS:
		if(Get_Mqtt_State() != MQTT_WAIT_FOR_NEW_COMMAND){
 80062ce:	f002 f897 	bl	8008400 <Get_Mqtt_State>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b10      	cmp	r3, #16
 80062d6:	d003      	beq.n	80062e0 <Server_Communication+0xec>
			serverCommunicationFsmState = SIM3G_SETUP_SUBSCRIBE_TOPICS;
 80062d8:	4b4e      	ldr	r3, [pc, #312]	; (8006414 <Server_Communication+0x220>)
 80062da:	2202      	movs	r2, #2
 80062dc:	701a      	strb	r2, [r3, #0]
					}
				}
			}

		}
		break;
 80062de:	e095      	b.n	800640c <Server_Communication+0x218>
			if(is_Set_Relay_Timeout()){
 80062e0:	f001 fa62 	bl	80077a8 <is_Set_Relay_Timeout>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f000 8090 	beq.w	800640c <Server_Communication+0x218>
				if(Get_Is_Update_Relay_Status() == SET){
 80062ec:	f001 fb3c 	bl	8007968 <Get_Is_Update_Relay_Status>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d127      	bne.n	8006346 <Server_Communication+0x152>
					Update_Publish_Status_Message();
 80062f6:	f7ff ff0d 	bl	8006114 <Update_Publish_Status_Message>
					Setup_Mqtt_Publish_Message(PUBLISH_TOPIC_STATUS, publish_message, publish_message_length);
 80062fa:	4b4b      	ldr	r3, [pc, #300]	; (8006428 <Server_Communication+0x234>)
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	494a      	ldr	r1, [pc, #296]	; (800642c <Server_Communication+0x238>)
 8006302:	484b      	ldr	r0, [pc, #300]	; (8006430 <Server_Communication+0x23c>)
 8006304:	f002 fe92 	bl	800902c <Setup_Mqtt_Publish_Message>
					Set_Mqtt_State(MQTT_PUBLISH_STATE);
 8006308:	2008      	movs	r0, #8
 800630a:	f002 f869 	bl	80083e0 <Set_Mqtt_State>
					publishTopicIndex = 0;
 800630e:	4b49      	ldr	r3, [pc, #292]	; (8006434 <Server_Communication+0x240>)
 8006310:	2200      	movs	r2, #0
 8006312:	701a      	strb	r2, [r3, #0]
					SCH_Delete_Task(publish_message_TimeoutIndex);
 8006314:	4b43      	ldr	r3, [pc, #268]	; (8006424 <Server_Communication+0x230>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	4618      	mov	r0, r3
 800631a:	f001 fc03 	bl	8007b24 <SCH_Delete_Task>
					Clear_Publish_Message_Timeout_Flag();
 800631e:	f7ff fb31 	bl	8005984 <Clear_Publish_Message_Timeout_Flag>
					publish_message_TimeoutIndex = SCH_Add_Task(Set_Publish_Message_Timeout_Flag, TIME_FOR_PUBLISH_MESSAGE, 0);
 8006322:	2200      	movs	r2, #0
 8006324:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006328:	483d      	ldr	r0, [pc, #244]	; (8006420 <Server_Communication+0x22c>)
 800632a:	f001 fb81 	bl	8007a30 <SCH_Add_Task>
 800632e:	4603      	mov	r3, r0
 8006330:	461a      	mov	r2, r3
 8006332:	4b3c      	ldr	r3, [pc, #240]	; (8006424 <Server_Communication+0x230>)
 8006334:	701a      	strb	r2, [r3, #0]
					Turn_On_Buzzer();
 8006336:	f000 f98b 	bl	8006650 <Turn_On_Buzzer>
					SCH_Add_Task(Turn_Off_Buzzer, TIME_FOR_BUZZER, 0);
 800633a:	2200      	movs	r2, #0
 800633c:	210f      	movs	r1, #15
 800633e:	483e      	ldr	r0, [pc, #248]	; (8006438 <Server_Communication+0x244>)
 8006340:	f001 fb76 	bl	8007a30 <SCH_Add_Task>
		break;
 8006344:	e062      	b.n	800640c <Server_Communication+0x218>
				} else if (is_Publish_Message_Timeout()){
 8006346:	f7ff fb35 	bl	80059b4 <is_Publish_Message_Timeout>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d05d      	beq.n	800640c <Server_Communication+0x218>
					if(publishTopicIndex == 0){
 8006350:	4b38      	ldr	r3, [pc, #224]	; (8006434 <Server_Communication+0x240>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d129      	bne.n	80063ac <Server_Communication+0x1b8>
						publishTopicIndex = 1;
 8006358:	4b36      	ldr	r3, [pc, #216]	; (8006434 <Server_Communication+0x240>)
 800635a:	2201      	movs	r2, #1
 800635c:	701a      	strb	r2, [r3, #0]
						Update_Power_Consumption();
 800635e:	f7ff fb33 	bl	80059c8 <Update_Power_Consumption>
						Update_Publish_Power_Message_All_Outlets();
 8006362:	f7ff fb61 	bl	8005a28 <Update_Publish_Power_Message_All_Outlets>
						Setup_Mqtt_Publish_Message(PUBLISH_TOPIC_POWER, publish_message, publish_message_length);
 8006366:	4b30      	ldr	r3, [pc, #192]	; (8006428 <Server_Communication+0x234>)
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	461a      	mov	r2, r3
 800636c:	492f      	ldr	r1, [pc, #188]	; (800642c <Server_Communication+0x238>)
 800636e:	4833      	ldr	r0, [pc, #204]	; (800643c <Server_Communication+0x248>)
 8006370:	f002 fe5c 	bl	800902c <Setup_Mqtt_Publish_Message>
						Set_Mqtt_State(MQTT_PUBLISH_STATE);
 8006374:	2008      	movs	r0, #8
 8006376:	f002 f833 	bl	80083e0 <Set_Mqtt_State>
						SCH_Delete_Task(publish_message_TimeoutIndex);
 800637a:	4b2a      	ldr	r3, [pc, #168]	; (8006424 <Server_Communication+0x230>)
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	4618      	mov	r0, r3
 8006380:	f001 fbd0 	bl	8007b24 <SCH_Delete_Task>
						Clear_Publish_Message_Timeout_Flag();
 8006384:	f7ff fafe 	bl	8005984 <Clear_Publish_Message_Timeout_Flag>
						publish_message_TimeoutIndex = SCH_Add_Task(Set_Publish_Message_Timeout_Flag, TIME_FOR_PUBLISH_MESSAGE, 0);
 8006388:	2200      	movs	r2, #0
 800638a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800638e:	4824      	ldr	r0, [pc, #144]	; (8006420 <Server_Communication+0x22c>)
 8006390:	f001 fb4e 	bl	8007a30 <SCH_Add_Task>
 8006394:	4603      	mov	r3, r0
 8006396:	461a      	mov	r2, r3
 8006398:	4b22      	ldr	r3, [pc, #136]	; (8006424 <Server_Communication+0x230>)
 800639a:	701a      	strb	r2, [r3, #0]
						Turn_On_Buzzer();
 800639c:	f000 f958 	bl	8006650 <Turn_On_Buzzer>
						SCH_Add_Task(Turn_Off_Buzzer, TIME_FOR_BUZZER, 0);
 80063a0:	2200      	movs	r2, #0
 80063a2:	210f      	movs	r1, #15
 80063a4:	4824      	ldr	r0, [pc, #144]	; (8006438 <Server_Communication+0x244>)
 80063a6:	f001 fb43 	bl	8007a30 <SCH_Add_Task>
		break;
 80063aa:	e02f      	b.n	800640c <Server_Communication+0x218>
						publishTopicIndex = 0;
 80063ac:	4b21      	ldr	r3, [pc, #132]	; (8006434 <Server_Communication+0x240>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	701a      	strb	r2, [r3, #0]
						Update_Publish_Status_Message();
 80063b2:	f7ff feaf 	bl	8006114 <Update_Publish_Status_Message>
						Setup_Mqtt_Publish_Message(PUBLISH_TOPIC_STATUS, publish_message, publish_message_length);
 80063b6:	4b1c      	ldr	r3, [pc, #112]	; (8006428 <Server_Communication+0x234>)
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	461a      	mov	r2, r3
 80063bc:	491b      	ldr	r1, [pc, #108]	; (800642c <Server_Communication+0x238>)
 80063be:	481c      	ldr	r0, [pc, #112]	; (8006430 <Server_Communication+0x23c>)
 80063c0:	f002 fe34 	bl	800902c <Setup_Mqtt_Publish_Message>
						Set_Mqtt_State(MQTT_PUBLISH_STATE);
 80063c4:	2008      	movs	r0, #8
 80063c6:	f002 f80b 	bl	80083e0 <Set_Mqtt_State>
						SCH_Delete_Task(publish_message_TimeoutIndex);
 80063ca:	4b16      	ldr	r3, [pc, #88]	; (8006424 <Server_Communication+0x230>)
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f001 fba8 	bl	8007b24 <SCH_Delete_Task>
						Clear_Publish_Message_Timeout_Flag();
 80063d4:	f7ff fad6 	bl	8005984 <Clear_Publish_Message_Timeout_Flag>
						publish_message_TimeoutIndex = SCH_Add_Task(Set_Publish_Message_Timeout_Flag, TIME_FOR_PUBLISH_MESSAGE, 0);
 80063d8:	2200      	movs	r2, #0
 80063da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80063de:	4810      	ldr	r0, [pc, #64]	; (8006420 <Server_Communication+0x22c>)
 80063e0:	f001 fb26 	bl	8007a30 <SCH_Add_Task>
 80063e4:	4603      	mov	r3, r0
 80063e6:	461a      	mov	r2, r3
 80063e8:	4b0e      	ldr	r3, [pc, #56]	; (8006424 <Server_Communication+0x230>)
 80063ea:	701a      	strb	r2, [r3, #0]
						Turn_On_Buzzer();
 80063ec:	f000 f930 	bl	8006650 <Turn_On_Buzzer>
						SCH_Add_Task(Turn_Off_Buzzer, TIME_FOR_BUZZER, 0);
 80063f0:	2200      	movs	r2, #0
 80063f2:	210f      	movs	r1, #15
 80063f4:	4810      	ldr	r0, [pc, #64]	; (8006438 <Server_Communication+0x244>)
 80063f6:	f001 fb1b 	bl	8007a30 <SCH_Add_Task>
		break;
 80063fa:	e007      	b.n	800640c <Server_Communication+0x218>
	default:
		break;
 80063fc:	bf00      	nop
 80063fe:	e006      	b.n	800640e <Server_Communication+0x21a>
		break;
 8006400:	bf00      	nop
 8006402:	e004      	b.n	800640e <Server_Communication+0x21a>
		break;
 8006404:	bf00      	nop
 8006406:	e002      	b.n	800640e <Server_Communication+0x21a>
		break;
 8006408:	bf00      	nop
 800640a:	e000      	b.n	800640e <Server_Communication+0x21a>
		break;
 800640c:	bf00      	nop
	}
}
 800640e:	bf00      	nop
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	200001f0 	.word	0x200001f0
 8006418:	20000007 	.word	0x20000007
 800641c:	08005959 	.word	0x08005959
 8006420:	0800599d 	.word	0x0800599d
 8006424:	20000008 	.word	0x20000008
 8006428:	20000218 	.word	0x20000218
 800642c:	20002b64 	.word	0x20002b64
 8006430:	0800ada4 	.word	0x0800ada4
 8006434:	2000021c 	.word	0x2000021c
 8006438:	08006669 	.word	0x08006669
 800643c:	0800adb0 	.word	0x0800adb0

08006440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
//	GPIO_InitTypeDef GPIO_InitStruct = {0};

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8006446:	4b1e      	ldr	r3, [pc, #120]	; (80064c0 <MX_GPIO_Init+0x80>)
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	4a1d      	ldr	r2, [pc, #116]	; (80064c0 <MX_GPIO_Init+0x80>)
 800644c:	f043 0310 	orr.w	r3, r3, #16
 8006450:	6193      	str	r3, [r2, #24]
 8006452:	4b1b      	ldr	r3, [pc, #108]	; (80064c0 <MX_GPIO_Init+0x80>)
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	f003 0310 	and.w	r3, r3, #16
 800645a:	60fb      	str	r3, [r7, #12]
 800645c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800645e:	4b18      	ldr	r3, [pc, #96]	; (80064c0 <MX_GPIO_Init+0x80>)
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	4a17      	ldr	r2, [pc, #92]	; (80064c0 <MX_GPIO_Init+0x80>)
 8006464:	f043 0320 	orr.w	r3, r3, #32
 8006468:	6193      	str	r3, [r2, #24]
 800646a:	4b15      	ldr	r3, [pc, #84]	; (80064c0 <MX_GPIO_Init+0x80>)
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	f003 0320 	and.w	r3, r3, #32
 8006472:	60bb      	str	r3, [r7, #8]
 8006474:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006476:	4b12      	ldr	r3, [pc, #72]	; (80064c0 <MX_GPIO_Init+0x80>)
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	4a11      	ldr	r2, [pc, #68]	; (80064c0 <MX_GPIO_Init+0x80>)
 800647c:	f043 0304 	orr.w	r3, r3, #4
 8006480:	6193      	str	r3, [r2, #24]
 8006482:	4b0f      	ldr	r3, [pc, #60]	; (80064c0 <MX_GPIO_Init+0x80>)
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	607b      	str	r3, [r7, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800648e:	4b0c      	ldr	r3, [pc, #48]	; (80064c0 <MX_GPIO_Init+0x80>)
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	4a0b      	ldr	r2, [pc, #44]	; (80064c0 <MX_GPIO_Init+0x80>)
 8006494:	f043 0308 	orr.w	r3, r3, #8
 8006498:	6193      	str	r3, [r2, #24]
 800649a:	4b09      	ldr	r3, [pc, #36]	; (80064c0 <MX_GPIO_Init+0x80>)
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	f003 0308 	and.w	r3, r3, #8
 80064a2:	603b      	str	r3, [r7, #0]
 80064a4:	683b      	ldr	r3, [r7, #0]
//	/*Configure GPIO pin Output Level */
//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
//


	LED_Init();
 80064a6:	f000 f80d 	bl	80064c4 <LED_Init>
	GPIO_Relay_Init();
 80064aa:	f000 f827 	bl	80064fc <GPIO_Relay_Init>
	Buzzer_Init();
 80064ae:	f000 f88d 	bl	80065cc <Buzzer_Init>
	ZeroPoint_Detection_Pin_Init();
 80064b2:	f000 f8a7 	bl	8006604 <ZeroPoint_Detection_Pin_Init>
}
 80064b6:	bf00      	nop
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	40021000 	.word	0x40021000

080064c4 <LED_Init>:

void LED_Init(void){
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064ca:	463b      	mov	r3, r7
 80064cc:	2200      	movs	r2, #0
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	605a      	str	r2, [r3, #4]
 80064d2:	609a      	str	r2, [r3, #8]
 80064d4:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80064d6:	2301      	movs	r3, #1
 80064d8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80064da:	2301      	movs	r3, #1
 80064dc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80064de:	2303      	movs	r3, #3
 80064e0:	60fb      	str	r3, [r7, #12]
//	GPIO_InitStruct.Pin = LED1_PIN;
//	HAL_GPIO_Init(LED1_GPIO_PORT, &GPIO_InitStruct);

	GPIO_InitStruct.Pin = LED2_PIN;
 80064e2:	2304      	movs	r3, #4
 80064e4:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStruct);
 80064e6:	463b      	mov	r3, r7
 80064e8:	4619      	mov	r1, r3
 80064ea:	4803      	ldr	r0, [pc, #12]	; (80064f8 <LED_Init+0x34>)
 80064ec:	f7fb fb12 	bl	8001b14 <HAL_GPIO_Init>

}
 80064f0:	bf00      	nop
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	40010c00 	.word	0x40010c00

080064fc <GPIO_Relay_Init>:




void GPIO_Relay_Init(void){
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006502:	463b      	mov	r3, r7
 8006504:	2200      	movs	r2, #0
 8006506:	601a      	str	r2, [r3, #0]
 8006508:	605a      	str	r2, [r3, #4]
 800650a:	609a      	str	r2, [r3, #8]
 800650c:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800650e:	2301      	movs	r3, #1
 8006510:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8006512:	2301      	movs	r3, #1
 8006514:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006516:	2303      	movs	r3, #3
 8006518:	60fb      	str	r3, [r7, #12]

	GPIO_InitStruct.Pin = RELAY_PIN_0;
 800651a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800651e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RELAY_PORT_0, &GPIO_InitStruct);
 8006520:	463b      	mov	r3, r7
 8006522:	4619      	mov	r1, r3
 8006524:	4826      	ldr	r0, [pc, #152]	; (80065c0 <GPIO_Relay_Init+0xc4>)
 8006526:	f7fb faf5 	bl	8001b14 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = RELAY_PIN_1;
 800652a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800652e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RELAY_PORT_1, &GPIO_InitStruct);
 8006530:	463b      	mov	r3, r7
 8006532:	4619      	mov	r1, r3
 8006534:	4822      	ldr	r0, [pc, #136]	; (80065c0 <GPIO_Relay_Init+0xc4>)
 8006536:	f7fb faed 	bl	8001b14 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = RELAY_PIN_2;
 800653a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800653e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RELAY_PORT_2, &GPIO_InitStruct);
 8006540:	463b      	mov	r3, r7
 8006542:	4619      	mov	r1, r3
 8006544:	481f      	ldr	r0, [pc, #124]	; (80065c4 <GPIO_Relay_Init+0xc8>)
 8006546:	f7fb fae5 	bl	8001b14 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = RELAY_PIN_3;
 800654a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800654e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RELAY_PORT_3, &GPIO_InitStruct);
 8006550:	463b      	mov	r3, r7
 8006552:	4619      	mov	r1, r3
 8006554:	481b      	ldr	r0, [pc, #108]	; (80065c4 <GPIO_Relay_Init+0xc8>)
 8006556:	f7fb fadd 	bl	8001b14 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = RELAY_PIN_4;
 800655a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800655e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RELAY_PORT_4, &GPIO_InitStruct);
 8006560:	463b      	mov	r3, r7
 8006562:	4619      	mov	r1, r3
 8006564:	4816      	ldr	r0, [pc, #88]	; (80065c0 <GPIO_Relay_Init+0xc4>)
 8006566:	f7fb fad5 	bl	8001b14 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = RELAY_PIN_5;
 800656a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800656e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RELAY_PORT_5, &GPIO_InitStruct);
 8006570:	463b      	mov	r3, r7
 8006572:	4619      	mov	r1, r3
 8006574:	4814      	ldr	r0, [pc, #80]	; (80065c8 <GPIO_Relay_Init+0xcc>)
 8006576:	f7fb facd 	bl	8001b14 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = RELAY_PIN_6;
 800657a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800657e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RELAY_PORT_6, &GPIO_InitStruct);
 8006580:	463b      	mov	r3, r7
 8006582:	4619      	mov	r1, r3
 8006584:	4810      	ldr	r0, [pc, #64]	; (80065c8 <GPIO_Relay_Init+0xcc>)
 8006586:	f7fb fac5 	bl	8001b14 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = RELAY_PIN_7;
 800658a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800658e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RELAY_PORT_7, &GPIO_InitStruct);
 8006590:	463b      	mov	r3, r7
 8006592:	4619      	mov	r1, r3
 8006594:	480c      	ldr	r0, [pc, #48]	; (80065c8 <GPIO_Relay_Init+0xcc>)
 8006596:	f7fb fabd 	bl	8001b14 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = RELAY_PIN_8;
 800659a:	2308      	movs	r3, #8
 800659c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RELAY_PORT_8, &GPIO_InitStruct);
 800659e:	463b      	mov	r3, r7
 80065a0:	4619      	mov	r1, r3
 80065a2:	4808      	ldr	r0, [pc, #32]	; (80065c4 <GPIO_Relay_Init+0xc8>)
 80065a4:	f7fb fab6 	bl	8001b14 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = RELAY_PIN_9;
 80065a8:	2310      	movs	r3, #16
 80065aa:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RELAY_PORT_9, &GPIO_InitStruct);
 80065ac:	463b      	mov	r3, r7
 80065ae:	4619      	mov	r1, r3
 80065b0:	4804      	ldr	r0, [pc, #16]	; (80065c4 <GPIO_Relay_Init+0xc8>)
 80065b2:	f7fb faaf 	bl	8001b14 <HAL_GPIO_Init>
}
 80065b6:	bf00      	nop
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	40010800 	.word	0x40010800
 80065c4:	40010c00 	.word	0x40010c00
 80065c8:	40011000 	.word	0x40011000

080065cc <Buzzer_Init>:



void Buzzer_Init(void){
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065d2:	463b      	mov	r3, r7
 80065d4:	2200      	movs	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	605a      	str	r2, [r3, #4]
 80065da:	609a      	str	r2, [r3, #8]
 80065dc:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80065de:	2301      	movs	r3, #1
 80065e0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80065e2:	2301      	movs	r3, #1
 80065e4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80065e6:	2303      	movs	r3, #3
 80065e8:	60fb      	str	r3, [r7, #12]

	GPIO_InitStruct.Pin = BUZZER_PIN;
 80065ea:	2320      	movs	r3, #32
 80065ec:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(BUZZER_PORT, &GPIO_InitStruct);
 80065ee:	463b      	mov	r3, r7
 80065f0:	4619      	mov	r1, r3
 80065f2:	4803      	ldr	r0, [pc, #12]	; (8006600 <Buzzer_Init+0x34>)
 80065f4:	f7fb fa8e 	bl	8001b14 <HAL_GPIO_Init>
}
 80065f8:	bf00      	nop
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	40010c00 	.word	0x40010c00

08006604 <ZeroPoint_Detection_Pin_Init>:



void ZeroPoint_Detection_Pin_Init(void){
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800660a:	463b      	mov	r3, r7
 800660c:	2200      	movs	r2, #0
 800660e:	601a      	str	r2, [r3, #0]
 8006610:	605a      	str	r2, [r3, #4]
 8006612:	609a      	str	r2, [r3, #8]
 8006614:	60da      	str	r2, [r3, #12]
	/*Configure GPIO pin : B1_Pin */
	/* GPIO Ports Clock Enable */

	GPIO_InitStruct.Pin = ZERO_POINT_DETECTION_PIN;
 8006616:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800661a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800661c:	4b0a      	ldr	r3, [pc, #40]	; (8006648 <ZeroPoint_Detection_Pin_Init+0x44>)
 800661e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006620:	2300      	movs	r3, #0
 8006622:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(ZERO_POINT_DETECTION_PORT, &GPIO_InitStruct);
 8006624:	463b      	mov	r3, r7
 8006626:	4619      	mov	r1, r3
 8006628:	4808      	ldr	r0, [pc, #32]	; (800664c <ZeroPoint_Detection_Pin_Init+0x48>)
 800662a:	f7fb fa73 	bl	8001b14 <HAL_GPIO_Init>


	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800662e:	2200      	movs	r2, #0
 8006630:	2100      	movs	r1, #0
 8006632:	2028      	movs	r0, #40	; 0x28
 8006634:	f7fa ff8b 	bl	800154e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006638:	2028      	movs	r0, #40	; 0x28
 800663a:	f7fa ffa4 	bl	8001586 <HAL_NVIC_EnableIRQ>
}
 800663e:	bf00      	nop
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	10110000 	.word	0x10110000
 800664c:	40011000 	.word	0x40011000

08006650 <Turn_On_Buzzer>:





void Turn_On_Buzzer(void){
 8006650:	b580      	push	{r7, lr}
 8006652:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, SET);
 8006654:	2201      	movs	r2, #1
 8006656:	2120      	movs	r1, #32
 8006658:	4802      	ldr	r0, [pc, #8]	; (8006664 <Turn_On_Buzzer+0x14>)
 800665a:	f7fb fc71 	bl	8001f40 <HAL_GPIO_WritePin>
}
 800665e:	bf00      	nop
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	40010c00 	.word	0x40010c00

08006668 <Turn_Off_Buzzer>:

void Turn_Off_Buzzer(void){
 8006668:	b580      	push	{r7, lr}
 800666a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, RESET);
 800666c:	2200      	movs	r2, #0
 800666e:	2120      	movs	r1, #32
 8006670:	4802      	ldr	r0, [pc, #8]	; (800667c <Turn_Off_Buzzer+0x14>)
 8006672:	f7fb fc65 	bl	8001f40 <HAL_GPIO_WritePin>
}
 8006676:	bf00      	nop
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	40010c00 	.word	0x40010c00

08006680 <I2C_Init>:
uint8_t aI2C_TxBuffer[] = " ****I2C_TwoBoards communication based on Polling****  ****I2C_TwoBoards communication based on Polling****  ****I2C_TwoBoards communication based on Polling**** ";

/* Buffer used for reception */
uint8_t aI2C_RxBuffer[RXBUFFERSIZE];

void I2C_Init(void){
 8006680:	b580      	push	{r7, lr}
 8006682:	af00      	add	r7, sp, #0
	/*##-1- Configure the I2C peripheral ######################################*/
	  I2cHandle.Instance             = I2C1;
 8006684:	4b13      	ldr	r3, [pc, #76]	; (80066d4 <I2C_Init+0x54>)
 8006686:	4a14      	ldr	r2, [pc, #80]	; (80066d8 <I2C_Init+0x58>)
 8006688:	601a      	str	r2, [r3, #0]
	  I2cHandle.Init.ClockSpeed      = I2C_SPEEDCLOCK;
 800668a:	4b12      	ldr	r3, [pc, #72]	; (80066d4 <I2C_Init+0x54>)
 800668c:	4a13      	ldr	r2, [pc, #76]	; (80066dc <I2C_Init+0x5c>)
 800668e:	605a      	str	r2, [r3, #4]
	  I2cHandle.Init.DutyCycle       = I2C_DUTYCYCLE;
 8006690:	4b10      	ldr	r3, [pc, #64]	; (80066d4 <I2C_Init+0x54>)
 8006692:	2200      	movs	r2, #0
 8006694:	609a      	str	r2, [r3, #8]
	  I2cHandle.Init.OwnAddress1     = I2C_ADDRESS;
 8006696:	4b0f      	ldr	r3, [pc, #60]	; (80066d4 <I2C_Init+0x54>)
 8006698:	f240 320f 	movw	r2, #783	; 0x30f
 800669c:	60da      	str	r2, [r3, #12]
	  I2cHandle.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 800669e:	4b0d      	ldr	r3, [pc, #52]	; (80066d4 <I2C_Init+0x54>)
 80066a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80066a4:	611a      	str	r2, [r3, #16]
	  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80066a6:	4b0b      	ldr	r3, [pc, #44]	; (80066d4 <I2C_Init+0x54>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	615a      	str	r2, [r3, #20]
	  I2cHandle.Init.OwnAddress2     = 0xFF;
 80066ac:	4b09      	ldr	r3, [pc, #36]	; (80066d4 <I2C_Init+0x54>)
 80066ae:	22ff      	movs	r2, #255	; 0xff
 80066b0:	619a      	str	r2, [r3, #24]
	  I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80066b2:	4b08      	ldr	r3, [pc, #32]	; (80066d4 <I2C_Init+0x54>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	61da      	str	r2, [r3, #28]
	  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 80066b8:	4b06      	ldr	r3, [pc, #24]	; (80066d4 <I2C_Init+0x54>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	621a      	str	r2, [r3, #32]

	  if(HAL_I2C_Init(&I2cHandle) != HAL_OK)
 80066be:	4805      	ldr	r0, [pc, #20]	; (80066d4 <I2C_Init+0x54>)
 80066c0:	f7fb fc6e 	bl	8001fa0 <HAL_I2C_Init>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <I2C_Init+0x4e>
	  {
	    /* Initialization Error */
	    Error_Handler();
 80066ca:	f003 f86d 	bl	80097a8 <Error_Handler>
	  }
}
 80066ce:	bf00      	nop
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20002878 	.word	0x20002878
 80066d8:	40005400 	.word	0x40005400
 80066dc:	00061a80 	.word	0x00061a80

080066e0 <System_Initialization>:


enum InitState initState = HAL_INIT;

void System_Initialization(void)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
    while(initState != MAX_INIT_STATE){
 80066e4:	e093      	b.n	800680e <System_Initialization+0x12e>
        switch (initState) {
 80066e6:	4b4d      	ldr	r3, [pc, #308]	; (800681c <System_Initialization+0x13c>)
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	2b10      	cmp	r3, #16
 80066ec:	f200 8084 	bhi.w	80067f8 <System_Initialization+0x118>
 80066f0:	a201      	add	r2, pc, #4	; (adr r2, 80066f8 <System_Initialization+0x18>)
 80066f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f6:	bf00      	nop
 80066f8:	0800673d 	.word	0x0800673d
 80066fc:	08006743 	.word	0x08006743
 8006700:	08006749 	.word	0x08006749
 8006704:	08006759 	.word	0x08006759
 8006708:	08006765 	.word	0x08006765
 800670c:	08006771 	.word	0x08006771
 8006710:	0800677d 	.word	0x0800677d
 8006714:	08006785 	.word	0x08006785
 8006718:	080067bd 	.word	0x080067bd
 800671c:	08006791 	.word	0x08006791
 8006720:	080067a1 	.word	0x080067a1
 8006724:	080067ad 	.word	0x080067ad
 8006728:	08006801 	.word	0x08006801
 800672c:	080067cd 	.word	0x080067cd
 8006730:	080067d5 	.word	0x080067d5
 8006734:	080067e1 	.word	0x080067e1
 8006738:	080067ed 	.word	0x080067ed
        case HAL_INIT:
        	HAL_Init();
 800673c:	f7fa f992 	bl	8000a64 <HAL_Init>
            break;
 8006740:	e05f      	b.n	8006802 <System_Initialization+0x122>
        case SYSTEM_CLOCK_INIT:
        	SystemClock_Config();
 8006742:	f002 fd97 	bl	8009274 <SystemClock_Config>
            break;
 8006746:	e05c      	b.n	8006802 <System_Initialization+0x122>
        case UART_INIT:
        	UART3_Init();
 8006748:	f002 fe6a 	bl	8009420 <UART3_Init>
        	UART1_Init();
 800674c:	f002 fe38 	bl	80093c0 <UART1_Init>
        	DEBUG_INIT(UART3_SendToHost((uint8_t*)"UART_INIT - Done \r\n"));
 8006750:	4833      	ldr	r0, [pc, #204]	; (8006820 <System_Initialization+0x140>)
 8006752:	f002 febb 	bl	80094cc <UART3_SendToHost>
        	break;
 8006756:	e054      	b.n	8006802 <System_Initialization+0x122>
        case GPIO_INIT:
        	MX_GPIO_Init();
 8006758:	f7ff fe72 	bl	8006440 <MX_GPIO_Init>
        	DEBUG_INIT(UART3_SendToHost((uint8_t*)"GPIO_INIT - ADC_DMA_Init - Done \r\n"));
 800675c:	4831      	ldr	r0, [pc, #196]	; (8006824 <System_Initialization+0x144>)
 800675e:	f002 feb5 	bl	80094cc <UART3_SendToHost>
            break;
 8006762:	e04e      	b.n	8006802 <System_Initialization+0x122>
        case LED_DISPLAY_INIT:
        	Led_Display_Init();
 8006764:	f000 f878 	bl	8006858 <Led_Display_Init>
        	DEBUG_INIT(UART3_SendToHost((uint8_t*)"LED_DISPLAY_INIT - Done \r\n"));
 8006768:	482f      	ldr	r0, [pc, #188]	; (8006828 <System_Initialization+0x148>)
 800676a:	f002 feaf 	bl	80094cc <UART3_SendToHost>
        	break;
 800676e:	e048      	b.n	8006802 <System_Initialization+0x122>
        case RELAY_INIT:
        	Relay_Init();
 8006770:	f001 f824 	bl	80077bc <Relay_Init>
        	DEBUG_INIT(UART3_SendToHost((uint8_t*)"RELAY_INIT - Done \r\n"));
 8006774:	482d      	ldr	r0, [pc, #180]	; (800682c <System_Initialization+0x14c>)
 8006776:	f002 fea9 	bl	80094cc <UART3_SendToHost>
        	break;
 800677a:	e042      	b.n	8006802 <System_Initialization+0x122>
        case FLASH_INIT:
        	DEBUG_INIT(UART3_SendToHost((uint8_t*)"FLASH_INIT - Done \r\n"));
 800677c:	482c      	ldr	r0, [pc, #176]	; (8006830 <System_Initialization+0x150>)
 800677e:	f002 fea5 	bl	80094cc <UART3_SendToHost>
        	break;
 8006782:	e03e      	b.n	8006802 <System_Initialization+0x122>
        case TIMER_INIT:
        	Timer_Init();
 8006784:	f002 fdd4 	bl	8009330 <Timer_Init>
        	DEBUG_INIT(UART3_SendToHost((uint8_t*)"TIMER_INIT - Done \r\n"));
 8006788:	482a      	ldr	r0, [pc, #168]	; (8006834 <System_Initialization+0x154>)
 800678a:	f002 fe9f 	bl	80094cc <UART3_SendToHost>
            break;
 800678e:	e038      	b.n	8006802 <System_Initialization+0x122>
        case SPI_INIT:
        	SPI1_Init();
 8006790:	f002 fcf2 	bl	8009178 <SPI1_Init>
        	SPI2_Init();
 8006794:	f002 fcf6 	bl	8009184 <SPI2_Init>
        	DEBUG_INIT(UART3_SendToHost((uint8_t*)"SPI_INIT - Done \r\n"));
 8006798:	4827      	ldr	r0, [pc, #156]	; (8006838 <System_Initialization+0x158>)
 800679a:	f002 fe97 	bl	80094cc <UART3_SendToHost>
        	break;
 800679e:	e030      	b.n	8006802 <System_Initialization+0x122>
        case SPI_25LCXXX_INIT:
        	MC25LC512_Initilize();
 80067a0:	f7fe fc66 	bl	8005070 <MC25LC512_Initilize>
        	DEBUG_INIT(UART3_SendToHost((uint8_t*)"SPI_25LCXXX_INIT - Done \r\n"));
 80067a4:	4825      	ldr	r0, [pc, #148]	; (800683c <System_Initialization+0x15c>)
 80067a6:	f002 fe91 	bl	80094cc <UART3_SendToHost>
        	break;
 80067aa:	e02a      	b.n	8006802 <System_Initialization+0x122>
        case I2C_INIT:
        	I2C_Init();
 80067ac:	f7ff ff68 	bl	8006680 <I2C_Init>
        	PCF_Init();
 80067b0:	f000 fb40 	bl	8006e34 <PCF_Init>
        	DEBUG_INIT(UART3_SendToHost((uint8_t*)"I2C_Init - Done \r\n"));
 80067b4:	4822      	ldr	r0, [pc, #136]	; (8006840 <System_Initialization+0x160>)
 80067b6:	f002 fe89 	bl	80094cc <UART3_SendToHost>
        	break;
 80067ba:	e022      	b.n	8006802 <System_Initialization+0x122>
        case ADC_INIT:
        	ADC_DMA_Init();
 80067bc:	f7fe fd9a 	bl	80052f4 <ADC_DMA_Init>
        	ADC1_Init();
 80067c0:	f7fe fc92 	bl	80050e8 <ADC1_Init>
        	DEBUG_INIT(UART3_SendToHost((uint8_t*)"ADC_INIT - Done \r\n"));
 80067c4:	481f      	ldr	r0, [pc, #124]	; (8006844 <System_Initialization+0x164>)
 80067c6:	f002 fe81 	bl	80094cc <UART3_SendToHost>
        	break;
 80067ca:	e01a      	b.n	8006802 <System_Initialization+0x122>
        case ACCELERATOR_INIT:
        	break;
        case WATCH_DOG_INIT:

        	DEBUG_INIT(UART3_SendToHost((uint8_t*)"WATCH_DOG_INIT - Done \r\n"));
 80067cc:	481e      	ldr	r0, [pc, #120]	; (8006848 <System_Initialization+0x168>)
 80067ce:	f002 fe7d 	bl	80094cc <UART3_SendToHost>
            break;
 80067d2:	e016      	b.n	8006802 <System_Initialization+0x122>
        case START_DMA_ADC:
        	ADC_Start_Getting_Values();
 80067d4:	f7fe fdac 	bl	8005330 <ADC_Start_Getting_Values>
        	DEBUG_INIT(UART3_SendToHost((uint8_t*)"START_DMA_ADC - Done \r\n"));
 80067d8:	481c      	ldr	r0, [pc, #112]	; (800684c <System_Initialization+0x16c>)
 80067da:	f002 fe77 	bl	80094cc <UART3_SendToHost>
        	break;
 80067de:	e010      	b.n	8006802 <System_Initialization+0x122>
        case SIM_3G_INIT:
        	Sim3g_Init();
 80067e0:	f001 fa00 	bl	8007be4 <Sim3g_Init>
        	DEBUG_INIT(UART3_SendToHost((uint8_t*)"SIM_3G_INIT - Done \r\n"));
 80067e4:	481a      	ldr	r0, [pc, #104]	; (8006850 <System_Initialization+0x170>)
 80067e6:	f002 fe71 	bl	80094cc <UART3_SendToHost>
        	break;
 80067ea:	e00a      	b.n	8006802 <System_Initialization+0x122>
        case POWER_SETUP_INIT:
        	DEBUG_INIT(UART3_SendToHost((uint8_t*)"POWER_SETUP_INIT - Done \r\n"));
 80067ec:	4819      	ldr	r0, [pc, #100]	; (8006854 <System_Initialization+0x174>)
 80067ee:	f002 fe6d 	bl	80094cc <UART3_SendToHost>
        	Power_Setup();
 80067f2:	f000 fe7b 	bl	80074ec <Power_Setup>

        	break;
 80067f6:	e004      	b.n	8006802 <System_Initialization+0x122>
        default:
            initState = HAL_INIT;
 80067f8:	4b08      	ldr	r3, [pc, #32]	; (800681c <System_Initialization+0x13c>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	701a      	strb	r2, [r3, #0]
            break;
 80067fe:	e000      	b.n	8006802 <System_Initialization+0x122>
        	break;
 8006800:	bf00      	nop
        }
        initState = initState + 1;
 8006802:	4b06      	ldr	r3, [pc, #24]	; (800681c <System_Initialization+0x13c>)
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	3301      	adds	r3, #1
 8006808:	b2da      	uxtb	r2, r3
 800680a:	4b04      	ldr	r3, [pc, #16]	; (800681c <System_Initialization+0x13c>)
 800680c:	701a      	strb	r2, [r3, #0]
    while(initState != MAX_INIT_STATE){
 800680e:	4b03      	ldr	r3, [pc, #12]	; (800681c <System_Initialization+0x13c>)
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	2b11      	cmp	r3, #17
 8006814:	f47f af67 	bne.w	80066e6 <System_Initialization+0x6>
    }
}
 8006818:	bf00      	nop
 800681a:	bd80      	pop	{r7, pc}
 800681c:	200001f1 	.word	0x200001f1
 8006820:	0800aa50 	.word	0x0800aa50
 8006824:	0800aa64 	.word	0x0800aa64
 8006828:	0800aa88 	.word	0x0800aa88
 800682c:	0800aaa4 	.word	0x0800aaa4
 8006830:	0800aabc 	.word	0x0800aabc
 8006834:	0800aad4 	.word	0x0800aad4
 8006838:	0800aaec 	.word	0x0800aaec
 800683c:	0800ab00 	.word	0x0800ab00
 8006840:	0800ab1c 	.word	0x0800ab1c
 8006844:	0800ab30 	.word	0x0800ab30
 8006848:	0800ab44 	.word	0x0800ab44
 800684c:	0800ab60 	.word	0x0800ab60
 8006850:	0800ab78 	.word	0x0800ab78
 8006854:	0800ab90 	.word	0x0800ab90

08006858 <Led_Display_Init>:
static void Clock_On(int8_t count);
static void Clock_Off(int8_t count);



void Led_Display_Init(void){
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800685e:	463b      	mov	r3, r7
 8006860:	2200      	movs	r2, #0
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	605a      	str	r2, [r3, #4]
 8006866:	609a      	str	r2, [r3, #8]
 8006868:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800686a:	2301      	movs	r3, #1
 800686c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800686e:	2301      	movs	r3, #1
 8006870:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006872:	2303      	movs	r3, #3
 8006874:	60fb      	str	r3, [r7, #12]

	GPIO_InitStruct.Pin = LED_SDI;
 8006876:	2340      	movs	r3, #64	; 0x40
 8006878:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(LED_SDI_PORT, &GPIO_InitStruct);
 800687a:	463b      	mov	r3, r7
 800687c:	4619      	mov	r1, r3
 800687e:	4813      	ldr	r0, [pc, #76]	; (80068cc <Led_Display_Init+0x74>)
 8006880:	f7fb f948 	bl	8001b14 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_SCK;
 8006884:	2308      	movs	r3, #8
 8006886:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(LED_SCK_PORT, &GPIO_InitStruct);
 8006888:	463b      	mov	r3, r7
 800688a:	4619      	mov	r1, r3
 800688c:	480f      	ldr	r0, [pc, #60]	; (80068cc <Led_Display_Init+0x74>)
 800688e:	f7fb f941 	bl	8001b14 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_LE;
 8006892:	2310      	movs	r3, #16
 8006894:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(LED_LE_PORT, &GPIO_InitStruct);
 8006896:	463b      	mov	r3, r7
 8006898:	4619      	mov	r1, r3
 800689a:	480c      	ldr	r0, [pc, #48]	; (80068cc <Led_Display_Init+0x74>)
 800689c:	f7fb f93a 	bl	8001b14 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_OE;
 80068a0:	2320      	movs	r3, #32
 80068a2:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(LED_OE_PORT, &GPIO_InitStruct);
 80068a4:	463b      	mov	r3, r7
 80068a6:	4619      	mov	r1, r3
 80068a8:	4808      	ldr	r0, [pc, #32]	; (80068cc <Led_Display_Init+0x74>)
 80068aa:	f7fb f933 	bl	8001b14 <HAL_GPIO_Init>

	Output_Enable();
 80068ae:	f000 f84b 	bl	8006948 <Output_Enable>
	Latch_Disable(1);
 80068b2:	2001      	movs	r0, #1
 80068b4:	f000 f82a 	bl	800690c <Latch_Disable>
	Clock_Off(1);
 80068b8:	2001      	movs	r0, #1
 80068ba:	f000 f86f 	bl	800699c <Clock_Off>
	Led_Display_Clear_All();
 80068be:	f000 f965 	bl	8006b8c <Led_Display_Clear_All>

}
 80068c2:	bf00      	nop
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	40011000 	.word	0x40011000

080068d0 <Latch_Enable>:


static void Latch_Enable(int8_t count) {
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	4603      	mov	r3, r0
 80068d8:	71fb      	strb	r3, [r7, #7]
	if (count <= 0) return;
 80068da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	dd0e      	ble.n	8006900 <Latch_Enable+0x30>
	while (count-- != 0) {
 80068e2:	e004      	b.n	80068ee <Latch_Enable+0x1e>
		HAL_GPIO_WritePin(LED_LE_PORT, LED_LE, GPIO_PIN_RESET);
 80068e4:	2200      	movs	r2, #0
 80068e6:	2110      	movs	r1, #16
 80068e8:	4807      	ldr	r0, [pc, #28]	; (8006908 <Latch_Enable+0x38>)
 80068ea:	f7fb fb29 	bl	8001f40 <HAL_GPIO_WritePin>
	while (count-- != 0) {
 80068ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	3a01      	subs	r2, #1
 80068f6:	b2d2      	uxtb	r2, r2
 80068f8:	71fa      	strb	r2, [r7, #7]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1f2      	bne.n	80068e4 <Latch_Enable+0x14>
 80068fe:	e000      	b.n	8006902 <Latch_Enable+0x32>
	if (count <= 0) return;
 8006900:	bf00      	nop
	}
}
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	40011000 	.word	0x40011000

0800690c <Latch_Disable>:
static void Latch_Disable(int8_t count) {
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	4603      	mov	r3, r0
 8006914:	71fb      	strb	r3, [r7, #7]
	if (count <= 0) return;
 8006916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800691a:	2b00      	cmp	r3, #0
 800691c:	dd0e      	ble.n	800693c <Latch_Disable+0x30>
	while (count-- != 0) {
 800691e:	e004      	b.n	800692a <Latch_Disable+0x1e>
		HAL_GPIO_WritePin(LED_LE_PORT, LED_LE, GPIO_PIN_SET);
 8006920:	2201      	movs	r2, #1
 8006922:	2110      	movs	r1, #16
 8006924:	4807      	ldr	r0, [pc, #28]	; (8006944 <Latch_Disable+0x38>)
 8006926:	f7fb fb0b 	bl	8001f40 <HAL_GPIO_WritePin>
	while (count-- != 0) {
 800692a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800692e:	b2da      	uxtb	r2, r3
 8006930:	3a01      	subs	r2, #1
 8006932:	b2d2      	uxtb	r2, r2
 8006934:	71fa      	strb	r2, [r7, #7]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1f2      	bne.n	8006920 <Latch_Disable+0x14>
 800693a:	e000      	b.n	800693e <Latch_Disable+0x32>
	if (count <= 0) return;
 800693c:	bf00      	nop
	}
}
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	40011000 	.word	0x40011000

08006948 <Output_Enable>:
static void Output_Enable(void) {
 8006948:	b580      	push	{r7, lr}
 800694a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_OE_PORT, LED_OE, GPIO_PIN_SET);
 800694c:	2201      	movs	r2, #1
 800694e:	2120      	movs	r1, #32
 8006950:	4802      	ldr	r0, [pc, #8]	; (800695c <Output_Enable+0x14>)
 8006952:	f7fb faf5 	bl	8001f40 <HAL_GPIO_WritePin>
}
 8006956:	bf00      	nop
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	40011000 	.word	0x40011000

08006960 <Clock_On>:
//static void Output_Disable(void){
//	HAL_GPIO_WritePin(LED_OE_PORT, LED_OE, GPIO_PIN_SET);
//}
static void Clock_On(int8_t count) {
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	4603      	mov	r3, r0
 8006968:	71fb      	strb	r3, [r7, #7]
	if (count <= 0) return;
 800696a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800696e:	2b00      	cmp	r3, #0
 8006970:	dd0e      	ble.n	8006990 <Clock_On+0x30>
	while (count-- != 0) {
 8006972:	e004      	b.n	800697e <Clock_On+0x1e>
		HAL_GPIO_WritePin(LED_SCK_PORT, LED_SCK, GPIO_PIN_RESET);
 8006974:	2200      	movs	r2, #0
 8006976:	2108      	movs	r1, #8
 8006978:	4807      	ldr	r0, [pc, #28]	; (8006998 <Clock_On+0x38>)
 800697a:	f7fb fae1 	bl	8001f40 <HAL_GPIO_WritePin>
	while (count-- != 0) {
 800697e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006982:	b2da      	uxtb	r2, r3
 8006984:	3a01      	subs	r2, #1
 8006986:	b2d2      	uxtb	r2, r2
 8006988:	71fa      	strb	r2, [r7, #7]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1f2      	bne.n	8006974 <Clock_On+0x14>
 800698e:	e000      	b.n	8006992 <Clock_On+0x32>
	if (count <= 0) return;
 8006990:	bf00      	nop
	}

}
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	40011000 	.word	0x40011000

0800699c <Clock_Off>:
static void Clock_Off(int8_t count) {
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	4603      	mov	r3, r0
 80069a4:	71fb      	strb	r3, [r7, #7]
	if (count <= 0) return;
 80069a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	dd0e      	ble.n	80069cc <Clock_Off+0x30>
	while (count-- != 0) {
 80069ae:	e004      	b.n	80069ba <Clock_Off+0x1e>
		HAL_GPIO_WritePin(LED_SCK_PORT, LED_SCK, GPIO_PIN_SET);
 80069b0:	2201      	movs	r2, #1
 80069b2:	2108      	movs	r1, #8
 80069b4:	4807      	ldr	r0, [pc, #28]	; (80069d4 <Clock_Off+0x38>)
 80069b6:	f7fb fac3 	bl	8001f40 <HAL_GPIO_WritePin>
	while (count-- != 0) {
 80069ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	3a01      	subs	r2, #1
 80069c2:	b2d2      	uxtb	r2, r2
 80069c4:	71fa      	strb	r2, [r7, #7]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1f2      	bne.n	80069b0 <Clock_Off+0x14>
 80069ca:	e000      	b.n	80069ce <Clock_Off+0x32>
	if (count <= 0) return;
 80069cc:	bf00      	nop
	}

}
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	40011000 	.word	0x40011000

080069d8 <Data_Out>:
static void Data_Out(GPIO_PinState state) {
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	4603      	mov	r3, r0
 80069e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_SDI_PORT, LED_SDI, state);
 80069e2:	79fb      	ldrb	r3, [r7, #7]
 80069e4:	461a      	mov	r2, r3
 80069e6:	2140      	movs	r1, #64	; 0x40
 80069e8:	4803      	ldr	r0, [pc, #12]	; (80069f8 <Data_Out+0x20>)
 80069ea:	f7fb faa9 	bl	8001f40 <HAL_GPIO_WritePin>
}
 80069ee:	bf00      	nop
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	40011000 	.word	0x40011000

080069fc <Led_Display>:

void Led_Display(void) {
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
	uint8_t i;
	uint32_t ledValue = ledStatus << 4;
 8006a02:	4b14      	ldr	r3, [pc, #80]	; (8006a54 <Led_Display+0x58>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	011b      	lsls	r3, r3, #4
 8006a08:	603b      	str	r3, [r7, #0]
	Latch_Disable(1);
 8006a0a:	2001      	movs	r0, #1
 8006a0c:	f7ff ff7e 	bl	800690c <Latch_Disable>
	for (i = 0; i < 24; i++) {
 8006a10:	2300      	movs	r3, #0
 8006a12:	71fb      	strb	r3, [r7, #7]
 8006a14:	e013      	b.n	8006a3e <Led_Display+0x42>
		Clock_Off(1);
 8006a16:	2001      	movs	r0, #1
 8006a18:	f7ff ffc0 	bl	800699c <Clock_Off>
		Data_Out(ledValue & 0x00000001);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	f003 0301 	and.w	r3, r3, #1
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7ff ffd6 	bl	80069d8 <Data_Out>
		Clock_On(10);
 8006a2c:	200a      	movs	r0, #10
 8006a2e:	f7ff ff97 	bl	8006960 <Clock_On>
		ledValue = ledValue >> 1;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	085b      	lsrs	r3, r3, #1
 8006a36:	603b      	str	r3, [r7, #0]
	for (i = 0; i < 24; i++) {
 8006a38:	79fb      	ldrb	r3, [r7, #7]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	71fb      	strb	r3, [r7, #7]
 8006a3e:	79fb      	ldrb	r3, [r7, #7]
 8006a40:	2b17      	cmp	r3, #23
 8006a42:	d9e8      	bls.n	8006a16 <Led_Display+0x1a>
	}
	Latch_Enable(1);
 8006a44:	2001      	movs	r0, #1
 8006a46:	f7ff ff43 	bl	80068d0 <Latch_Enable>
}
 8006a4a:	bf00      	nop
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	200028cc 	.word	0x200028cc

08006a58 <Led_Update_Status_Buffer>:


void Led_Update_Status_Buffer(uint8_t position, NodeStatus status){
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	4603      	mov	r3, r0
 8006a60:	460a      	mov	r2, r1
 8006a62:	71fb      	strb	r3, [r7, #7]
 8006a64:	4613      	mov	r3, r2
 8006a66:	71bb      	strb	r3, [r7, #6]
//	uint8_t strtmpLED[] = "                                     ";
	if(position < NUMBER_OF_RELAYS){
 8006a68:	79fb      	ldrb	r3, [r7, #7]
 8006a6a:	2b09      	cmp	r3, #9
 8006a6c:	d856      	bhi.n	8006b1c <Led_Update_Status_Buffer+0xc4>
//		sprintf((char*) strtmpLED, "p = %d\t s = %d\r\n", (int) position, (int) status);
//		UART3_SendToHost((uint8_t *)strtmpLED);
		if(status == NODE_NORMAL) {
 8006a6e:	79bb      	ldrb	r3, [r7, #6]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d104      	bne.n	8006a7e <Led_Update_Status_Buffer+0x26>
			ledStatusBuffer[position] = (LED_COLOR)GREEN;
 8006a74:	79fb      	ldrb	r3, [r7, #7]
 8006a76:	4a2c      	ldr	r2, [pc, #176]	; (8006b28 <Led_Update_Status_Buffer+0xd0>)
 8006a78:	2101      	movs	r1, #1
 8006a7a:	54d1      	strb	r1, [r2, r3]
		} else if(status == NODE_OVER_TIME) {
			ledStatusBuffer[position] = (LED_COLOR)RED;
		}

	}
}
 8006a7c:	e04e      	b.n	8006b1c <Led_Update_Status_Buffer+0xc4>
		} else if(status == NODE_READY) {
 8006a7e:	79bb      	ldrb	r3, [r7, #6]
 8006a80:	2b0a      	cmp	r3, #10
 8006a82:	d104      	bne.n	8006a8e <Led_Update_Status_Buffer+0x36>
			ledStatusBuffer[position] = (LED_COLOR)BLINK_GREEN_SLOW;
 8006a84:	79fb      	ldrb	r3, [r7, #7]
 8006a86:	4a28      	ldr	r2, [pc, #160]	; (8006b28 <Led_Update_Status_Buffer+0xd0>)
 8006a88:	2106      	movs	r1, #6
 8006a8a:	54d1      	strb	r1, [r2, r3]
}
 8006a8c:	e046      	b.n	8006b1c <Led_Update_Status_Buffer+0xc4>
		} else if(status == CHARGING) {
 8006a8e:	79bb      	ldrb	r3, [r7, #6]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d104      	bne.n	8006a9e <Led_Update_Status_Buffer+0x46>
			ledStatusBuffer[position] = (LED_COLOR)BLINK_YELLOW_SLOW;
 8006a94:	79fb      	ldrb	r3, [r7, #7]
 8006a96:	4a24      	ldr	r2, [pc, #144]	; (8006b28 <Led_Update_Status_Buffer+0xd0>)
 8006a98:	2108      	movs	r1, #8
 8006a9a:	54d1      	strb	r1, [r2, r3]
}
 8006a9c:	e03e      	b.n	8006b1c <Led_Update_Status_Buffer+0xc4>
		} else if(status == CHARGEFULL) {
 8006a9e:	79bb      	ldrb	r3, [r7, #6]
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d104      	bne.n	8006aae <Led_Update_Status_Buffer+0x56>
			ledStatusBuffer[position] = (LED_COLOR)YELLOW;
 8006aa4:	79fb      	ldrb	r3, [r7, #7]
 8006aa6:	4a20      	ldr	r2, [pc, #128]	; (8006b28 <Led_Update_Status_Buffer+0xd0>)
 8006aa8:	2103      	movs	r1, #3
 8006aaa:	54d1      	strb	r1, [r2, r3]
}
 8006aac:	e036      	b.n	8006b1c <Led_Update_Status_Buffer+0xc4>
		} else if(status == UNPLUG) {
 8006aae:	79bb      	ldrb	r3, [r7, #6]
 8006ab0:	2b03      	cmp	r3, #3
 8006ab2:	d104      	bne.n	8006abe <Led_Update_Status_Buffer+0x66>
			ledStatusBuffer[position] = (LED_COLOR)BLINK_YELLOW_FAST;
 8006ab4:	79fb      	ldrb	r3, [r7, #7]
 8006ab6:	4a1c      	ldr	r2, [pc, #112]	; (8006b28 <Led_Update_Status_Buffer+0xd0>)
 8006ab8:	2109      	movs	r1, #9
 8006aba:	54d1      	strb	r1, [r2, r3]
}
 8006abc:	e02e      	b.n	8006b1c <Led_Update_Status_Buffer+0xc4>
		} else if(status == NO_POWER) {
 8006abe:	79bb      	ldrb	r3, [r7, #6]
 8006ac0:	2b04      	cmp	r3, #4
 8006ac2:	d104      	bne.n	8006ace <Led_Update_Status_Buffer+0x76>
			ledStatusBuffer[position] = (LED_COLOR)BLINK_RED_FAST;
 8006ac4:	79fb      	ldrb	r3, [r7, #7]
 8006ac6:	4a18      	ldr	r2, [pc, #96]	; (8006b28 <Led_Update_Status_Buffer+0xd0>)
 8006ac8:	2105      	movs	r1, #5
 8006aca:	54d1      	strb	r1, [r2, r3]
}
 8006acc:	e026      	b.n	8006b1c <Led_Update_Status_Buffer+0xc4>
		} else if(status == NO_FUSE) {
 8006ace:	79bb      	ldrb	r3, [r7, #6]
 8006ad0:	2b05      	cmp	r3, #5
 8006ad2:	d104      	bne.n	8006ade <Led_Update_Status_Buffer+0x86>
			ledStatusBuffer[position] = (LED_COLOR)BLINK_RED_FAST;
 8006ad4:	79fb      	ldrb	r3, [r7, #7]
 8006ad6:	4a14      	ldr	r2, [pc, #80]	; (8006b28 <Led_Update_Status_Buffer+0xd0>)
 8006ad8:	2105      	movs	r1, #5
 8006ada:	54d1      	strb	r1, [r2, r3]
}
 8006adc:	e01e      	b.n	8006b1c <Led_Update_Status_Buffer+0xc4>
		} else if(status == NO_RELAY) {
 8006ade:	79bb      	ldrb	r3, [r7, #6]
 8006ae0:	2b06      	cmp	r3, #6
 8006ae2:	d104      	bne.n	8006aee <Led_Update_Status_Buffer+0x96>
			ledStatusBuffer[position] = (LED_COLOR)BLINK_RED_SLOW;
 8006ae4:	79fb      	ldrb	r3, [r7, #7]
 8006ae6:	4a10      	ldr	r2, [pc, #64]	; (8006b28 <Led_Update_Status_Buffer+0xd0>)
 8006ae8:	2104      	movs	r1, #4
 8006aea:	54d1      	strb	r1, [r2, r3]
}
 8006aec:	e016      	b.n	8006b1c <Led_Update_Status_Buffer+0xc4>
		} else if(status == NODE_OVER_CURRENT) {
 8006aee:	79bb      	ldrb	r3, [r7, #6]
 8006af0:	2b07      	cmp	r3, #7
 8006af2:	d104      	bne.n	8006afe <Led_Update_Status_Buffer+0xa6>
			ledStatusBuffer[position] = (LED_COLOR)RED;
 8006af4:	79fb      	ldrb	r3, [r7, #7]
 8006af6:	4a0c      	ldr	r2, [pc, #48]	; (8006b28 <Led_Update_Status_Buffer+0xd0>)
 8006af8:	2102      	movs	r1, #2
 8006afa:	54d1      	strb	r1, [r2, r3]
}
 8006afc:	e00e      	b.n	8006b1c <Led_Update_Status_Buffer+0xc4>
		} else if(status == NODE_OVER_MONEY) {
 8006afe:	79bb      	ldrb	r3, [r7, #6]
 8006b00:	2b08      	cmp	r3, #8
 8006b02:	d104      	bne.n	8006b0e <Led_Update_Status_Buffer+0xb6>
			ledStatusBuffer[position] = (LED_COLOR)RED;
 8006b04:	79fb      	ldrb	r3, [r7, #7]
 8006b06:	4a08      	ldr	r2, [pc, #32]	; (8006b28 <Led_Update_Status_Buffer+0xd0>)
 8006b08:	2102      	movs	r1, #2
 8006b0a:	54d1      	strb	r1, [r2, r3]
}
 8006b0c:	e006      	b.n	8006b1c <Led_Update_Status_Buffer+0xc4>
		} else if(status == NODE_OVER_TIME) {
 8006b0e:	79bb      	ldrb	r3, [r7, #6]
 8006b10:	2b09      	cmp	r3, #9
 8006b12:	d103      	bne.n	8006b1c <Led_Update_Status_Buffer+0xc4>
			ledStatusBuffer[position] = (LED_COLOR)RED;
 8006b14:	79fb      	ldrb	r3, [r7, #7]
 8006b16:	4a04      	ldr	r2, [pc, #16]	; (8006b28 <Led_Update_Status_Buffer+0xd0>)
 8006b18:	2102      	movs	r1, #2
 8006b1a:	54d1      	strb	r1, [r2, r3]
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bc80      	pop	{r7}
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	2000000c 	.word	0x2000000c

08006b2c <Led_Display_Color>:

void Led_Display_Color(uint8_t position, LED_COLOR color) {
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	4603      	mov	r3, r0
 8006b34:	460a      	mov	r2, r1
 8006b36:	71fb      	strb	r3, [r7, #7]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	71bb      	strb	r3, [r7, #6]
	if(position < NUMBER_OF_RELAYS){
 8006b3c:	79fb      	ldrb	r3, [r7, #7]
 8006b3e:	2b09      	cmp	r3, #9
 8006b40:	d81c      	bhi.n	8006b7c <Led_Display_Color+0x50>
		uint32_t colorMask = color & 0x00000003;
 8006b42:	79bb      	ldrb	r3, [r7, #6]
 8006b44:	f003 0303 	and.w	r3, r3, #3
 8006b48:	60fb      	str	r3, [r7, #12]
		ledStatus &= ~(0x00000003 << ((NUMBER_OF_RELAYS - position - 1) * 2));
 8006b4a:	79fb      	ldrb	r3, [r7, #7]
 8006b4c:	f1c3 0309 	rsb	r3, r3, #9
 8006b50:	005b      	lsls	r3, r3, #1
 8006b52:	2203      	movs	r2, #3
 8006b54:	fa02 f303 	lsl.w	r3, r2, r3
 8006b58:	43db      	mvns	r3, r3
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	4b0a      	ldr	r3, [pc, #40]	; (8006b88 <Led_Display_Color+0x5c>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4013      	ands	r3, r2
 8006b62:	4a09      	ldr	r2, [pc, #36]	; (8006b88 <Led_Display_Color+0x5c>)
 8006b64:	6013      	str	r3, [r2, #0]
		ledStatus |= colorMask << ((NUMBER_OF_RELAYS - position - 1) * 2);
 8006b66:	79fb      	ldrb	r3, [r7, #7]
 8006b68:	f1c3 0309 	rsb	r3, r3, #9
 8006b6c:	005b      	lsls	r3, r3, #1
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	409a      	lsls	r2, r3
 8006b72:	4b05      	ldr	r3, [pc, #20]	; (8006b88 <Led_Display_Color+0x5c>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	4a03      	ldr	r2, [pc, #12]	; (8006b88 <Led_Display_Color+0x5c>)
 8006b7a:	6013      	str	r3, [r2, #0]
	}

}
 8006b7c:	bf00      	nop
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bc80      	pop	{r7}
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	200028cc 	.word	0x200028cc

08006b8c <Led_Display_Clear_All>:


void Led_Display_Clear_All(void) {
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < NUMBER_OF_RELAYS; i++){
 8006b92:	2300      	movs	r3, #0
 8006b94:	71fb      	strb	r3, [r7, #7]
 8006b96:	e007      	b.n	8006ba8 <Led_Display_Clear_All+0x1c>
		Led_Update_Status_Buffer(i, NONE);
 8006b98:	79fb      	ldrb	r3, [r7, #7]
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7ff ff5b 	bl	8006a58 <Led_Update_Status_Buffer>
	for(uint8_t i = 0; i < NUMBER_OF_RELAYS; i++){
 8006ba2:	79fb      	ldrb	r3, [r7, #7]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	71fb      	strb	r3, [r7, #7]
 8006ba8:	79fb      	ldrb	r3, [r7, #7]
 8006baa:	2b09      	cmp	r3, #9
 8006bac:	d9f4      	bls.n	8006b98 <Led_Display_Clear_All+0xc>
	}
}
 8006bae:	bf00      	nop
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <Led_Display_Set_All>:

void Led_Display_Set_All(LED_COLOR color) {
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b084      	sub	sp, #16
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < NUMBER_OF_RELAYS; i++){
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	73fb      	strb	r3, [r7, #15]
 8006bc4:	e008      	b.n	8006bd8 <Led_Display_Set_All+0x22>
		Led_Update_Status_Buffer(i, color);
 8006bc6:	79fa      	ldrb	r2, [r7, #7]
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
 8006bca:	4611      	mov	r1, r2
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7ff ff43 	bl	8006a58 <Led_Update_Status_Buffer>
	for(uint8_t i = 0; i < NUMBER_OF_RELAYS; i++){
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	73fb      	strb	r3, [r7, #15]
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
 8006bda:	2b09      	cmp	r3, #9
 8006bdc:	d9f3      	bls.n	8006bc6 <Led_Display_Set_All+0x10>
	}
}
 8006bde:	bf00      	nop
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
	...

08006be8 <LED_Display_FSM>:
	static uint8_t ledIndex = 0;

	ledStatus = 0x01 << ledIndex;
	ledIndex = (ledIndex + 1)%20;
}
void LED_Display_FSM(void) { // call each 200ms
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
	LED_COLOR tempLedStatusBuffer;
	for (uint8_t relayIndex = 0; relayIndex < NUMBER_OF_RELAYS; relayIndex++) {
 8006bee:	2300      	movs	r3, #0
 8006bf0:	71fb      	strb	r3, [r7, #7]
 8006bf2:	e110      	b.n	8006e16 <LED_Display_FSM+0x22e>
		tempLedStatusBuffer = ledStatusBuffer[relayIndex];
 8006bf4:	79fb      	ldrb	r3, [r7, #7]
 8006bf6:	4a8d      	ldr	r2, [pc, #564]	; (8006e2c <LED_Display_FSM+0x244>)
 8006bf8:	5cd3      	ldrb	r3, [r2, r3]
 8006bfa:	71bb      	strb	r3, [r7, #6]
		if (tempLedStatusBuffer == NONE || tempLedStatusBuffer == RED
 8006bfc:	79bb      	ldrb	r3, [r7, #6]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d008      	beq.n	8006c14 <LED_Display_FSM+0x2c>
 8006c02:	79bb      	ldrb	r3, [r7, #6]
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d005      	beq.n	8006c14 <LED_Display_FSM+0x2c>
				|| tempLedStatusBuffer == GREEN || tempLedStatusBuffer == YELLOW) {
 8006c08:	79bb      	ldrb	r3, [r7, #6]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d002      	beq.n	8006c14 <LED_Display_FSM+0x2c>
 8006c0e:	79bb      	ldrb	r3, [r7, #6]
 8006c10:	2b03      	cmp	r3, #3
 8006c12:	d106      	bne.n	8006c22 <LED_Display_FSM+0x3a>

			Led_Display_Color(relayIndex, tempLedStatusBuffer);
 8006c14:	79ba      	ldrb	r2, [r7, #6]
 8006c16:	79fb      	ldrb	r3, [r7, #7]
 8006c18:	4611      	mov	r1, r2
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7ff ff86 	bl	8006b2c <Led_Display_Color>
 8006c20:	e0f6      	b.n	8006e10 <LED_Display_FSM+0x228>

		} else if (tempLedStatusBuffer == BLINK_RED_FAST) {
 8006c22:	79bb      	ldrb	r3, [r7, #6]
 8006c24:	2b05      	cmp	r3, #5
 8006c26:	d126      	bne.n	8006c76 <LED_Display_FSM+0x8e>

			if (ledDisplayCounterBuffer[relayIndex] < TIME_FOR_FAST_BLINK_ON) {
 8006c28:	79fb      	ldrb	r3, [r7, #7]
 8006c2a:	4a81      	ldr	r2, [pc, #516]	; (8006e30 <LED_Display_FSM+0x248>)
 8006c2c:	5cd3      	ldrb	r3, [r2, r3]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d105      	bne.n	8006c3e <LED_Display_FSM+0x56>
				Led_Display_Color(relayIndex, RED);
 8006c32:	79fb      	ldrb	r3, [r7, #7]
 8006c34:	2102      	movs	r1, #2
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7ff ff78 	bl	8006b2c <Led_Display_Color>
 8006c3c:	e009      	b.n	8006c52 <LED_Display_FSM+0x6a>
			} else if (ledDisplayCounterBuffer[relayIndex] < TIME_FOR_FAST_BLINK_OFF) {
 8006c3e:	79fb      	ldrb	r3, [r7, #7]
 8006c40:	4a7b      	ldr	r2, [pc, #492]	; (8006e30 <LED_Display_FSM+0x248>)
 8006c42:	5cd3      	ldrb	r3, [r2, r3]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d804      	bhi.n	8006c52 <LED_Display_FSM+0x6a>
				Led_Display_Color(relayIndex, NONE);
 8006c48:	79fb      	ldrb	r3, [r7, #7]
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff ff6d 	bl	8006b2c <Led_Display_Color>
			}
			ledDisplayCounterBuffer[relayIndex]++;
 8006c52:	79fb      	ldrb	r3, [r7, #7]
 8006c54:	4a76      	ldr	r2, [pc, #472]	; (8006e30 <LED_Display_FSM+0x248>)
 8006c56:	5cd2      	ldrb	r2, [r2, r3]
 8006c58:	3201      	adds	r2, #1
 8006c5a:	b2d1      	uxtb	r1, r2
 8006c5c:	4a74      	ldr	r2, [pc, #464]	; (8006e30 <LED_Display_FSM+0x248>)
 8006c5e:	54d1      	strb	r1, [r2, r3]
			if (ledDisplayCounterBuffer[relayIndex] >= TIME_FOR_FAST_BLINK_OFF) {
 8006c60:	79fb      	ldrb	r3, [r7, #7]
 8006c62:	4a73      	ldr	r2, [pc, #460]	; (8006e30 <LED_Display_FSM+0x248>)
 8006c64:	5cd3      	ldrb	r3, [r2, r3]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	f240 80d2 	bls.w	8006e10 <LED_Display_FSM+0x228>
				ledDisplayCounterBuffer[relayIndex] = 0;
 8006c6c:	79fb      	ldrb	r3, [r7, #7]
 8006c6e:	4a70      	ldr	r2, [pc, #448]	; (8006e30 <LED_Display_FSM+0x248>)
 8006c70:	2100      	movs	r1, #0
 8006c72:	54d1      	strb	r1, [r2, r3]
 8006c74:	e0cc      	b.n	8006e10 <LED_Display_FSM+0x228>
			}

		} else if (tempLedStatusBuffer == BLINK_RED_SLOW) {
 8006c76:	79bb      	ldrb	r3, [r7, #6]
 8006c78:	2b04      	cmp	r3, #4
 8006c7a:	d126      	bne.n	8006cca <LED_Display_FSM+0xe2>
			if (ledDisplayCounterBuffer[relayIndex] < TIME_FOR_SLOW_BLINK_ON) {
 8006c7c:	79fb      	ldrb	r3, [r7, #7]
 8006c7e:	4a6c      	ldr	r2, [pc, #432]	; (8006e30 <LED_Display_FSM+0x248>)
 8006c80:	5cd3      	ldrb	r3, [r2, r3]
 8006c82:	2b04      	cmp	r3, #4
 8006c84:	d805      	bhi.n	8006c92 <LED_Display_FSM+0xaa>
				Led_Display_Color(relayIndex, RED);
 8006c86:	79fb      	ldrb	r3, [r7, #7]
 8006c88:	2102      	movs	r1, #2
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7ff ff4e 	bl	8006b2c <Led_Display_Color>
 8006c90:	e009      	b.n	8006ca6 <LED_Display_FSM+0xbe>
			} else if (ledDisplayCounterBuffer[relayIndex] < TIME_FOR_SLOW_BLINK_OFF){
 8006c92:	79fb      	ldrb	r3, [r7, #7]
 8006c94:	4a66      	ldr	r2, [pc, #408]	; (8006e30 <LED_Display_FSM+0x248>)
 8006c96:	5cd3      	ldrb	r3, [r2, r3]
 8006c98:	2b09      	cmp	r3, #9
 8006c9a:	d804      	bhi.n	8006ca6 <LED_Display_FSM+0xbe>
				Led_Display_Color(relayIndex, NONE);
 8006c9c:	79fb      	ldrb	r3, [r7, #7]
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7ff ff43 	bl	8006b2c <Led_Display_Color>
			}
			ledDisplayCounterBuffer[relayIndex]++;
 8006ca6:	79fb      	ldrb	r3, [r7, #7]
 8006ca8:	4a61      	ldr	r2, [pc, #388]	; (8006e30 <LED_Display_FSM+0x248>)
 8006caa:	5cd2      	ldrb	r2, [r2, r3]
 8006cac:	3201      	adds	r2, #1
 8006cae:	b2d1      	uxtb	r1, r2
 8006cb0:	4a5f      	ldr	r2, [pc, #380]	; (8006e30 <LED_Display_FSM+0x248>)
 8006cb2:	54d1      	strb	r1, [r2, r3]
			if (ledDisplayCounterBuffer[relayIndex] >= TIME_FOR_SLOW_BLINK_OFF) {
 8006cb4:	79fb      	ldrb	r3, [r7, #7]
 8006cb6:	4a5e      	ldr	r2, [pc, #376]	; (8006e30 <LED_Display_FSM+0x248>)
 8006cb8:	5cd3      	ldrb	r3, [r2, r3]
 8006cba:	2b09      	cmp	r3, #9
 8006cbc:	f240 80a8 	bls.w	8006e10 <LED_Display_FSM+0x228>
				ledDisplayCounterBuffer[relayIndex] = 0;
 8006cc0:	79fb      	ldrb	r3, [r7, #7]
 8006cc2:	4a5b      	ldr	r2, [pc, #364]	; (8006e30 <LED_Display_FSM+0x248>)
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	54d1      	strb	r1, [r2, r3]
 8006cc8:	e0a2      	b.n	8006e10 <LED_Display_FSM+0x228>
			}
		} else if (tempLedStatusBuffer == BLINK_GREEN_FAST) {
 8006cca:	79bb      	ldrb	r3, [r7, #6]
 8006ccc:	2b07      	cmp	r3, #7
 8006cce:	d125      	bne.n	8006d1c <LED_Display_FSM+0x134>
			if (ledDisplayCounterBuffer[relayIndex] < TIME_FOR_FAST_BLINK_ON){
 8006cd0:	79fb      	ldrb	r3, [r7, #7]
 8006cd2:	4a57      	ldr	r2, [pc, #348]	; (8006e30 <LED_Display_FSM+0x248>)
 8006cd4:	5cd3      	ldrb	r3, [r2, r3]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d105      	bne.n	8006ce6 <LED_Display_FSM+0xfe>
				Led_Display_Color(relayIndex, GREEN);
 8006cda:	79fb      	ldrb	r3, [r7, #7]
 8006cdc:	2101      	movs	r1, #1
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7ff ff24 	bl	8006b2c <Led_Display_Color>
 8006ce4:	e009      	b.n	8006cfa <LED_Display_FSM+0x112>
			} else if (ledDisplayCounterBuffer[relayIndex] < TIME_FOR_FAST_BLINK_OFF) {
 8006ce6:	79fb      	ldrb	r3, [r7, #7]
 8006ce8:	4a51      	ldr	r2, [pc, #324]	; (8006e30 <LED_Display_FSM+0x248>)
 8006cea:	5cd3      	ldrb	r3, [r2, r3]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d804      	bhi.n	8006cfa <LED_Display_FSM+0x112>
				Led_Display_Color(relayIndex, NONE);
 8006cf0:	79fb      	ldrb	r3, [r7, #7]
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7ff ff19 	bl	8006b2c <Led_Display_Color>
			}
			ledDisplayCounterBuffer[relayIndex]++;
 8006cfa:	79fb      	ldrb	r3, [r7, #7]
 8006cfc:	4a4c      	ldr	r2, [pc, #304]	; (8006e30 <LED_Display_FSM+0x248>)
 8006cfe:	5cd2      	ldrb	r2, [r2, r3]
 8006d00:	3201      	adds	r2, #1
 8006d02:	b2d1      	uxtb	r1, r2
 8006d04:	4a4a      	ldr	r2, [pc, #296]	; (8006e30 <LED_Display_FSM+0x248>)
 8006d06:	54d1      	strb	r1, [r2, r3]
			if (ledDisplayCounterBuffer[relayIndex] >= TIME_FOR_FAST_BLINK_OFF) {
 8006d08:	79fb      	ldrb	r3, [r7, #7]
 8006d0a:	4a49      	ldr	r2, [pc, #292]	; (8006e30 <LED_Display_FSM+0x248>)
 8006d0c:	5cd3      	ldrb	r3, [r2, r3]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d97e      	bls.n	8006e10 <LED_Display_FSM+0x228>
				ledDisplayCounterBuffer[relayIndex] = 0;
 8006d12:	79fb      	ldrb	r3, [r7, #7]
 8006d14:	4a46      	ldr	r2, [pc, #280]	; (8006e30 <LED_Display_FSM+0x248>)
 8006d16:	2100      	movs	r1, #0
 8006d18:	54d1      	strb	r1, [r2, r3]
 8006d1a:	e079      	b.n	8006e10 <LED_Display_FSM+0x228>
			}
		} else if (tempLedStatusBuffer == BLINK_GREEN_SLOW) {
 8006d1c:	79bb      	ldrb	r3, [r7, #6]
 8006d1e:	2b06      	cmp	r3, #6
 8006d20:	d125      	bne.n	8006d6e <LED_Display_FSM+0x186>
			if (ledDisplayCounterBuffer[relayIndex] < TIME_FOR_SLOW_BLINK_ON){
 8006d22:	79fb      	ldrb	r3, [r7, #7]
 8006d24:	4a42      	ldr	r2, [pc, #264]	; (8006e30 <LED_Display_FSM+0x248>)
 8006d26:	5cd3      	ldrb	r3, [r2, r3]
 8006d28:	2b04      	cmp	r3, #4
 8006d2a:	d805      	bhi.n	8006d38 <LED_Display_FSM+0x150>
				Led_Display_Color(relayIndex, GREEN);
 8006d2c:	79fb      	ldrb	r3, [r7, #7]
 8006d2e:	2101      	movs	r1, #1
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7ff fefb 	bl	8006b2c <Led_Display_Color>
 8006d36:	e009      	b.n	8006d4c <LED_Display_FSM+0x164>
			} else if (ledDisplayCounterBuffer[relayIndex] < TIME_FOR_SLOW_BLINK_OFF){
 8006d38:	79fb      	ldrb	r3, [r7, #7]
 8006d3a:	4a3d      	ldr	r2, [pc, #244]	; (8006e30 <LED_Display_FSM+0x248>)
 8006d3c:	5cd3      	ldrb	r3, [r2, r3]
 8006d3e:	2b09      	cmp	r3, #9
 8006d40:	d804      	bhi.n	8006d4c <LED_Display_FSM+0x164>
				Led_Display_Color(relayIndex, NONE);
 8006d42:	79fb      	ldrb	r3, [r7, #7]
 8006d44:	2100      	movs	r1, #0
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7ff fef0 	bl	8006b2c <Led_Display_Color>
			}
			ledDisplayCounterBuffer[relayIndex]++;
 8006d4c:	79fb      	ldrb	r3, [r7, #7]
 8006d4e:	4a38      	ldr	r2, [pc, #224]	; (8006e30 <LED_Display_FSM+0x248>)
 8006d50:	5cd2      	ldrb	r2, [r2, r3]
 8006d52:	3201      	adds	r2, #1
 8006d54:	b2d1      	uxtb	r1, r2
 8006d56:	4a36      	ldr	r2, [pc, #216]	; (8006e30 <LED_Display_FSM+0x248>)
 8006d58:	54d1      	strb	r1, [r2, r3]
			if (ledDisplayCounterBuffer[relayIndex] >= TIME_FOR_SLOW_BLINK_OFF){
 8006d5a:	79fb      	ldrb	r3, [r7, #7]
 8006d5c:	4a34      	ldr	r2, [pc, #208]	; (8006e30 <LED_Display_FSM+0x248>)
 8006d5e:	5cd3      	ldrb	r3, [r2, r3]
 8006d60:	2b09      	cmp	r3, #9
 8006d62:	d955      	bls.n	8006e10 <LED_Display_FSM+0x228>
				ledDisplayCounterBuffer[relayIndex] = 0;
 8006d64:	79fb      	ldrb	r3, [r7, #7]
 8006d66:	4a32      	ldr	r2, [pc, #200]	; (8006e30 <LED_Display_FSM+0x248>)
 8006d68:	2100      	movs	r1, #0
 8006d6a:	54d1      	strb	r1, [r2, r3]
 8006d6c:	e050      	b.n	8006e10 <LED_Display_FSM+0x228>
			}
		} else if (tempLedStatusBuffer == BLINK_YELLOW_FAST) {
 8006d6e:	79bb      	ldrb	r3, [r7, #6]
 8006d70:	2b09      	cmp	r3, #9
 8006d72:	d125      	bne.n	8006dc0 <LED_Display_FSM+0x1d8>
			if (ledDisplayCounterBuffer[relayIndex] < TIME_FOR_FAST_BLINK_ON){
 8006d74:	79fb      	ldrb	r3, [r7, #7]
 8006d76:	4a2e      	ldr	r2, [pc, #184]	; (8006e30 <LED_Display_FSM+0x248>)
 8006d78:	5cd3      	ldrb	r3, [r2, r3]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d105      	bne.n	8006d8a <LED_Display_FSM+0x1a2>
				Led_Display_Color(relayIndex,YELLOW);
 8006d7e:	79fb      	ldrb	r3, [r7, #7]
 8006d80:	2103      	movs	r1, #3
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7ff fed2 	bl	8006b2c <Led_Display_Color>
 8006d88:	e009      	b.n	8006d9e <LED_Display_FSM+0x1b6>
			} else if (ledDisplayCounterBuffer[relayIndex] < TIME_FOR_FAST_BLINK_OFF) {
 8006d8a:	79fb      	ldrb	r3, [r7, #7]
 8006d8c:	4a28      	ldr	r2, [pc, #160]	; (8006e30 <LED_Display_FSM+0x248>)
 8006d8e:	5cd3      	ldrb	r3, [r2, r3]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d804      	bhi.n	8006d9e <LED_Display_FSM+0x1b6>
				Led_Display_Color(relayIndex, NONE);
 8006d94:	79fb      	ldrb	r3, [r7, #7]
 8006d96:	2100      	movs	r1, #0
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7ff fec7 	bl	8006b2c <Led_Display_Color>
			}
			ledDisplayCounterBuffer[relayIndex]++;
 8006d9e:	79fb      	ldrb	r3, [r7, #7]
 8006da0:	4a23      	ldr	r2, [pc, #140]	; (8006e30 <LED_Display_FSM+0x248>)
 8006da2:	5cd2      	ldrb	r2, [r2, r3]
 8006da4:	3201      	adds	r2, #1
 8006da6:	b2d1      	uxtb	r1, r2
 8006da8:	4a21      	ldr	r2, [pc, #132]	; (8006e30 <LED_Display_FSM+0x248>)
 8006daa:	54d1      	strb	r1, [r2, r3]
			if (ledDisplayCounterBuffer[relayIndex] >= TIME_FOR_FAST_BLINK_OFF) {
 8006dac:	79fb      	ldrb	r3, [r7, #7]
 8006dae:	4a20      	ldr	r2, [pc, #128]	; (8006e30 <LED_Display_FSM+0x248>)
 8006db0:	5cd3      	ldrb	r3, [r2, r3]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d92c      	bls.n	8006e10 <LED_Display_FSM+0x228>
				ledDisplayCounterBuffer[relayIndex] = 0;
 8006db6:	79fb      	ldrb	r3, [r7, #7]
 8006db8:	4a1d      	ldr	r2, [pc, #116]	; (8006e30 <LED_Display_FSM+0x248>)
 8006dba:	2100      	movs	r1, #0
 8006dbc:	54d1      	strb	r1, [r2, r3]
 8006dbe:	e027      	b.n	8006e10 <LED_Display_FSM+0x228>
			}
		} else if (tempLedStatusBuffer == BLINK_YELLOW_SLOW) {
 8006dc0:	79bb      	ldrb	r3, [r7, #6]
 8006dc2:	2b08      	cmp	r3, #8
 8006dc4:	d124      	bne.n	8006e10 <LED_Display_FSM+0x228>
			if (ledDisplayCounterBuffer[relayIndex] < TIME_FOR_SLOW_BLINK_ON){
 8006dc6:	79fb      	ldrb	r3, [r7, #7]
 8006dc8:	4a19      	ldr	r2, [pc, #100]	; (8006e30 <LED_Display_FSM+0x248>)
 8006dca:	5cd3      	ldrb	r3, [r2, r3]
 8006dcc:	2b04      	cmp	r3, #4
 8006dce:	d805      	bhi.n	8006ddc <LED_Display_FSM+0x1f4>
				Led_Display_Color(relayIndex, YELLOW);
 8006dd0:	79fb      	ldrb	r3, [r7, #7]
 8006dd2:	2103      	movs	r1, #3
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7ff fea9 	bl	8006b2c <Led_Display_Color>
 8006dda:	e009      	b.n	8006df0 <LED_Display_FSM+0x208>
			} else if (ledDisplayCounterBuffer[relayIndex] < TIME_FOR_SLOW_BLINK_OFF){
 8006ddc:	79fb      	ldrb	r3, [r7, #7]
 8006dde:	4a14      	ldr	r2, [pc, #80]	; (8006e30 <LED_Display_FSM+0x248>)
 8006de0:	5cd3      	ldrb	r3, [r2, r3]
 8006de2:	2b09      	cmp	r3, #9
 8006de4:	d804      	bhi.n	8006df0 <LED_Display_FSM+0x208>
				Led_Display_Color(relayIndex, NONE);
 8006de6:	79fb      	ldrb	r3, [r7, #7]
 8006de8:	2100      	movs	r1, #0
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7ff fe9e 	bl	8006b2c <Led_Display_Color>
			}
			ledDisplayCounterBuffer[relayIndex]++;
 8006df0:	79fb      	ldrb	r3, [r7, #7]
 8006df2:	4a0f      	ldr	r2, [pc, #60]	; (8006e30 <LED_Display_FSM+0x248>)
 8006df4:	5cd2      	ldrb	r2, [r2, r3]
 8006df6:	3201      	adds	r2, #1
 8006df8:	b2d1      	uxtb	r1, r2
 8006dfa:	4a0d      	ldr	r2, [pc, #52]	; (8006e30 <LED_Display_FSM+0x248>)
 8006dfc:	54d1      	strb	r1, [r2, r3]
			if (ledDisplayCounterBuffer[relayIndex] >= TIME_FOR_SLOW_BLINK_OFF){
 8006dfe:	79fb      	ldrb	r3, [r7, #7]
 8006e00:	4a0b      	ldr	r2, [pc, #44]	; (8006e30 <LED_Display_FSM+0x248>)
 8006e02:	5cd3      	ldrb	r3, [r2, r3]
 8006e04:	2b09      	cmp	r3, #9
 8006e06:	d903      	bls.n	8006e10 <LED_Display_FSM+0x228>
				ledDisplayCounterBuffer[relayIndex] = 0;
 8006e08:	79fb      	ldrb	r3, [r7, #7]
 8006e0a:	4a09      	ldr	r2, [pc, #36]	; (8006e30 <LED_Display_FSM+0x248>)
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t relayIndex = 0; relayIndex < NUMBER_OF_RELAYS; relayIndex++) {
 8006e10:	79fb      	ldrb	r3, [r7, #7]
 8006e12:	3301      	adds	r3, #1
 8006e14:	71fb      	strb	r3, [r7, #7]
 8006e16:	79fb      	ldrb	r3, [r7, #7]
 8006e18:	2b09      	cmp	r3, #9
 8006e1a:	f67f aeeb 	bls.w	8006bf4 <LED_Display_FSM+0xc>
			}
		}
	}
	Led_Display();
 8006e1e:	f7ff fded 	bl	80069fc <Led_Display>
}
 8006e22:	bf00      	nop
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	2000000c 	.word	0x2000000c
 8006e30:	200001f4 	.word	0x200001f4

08006e34 <PCF_Init>:





void PCF_Init(void){
 8006e34:	b580      	push	{r7, lr}
 8006e36:	af00      	add	r7, sp, #0
	Relay_and_Fuse_Statuses = 0;
 8006e38:	4b03      	ldr	r3, [pc, #12]	; (8006e48 <PCF_Init+0x14>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	601a      	str	r2, [r3, #0]
	Set_Input_PCF_Pins();
 8006e3e:	f000 f87b 	bl	8006f38 <Set_Input_PCF_Pins>
}
 8006e42:	bf00      	nop
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	20000200 	.word	0x20000200

08006e4c <Get_All_Relay_Fuse_Statuses>:
	sprintf((char*) strpcf, "count: %d", count);
	UART3_SendToHost((uint8_t*)strpcf);
	return i;
}

uint32_t Get_All_Relay_Fuse_Statuses(void){
 8006e4c:	b480      	push	{r7}
 8006e4e:	af00      	add	r7, sp, #0
	return Relay_and_Fuse_Statuses;
 8006e50:	4b02      	ldr	r3, [pc, #8]	; (8006e5c <Get_All_Relay_Fuse_Statuses+0x10>)
 8006e52:	681b      	ldr	r3, [r3, #0]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bc80      	pop	{r7}
 8006e5a:	4770      	bx	lr
 8006e5c:	20000200 	.word	0x20000200

08006e60 <PCF_read>:

void PCF_read(void){
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af02      	add	r7, sp, #8
	static uint8_t pcfReadState = 0;
	switch(pcfReadState){
 8006e66:	4b30      	ldr	r3, [pc, #192]	; (8006f28 <PCF_read+0xc8>)
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d01e      	beq.n	8006eac <PCF_read+0x4c>
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d037      	beq.n	8006ee2 <PCF_read+0x82>
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d150      	bne.n	8006f18 <PCF_read+0xb8>
	case 0:
		HAL_I2C_Master_Receive(&I2cHandle, PCF_READ_ADDRESS_1, (uint8_t*) I2CReceiveBuffer, 2, 0xffff);
 8006e76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	4a2b      	ldr	r2, [pc, #172]	; (8006f2c <PCF_read+0xcc>)
 8006e80:	2141      	movs	r1, #65	; 0x41
 8006e82:	482b      	ldr	r0, [pc, #172]	; (8006f30 <PCF_read+0xd0>)
 8006e84:	f7fb fab2 	bl	80023ec <HAL_I2C_Master_Receive>
		Relay_and_Fuse_Statuses = Relay_and_Fuse_Statuses | 0xff;
 8006e88:	4b2a      	ldr	r3, [pc, #168]	; (8006f34 <PCF_read+0xd4>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8006e90:	4a28      	ldr	r2, [pc, #160]	; (8006f34 <PCF_read+0xd4>)
 8006e92:	6013      	str	r3, [r2, #0]
		Relay_and_Fuse_Statuses = Relay_and_Fuse_Statuses & I2CReceiveBuffer[0];
 8006e94:	4b25      	ldr	r3, [pc, #148]	; (8006f2c <PCF_read+0xcc>)
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	4b26      	ldr	r3, [pc, #152]	; (8006f34 <PCF_read+0xd4>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	4a24      	ldr	r2, [pc, #144]	; (8006f34 <PCF_read+0xd4>)
 8006ea2:	6013      	str	r3, [r2, #0]

		pcfReadState = 1;
 8006ea4:	4b20      	ldr	r3, [pc, #128]	; (8006f28 <PCF_read+0xc8>)
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	701a      	strb	r2, [r3, #0]
		break;
 8006eaa:	e039      	b.n	8006f20 <PCF_read+0xc0>
	case 1:
		HAL_I2C_Master_Receive(&I2cHandle, PCF_READ_ADDRESS_2, (uint8_t*) I2CReceiveBuffer, 2, 0xffff);
 8006eac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	2302      	movs	r3, #2
 8006eb4:	4a1d      	ldr	r2, [pc, #116]	; (8006f2c <PCF_read+0xcc>)
 8006eb6:	2149      	movs	r1, #73	; 0x49
 8006eb8:	481d      	ldr	r0, [pc, #116]	; (8006f30 <PCF_read+0xd0>)
 8006eba:	f7fb fa97 	bl	80023ec <HAL_I2C_Master_Receive>
		Relay_and_Fuse_Statuses = Relay_and_Fuse_Statuses |  ((uint32_t)0xff << 8);
 8006ebe:	4b1d      	ldr	r3, [pc, #116]	; (8006f34 <PCF_read+0xd4>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8006ec6:	4a1b      	ldr	r2, [pc, #108]	; (8006f34 <PCF_read+0xd4>)
 8006ec8:	6013      	str	r3, [r2, #0]
		Relay_and_Fuse_Statuses = Relay_and_Fuse_Statuses & ((uint32_t)I2CReceiveBuffer[0] << 8);
 8006eca:	4b18      	ldr	r3, [pc, #96]	; (8006f2c <PCF_read+0xcc>)
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	021a      	lsls	r2, r3, #8
 8006ed0:	4b18      	ldr	r3, [pc, #96]	; (8006f34 <PCF_read+0xd4>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	4a17      	ldr	r2, [pc, #92]	; (8006f34 <PCF_read+0xd4>)
 8006ed8:	6013      	str	r3, [r2, #0]
		pcfReadState = 2;
 8006eda:	4b13      	ldr	r3, [pc, #76]	; (8006f28 <PCF_read+0xc8>)
 8006edc:	2202      	movs	r2, #2
 8006ede:	701a      	strb	r2, [r3, #0]
		break;
 8006ee0:	e01e      	b.n	8006f20 <PCF_read+0xc0>
	case 2:
		HAL_I2C_Master_Receive(&I2cHandle, PCF_READ_ADDRESS_3, (uint8_t*) I2CReceiveBuffer, 2, 0xffff);
 8006ee2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	2302      	movs	r3, #2
 8006eea:	4a10      	ldr	r2, [pc, #64]	; (8006f2c <PCF_read+0xcc>)
 8006eec:	214d      	movs	r1, #77	; 0x4d
 8006eee:	4810      	ldr	r0, [pc, #64]	; (8006f30 <PCF_read+0xd0>)
 8006ef0:	f7fb fa7c 	bl	80023ec <HAL_I2C_Master_Receive>
		Relay_and_Fuse_Statuses = Relay_and_Fuse_Statuses |  ((uint32_t)0xff << 16);
 8006ef4:	4b0f      	ldr	r3, [pc, #60]	; (8006f34 <PCF_read+0xd4>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006efc:	4a0d      	ldr	r2, [pc, #52]	; (8006f34 <PCF_read+0xd4>)
 8006efe:	6013      	str	r3, [r2, #0]
		Relay_and_Fuse_Statuses = Relay_and_Fuse_Statuses & ((uint32_t)I2CReceiveBuffer[0] << 16);
 8006f00:	4b0a      	ldr	r3, [pc, #40]	; (8006f2c <PCF_read+0xcc>)
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	041a      	lsls	r2, r3, #16
 8006f06:	4b0b      	ldr	r3, [pc, #44]	; (8006f34 <PCF_read+0xd4>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	4a09      	ldr	r2, [pc, #36]	; (8006f34 <PCF_read+0xd4>)
 8006f0e:	6013      	str	r3, [r2, #0]
		pcfReadState = 0;
 8006f10:	4b05      	ldr	r3, [pc, #20]	; (8006f28 <PCF_read+0xc8>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	701a      	strb	r2, [r3, #0]
		break;
 8006f16:	e003      	b.n	8006f20 <PCF_read+0xc0>
	default:
		pcfReadState = 0;
 8006f18:	4b03      	ldr	r3, [pc, #12]	; (8006f28 <PCF_read+0xc8>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	701a      	strb	r2, [r3, #0]
		break;
 8006f1e:	bf00      	nop
	}
//	sprintf((char*) strpcf, "%08X\t", (int) Relay_and_Fuse_Statuses);
//	UART3_SendToHost((uint8_t *)strpcf);

}
 8006f20:	bf00      	nop
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20000204 	.word	0x20000204
 8006f2c:	200028d0 	.word	0x200028d0
 8006f30:	20002878 	.word	0x20002878
 8006f34:	20000200 	.word	0x20000200

08006f38 <Set_Input_PCF_Pins>:
			return (0x03 & (I2CReceiveBuffer[0] >> ((address - 8) * 2)));
		}
		return 0;
}

void Set_Input_PCF_Pins(void){
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af02      	add	r7, sp, #8
	uint8_t initData[1] = {0xff};
 8006f3e:	23ff      	movs	r3, #255	; 0xff
 8006f40:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&I2cHandle, (uint16_t)PCF_WRITE_ADDRESS_1, (uint8_t *) initData, 1, 0xffff);
 8006f42:	1d3a      	adds	r2, r7, #4
 8006f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	2140      	movs	r1, #64	; 0x40
 8006f4e:	480c      	ldr	r0, [pc, #48]	; (8006f80 <Set_Input_PCF_Pins+0x48>)
 8006f50:	f7fb f94e 	bl	80021f0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&I2cHandle, (uint16_t)PCF_WRITE_ADDRESS_2, (uint8_t *) initData, 1, 0xffff);
 8006f54:	1d3a      	adds	r2, r7, #4
 8006f56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	2148      	movs	r1, #72	; 0x48
 8006f60:	4807      	ldr	r0, [pc, #28]	; (8006f80 <Set_Input_PCF_Pins+0x48>)
 8006f62:	f7fb f945 	bl	80021f0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&I2cHandle, (uint16_t)PCF_WRITE_ADDRESS_3, (uint8_t *) initData, 1, 0xffff);
 8006f66:	1d3a      	adds	r2, r7, #4
 8006f68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	2301      	movs	r3, #1
 8006f70:	214c      	movs	r1, #76	; 0x4c
 8006f72:	4803      	ldr	r0, [pc, #12]	; (8006f80 <Set_Input_PCF_Pins+0x48>)
 8006f74:	f7fb f93c 	bl	80021f0 <HAL_I2C_Master_Transmit>
}
 8006f78:	bf00      	nop
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	20002878 	.word	0x20002878

08006f84 <Node_Setup>:
void Node_Setup(void);
void Node_Check(void);
void Power_Setup(void);


void Node_Setup(void) {
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
	for(uint8_t outletID = 0; outletID <= NUMBER_OF_RELAYS; outletID ++){
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	71fb      	strb	r3, [r7, #7]
 8006f8e:	e063      	b.n	8007058 <Node_Setup+0xd4>
		if (outletID == MAIN_INPUT) {	//setup for Main node
 8006f90:	79fb      	ldrb	r3, [r7, #7]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d11e      	bne.n	8006fd4 <Node_Setup+0x50>
			Main.currentTotal = 0;
 8006f96:	4b34      	ldr	r3, [pc, #208]	; (8007068 <Node_Setup+0xe4>)
 8006f98:	f04f 0200 	mov.w	r2, #0
 8006f9c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
			Main.status = SYSTEM_NORMAL;
 8006fa0:	4b31      	ldr	r3, [pc, #196]	; (8007068 <Node_Setup+0xe4>)
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
			Main.refTotalCurrent = 0;
 8006fa8:	4b2f      	ldr	r3, [pc, #188]	; (8007068 <Node_Setup+0xe4>)
 8006faa:	f04f 0200 	mov.w	r2, #0
 8006fae:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
			Main.valueRef = 0;
 8006fb2:	4b2d      	ldr	r3, [pc, #180]	; (8007068 <Node_Setup+0xe4>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
			Main.valueTotal = 0;
 8006fba:	4b2b      	ldr	r3, [pc, #172]	; (8007068 <Node_Setup+0xe4>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
			Main.ambientTemp = 25;
 8006fc2:	4b29      	ldr	r3, [pc, #164]	; (8007068 <Node_Setup+0xe4>)
 8006fc4:	2219      	movs	r2, #25
 8006fc6:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
			Main.internalTemp = 25;
 8006fca:	4b27      	ldr	r3, [pc, #156]	; (8007068 <Node_Setup+0xe4>)
 8006fcc:	2219      	movs	r2, #25
 8006fce:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
 8006fd2:	e03e      	b.n	8007052 <Node_Setup+0xce>
		} else {
			Main.nodes[outletID - 1].voltage = 220;
 8006fd4:	79fb      	ldrb	r3, [r7, #7]
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	4a23      	ldr	r2, [pc, #140]	; (8007068 <Node_Setup+0xe4>)
 8006fda:	015b      	lsls	r3, r3, #5
 8006fdc:	4413      	add	r3, r2
 8006fde:	3308      	adds	r3, #8
 8006fe0:	22dc      	movs	r2, #220	; 0xdc
 8006fe2:	701a      	strb	r2, [r3, #0]
	//		Main.nodes[outletID].frequency = 50;
			Main.nodes[outletID - 1].powerFactor = 100;
 8006fe4:	79fb      	ldrb	r3, [r7, #7]
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	4a1f      	ldr	r2, [pc, #124]	; (8007068 <Node_Setup+0xe4>)
 8006fea:	015b      	lsls	r3, r3, #5
 8006fec:	4413      	add	r3, r2
 8006fee:	3309      	adds	r3, #9
 8006ff0:	2264      	movs	r2, #100	; 0x64
 8006ff2:	701a      	strb	r2, [r3, #0]
			Main.nodes[outletID - 1].power = 0;
 8006ff4:	79fb      	ldrb	r3, [r7, #7]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	4a1b      	ldr	r2, [pc, #108]	; (8007068 <Node_Setup+0xe4>)
 8006ffa:	015b      	lsls	r3, r3, #5
 8006ffc:	4413      	add	r3, r2
 8006ffe:	3310      	adds	r3, #16
 8007000:	2200      	movs	r2, #0
 8007002:	601a      	str	r2, [r3, #0]
			Main.nodes[outletID - 1].limitEnergy = 0;
 8007004:	79fb      	ldrb	r3, [r7, #7]
 8007006:	3b01      	subs	r3, #1
 8007008:	4a17      	ldr	r2, [pc, #92]	; (8007068 <Node_Setup+0xe4>)
 800700a:	015b      	lsls	r3, r3, #5
 800700c:	4413      	add	r3, r2
 800700e:	331c      	adds	r3, #28
 8007010:	2200      	movs	r2, #0
 8007012:	601a      	str	r2, [r3, #0]
			Main.nodes[outletID - 1].current = 0;
 8007014:	79fb      	ldrb	r3, [r7, #7]
 8007016:	3b01      	subs	r3, #1
 8007018:	4a13      	ldr	r2, [pc, #76]	; (8007068 <Node_Setup+0xe4>)
 800701a:	015b      	lsls	r3, r3, #5
 800701c:	4413      	add	r3, r2
 800701e:	3304      	adds	r3, #4
 8007020:	2200      	movs	r2, #0
 8007022:	601a      	str	r2, [r3, #0]
			Main.nodes[outletID - 1].workingTime = 0;
 8007024:	79fb      	ldrb	r3, [r7, #7]
 8007026:	3b01      	subs	r3, #1
 8007028:	4a0f      	ldr	r2, [pc, #60]	; (8007068 <Node_Setup+0xe4>)
 800702a:	015b      	lsls	r3, r3, #5
 800702c:	4413      	add	r3, r2
 800702e:	3314      	adds	r3, #20
 8007030:	2200      	movs	r2, #0
 8007032:	601a      	str	r2, [r3, #0]
			Main.nodes[outletID - 1].energy = 0;
 8007034:	79fb      	ldrb	r3, [r7, #7]
 8007036:	3b01      	subs	r3, #1
 8007038:	4a0b      	ldr	r2, [pc, #44]	; (8007068 <Node_Setup+0xe4>)
 800703a:	015b      	lsls	r3, r3, #5
 800703c:	4413      	add	r3, r2
 800703e:	3318      	adds	r3, #24
 8007040:	2200      	movs	r2, #0
 8007042:	601a      	str	r2, [r3, #0]
			Main.nodes[outletID - 1].nodeStatus = NODE_NORMAL;
 8007044:	79fb      	ldrb	r3, [r7, #7]
 8007046:	3b01      	subs	r3, #1
 8007048:	4a07      	ldr	r2, [pc, #28]	; (8007068 <Node_Setup+0xe4>)
 800704a:	015b      	lsls	r3, r3, #5
 800704c:	4413      	add	r3, r2
 800704e:	2200      	movs	r2, #0
 8007050:	701a      	strb	r2, [r3, #0]
	for(uint8_t outletID = 0; outletID <= NUMBER_OF_RELAYS; outletID ++){
 8007052:	79fb      	ldrb	r3, [r7, #7]
 8007054:	3301      	adds	r3, #1
 8007056:	71fb      	strb	r3, [r7, #7]
 8007058:	79fb      	ldrb	r3, [r7, #7]
 800705a:	2b0a      	cmp	r3, #10
 800705c:	d998      	bls.n	8006f90 <Node_Setup+0xc>
	//		if(outletID == 0) Main.nodes[0].limitEnergy = 300000;
	//		Led_Display_Color(outletID, GREEN);
	//		Led_Display_Show();
		}
	}
}
 800705e:	bf00      	nop
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	bc80      	pop	{r7}
 8007066:	4770      	bx	lr
 8007068:	200028d8 	.word	0x200028d8

0800706c <Node_Check>:

void Node_Check(void) {
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0

	uint32_t tempRelayFuseStatuses = Get_All_Relay_Fuse_Statuses();
 8007072:	f7ff feeb 	bl	8006e4c <Get_All_Relay_Fuse_Statuses>
 8007076:	60b8      	str	r0, [r7, #8]

	for(uint8_t outletID = 0; outletID <= NUMBER_OF_RELAYS; outletID ++){
 8007078:	2300      	movs	r3, #0
 800707a:	73fb      	strb	r3, [r7, #15]
 800707c:	e127      	b.n	80072ce <Node_Check+0x262>
		if (outletID == MAIN_INPUT) {
 800707e:	7bfb      	ldrb	r3, [r7, #15]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d15b      	bne.n	800713c <Node_Check+0xd0>
			if (Main.valueTotal > 1800 || Main.valueRef > 1800) {
 8007084:	4b96      	ldr	r3, [pc, #600]	; (80072e0 <Node_Check+0x274>)
 8007086:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800708a:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800708e:	d805      	bhi.n	800709c <Node_Check+0x30>
 8007090:	4b93      	ldr	r3, [pc, #588]	; (80072e0 <Node_Check+0x274>)
 8007092:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 8007096:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800709a:	d904      	bls.n	80070a6 <Node_Check+0x3a>
				Main.status = SYSTEM_OVER_CURRENT;
 800709c:	4b90      	ldr	r3, [pc, #576]	; (80072e0 <Node_Check+0x274>)
 800709e:	2203      	movs	r2, #3
 80070a0:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
 80070a4:	e110      	b.n	80072c8 <Node_Check+0x25c>
			} else if ((Main.valueTotal - Main.valueRef) > 100) {
 80070a6:	4b8e      	ldr	r3, [pc, #568]	; (80072e0 <Node_Check+0x274>)
 80070a8:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 80070ac:	461a      	mov	r2, r3
 80070ae:	4b8c      	ldr	r3, [pc, #560]	; (80072e0 <Node_Check+0x274>)
 80070b0:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	2b64      	cmp	r3, #100	; 0x64
 80070b8:	dd04      	ble.n	80070c4 <Node_Check+0x58>
				Main.status = NODE_OVER_TOTAL;
 80070ba:	4b89      	ldr	r3, [pc, #548]	; (80072e0 <Node_Check+0x274>)
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
 80070c2:	e101      	b.n	80072c8 <Node_Check+0x25c>
			} else if (Main.valueRef - Main.valueTotal > 100) {
 80070c4:	4b86      	ldr	r3, [pc, #536]	; (80072e0 <Node_Check+0x274>)
 80070c6:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 80070ca:	461a      	mov	r2, r3
 80070cc:	4b84      	ldr	r3, [pc, #528]	; (80072e0 <Node_Check+0x274>)
 80070ce:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	2b64      	cmp	r3, #100	; 0x64
 80070d6:	dd04      	ble.n	80070e2 <Node_Check+0x76>
				Main.status = NODE_UNDER_TOTAL;
 80070d8:	4b81      	ldr	r3, [pc, #516]	; (80072e0 <Node_Check+0x274>)
 80070da:	2202      	movs	r2, #2
 80070dc:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
 80070e0:	e0f2      	b.n	80072c8 <Node_Check+0x25c>
			} else if (Main.ambientTemp > 80) {
 80070e2:	4b7f      	ldr	r3, [pc, #508]	; (80072e0 <Node_Check+0x274>)
 80070e4:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 80070e8:	2b50      	cmp	r3, #80	; 0x50
 80070ea:	d904      	bls.n	80070f6 <Node_Check+0x8a>
				Main.status = SYSTEM_OVER_TEMP;
 80070ec:	4b7c      	ldr	r3, [pc, #496]	; (80072e0 <Node_Check+0x274>)
 80070ee:	2204      	movs	r2, #4
 80070f0:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
 80070f4:	e0e8      	b.n	80072c8 <Node_Check+0x25c>
			} else if (Main.internalTemp > 80) {
 80070f6:	4b7a      	ldr	r3, [pc, #488]	; (80072e0 <Node_Check+0x274>)
 80070f8:	f893 314e 	ldrb.w	r3, [r3, #334]	; 0x14e
 80070fc:	2b50      	cmp	r3, #80	; 0x50
 80070fe:	d904      	bls.n	800710a <Node_Check+0x9e>
				Main.status = SYSTEM_OVER_TEMP;
 8007100:	4b77      	ldr	r3, [pc, #476]	; (80072e0 <Node_Check+0x274>)
 8007102:	2204      	movs	r2, #4
 8007104:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
 8007108:	e0de      	b.n	80072c8 <Node_Check+0x25c>
			} else {
				for (uint8_t i = 0; i < NUMBER_OF_RELAYS; i++) {
 800710a:	2300      	movs	r3, #0
 800710c:	73bb      	strb	r3, [r7, #14]
 800710e:	e00d      	b.n	800712c <Node_Check+0xc0>
					if (Main.nodes[i].nodeStatus == NODE_OVER_CURRENT) {
 8007110:	7bbb      	ldrb	r3, [r7, #14]
 8007112:	4a73      	ldr	r2, [pc, #460]	; (80072e0 <Node_Check+0x274>)
 8007114:	015b      	lsls	r3, r3, #5
 8007116:	4413      	add	r3, r2
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	2b07      	cmp	r3, #7
 800711c:	d103      	bne.n	8007126 <Node_Check+0xba>
						Main.status = SYSTEM_OVER_CURRENT;
 800711e:	4b70      	ldr	r3, [pc, #448]	; (80072e0 <Node_Check+0x274>)
 8007120:	2203      	movs	r2, #3
 8007122:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
				for (uint8_t i = 0; i < NUMBER_OF_RELAYS; i++) {
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	3301      	adds	r3, #1
 800712a:	73bb      	strb	r3, [r7, #14]
 800712c:	7bbb      	ldrb	r3, [r7, #14]
 800712e:	2b09      	cmp	r3, #9
 8007130:	d9ee      	bls.n	8007110 <Node_Check+0xa4>
					}
				}
				Main.status = SYSTEM_NORMAL;
 8007132:	4b6b      	ldr	r3, [pc, #428]	; (80072e0 <Node_Check+0x274>)
 8007134:	2200      	movs	r2, #0
 8007136:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
 800713a:	e0c5      	b.n	80072c8 <Node_Check+0x25c>
			}
		} else if (outletID <= NUMBER_OF_RELAYS) {
 800713c:	7bfb      	ldrb	r3, [r7, #15]
 800713e:	2b0a      	cmp	r3, #10
 8007140:	f200 80c2 	bhi.w	80072c8 <Node_Check+0x25c>

			uint8_t tempOutletID = outletID - 1;
 8007144:	7bfb      	ldrb	r3, [r7, #15]
 8007146:	3b01      	subs	r3, #1
 8007148:	71fb      	strb	r3, [r7, #7]

			if ((tempRelayFuseStatuses >> (tempOutletID*2) & 0x02) > 0) {	//return NOFUSE
 800714a:	79fb      	ldrb	r3, [r7, #7]
 800714c:	005b      	lsls	r3, r3, #1
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	fa22 f303 	lsr.w	r3, r2, r3
 8007154:	f003 0302 	and.w	r3, r3, #2
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00a      	beq.n	8007172 <Node_Check+0x106>
				if (outletID < 4) {
 800715c:	7bfb      	ldrb	r3, [r7, #15]
 800715e:	2b03      	cmp	r3, #3
 8007160:	f200 80b2 	bhi.w	80072c8 <Node_Check+0x25c>
					Main.nodes[outletID].nodeStatus = NO_FUSE;
 8007164:	7bfb      	ldrb	r3, [r7, #15]
 8007166:	4a5e      	ldr	r2, [pc, #376]	; (80072e0 <Node_Check+0x274>)
 8007168:	015b      	lsls	r3, r3, #5
 800716a:	4413      	add	r3, r2
 800716c:	2205      	movs	r2, #5
 800716e:	701a      	strb	r2, [r3, #0]
 8007170:	e0aa      	b.n	80072c8 <Node_Check+0x25c>
				}
			} else if ((tempRelayFuseStatuses >> (tempOutletID*2) & 0x01) > 0
 8007172:	79fb      	ldrb	r3, [r7, #7]
 8007174:	005b      	lsls	r3, r3, #1
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	fa22 f303 	lsr.w	r3, r2, r3
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b00      	cmp	r3, #0
 8007182:	d011      	beq.n	80071a8 <Node_Check+0x13c>
					&& (Get_Relay_Status(tempOutletID) == SET)) {	//relay not working MUST and is Working
 8007184:	79fb      	ldrb	r3, [r7, #7]
 8007186:	4618      	mov	r0, r3
 8007188:	f000 fbde 	bl	8007948 <Get_Relay_Status>
 800718c:	4603      	mov	r3, r0
 800718e:	2b01      	cmp	r3, #1
 8007190:	d10a      	bne.n	80071a8 <Node_Check+0x13c>
				if (tempOutletID < 4) {
 8007192:	79fb      	ldrb	r3, [r7, #7]
 8007194:	2b03      	cmp	r3, #3
 8007196:	f200 8097 	bhi.w	80072c8 <Node_Check+0x25c>
					Main.nodes[tempOutletID].nodeStatus = NO_RELAY;
 800719a:	79fb      	ldrb	r3, [r7, #7]
 800719c:	4a50      	ldr	r2, [pc, #320]	; (80072e0 <Node_Check+0x274>)
 800719e:	015b      	lsls	r3, r3, #5
 80071a0:	4413      	add	r3, r2
 80071a2:	2206      	movs	r2, #6
 80071a4:	701a      	strb	r2, [r3, #0]
				if (tempOutletID < 4) {
 80071a6:	e08f      	b.n	80072c8 <Node_Check+0x25c>
				}
			} else if (Main.nodes[tempOutletID].current > 300000) {	// nodeValue from 0 to 1860
 80071a8:	79fb      	ldrb	r3, [r7, #7]
 80071aa:	4a4d      	ldr	r2, [pc, #308]	; (80072e0 <Node_Check+0x274>)
 80071ac:	015b      	lsls	r3, r3, #5
 80071ae:	4413      	add	r3, r2
 80071b0:	3304      	adds	r3, #4
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a4b      	ldr	r2, [pc, #300]	; (80072e4 <Node_Check+0x278>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d906      	bls.n	80071c8 <Node_Check+0x15c>
				Main.nodes[tempOutletID].nodeStatus = NODE_OVER_CURRENT;
 80071ba:	79fb      	ldrb	r3, [r7, #7]
 80071bc:	4a48      	ldr	r2, [pc, #288]	; (80072e0 <Node_Check+0x274>)
 80071be:	015b      	lsls	r3, r3, #5
 80071c0:	4413      	add	r3, r2
 80071c2:	2207      	movs	r2, #7
 80071c4:	701a      	strb	r2, [r3, #0]
 80071c6:	e07f      	b.n	80072c8 <Node_Check+0x25c>
			} else if (Main.nodes[tempOutletID].limitEnergy > 0
 80071c8:	79fb      	ldrb	r3, [r7, #7]
 80071ca:	4a45      	ldr	r2, [pc, #276]	; (80072e0 <Node_Check+0x274>)
 80071cc:	015b      	lsls	r3, r3, #5
 80071ce:	4413      	add	r3, r2
 80071d0:	331c      	adds	r3, #28
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d014      	beq.n	8007202 <Node_Check+0x196>
					&& Main.nodes[tempOutletID].energy >= Main.nodes[tempOutletID].limitEnergy) {
 80071d8:	79fb      	ldrb	r3, [r7, #7]
 80071da:	4a41      	ldr	r2, [pc, #260]	; (80072e0 <Node_Check+0x274>)
 80071dc:	015b      	lsls	r3, r3, #5
 80071de:	4413      	add	r3, r2
 80071e0:	3318      	adds	r3, #24
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	79fb      	ldrb	r3, [r7, #7]
 80071e6:	493e      	ldr	r1, [pc, #248]	; (80072e0 <Node_Check+0x274>)
 80071e8:	015b      	lsls	r3, r3, #5
 80071ea:	440b      	add	r3, r1
 80071ec:	331c      	adds	r3, #28
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d306      	bcc.n	8007202 <Node_Check+0x196>
				Main.nodes[tempOutletID].nodeStatus = NODE_OVER_MONEY;
 80071f4:	79fb      	ldrb	r3, [r7, #7]
 80071f6:	4a3a      	ldr	r2, [pc, #232]	; (80072e0 <Node_Check+0x274>)
 80071f8:	015b      	lsls	r3, r3, #5
 80071fa:	4413      	add	r3, r2
 80071fc:	2208      	movs	r2, #8
 80071fe:	701a      	strb	r2, [r3, #0]
 8007200:	e062      	b.n	80072c8 <Node_Check+0x25c>
			} else if (Main.nodes[tempOutletID].limitEnergy == 0) {
 8007202:	79fb      	ldrb	r3, [r7, #7]
 8007204:	4a36      	ldr	r2, [pc, #216]	; (80072e0 <Node_Check+0x274>)
 8007206:	015b      	lsls	r3, r3, #5
 8007208:	4413      	add	r3, r2
 800720a:	331c      	adds	r3, #28
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d106      	bne.n	8007220 <Node_Check+0x1b4>
				Main.nodes[tempOutletID].nodeStatus = NODE_NORMAL;
 8007212:	79fb      	ldrb	r3, [r7, #7]
 8007214:	4a32      	ldr	r2, [pc, #200]	; (80072e0 <Node_Check+0x274>)
 8007216:	015b      	lsls	r3, r3, #5
 8007218:	4413      	add	r3, r2
 800721a:	2200      	movs	r2, #0
 800721c:	701a      	strb	r2, [r3, #0]
 800721e:	e053      	b.n	80072c8 <Node_Check+0x25c>
			} else if (Main.nodes[tempOutletID].current >= 1000) {
 8007220:	79fb      	ldrb	r3, [r7, #7]
 8007222:	4a2f      	ldr	r2, [pc, #188]	; (80072e0 <Node_Check+0x274>)
 8007224:	015b      	lsls	r3, r3, #5
 8007226:	4413      	add	r3, r2
 8007228:	3304      	adds	r3, #4
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007230:	d306      	bcc.n	8007240 <Node_Check+0x1d4>
				Main.nodes[tempOutletID].nodeStatus = CHARGING;
 8007232:	79fb      	ldrb	r3, [r7, #7]
 8007234:	4a2a      	ldr	r2, [pc, #168]	; (80072e0 <Node_Check+0x274>)
 8007236:	015b      	lsls	r3, r3, #5
 8007238:	4413      	add	r3, r2
 800723a:	2201      	movs	r2, #1
 800723c:	701a      	strb	r2, [r3, #0]
 800723e:	e043      	b.n	80072c8 <Node_Check+0x25c>
			} else if (Main.nodes[tempOutletID].nodeStatus == CHARGING) {
 8007240:	79fb      	ldrb	r3, [r7, #7]
 8007242:	4a27      	ldr	r2, [pc, #156]	; (80072e0 <Node_Check+0x274>)
 8007244:	015b      	lsls	r3, r3, #5
 8007246:	4413      	add	r3, r2
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d128      	bne.n	80072a0 <Node_Check+0x234>
				if (Main.nodes[tempOutletID].lastPower - Main.nodes[tempOutletID].power > 20) {
 800724e:	79fb      	ldrb	r3, [r7, #7]
 8007250:	4a23      	ldr	r2, [pc, #140]	; (80072e0 <Node_Check+0x274>)
 8007252:	015b      	lsls	r3, r3, #5
 8007254:	4413      	add	r3, r2
 8007256:	330c      	adds	r3, #12
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	79fb      	ldrb	r3, [r7, #7]
 800725c:	4920      	ldr	r1, [pc, #128]	; (80072e0 <Node_Check+0x274>)
 800725e:	015b      	lsls	r3, r3, #5
 8007260:	440b      	add	r3, r1
 8007262:	3310      	adds	r3, #16
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	2b14      	cmp	r3, #20
 800726a:	d906      	bls.n	800727a <Node_Check+0x20e>
					Main.nodes[tempOutletID].nodeStatus = UNPLUG;
 800726c:	79fb      	ldrb	r3, [r7, #7]
 800726e:	4a1c      	ldr	r2, [pc, #112]	; (80072e0 <Node_Check+0x274>)
 8007270:	015b      	lsls	r3, r3, #5
 8007272:	4413      	add	r3, r2
 8007274:	2203      	movs	r2, #3
 8007276:	701a      	strb	r2, [r3, #0]
 8007278:	e005      	b.n	8007286 <Node_Check+0x21a>
				} else {
					Main.nodes[tempOutletID].nodeStatus = CHARGEFULL;
 800727a:	79fb      	ldrb	r3, [r7, #7]
 800727c:	4a18      	ldr	r2, [pc, #96]	; (80072e0 <Node_Check+0x274>)
 800727e:	015b      	lsls	r3, r3, #5
 8007280:	4413      	add	r3, r2
 8007282:	2202      	movs	r2, #2
 8007284:	701a      	strb	r2, [r3, #0]
				}
				Main.nodes[tempOutletID].lastPower = Main.nodes[tempOutletID].power;
 8007286:	79fa      	ldrb	r2, [r7, #7]
 8007288:	79fb      	ldrb	r3, [r7, #7]
 800728a:	4915      	ldr	r1, [pc, #84]	; (80072e0 <Node_Check+0x274>)
 800728c:	0152      	lsls	r2, r2, #5
 800728e:	440a      	add	r2, r1
 8007290:	3210      	adds	r2, #16
 8007292:	6812      	ldr	r2, [r2, #0]
 8007294:	4912      	ldr	r1, [pc, #72]	; (80072e0 <Node_Check+0x274>)
 8007296:	015b      	lsls	r3, r3, #5
 8007298:	440b      	add	r3, r1
 800729a:	330c      	adds	r3, #12
 800729c:	601a      	str	r2, [r3, #0]
 800729e:	e013      	b.n	80072c8 <Node_Check+0x25c>
			} else {
				if(Get_Relay_Status(tempOutletID) == SET){
 80072a0:	79fb      	ldrb	r3, [r7, #7]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 fb50 	bl	8007948 <Get_Relay_Status>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d106      	bne.n	80072bc <Node_Check+0x250>
					Main.nodes[tempOutletID].nodeStatus = NODE_READY;
 80072ae:	79fb      	ldrb	r3, [r7, #7]
 80072b0:	4a0b      	ldr	r2, [pc, #44]	; (80072e0 <Node_Check+0x274>)
 80072b2:	015b      	lsls	r3, r3, #5
 80072b4:	4413      	add	r3, r2
 80072b6:	220a      	movs	r2, #10
 80072b8:	701a      	strb	r2, [r3, #0]
 80072ba:	e005      	b.n	80072c8 <Node_Check+0x25c>
				} else {
					Main.nodes[tempOutletID].nodeStatus = NODE_NORMAL;
 80072bc:	79fb      	ldrb	r3, [r7, #7]
 80072be:	4a08      	ldr	r2, [pc, #32]	; (80072e0 <Node_Check+0x274>)
 80072c0:	015b      	lsls	r3, r3, #5
 80072c2:	4413      	add	r3, r2
 80072c4:	2200      	movs	r2, #0
 80072c6:	701a      	strb	r2, [r3, #0]
	for(uint8_t outletID = 0; outletID <= NUMBER_OF_RELAYS; outletID ++){
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
 80072ca:	3301      	adds	r3, #1
 80072cc:	73fb      	strb	r3, [r7, #15]
 80072ce:	7bfb      	ldrb	r3, [r7, #15]
 80072d0:	2b0a      	cmp	r3, #10
 80072d2:	f67f aed4 	bls.w	800707e <Node_Check+0x12>
				}
			}
		}
	}
}
 80072d6:	bf00      	nop
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	200028d8 	.word	0x200028d8
 80072e4:	000493e0 	.word	0x000493e0

080072e8 <Set_Limit_Energy>:

void Set_Limit_Energy(uint8_t outletID, uint32_t limit_energy){
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	4603      	mov	r3, r0
 80072f0:	6039      	str	r1, [r7, #0]
 80072f2:	71fb      	strb	r3, [r7, #7]
	if(outletID < NUMBER_OF_RELAYS){
 80072f4:	79fb      	ldrb	r3, [r7, #7]
 80072f6:	2b09      	cmp	r3, #9
 80072f8:	d80d      	bhi.n	8007316 <Set_Limit_Energy+0x2e>
		Main.nodes[outletID].limitEnergy = limit_energy;
 80072fa:	79fb      	ldrb	r3, [r7, #7]
 80072fc:	4a08      	ldr	r2, [pc, #32]	; (8007320 <Set_Limit_Energy+0x38>)
 80072fe:	015b      	lsls	r3, r3, #5
 8007300:	4413      	add	r3, r2
 8007302:	331c      	adds	r3, #28
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	601a      	str	r2, [r3, #0]
		Main.nodes[outletID].energy = 0;
 8007308:	79fb      	ldrb	r3, [r7, #7]
 800730a:	4a05      	ldr	r2, [pc, #20]	; (8007320 <Set_Limit_Energy+0x38>)
 800730c:	015b      	lsls	r3, r3, #5
 800730e:	4413      	add	r3, r2
 8007310:	3318      	adds	r3, #24
 8007312:	2200      	movs	r2, #0
 8007314:	601a      	str	r2, [r3, #0]
	}
}
 8007316:	bf00      	nop
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	bc80      	pop	{r7}
 800731e:	4770      	bx	lr
 8007320:	200028d8 	.word	0x200028d8

08007324 <Get_Power_Consumption>:
uint32_t Get_Power_Consumption(uint8_t outletID){
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	4603      	mov	r3, r0
 800732c:	71fb      	strb	r3, [r7, #7]
	if(outletID < NUMBER_OF_RELAYS){
 800732e:	79fb      	ldrb	r3, [r7, #7]
 8007330:	2b09      	cmp	r3, #9
 8007332:	d806      	bhi.n	8007342 <Get_Power_Consumption+0x1e>
		return Main.nodes[outletID].energy;
 8007334:	79fb      	ldrb	r3, [r7, #7]
 8007336:	4a06      	ldr	r2, [pc, #24]	; (8007350 <Get_Power_Consumption+0x2c>)
 8007338:	015b      	lsls	r3, r3, #5
 800733a:	4413      	add	r3, r2
 800733c:	3318      	adds	r3, #24
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	e000      	b.n	8007344 <Get_Power_Consumption+0x20>
	}
	return 0;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	bc80      	pop	{r7}
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	200028d8 	.word	0x200028d8

08007354 <Node_Update>:

void Node_Update(uint8_t outletID, uint32_t current, uint8_t voltage, uint8_t power_factor, uint8_t time_period) {	//update and return energy ???
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6039      	str	r1, [r7, #0]
 800735c:	4611      	mov	r1, r2
 800735e:	461a      	mov	r2, r3
 8007360:	4603      	mov	r3, r0
 8007362:	71fb      	strb	r3, [r7, #7]
 8007364:	460b      	mov	r3, r1
 8007366:	71bb      	strb	r3, [r7, #6]
 8007368:	4613      	mov	r3, r2
 800736a:	717b      	strb	r3, [r7, #5]
	if (outletID == 0) {	//setup for Main node
 800736c:	79fb      	ldrb	r3, [r7, #7]
 800736e:	2b00      	cmp	r3, #0
 8007370:	f000 80a9 	beq.w	80074c6 <Node_Update+0x172>
//		Main.ambientTemp = AdcDmaBuffer[10] * 0.08056641;	//chua tinh, LM35 10mV/C => C = V/10mV = ADC*3.3/4096 *100 = adc*0.08056641
//		Main.internalTemp = ((1.43 - (AdcDmaBuffer[12] * 3.3 / 4096)) / 4.3) + 25 ;//AdcDmaBuffer[12];	//chua lay 1v8//Temp = (v25 - Vsense)/AVGSlope + 25 = (1.43 - Vsense)/4.3 + 25 = (1.43 - (ADC*3.3/4096) / 4.3 ) + 25
//		Main.valueRef =
	} else if (outletID <= NUMBER_OF_RELAYS) {
 8007374:	79fb      	ldrb	r3, [r7, #7]
 8007376:	2b0a      	cmp	r3, #10
 8007378:	f200 80a5 	bhi.w	80074c6 <Node_Update+0x172>
		uint8_t tempOutletID = outletID - 1;
 800737c:	79fb      	ldrb	r3, [r7, #7]
 800737e:	3b01      	subs	r3, #1
 8007380:	73fb      	strb	r3, [r7, #15]
		Main.nodes[tempOutletID].current = current;
 8007382:	7bfb      	ldrb	r3, [r7, #15]
 8007384:	4a52      	ldr	r2, [pc, #328]	; (80074d0 <Node_Update+0x17c>)
 8007386:	015b      	lsls	r3, r3, #5
 8007388:	4413      	add	r3, r2
 800738a:	3304      	adds	r3, #4
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	601a      	str	r2, [r3, #0]
		Main.nodes[tempOutletID].voltage = voltage;
 8007390:	7bfb      	ldrb	r3, [r7, #15]
 8007392:	4a4f      	ldr	r2, [pc, #316]	; (80074d0 <Node_Update+0x17c>)
 8007394:	015b      	lsls	r3, r3, #5
 8007396:	4413      	add	r3, r2
 8007398:	3308      	adds	r3, #8
 800739a:	79ba      	ldrb	r2, [r7, #6]
 800739c:	701a      	strb	r2, [r3, #0]
		Main.nodes[tempOutletID].powerFactor = power_factor;
 800739e:	7bfb      	ldrb	r3, [r7, #15]
 80073a0:	4a4b      	ldr	r2, [pc, #300]	; (80074d0 <Node_Update+0x17c>)
 80073a2:	015b      	lsls	r3, r3, #5
 80073a4:	4413      	add	r3, r2
 80073a6:	3309      	adds	r3, #9
 80073a8:	797a      	ldrb	r2, [r7, #5]
 80073aa:	701a      	strb	r2, [r3, #0]
		Main.nodes[tempOutletID].power = Main.nodes[tempOutletID].voltage * Main.nodes[tempOutletID].current * Main.nodes[tempOutletID].powerFactor / 100000;	//in mA	// /100
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
 80073ae:	4a48      	ldr	r2, [pc, #288]	; (80074d0 <Node_Update+0x17c>)
 80073b0:	015b      	lsls	r3, r3, #5
 80073b2:	4413      	add	r3, r2
 80073b4:	3308      	adds	r3, #8
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	4619      	mov	r1, r3
 80073ba:	7bfb      	ldrb	r3, [r7, #15]
 80073bc:	4a44      	ldr	r2, [pc, #272]	; (80074d0 <Node_Update+0x17c>)
 80073be:	015b      	lsls	r3, r3, #5
 80073c0:	4413      	add	r3, r2
 80073c2:	3304      	adds	r3, #4
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	fb03 f301 	mul.w	r3, r3, r1
 80073ca:	7bfa      	ldrb	r2, [r7, #15]
 80073cc:	4940      	ldr	r1, [pc, #256]	; (80074d0 <Node_Update+0x17c>)
 80073ce:	0152      	lsls	r2, r2, #5
 80073d0:	440a      	add	r2, r1
 80073d2:	3209      	adds	r2, #9
 80073d4:	7812      	ldrb	r2, [r2, #0]
 80073d6:	fb02 f203 	mul.w	r2, r2, r3
 80073da:	7bfb      	ldrb	r3, [r7, #15]
 80073dc:	0952      	lsrs	r2, r2, #5
 80073de:	493d      	ldr	r1, [pc, #244]	; (80074d4 <Node_Update+0x180>)
 80073e0:	fba1 1202 	umull	r1, r2, r1, r2
 80073e4:	09d2      	lsrs	r2, r2, #7
 80073e6:	493a      	ldr	r1, [pc, #232]	; (80074d0 <Node_Update+0x17c>)
 80073e8:	015b      	lsls	r3, r3, #5
 80073ea:	440b      	add	r3, r1
 80073ec:	3310      	adds	r3, #16
 80073ee:	601a      	str	r2, [r3, #0]
		if (Main.nodes[tempOutletID].limitEnergy > 0){
 80073f0:	7bfb      	ldrb	r3, [r7, #15]
 80073f2:	4a37      	ldr	r2, [pc, #220]	; (80074d0 <Node_Update+0x17c>)
 80073f4:	015b      	lsls	r3, r3, #5
 80073f6:	4413      	add	r3, r2
 80073f8:	331c      	adds	r3, #28
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d01a      	beq.n	8007436 <Node_Update+0xe2>
			Main.nodes[tempOutletID].energy = Main.nodes[tempOutletID].energy + Main.nodes[tempOutletID].power*time_period/100;
 8007400:	7bfb      	ldrb	r3, [r7, #15]
 8007402:	4a33      	ldr	r2, [pc, #204]	; (80074d0 <Node_Update+0x17c>)
 8007404:	015b      	lsls	r3, r3, #5
 8007406:	4413      	add	r3, r2
 8007408:	3318      	adds	r3, #24
 800740a:	6819      	ldr	r1, [r3, #0]
 800740c:	7bfb      	ldrb	r3, [r7, #15]
 800740e:	4a30      	ldr	r2, [pc, #192]	; (80074d0 <Node_Update+0x17c>)
 8007410:	015b      	lsls	r3, r3, #5
 8007412:	4413      	add	r3, r2
 8007414:	3310      	adds	r3, #16
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	7e3a      	ldrb	r2, [r7, #24]
 800741a:	fb02 f303 	mul.w	r3, r2, r3
 800741e:	4a2e      	ldr	r2, [pc, #184]	; (80074d8 <Node_Update+0x184>)
 8007420:	fba2 2303 	umull	r2, r3, r2, r3
 8007424:	095a      	lsrs	r2, r3, #5
 8007426:	7bfb      	ldrb	r3, [r7, #15]
 8007428:	440a      	add	r2, r1
 800742a:	4929      	ldr	r1, [pc, #164]	; (80074d0 <Node_Update+0x17c>)
 800742c:	015b      	lsls	r3, r3, #5
 800742e:	440b      	add	r3, r1
 8007430:	3318      	adds	r3, #24
 8007432:	601a      	str	r2, [r3, #0]
 8007434:	e006      	b.n	8007444 <Node_Update+0xf0>
		} else {
			Main.nodes[tempOutletID].energy = 0;
 8007436:	7bfb      	ldrb	r3, [r7, #15]
 8007438:	4a25      	ldr	r2, [pc, #148]	; (80074d0 <Node_Update+0x17c>)
 800743a:	015b      	lsls	r3, r3, #5
 800743c:	4413      	add	r3, r2
 800743e:	3318      	adds	r3, #24
 8007440:	2200      	movs	r2, #0
 8007442:	601a      	str	r2, [r3, #0]
		}
		if(tempOutletID == 3 || tempOutletID == 8){
 8007444:	7bfb      	ldrb	r3, [r7, #15]
 8007446:	2b03      	cmp	r3, #3
 8007448:	d002      	beq.n	8007450 <Node_Update+0xfc>
 800744a:	7bfb      	ldrb	r3, [r7, #15]
 800744c:	2b08      	cmp	r3, #8
 800744e:	d13a      	bne.n	80074c6 <Node_Update+0x172>
			sprintf((char*) strtmpPower, "%d\t", (int) Main.nodes[tempOutletID].powerFactor);
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	4a1f      	ldr	r2, [pc, #124]	; (80074d0 <Node_Update+0x17c>)
 8007454:	015b      	lsls	r3, r3, #5
 8007456:	4413      	add	r3, r2
 8007458:	3309      	adds	r3, #9
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	461a      	mov	r2, r3
 800745e:	491f      	ldr	r1, [pc, #124]	; (80074dc <Node_Update+0x188>)
 8007460:	481f      	ldr	r0, [pc, #124]	; (80074e0 <Node_Update+0x18c>)
 8007462:	f002 fd95 	bl	8009f90 <siprintf>
			UART3_SendToHost((uint8_t *)strtmpPower);
 8007466:	481e      	ldr	r0, [pc, #120]	; (80074e0 <Node_Update+0x18c>)
 8007468:	f002 f830 	bl	80094cc <UART3_SendToHost>
			sprintf((char*) strtmpPower, "%d\t", (int) Main.nodes[tempOutletID].current);
 800746c:	7bfb      	ldrb	r3, [r7, #15]
 800746e:	4a18      	ldr	r2, [pc, #96]	; (80074d0 <Node_Update+0x17c>)
 8007470:	015b      	lsls	r3, r3, #5
 8007472:	4413      	add	r3, r2
 8007474:	3304      	adds	r3, #4
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	461a      	mov	r2, r3
 800747a:	4918      	ldr	r1, [pc, #96]	; (80074dc <Node_Update+0x188>)
 800747c:	4818      	ldr	r0, [pc, #96]	; (80074e0 <Node_Update+0x18c>)
 800747e:	f002 fd87 	bl	8009f90 <siprintf>
			UART3_SendToHost((uint8_t *)strtmpPower);
 8007482:	4817      	ldr	r0, [pc, #92]	; (80074e0 <Node_Update+0x18c>)
 8007484:	f002 f822 	bl	80094cc <UART3_SendToHost>
			sprintf((char*) strtmpPower, "%d\t", (int) Main.nodes[tempOutletID].power);
 8007488:	7bfb      	ldrb	r3, [r7, #15]
 800748a:	4a11      	ldr	r2, [pc, #68]	; (80074d0 <Node_Update+0x17c>)
 800748c:	015b      	lsls	r3, r3, #5
 800748e:	4413      	add	r3, r2
 8007490:	3310      	adds	r3, #16
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	461a      	mov	r2, r3
 8007496:	4911      	ldr	r1, [pc, #68]	; (80074dc <Node_Update+0x188>)
 8007498:	4811      	ldr	r0, [pc, #68]	; (80074e0 <Node_Update+0x18c>)
 800749a:	f002 fd79 	bl	8009f90 <siprintf>
			UART3_SendToHost((uint8_t *)strtmpPower);
 800749e:	4810      	ldr	r0, [pc, #64]	; (80074e0 <Node_Update+0x18c>)
 80074a0:	f002 f814 	bl	80094cc <UART3_SendToHost>

			sprintf((char*) strtmpPower, "%d\r\n", (int) Main.nodes[tempOutletID].energy);
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
 80074a6:	4a0a      	ldr	r2, [pc, #40]	; (80074d0 <Node_Update+0x17c>)
 80074a8:	015b      	lsls	r3, r3, #5
 80074aa:	4413      	add	r3, r2
 80074ac:	3318      	adds	r3, #24
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	461a      	mov	r2, r3
 80074b2:	490c      	ldr	r1, [pc, #48]	; (80074e4 <Node_Update+0x190>)
 80074b4:	480a      	ldr	r0, [pc, #40]	; (80074e0 <Node_Update+0x18c>)
 80074b6:	f002 fd6b 	bl	8009f90 <siprintf>
			UART3_SendToHost((uint8_t *)strtmpPower);
 80074ba:	4809      	ldr	r0, [pc, #36]	; (80074e0 <Node_Update+0x18c>)
 80074bc:	f002 f806 	bl	80094cc <UART3_SendToHost>
			UART3_SendToHost((uint8_t *)"\r\n");
 80074c0:	4809      	ldr	r0, [pc, #36]	; (80074e8 <Node_Update+0x194>)
 80074c2:	f002 f803 	bl	80094cc <UART3_SendToHost>
		}


	}
}
 80074c6:	bf00      	nop
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	200028d8 	.word	0x200028d8
 80074d4:	0a7c5ac5 	.word	0x0a7c5ac5
 80074d8:	51eb851f 	.word	0x51eb851f
 80074dc:	0800abac 	.word	0x0800abac
 80074e0:	20000018 	.word	0x20000018
 80074e4:	0800abb0 	.word	0x0800abb0
 80074e8:	0800abb8 	.word	0x0800abb8

080074ec <Power_Setup>:




void Power_Setup(void) {
 80074ec:	b580      	push	{r7, lr}
 80074ee:	af00      	add	r7, sp, #0
	powerFsmState = POWER_FINISH_STATE;
 80074f0:	4b04      	ldr	r3, [pc, #16]	; (8007504 <Power_Setup+0x18>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	701a      	strb	r2, [r3, #0]
	Node_Setup();
 80074f6:	f7ff fd45 	bl	8006f84 <Node_Setup>
	Led_Display_Clear_All();
 80074fa:	f7ff fb47 	bl	8006b8c <Led_Display_Clear_All>
}
 80074fe:	bf00      	nop
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	20000205 	.word	0x20000205

08007508 <Power_Loop>:

void Power_Loop(void) {
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
	static uint8_t relayIndex = 0;
	switch (powerFsmState) {
 800750e:	4b92      	ldr	r3, [pc, #584]	; (8007758 <Power_Loop+0x250>)
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	2b05      	cmp	r3, #5
 8007514:	f200 8114 	bhi.w	8007740 <Power_Loop+0x238>
 8007518:	a201      	add	r2, pc, #4	; (adr r2, 8007520 <Power_Loop+0x18>)
 800751a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751e:	bf00      	nop
 8007520:	08007539 	.word	0x08007539
 8007524:	08007541 	.word	0x08007541
 8007528:	08007549 	.word	0x08007549
 800752c:	08007555 	.word	0x08007555
 8007530:	080076f9 	.word	0x080076f9
 8007534:	08007739 	.word	0x08007739
	case POWER_FINISH_STATE:
		powerFsmState = POWER_BEGIN_STATE;
 8007538:	4b87      	ldr	r3, [pc, #540]	; (8007758 <Power_Loop+0x250>)
 800753a:	2201      	movs	r2, #1
 800753c:	701a      	strb	r2, [r3, #0]
		break;
 800753e:	e106      	b.n	800774e <Power_Loop+0x246>
	case POWER_BEGIN_STATE:
		powerFsmState = POWER_CHECK_STATUS_STATE;
 8007540:	4b85      	ldr	r3, [pc, #532]	; (8007758 <Power_Loop+0x250>)
 8007542:	2202      	movs	r2, #2
 8007544:	701a      	strb	r2, [r3, #0]
		break;
 8007546:	e102      	b.n	800774e <Power_Loop+0x246>
	case POWER_CHECK_STATUS_STATE:
		Node_Check();
 8007548:	f7ff fd90 	bl	800706c <Node_Check>
		powerFsmState = POWER_CHECK_COMMAND_STATE;
 800754c:	4b82      	ldr	r3, [pc, #520]	; (8007758 <Power_Loop+0x250>)
 800754e:	2203      	movs	r2, #3
 8007550:	701a      	strb	r2, [r3, #0]
		break;
 8007552:	e0fc      	b.n	800774e <Power_Loop+0x246>
	case POWER_CHECK_COMMAND_STATE:
		if (Main.status == SYSTEM_OVER_CURRENT) {
 8007554:	4b81      	ldr	r3, [pc, #516]	; (800775c <Power_Loop+0x254>)
 8007556:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800755a:	2b03      	cmp	r3, #3
 800755c:	d109      	bne.n	8007572 <Power_Loop+0x6a>
			UART3_SendToHost((uint8_t*) "System over current \r\n");
 800755e:	4880      	ldr	r0, [pc, #512]	; (8007760 <Power_Loop+0x258>)
 8007560:	f001 ffb4 	bl	80094cc <UART3_SendToHost>
			powerFsmState = POWER_ERROR_HANDLER_STATE;
 8007564:	4b7c      	ldr	r3, [pc, #496]	; (8007758 <Power_Loop+0x250>)
 8007566:	2204      	movs	r2, #4
 8007568:	701a      	strb	r2, [r3, #0]
			Led_Display_Set_All(RED);
 800756a:	2002      	movs	r0, #2
 800756c:	f7ff fb23 	bl	8006bb6 <Led_Display_Set_All>
//
//				UART3_SendToHost((uint8_t*) "\r\n");
			}
		}

		break;
 8007570:	e0ea      	b.n	8007748 <Power_Loop+0x240>
		} else if (Main.status == SYSTEM_OVER_TEMP) {
 8007572:	4b7a      	ldr	r3, [pc, #488]	; (800775c <Power_Loop+0x254>)
 8007574:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8007578:	2b04      	cmp	r3, #4
 800757a:	d109      	bne.n	8007590 <Power_Loop+0x88>
			UART3_SendToHost((uint8_t*) "System over temp \r\n");
 800757c:	4879      	ldr	r0, [pc, #484]	; (8007764 <Power_Loop+0x25c>)
 800757e:	f001 ffa5 	bl	80094cc <UART3_SendToHost>
			powerFsmState = POWER_WARNING_HANDLER_STATE;
 8007582:	4b75      	ldr	r3, [pc, #468]	; (8007758 <Power_Loop+0x250>)
 8007584:	2205      	movs	r2, #5
 8007586:	701a      	strb	r2, [r3, #0]
			Led_Display_Set_All(YELLOW);
 8007588:	2003      	movs	r0, #3
 800758a:	f7ff fb14 	bl	8006bb6 <Led_Display_Set_All>
		break;
 800758e:	e0db      	b.n	8007748 <Power_Loop+0x240>
		} else if (Main.status == NODE_OVER_TOTAL || Main.status == NODE_UNDER_TOTAL) {
 8007590:	4b72      	ldr	r3, [pc, #456]	; (800775c <Power_Loop+0x254>)
 8007592:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8007596:	2b01      	cmp	r3, #1
 8007598:	d004      	beq.n	80075a4 <Power_Loop+0x9c>
 800759a:	4b70      	ldr	r3, [pc, #448]	; (800775c <Power_Loop+0x254>)
 800759c:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d10d      	bne.n	80075c0 <Power_Loop+0xb8>
			UART3_SendToHost((uint8_t*) "System Node != total \r\n");
 80075a4:	4870      	ldr	r0, [pc, #448]	; (8007768 <Power_Loop+0x260>)
 80075a6:	f001 ff91 	bl	80094cc <UART3_SendToHost>
			powerFsmState = POWER_WARNING_HANDLER_STATE;
 80075aa:	4b6b      	ldr	r3, [pc, #428]	; (8007758 <Power_Loop+0x250>)
 80075ac:	2205      	movs	r2, #5
 80075ae:	701a      	strb	r2, [r3, #0]
			Main.status = SYSTEM_NORMAL;
 80075b0:	4b6a      	ldr	r3, [pc, #424]	; (800775c <Power_Loop+0x254>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
			Led_Display_Set_All(YELLOW);
 80075b8:	2003      	movs	r0, #3
 80075ba:	f7ff fafc 	bl	8006bb6 <Led_Display_Set_All>
		break;
 80075be:	e0c3      	b.n	8007748 <Power_Loop+0x240>
		} else if (Main.status == SYSTEM_NORMAL) {
 80075c0:	4b66      	ldr	r3, [pc, #408]	; (800775c <Power_Loop+0x254>)
 80075c2:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f040 80be 	bne.w	8007748 <Power_Loop+0x240>
			if (Main.nodes[relayIndex].nodeStatus == NODE_NORMAL) {
 80075cc:	4b67      	ldr	r3, [pc, #412]	; (800776c <Power_Loop+0x264>)
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	4a62      	ldr	r2, [pc, #392]	; (800775c <Power_Loop+0x254>)
 80075d2:	015b      	lsls	r3, r3, #5
 80075d4:	4413      	add	r3, r2
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d071      	beq.n	80076c0 <Power_Loop+0x1b8>
			} else if (Main.nodes[relayIndex].nodeStatus == CHARGING) {
 80075dc:	4b63      	ldr	r3, [pc, #396]	; (800776c <Power_Loop+0x264>)
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	4a5e      	ldr	r2, [pc, #376]	; (800775c <Power_Loop+0x254>)
 80075e2:	015b      	lsls	r3, r3, #5
 80075e4:	4413      	add	r3, r2
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d069      	beq.n	80076c0 <Power_Loop+0x1b8>
			} else if (Main.nodes[relayIndex].nodeStatus == CHARGEFULL) {
 80075ec:	4b5f      	ldr	r3, [pc, #380]	; (800776c <Power_Loop+0x264>)
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	4a5a      	ldr	r2, [pc, #360]	; (800775c <Power_Loop+0x254>)
 80075f2:	015b      	lsls	r3, r3, #5
 80075f4:	4413      	add	r3, r2
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d10f      	bne.n	800761c <Power_Loop+0x114>
				if (HAL_GetTick() - lastReport > 5000) {
 80075fc:	f7f9 fa8a 	bl	8000b14 <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	4b5b      	ldr	r3, [pc, #364]	; (8007770 <Power_Loop+0x268>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	f241 3288 	movw	r2, #5000	; 0x1388
 800760c:	4293      	cmp	r3, r2
 800760e:	d957      	bls.n	80076c0 <Power_Loop+0x1b8>
					lastReport = HAL_GetTick();
 8007610:	f7f9 fa80 	bl	8000b14 <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	4b56      	ldr	r3, [pc, #344]	; (8007770 <Power_Loop+0x268>)
 8007618:	601a      	str	r2, [r3, #0]
 800761a:	e051      	b.n	80076c0 <Power_Loop+0x1b8>
			} else if (Main.nodes[relayIndex].nodeStatus == UNPLUG) {
 800761c:	4b53      	ldr	r3, [pc, #332]	; (800776c <Power_Loop+0x264>)
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	4a4e      	ldr	r2, [pc, #312]	; (800775c <Power_Loop+0x254>)
 8007622:	015b      	lsls	r3, r3, #5
 8007624:	4413      	add	r3, r2
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	2b03      	cmp	r3, #3
 800762a:	d049      	beq.n	80076c0 <Power_Loop+0x1b8>
			} else if (Main.nodes[relayIndex].nodeStatus == NO_FUSE) {
 800762c:	4b4f      	ldr	r3, [pc, #316]	; (800776c <Power_Loop+0x264>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	4a4a      	ldr	r2, [pc, #296]	; (800775c <Power_Loop+0x254>)
 8007632:	015b      	lsls	r3, r3, #5
 8007634:	4413      	add	r3, r2
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	2b05      	cmp	r3, #5
 800763a:	d041      	beq.n	80076c0 <Power_Loop+0x1b8>
			} else if (Main.nodes[relayIndex].nodeStatus == NO_RELAY) {
 800763c:	4b4b      	ldr	r3, [pc, #300]	; (800776c <Power_Loop+0x264>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	4a46      	ldr	r2, [pc, #280]	; (800775c <Power_Loop+0x254>)
 8007642:	015b      	lsls	r3, r3, #5
 8007644:	4413      	add	r3, r2
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	2b06      	cmp	r3, #6
 800764a:	d039      	beq.n	80076c0 <Power_Loop+0x1b8>
			} else if (Main.nodes[relayIndex].nodeStatus == NODE_OVER_MONEY) {
 800764c:	4b47      	ldr	r3, [pc, #284]	; (800776c <Power_Loop+0x264>)
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	4a42      	ldr	r2, [pc, #264]	; (800775c <Power_Loop+0x254>)
 8007652:	015b      	lsls	r3, r3, #5
 8007654:	4413      	add	r3, r2
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	2b08      	cmp	r3, #8
 800765a:	d115      	bne.n	8007688 <Power_Loop+0x180>
				if (Get_Relay_Status(relayIndex) == SET) {
 800765c:	4b43      	ldr	r3, [pc, #268]	; (800776c <Power_Loop+0x264>)
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	4618      	mov	r0, r3
 8007662:	f000 f971 	bl	8007948 <Get_Relay_Status>
 8007666:	4603      	mov	r3, r0
 8007668:	2b01      	cmp	r3, #1
 800766a:	d104      	bne.n	8007676 <Power_Loop+0x16e>
					Reset_Relay(relayIndex);
 800766c:	4b3f      	ldr	r3, [pc, #252]	; (800776c <Power_Loop+0x264>)
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	4618      	mov	r0, r3
 8007672:	f000 f903 	bl	800787c <Reset_Relay>
				Main.nodes[relayIndex].limitEnergy = 0;
 8007676:	4b3d      	ldr	r3, [pc, #244]	; (800776c <Power_Loop+0x264>)
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	4a38      	ldr	r2, [pc, #224]	; (800775c <Power_Loop+0x254>)
 800767c:	015b      	lsls	r3, r3, #5
 800767e:	4413      	add	r3, r2
 8007680:	331c      	adds	r3, #28
 8007682:	2200      	movs	r2, #0
 8007684:	601a      	str	r2, [r3, #0]
 8007686:	e01b      	b.n	80076c0 <Power_Loop+0x1b8>
			} else if (Main.nodes[relayIndex].nodeStatus == NODE_OVER_TIME) {
 8007688:	4b38      	ldr	r3, [pc, #224]	; (800776c <Power_Loop+0x264>)
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	4a33      	ldr	r2, [pc, #204]	; (800775c <Power_Loop+0x254>)
 800768e:	015b      	lsls	r3, r3, #5
 8007690:	4413      	add	r3, r2
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	2b09      	cmp	r3, #9
 8007696:	d113      	bne.n	80076c0 <Power_Loop+0x1b8>
				if (Get_Relay_Status(relayIndex) == 1) {
 8007698:	4b34      	ldr	r3, [pc, #208]	; (800776c <Power_Loop+0x264>)
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	4618      	mov	r0, r3
 800769e:	f000 f953 	bl	8007948 <Get_Relay_Status>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d104      	bne.n	80076b2 <Power_Loop+0x1aa>
					Reset_Relay(relayIndex);
 80076a8:	4b30      	ldr	r3, [pc, #192]	; (800776c <Power_Loop+0x264>)
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f000 f8e5 	bl	800787c <Reset_Relay>
				Main.nodes[relayIndex].nodeStatus = NODE_NORMAL;
 80076b2:	4b2e      	ldr	r3, [pc, #184]	; (800776c <Power_Loop+0x264>)
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	4a29      	ldr	r2, [pc, #164]	; (800775c <Power_Loop+0x254>)
 80076b8:	015b      	lsls	r3, r3, #5
 80076ba:	4413      	add	r3, r2
 80076bc:	2200      	movs	r2, #0
 80076be:	701a      	strb	r2, [r3, #0]
			Led_Update_Status_Buffer(relayIndex, Main.nodes[relayIndex].nodeStatus);
 80076c0:	4b2a      	ldr	r3, [pc, #168]	; (800776c <Power_Loop+0x264>)
 80076c2:	7818      	ldrb	r0, [r3, #0]
 80076c4:	4b29      	ldr	r3, [pc, #164]	; (800776c <Power_Loop+0x264>)
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	4a24      	ldr	r2, [pc, #144]	; (800775c <Power_Loop+0x254>)
 80076ca:	015b      	lsls	r3, r3, #5
 80076cc:	4413      	add	r3, r2
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	4619      	mov	r1, r3
 80076d2:	f7ff f9c1 	bl	8006a58 <Led_Update_Status_Buffer>
			relayIndex++;
 80076d6:	4b25      	ldr	r3, [pc, #148]	; (800776c <Power_Loop+0x264>)
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	3301      	adds	r3, #1
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	4b23      	ldr	r3, [pc, #140]	; (800776c <Power_Loop+0x264>)
 80076e0:	701a      	strb	r2, [r3, #0]
			if (relayIndex >= NUMBER_OF_RELAYS) {
 80076e2:	4b22      	ldr	r3, [pc, #136]	; (800776c <Power_Loop+0x264>)
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	2b09      	cmp	r3, #9
 80076e8:	d92e      	bls.n	8007748 <Power_Loop+0x240>
				relayIndex = 0;
 80076ea:	4b20      	ldr	r3, [pc, #128]	; (800776c <Power_Loop+0x264>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	701a      	strb	r2, [r3, #0]
				powerFsmState = POWER_FINISH_STATE;
 80076f0:	4b19      	ldr	r3, [pc, #100]	; (8007758 <Power_Loop+0x250>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	701a      	strb	r2, [r3, #0]
		break;
 80076f6:	e027      	b.n	8007748 <Power_Loop+0x240>
	case POWER_ERROR_HANDLER_STATE:
		if (HAL_GetTick() - lastTimeErr > 5000) {
 80076f8:	f7f9 fa0c 	bl	8000b14 <HAL_GetTick>
 80076fc:	4602      	mov	r2, r0
 80076fe:	4b1d      	ldr	r3, [pc, #116]	; (8007774 <Power_Loop+0x26c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	f241 3288 	movw	r2, #5000	; 0x1388
 8007708:	4293      	cmp	r3, r2
 800770a:	d91f      	bls.n	800774c <Power_Loop+0x244>
			lastTimeErr = HAL_GetTick();
 800770c:	f7f9 fa02 	bl	8000b14 <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	4b18      	ldr	r3, [pc, #96]	; (8007774 <Power_Loop+0x26c>)
 8007714:	601a      	str	r2, [r3, #0]
			for (uint8_t i = 0; i < NUMBER_OF_RELAYS; i++)
 8007716:	2300      	movs	r3, #0
 8007718:	71fb      	strb	r3, [r7, #7]
 800771a:	e006      	b.n	800772a <Power_Loop+0x222>
				Reset_Relay(i);
 800771c:	79fb      	ldrb	r3, [r7, #7]
 800771e:	4618      	mov	r0, r3
 8007720:	f000 f8ac 	bl	800787c <Reset_Relay>
			for (uint8_t i = 0; i < NUMBER_OF_RELAYS; i++)
 8007724:	79fb      	ldrb	r3, [r7, #7]
 8007726:	3301      	adds	r3, #1
 8007728:	71fb      	strb	r3, [r7, #7]
 800772a:	79fb      	ldrb	r3, [r7, #7]
 800772c:	2b09      	cmp	r3, #9
 800772e:	d9f5      	bls.n	800771c <Power_Loop+0x214>
			powerFsmState = POWER_FINISH_STATE;
 8007730:	4b09      	ldr	r3, [pc, #36]	; (8007758 <Power_Loop+0x250>)
 8007732:	2200      	movs	r2, #0
 8007734:	701a      	strb	r2, [r3, #0]
		}
		break;
 8007736:	e009      	b.n	800774c <Power_Loop+0x244>
	case POWER_WARNING_HANDLER_STATE:
		powerFsmState = POWER_FINISH_STATE;
 8007738:	4b07      	ldr	r3, [pc, #28]	; (8007758 <Power_Loop+0x250>)
 800773a:	2200      	movs	r2, #0
 800773c:	701a      	strb	r2, [r3, #0]
		break;
 800773e:	e006      	b.n	800774e <Power_Loop+0x246>
	default:
		powerFsmState = POWER_FINISH_STATE;
 8007740:	4b05      	ldr	r3, [pc, #20]	; (8007758 <Power_Loop+0x250>)
 8007742:	2200      	movs	r2, #0
 8007744:	701a      	strb	r2, [r3, #0]
		break;
 8007746:	e002      	b.n	800774e <Power_Loop+0x246>
		break;
 8007748:	bf00      	nop
 800774a:	e000      	b.n	800774e <Power_Loop+0x246>
		break;
 800774c:	bf00      	nop
	}
}
 800774e:	bf00      	nop
 8007750:	3708      	adds	r7, #8
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	20000205 	.word	0x20000205
 800775c:	200028d8 	.word	0x200028d8
 8007760:	0800abbc 	.word	0x0800abbc
 8007764:	0800abd4 	.word	0x0800abd4
 8007768:	0800abe8 	.word	0x0800abe8
 800776c:	20000206 	.word	0x20000206
 8007770:	200028d4 	.word	0x200028d4
 8007774:	20002a28 	.word	0x20002a28

08007778 <Clear_Relay_Timeout_Flag>:


uint8_t relay_TimeoutFlag_Index = SCH_MAX_TASKS;
uint8_t set_Relay_TimeoutFlag = 1;

void Clear_Relay_Timeout_Flag(void){
 8007778:	b480      	push	{r7}
 800777a:	af00      	add	r7, sp, #0
	set_Relay_TimeoutFlag = 0;
 800777c:	4b03      	ldr	r3, [pc, #12]	; (800778c <Clear_Relay_Timeout_Flag+0x14>)
 800777e:	2200      	movs	r2, #0
 8007780:	701a      	strb	r2, [r3, #0]
}
 8007782:	bf00      	nop
 8007784:	46bd      	mov	sp, r7
 8007786:	bc80      	pop	{r7}
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	20000079 	.word	0x20000079

08007790 <Set_Relay_Timeout_Flag>:
void Set_Relay_Timeout_Flag(void){
 8007790:	b480      	push	{r7}
 8007792:	af00      	add	r7, sp, #0
	set_Relay_TimeoutFlag = 1;
 8007794:	4b03      	ldr	r3, [pc, #12]	; (80077a4 <Set_Relay_Timeout_Flag+0x14>)
 8007796:	2201      	movs	r2, #1
 8007798:	701a      	strb	r2, [r3, #0]
}
 800779a:	bf00      	nop
 800779c:	46bd      	mov	sp, r7
 800779e:	bc80      	pop	{r7}
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	20000079 	.word	0x20000079

080077a8 <is_Set_Relay_Timeout>:
uint8_t is_Set_Relay_Timeout(void){
 80077a8:	b480      	push	{r7}
 80077aa:	af00      	add	r7, sp, #0
	return set_Relay_TimeoutFlag;
 80077ac:	4b02      	ldr	r3, [pc, #8]	; (80077b8 <is_Set_Relay_Timeout+0x10>)
 80077ae:	781b      	ldrb	r3, [r3, #0]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bc80      	pop	{r7}
 80077b6:	4770      	bx	lr
 80077b8:	20000079 	.word	0x20000079

080077bc <Relay_Init>:

void Relay_Init(void){
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < NUMBER_OF_RELAYS; i ++){
 80077c2:	2300      	movs	r3, #0
 80077c4:	71fb      	strb	r3, [r7, #7]
 80077c6:	e006      	b.n	80077d6 <Relay_Init+0x1a>
		array_Of_Relay_Statuses[i] = RESET;
 80077c8:	79fb      	ldrb	r3, [r7, #7]
 80077ca:	4a09      	ldr	r2, [pc, #36]	; (80077f0 <Relay_Init+0x34>)
 80077cc:	2100      	movs	r1, #0
 80077ce:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < NUMBER_OF_RELAYS; i ++){
 80077d0:	79fb      	ldrb	r3, [r7, #7]
 80077d2:	3301      	adds	r3, #1
 80077d4:	71fb      	strb	r3, [r7, #7]
 80077d6:	79fb      	ldrb	r3, [r7, #7]
 80077d8:	2b09      	cmp	r3, #9
 80077da:	d9f5      	bls.n	80077c8 <Relay_Init+0xc>
	}
	Update_Relay_Physical_Status();
 80077dc:	f000 f890 	bl	8007900 <Update_Relay_Physical_Status>
	set_Relay_TimeoutFlag = 1;
 80077e0:	4b04      	ldr	r3, [pc, #16]	; (80077f4 <Relay_Init+0x38>)
 80077e2:	2201      	movs	r2, #1
 80077e4:	701a      	strb	r2, [r3, #0]
}
 80077e6:	bf00      	nop
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	20002a44 	.word	0x20002a44
 80077f4:	20000079 	.word	0x20000079

080077f8 <Set_Relay>:
void Set_Relay(uint8_t relayIndex){
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	4603      	mov	r3, r0
 8007800:	71fb      	strb	r3, [r7, #7]
	if(relayIndex > 9) return;
 8007802:	79fb      	ldrb	r3, [r7, #7]
 8007804:	2b09      	cmp	r3, #9
 8007806:	d828      	bhi.n	800785a <Set_Relay+0x62>
	if(array_Of_Relay_Statuses[relayIndex] == RESET){
 8007808:	79fb      	ldrb	r3, [r7, #7]
 800780a:	4a16      	ldr	r2, [pc, #88]	; (8007864 <Set_Relay+0x6c>)
 800780c:	5cd3      	ldrb	r3, [r2, r3]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d102      	bne.n	8007818 <Set_Relay+0x20>
		isUpdateRelayStatus = SET;
 8007812:	4b15      	ldr	r3, [pc, #84]	; (8007868 <Set_Relay+0x70>)
 8007814:	2201      	movs	r2, #1
 8007816:	701a      	strb	r2, [r3, #0]
	}
	array_Of_Relay_Statuses[relayIndex] = SET;
 8007818:	79fb      	ldrb	r3, [r7, #7]
 800781a:	4a12      	ldr	r2, [pc, #72]	; (8007864 <Set_Relay+0x6c>)
 800781c:	2101      	movs	r1, #1
 800781e:	54d1      	strb	r1, [r2, r3]
	HAL_GPIO_WritePin(array_Of_Relay_Ports[relayIndex], array_Of_Relay_Pins[relayIndex], SET);
 8007820:	79fb      	ldrb	r3, [r7, #7]
 8007822:	4a12      	ldr	r2, [pc, #72]	; (800786c <Set_Relay+0x74>)
 8007824:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007828:	79fb      	ldrb	r3, [r7, #7]
 800782a:	4a11      	ldr	r2, [pc, #68]	; (8007870 <Set_Relay+0x78>)
 800782c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007830:	2201      	movs	r2, #1
 8007832:	4619      	mov	r1, r3
 8007834:	f7fa fb84 	bl	8001f40 <HAL_GPIO_WritePin>

	SCH_Delete_Task(relay_TimeoutFlag_Index);
 8007838:	4b0e      	ldr	r3, [pc, #56]	; (8007874 <Set_Relay+0x7c>)
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	4618      	mov	r0, r3
 800783e:	f000 f971 	bl	8007b24 <SCH_Delete_Task>
	Clear_Relay_Timeout_Flag();
 8007842:	f7ff ff99 	bl	8007778 <Clear_Relay_Timeout_Flag>
	relay_TimeoutFlag_Index = SCH_Add_Task(Set_Relay_Timeout_Flag, 200, 0);
 8007846:	2200      	movs	r2, #0
 8007848:	21c8      	movs	r1, #200	; 0xc8
 800784a:	480b      	ldr	r0, [pc, #44]	; (8007878 <Set_Relay+0x80>)
 800784c:	f000 f8f0 	bl	8007a30 <SCH_Add_Task>
 8007850:	4603      	mov	r3, r0
 8007852:	461a      	mov	r2, r3
 8007854:	4b07      	ldr	r3, [pc, #28]	; (8007874 <Set_Relay+0x7c>)
 8007856:	701a      	strb	r2, [r3, #0]
 8007858:	e000      	b.n	800785c <Set_Relay+0x64>
	if(relayIndex > 9) return;
 800785a:	bf00      	nop
}
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	20002a44 	.word	0x20002a44
 8007868:	20000207 	.word	0x20000207
 800786c:	20000050 	.word	0x20000050
 8007870:	2000003c 	.word	0x2000003c
 8007874:	20000078 	.word	0x20000078
 8007878:	08007791 	.word	0x08007791

0800787c <Reset_Relay>:

void Reset_Relay(uint8_t relayIndex){
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	4603      	mov	r3, r0
 8007884:	71fb      	strb	r3, [r7, #7]
	if(relayIndex > 9) return;
 8007886:	79fb      	ldrb	r3, [r7, #7]
 8007888:	2b09      	cmp	r3, #9
 800788a:	d828      	bhi.n	80078de <Reset_Relay+0x62>
	if(array_Of_Relay_Statuses[relayIndex] == SET){
 800788c:	79fb      	ldrb	r3, [r7, #7]
 800788e:	4a16      	ldr	r2, [pc, #88]	; (80078e8 <Reset_Relay+0x6c>)
 8007890:	5cd3      	ldrb	r3, [r2, r3]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d102      	bne.n	800789c <Reset_Relay+0x20>
		isUpdateRelayStatus = SET;
 8007896:	4b15      	ldr	r3, [pc, #84]	; (80078ec <Reset_Relay+0x70>)
 8007898:	2201      	movs	r2, #1
 800789a:	701a      	strb	r2, [r3, #0]
	}
	array_Of_Relay_Statuses[relayIndex] = RESET;
 800789c:	79fb      	ldrb	r3, [r7, #7]
 800789e:	4a12      	ldr	r2, [pc, #72]	; (80078e8 <Reset_Relay+0x6c>)
 80078a0:	2100      	movs	r1, #0
 80078a2:	54d1      	strb	r1, [r2, r3]
	HAL_GPIO_WritePin(array_Of_Relay_Ports[relayIndex], array_Of_Relay_Pins[relayIndex], RESET);
 80078a4:	79fb      	ldrb	r3, [r7, #7]
 80078a6:	4a12      	ldr	r2, [pc, #72]	; (80078f0 <Reset_Relay+0x74>)
 80078a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80078ac:	79fb      	ldrb	r3, [r7, #7]
 80078ae:	4a11      	ldr	r2, [pc, #68]	; (80078f4 <Reset_Relay+0x78>)
 80078b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078b4:	2200      	movs	r2, #0
 80078b6:	4619      	mov	r1, r3
 80078b8:	f7fa fb42 	bl	8001f40 <HAL_GPIO_WritePin>

	SCH_Delete_Task(relay_TimeoutFlag_Index);
 80078bc:	4b0e      	ldr	r3, [pc, #56]	; (80078f8 <Reset_Relay+0x7c>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	4618      	mov	r0, r3
 80078c2:	f000 f92f 	bl	8007b24 <SCH_Delete_Task>
	Clear_Relay_Timeout_Flag();
 80078c6:	f7ff ff57 	bl	8007778 <Clear_Relay_Timeout_Flag>
	relay_TimeoutFlag_Index = SCH_Add_Task(Set_Relay_Timeout_Flag, 200, 0);
 80078ca:	2200      	movs	r2, #0
 80078cc:	21c8      	movs	r1, #200	; 0xc8
 80078ce:	480b      	ldr	r0, [pc, #44]	; (80078fc <Reset_Relay+0x80>)
 80078d0:	f000 f8ae 	bl	8007a30 <SCH_Add_Task>
 80078d4:	4603      	mov	r3, r0
 80078d6:	461a      	mov	r2, r3
 80078d8:	4b07      	ldr	r3, [pc, #28]	; (80078f8 <Reset_Relay+0x7c>)
 80078da:	701a      	strb	r2, [r3, #0]
 80078dc:	e000      	b.n	80078e0 <Reset_Relay+0x64>
	if(relayIndex > 9) return;
 80078de:	bf00      	nop
}
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	20002a44 	.word	0x20002a44
 80078ec:	20000207 	.word	0x20000207
 80078f0:	20000050 	.word	0x20000050
 80078f4:	2000003c 	.word	0x2000003c
 80078f8:	20000078 	.word	0x20000078
 80078fc:	08007791 	.word	0x08007791

08007900 <Update_Relay_Physical_Status>:

void Update_Relay_Physical_Status(void){
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
	uint8_t relayIndex;
	for (relayIndex = 0; relayIndex <  NUMBER_OF_RELAYS; relayIndex ++){
 8007906:	2300      	movs	r3, #0
 8007908:	71fb      	strb	r3, [r7, #7]
 800790a:	e010      	b.n	800792e <Update_Relay_Physical_Status+0x2e>
		HAL_GPIO_WritePin(array_Of_Relay_Ports[relayIndex], array_Of_Relay_Pins[relayIndex], array_Of_Relay_Statuses[relayIndex]);
 800790c:	79fb      	ldrb	r3, [r7, #7]
 800790e:	4a0b      	ldr	r2, [pc, #44]	; (800793c <Update_Relay_Physical_Status+0x3c>)
 8007910:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007914:	79fb      	ldrb	r3, [r7, #7]
 8007916:	4a0a      	ldr	r2, [pc, #40]	; (8007940 <Update_Relay_Physical_Status+0x40>)
 8007918:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800791c:	79fb      	ldrb	r3, [r7, #7]
 800791e:	4a09      	ldr	r2, [pc, #36]	; (8007944 <Update_Relay_Physical_Status+0x44>)
 8007920:	5cd3      	ldrb	r3, [r2, r3]
 8007922:	461a      	mov	r2, r3
 8007924:	f7fa fb0c 	bl	8001f40 <HAL_GPIO_WritePin>
	for (relayIndex = 0; relayIndex <  NUMBER_OF_RELAYS; relayIndex ++){
 8007928:	79fb      	ldrb	r3, [r7, #7]
 800792a:	3301      	adds	r3, #1
 800792c:	71fb      	strb	r3, [r7, #7]
 800792e:	79fb      	ldrb	r3, [r7, #7]
 8007930:	2b09      	cmp	r3, #9
 8007932:	d9eb      	bls.n	800790c <Update_Relay_Physical_Status+0xc>
	}
}
 8007934:	bf00      	nop
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	20000050 	.word	0x20000050
 8007940:	2000003c 	.word	0x2000003c
 8007944:	20002a44 	.word	0x20002a44

08007948 <Get_Relay_Status>:

FlagStatus Get_Relay_Status(uint8_t relayIndex){
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	4603      	mov	r3, r0
 8007950:	71fb      	strb	r3, [r7, #7]
	return array_Of_Relay_Statuses[relayIndex];
 8007952:	79fb      	ldrb	r3, [r7, #7]
 8007954:	4a03      	ldr	r2, [pc, #12]	; (8007964 <Get_Relay_Status+0x1c>)
 8007956:	5cd3      	ldrb	r3, [r2, r3]
}
 8007958:	4618      	mov	r0, r3
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	bc80      	pop	{r7}
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	20002a44 	.word	0x20002a44

08007968 <Get_Is_Update_Relay_Status>:
FlagStatus Get_Is_Update_Relay_Status(void){
 8007968:	b480      	push	{r7}
 800796a:	af00      	add	r7, sp, #0
	if(isUpdateRelayStatus){
 800796c:	4b06      	ldr	r3, [pc, #24]	; (8007988 <Get_Is_Update_Relay_Status+0x20>)
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d004      	beq.n	800797e <Get_Is_Update_Relay_Status+0x16>
		isUpdateRelayStatus = RESET;
 8007974:	4b04      	ldr	r3, [pc, #16]	; (8007988 <Get_Is_Update_Relay_Status+0x20>)
 8007976:	2200      	movs	r2, #0
 8007978:	701a      	strb	r2, [r3, #0]
		return SET;
 800797a:	2301      	movs	r3, #1
 800797c:	e000      	b.n	8007980 <Get_Is_Update_Relay_Status+0x18>
	} else {
		return RESET;
 800797e:	2300      	movs	r3, #0
	}
}
 8007980:	4618      	mov	r0, r3
 8007982:	46bd      	mov	sp, r7
 8007984:	bc80      	pop	{r7}
 8007986:	4770      	bx	lr
 8007988:	20000207 	.word	0x20000207

0800798c <SCH_Update>:
 *      Author: VAIO
 */
#include "main.h"
#include "app_scheduler.h"

void SCH_Update(void) {
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
    uint8_t Index;
    // NOTE: calculations are in *TICKS* (not milliseconds)
    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8007992:	2300      	movs	r3, #0
 8007994:	71fb      	strb	r3, [r7, #7]
 8007996:	e041      	b.n	8007a1c <SCH_Update+0x90>
    // Check if there is a task at this location
        if (SCH_tasks_G[Index].pTask) {
 8007998:	79fb      	ldrb	r3, [r7, #7]
 800799a:	4a24      	ldr	r2, [pc, #144]	; (8007a2c <SCH_Update+0xa0>)
 800799c:	011b      	lsls	r3, r3, #4
 800799e:	4413      	add	r3, r2
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d037      	beq.n	8007a16 <SCH_Update+0x8a>
			if (SCH_tasks_G[Index].Delay == 0) {
 80079a6:	79fb      	ldrb	r3, [r7, #7]
 80079a8:	4a20      	ldr	r2, [pc, #128]	; (8007a2c <SCH_Update+0xa0>)
 80079aa:	011b      	lsls	r3, r3, #4
 80079ac:	4413      	add	r3, r2
 80079ae:	3304      	adds	r3, #4
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d122      	bne.n	80079fc <SCH_Update+0x70>
			// The task is due to run
				SCH_tasks_G[Index].RunMe += 1; // Inc. the 'RunMe' flag
 80079b6:	79fb      	ldrb	r3, [r7, #7]
 80079b8:	4a1c      	ldr	r2, [pc, #112]	; (8007a2c <SCH_Update+0xa0>)
 80079ba:	011b      	lsls	r3, r3, #4
 80079bc:	4413      	add	r3, r2
 80079be:	330c      	adds	r3, #12
 80079c0:	781a      	ldrb	r2, [r3, #0]
 80079c2:	79fb      	ldrb	r3, [r7, #7]
 80079c4:	3201      	adds	r2, #1
 80079c6:	b2d1      	uxtb	r1, r2
 80079c8:	4a18      	ldr	r2, [pc, #96]	; (8007a2c <SCH_Update+0xa0>)
 80079ca:	011b      	lsls	r3, r3, #4
 80079cc:	4413      	add	r3, r2
 80079ce:	330c      	adds	r3, #12
 80079d0:	460a      	mov	r2, r1
 80079d2:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks_G[Index].Period) {
 80079d4:	79fb      	ldrb	r3, [r7, #7]
 80079d6:	4a15      	ldr	r2, [pc, #84]	; (8007a2c <SCH_Update+0xa0>)
 80079d8:	011b      	lsls	r3, r3, #4
 80079da:	4413      	add	r3, r2
 80079dc:	3308      	adds	r3, #8
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <SCH_Update+0x70>
					// Schedule periodic tasks to run again
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 80079e4:	79fa      	ldrb	r2, [r7, #7]
 80079e6:	79fb      	ldrb	r3, [r7, #7]
 80079e8:	4910      	ldr	r1, [pc, #64]	; (8007a2c <SCH_Update+0xa0>)
 80079ea:	0112      	lsls	r2, r2, #4
 80079ec:	440a      	add	r2, r1
 80079ee:	3208      	adds	r2, #8
 80079f0:	6812      	ldr	r2, [r2, #0]
 80079f2:	490e      	ldr	r1, [pc, #56]	; (8007a2c <SCH_Update+0xa0>)
 80079f4:	011b      	lsls	r3, r3, #4
 80079f6:	440b      	add	r3, r1
 80079f8:	3304      	adds	r3, #4
 80079fa:	601a      	str	r2, [r3, #0]
				}
			}
			SCH_tasks_G[Index].Delay -= 1;
 80079fc:	79fb      	ldrb	r3, [r7, #7]
 80079fe:	4a0b      	ldr	r2, [pc, #44]	; (8007a2c <SCH_Update+0xa0>)
 8007a00:	011b      	lsls	r3, r3, #4
 8007a02:	4413      	add	r3, r2
 8007a04:	3304      	adds	r3, #4
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	79fb      	ldrb	r3, [r7, #7]
 8007a0a:	3a01      	subs	r2, #1
 8007a0c:	4907      	ldr	r1, [pc, #28]	; (8007a2c <SCH_Update+0xa0>)
 8007a0e:	011b      	lsls	r3, r3, #4
 8007a10:	440b      	add	r3, r1
 8007a12:	3304      	adds	r3, #4
 8007a14:	601a      	str	r2, [r3, #0]
    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8007a16:	79fb      	ldrb	r3, [r7, #7]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	71fb      	strb	r3, [r7, #7]
 8007a1c:	79fb      	ldrb	r3, [r7, #7]
 8007a1e:	2b31      	cmp	r3, #49	; 0x31
 8007a20:	d9ba      	bls.n	8007998 <SCH_Update+0xc>
        }
    }
}
 8007a22:	bf00      	nop
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bc80      	pop	{r7}
 8007a2a:	4770      	bx	lr
 8007a2c:	20000238 	.word	0x20000238

08007a30 <SCH_Add_Task>:


uint8_t SCH_Add_Task(void (* pFunction)(), const uint32_t DELAY, const uint32_t PERIOD) {
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
    uint8_t Index = 0;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	75fb      	strb	r3, [r7, #23]
    // First find a gap in the array (if there is one)
    while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)) {
 8007a40:	e002      	b.n	8007a48 <SCH_Add_Task+0x18>
        Index++;
 8007a42:	7dfb      	ldrb	r3, [r7, #23]
 8007a44:	3301      	adds	r3, #1
 8007a46:	75fb      	strb	r3, [r7, #23]
    while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)) {
 8007a48:	7dfb      	ldrb	r3, [r7, #23]
 8007a4a:	4a17      	ldr	r2, [pc, #92]	; (8007aa8 <SCH_Add_Task+0x78>)
 8007a4c:	011b      	lsls	r3, r3, #4
 8007a4e:	4413      	add	r3, r2
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <SCH_Add_Task+0x2c>
 8007a56:	7dfb      	ldrb	r3, [r7, #23]
 8007a58:	2b31      	cmp	r3, #49	; 0x31
 8007a5a:	d9f2      	bls.n	8007a42 <SCH_Add_Task+0x12>
    }
    if (Index == SCH_MAX_TASKS) {// Have we reached the end of the list?
 8007a5c:	7dfb      	ldrb	r3, [r7, #23]
 8007a5e:	2b32      	cmp	r3, #50	; 0x32
 8007a60:	d101      	bne.n	8007a66 <SCH_Add_Task+0x36>
        // Task list is full, Set the global error variable
        return SCH_MAX_TASKS; // Also return an error code
 8007a62:	2332      	movs	r3, #50	; 0x32
 8007a64:	e01b      	b.n	8007a9e <SCH_Add_Task+0x6e>
   }
    // If we're here, there is a space in the task array
    SCH_tasks_G[Index].pTask = pFunction;
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
 8007a68:	4a0f      	ldr	r2, [pc, #60]	; (8007aa8 <SCH_Add_Task+0x78>)
 8007a6a:	011b      	lsls	r3, r3, #4
 8007a6c:	4413      	add	r3, r2
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[Index].Delay = DELAY;
 8007a72:	7dfb      	ldrb	r3, [r7, #23]
 8007a74:	4a0c      	ldr	r2, [pc, #48]	; (8007aa8 <SCH_Add_Task+0x78>)
 8007a76:	011b      	lsls	r3, r3, #4
 8007a78:	4413      	add	r3, r2
 8007a7a:	3304      	adds	r3, #4
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[Index].Period = PERIOD;
 8007a80:	7dfb      	ldrb	r3, [r7, #23]
 8007a82:	4a09      	ldr	r2, [pc, #36]	; (8007aa8 <SCH_Add_Task+0x78>)
 8007a84:	011b      	lsls	r3, r3, #4
 8007a86:	4413      	add	r3, r2
 8007a88:	3308      	adds	r3, #8
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[Index].RunMe = 0;
 8007a8e:	7dfb      	ldrb	r3, [r7, #23]
 8007a90:	4a05      	ldr	r2, [pc, #20]	; (8007aa8 <SCH_Add_Task+0x78>)
 8007a92:	011b      	lsls	r3, r3, #4
 8007a94:	4413      	add	r3, r2
 8007a96:	330c      	adds	r3, #12
 8007a98:	2200      	movs	r2, #0
 8007a9a:	701a      	strb	r2, [r3, #0]
    return Index; // return position of task (to allow later deletion)
 8007a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	371c      	adds	r7, #28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bc80      	pop	{r7}
 8007aa6:	4770      	bx	lr
 8007aa8:	20000238 	.word	0x20000238

08007aac <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
    uint8_t Index;
    // Dispatches (runs) the next task (if one is ready)
    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	71fb      	strb	r3, [r7, #7]
 8007ab6:	e02b      	b.n	8007b10 <SCH_Dispatch_Tasks+0x64>
        if (SCH_tasks_G[Index].RunMe > 0) {
 8007ab8:	79fb      	ldrb	r3, [r7, #7]
 8007aba:	4a19      	ldr	r2, [pc, #100]	; (8007b20 <SCH_Dispatch_Tasks+0x74>)
 8007abc:	011b      	lsls	r3, r3, #4
 8007abe:	4413      	add	r3, r2
 8007ac0:	330c      	adds	r3, #12
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d020      	beq.n	8007b0a <SCH_Dispatch_Tasks+0x5e>
           (*SCH_tasks_G[Index].pTask)(); // Run the task
 8007ac8:	79fb      	ldrb	r3, [r7, #7]
 8007aca:	4a15      	ldr	r2, [pc, #84]	; (8007b20 <SCH_Dispatch_Tasks+0x74>)
 8007acc:	011b      	lsls	r3, r3, #4
 8007ace:	4413      	add	r3, r2
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4798      	blx	r3
           SCH_tasks_G[Index].RunMe -= 1; // Reset / reduce RunMe flag
 8007ad4:	79fb      	ldrb	r3, [r7, #7]
 8007ad6:	4a12      	ldr	r2, [pc, #72]	; (8007b20 <SCH_Dispatch_Tasks+0x74>)
 8007ad8:	011b      	lsls	r3, r3, #4
 8007ada:	4413      	add	r3, r2
 8007adc:	330c      	adds	r3, #12
 8007ade:	781a      	ldrb	r2, [r3, #0]
 8007ae0:	79fb      	ldrb	r3, [r7, #7]
 8007ae2:	3a01      	subs	r2, #1
 8007ae4:	b2d1      	uxtb	r1, r2
 8007ae6:	4a0e      	ldr	r2, [pc, #56]	; (8007b20 <SCH_Dispatch_Tasks+0x74>)
 8007ae8:	011b      	lsls	r3, r3, #4
 8007aea:	4413      	add	r3, r2
 8007aec:	330c      	adds	r3, #12
 8007aee:	460a      	mov	r2, r1
 8007af0:	701a      	strb	r2, [r3, #0]
          // Periodic tasks will automatically run again
          // - if this is a 'one shot' task, remove it from the array
          if (SCH_tasks_G[Index].Period == 0) SCH_Delete_Task(Index);
 8007af2:	79fb      	ldrb	r3, [r7, #7]
 8007af4:	4a0a      	ldr	r2, [pc, #40]	; (8007b20 <SCH_Dispatch_Tasks+0x74>)
 8007af6:	011b      	lsls	r3, r3, #4
 8007af8:	4413      	add	r3, r2
 8007afa:	3308      	adds	r3, #8
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d103      	bne.n	8007b0a <SCH_Dispatch_Tasks+0x5e>
 8007b02:	79fb      	ldrb	r3, [r7, #7]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 f80d 	bl	8007b24 <SCH_Delete_Task>
    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8007b0a:	79fb      	ldrb	r3, [r7, #7]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	71fb      	strb	r3, [r7, #7]
 8007b10:	79fb      	ldrb	r3, [r7, #7]
 8007b12:	2b31      	cmp	r3, #49	; 0x31
 8007b14:	d9d0      	bls.n	8007ab8 <SCH_Dispatch_Tasks+0xc>
      }
   }
//   SCH_Report_Status(); // Report system status
}
 8007b16:	bf00      	nop
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	20000238 	.word	0x20000238

08007b24 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint8_t taskIndex) {
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	71fb      	strb	r3, [r7, #7]
	uint8_t Return_code  = 0;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	73fb      	strb	r3, [r7, #15]
	if(taskIndex < SCH_MAX_TASKS){
 8007b32:	79fb      	ldrb	r3, [r7, #7]
 8007b34:	2b31      	cmp	r3, #49	; 0x31
 8007b36:	d826      	bhi.n	8007b86 <SCH_Delete_Task+0x62>
		if (SCH_tasks_G[taskIndex].pTask == 0) {
 8007b38:	79fb      	ldrb	r3, [r7, #7]
 8007b3a:	4a16      	ldr	r2, [pc, #88]	; (8007b94 <SCH_Delete_Task+0x70>)
 8007b3c:	011b      	lsls	r3, r3, #4
 8007b3e:	4413      	add	r3, r2
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d102      	bne.n	8007b4c <SCH_Delete_Task+0x28>
			Return_code = 0;
 8007b46:	2300      	movs	r3, #0
 8007b48:	73fb      	strb	r3, [r7, #15]
 8007b4a:	e001      	b.n	8007b50 <SCH_Delete_Task+0x2c>
		} else {
			Return_code = 1;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	73fb      	strb	r3, [r7, #15]
		}
		SCH_tasks_G[taskIndex].pTask = 0x0000;
 8007b50:	79fb      	ldrb	r3, [r7, #7]
 8007b52:	4a10      	ldr	r2, [pc, #64]	; (8007b94 <SCH_Delete_Task+0x70>)
 8007b54:	011b      	lsls	r3, r3, #4
 8007b56:	4413      	add	r3, r2
 8007b58:	2200      	movs	r2, #0
 8007b5a:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[taskIndex].Delay = 0;
 8007b5c:	79fb      	ldrb	r3, [r7, #7]
 8007b5e:	4a0d      	ldr	r2, [pc, #52]	; (8007b94 <SCH_Delete_Task+0x70>)
 8007b60:	011b      	lsls	r3, r3, #4
 8007b62:	4413      	add	r3, r2
 8007b64:	3304      	adds	r3, #4
 8007b66:	2200      	movs	r2, #0
 8007b68:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[taskIndex].Period = 0;
 8007b6a:	79fb      	ldrb	r3, [r7, #7]
 8007b6c:	4a09      	ldr	r2, [pc, #36]	; (8007b94 <SCH_Delete_Task+0x70>)
 8007b6e:	011b      	lsls	r3, r3, #4
 8007b70:	4413      	add	r3, r2
 8007b72:	3308      	adds	r3, #8
 8007b74:	2200      	movs	r2, #0
 8007b76:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[taskIndex].RunMe = 0;
 8007b78:	79fb      	ldrb	r3, [r7, #7]
 8007b7a:	4a06      	ldr	r2, [pc, #24]	; (8007b94 <SCH_Delete_Task+0x70>)
 8007b7c:	011b      	lsls	r3, r3, #4
 8007b7e:	4413      	add	r3, r2
 8007b80:	330c      	adds	r3, #12
 8007b82:	2200      	movs	r2, #0
 8007b84:	701a      	strb	r2, [r3, #0]
	}
	  return Return_code; // return status
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bc80      	pop	{r7}
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	20000238 	.word	0x20000238

08007b98 <Sim3g_Run>:
		UART3_SendToHost(atCommandArrayForSetupSim3g[i].expectedReturn);
	}
}


uint8_t Sim3g_Run(void){
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	af00      	add	r7, sp, #0
	DEBUG_SIM3G(Sim3g_State_Display(););
	if(sim3gState < MAX_SIM3G_NUMBER_STATES){
 8007b9c:	4b07      	ldr	r3, [pc, #28]	; (8007bbc <Sim3g_Run+0x24>)
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	2b09      	cmp	r3, #9
 8007ba2:	d808      	bhi.n	8007bb6 <Sim3g_Run+0x1e>
		(*Sim3G_State_Machine[sim3gState].func)();
 8007ba4:	4b05      	ldr	r3, [pc, #20]	; (8007bbc <Sim3g_Run+0x24>)
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	4a05      	ldr	r2, [pc, #20]	; (8007bc0 <Sim3g_Run+0x28>)
 8007baa:	00db      	lsls	r3, r3, #3
 8007bac:	4413      	add	r3, r2
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	4798      	blx	r3
		return 0;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	e000      	b.n	8007bb8 <Sim3g_Run+0x20>
	} else {
		return 1;
 8007bb6:	2301      	movs	r3, #1
	}
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	20000215 	.word	0x20000215
 8007bc0:	2000007c 	.word	0x2000007c

08007bc4 <Set_Sim3G_State>:
			break;
		}
	}

}
void Set_Sim3G_State(SIM3G_STATE newState){
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	4603      	mov	r3, r0
 8007bcc:	71fb      	strb	r3, [r7, #7]
	sim3gState = newState;
 8007bce:	4a04      	ldr	r2, [pc, #16]	; (8007be0 <Set_Sim3G_State+0x1c>)
 8007bd0:	79fb      	ldrb	r3, [r7, #7]
 8007bd2:	7013      	strb	r3, [r2, #0]
}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bc80      	pop	{r7}
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	20000215 	.word	0x20000215

08007be4 <Sim3g_Init>:
SIM3G_STATE Get_Sim3G_State(void){
	return sim3gState;
}


void Sim3g_Init(void){
 8007be4:	b580      	push	{r7, lr}
 8007be6:	af00      	add	r7, sp, #0

	sim3g_TimeoutFlag = 0;
 8007be8:	4b0b      	ldr	r3, [pc, #44]	; (8007c18 <Sim3g_Init+0x34>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	701a      	strb	r2, [r3, #0]
	sim3g_Timeout_Task_Index = SCH_MAX_TASKS;
 8007bee:	4b0b      	ldr	r3, [pc, #44]	; (8007c1c <Sim3g_Init+0x38>)
 8007bf0:	2232      	movs	r2, #50	; 0x32
 8007bf2:	701a      	strb	r2, [r3, #0]
	sim3g_Retry_Counter = 0;
 8007bf4:	4b0a      	ldr	r3, [pc, #40]	; (8007c20 <Sim3g_Init+0x3c>)
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	701a      	strb	r2, [r3, #0]
	sim3gState = SIM3G_START_UP;
 8007bfa:	4b0a      	ldr	r3, [pc, #40]	; (8007c24 <Sim3g_Init+0x40>)
 8007bfc:	2206      	movs	r2, #6
 8007bfe:	701a      	strb	r2, [r3, #0]
	pre_sim3gState = MAX_SIM3G_NUMBER_STATES;
 8007c00:	4b09      	ldr	r3, [pc, #36]	; (8007c28 <Sim3g_Init+0x44>)
 8007c02:	220a      	movs	r2, #10
 8007c04:	701a      	strb	r2, [r3, #0]

	Sim3g_GPIO_Init();
 8007c06:	f000 f811 	bl	8007c2c <Sim3g_GPIO_Init>
	Sim3g_Enable();
 8007c0a:	f000 f857 	bl	8007cbc <Sim3g_Enable>
	Reset_Signal_High();
 8007c0e:	f000 f885 	bl	8007d1c <Reset_Signal_High>

}
 8007c12:	bf00      	nop
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	20000210 	.word	0x20000210
 8007c1c:	2000007a 	.word	0x2000007a
 8007c20:	20000211 	.word	0x20000211
 8007c24:	20000215 	.word	0x20000215
 8007c28:	200000cc 	.word	0x200000cc

08007c2c <Sim3g_GPIO_Init>:
void Sim3g_GPIO_Init(void){
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c32:	463b      	mov	r3, r7
 8007c34:	2200      	movs	r2, #0
 8007c36:	601a      	str	r2, [r3, #0]
 8007c38:	605a      	str	r2, [r3, #4]
 8007c3a:	609a      	str	r2, [r3, #8]
 8007c3c:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8007c42:	2301      	movs	r3, #1
 8007c44:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007c46:	2303      	movs	r3, #3
 8007c48:	60fb      	str	r3, [r7, #12]

	GPIO_InitStruct.Pin = SIM5320_3G_WAKEUP;
 8007c4a:	2380      	movs	r3, #128	; 0x80
 8007c4c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(SIM5320_3G_WAKEUP_PORT, &GPIO_InitStruct);
 8007c4e:	463b      	mov	r3, r7
 8007c50:	4619      	mov	r1, r3
 8007c52:	4812      	ldr	r0, [pc, #72]	; (8007c9c <Sim3g_GPIO_Init+0x70>)
 8007c54:	f7f9 ff5e 	bl	8001b14 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = SIM5320_3G_PWRON;
 8007c58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c5c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(SIM5320_3G_PWRON_PORT, &GPIO_InitStruct);
 8007c5e:	463b      	mov	r3, r7
 8007c60:	4619      	mov	r1, r3
 8007c62:	480e      	ldr	r0, [pc, #56]	; (8007c9c <Sim3g_GPIO_Init+0x70>)
 8007c64:	f7f9 ff56 	bl	8001b14 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SIM5320_3G_PERST;
 8007c68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c6c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(SIM5320_3G_PERST_PORT, &GPIO_InitStruct);
 8007c6e:	463b      	mov	r3, r7
 8007c70:	4619      	mov	r1, r3
 8007c72:	480a      	ldr	r0, [pc, #40]	; (8007c9c <Sim3g_GPIO_Init+0x70>)
 8007c74:	f7f9 ff4e 	bl	8001b14 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SIM5320_3G_REG_EN;
 8007c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c7c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(SIM5320_3G_REG_EN_PORT, &GPIO_InitStruct);
 8007c7e:	463b      	mov	r3, r7
 8007c80:	4619      	mov	r1, r3
 8007c82:	4807      	ldr	r0, [pc, #28]	; (8007ca0 <Sim3g_GPIO_Init+0x74>)
 8007c84:	f7f9 ff46 	bl	8001b14 <HAL_GPIO_Init>


	HAL_GPIO_WritePin(PC7_3G_WAKEUP_PORT, PC7_3G_WAKEUP, GPIO_PIN_SET);
 8007c88:	2201      	movs	r2, #1
 8007c8a:	2180      	movs	r1, #128	; 0x80
 8007c8c:	4803      	ldr	r0, [pc, #12]	; (8007c9c <Sim3g_GPIO_Init+0x70>)
 8007c8e:	f7fa f957 	bl	8001f40 <HAL_GPIO_WritePin>

}
 8007c92:	bf00      	nop
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	40011000 	.word	0x40011000
 8007ca0:	40010800 	.word	0x40010800

08007ca4 <Sim3g_Disable>:

void Sim3g_Disable(void){
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PA8_3G_REG_EN_PORT, PA8_3G_REG_EN, GPIO_PIN_RESET);
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007cae:	4802      	ldr	r0, [pc, #8]	; (8007cb8 <Sim3g_Disable+0x14>)
 8007cb0:	f7fa f946 	bl	8001f40 <HAL_GPIO_WritePin>
}
 8007cb4:	bf00      	nop
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	40010800 	.word	0x40010800

08007cbc <Sim3g_Enable>:
void Sim3g_Enable(void){
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PA8_3G_REG_EN_PORT, PA8_3G_REG_EN, GPIO_PIN_SET);
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007cc6:	4802      	ldr	r0, [pc, #8]	; (8007cd0 <Sim3g_Enable+0x14>)
 8007cc8:	f7fa f93a 	bl	8001f40 <HAL_GPIO_WritePin>

}
 8007ccc:	bf00      	nop
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	40010800 	.word	0x40010800

08007cd4 <Power_Signal_Low>:
void Sim3g_WakeUp(void){
	HAL_GPIO_WritePin(PC7_3G_WAKEUP_PORT, PC7_3G_WAKEUP, GPIO_PIN_SET);
	HAL_Delay(500);
	HAL_GPIO_WritePin(PC7_3G_WAKEUP_PORT, PC7_3G_WAKEUP, GPIO_PIN_RESET);
}
void Power_Signal_Low(void){
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PC8_3G_PWRON_PORT, PC8_3G_PWRON, GPIO_PIN_RESET);
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007cde:	4802      	ldr	r0, [pc, #8]	; (8007ce8 <Power_Signal_Low+0x14>)
 8007ce0:	f7fa f92e 	bl	8001f40 <HAL_GPIO_WritePin>
}
 8007ce4:	bf00      	nop
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	40011000 	.word	0x40011000

08007cec <Power_Signal_High>:
void Power_Signal_High(void){
 8007cec:	b580      	push	{r7, lr}
 8007cee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PC8_3G_PWRON_PORT, PC8_3G_PWRON, GPIO_PIN_SET);
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007cf6:	4802      	ldr	r0, [pc, #8]	; (8007d00 <Power_Signal_High+0x14>)
 8007cf8:	f7fa f922 	bl	8001f40 <HAL_GPIO_WritePin>
}
 8007cfc:	bf00      	nop
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	40011000 	.word	0x40011000

08007d04 <Reset_Signal_Low>:
void Reset_Signal_Low(void){
 8007d04:	b580      	push	{r7, lr}
 8007d06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PC9_3G_PERST_PORT, PC9_3G_PERST, GPIO_PIN_RESET);
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d0e:	4802      	ldr	r0, [pc, #8]	; (8007d18 <Reset_Signal_Low+0x14>)
 8007d10:	f7fa f916 	bl	8001f40 <HAL_GPIO_WritePin>
}
 8007d14:	bf00      	nop
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	40011000 	.word	0x40011000

08007d1c <Reset_Signal_High>:
void Reset_Signal_High(void){
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PC9_3G_PERST_PORT, PC9_3G_PERST, GPIO_PIN_SET);
 8007d20:	2201      	movs	r2, #1
 8007d22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d26:	4802      	ldr	r0, [pc, #8]	; (8007d30 <Reset_Signal_High+0x14>)
 8007d28:	f7fa f90a 	bl	8001f40 <HAL_GPIO_WritePin>
}
 8007d2c:	bf00      	nop
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	40011000 	.word	0x40011000

08007d34 <Sim3g_Clear_Timeout_Flag>:

void Sim3g_Clear_Timeout_Flag(void){
 8007d34:	b480      	push	{r7}
 8007d36:	af00      	add	r7, sp, #0
	sim3g_TimeoutFlag = 0;
 8007d38:	4b03      	ldr	r3, [pc, #12]	; (8007d48 <Sim3g_Clear_Timeout_Flag+0x14>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	701a      	strb	r2, [r3, #0]
}
 8007d3e:	bf00      	nop
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bc80      	pop	{r7}
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	20000210 	.word	0x20000210

08007d4c <Sim3g_Command_Timeout>:
void Sim3g_Command_Timeout(void){
 8007d4c:	b480      	push	{r7}
 8007d4e:	af00      	add	r7, sp, #0
	sim3g_TimeoutFlag = 1;
 8007d50:	4b03      	ldr	r3, [pc, #12]	; (8007d60 <Sim3g_Command_Timeout+0x14>)
 8007d52:	2201      	movs	r2, #1
 8007d54:	701a      	strb	r2, [r3, #0]
}
 8007d56:	bf00      	nop
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bc80      	pop	{r7}
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	20000210 	.word	0x20000210

08007d64 <is_Sim3g_Command_Timeout>:
uint8_t is_Sim3g_Command_Timeout(void){
 8007d64:	b480      	push	{r7}
 8007d66:	af00      	add	r7, sp, #0
	return sim3g_TimeoutFlag;
 8007d68:	4b02      	ldr	r3, [pc, #8]	; (8007d74 <is_Sim3g_Command_Timeout+0x10>)
 8007d6a:	781b      	ldrb	r3, [r3, #0]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bc80      	pop	{r7}
 8007d72:	4770      	bx	lr
 8007d74:	20000210 	.word	0x20000210

08007d78 <SM_Power_On_Sim3g>:

void SM_Power_On_Sim3g(void){
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	af00      	add	r7, sp, #0
	SCH_Add_Task(Power_Signal_Low, 0, 0);
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2100      	movs	r1, #0
 8007d80:	4809      	ldr	r0, [pc, #36]	; (8007da8 <SM_Power_On_Sim3g+0x30>)
 8007d82:	f7ff fe55 	bl	8007a30 <SCH_Add_Task>
	SCH_Add_Task(Power_Signal_High, TIMER_TO_POWER_ON_SIM3G, 0);
 8007d86:	2200      	movs	r2, #0
 8007d88:	210a      	movs	r1, #10
 8007d8a:	4808      	ldr	r0, [pc, #32]	; (8007dac <SM_Power_On_Sim3g+0x34>)
 8007d8c:	f7ff fe50 	bl	8007a30 <SCH_Add_Task>
	Sim3g_Clear_Timeout_Flag();
 8007d90:	f7ff ffd0 	bl	8007d34 <Sim3g_Clear_Timeout_Flag>
	SCH_Add_Task(Sim3g_Command_Timeout, TIMER_TO_POWER_ON_SIM3G_TIMEOUT,0);
 8007d94:	2200      	movs	r2, #0
 8007d96:	21c8      	movs	r1, #200	; 0xc8
 8007d98:	4805      	ldr	r0, [pc, #20]	; (8007db0 <SM_Power_On_Sim3g+0x38>)
 8007d9a:	f7ff fe49 	bl	8007a30 <SCH_Add_Task>
	sim3gState = WAIT_FOR_SIM3G_POWER_ON;
 8007d9e:	4b05      	ldr	r3, [pc, #20]	; (8007db4 <SM_Power_On_Sim3g+0x3c>)
 8007da0:	2201      	movs	r2, #1
 8007da2:	701a      	strb	r2, [r3, #0]
}
 8007da4:	bf00      	nop
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	08007cd5 	.word	0x08007cd5
 8007dac:	08007ced 	.word	0x08007ced
 8007db0:	08007d4d 	.word	0x08007d4d
 8007db4:	20000215 	.word	0x20000215

08007db8 <SM_Wait_For_Sim3g_Power_On>:

void SM_Wait_For_Sim3g_Power_On(void){
 8007db8:	b580      	push	{r7, lr}
 8007dba:	af00      	add	r7, sp, #0
	if(is_Sim3g_Command_Timeout()){
 8007dbc:	f7ff ffd2 	bl	8007d64 <is_Sim3g_Command_Timeout>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d002      	beq.n	8007dcc <SM_Wait_For_Sim3g_Power_On+0x14>
		sim3gState = SIM3G_START_UP;
 8007dc6:	4b02      	ldr	r3, [pc, #8]	; (8007dd0 <SM_Wait_For_Sim3g_Power_On+0x18>)
 8007dc8:	2206      	movs	r2, #6
 8007dca:	701a      	strb	r2, [r3, #0]
	}
}
 8007dcc:	bf00      	nop
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	20000215 	.word	0x20000215

08007dd4 <SM_Reset_Sim3g>:

void SM_Reset_Sim3g(void){
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	af00      	add	r7, sp, #0
	SCH_Add_Task(Reset_Signal_Low, 0, 0);
 8007dd8:	2200      	movs	r2, #0
 8007dda:	2100      	movs	r1, #0
 8007ddc:	4809      	ldr	r0, [pc, #36]	; (8007e04 <SM_Reset_Sim3g+0x30>)
 8007dde:	f7ff fe27 	bl	8007a30 <SCH_Add_Task>
	SCH_Add_Task(Reset_Signal_High, TIMER_TO_RESET_SIM3G, 0);
 8007de2:	2200      	movs	r2, #0
 8007de4:	2132      	movs	r1, #50	; 0x32
 8007de6:	4808      	ldr	r0, [pc, #32]	; (8007e08 <SM_Reset_Sim3g+0x34>)
 8007de8:	f7ff fe22 	bl	8007a30 <SCH_Add_Task>
	Sim3g_Clear_Timeout_Flag();
 8007dec:	f7ff ffa2 	bl	8007d34 <Sim3g_Clear_Timeout_Flag>
	SCH_Add_Task(Sim3g_Command_Timeout, TIMER_TO_RESET_SIM3G_TIMEOUT, 0);
 8007df0:	2200      	movs	r2, #0
 8007df2:	21c8      	movs	r1, #200	; 0xc8
 8007df4:	4805      	ldr	r0, [pc, #20]	; (8007e0c <SM_Reset_Sim3g+0x38>)
 8007df6:	f7ff fe1b 	bl	8007a30 <SCH_Add_Task>
	sim3gState = WAIT_FOR_SIM3G_RESET;
 8007dfa:	4b05      	ldr	r3, [pc, #20]	; (8007e10 <SM_Reset_Sim3g+0x3c>)
 8007dfc:	2205      	movs	r2, #5
 8007dfe:	701a      	strb	r2, [r3, #0]
}
 8007e00:	bf00      	nop
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	08007d05 	.word	0x08007d05
 8007e08:	08007d1d 	.word	0x08007d1d
 8007e0c:	08007d4d 	.word	0x08007d4d
 8007e10:	20000215 	.word	0x20000215

08007e14 <SM_Wait_For_Sim3g_Reset>:

void SM_Wait_For_Sim3g_Reset(void){
 8007e14:	b580      	push	{r7, lr}
 8007e16:	af00      	add	r7, sp, #0
	if(is_Sim3g_Command_Timeout()){
 8007e18:	f7ff ffa4 	bl	8007d64 <is_Sim3g_Command_Timeout>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d002      	beq.n	8007e28 <SM_Wait_For_Sim3g_Reset+0x14>
		sim3gState = SIM3G_START_UP;
 8007e22:	4b02      	ldr	r3, [pc, #8]	; (8007e2c <SM_Wait_For_Sim3g_Reset+0x18>)
 8007e24:	2206      	movs	r2, #6
 8007e26:	701a      	strb	r2, [r3, #0]
	}
}
 8007e28:	bf00      	nop
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	20000215 	.word	0x20000215

08007e30 <SM_Power_Off_Sim3g>:
void SM_Power_Off_Sim3g(void){
 8007e30:	b580      	push	{r7, lr}
 8007e32:	af00      	add	r7, sp, #0
//	SCH_Add_Task(Power_Signal_Low, 0, 0);
//	SCH_Add_Task(Power_Signal_High, TIMER_TO_POWER_OFF_SIM3G, 0);
	Sim3g_Disable();
 8007e34:	f7ff ff36 	bl	8007ca4 <Sim3g_Disable>
	Sim3g_Clear_Timeout_Flag();
 8007e38:	f7ff ff7c 	bl	8007d34 <Sim3g_Clear_Timeout_Flag>
	SCH_Add_Task(Sim3g_Command_Timeout, TIMER_TO_POWER_OFF_SIM3G,0);
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007e42:	4804      	ldr	r0, [pc, #16]	; (8007e54 <SM_Power_Off_Sim3g+0x24>)
 8007e44:	f7ff fdf4 	bl	8007a30 <SCH_Add_Task>
	sim3gState = WAIT_FOR_SIM3G_POWER_OFF;
 8007e48:	4b03      	ldr	r3, [pc, #12]	; (8007e58 <SM_Power_Off_Sim3g+0x28>)
 8007e4a:	2203      	movs	r2, #3
 8007e4c:	701a      	strb	r2, [r3, #0]
}
 8007e4e:	bf00      	nop
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	08007d4d 	.word	0x08007d4d
 8007e58:	20000215 	.word	0x20000215

08007e5c <SM_Wait_For_Sim3g_Power_Off>:
void SM_Wait_For_Sim3g_Power_Off(void){
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	af00      	add	r7, sp, #0
	if(is_Sim3g_Command_Timeout()){
 8007e60:	f7ff ff80 	bl	8007d64 <is_Sim3g_Command_Timeout>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d004      	beq.n	8007e74 <SM_Wait_For_Sim3g_Power_Off+0x18>
		Sim3g_Enable();
 8007e6a:	f7ff ff27 	bl	8007cbc <Sim3g_Enable>
		sim3gState = POWER_ON_SIM3G;
 8007e6e:	4b02      	ldr	r3, [pc, #8]	; (8007e78 <SM_Wait_For_Sim3g_Power_Off+0x1c>)
 8007e70:	2200      	movs	r2, #0
 8007e72:	701a      	strb	r2, [r3, #0]
	}
}
 8007e74:	bf00      	nop
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	20000215 	.word	0x20000215

08007e7c <Setting_Up_Timeout>:


void Setting_Up_Timeout(void){
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	af00      	add	r7, sp, #0
	sim3g_Retry_Counter ++;
 8007e80:	4b0c      	ldr	r3, [pc, #48]	; (8007eb4 <Setting_Up_Timeout+0x38>)
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	3301      	adds	r3, #1
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	4b0a      	ldr	r3, [pc, #40]	; (8007eb4 <Setting_Up_Timeout+0x38>)
 8007e8a:	701a      	strb	r2, [r3, #0]
	SCH_Delete_Task(sim3g_Timeout_Task_Index);
 8007e8c:	4b0a      	ldr	r3, [pc, #40]	; (8007eb8 <Setting_Up_Timeout+0x3c>)
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7ff fe47 	bl	8007b24 <SCH_Delete_Task>
	Sim3g_Clear_Timeout_Flag();
 8007e96:	f7ff ff4d 	bl	8007d34 <Sim3g_Clear_Timeout_Flag>
	sim3g_Timeout_Task_Index = SCH_Add_Task(Sim3g_Command_Timeout, COMMAND_TIME_OUT,0);
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007ea0:	4806      	ldr	r0, [pc, #24]	; (8007ebc <Setting_Up_Timeout+0x40>)
 8007ea2:	f7ff fdc5 	bl	8007a30 <SCH_Add_Task>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	4b03      	ldr	r3, [pc, #12]	; (8007eb8 <Setting_Up_Timeout+0x3c>)
 8007eac:	701a      	strb	r2, [r3, #0]
}
 8007eae:	bf00      	nop
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	20000211 	.word	0x20000211
 8007eb8:	2000007a 	.word	0x2000007a
 8007ebc:	08007d4d 	.word	0x08007d4d

08007ec0 <SM_Sim3g_Startup>:

void SM_Sim3g_Startup(void){
 8007ec0:	b480      	push	{r7}
 8007ec2:	af00      	add	r7, sp, #0
	sim3gState = WAIT_FOR_SIM3G_STARTUP_RESPONSE;
 8007ec4:	4b03      	ldr	r3, [pc, #12]	; (8007ed4 <SM_Sim3g_Startup+0x14>)
 8007ec6:	2207      	movs	r2, #7
 8007ec8:	701a      	strb	r2, [r3, #0]
}
 8007eca:	bf00      	nop
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bc80      	pop	{r7}
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	20000215 	.word	0x20000215

08007ed8 <SM_Wait_For_Sim3g_Startup_Response>:

void SM_Wait_For_Sim3g_Startup_Response(void){
 8007ed8:	b480      	push	{r7}
 8007eda:	af00      	add	r7, sp, #0
	if(isPBDoneFlag == SET){
 8007edc:	4b0f      	ldr	r3, [pc, #60]	; (8007f1c <SM_Wait_For_Sim3g_Startup_Response+0x44>)
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d10c      	bne.n	8007efe <SM_Wait_For_Sim3g_Startup_Response+0x26>
		isPBDoneFlag = RESET;
 8007ee4:	4b0d      	ldr	r3, [pc, #52]	; (8007f1c <SM_Wait_For_Sim3g_Startup_Response+0x44>)
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	701a      	strb	r2, [r3, #0]
		sim3gState = SIM3G_SETTING;
 8007eea:	4b0d      	ldr	r3, [pc, #52]	; (8007f20 <SM_Wait_For_Sim3g_Startup_Response+0x48>)
 8007eec:	2208      	movs	r2, #8
 8007eee:	701a      	strb	r2, [r3, #0]
		atCommandArrayIndex = 0;
 8007ef0:	4b0c      	ldr	r3, [pc, #48]	; (8007f24 <SM_Wait_For_Sim3g_Startup_Response+0x4c>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	701a      	strb	r2, [r3, #0]
		sim3g_Retry_Counter = 0;
 8007ef6:	4b0c      	ldr	r3, [pc, #48]	; (8007f28 <SM_Wait_For_Sim3g_Startup_Response+0x50>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	701a      	strb	r2, [r3, #0]
		sim3gState = POWER_OFF_SIM3G;
	} else {
		sim3gState = WAIT_FOR_SIM3G_STARTUP_RESPONSE;
	}

}
 8007efc:	e00a      	b.n	8007f14 <SM_Wait_For_Sim3g_Startup_Response+0x3c>
	} else if(isErrorFlag){
 8007efe:	4b0b      	ldr	r3, [pc, #44]	; (8007f2c <SM_Wait_For_Sim3g_Startup_Response+0x54>)
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d003      	beq.n	8007f0e <SM_Wait_For_Sim3g_Startup_Response+0x36>
		sim3gState = POWER_OFF_SIM3G;
 8007f06:	4b06      	ldr	r3, [pc, #24]	; (8007f20 <SM_Wait_For_Sim3g_Startup_Response+0x48>)
 8007f08:	2202      	movs	r2, #2
 8007f0a:	701a      	strb	r2, [r3, #0]
}
 8007f0c:	e002      	b.n	8007f14 <SM_Wait_For_Sim3g_Startup_Response+0x3c>
		sim3gState = WAIT_FOR_SIM3G_STARTUP_RESPONSE;
 8007f0e:	4b04      	ldr	r3, [pc, #16]	; (8007f20 <SM_Wait_For_Sim3g_Startup_Response+0x48>)
 8007f10:	2207      	movs	r2, #7
 8007f12:	701a      	strb	r2, [r3, #0]
}
 8007f14:	bf00      	nop
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bc80      	pop	{r7}
 8007f1a:	4770      	bx	lr
 8007f1c:	20000208 	.word	0x20000208
 8007f20:	20000215 	.word	0x20000215
 8007f24:	20000214 	.word	0x20000214
 8007f28:	20000211 	.word	0x20000211
 8007f2c:	2000020a 	.word	0x2000020a

08007f30 <SM_Sim3g_Setting>:

void SM_Sim3g_Setting(void){
 8007f30:	b580      	push	{r7, lr}
 8007f32:	af00      	add	r7, sp, #0
	Setting_Up_Timeout();
 8007f34:	f7ff ffa2 	bl	8007e7c <Setting_Up_Timeout>
	ATcommandSending((uint8_t *)atCommandArrayForSetupSim3g[atCommandArrayIndex].ATCommand);
 8007f38:	4b06      	ldr	r3, [pc, #24]	; (8007f54 <SM_Sim3g_Setting+0x24>)
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	4b06      	ldr	r3, [pc, #24]	; (8007f58 <SM_Sim3g_Setting+0x28>)
 8007f40:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8007f44:	4618      	mov	r0, r3
 8007f46:	f001 fb9d 	bl	8009684 <ATcommandSending>
	sim3gState = WAIT_FOR_SIM3G_SETTING_RESPONSE;
 8007f4a:	4b04      	ldr	r3, [pc, #16]	; (8007f5c <SM_Sim3g_Setting+0x2c>)
 8007f4c:	2209      	movs	r2, #9
 8007f4e:	701a      	strb	r2, [r3, #0]
}
 8007f50:	bf00      	nop
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	20000214 	.word	0x20000214
 8007f58:	0800ace4 	.word	0x0800ace4
 8007f5c:	20000215 	.word	0x20000215

08007f60 <SM_Wait_For_Sim3g_Setting_Response>:
void SM_Wait_For_Sim3g_Setting_Response(void){
 8007f60:	b580      	push	{r7, lr}
 8007f62:	af00      	add	r7, sp, #0
	if(isOKFlag){
 8007f64:	4b1c      	ldr	r3, [pc, #112]	; (8007fd8 <SM_Wait_For_Sim3g_Setting_Response+0x78>)
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d013      	beq.n	8007f94 <SM_Wait_For_Sim3g_Setting_Response+0x34>
		isOKFlag = RESET;
 8007f6c:	4b1a      	ldr	r3, [pc, #104]	; (8007fd8 <SM_Wait_For_Sim3g_Setting_Response+0x78>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	701a      	strb	r2, [r3, #0]
		sim3gState = SIM3G_SETTING;
 8007f72:	4b1a      	ldr	r3, [pc, #104]	; (8007fdc <SM_Wait_For_Sim3g_Setting_Response+0x7c>)
 8007f74:	2208      	movs	r2, #8
 8007f76:	701a      	strb	r2, [r3, #0]
		atCommandArrayIndex++;
 8007f78:	4b19      	ldr	r3, [pc, #100]	; (8007fe0 <SM_Wait_For_Sim3g_Setting_Response+0x80>)
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	4b17      	ldr	r3, [pc, #92]	; (8007fe0 <SM_Wait_For_Sim3g_Setting_Response+0x80>)
 8007f82:	701a      	strb	r2, [r3, #0]
		if(atCommandArrayIndex == NUMBER_OF_COMMANDS_FOR_SETUP_SIM3G){
 8007f84:	4b16      	ldr	r3, [pc, #88]	; (8007fe0 <SM_Wait_For_Sim3g_Setting_Response+0x80>)
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	2b08      	cmp	r3, #8
 8007f8a:	d118      	bne.n	8007fbe <SM_Wait_For_Sim3g_Setting_Response+0x5e>
			sim3gState = MAX_SIM3G_NUMBER_STATES;
 8007f8c:	4b13      	ldr	r3, [pc, #76]	; (8007fdc <SM_Wait_For_Sim3g_Setting_Response+0x7c>)
 8007f8e:	220a      	movs	r2, #10
 8007f90:	701a      	strb	r2, [r3, #0]
 8007f92:	e014      	b.n	8007fbe <SM_Wait_For_Sim3g_Setting_Response+0x5e>
		}
	} else if(isErrorFlag){
 8007f94:	4b13      	ldr	r3, [pc, #76]	; (8007fe4 <SM_Wait_For_Sim3g_Setting_Response+0x84>)
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d010      	beq.n	8007fbe <SM_Wait_For_Sim3g_Setting_Response+0x5e>
		isErrorFlag = RESET;
 8007f9c:	4b11      	ldr	r3, [pc, #68]	; (8007fe4 <SM_Wait_For_Sim3g_Setting_Response+0x84>)
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	701a      	strb	r2, [r3, #0]
		if(sim3g_Retry_Counter > MAX_RETRY_NUMBER){
 8007fa2:	4b11      	ldr	r3, [pc, #68]	; (8007fe8 <SM_Wait_For_Sim3g_Setting_Response+0x88>)
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d906      	bls.n	8007fb8 <SM_Wait_For_Sim3g_Setting_Response+0x58>
			sim3g_Retry_Counter = 0;
 8007faa:	4b0f      	ldr	r3, [pc, #60]	; (8007fe8 <SM_Wait_For_Sim3g_Setting_Response+0x88>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	701a      	strb	r2, [r3, #0]
			sim3gState = POWER_OFF_SIM3G;
 8007fb0:	4b0a      	ldr	r3, [pc, #40]	; (8007fdc <SM_Wait_For_Sim3g_Setting_Response+0x7c>)
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	701a      	strb	r2, [r3, #0]
 8007fb6:	e002      	b.n	8007fbe <SM_Wait_For_Sim3g_Setting_Response+0x5e>
		} else {
			sim3gState = SIM3G_SETTING;
 8007fb8:	4b08      	ldr	r3, [pc, #32]	; (8007fdc <SM_Wait_For_Sim3g_Setting_Response+0x7c>)
 8007fba:	2208      	movs	r2, #8
 8007fbc:	701a      	strb	r2, [r3, #0]
		}
	}
	if(is_Sim3g_Command_Timeout()){
 8007fbe:	f7ff fed1 	bl	8007d64 <is_Sim3g_Command_Timeout>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d005      	beq.n	8007fd4 <SM_Wait_For_Sim3g_Setting_Response+0x74>
		sim3g_Retry_Counter = 0;
 8007fc8:	4b07      	ldr	r3, [pc, #28]	; (8007fe8 <SM_Wait_For_Sim3g_Setting_Response+0x88>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	701a      	strb	r2, [r3, #0]
		sim3gState = POWER_OFF_SIM3G;
 8007fce:	4b03      	ldr	r3, [pc, #12]	; (8007fdc <SM_Wait_For_Sim3g_Setting_Response+0x7c>)
 8007fd0:	2202      	movs	r2, #2
 8007fd2:	701a      	strb	r2, [r3, #0]
	}
}
 8007fd4:	bf00      	nop
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	20000209 	.word	0x20000209
 8007fdc:	20000215 	.word	0x20000215
 8007fe0:	20000214 	.word	0x20000214
 8007fe4:	2000020a 	.word	0x2000020a
 8007fe8:	20000211 	.word	0x20000211

08007fec <isReceivedData>:


FlagStatus isReceivedData(const uint8_t * str){
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	73fb      	strb	r3, [r7, #15]
	uint8_t str_len = GetStringLength((uint8_t *)str);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f001 f919 	bl	8009230 <GetStringLength>
 8007ffe:	4603      	mov	r3, r0
 8008000:	73bb      	strb	r3, [r7, #14]
	while(i < str_len){
 8008002:	e00d      	b.n	8008020 <isReceivedData+0x34>
		if(Sim3gDataProcessingBuffer[i] != str[i]){
 8008004:	7bfb      	ldrb	r3, [r7, #15]
 8008006:	4a0b      	ldr	r2, [pc, #44]	; (8008034 <isReceivedData+0x48>)
 8008008:	5cd2      	ldrb	r2, [r2, r3]
 800800a:	7bfb      	ldrb	r3, [r7, #15]
 800800c:	6879      	ldr	r1, [r7, #4]
 800800e:	440b      	add	r3, r1
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	429a      	cmp	r2, r3
 8008014:	d001      	beq.n	800801a <isReceivedData+0x2e>
			return RESET;
 8008016:	2300      	movs	r3, #0
 8008018:	e007      	b.n	800802a <isReceivedData+0x3e>
		}
		i++;
 800801a:	7bfb      	ldrb	r3, [r7, #15]
 800801c:	3301      	adds	r3, #1
 800801e:	73fb      	strb	r3, [r7, #15]
	while(i < str_len){
 8008020:	7bfa      	ldrb	r2, [r7, #15]
 8008022:	7bbb      	ldrb	r3, [r7, #14]
 8008024:	429a      	cmp	r2, r3
 8008026:	d3ed      	bcc.n	8008004 <isReceivedData+0x18>
	}
	return SET;
 8008028:	2301      	movs	r3, #1
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20002a50 	.word	0x20002a50

08008038 <Processing_Received_Data>:
			Sim3gDataProcessingBuffer[1] == len_of_message)
		return SET;
	return RESET;
}

void Processing_Received_Data(uint8_t * sub_topic, uint8_t boxID){
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	460b      	mov	r3, r1
 8008042:	70fb      	strb	r3, [r7, #3]
	uint8_t lentopic = GetStringLength(sub_topic);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f001 f8f3 	bl	8009230 <GetStringLength>
 800804a:	4603      	mov	r3, r0
 800804c:	737b      	strb	r3, [r7, #13]
	uint8_t relayIndex;
	uint8_t relayStatus;
	if(boxID == Sim3gDataProcessingBuffer[2 + lentopic] - 0x30){
 800804e:	78fa      	ldrb	r2, [r7, #3]
 8008050:	7b7b      	ldrb	r3, [r7, #13]
 8008052:	3302      	adds	r3, #2
 8008054:	4915      	ldr	r1, [pc, #84]	; (80080ac <Processing_Received_Data+0x74>)
 8008056:	5ccb      	ldrb	r3, [r1, r3]
 8008058:	3b30      	subs	r3, #48	; 0x30
 800805a:	429a      	cmp	r2, r3
 800805c:	d10b      	bne.n	8008076 <Processing_Received_Data+0x3e>
			relayIndex = Sim3gDataProcessingBuffer[2 + lentopic + 1] - 0x30;
 800805e:	7b7b      	ldrb	r3, [r7, #13]
 8008060:	3303      	adds	r3, #3
 8008062:	4a12      	ldr	r2, [pc, #72]	; (80080ac <Processing_Received_Data+0x74>)
 8008064:	5cd3      	ldrb	r3, [r2, r3]
 8008066:	3b30      	subs	r3, #48	; 0x30
 8008068:	73fb      	strb	r3, [r7, #15]
			relayStatus = Sim3gDataProcessingBuffer[2 + lentopic + 2] - 0x30;
 800806a:	7b7b      	ldrb	r3, [r7, #13]
 800806c:	3304      	adds	r3, #4
 800806e:	4a0f      	ldr	r2, [pc, #60]	; (80080ac <Processing_Received_Data+0x74>)
 8008070:	5cd3      	ldrb	r3, [r2, r3]
 8008072:	3b30      	subs	r3, #48	; 0x30
 8008074:	73bb      	strb	r3, [r7, #14]
	}
	if(relayStatus == SET){
 8008076:	7bbb      	ldrb	r3, [r7, #14]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d109      	bne.n	8008090 <Processing_Received_Data+0x58>
		Set_Relay(relayIndex);
 800807c:	7bfb      	ldrb	r3, [r7, #15]
 800807e:	4618      	mov	r0, r3
 8008080:	f7ff fbba 	bl	80077f8 <Set_Relay>
		Set_Limit_Energy(relayIndex, 1000000);
 8008084:	7bfb      	ldrb	r3, [r7, #15]
 8008086:	490a      	ldr	r1, [pc, #40]	; (80080b0 <Processing_Received_Data+0x78>)
 8008088:	4618      	mov	r0, r3
 800808a:	f7ff f92d 	bl	80072e8 <Set_Limit_Energy>
	} else {
		Set_Limit_Energy(relayIndex, 0);
		Reset_Relay(relayIndex);
	}
}
 800808e:	e008      	b.n	80080a2 <Processing_Received_Data+0x6a>
		Set_Limit_Energy(relayIndex, 0);
 8008090:	7bfb      	ldrb	r3, [r7, #15]
 8008092:	2100      	movs	r1, #0
 8008094:	4618      	mov	r0, r3
 8008096:	f7ff f927 	bl	80072e8 <Set_Limit_Energy>
		Reset_Relay(relayIndex);
 800809a:	7bfb      	ldrb	r3, [r7, #15]
 800809c:	4618      	mov	r0, r3
 800809e:	f7ff fbed 	bl	800787c <Reset_Relay>
}
 80080a2:	bf00      	nop
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	20002a50 	.word	0x20002a50
 80080b0:	000f4240 	.word	0x000f4240

080080b4 <FSM_Process_Data_Received_From_Sim3g>:

void FSM_Process_Data_Received_From_Sim3g(void){
 80080b4:	b580      	push	{r7, lr}
 80080b6:	af00      	add	r7, sp, #0
	static uint8_t readCharacter = 0;
	static uint8_t preReadCharacter = 0;

	switch(processDataState){
 80080b8:	4b79      	ldr	r3, [pc, #484]	; (80082a0 <FSM_Process_Data_Received_From_Sim3g+0x1ec>)
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2b04      	cmp	r3, #4
 80080be:	f200 80e5 	bhi.w	800828c <FSM_Process_Data_Received_From_Sim3g+0x1d8>
 80080c2:	a201      	add	r2, pc, #4	; (adr r2, 80080c8 <FSM_Process_Data_Received_From_Sim3g+0x14>)
 80080c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c8:	080080dd 	.word	0x080080dd
 80080cc:	080080fb 	.word	0x080080fb
 80080d0:	08008179 	.word	0x08008179
 80080d4:	08008187 	.word	0x08008187
 80080d8:	08008211 	.word	0x08008211
	case CHECK_DATA_AVAILABLE_STATE:
		if(Uart1_Received_Buffer_Available()){
 80080dc:	f001 fa8e 	bl	80095fc <Uart1_Received_Buffer_Available>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 80d4 	beq.w	8008290 <FSM_Process_Data_Received_From_Sim3g+0x1dc>
			Clear_Sim3gDataProcessingBuffer();
 80080e8:	f000 f904 	bl	80082f4 <Clear_Sim3gDataProcessingBuffer>
			processDataState = DETECT_SPECIAL_CHARACTER;
 80080ec:	4b6c      	ldr	r3, [pc, #432]	; (80082a0 <FSM_Process_Data_Received_From_Sim3g+0x1ec>)
 80080ee:	2201      	movs	r2, #1
 80080f0:	701a      	strb	r2, [r3, #0]
			isReceiveDataFromServer = SET;
 80080f2:	4b6c      	ldr	r3, [pc, #432]	; (80082a4 <FSM_Process_Data_Received_From_Sim3g+0x1f0>)
 80080f4:	2201      	movs	r2, #1
 80080f6:	701a      	strb	r2, [r3, #0]
		}
		break;
 80080f8:	e0ca      	b.n	8008290 <FSM_Process_Data_Received_From_Sim3g+0x1dc>
	case DETECT_SPECIAL_CHARACTER:
		if(Uart1_Received_Buffer_Available()){
 80080fa:	f001 fa7f 	bl	80095fc <Uart1_Received_Buffer_Available>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	f000 80c7 	beq.w	8008294 <FSM_Process_Data_Received_From_Sim3g+0x1e0>

			preReadCharacter = readCharacter;
 8008106:	4b68      	ldr	r3, [pc, #416]	; (80082a8 <FSM_Process_Data_Received_From_Sim3g+0x1f4>)
 8008108:	781a      	ldrb	r2, [r3, #0]
 800810a:	4b68      	ldr	r3, [pc, #416]	; (80082ac <FSM_Process_Data_Received_From_Sim3g+0x1f8>)
 800810c:	701a      	strb	r2, [r3, #0]
			readCharacter = Uart1_Read_Received_Buffer();
 800810e:	f001 fa89 	bl	8009624 <Uart1_Read_Received_Buffer>
 8008112:	4603      	mov	r3, r0
 8008114:	461a      	mov	r2, r3
 8008116:	4b64      	ldr	r3, [pc, #400]	; (80082a8 <FSM_Process_Data_Received_From_Sim3g+0x1f4>)
 8008118:	701a      	strb	r2, [r3, #0]
			if(readCharacter == '>'){
 800811a:	4b63      	ldr	r3, [pc, #396]	; (80082a8 <FSM_Process_Data_Received_From_Sim3g+0x1f4>)
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	2b3e      	cmp	r3, #62	; 0x3e
 8008120:	d103      	bne.n	800812a <FSM_Process_Data_Received_From_Sim3g+0x76>
				processDataState = PREPARE_FOR_SENDING_DATA;
 8008122:	4b5f      	ldr	r3, [pc, #380]	; (80082a0 <FSM_Process_Data_Received_From_Sim3g+0x1ec>)
 8008124:	2202      	movs	r2, #2
 8008126:	701a      	strb	r2, [r3, #0]
			} else {
				Sim3gDataProcessingBuffer[sim3gDataProcessingBufferIndex++] = readCharacter;
			}
		}

		break;
 8008128:	e0b4      	b.n	8008294 <FSM_Process_Data_Received_From_Sim3g+0x1e0>
			}else if(preReadCharacter == '\r' && readCharacter == '\n'){
 800812a:	4b60      	ldr	r3, [pc, #384]	; (80082ac <FSM_Process_Data_Received_From_Sim3g+0x1f8>)
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	2b0d      	cmp	r3, #13
 8008130:	d107      	bne.n	8008142 <FSM_Process_Data_Received_From_Sim3g+0x8e>
 8008132:	4b5d      	ldr	r3, [pc, #372]	; (80082a8 <FSM_Process_Data_Received_From_Sim3g+0x1f4>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	2b0a      	cmp	r3, #10
 8008138:	d103      	bne.n	8008142 <FSM_Process_Data_Received_From_Sim3g+0x8e>
				processDataState = PREPARE_PROCESSING_RECEIVED_DATA;
 800813a:	4b59      	ldr	r3, [pc, #356]	; (80082a0 <FSM_Process_Data_Received_From_Sim3g+0x1ec>)
 800813c:	2203      	movs	r2, #3
 800813e:	701a      	strb	r2, [r3, #0]
 8008140:	e019      	b.n	8008176 <FSM_Process_Data_Received_From_Sim3g+0xc2>
			} else if(preReadCharacter == SUBSCRIBE_RECEIVE_MESSAGE_TYPE && readCharacter == LEN_SUBSCRIBE_RECEIVE_MESSAGE_TYPE){
 8008142:	4b5a      	ldr	r3, [pc, #360]	; (80082ac <FSM_Process_Data_Received_From_Sim3g+0x1f8>)
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	2b30      	cmp	r3, #48	; 0x30
 8008148:	d109      	bne.n	800815e <FSM_Process_Data_Received_From_Sim3g+0xaa>
 800814a:	4b57      	ldr	r3, [pc, #348]	; (80082a8 <FSM_Process_Data_Received_From_Sim3g+0x1f4>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	2b10      	cmp	r3, #16
 8008150:	d105      	bne.n	800815e <FSM_Process_Data_Received_From_Sim3g+0xaa>
				processDataState = PROCESSING_RECEIVED_DATA;
 8008152:	4b53      	ldr	r3, [pc, #332]	; (80082a0 <FSM_Process_Data_Received_From_Sim3g+0x1ec>)
 8008154:	2204      	movs	r2, #4
 8008156:	701a      	strb	r2, [r3, #0]
				Clear_Sim3gDataProcessingBuffer();
 8008158:	f000 f8cc 	bl	80082f4 <Clear_Sim3gDataProcessingBuffer>
 800815c:	e00b      	b.n	8008176 <FSM_Process_Data_Received_From_Sim3g+0xc2>
				Sim3gDataProcessingBuffer[sim3gDataProcessingBufferIndex++] = readCharacter;
 800815e:	4b54      	ldr	r3, [pc, #336]	; (80082b0 <FSM_Process_Data_Received_From_Sim3g+0x1fc>)
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	1c5a      	adds	r2, r3, #1
 8008164:	b2d1      	uxtb	r1, r2
 8008166:	4a52      	ldr	r2, [pc, #328]	; (80082b0 <FSM_Process_Data_Received_From_Sim3g+0x1fc>)
 8008168:	7011      	strb	r1, [r2, #0]
 800816a:	461a      	mov	r2, r3
 800816c:	4b4e      	ldr	r3, [pc, #312]	; (80082a8 <FSM_Process_Data_Received_From_Sim3g+0x1f4>)
 800816e:	7819      	ldrb	r1, [r3, #0]
 8008170:	4b50      	ldr	r3, [pc, #320]	; (80082b4 <FSM_Process_Data_Received_From_Sim3g+0x200>)
 8008172:	5499      	strb	r1, [r3, r2]
		break;
 8008174:	e08e      	b.n	8008294 <FSM_Process_Data_Received_From_Sim3g+0x1e0>
 8008176:	e08d      	b.n	8008294 <FSM_Process_Data_Received_From_Sim3g+0x1e0>
	case PREPARE_FOR_SENDING_DATA:
		isReadyToSendDataToServer = SET;
 8008178:	4b4f      	ldr	r3, [pc, #316]	; (80082b8 <FSM_Process_Data_Received_From_Sim3g+0x204>)
 800817a:	2201      	movs	r2, #1
 800817c:	701a      	strb	r2, [r3, #0]
		processDataState = CHECK_DATA_AVAILABLE_STATE;
 800817e:	4b48      	ldr	r3, [pc, #288]	; (80082a0 <FSM_Process_Data_Received_From_Sim3g+0x1ec>)
 8008180:	2200      	movs	r2, #0
 8008182:	701a      	strb	r2, [r3, #0]
		break;
 8008184:	e089      	b.n	800829a <FSM_Process_Data_Received_From_Sim3g+0x1e6>
	case PREPARE_PROCESSING_RECEIVED_DATA:
//		UART3_SendToHost((uint8_t*)"a");
//		UART3_SendToHost((uint8_t*)Sim3gDataProcessingBuffer);
		if(isReceivedData((uint8_t *)PB_DONE)){
 8008186:	484d      	ldr	r0, [pc, #308]	; (80082bc <FSM_Process_Data_Received_From_Sim3g+0x208>)
 8008188:	f7ff ff30 	bl	8007fec <isReceivedData>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <FSM_Process_Data_Received_From_Sim3g+0xe6>
			isPBDoneFlag = SET;
 8008192:	4b4b      	ldr	r3, [pc, #300]	; (80082c0 <FSM_Process_Data_Received_From_Sim3g+0x20c>)
 8008194:	2201      	movs	r2, #1
 8008196:	701a      	strb	r2, [r3, #0]
 8008198:	e036      	b.n	8008208 <FSM_Process_Data_Received_From_Sim3g+0x154>
		} else if(isReceivedData((uint8_t *)OK)){
 800819a:	484a      	ldr	r0, [pc, #296]	; (80082c4 <FSM_Process_Data_Received_From_Sim3g+0x210>)
 800819c:	f7ff ff26 	bl	8007fec <isReceivedData>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d003      	beq.n	80081ae <FSM_Process_Data_Received_From_Sim3g+0xfa>
			isOKFlag = SET;
 80081a6:	4b48      	ldr	r3, [pc, #288]	; (80082c8 <FSM_Process_Data_Received_From_Sim3g+0x214>)
 80081a8:	2201      	movs	r2, #1
 80081aa:	701a      	strb	r2, [r3, #0]
 80081ac:	e02c      	b.n	8008208 <FSM_Process_Data_Received_From_Sim3g+0x154>
		} else if(isReceivedData((uint8_t *)ERROR_1)){
 80081ae:	4847      	ldr	r0, [pc, #284]	; (80082cc <FSM_Process_Data_Received_From_Sim3g+0x218>)
 80081b0:	f7ff ff1c 	bl	8007fec <isReceivedData>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d006      	beq.n	80081c8 <FSM_Process_Data_Received_From_Sim3g+0x114>
			isErrorFlag = SET;
 80081ba:	4b45      	ldr	r3, [pc, #276]	; (80082d0 <FSM_Process_Data_Received_From_Sim3g+0x21c>)
 80081bc:	2201      	movs	r2, #1
 80081be:	701a      	strb	r2, [r3, #0]
			UART3_SendToHost((uint8_t*)"aNg");
 80081c0:	4844      	ldr	r0, [pc, #272]	; (80082d4 <FSM_Process_Data_Received_From_Sim3g+0x220>)
 80081c2:	f001 f983 	bl	80094cc <UART3_SendToHost>
 80081c6:	e01f      	b.n	8008208 <FSM_Process_Data_Received_From_Sim3g+0x154>
		} else if(isReceivedData((uint8_t *)IP_CLOSE)){
 80081c8:	4843      	ldr	r0, [pc, #268]	; (80082d8 <FSM_Process_Data_Received_From_Sim3g+0x224>)
 80081ca:	f7ff ff0f 	bl	8007fec <isReceivedData>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d003      	beq.n	80081dc <FSM_Process_Data_Received_From_Sim3g+0x128>
			isIPCloseFlag = SET;
 80081d4:	4b41      	ldr	r3, [pc, #260]	; (80082dc <FSM_Process_Data_Received_From_Sim3g+0x228>)
 80081d6:	2201      	movs	r2, #1
 80081d8:	701a      	strb	r2, [r3, #0]
 80081da:	e015      	b.n	8008208 <FSM_Process_Data_Received_From_Sim3g+0x154>
		} else if(isReceivedData((uint8_t *)RECV_FROM)){
 80081dc:	4840      	ldr	r0, [pc, #256]	; (80082e0 <FSM_Process_Data_Received_From_Sim3g+0x22c>)
 80081de:	f7ff ff05 	bl	8007fec <isReceivedData>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d006      	beq.n	80081f6 <FSM_Process_Data_Received_From_Sim3g+0x142>
			isSendOKFlag = RESET;
 80081e8:	4b3e      	ldr	r3, [pc, #248]	; (80082e4 <FSM_Process_Data_Received_From_Sim3g+0x230>)
 80081ea:	2200      	movs	r2, #0
 80081ec:	701a      	strb	r2, [r3, #0]
			isRecvFromFlag = SET;
 80081ee:	4b3e      	ldr	r3, [pc, #248]	; (80082e8 <FSM_Process_Data_Received_From_Sim3g+0x234>)
 80081f0:	2201      	movs	r2, #1
 80081f2:	701a      	strb	r2, [r3, #0]
 80081f4:	e008      	b.n	8008208 <FSM_Process_Data_Received_From_Sim3g+0x154>
		} else if(isReceivedData((uint8_t *)Send_ok)){
 80081f6:	483d      	ldr	r0, [pc, #244]	; (80082ec <FSM_Process_Data_Received_From_Sim3g+0x238>)
 80081f8:	f7ff fef8 	bl	8007fec <isReceivedData>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d002      	beq.n	8008208 <FSM_Process_Data_Received_From_Sim3g+0x154>
			isSendOKFlag = SET;
 8008202:	4b38      	ldr	r3, [pc, #224]	; (80082e4 <FSM_Process_Data_Received_From_Sim3g+0x230>)
 8008204:	2201      	movs	r2, #1
 8008206:	701a      	strb	r2, [r3, #0]
		}
		processDataState = CHECK_DATA_AVAILABLE_STATE;
 8008208:	4b25      	ldr	r3, [pc, #148]	; (80082a0 <FSM_Process_Data_Received_From_Sim3g+0x1ec>)
 800820a:	2200      	movs	r2, #0
 800820c:	701a      	strb	r2, [r3, #0]
		break;
 800820e:	e044      	b.n	800829a <FSM_Process_Data_Received_From_Sim3g+0x1e6>
	case PROCESSING_RECEIVED_DATA:
		if(Uart1_Received_Buffer_Available()){
 8008210:	f001 f9f4 	bl	80095fc <Uart1_Received_Buffer_Available>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d03e      	beq.n	8008298 <FSM_Process_Data_Received_From_Sim3g+0x1e4>
			preReadCharacter = readCharacter;
 800821a:	4b23      	ldr	r3, [pc, #140]	; (80082a8 <FSM_Process_Data_Received_From_Sim3g+0x1f4>)
 800821c:	781a      	ldrb	r2, [r3, #0]
 800821e:	4b23      	ldr	r3, [pc, #140]	; (80082ac <FSM_Process_Data_Received_From_Sim3g+0x1f8>)
 8008220:	701a      	strb	r2, [r3, #0]
			readCharacter = Uart1_Read_Received_Buffer();
 8008222:	f001 f9ff 	bl	8009624 <Uart1_Read_Received_Buffer>
 8008226:	4603      	mov	r3, r0
 8008228:	461a      	mov	r2, r3
 800822a:	4b1f      	ldr	r3, [pc, #124]	; (80082a8 <FSM_Process_Data_Received_From_Sim3g+0x1f4>)
 800822c:	701a      	strb	r2, [r3, #0]
			if(preReadCharacter == '\r' && readCharacter == '\n'){
 800822e:	4b1f      	ldr	r3, [pc, #124]	; (80082ac <FSM_Process_Data_Received_From_Sim3g+0x1f8>)
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	2b0d      	cmp	r3, #13
 8008234:	d10b      	bne.n	800824e <FSM_Process_Data_Received_From_Sim3g+0x19a>
 8008236:	4b1c      	ldr	r3, [pc, #112]	; (80082a8 <FSM_Process_Data_Received_From_Sim3g+0x1f4>)
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	2b0a      	cmp	r3, #10
 800823c:	d107      	bne.n	800824e <FSM_Process_Data_Received_From_Sim3g+0x19a>
				Processing_Received_Data((uint8_t*)SUBSCRIBE_TOPIC_1, BOX_ID);
 800823e:	2101      	movs	r1, #1
 8008240:	482b      	ldr	r0, [pc, #172]	; (80082f0 <FSM_Process_Data_Received_From_Sim3g+0x23c>)
 8008242:	f7ff fef9 	bl	8008038 <Processing_Received_Data>
				processDataState = CHECK_DATA_AVAILABLE_STATE;
 8008246:	4b16      	ldr	r3, [pc, #88]	; (80082a0 <FSM_Process_Data_Received_From_Sim3g+0x1ec>)
 8008248:	2200      	movs	r2, #0
 800824a:	701a      	strb	r2, [r3, #0]
 800824c:	e01d      	b.n	800828a <FSM_Process_Data_Received_From_Sim3g+0x1d6>
			} else if(preReadCharacter == SUBSCRIBE_RECEIVE_MESSAGE_TYPE && readCharacter == LEN_SUBSCRIBE_RECEIVE_MESSAGE_TYPE){
 800824e:	4b17      	ldr	r3, [pc, #92]	; (80082ac <FSM_Process_Data_Received_From_Sim3g+0x1f8>)
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	2b30      	cmp	r3, #48	; 0x30
 8008254:	d10d      	bne.n	8008272 <FSM_Process_Data_Received_From_Sim3g+0x1be>
 8008256:	4b14      	ldr	r3, [pc, #80]	; (80082a8 <FSM_Process_Data_Received_From_Sim3g+0x1f4>)
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	2b10      	cmp	r3, #16
 800825c:	d109      	bne.n	8008272 <FSM_Process_Data_Received_From_Sim3g+0x1be>
				processDataState = PROCESSING_RECEIVED_DATA;
 800825e:	4b10      	ldr	r3, [pc, #64]	; (80082a0 <FSM_Process_Data_Received_From_Sim3g+0x1ec>)
 8008260:	2204      	movs	r2, #4
 8008262:	701a      	strb	r2, [r3, #0]
				Processing_Received_Data((uint8_t*)SUBSCRIBE_TOPIC_1, BOX_ID);
 8008264:	2101      	movs	r1, #1
 8008266:	4822      	ldr	r0, [pc, #136]	; (80082f0 <FSM_Process_Data_Received_From_Sim3g+0x23c>)
 8008268:	f7ff fee6 	bl	8008038 <Processing_Received_Data>
				Clear_Sim3gDataProcessingBuffer();
 800826c:	f000 f842 	bl	80082f4 <Clear_Sim3gDataProcessingBuffer>
 8008270:	e00b      	b.n	800828a <FSM_Process_Data_Received_From_Sim3g+0x1d6>
			} else {
				Sim3gDataProcessingBuffer[sim3gDataProcessingBufferIndex++] = readCharacter;
 8008272:	4b0f      	ldr	r3, [pc, #60]	; (80082b0 <FSM_Process_Data_Received_From_Sim3g+0x1fc>)
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	1c5a      	adds	r2, r3, #1
 8008278:	b2d1      	uxtb	r1, r2
 800827a:	4a0d      	ldr	r2, [pc, #52]	; (80082b0 <FSM_Process_Data_Received_From_Sim3g+0x1fc>)
 800827c:	7011      	strb	r1, [r2, #0]
 800827e:	461a      	mov	r2, r3
 8008280:	4b09      	ldr	r3, [pc, #36]	; (80082a8 <FSM_Process_Data_Received_From_Sim3g+0x1f4>)
 8008282:	7819      	ldrb	r1, [r3, #0]
 8008284:	4b0b      	ldr	r3, [pc, #44]	; (80082b4 <FSM_Process_Data_Received_From_Sim3g+0x200>)
 8008286:	5499      	strb	r1, [r3, r2]
			}
		}
		break;
 8008288:	e006      	b.n	8008298 <FSM_Process_Data_Received_From_Sim3g+0x1e4>
 800828a:	e005      	b.n	8008298 <FSM_Process_Data_Received_From_Sim3g+0x1e4>
	default:
		break;
 800828c:	bf00      	nop
 800828e:	e004      	b.n	800829a <FSM_Process_Data_Received_From_Sim3g+0x1e6>
		break;
 8008290:	bf00      	nop
 8008292:	e002      	b.n	800829a <FSM_Process_Data_Received_From_Sim3g+0x1e6>
		break;
 8008294:	bf00      	nop
 8008296:	e000      	b.n	800829a <FSM_Process_Data_Received_From_Sim3g+0x1e6>
		break;
 8008298:	bf00      	nop
	}
}
 800829a:	bf00      	nop
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	20000213 	.word	0x20000213
 80082a4:	2000020f 	.word	0x2000020f
 80082a8:	20000216 	.word	0x20000216
 80082ac:	20000217 	.word	0x20000217
 80082b0:	20000212 	.word	0x20000212
 80082b4:	20002a50 	.word	0x20002a50
 80082b8:	2000020d 	.word	0x2000020d
 80082bc:	0800aca8 	.word	0x0800aca8
 80082c0:	20000208 	.word	0x20000208
 80082c4:	0800acb4 	.word	0x0800acb4
 80082c8:	20000209 	.word	0x20000209
 80082cc:	0800acb8 	.word	0x0800acb8
 80082d0:	2000020a 	.word	0x2000020a
 80082d4:	0800ac90 	.word	0x0800ac90
 80082d8:	0800acd8 	.word	0x0800acd8
 80082dc:	2000020b 	.word	0x2000020b
 80082e0:	0800accc 	.word	0x0800accc
 80082e4:	2000020e 	.word	0x2000020e
 80082e8:	2000020c 	.word	0x2000020c
 80082ec:	0800acc0 	.word	0x0800acc0
 80082f0:	0800ad8c 	.word	0x0800ad8c

080082f4 <Clear_Sim3gDataProcessingBuffer>:

void Clear_Sim3gDataProcessingBuffer(void){
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i = 0; i < RXBUFFERSIZE; i++){
 80082fa:	2300      	movs	r3, #0
 80082fc:	71fb      	strb	r3, [r7, #7]
 80082fe:	e006      	b.n	800830e <Clear_Sim3gDataProcessingBuffer+0x1a>
		Sim3gDataProcessingBuffer[i] = 0;
 8008300:	79fb      	ldrb	r3, [r7, #7]
 8008302:	4a08      	ldr	r2, [pc, #32]	; (8008324 <Clear_Sim3gDataProcessingBuffer+0x30>)
 8008304:	2100      	movs	r1, #0
 8008306:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < RXBUFFERSIZE; i++){
 8008308:	79fb      	ldrb	r3, [r7, #7]
 800830a:	3301      	adds	r3, #1
 800830c:	71fb      	strb	r3, [r7, #7]
 800830e:	79fb      	ldrb	r3, [r7, #7]
 8008310:	2bf9      	cmp	r3, #249	; 0xf9
 8008312:	d9f5      	bls.n	8008300 <Clear_Sim3gDataProcessingBuffer+0xc>
	}
	sim3gDataProcessingBufferIndex = 0;
 8008314:	4b04      	ldr	r3, [pc, #16]	; (8008328 <Clear_Sim3gDataProcessingBuffer+0x34>)
 8008316:	2200      	movs	r2, #0
 8008318:	701a      	strb	r2, [r3, #0]
}
 800831a:	bf00      	nop
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	bc80      	pop	{r7}
 8008322:	4770      	bx	lr
 8008324:	20002a50 	.word	0x20002a50
 8008328:	20000212 	.word	0x20000212

0800832c <MQTT_Run>:

};

MQTT_STATE mqttState = MQTT_OPEN_STATE;
MQTT_STATE pre_mqttState = MAX_MQTT_NUMBER_STATES;
uint8_t MQTT_Run(void){
 800832c:	b580      	push	{r7, lr}
 800832e:	af00      	add	r7, sp, #0
//	MQTT_State_Display();
	if(mqttState < MAX_MQTT_NUMBER_STATES){
 8008330:	4b07      	ldr	r3, [pc, #28]	; (8008350 <MQTT_Run+0x24>)
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	2b10      	cmp	r3, #16
 8008336:	d808      	bhi.n	800834a <MQTT_Run+0x1e>
		(*MQTT_State_Machine[mqttState].func)();
 8008338:	4b05      	ldr	r3, [pc, #20]	; (8008350 <MQTT_Run+0x24>)
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	4a05      	ldr	r2, [pc, #20]	; (8008354 <MQTT_Run+0x28>)
 800833e:	00db      	lsls	r3, r3, #3
 8008340:	4413      	add	r3, r2
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	4798      	blx	r3
		return 0;
 8008346:	2300      	movs	r3, #0
 8008348:	e000      	b.n	800834c <MQTT_Run+0x20>
	} else {
		return 1;
 800834a:	2301      	movs	r3, #1
	}
}
 800834c:	4618      	mov	r0, r3
 800834e:	bd80      	pop	{r7, pc}
 8008350:	2000021f 	.word	0x2000021f
 8008354:	200000d0 	.word	0x200000d0

08008358 <Mqtt_Clear_Timeout_Flag>:
	}

}


void Mqtt_Clear_Timeout_Flag(void){
 8008358:	b480      	push	{r7}
 800835a:	af00      	add	r7, sp, #0
	mqtt_TimeoutFlag = 0;
 800835c:	4b03      	ldr	r3, [pc, #12]	; (800836c <Mqtt_Clear_Timeout_Flag+0x14>)
 800835e:	2200      	movs	r2, #0
 8008360:	701a      	strb	r2, [r3, #0]
}
 8008362:	bf00      	nop
 8008364:	46bd      	mov	sp, r7
 8008366:	bc80      	pop	{r7}
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	2000021d 	.word	0x2000021d

08008370 <Mqtt_Command_Timeout>:
void Mqtt_Command_Timeout(void){
 8008370:	b480      	push	{r7}
 8008372:	af00      	add	r7, sp, #0
	mqtt_TimeoutFlag = 1;
 8008374:	4b03      	ldr	r3, [pc, #12]	; (8008384 <Mqtt_Command_Timeout+0x14>)
 8008376:	2201      	movs	r2, #1
 8008378:	701a      	strb	r2, [r3, #0]
}
 800837a:	bf00      	nop
 800837c:	46bd      	mov	sp, r7
 800837e:	bc80      	pop	{r7}
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	2000021d 	.word	0x2000021d

08008388 <is_Mqtt_Command_Timeout>:
uint8_t is_Mqtt_Command_Timeout(void){
 8008388:	b480      	push	{r7}
 800838a:	af00      	add	r7, sp, #0
	return mqtt_TimeoutFlag;
 800838c:	4b02      	ldr	r3, [pc, #8]	; (8008398 <is_Mqtt_Command_Timeout+0x10>)
 800838e:	781b      	ldrb	r3, [r3, #0]
}
 8008390:	4618      	mov	r0, r3
 8008392:	46bd      	mov	sp, r7
 8008394:	bc80      	pop	{r7}
 8008396:	4770      	bx	lr
 8008398:	2000021d 	.word	0x2000021d

0800839c <Mqtt_Clear_Subscribe_Timeout_Flag>:

void Mqtt_Clear_Subscribe_Timeout_Flag(void){
 800839c:	b480      	push	{r7}
 800839e:	af00      	add	r7, sp, #0
	mqtt_Subscribe_TimeoutFlag = 0;
 80083a0:	4b03      	ldr	r3, [pc, #12]	; (80083b0 <Mqtt_Clear_Subscribe_Timeout_Flag+0x14>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	701a      	strb	r2, [r3, #0]
}
 80083a6:	bf00      	nop
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bc80      	pop	{r7}
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	2000021e 	.word	0x2000021e

080083b4 <Mqtt_Subscribe_Timeout>:
void Mqtt_Subscribe_Timeout(void){
 80083b4:	b480      	push	{r7}
 80083b6:	af00      	add	r7, sp, #0
	mqtt_Subscribe_TimeoutFlag = 1;
 80083b8:	4b03      	ldr	r3, [pc, #12]	; (80083c8 <Mqtt_Subscribe_Timeout+0x14>)
 80083ba:	2201      	movs	r2, #1
 80083bc:	701a      	strb	r2, [r3, #0]
}
 80083be:	bf00      	nop
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bc80      	pop	{r7}
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	2000021e 	.word	0x2000021e

080083cc <is_Mqtt_Subscribe_Timeout>:
uint8_t is_Mqtt_Subscribe_Timeout(void){
 80083cc:	b480      	push	{r7}
 80083ce:	af00      	add	r7, sp, #0
	return mqtt_Subscribe_TimeoutFlag;
 80083d0:	4b02      	ldr	r3, [pc, #8]	; (80083dc <is_Mqtt_Subscribe_Timeout+0x10>)
 80083d2:	781b      	ldrb	r3, [r3, #0]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bc80      	pop	{r7}
 80083da:	4770      	bx	lr
 80083dc:	2000021e 	.word	0x2000021e

080083e0 <Set_Mqtt_State>:

void Set_Mqtt_State(MQTT_STATE newState){
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	4603      	mov	r3, r0
 80083e8:	71fb      	strb	r3, [r7, #7]
	mqttState = newState;
 80083ea:	4a04      	ldr	r2, [pc, #16]	; (80083fc <Set_Mqtt_State+0x1c>)
 80083ec:	79fb      	ldrb	r3, [r7, #7]
 80083ee:	7013      	strb	r3, [r2, #0]
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bc80      	pop	{r7}
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	2000021f 	.word	0x2000021f

08008400 <Get_Mqtt_State>:
MQTT_STATE Get_Mqtt_State(void){
 8008400:	b480      	push	{r7}
 8008402:	af00      	add	r7, sp, #0
	return mqttState;
 8008404:	4b02      	ldr	r3, [pc, #8]	; (8008410 <Get_Mqtt_State+0x10>)
 8008406:	781b      	ldrb	r3, [r3, #0]
}
 8008408:	4618      	mov	r0, r3
 800840a:	46bd      	mov	sp, r7
 800840c:	bc80      	pop	{r7}
 800840e:	4770      	bx	lr
 8008410:	2000021f 	.word	0x2000021f

08008414 <Clear_Mqtt_Message_Buffer>:

void Clear_Mqtt_Message_Buffer(void){
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
	uint8_t idx;
	for(idx = 0; idx < MQTT_MESSAGE_BUFFER_LENGTH; idx ++){
 800841a:	2300      	movs	r3, #0
 800841c:	71fb      	strb	r3, [r7, #7]
 800841e:	e006      	b.n	800842e <Clear_Mqtt_Message_Buffer+0x1a>
		mqttMessage[idx] = 0;
 8008420:	79fb      	ldrb	r3, [r7, #7]
 8008422:	4a09      	ldr	r2, [pc, #36]	; (8008448 <Clear_Mqtt_Message_Buffer+0x34>)
 8008424:	2100      	movs	r1, #0
 8008426:	54d1      	strb	r1, [r2, r3]
	for(idx = 0; idx < MQTT_MESSAGE_BUFFER_LENGTH; idx ++){
 8008428:	79fb      	ldrb	r3, [r7, #7]
 800842a:	3301      	adds	r3, #1
 800842c:	71fb      	strb	r3, [r7, #7]
 800842e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008432:	2b00      	cmp	r3, #0
 8008434:	daf4      	bge.n	8008420 <Clear_Mqtt_Message_Buffer+0xc>
 	}
	mqttMessageIndex = 0;
 8008436:	4b05      	ldr	r3, [pc, #20]	; (800844c <Clear_Mqtt_Message_Buffer+0x38>)
 8008438:	2200      	movs	r2, #0
 800843a:	701a      	strb	r2, [r3, #0]
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	bc80      	pop	{r7}
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	20002be4 	.word	0x20002be4
 800844c:	2000021a 	.word	0x2000021a

08008450 <SM_Send_Data>:
void SM_Send_Data(uint8_t mesageLength){
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	4603      	mov	r3, r0
 8008458:	71fb      	strb	r3, [r7, #7]

	commandBufferIndex = 0;
 800845a:	4b8e      	ldr	r3, [pc, #568]	; (8008694 <SM_Send_Data+0x244>)
 800845c:	2200      	movs	r2, #0
 800845e:	701a      	strb	r2, [r3, #0]
	uint8_t tempMessageLength = mesageLength;
 8008460:	79fb      	ldrb	r3, [r7, #7]
 8008462:	73fb      	strb	r3, [r7, #15]
	commandBuffer[commandBufferIndex++] = 'A';
 8008464:	4b8b      	ldr	r3, [pc, #556]	; (8008694 <SM_Send_Data+0x244>)
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	1c5a      	adds	r2, r3, #1
 800846a:	b2d1      	uxtb	r1, r2
 800846c:	4a89      	ldr	r2, [pc, #548]	; (8008694 <SM_Send_Data+0x244>)
 800846e:	7011      	strb	r1, [r2, #0]
 8008470:	461a      	mov	r2, r3
 8008472:	4b89      	ldr	r3, [pc, #548]	; (8008698 <SM_Send_Data+0x248>)
 8008474:	2141      	movs	r1, #65	; 0x41
 8008476:	5499      	strb	r1, [r3, r2]
	commandBuffer[commandBufferIndex++] = 'T';
 8008478:	4b86      	ldr	r3, [pc, #536]	; (8008694 <SM_Send_Data+0x244>)
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	1c5a      	adds	r2, r3, #1
 800847e:	b2d1      	uxtb	r1, r2
 8008480:	4a84      	ldr	r2, [pc, #528]	; (8008694 <SM_Send_Data+0x244>)
 8008482:	7011      	strb	r1, [r2, #0]
 8008484:	461a      	mov	r2, r3
 8008486:	4b84      	ldr	r3, [pc, #528]	; (8008698 <SM_Send_Data+0x248>)
 8008488:	2154      	movs	r1, #84	; 0x54
 800848a:	5499      	strb	r1, [r3, r2]
	commandBuffer[commandBufferIndex++] = '+';
 800848c:	4b81      	ldr	r3, [pc, #516]	; (8008694 <SM_Send_Data+0x244>)
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	1c5a      	adds	r2, r3, #1
 8008492:	b2d1      	uxtb	r1, r2
 8008494:	4a7f      	ldr	r2, [pc, #508]	; (8008694 <SM_Send_Data+0x244>)
 8008496:	7011      	strb	r1, [r2, #0]
 8008498:	461a      	mov	r2, r3
 800849a:	4b7f      	ldr	r3, [pc, #508]	; (8008698 <SM_Send_Data+0x248>)
 800849c:	212b      	movs	r1, #43	; 0x2b
 800849e:	5499      	strb	r1, [r3, r2]
	commandBuffer[commandBufferIndex++] = 'C';
 80084a0:	4b7c      	ldr	r3, [pc, #496]	; (8008694 <SM_Send_Data+0x244>)
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	1c5a      	adds	r2, r3, #1
 80084a6:	b2d1      	uxtb	r1, r2
 80084a8:	4a7a      	ldr	r2, [pc, #488]	; (8008694 <SM_Send_Data+0x244>)
 80084aa:	7011      	strb	r1, [r2, #0]
 80084ac:	461a      	mov	r2, r3
 80084ae:	4b7a      	ldr	r3, [pc, #488]	; (8008698 <SM_Send_Data+0x248>)
 80084b0:	2143      	movs	r1, #67	; 0x43
 80084b2:	5499      	strb	r1, [r3, r2]
	commandBuffer[commandBufferIndex++] = 'I';
 80084b4:	4b77      	ldr	r3, [pc, #476]	; (8008694 <SM_Send_Data+0x244>)
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	1c5a      	adds	r2, r3, #1
 80084ba:	b2d1      	uxtb	r1, r2
 80084bc:	4a75      	ldr	r2, [pc, #468]	; (8008694 <SM_Send_Data+0x244>)
 80084be:	7011      	strb	r1, [r2, #0]
 80084c0:	461a      	mov	r2, r3
 80084c2:	4b75      	ldr	r3, [pc, #468]	; (8008698 <SM_Send_Data+0x248>)
 80084c4:	2149      	movs	r1, #73	; 0x49
 80084c6:	5499      	strb	r1, [r3, r2]
	commandBuffer[commandBufferIndex++] = 'P';
 80084c8:	4b72      	ldr	r3, [pc, #456]	; (8008694 <SM_Send_Data+0x244>)
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	1c5a      	adds	r2, r3, #1
 80084ce:	b2d1      	uxtb	r1, r2
 80084d0:	4a70      	ldr	r2, [pc, #448]	; (8008694 <SM_Send_Data+0x244>)
 80084d2:	7011      	strb	r1, [r2, #0]
 80084d4:	461a      	mov	r2, r3
 80084d6:	4b70      	ldr	r3, [pc, #448]	; (8008698 <SM_Send_Data+0x248>)
 80084d8:	2150      	movs	r1, #80	; 0x50
 80084da:	5499      	strb	r1, [r3, r2]
	commandBuffer[commandBufferIndex++] = 'S';
 80084dc:	4b6d      	ldr	r3, [pc, #436]	; (8008694 <SM_Send_Data+0x244>)
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	1c5a      	adds	r2, r3, #1
 80084e2:	b2d1      	uxtb	r1, r2
 80084e4:	4a6b      	ldr	r2, [pc, #428]	; (8008694 <SM_Send_Data+0x244>)
 80084e6:	7011      	strb	r1, [r2, #0]
 80084e8:	461a      	mov	r2, r3
 80084ea:	4b6b      	ldr	r3, [pc, #428]	; (8008698 <SM_Send_Data+0x248>)
 80084ec:	2153      	movs	r1, #83	; 0x53
 80084ee:	5499      	strb	r1, [r3, r2]
	commandBuffer[commandBufferIndex++] = 'E';
 80084f0:	4b68      	ldr	r3, [pc, #416]	; (8008694 <SM_Send_Data+0x244>)
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	1c5a      	adds	r2, r3, #1
 80084f6:	b2d1      	uxtb	r1, r2
 80084f8:	4a66      	ldr	r2, [pc, #408]	; (8008694 <SM_Send_Data+0x244>)
 80084fa:	7011      	strb	r1, [r2, #0]
 80084fc:	461a      	mov	r2, r3
 80084fe:	4b66      	ldr	r3, [pc, #408]	; (8008698 <SM_Send_Data+0x248>)
 8008500:	2145      	movs	r1, #69	; 0x45
 8008502:	5499      	strb	r1, [r3, r2]
	commandBuffer[commandBufferIndex++] = 'N';
 8008504:	4b63      	ldr	r3, [pc, #396]	; (8008694 <SM_Send_Data+0x244>)
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	1c5a      	adds	r2, r3, #1
 800850a:	b2d1      	uxtb	r1, r2
 800850c:	4a61      	ldr	r2, [pc, #388]	; (8008694 <SM_Send_Data+0x244>)
 800850e:	7011      	strb	r1, [r2, #0]
 8008510:	461a      	mov	r2, r3
 8008512:	4b61      	ldr	r3, [pc, #388]	; (8008698 <SM_Send_Data+0x248>)
 8008514:	214e      	movs	r1, #78	; 0x4e
 8008516:	5499      	strb	r1, [r3, r2]
	commandBuffer[commandBufferIndex++] = 'D';
 8008518:	4b5e      	ldr	r3, [pc, #376]	; (8008694 <SM_Send_Data+0x244>)
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	1c5a      	adds	r2, r3, #1
 800851e:	b2d1      	uxtb	r1, r2
 8008520:	4a5c      	ldr	r2, [pc, #368]	; (8008694 <SM_Send_Data+0x244>)
 8008522:	7011      	strb	r1, [r2, #0]
 8008524:	461a      	mov	r2, r3
 8008526:	4b5c      	ldr	r3, [pc, #368]	; (8008698 <SM_Send_Data+0x248>)
 8008528:	2144      	movs	r1, #68	; 0x44
 800852a:	5499      	strb	r1, [r3, r2]
	commandBuffer[commandBufferIndex++] = '=';
 800852c:	4b59      	ldr	r3, [pc, #356]	; (8008694 <SM_Send_Data+0x244>)
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	1c5a      	adds	r2, r3, #1
 8008532:	b2d1      	uxtb	r1, r2
 8008534:	4a57      	ldr	r2, [pc, #348]	; (8008694 <SM_Send_Data+0x244>)
 8008536:	7011      	strb	r1, [r2, #0]
 8008538:	461a      	mov	r2, r3
 800853a:	4b57      	ldr	r3, [pc, #348]	; (8008698 <SM_Send_Data+0x248>)
 800853c:	213d      	movs	r1, #61	; 0x3d
 800853e:	5499      	strb	r1, [r3, r2]
	commandBuffer[commandBufferIndex++] = '0';
 8008540:	4b54      	ldr	r3, [pc, #336]	; (8008694 <SM_Send_Data+0x244>)
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	1c5a      	adds	r2, r3, #1
 8008546:	b2d1      	uxtb	r1, r2
 8008548:	4a52      	ldr	r2, [pc, #328]	; (8008694 <SM_Send_Data+0x244>)
 800854a:	7011      	strb	r1, [r2, #0]
 800854c:	461a      	mov	r2, r3
 800854e:	4b52      	ldr	r3, [pc, #328]	; (8008698 <SM_Send_Data+0x248>)
 8008550:	2130      	movs	r1, #48	; 0x30
 8008552:	5499      	strb	r1, [r3, r2]
	commandBuffer[commandBufferIndex++] = ',';
 8008554:	4b4f      	ldr	r3, [pc, #316]	; (8008694 <SM_Send_Data+0x244>)
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	1c5a      	adds	r2, r3, #1
 800855a:	b2d1      	uxtb	r1, r2
 800855c:	4a4d      	ldr	r2, [pc, #308]	; (8008694 <SM_Send_Data+0x244>)
 800855e:	7011      	strb	r1, [r2, #0]
 8008560:	461a      	mov	r2, r3
 8008562:	4b4d      	ldr	r3, [pc, #308]	; (8008698 <SM_Send_Data+0x248>)
 8008564:	212c      	movs	r1, #44	; 0x2c
 8008566:	5499      	strb	r1, [r3, r2]

	if(mesageLength >= 100){
 8008568:	79fb      	ldrb	r3, [r7, #7]
 800856a:	2b63      	cmp	r3, #99	; 0x63
 800856c:	d945      	bls.n	80085fa <SM_Send_Data+0x1aa>
		commandBuffer[commandBufferIndex++] = tempMessageLength/100 + 0x30;
 800856e:	7bfb      	ldrb	r3, [r7, #15]
 8008570:	4a4a      	ldr	r2, [pc, #296]	; (800869c <SM_Send_Data+0x24c>)
 8008572:	fba2 2303 	umull	r2, r3, r2, r3
 8008576:	095b      	lsrs	r3, r3, #5
 8008578:	b2da      	uxtb	r2, r3
 800857a:	4b46      	ldr	r3, [pc, #280]	; (8008694 <SM_Send_Data+0x244>)
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	1c59      	adds	r1, r3, #1
 8008580:	b2c8      	uxtb	r0, r1
 8008582:	4944      	ldr	r1, [pc, #272]	; (8008694 <SM_Send_Data+0x244>)
 8008584:	7008      	strb	r0, [r1, #0]
 8008586:	4619      	mov	r1, r3
 8008588:	f102 0330 	add.w	r3, r2, #48	; 0x30
 800858c:	b2da      	uxtb	r2, r3
 800858e:	4b42      	ldr	r3, [pc, #264]	; (8008698 <SM_Send_Data+0x248>)
 8008590:	545a      	strb	r2, [r3, r1]
		tempMessageLength = tempMessageLength % 100;
 8008592:	7bfb      	ldrb	r3, [r7, #15]
 8008594:	4a41      	ldr	r2, [pc, #260]	; (800869c <SM_Send_Data+0x24c>)
 8008596:	fba2 1203 	umull	r1, r2, r2, r3
 800859a:	0952      	lsrs	r2, r2, #5
 800859c:	2164      	movs	r1, #100	; 0x64
 800859e:	fb01 f202 	mul.w	r2, r1, r2
 80085a2:	1a9b      	subs	r3, r3, r2
 80085a4:	73fb      	strb	r3, [r7, #15]
		commandBuffer[commandBufferIndex++] = tempMessageLength/10 + 0x30;
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
 80085a8:	4a3d      	ldr	r2, [pc, #244]	; (80086a0 <SM_Send_Data+0x250>)
 80085aa:	fba2 2303 	umull	r2, r3, r2, r3
 80085ae:	08db      	lsrs	r3, r3, #3
 80085b0:	b2da      	uxtb	r2, r3
 80085b2:	4b38      	ldr	r3, [pc, #224]	; (8008694 <SM_Send_Data+0x244>)
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	1c59      	adds	r1, r3, #1
 80085b8:	b2c8      	uxtb	r0, r1
 80085ba:	4936      	ldr	r1, [pc, #216]	; (8008694 <SM_Send_Data+0x244>)
 80085bc:	7008      	strb	r0, [r1, #0]
 80085be:	4619      	mov	r1, r3
 80085c0:	f102 0330 	add.w	r3, r2, #48	; 0x30
 80085c4:	b2da      	uxtb	r2, r3
 80085c6:	4b34      	ldr	r3, [pc, #208]	; (8008698 <SM_Send_Data+0x248>)
 80085c8:	545a      	strb	r2, [r3, r1]
		tempMessageLength = tempMessageLength % 10;
 80085ca:	7bfa      	ldrb	r2, [r7, #15]
 80085cc:	4b34      	ldr	r3, [pc, #208]	; (80086a0 <SM_Send_Data+0x250>)
 80085ce:	fba3 1302 	umull	r1, r3, r3, r2
 80085d2:	08d9      	lsrs	r1, r3, #3
 80085d4:	460b      	mov	r3, r1
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	440b      	add	r3, r1
 80085da:	005b      	lsls	r3, r3, #1
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	73fb      	strb	r3, [r7, #15]
		commandBuffer[commandBufferIndex++] = tempMessageLength + 0x30;
 80085e0:	4b2c      	ldr	r3, [pc, #176]	; (8008694 <SM_Send_Data+0x244>)
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	1c5a      	adds	r2, r3, #1
 80085e6:	b2d1      	uxtb	r1, r2
 80085e8:	4a2a      	ldr	r2, [pc, #168]	; (8008694 <SM_Send_Data+0x244>)
 80085ea:	7011      	strb	r1, [r2, #0]
 80085ec:	461a      	mov	r2, r3
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
 80085f0:	3330      	adds	r3, #48	; 0x30
 80085f2:	b2d9      	uxtb	r1, r3
 80085f4:	4b28      	ldr	r3, [pc, #160]	; (8008698 <SM_Send_Data+0x248>)
 80085f6:	5499      	strb	r1, [r3, r2]
 80085f8:	e038      	b.n	800866c <SM_Send_Data+0x21c>

	} else if(mesageLength >= 10){
 80085fa:	79fb      	ldrb	r3, [r7, #7]
 80085fc:	2b09      	cmp	r3, #9
 80085fe:	d929      	bls.n	8008654 <SM_Send_Data+0x204>
		commandBuffer[commandBufferIndex++] = tempMessageLength/10 + 0x30;
 8008600:	7bfb      	ldrb	r3, [r7, #15]
 8008602:	4a27      	ldr	r2, [pc, #156]	; (80086a0 <SM_Send_Data+0x250>)
 8008604:	fba2 2303 	umull	r2, r3, r2, r3
 8008608:	08db      	lsrs	r3, r3, #3
 800860a:	b2da      	uxtb	r2, r3
 800860c:	4b21      	ldr	r3, [pc, #132]	; (8008694 <SM_Send_Data+0x244>)
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	1c59      	adds	r1, r3, #1
 8008612:	b2c8      	uxtb	r0, r1
 8008614:	491f      	ldr	r1, [pc, #124]	; (8008694 <SM_Send_Data+0x244>)
 8008616:	7008      	strb	r0, [r1, #0]
 8008618:	4619      	mov	r1, r3
 800861a:	f102 0330 	add.w	r3, r2, #48	; 0x30
 800861e:	b2da      	uxtb	r2, r3
 8008620:	4b1d      	ldr	r3, [pc, #116]	; (8008698 <SM_Send_Data+0x248>)
 8008622:	545a      	strb	r2, [r3, r1]
		tempMessageLength = tempMessageLength % 10;
 8008624:	7bfa      	ldrb	r2, [r7, #15]
 8008626:	4b1e      	ldr	r3, [pc, #120]	; (80086a0 <SM_Send_Data+0x250>)
 8008628:	fba3 1302 	umull	r1, r3, r3, r2
 800862c:	08d9      	lsrs	r1, r3, #3
 800862e:	460b      	mov	r3, r1
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	440b      	add	r3, r1
 8008634:	005b      	lsls	r3, r3, #1
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	73fb      	strb	r3, [r7, #15]
		commandBuffer[commandBufferIndex++] = tempMessageLength + 0x30;
 800863a:	4b16      	ldr	r3, [pc, #88]	; (8008694 <SM_Send_Data+0x244>)
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	1c5a      	adds	r2, r3, #1
 8008640:	b2d1      	uxtb	r1, r2
 8008642:	4a14      	ldr	r2, [pc, #80]	; (8008694 <SM_Send_Data+0x244>)
 8008644:	7011      	strb	r1, [r2, #0]
 8008646:	461a      	mov	r2, r3
 8008648:	7bfb      	ldrb	r3, [r7, #15]
 800864a:	3330      	adds	r3, #48	; 0x30
 800864c:	b2d9      	uxtb	r1, r3
 800864e:	4b12      	ldr	r3, [pc, #72]	; (8008698 <SM_Send_Data+0x248>)
 8008650:	5499      	strb	r1, [r3, r2]
 8008652:	e00b      	b.n	800866c <SM_Send_Data+0x21c>
	} else {
		commandBuffer[commandBufferIndex++] = tempMessageLength + 0x30;
 8008654:	4b0f      	ldr	r3, [pc, #60]	; (8008694 <SM_Send_Data+0x244>)
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	1c5a      	adds	r2, r3, #1
 800865a:	b2d1      	uxtb	r1, r2
 800865c:	4a0d      	ldr	r2, [pc, #52]	; (8008694 <SM_Send_Data+0x244>)
 800865e:	7011      	strb	r1, [r2, #0]
 8008660:	461a      	mov	r2, r3
 8008662:	7bfb      	ldrb	r3, [r7, #15]
 8008664:	3330      	adds	r3, #48	; 0x30
 8008666:	b2d9      	uxtb	r1, r3
 8008668:	4b0b      	ldr	r3, [pc, #44]	; (8008698 <SM_Send_Data+0x248>)
 800866a:	5499      	strb	r1, [r3, r2]
	}
	commandBuffer[commandBufferIndex++] = CR;
 800866c:	4b09      	ldr	r3, [pc, #36]	; (8008694 <SM_Send_Data+0x244>)
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	1c5a      	adds	r2, r3, #1
 8008672:	b2d1      	uxtb	r1, r2
 8008674:	4a07      	ldr	r2, [pc, #28]	; (8008694 <SM_Send_Data+0x244>)
 8008676:	7011      	strb	r1, [r2, #0]
 8008678:	461a      	mov	r2, r3
 800867a:	4b07      	ldr	r3, [pc, #28]	; (8008698 <SM_Send_Data+0x248>)
 800867c:	210d      	movs	r1, #13
 800867e:	5499      	strb	r1, [r3, r2]

	MQTTCommandSending((uint8_t *)commandBuffer, commandBufferIndex);
 8008680:	4b04      	ldr	r3, [pc, #16]	; (8008694 <SM_Send_Data+0x244>)
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	4619      	mov	r1, r3
 8008686:	4804      	ldr	r0, [pc, #16]	; (8008698 <SM_Send_Data+0x248>)
 8008688:	f001 f80c 	bl	80096a4 <MQTTCommandSending>
}
 800868c:	bf00      	nop
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	20000219 	.word	0x20000219
 8008698:	20002b50 	.word	0x20002b50
 800869c:	51eb851f 	.word	0x51eb851f
 80086a0:	cccccccd 	.word	0xcccccccd

080086a4 <SM_Mqtt_Open>:

void SM_Mqtt_Open(void){
 80086a4:	b580      	push	{r7, lr}
 80086a6:	af00      	add	r7, sp, #0
	SCH_Delete_Task(mqtt_Timeout_Task_Index);
 80086a8:	4b0f      	ldr	r3, [pc, #60]	; (80086e8 <SM_Mqtt_Open+0x44>)
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7ff fa39 	bl	8007b24 <SCH_Delete_Task>
	Mqtt_Clear_Timeout_Flag();
 80086b2:	f7ff fe51 	bl	8008358 <Mqtt_Clear_Timeout_Flag>
	mqtt_Timeout_Task_Index = SCH_Add_Task(Mqtt_Command_Timeout, MQTT_COMMAND_TIME_OUT,0);
 80086b6:	2200      	movs	r2, #0
 80086b8:	f241 3188 	movw	r1, #5000	; 0x1388
 80086bc:	480b      	ldr	r0, [pc, #44]	; (80086ec <SM_Mqtt_Open+0x48>)
 80086be:	f7ff f9b7 	bl	8007a30 <SCH_Add_Task>
 80086c2:	4603      	mov	r3, r0
 80086c4:	461a      	mov	r2, r3
 80086c6:	4b08      	ldr	r3, [pc, #32]	; (80086e8 <SM_Mqtt_Open+0x44>)
 80086c8:	701a      	strb	r2, [r3, #0]
	isOKFlag = RESET;
 80086ca:	4b09      	ldr	r3, [pc, #36]	; (80086f0 <SM_Mqtt_Open+0x4c>)
 80086cc:	2200      	movs	r2, #0
 80086ce:	701a      	strb	r2, [r3, #0]
	isErrorFlag = RESET;
 80086d0:	4b08      	ldr	r3, [pc, #32]	; (80086f4 <SM_Mqtt_Open+0x50>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	701a      	strb	r2, [r3, #0]
	ATcommandSending((uint8_t *)MQTTOPEN_COMMAND);
 80086d6:	4808      	ldr	r0, [pc, #32]	; (80086f8 <SM_Mqtt_Open+0x54>)
 80086d8:	f000 ffd4 	bl	8009684 <ATcommandSending>
	mqttState = MQTT_WAIT_FOR_RESPONSE_FROM_OPEN_STATE;
 80086dc:	4b07      	ldr	r3, [pc, #28]	; (80086fc <SM_Mqtt_Open+0x58>)
 80086de:	2201      	movs	r2, #1
 80086e0:	701a      	strb	r2, [r3, #0]
}
 80086e2:	bf00      	nop
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	200000cd 	.word	0x200000cd
 80086ec:	08008371 	.word	0x08008371
 80086f0:	20000209 	.word	0x20000209
 80086f4:	2000020a 	.word	0x2000020a
 80086f8:	0800ad3c 	.word	0x0800ad3c
 80086fc:	2000021f 	.word	0x2000021f

08008700 <SM_Mqtt_Wait_For_Response_From_Open_State>:

void SM_Mqtt_Wait_For_Response_From_Open_State(void){
 8008700:	b580      	push	{r7, lr}
 8008702:	af00      	add	r7, sp, #0
	if(isOKFlag){
 8008704:	4b0f      	ldr	r3, [pc, #60]	; (8008744 <SM_Mqtt_Wait_For_Response_From_Open_State+0x44>)
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d006      	beq.n	800871a <SM_Mqtt_Wait_For_Response_From_Open_State+0x1a>
		isOKFlag = RESET;
 800870c:	4b0d      	ldr	r3, [pc, #52]	; (8008744 <SM_Mqtt_Wait_For_Response_From_Open_State+0x44>)
 800870e:	2200      	movs	r2, #0
 8008710:	701a      	strb	r2, [r3, #0]
		mqttState = MQTT_CONNECT_STATE;
 8008712:	4b0d      	ldr	r3, [pc, #52]	; (8008748 <SM_Mqtt_Wait_For_Response_From_Open_State+0x48>)
 8008714:	2202      	movs	r2, #2
 8008716:	701a      	strb	r2, [r3, #0]
		isErrorFlag = 0;
		mqttState = MAX_MQTT_NUMBER_STATES;
	} else if(is_Mqtt_Command_Timeout()){
		mqttState = MAX_MQTT_NUMBER_STATES;
	}
}
 8008718:	e012      	b.n	8008740 <SM_Mqtt_Wait_For_Response_From_Open_State+0x40>
	} else if(isErrorFlag){
 800871a:	4b0c      	ldr	r3, [pc, #48]	; (800874c <SM_Mqtt_Wait_For_Response_From_Open_State+0x4c>)
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d006      	beq.n	8008730 <SM_Mqtt_Wait_For_Response_From_Open_State+0x30>
		isErrorFlag = 0;
 8008722:	4b0a      	ldr	r3, [pc, #40]	; (800874c <SM_Mqtt_Wait_For_Response_From_Open_State+0x4c>)
 8008724:	2200      	movs	r2, #0
 8008726:	701a      	strb	r2, [r3, #0]
		mqttState = MAX_MQTT_NUMBER_STATES;
 8008728:	4b07      	ldr	r3, [pc, #28]	; (8008748 <SM_Mqtt_Wait_For_Response_From_Open_State+0x48>)
 800872a:	2211      	movs	r2, #17
 800872c:	701a      	strb	r2, [r3, #0]
}
 800872e:	e007      	b.n	8008740 <SM_Mqtt_Wait_For_Response_From_Open_State+0x40>
	} else if(is_Mqtt_Command_Timeout()){
 8008730:	f7ff fe2a 	bl	8008388 <is_Mqtt_Command_Timeout>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d002      	beq.n	8008740 <SM_Mqtt_Wait_For_Response_From_Open_State+0x40>
		mqttState = MAX_MQTT_NUMBER_STATES;
 800873a:	4b03      	ldr	r3, [pc, #12]	; (8008748 <SM_Mqtt_Wait_For_Response_From_Open_State+0x48>)
 800873c:	2211      	movs	r2, #17
 800873e:	701a      	strb	r2, [r3, #0]
}
 8008740:	bf00      	nop
 8008742:	bd80      	pop	{r7, pc}
 8008744:	20000209 	.word	0x20000209
 8008748:	2000021f 	.word	0x2000021f
 800874c:	2000020a 	.word	0x2000020a

08008750 <SM_Mqtt_Connect>:

void SM_Mqtt_Connect(void){
 8008750:	b580      	push	{r7, lr}
 8008752:	af00      	add	r7, sp, #0
	SCH_Delete_Task(mqtt_Timeout_Task_Index);
 8008754:	4b0b      	ldr	r3, [pc, #44]	; (8008784 <SM_Mqtt_Connect+0x34>)
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	4618      	mov	r0, r3
 800875a:	f7ff f9e3 	bl	8007b24 <SCH_Delete_Task>
	Mqtt_Clear_Timeout_Flag();
 800875e:	f7ff fdfb 	bl	8008358 <Mqtt_Clear_Timeout_Flag>
	mqtt_Timeout_Task_Index = SCH_Add_Task(Mqtt_Command_Timeout, MQTT_COMMAND_TIME_OUT,0);
 8008762:	2200      	movs	r2, #0
 8008764:	f241 3188 	movw	r1, #5000	; 0x1388
 8008768:	4807      	ldr	r0, [pc, #28]	; (8008788 <SM_Mqtt_Connect+0x38>)
 800876a:	f7ff f961 	bl	8007a30 <SCH_Add_Task>
 800876e:	4603      	mov	r3, r0
 8008770:	461a      	mov	r2, r3
 8008772:	4b04      	ldr	r3, [pc, #16]	; (8008784 <SM_Mqtt_Connect+0x34>)
 8008774:	701a      	strb	r2, [r3, #0]
	Setup_Mqtt_Connect_Message();
 8008776:	f000 fa97 	bl	8008ca8 <Setup_Mqtt_Connect_Message>
	mqttState = MQTT_RECEIVE_GREATER_THAN_SYMBOL_CONNECT_STATE;
 800877a:	4b04      	ldr	r3, [pc, #16]	; (800878c <SM_Mqtt_Connect+0x3c>)
 800877c:	2203      	movs	r2, #3
 800877e:	701a      	strb	r2, [r3, #0]
}
 8008780:	bf00      	nop
 8008782:	bd80      	pop	{r7, pc}
 8008784:	200000cd 	.word	0x200000cd
 8008788:	08008371 	.word	0x08008371
 800878c:	2000021f 	.word	0x2000021f

08008790 <SM_Mqtt_Receive_Greater_Than_Symbol_Connect_State>:
void SM_Mqtt_Receive_Greater_Than_Symbol_Connect_State(void){
 8008790:	b580      	push	{r7, lr}
 8008792:	af00      	add	r7, sp, #0
	if(isReadyToSendDataToServer){
 8008794:	4b11      	ldr	r3, [pc, #68]	; (80087dc <SM_Mqtt_Receive_Greater_Than_Symbol_Connect_State+0x4c>)
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d015      	beq.n	80087c8 <SM_Mqtt_Receive_Greater_Than_Symbol_Connect_State+0x38>
		isReadyToSendDataToServer = RESET;
 800879c:	4b0f      	ldr	r3, [pc, #60]	; (80087dc <SM_Mqtt_Receive_Greater_Than_Symbol_Connect_State+0x4c>)
 800879e:	2200      	movs	r2, #0
 80087a0:	701a      	strb	r2, [r3, #0]
		isRecvFromFlag = RESET;
 80087a2:	4b0f      	ldr	r3, [pc, #60]	; (80087e0 <SM_Mqtt_Receive_Greater_Than_Symbol_Connect_State+0x50>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	701a      	strb	r2, [r3, #0]
		isSendOKFlag = RESET;
 80087a8:	4b0e      	ldr	r3, [pc, #56]	; (80087e4 <SM_Mqtt_Receive_Greater_Than_Symbol_Connect_State+0x54>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	701a      	strb	r2, [r3, #0]
		isErrorFlag = RESET;
 80087ae:	4b0e      	ldr	r3, [pc, #56]	; (80087e8 <SM_Mqtt_Receive_Greater_Than_Symbol_Connect_State+0x58>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	701a      	strb	r2, [r3, #0]
		MQTTCommandSending((uint8_t *)mqttMessage, mqttMessageLength);
 80087b4:	4b0d      	ldr	r3, [pc, #52]	; (80087ec <SM_Mqtt_Receive_Greater_Than_Symbol_Connect_State+0x5c>)
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	4619      	mov	r1, r3
 80087ba:	480d      	ldr	r0, [pc, #52]	; (80087f0 <SM_Mqtt_Receive_Greater_Than_Symbol_Connect_State+0x60>)
 80087bc:	f000 ff72 	bl	80096a4 <MQTTCommandSending>
		mqttState = MQTT_WAIT_FOR_RESPONSE_FROM_CONNECT_STATE;
 80087c0:	4b0c      	ldr	r3, [pc, #48]	; (80087f4 <SM_Mqtt_Receive_Greater_Than_Symbol_Connect_State+0x64>)
 80087c2:	2204      	movs	r2, #4
 80087c4:	701a      	strb	r2, [r3, #0]
	} else if(is_Mqtt_Command_Timeout()){
		mqttState = MAX_MQTT_NUMBER_STATES;
	}
}
 80087c6:	e007      	b.n	80087d8 <SM_Mqtt_Receive_Greater_Than_Symbol_Connect_State+0x48>
	} else if(is_Mqtt_Command_Timeout()){
 80087c8:	f7ff fdde 	bl	8008388 <is_Mqtt_Command_Timeout>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d002      	beq.n	80087d8 <SM_Mqtt_Receive_Greater_Than_Symbol_Connect_State+0x48>
		mqttState = MAX_MQTT_NUMBER_STATES;
 80087d2:	4b08      	ldr	r3, [pc, #32]	; (80087f4 <SM_Mqtt_Receive_Greater_Than_Symbol_Connect_State+0x64>)
 80087d4:	2211      	movs	r2, #17
 80087d6:	701a      	strb	r2, [r3, #0]
}
 80087d8:	bf00      	nop
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	2000020d 	.word	0x2000020d
 80087e0:	2000020c 	.word	0x2000020c
 80087e4:	2000020e 	.word	0x2000020e
 80087e8:	2000020a 	.word	0x2000020a
 80087ec:	20002b4c 	.word	0x20002b4c
 80087f0:	20002be4 	.word	0x20002be4
 80087f4:	2000021f 	.word	0x2000021f

080087f8 <SM_Mqtt_Wait_For_Response_From_Connect_State>:
void SM_Mqtt_Wait_For_Response_From_Connect_State(void){
 80087f8:	b580      	push	{r7, lr}
 80087fa:	af00      	add	r7, sp, #0
	if(isRecvFromFlag){
 80087fc:	4b0f      	ldr	r3, [pc, #60]	; (800883c <SM_Mqtt_Wait_For_Response_From_Connect_State+0x44>)
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d006      	beq.n	8008812 <SM_Mqtt_Wait_For_Response_From_Connect_State+0x1a>
		isRecvFromFlag = RESET;
 8008804:	4b0d      	ldr	r3, [pc, #52]	; (800883c <SM_Mqtt_Wait_For_Response_From_Connect_State+0x44>)
 8008806:	2200      	movs	r2, #0
 8008808:	701a      	strb	r2, [r3, #0]
		mqttState = MQTT_SUBSCRIBE_STATE;
 800880a:	4b0d      	ldr	r3, [pc, #52]	; (8008840 <SM_Mqtt_Wait_For_Response_From_Connect_State+0x48>)
 800880c:	2205      	movs	r2, #5
 800880e:	701a      	strb	r2, [r3, #0]
		isErrorFlag = 0;
		mqttState = MAX_MQTT_NUMBER_STATES;
	} else if(is_Mqtt_Command_Timeout()){
		mqttState = MAX_MQTT_NUMBER_STATES;
	}
}
 8008810:	e012      	b.n	8008838 <SM_Mqtt_Wait_For_Response_From_Connect_State+0x40>
	} else if(isErrorFlag){
 8008812:	4b0c      	ldr	r3, [pc, #48]	; (8008844 <SM_Mqtt_Wait_For_Response_From_Connect_State+0x4c>)
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d006      	beq.n	8008828 <SM_Mqtt_Wait_For_Response_From_Connect_State+0x30>
		isErrorFlag = 0;
 800881a:	4b0a      	ldr	r3, [pc, #40]	; (8008844 <SM_Mqtt_Wait_For_Response_From_Connect_State+0x4c>)
 800881c:	2200      	movs	r2, #0
 800881e:	701a      	strb	r2, [r3, #0]
		mqttState = MAX_MQTT_NUMBER_STATES;
 8008820:	4b07      	ldr	r3, [pc, #28]	; (8008840 <SM_Mqtt_Wait_For_Response_From_Connect_State+0x48>)
 8008822:	2211      	movs	r2, #17
 8008824:	701a      	strb	r2, [r3, #0]
}
 8008826:	e007      	b.n	8008838 <SM_Mqtt_Wait_For_Response_From_Connect_State+0x40>
	} else if(is_Mqtt_Command_Timeout()){
 8008828:	f7ff fdae 	bl	8008388 <is_Mqtt_Command_Timeout>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d002      	beq.n	8008838 <SM_Mqtt_Wait_For_Response_From_Connect_State+0x40>
		mqttState = MAX_MQTT_NUMBER_STATES;
 8008832:	4b03      	ldr	r3, [pc, #12]	; (8008840 <SM_Mqtt_Wait_For_Response_From_Connect_State+0x48>)
 8008834:	2211      	movs	r2, #17
 8008836:	701a      	strb	r2, [r3, #0]
}
 8008838:	bf00      	nop
 800883a:	bd80      	pop	{r7, pc}
 800883c:	2000020c 	.word	0x2000020c
 8008840:	2000021f 	.word	0x2000021f
 8008844:	2000020a 	.word	0x2000020a

08008848 <SM_Mqtt_Subscribe>:

void SM_Mqtt_Subscribe (void) {
 8008848:	b580      	push	{r7, lr}
 800884a:	af00      	add	r7, sp, #0
	SCH_Delete_Task(mqtt_Timeout_Task_Index);
 800884c:	4b14      	ldr	r3, [pc, #80]	; (80088a0 <SM_Mqtt_Subscribe+0x58>)
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	4618      	mov	r0, r3
 8008852:	f7ff f967 	bl	8007b24 <SCH_Delete_Task>
	Mqtt_Clear_Timeout_Flag();
 8008856:	f7ff fd7f 	bl	8008358 <Mqtt_Clear_Timeout_Flag>
	mqtt_Timeout_Task_Index = SCH_Add_Task(Mqtt_Command_Timeout, MQTT_COMMAND_TIME_OUT,0);
 800885a:	2200      	movs	r2, #0
 800885c:	f241 3188 	movw	r1, #5000	; 0x1388
 8008860:	4810      	ldr	r0, [pc, #64]	; (80088a4 <SM_Mqtt_Subscribe+0x5c>)
 8008862:	f7ff f8e5 	bl	8007a30 <SCH_Add_Task>
 8008866:	4603      	mov	r3, r0
 8008868:	461a      	mov	r2, r3
 800886a:	4b0d      	ldr	r3, [pc, #52]	; (80088a0 <SM_Mqtt_Subscribe+0x58>)
 800886c:	701a      	strb	r2, [r3, #0]
	if(subscribeTopicIndex < NUMBER_OF_SUBSCRIBE_TOPIC){
 800886e:	4b0e      	ldr	r3, [pc, #56]	; (80088a8 <SM_Mqtt_Subscribe+0x60>)
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	2b01      	cmp	r3, #1
 8008874:	d80e      	bhi.n	8008894 <SM_Mqtt_Subscribe+0x4c>
		if(subscribeTopicIndex == 0){
 8008876:	4b0c      	ldr	r3, [pc, #48]	; (80088a8 <SM_Mqtt_Subscribe+0x60>)
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d103      	bne.n	8008886 <SM_Mqtt_Subscribe+0x3e>
			Setup_Mqtt_Subscribe_Message(SUBSCRIBE_TOPIC_1);
 800887e:	480b      	ldr	r0, [pc, #44]	; (80088ac <SM_Mqtt_Subscribe+0x64>)
 8008880:	f000 fb52 	bl	8008f28 <Setup_Mqtt_Subscribe_Message>
 8008884:	e006      	b.n	8008894 <SM_Mqtt_Subscribe+0x4c>
		} else if(subscribeTopicIndex == 1){
 8008886:	4b08      	ldr	r3, [pc, #32]	; (80088a8 <SM_Mqtt_Subscribe+0x60>)
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d102      	bne.n	8008894 <SM_Mqtt_Subscribe+0x4c>
			Setup_Mqtt_Subscribe_Message(SUBSCRIBE_TOPIC_2);
 800888e:	4808      	ldr	r0, [pc, #32]	; (80088b0 <SM_Mqtt_Subscribe+0x68>)
 8008890:	f000 fb4a 	bl	8008f28 <Setup_Mqtt_Subscribe_Message>
		}
	}
	mqttState = MQTT_RECEIVE_GREATER_THAN_SYMBOL_SUBSCRIBE_STATE;
 8008894:	4b07      	ldr	r3, [pc, #28]	; (80088b4 <SM_Mqtt_Subscribe+0x6c>)
 8008896:	2206      	movs	r2, #6
 8008898:	701a      	strb	r2, [r3, #0]
}
 800889a:	bf00      	nop
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	200000cd 	.word	0x200000cd
 80088a4:	08008371 	.word	0x08008371
 80088a8:	2000021b 	.word	0x2000021b
 80088ac:	0800ad8c 	.word	0x0800ad8c
 80088b0:	0800ad98 	.word	0x0800ad98
 80088b4:	2000021f 	.word	0x2000021f

080088b8 <SM_Mqtt_Receive_Greater_Than_Symbol_Subscribe_State>:

void SM_Mqtt_Receive_Greater_Than_Symbol_Subscribe_State(void){
 80088b8:	b580      	push	{r7, lr}
 80088ba:	af00      	add	r7, sp, #0
	if(isReadyToSendDataToServer){
 80088bc:	4b1a      	ldr	r3, [pc, #104]	; (8008928 <SM_Mqtt_Receive_Greater_Than_Symbol_Subscribe_State+0x70>)
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d026      	beq.n	8008912 <SM_Mqtt_Receive_Greater_Than_Symbol_Subscribe_State+0x5a>
		isReadyToSendDataToServer = RESET;
 80088c4:	4b18      	ldr	r3, [pc, #96]	; (8008928 <SM_Mqtt_Receive_Greater_Than_Symbol_Subscribe_State+0x70>)
 80088c6:	2200      	movs	r2, #0
 80088c8:	701a      	strb	r2, [r3, #0]
		isRecvFromFlag = RESET;
 80088ca:	4b18      	ldr	r3, [pc, #96]	; (800892c <SM_Mqtt_Receive_Greater_Than_Symbol_Subscribe_State+0x74>)
 80088cc:	2200      	movs	r2, #0
 80088ce:	701a      	strb	r2, [r3, #0]
		isSendOKFlag = RESET;
 80088d0:	4b17      	ldr	r3, [pc, #92]	; (8008930 <SM_Mqtt_Receive_Greater_Than_Symbol_Subscribe_State+0x78>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	701a      	strb	r2, [r3, #0]
		isErrorFlag = RESET;
 80088d6:	4b17      	ldr	r3, [pc, #92]	; (8008934 <SM_Mqtt_Receive_Greater_Than_Symbol_Subscribe_State+0x7c>)
 80088d8:	2200      	movs	r2, #0
 80088da:	701a      	strb	r2, [r3, #0]
		MQTTCommandSending((uint8_t *)mqttMessage, mqttMessageLength);
 80088dc:	4b16      	ldr	r3, [pc, #88]	; (8008938 <SM_Mqtt_Receive_Greater_Than_Symbol_Subscribe_State+0x80>)
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	4619      	mov	r1, r3
 80088e2:	4816      	ldr	r0, [pc, #88]	; (800893c <SM_Mqtt_Receive_Greater_Than_Symbol_Subscribe_State+0x84>)
 80088e4:	f000 fede 	bl	80096a4 <MQTTCommandSending>
		mqttState = MQTT_WAIT_FOR_RESPONSE_FROM_SUBSCRIBE_STATE;
 80088e8:	4b15      	ldr	r3, [pc, #84]	; (8008940 <SM_Mqtt_Receive_Greater_Than_Symbol_Subscribe_State+0x88>)
 80088ea:	2207      	movs	r2, #7
 80088ec:	701a      	strb	r2, [r3, #0]

		SCH_Delete_Task(mqtt_Timeout_Subscribe_Task_Index);
 80088ee:	4b15      	ldr	r3, [pc, #84]	; (8008944 <SM_Mqtt_Receive_Greater_Than_Symbol_Subscribe_State+0x8c>)
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7ff f916 	bl	8007b24 <SCH_Delete_Task>
		Mqtt_Clear_Subscribe_Timeout_Flag();
 80088f8:	f7ff fd50 	bl	800839c <Mqtt_Clear_Subscribe_Timeout_Flag>
		mqtt_Timeout_Subscribe_Task_Index = SCH_Add_Task(Mqtt_Subscribe_Timeout, MQTT_SUBSCRIBE_TIME_OUT, 0);
 80088fc:	2200      	movs	r2, #0
 80088fe:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008902:	4811      	ldr	r0, [pc, #68]	; (8008948 <SM_Mqtt_Receive_Greater_Than_Symbol_Subscribe_State+0x90>)
 8008904:	f7ff f894 	bl	8007a30 <SCH_Add_Task>
 8008908:	4603      	mov	r3, r0
 800890a:	461a      	mov	r2, r3
 800890c:	4b0d      	ldr	r3, [pc, #52]	; (8008944 <SM_Mqtt_Receive_Greater_Than_Symbol_Subscribe_State+0x8c>)
 800890e:	701a      	strb	r2, [r3, #0]
	} else if(is_Mqtt_Command_Timeout()){
		mqttState = MAX_MQTT_NUMBER_STATES;
	}
}
 8008910:	e007      	b.n	8008922 <SM_Mqtt_Receive_Greater_Than_Symbol_Subscribe_State+0x6a>
	} else if(is_Mqtt_Command_Timeout()){
 8008912:	f7ff fd39 	bl	8008388 <is_Mqtt_Command_Timeout>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d002      	beq.n	8008922 <SM_Mqtt_Receive_Greater_Than_Symbol_Subscribe_State+0x6a>
		mqttState = MAX_MQTT_NUMBER_STATES;
 800891c:	4b08      	ldr	r3, [pc, #32]	; (8008940 <SM_Mqtt_Receive_Greater_Than_Symbol_Subscribe_State+0x88>)
 800891e:	2211      	movs	r2, #17
 8008920:	701a      	strb	r2, [r3, #0]
}
 8008922:	bf00      	nop
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	2000020d 	.word	0x2000020d
 800892c:	2000020c 	.word	0x2000020c
 8008930:	2000020e 	.word	0x2000020e
 8008934:	2000020a 	.word	0x2000020a
 8008938:	20002b4c 	.word	0x20002b4c
 800893c:	20002be4 	.word	0x20002be4
 8008940:	2000021f 	.word	0x2000021f
 8008944:	200000ce 	.word	0x200000ce
 8008948:	080083b5 	.word	0x080083b5

0800894c <SM_Mqtt_Wait_For_Response_From_Subscribe_State>:

void SM_Mqtt_Wait_For_Response_From_Subscribe_State(void){
 800894c:	b580      	push	{r7, lr}
 800894e:	af00      	add	r7, sp, #0
	if(isRecvFromFlag){
 8008950:	4b1a      	ldr	r3, [pc, #104]	; (80089bc <SM_Mqtt_Wait_For_Response_From_Subscribe_State+0x70>)
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d01c      	beq.n	8008992 <SM_Mqtt_Wait_For_Response_From_Subscribe_State+0x46>
		if(is_Mqtt_Subscribe_Timeout()){
 8008958:	f7ff fd38 	bl	80083cc <is_Mqtt_Subscribe_Timeout>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d02a      	beq.n	80089b8 <SM_Mqtt_Wait_For_Response_From_Subscribe_State+0x6c>
			isRecvFromFlag = RESET;
 8008962:	4b16      	ldr	r3, [pc, #88]	; (80089bc <SM_Mqtt_Wait_For_Response_From_Subscribe_State+0x70>)
 8008964:	2200      	movs	r2, #0
 8008966:	701a      	strb	r2, [r3, #0]
			subscribeTopicIndex ++;
 8008968:	4b15      	ldr	r3, [pc, #84]	; (80089c0 <SM_Mqtt_Wait_For_Response_From_Subscribe_State+0x74>)
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	3301      	adds	r3, #1
 800896e:	b2da      	uxtb	r2, r3
 8008970:	4b13      	ldr	r3, [pc, #76]	; (80089c0 <SM_Mqtt_Wait_For_Response_From_Subscribe_State+0x74>)
 8008972:	701a      	strb	r2, [r3, #0]
			if(subscribeTopicIndex < NUMBER_OF_SUBSCRIBE_TOPIC){
 8008974:	4b12      	ldr	r3, [pc, #72]	; (80089c0 <SM_Mqtt_Wait_For_Response_From_Subscribe_State+0x74>)
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d803      	bhi.n	8008984 <SM_Mqtt_Wait_For_Response_From_Subscribe_State+0x38>
				mqttState = MQTT_SUBSCRIBE_STATE;
 800897c:	4b11      	ldr	r3, [pc, #68]	; (80089c4 <SM_Mqtt_Wait_For_Response_From_Subscribe_State+0x78>)
 800897e:	2205      	movs	r2, #5
 8008980:	701a      	strb	r2, [r3, #0]
		isErrorFlag = RESET;
		mqttState = MAX_MQTT_NUMBER_STATES;
	} else if(is_Mqtt_Command_Timeout()){
		mqttState = MAX_MQTT_NUMBER_STATES;
	}
}
 8008982:	e019      	b.n	80089b8 <SM_Mqtt_Wait_For_Response_From_Subscribe_State+0x6c>
				subscribeTopicIndex = 0;
 8008984:	4b0e      	ldr	r3, [pc, #56]	; (80089c0 <SM_Mqtt_Wait_For_Response_From_Subscribe_State+0x74>)
 8008986:	2200      	movs	r2, #0
 8008988:	701a      	strb	r2, [r3, #0]
				mqttState = MQTT_WAIT_FOR_NEW_COMMAND;
 800898a:	4b0e      	ldr	r3, [pc, #56]	; (80089c4 <SM_Mqtt_Wait_For_Response_From_Subscribe_State+0x78>)
 800898c:	2210      	movs	r2, #16
 800898e:	701a      	strb	r2, [r3, #0]
}
 8008990:	e012      	b.n	80089b8 <SM_Mqtt_Wait_For_Response_From_Subscribe_State+0x6c>
	} else if(isErrorFlag){
 8008992:	4b0d      	ldr	r3, [pc, #52]	; (80089c8 <SM_Mqtt_Wait_For_Response_From_Subscribe_State+0x7c>)
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d006      	beq.n	80089a8 <SM_Mqtt_Wait_For_Response_From_Subscribe_State+0x5c>
		isErrorFlag = RESET;
 800899a:	4b0b      	ldr	r3, [pc, #44]	; (80089c8 <SM_Mqtt_Wait_For_Response_From_Subscribe_State+0x7c>)
 800899c:	2200      	movs	r2, #0
 800899e:	701a      	strb	r2, [r3, #0]
		mqttState = MAX_MQTT_NUMBER_STATES;
 80089a0:	4b08      	ldr	r3, [pc, #32]	; (80089c4 <SM_Mqtt_Wait_For_Response_From_Subscribe_State+0x78>)
 80089a2:	2211      	movs	r2, #17
 80089a4:	701a      	strb	r2, [r3, #0]
}
 80089a6:	e007      	b.n	80089b8 <SM_Mqtt_Wait_For_Response_From_Subscribe_State+0x6c>
	} else if(is_Mqtt_Command_Timeout()){
 80089a8:	f7ff fcee 	bl	8008388 <is_Mqtt_Command_Timeout>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d002      	beq.n	80089b8 <SM_Mqtt_Wait_For_Response_From_Subscribe_State+0x6c>
		mqttState = MAX_MQTT_NUMBER_STATES;
 80089b2:	4b04      	ldr	r3, [pc, #16]	; (80089c4 <SM_Mqtt_Wait_For_Response_From_Subscribe_State+0x78>)
 80089b4:	2211      	movs	r2, #17
 80089b6:	701a      	strb	r2, [r3, #0]
}
 80089b8:	bf00      	nop
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	2000020c 	.word	0x2000020c
 80089c0:	2000021b 	.word	0x2000021b
 80089c4:	2000021f 	.word	0x2000021f
 80089c8:	2000020a 	.word	0x2000020a

080089cc <SM_Wait_For_New_Command>:


void SM_Wait_For_New_Command(void){
 80089cc:	b480      	push	{r7}
 80089ce:	af00      	add	r7, sp, #0
	if(isIPCloseFlag){
 80089d0:	4b0c      	ldr	r3, [pc, #48]	; (8008a04 <SM_Wait_For_New_Command+0x38>)
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d006      	beq.n	80089e6 <SM_Wait_For_New_Command+0x1a>
		isIPCloseFlag = RESET;
 80089d8:	4b0a      	ldr	r3, [pc, #40]	; (8008a04 <SM_Wait_For_New_Command+0x38>)
 80089da:	2200      	movs	r2, #0
 80089dc:	701a      	strb	r2, [r3, #0]
		mqttState = MQTT_OPEN_STATE;
 80089de:	4b0a      	ldr	r3, [pc, #40]	; (8008a08 <SM_Wait_For_New_Command+0x3c>)
 80089e0:	2200      	movs	r2, #0
 80089e2:	701a      	strb	r2, [r3, #0]
	}
	else if(isErrorFlag){
		isErrorFlag = RESET;
		mqttState = MAX_MQTT_NUMBER_STATES;
	}
}
 80089e4:	e009      	b.n	80089fa <SM_Wait_For_New_Command+0x2e>
	else if(isErrorFlag){
 80089e6:	4b09      	ldr	r3, [pc, #36]	; (8008a0c <SM_Wait_For_New_Command+0x40>)
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d005      	beq.n	80089fa <SM_Wait_For_New_Command+0x2e>
		isErrorFlag = RESET;
 80089ee:	4b07      	ldr	r3, [pc, #28]	; (8008a0c <SM_Wait_For_New_Command+0x40>)
 80089f0:	2200      	movs	r2, #0
 80089f2:	701a      	strb	r2, [r3, #0]
		mqttState = MAX_MQTT_NUMBER_STATES;
 80089f4:	4b04      	ldr	r3, [pc, #16]	; (8008a08 <SM_Wait_For_New_Command+0x3c>)
 80089f6:	2211      	movs	r2, #17
 80089f8:	701a      	strb	r2, [r3, #0]
}
 80089fa:	bf00      	nop
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bc80      	pop	{r7}
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	2000020b 	.word	0x2000020b
 8008a08:	2000021f 	.word	0x2000021f
 8008a0c:	2000020a 	.word	0x2000020a

08008a10 <SM_Mqtt_Publish>:


void SM_Mqtt_Publish(void){
 8008a10:	b580      	push	{r7, lr}
 8008a12:	af00      	add	r7, sp, #0
	SCH_Delete_Task(mqtt_Timeout_Task_Index);
 8008a14:	4b0a      	ldr	r3, [pc, #40]	; (8008a40 <SM_Mqtt_Publish+0x30>)
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7ff f883 	bl	8007b24 <SCH_Delete_Task>
	Mqtt_Clear_Timeout_Flag();
 8008a1e:	f7ff fc9b 	bl	8008358 <Mqtt_Clear_Timeout_Flag>
	mqtt_Timeout_Task_Index = SCH_Add_Task(Mqtt_Command_Timeout, MQTT_COMMAND_TIME_OUT,0);
 8008a22:	2200      	movs	r2, #0
 8008a24:	f241 3188 	movw	r1, #5000	; 0x1388
 8008a28:	4806      	ldr	r0, [pc, #24]	; (8008a44 <SM_Mqtt_Publish+0x34>)
 8008a2a:	f7ff f801 	bl	8007a30 <SCH_Add_Task>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	461a      	mov	r2, r3
 8008a32:	4b03      	ldr	r3, [pc, #12]	; (8008a40 <SM_Mqtt_Publish+0x30>)
 8008a34:	701a      	strb	r2, [r3, #0]
	mqttState = MQTT_RECEIVE_GREATER_THAN_SYMBOL_PUBLISH_STATE;
 8008a36:	4b04      	ldr	r3, [pc, #16]	; (8008a48 <SM_Mqtt_Publish+0x38>)
 8008a38:	2209      	movs	r2, #9
 8008a3a:	701a      	strb	r2, [r3, #0]
}
 8008a3c:	bf00      	nop
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	200000cd 	.word	0x200000cd
 8008a44:	08008371 	.word	0x08008371
 8008a48:	2000021f 	.word	0x2000021f

08008a4c <SM_Mqtt_Receive_Greater_Than_Symbol_Publish_State>:

void SM_Mqtt_Receive_Greater_Than_Symbol_Publish_State(void){
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	af00      	add	r7, sp, #0
	if(isReadyToSendDataToServer){
 8008a50:	4b11      	ldr	r3, [pc, #68]	; (8008a98 <SM_Mqtt_Receive_Greater_Than_Symbol_Publish_State+0x4c>)
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d015      	beq.n	8008a84 <SM_Mqtt_Receive_Greater_Than_Symbol_Publish_State+0x38>
		isReadyToSendDataToServer = RESET;
 8008a58:	4b0f      	ldr	r3, [pc, #60]	; (8008a98 <SM_Mqtt_Receive_Greater_Than_Symbol_Publish_State+0x4c>)
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	701a      	strb	r2, [r3, #0]
		isSendOKFlag = RESET;
 8008a5e:	4b0f      	ldr	r3, [pc, #60]	; (8008a9c <SM_Mqtt_Receive_Greater_Than_Symbol_Publish_State+0x50>)
 8008a60:	2200      	movs	r2, #0
 8008a62:	701a      	strb	r2, [r3, #0]
		isErrorFlag = RESET;
 8008a64:	4b0e      	ldr	r3, [pc, #56]	; (8008aa0 <SM_Mqtt_Receive_Greater_Than_Symbol_Publish_State+0x54>)
 8008a66:	2200      	movs	r2, #0
 8008a68:	701a      	strb	r2, [r3, #0]
		isIPCloseFlag = RESET;
 8008a6a:	4b0e      	ldr	r3, [pc, #56]	; (8008aa4 <SM_Mqtt_Receive_Greater_Than_Symbol_Publish_State+0x58>)
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	701a      	strb	r2, [r3, #0]
		MQTTCommandSending((uint8_t *)mqttMessage, mqttMessageLength);
 8008a70:	4b0d      	ldr	r3, [pc, #52]	; (8008aa8 <SM_Mqtt_Receive_Greater_Than_Symbol_Publish_State+0x5c>)
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	4619      	mov	r1, r3
 8008a76:	480d      	ldr	r0, [pc, #52]	; (8008aac <SM_Mqtt_Receive_Greater_Than_Symbol_Publish_State+0x60>)
 8008a78:	f000 fe14 	bl	80096a4 <MQTTCommandSending>
		mqttState = MQTT_WAIT_FOR_RESPONSE_FROM_PUBLISH_STATE;
 8008a7c:	4b0c      	ldr	r3, [pc, #48]	; (8008ab0 <SM_Mqtt_Receive_Greater_Than_Symbol_Publish_State+0x64>)
 8008a7e:	220a      	movs	r2, #10
 8008a80:	701a      	strb	r2, [r3, #0]
	} else if(is_Mqtt_Command_Timeout()){
		mqttState = MAX_MQTT_NUMBER_STATES;
	}
}
 8008a82:	e007      	b.n	8008a94 <SM_Mqtt_Receive_Greater_Than_Symbol_Publish_State+0x48>
	} else if(is_Mqtt_Command_Timeout()){
 8008a84:	f7ff fc80 	bl	8008388 <is_Mqtt_Command_Timeout>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d002      	beq.n	8008a94 <SM_Mqtt_Receive_Greater_Than_Symbol_Publish_State+0x48>
		mqttState = MAX_MQTT_NUMBER_STATES;
 8008a8e:	4b08      	ldr	r3, [pc, #32]	; (8008ab0 <SM_Mqtt_Receive_Greater_Than_Symbol_Publish_State+0x64>)
 8008a90:	2211      	movs	r2, #17
 8008a92:	701a      	strb	r2, [r3, #0]
}
 8008a94:	bf00      	nop
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	2000020d 	.word	0x2000020d
 8008a9c:	2000020e 	.word	0x2000020e
 8008aa0:	2000020a 	.word	0x2000020a
 8008aa4:	2000020b 	.word	0x2000020b
 8008aa8:	20002b4c 	.word	0x20002b4c
 8008aac:	20002be4 	.word	0x20002be4
 8008ab0:	2000021f 	.word	0x2000021f

08008ab4 <SM_Mqtt_Wait_For_Response_From_Publish_State>:
void SM_Mqtt_Wait_For_Response_From_Publish_State(void){
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	af00      	add	r7, sp, #0
	if(isSendOKFlag){
 8008ab8:	4b15      	ldr	r3, [pc, #84]	; (8008b10 <SM_Mqtt_Wait_For_Response_From_Publish_State+0x5c>)
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d006      	beq.n	8008ace <SM_Mqtt_Wait_For_Response_From_Publish_State+0x1a>
		isSendOKFlag = RESET;
 8008ac0:	4b13      	ldr	r3, [pc, #76]	; (8008b10 <SM_Mqtt_Wait_For_Response_From_Publish_State+0x5c>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	701a      	strb	r2, [r3, #0]
		mqttState = MQTT_WAIT_FOR_NEW_COMMAND;
 8008ac6:	4b13      	ldr	r3, [pc, #76]	; (8008b14 <SM_Mqtt_Wait_For_Response_From_Publish_State+0x60>)
 8008ac8:	2210      	movs	r2, #16
 8008aca:	701a      	strb	r2, [r3, #0]
		mqttState = MAX_MQTT_NUMBER_STATES;
	} else if(isIPCloseFlag){
		isIPCloseFlag = RESET;
		mqttState = MAX_MQTT_NUMBER_STATES;
	}
}
 8008acc:	e01d      	b.n	8008b0a <SM_Mqtt_Wait_For_Response_From_Publish_State+0x56>
	} else if(isErrorFlag){
 8008ace:	4b12      	ldr	r3, [pc, #72]	; (8008b18 <SM_Mqtt_Wait_For_Response_From_Publish_State+0x64>)
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d006      	beq.n	8008ae4 <SM_Mqtt_Wait_For_Response_From_Publish_State+0x30>
		isErrorFlag = RESET;
 8008ad6:	4b10      	ldr	r3, [pc, #64]	; (8008b18 <SM_Mqtt_Wait_For_Response_From_Publish_State+0x64>)
 8008ad8:	2200      	movs	r2, #0
 8008ada:	701a      	strb	r2, [r3, #0]
		mqttState = MAX_MQTT_NUMBER_STATES;
 8008adc:	4b0d      	ldr	r3, [pc, #52]	; (8008b14 <SM_Mqtt_Wait_For_Response_From_Publish_State+0x60>)
 8008ade:	2211      	movs	r2, #17
 8008ae0:	701a      	strb	r2, [r3, #0]
}
 8008ae2:	e012      	b.n	8008b0a <SM_Mqtt_Wait_For_Response_From_Publish_State+0x56>
	} else if(is_Mqtt_Command_Timeout()){
 8008ae4:	f7ff fc50 	bl	8008388 <is_Mqtt_Command_Timeout>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d003      	beq.n	8008af6 <SM_Mqtt_Wait_For_Response_From_Publish_State+0x42>
		mqttState = MAX_MQTT_NUMBER_STATES;
 8008aee:	4b09      	ldr	r3, [pc, #36]	; (8008b14 <SM_Mqtt_Wait_For_Response_From_Publish_State+0x60>)
 8008af0:	2211      	movs	r2, #17
 8008af2:	701a      	strb	r2, [r3, #0]
}
 8008af4:	e009      	b.n	8008b0a <SM_Mqtt_Wait_For_Response_From_Publish_State+0x56>
	} else if(isIPCloseFlag){
 8008af6:	4b09      	ldr	r3, [pc, #36]	; (8008b1c <SM_Mqtt_Wait_For_Response_From_Publish_State+0x68>)
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d005      	beq.n	8008b0a <SM_Mqtt_Wait_For_Response_From_Publish_State+0x56>
		isIPCloseFlag = RESET;
 8008afe:	4b07      	ldr	r3, [pc, #28]	; (8008b1c <SM_Mqtt_Wait_For_Response_From_Publish_State+0x68>)
 8008b00:	2200      	movs	r2, #0
 8008b02:	701a      	strb	r2, [r3, #0]
		mqttState = MAX_MQTT_NUMBER_STATES;
 8008b04:	4b03      	ldr	r3, [pc, #12]	; (8008b14 <SM_Mqtt_Wait_For_Response_From_Publish_State+0x60>)
 8008b06:	2211      	movs	r2, #17
 8008b08:	701a      	strb	r2, [r3, #0]
}
 8008b0a:	bf00      	nop
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	2000020e 	.word	0x2000020e
 8008b14:	2000021f 	.word	0x2000021f
 8008b18:	2000020a 	.word	0x2000020a
 8008b1c:	2000020b 	.word	0x2000020b

08008b20 <SM_Mqtt_Disconnect>:
void SM_Mqtt_Disconnect(void){
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
	SCH_Delete_Task(mqtt_Timeout_Task_Index);
 8008b24:	4b0c      	ldr	r3, [pc, #48]	; (8008b58 <SM_Mqtt_Disconnect+0x38>)
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7fe fffb 	bl	8007b24 <SCH_Delete_Task>
	Mqtt_Clear_Timeout_Flag();
 8008b2e:	f7ff fc13 	bl	8008358 <Mqtt_Clear_Timeout_Flag>
	mqtt_Timeout_Task_Index = SCH_Add_Task(Mqtt_Command_Timeout, MQTT_COMMAND_TIME_OUT,0);
 8008b32:	2200      	movs	r2, #0
 8008b34:	f241 3188 	movw	r1, #5000	; 0x1388
 8008b38:	4808      	ldr	r0, [pc, #32]	; (8008b5c <SM_Mqtt_Disconnect+0x3c>)
 8008b3a:	f7fe ff79 	bl	8007a30 <SCH_Add_Task>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	461a      	mov	r2, r3
 8008b42:	4b05      	ldr	r3, [pc, #20]	; (8008b58 <SM_Mqtt_Disconnect+0x38>)
 8008b44:	701a      	strb	r2, [r3, #0]
	ATcommandSending((uint8_t *)MQTTCLOSE_COMMAND);
 8008b46:	4806      	ldr	r0, [pc, #24]	; (8008b60 <SM_Mqtt_Disconnect+0x40>)
 8008b48:	f000 fd9c 	bl	8009684 <ATcommandSending>
	mqttState = MQTT_WAIT_FOR_RESPONSE_FROM_DISCONNECT_STATE;
 8008b4c:	4b05      	ldr	r3, [pc, #20]	; (8008b64 <SM_Mqtt_Disconnect+0x44>)
 8008b4e:	220f      	movs	r2, #15
 8008b50:	701a      	strb	r2, [r3, #0]
}
 8008b52:	bf00      	nop
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	200000cd 	.word	0x200000cd
 8008b5c:	08008371 	.word	0x08008371
 8008b60:	0800ad24 	.word	0x0800ad24
 8008b64:	2000021f 	.word	0x2000021f

08008b68 <SM_Wait_For_Response_From_Disconnect_State>:
void SM_Wait_For_Response_From_Disconnect_State(void){
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	af00      	add	r7, sp, #0
	if(isOKFlag){
 8008b6c:	4b0f      	ldr	r3, [pc, #60]	; (8008bac <SM_Wait_For_Response_From_Disconnect_State+0x44>)
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d006      	beq.n	8008b82 <SM_Wait_For_Response_From_Disconnect_State+0x1a>
		isOKFlag = RESET;
 8008b74:	4b0d      	ldr	r3, [pc, #52]	; (8008bac <SM_Wait_For_Response_From_Disconnect_State+0x44>)
 8008b76:	2200      	movs	r2, #0
 8008b78:	701a      	strb	r2, [r3, #0]
		mqttState = MQTT_OPEN_STATE;
 8008b7a:	4b0d      	ldr	r3, [pc, #52]	; (8008bb0 <SM_Wait_For_Response_From_Disconnect_State+0x48>)
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	701a      	strb	r2, [r3, #0]
 8008b80:	e009      	b.n	8008b96 <SM_Wait_For_Response_From_Disconnect_State+0x2e>
	} else if(isErrorFlag){
 8008b82:	4b0c      	ldr	r3, [pc, #48]	; (8008bb4 <SM_Wait_For_Response_From_Disconnect_State+0x4c>)
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d005      	beq.n	8008b96 <SM_Wait_For_Response_From_Disconnect_State+0x2e>
		isErrorFlag = RESET;
 8008b8a:	4b0a      	ldr	r3, [pc, #40]	; (8008bb4 <SM_Wait_For_Response_From_Disconnect_State+0x4c>)
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	701a      	strb	r2, [r3, #0]
		mqttState = MAX_MQTT_NUMBER_STATES;
 8008b90:	4b07      	ldr	r3, [pc, #28]	; (8008bb0 <SM_Wait_For_Response_From_Disconnect_State+0x48>)
 8008b92:	2211      	movs	r2, #17
 8008b94:	701a      	strb	r2, [r3, #0]
	}

	if(is_Mqtt_Command_Timeout()){
 8008b96:	f7ff fbf7 	bl	8008388 <is_Mqtt_Command_Timeout>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d002      	beq.n	8008ba6 <SM_Wait_For_Response_From_Disconnect_State+0x3e>
		mqttState = MAX_MQTT_NUMBER_STATES;
 8008ba0:	4b03      	ldr	r3, [pc, #12]	; (8008bb0 <SM_Wait_For_Response_From_Disconnect_State+0x48>)
 8008ba2:	2211      	movs	r2, #17
 8008ba4:	701a      	strb	r2, [r3, #0]
	}
}
 8008ba6:	bf00      	nop
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	20000209 	.word	0x20000209
 8008bb0:	2000021f 	.word	0x2000021f
 8008bb4:	2000020a 	.word	0x2000020a

08008bb8 <SM_Mqtt_Ping_Request>:

void SM_Mqtt_Ping_Request(void) {
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	af00      	add	r7, sp, #0
	SCH_Delete_Task(mqtt_Timeout_Task_Index);
 8008bbc:	4b0b      	ldr	r3, [pc, #44]	; (8008bec <SM_Mqtt_Ping_Request+0x34>)
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7fe ffaf 	bl	8007b24 <SCH_Delete_Task>
	Mqtt_Clear_Timeout_Flag();
 8008bc6:	f7ff fbc7 	bl	8008358 <Mqtt_Clear_Timeout_Flag>
	mqtt_Timeout_Task_Index = SCH_Add_Task(Mqtt_Command_Timeout, MQTT_COMMAND_TIME_OUT,0);
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f241 3188 	movw	r1, #5000	; 0x1388
 8008bd0:	4807      	ldr	r0, [pc, #28]	; (8008bf0 <SM_Mqtt_Ping_Request+0x38>)
 8008bd2:	f7fe ff2d 	bl	8007a30 <SCH_Add_Task>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	461a      	mov	r2, r3
 8008bda:	4b04      	ldr	r3, [pc, #16]	; (8008bec <SM_Mqtt_Ping_Request+0x34>)
 8008bdc:	701a      	strb	r2, [r3, #0]
	Setup_Mqtt_Ping_Request_Message();
 8008bde:	f000 faa1 	bl	8009124 <Setup_Mqtt_Ping_Request_Message>
	mqttState = MQTT_RECEIVE_GREATER_THAN_SYMBOL_PING_REQUEST_STATE;
 8008be2:	4b04      	ldr	r3, [pc, #16]	; (8008bf4 <SM_Mqtt_Ping_Request+0x3c>)
 8008be4:	220c      	movs	r2, #12
 8008be6:	701a      	strb	r2, [r3, #0]
}
 8008be8:	bf00      	nop
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	200000cd 	.word	0x200000cd
 8008bf0:	08008371 	.word	0x08008371
 8008bf4:	2000021f 	.word	0x2000021f

08008bf8 <SM_Mqtt_Receive_Greater_Than_Symbol_Ping_Request_State>:

void SM_Mqtt_Receive_Greater_Than_Symbol_Ping_Request_State(void){
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	af00      	add	r7, sp, #0
	if(isReadyToSendDataToServer){
 8008bfc:	4b10      	ldr	r3, [pc, #64]	; (8008c40 <SM_Mqtt_Receive_Greater_Than_Symbol_Ping_Request_State+0x48>)
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d012      	beq.n	8008c2a <SM_Mqtt_Receive_Greater_Than_Symbol_Ping_Request_State+0x32>
		isReadyToSendDataToServer = RESET;
 8008c04:	4b0e      	ldr	r3, [pc, #56]	; (8008c40 <SM_Mqtt_Receive_Greater_Than_Symbol_Ping_Request_State+0x48>)
 8008c06:	2200      	movs	r2, #0
 8008c08:	701a      	strb	r2, [r3, #0]
		isSendOKFlag = RESET;
 8008c0a:	4b0e      	ldr	r3, [pc, #56]	; (8008c44 <SM_Mqtt_Receive_Greater_Than_Symbol_Ping_Request_State+0x4c>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	701a      	strb	r2, [r3, #0]
		isErrorFlag = RESET;
 8008c10:	4b0d      	ldr	r3, [pc, #52]	; (8008c48 <SM_Mqtt_Receive_Greater_Than_Symbol_Ping_Request_State+0x50>)
 8008c12:	2200      	movs	r2, #0
 8008c14:	701a      	strb	r2, [r3, #0]
		MQTTCommandSending((uint8_t *)mqttMessage, mqttMessageLength);
 8008c16:	4b0d      	ldr	r3, [pc, #52]	; (8008c4c <SM_Mqtt_Receive_Greater_Than_Symbol_Ping_Request_State+0x54>)
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	480c      	ldr	r0, [pc, #48]	; (8008c50 <SM_Mqtt_Receive_Greater_Than_Symbol_Ping_Request_State+0x58>)
 8008c1e:	f000 fd41 	bl	80096a4 <MQTTCommandSending>
		mqttState = MQTT_WAIT_FOR_RESPONSE_FROM_REQUEST_STATE;
 8008c22:	4b0c      	ldr	r3, [pc, #48]	; (8008c54 <SM_Mqtt_Receive_Greater_Than_Symbol_Ping_Request_State+0x5c>)
 8008c24:	220d      	movs	r2, #13
 8008c26:	701a      	strb	r2, [r3, #0]
	} else if(is_Mqtt_Command_Timeout()){
		mqttState = MAX_MQTT_NUMBER_STATES;
	}
}
 8008c28:	e007      	b.n	8008c3a <SM_Mqtt_Receive_Greater_Than_Symbol_Ping_Request_State+0x42>
	} else if(is_Mqtt_Command_Timeout()){
 8008c2a:	f7ff fbad 	bl	8008388 <is_Mqtt_Command_Timeout>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d002      	beq.n	8008c3a <SM_Mqtt_Receive_Greater_Than_Symbol_Ping_Request_State+0x42>
		mqttState = MAX_MQTT_NUMBER_STATES;
 8008c34:	4b07      	ldr	r3, [pc, #28]	; (8008c54 <SM_Mqtt_Receive_Greater_Than_Symbol_Ping_Request_State+0x5c>)
 8008c36:	2211      	movs	r2, #17
 8008c38:	701a      	strb	r2, [r3, #0]
}
 8008c3a:	bf00      	nop
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	2000020d 	.word	0x2000020d
 8008c44:	2000020e 	.word	0x2000020e
 8008c48:	2000020a 	.word	0x2000020a
 8008c4c:	20002b4c 	.word	0x20002b4c
 8008c50:	20002be4 	.word	0x20002be4
 8008c54:	2000021f 	.word	0x2000021f

08008c58 <SM_Wait_For_Mqtt_Ping_Resquest_Response>:
void SM_Wait_For_Mqtt_Ping_Resquest_Response(void){
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	af00      	add	r7, sp, #0
	if(isSendOKFlag){
 8008c5c:	4b0f      	ldr	r3, [pc, #60]	; (8008c9c <SM_Wait_For_Mqtt_Ping_Resquest_Response+0x44>)
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d006      	beq.n	8008c72 <SM_Wait_For_Mqtt_Ping_Resquest_Response+0x1a>
		isSendOKFlag = RESET;
 8008c64:	4b0d      	ldr	r3, [pc, #52]	; (8008c9c <SM_Wait_For_Mqtt_Ping_Resquest_Response+0x44>)
 8008c66:	2200      	movs	r2, #0
 8008c68:	701a      	strb	r2, [r3, #0]
		mqttState = MQTT_WAIT_FOR_NEW_COMMAND;
 8008c6a:	4b0d      	ldr	r3, [pc, #52]	; (8008ca0 <SM_Wait_For_Mqtt_Ping_Resquest_Response+0x48>)
 8008c6c:	2210      	movs	r2, #16
 8008c6e:	701a      	strb	r2, [r3, #0]
		isErrorFlag = RESET;
		mqttState = MAX_MQTT_NUMBER_STATES;
	} else if(is_Mqtt_Command_Timeout()){
		mqttState = MAX_MQTT_NUMBER_STATES;
	}
}
 8008c70:	e012      	b.n	8008c98 <SM_Wait_For_Mqtt_Ping_Resquest_Response+0x40>
	} else if(isErrorFlag){
 8008c72:	4b0c      	ldr	r3, [pc, #48]	; (8008ca4 <SM_Wait_For_Mqtt_Ping_Resquest_Response+0x4c>)
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d006      	beq.n	8008c88 <SM_Wait_For_Mqtt_Ping_Resquest_Response+0x30>
		isErrorFlag = RESET;
 8008c7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ca4 <SM_Wait_For_Mqtt_Ping_Resquest_Response+0x4c>)
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	701a      	strb	r2, [r3, #0]
		mqttState = MAX_MQTT_NUMBER_STATES;
 8008c80:	4b07      	ldr	r3, [pc, #28]	; (8008ca0 <SM_Wait_For_Mqtt_Ping_Resquest_Response+0x48>)
 8008c82:	2211      	movs	r2, #17
 8008c84:	701a      	strb	r2, [r3, #0]
}
 8008c86:	e007      	b.n	8008c98 <SM_Wait_For_Mqtt_Ping_Resquest_Response+0x40>
	} else if(is_Mqtt_Command_Timeout()){
 8008c88:	f7ff fb7e 	bl	8008388 <is_Mqtt_Command_Timeout>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d002      	beq.n	8008c98 <SM_Wait_For_Mqtt_Ping_Resquest_Response+0x40>
		mqttState = MAX_MQTT_NUMBER_STATES;
 8008c92:	4b03      	ldr	r3, [pc, #12]	; (8008ca0 <SM_Wait_For_Mqtt_Ping_Resquest_Response+0x48>)
 8008c94:	2211      	movs	r2, #17
 8008c96:	701a      	strb	r2, [r3, #0]
}
 8008c98:	bf00      	nop
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	2000020e 	.word	0x2000020e
 8008ca0:	2000021f 	.word	0x2000021f
 8008ca4:	2000020a 	.word	0x2000020a

08008ca8 <Setup_Mqtt_Connect_Message>:
///////////////////////////////////////////////////////////////////////////
void Setup_Mqtt_Connect_Message(void){
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0

#if(CLOUD_MQTT == 1)
	uint8_t i;
	uint8_t clientIdLength = GetStringLength((uint8_t*)CLIENT_ID);
 8008cae:	4898      	ldr	r0, [pc, #608]	; (8008f10 <Setup_Mqtt_Connect_Message+0x268>)
 8008cb0:	f000 fabe 	bl	8009230 <GetStringLength>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	71bb      	strb	r3, [r7, #6]
	uint8_t usernameLength = GetStringLength((uint8_t*)USERNAME);
 8008cb8:	4896      	ldr	r0, [pc, #600]	; (8008f14 <Setup_Mqtt_Connect_Message+0x26c>)
 8008cba:	f000 fab9 	bl	8009230 <GetStringLength>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	717b      	strb	r3, [r7, #5]
	uint8_t passwordLength = GetStringLength((uint8_t*)PASSWORD);
 8008cc2:	4895      	ldr	r0, [pc, #596]	; (8008f18 <Setup_Mqtt_Connect_Message+0x270>)
 8008cc4:	f000 fab4 	bl	8009230 <GetStringLength>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	713b      	strb	r3, [r7, #4]

	Clear_Mqtt_Message_Buffer();
 8008ccc:	f7ff fba2 	bl	8008414 <Clear_Mqtt_Message_Buffer>

	// Header
	mqttMessage[mqttMessageIndex++] = MQTT_MSG_CONNECT;
 8008cd0:	4b92      	ldr	r3, [pc, #584]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	1c5a      	adds	r2, r3, #1
 8008cd6:	b2d1      	uxtb	r1, r2
 8008cd8:	4a90      	ldr	r2, [pc, #576]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008cda:	7011      	strb	r1, [r2, #0]
 8008cdc:	461a      	mov	r2, r3
 8008cde:	4b90      	ldr	r3, [pc, #576]	; (8008f20 <Setup_Mqtt_Connect_Message+0x278>)
 8008ce0:	2110      	movs	r1, #16
 8008ce2:	5499      	strb	r1, [r3, r2]

	mqttMessage[mqttMessageIndex++] = 18 + clientIdLength + usernameLength + passwordLength;    // Remaining length of the message (bytes 2-13 + clientId)
 8008ce4:	79ba      	ldrb	r2, [r7, #6]
 8008ce6:	797b      	ldrb	r3, [r7, #5]
 8008ce8:	4413      	add	r3, r2
 8008cea:	b2da      	uxtb	r2, r3
 8008cec:	793b      	ldrb	r3, [r7, #4]
 8008cee:	4413      	add	r3, r2
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	4b8a      	ldr	r3, [pc, #552]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	1c59      	adds	r1, r3, #1
 8008cf8:	b2c8      	uxtb	r0, r1
 8008cfa:	4988      	ldr	r1, [pc, #544]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008cfc:	7008      	strb	r0, [r1, #0]
 8008cfe:	4619      	mov	r1, r3
 8008d00:	f102 0312 	add.w	r3, r2, #18
 8008d04:	b2da      	uxtb	r2, r3
 8008d06:	4b86      	ldr	r3, [pc, #536]	; (8008f20 <Setup_Mqtt_Connect_Message+0x278>)
 8008d08:	545a      	strb	r2, [r3, r1]
	// Protocol name
	mqttMessage[mqttMessageIndex++] = 0;                      // Protocol Name Length MSB
 8008d0a:	4b84      	ldr	r3, [pc, #528]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	1c5a      	adds	r2, r3, #1
 8008d10:	b2d1      	uxtb	r1, r2
 8008d12:	4a82      	ldr	r2, [pc, #520]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008d14:	7011      	strb	r1, [r2, #0]
 8008d16:	461a      	mov	r2, r3
 8008d18:	4b81      	ldr	r3, [pc, #516]	; (8008f20 <Setup_Mqtt_Connect_Message+0x278>)
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	5499      	strb	r1, [r3, r2]
	mqttMessage[mqttMessageIndex++] = 6;                      // Protocol Name Length LSB
 8008d1e:	4b7f      	ldr	r3, [pc, #508]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	1c5a      	adds	r2, r3, #1
 8008d24:	b2d1      	uxtb	r1, r2
 8008d26:	4a7d      	ldr	r2, [pc, #500]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008d28:	7011      	strb	r1, [r2, #0]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	4b7c      	ldr	r3, [pc, #496]	; (8008f20 <Setup_Mqtt_Connect_Message+0x278>)
 8008d2e:	2106      	movs	r1, #6
 8008d30:	5499      	strb	r1, [r3, r2]
	mqttMessage[mqttMessageIndex++] = 'M';
 8008d32:	4b7a      	ldr	r3, [pc, #488]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	1c5a      	adds	r2, r3, #1
 8008d38:	b2d1      	uxtb	r1, r2
 8008d3a:	4a78      	ldr	r2, [pc, #480]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008d3c:	7011      	strb	r1, [r2, #0]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	4b77      	ldr	r3, [pc, #476]	; (8008f20 <Setup_Mqtt_Connect_Message+0x278>)
 8008d42:	214d      	movs	r1, #77	; 0x4d
 8008d44:	5499      	strb	r1, [r3, r2]
	mqttMessage[mqttMessageIndex++] = 'Q';
 8008d46:	4b75      	ldr	r3, [pc, #468]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	1c5a      	adds	r2, r3, #1
 8008d4c:	b2d1      	uxtb	r1, r2
 8008d4e:	4a73      	ldr	r2, [pc, #460]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008d50:	7011      	strb	r1, [r2, #0]
 8008d52:	461a      	mov	r2, r3
 8008d54:	4b72      	ldr	r3, [pc, #456]	; (8008f20 <Setup_Mqtt_Connect_Message+0x278>)
 8008d56:	2151      	movs	r1, #81	; 0x51
 8008d58:	5499      	strb	r1, [r3, r2]
	mqttMessage[mqttMessageIndex++] = 'I';
 8008d5a:	4b70      	ldr	r3, [pc, #448]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	1c5a      	adds	r2, r3, #1
 8008d60:	b2d1      	uxtb	r1, r2
 8008d62:	4a6e      	ldr	r2, [pc, #440]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008d64:	7011      	strb	r1, [r2, #0]
 8008d66:	461a      	mov	r2, r3
 8008d68:	4b6d      	ldr	r3, [pc, #436]	; (8008f20 <Setup_Mqtt_Connect_Message+0x278>)
 8008d6a:	2149      	movs	r1, #73	; 0x49
 8008d6c:	5499      	strb	r1, [r3, r2]
	mqttMessage[mqttMessageIndex++] = 's';
 8008d6e:	4b6b      	ldr	r3, [pc, #428]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	1c5a      	adds	r2, r3, #1
 8008d74:	b2d1      	uxtb	r1, r2
 8008d76:	4a69      	ldr	r2, [pc, #420]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008d78:	7011      	strb	r1, [r2, #0]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	4b68      	ldr	r3, [pc, #416]	; (8008f20 <Setup_Mqtt_Connect_Message+0x278>)
 8008d7e:	2173      	movs	r1, #115	; 0x73
 8008d80:	5499      	strb	r1, [r3, r2]
	mqttMessage[mqttMessageIndex++] = 'd';
 8008d82:	4b66      	ldr	r3, [pc, #408]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	1c5a      	adds	r2, r3, #1
 8008d88:	b2d1      	uxtb	r1, r2
 8008d8a:	4a64      	ldr	r2, [pc, #400]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008d8c:	7011      	strb	r1, [r2, #0]
 8008d8e:	461a      	mov	r2, r3
 8008d90:	4b63      	ldr	r3, [pc, #396]	; (8008f20 <Setup_Mqtt_Connect_Message+0x278>)
 8008d92:	2164      	movs	r1, #100	; 0x64
 8008d94:	5499      	strb	r1, [r3, r2]
	mqttMessage[mqttMessageIndex++] = 'p';
 8008d96:	4b61      	ldr	r3, [pc, #388]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	1c5a      	adds	r2, r3, #1
 8008d9c:	b2d1      	uxtb	r1, r2
 8008d9e:	4a5f      	ldr	r2, [pc, #380]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008da0:	7011      	strb	r1, [r2, #0]
 8008da2:	461a      	mov	r2, r3
 8008da4:	4b5e      	ldr	r3, [pc, #376]	; (8008f20 <Setup_Mqtt_Connect_Message+0x278>)
 8008da6:	2170      	movs	r1, #112	; 0x70
 8008da8:	5499      	strb	r1, [r3, r2]

	// Protocol level
	mqttMessage[mqttMessageIndex++] = 3;                      // MQTT Protocol version = 4 (mqtt 3.1.1)
 8008daa:	4b5c      	ldr	r3, [pc, #368]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	1c5a      	adds	r2, r3, #1
 8008db0:	b2d1      	uxtb	r1, r2
 8008db2:	4a5a      	ldr	r2, [pc, #360]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008db4:	7011      	strb	r1, [r2, #0]
 8008db6:	461a      	mov	r2, r3
 8008db8:	4b59      	ldr	r3, [pc, #356]	; (8008f20 <Setup_Mqtt_Connect_Message+0x278>)
 8008dba:	2103      	movs	r1, #3
 8008dbc:	5499      	strb	r1, [r3, r2]

	// Connection flags   2 for clean session
 //   mqttMessage[9] = 2;
	mqttMessage[mqttMessageIndex++] = 0b11000010;  //enable username, password, clean session
 8008dbe:	4b57      	ldr	r3, [pc, #348]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	1c5a      	adds	r2, r3, #1
 8008dc4:	b2d1      	uxtb	r1, r2
 8008dc6:	4a55      	ldr	r2, [pc, #340]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008dc8:	7011      	strb	r1, [r2, #0]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	4b54      	ldr	r3, [pc, #336]	; (8008f20 <Setup_Mqtt_Connect_Message+0x278>)
 8008dce:	21c2      	movs	r1, #194	; 0xc2
 8008dd0:	5499      	strb	r1, [r3, r2]

	// Keep-alive (maximum duration)
//	mqttMessage[mqttMessageIndex++] = 0x00;                     // Keep-alive Time Length MSB
//	mqttMessage[mqttMessageIndex++] = 0x3c;                     // Keep-alive Time Length LSB

	mqttMessage[mqttMessageIndex++] = 0x00;                     // Keep-alive Time Length MSB
 8008dd2:	4b52      	ldr	r3, [pc, #328]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	1c5a      	adds	r2, r3, #1
 8008dd8:	b2d1      	uxtb	r1, r2
 8008dda:	4a50      	ldr	r2, [pc, #320]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008ddc:	7011      	strb	r1, [r2, #0]
 8008dde:	461a      	mov	r2, r3
 8008de0:	4b4f      	ldr	r3, [pc, #316]	; (8008f20 <Setup_Mqtt_Connect_Message+0x278>)
 8008de2:	2100      	movs	r1, #0
 8008de4:	5499      	strb	r1, [r3, r2]
		mqttMessage[mqttMessageIndex++] = 0x0;                     // Keep-alive Time Length LSB
 8008de6:	4b4d      	ldr	r3, [pc, #308]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	1c5a      	adds	r2, r3, #1
 8008dec:	b2d1      	uxtb	r1, r2
 8008dee:	4a4b      	ldr	r2, [pc, #300]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008df0:	7011      	strb	r1, [r2, #0]
 8008df2:	461a      	mov	r2, r3
 8008df4:	4b4a      	ldr	r3, [pc, #296]	; (8008f20 <Setup_Mqtt_Connect_Message+0x278>)
 8008df6:	2100      	movs	r1, #0
 8008df8:	5499      	strb	r1, [r3, r2]

	// Client ID
	mqttMessage[mqttMessageIndex++] = 0;                     // Client ID length MSB
 8008dfa:	4b48      	ldr	r3, [pc, #288]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	1c5a      	adds	r2, r3, #1
 8008e00:	b2d1      	uxtb	r1, r2
 8008e02:	4a46      	ldr	r2, [pc, #280]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008e04:	7011      	strb	r1, [r2, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	4b45      	ldr	r3, [pc, #276]	; (8008f20 <Setup_Mqtt_Connect_Message+0x278>)
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	5499      	strb	r1, [r3, r2]
	mqttMessage[mqttMessageIndex++] = clientIdLength;        // Client ID length LSB
 8008e0e:	4b43      	ldr	r3, [pc, #268]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	1c5a      	adds	r2, r3, #1
 8008e14:	b2d1      	uxtb	r1, r2
 8008e16:	4a41      	ldr	r2, [pc, #260]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008e18:	7011      	strb	r1, [r2, #0]
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	4a40      	ldr	r2, [pc, #256]	; (8008f20 <Setup_Mqtt_Connect_Message+0x278>)
 8008e1e:	79bb      	ldrb	r3, [r7, #6]
 8008e20:	5453      	strb	r3, [r2, r1]
	for (i = 0; i < clientIdLength; i ++){
 8008e22:	2300      	movs	r3, #0
 8008e24:	71fb      	strb	r3, [r7, #7]
 8008e26:	e00e      	b.n	8008e46 <Setup_Mqtt_Connect_Message+0x19e>
		mqttMessage[mqttMessageIndex++] = CLIENT_ID[i];
 8008e28:	79fa      	ldrb	r2, [r7, #7]
 8008e2a:	4b3c      	ldr	r3, [pc, #240]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	1c59      	adds	r1, r3, #1
 8008e30:	b2c8      	uxtb	r0, r1
 8008e32:	493a      	ldr	r1, [pc, #232]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008e34:	7008      	strb	r0, [r1, #0]
 8008e36:	4619      	mov	r1, r3
 8008e38:	4b35      	ldr	r3, [pc, #212]	; (8008f10 <Setup_Mqtt_Connect_Message+0x268>)
 8008e3a:	5c9a      	ldrb	r2, [r3, r2]
 8008e3c:	4b38      	ldr	r3, [pc, #224]	; (8008f20 <Setup_Mqtt_Connect_Message+0x278>)
 8008e3e:	545a      	strb	r2, [r3, r1]
	for (i = 0; i < clientIdLength; i ++){
 8008e40:	79fb      	ldrb	r3, [r7, #7]
 8008e42:	3301      	adds	r3, #1
 8008e44:	71fb      	strb	r3, [r7, #7]
 8008e46:	79fa      	ldrb	r2, [r7, #7]
 8008e48:	79bb      	ldrb	r3, [r7, #6]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d3ec      	bcc.n	8008e28 <Setup_Mqtt_Connect_Message+0x180>
	}

	// Username
	mqttMessage[mqttMessageIndex++] = 0;                     // Client ID length MSB
 8008e4e:	4b33      	ldr	r3, [pc, #204]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	1c5a      	adds	r2, r3, #1
 8008e54:	b2d1      	uxtb	r1, r2
 8008e56:	4a31      	ldr	r2, [pc, #196]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008e58:	7011      	strb	r1, [r2, #0]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	4b30      	ldr	r3, [pc, #192]	; (8008f20 <Setup_Mqtt_Connect_Message+0x278>)
 8008e5e:	2100      	movs	r1, #0
 8008e60:	5499      	strb	r1, [r3, r2]
	mqttMessage[mqttMessageIndex++] = usernameLength;        // Client ID length LSB
 8008e62:	4b2e      	ldr	r3, [pc, #184]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	1c5a      	adds	r2, r3, #1
 8008e68:	b2d1      	uxtb	r1, r2
 8008e6a:	4a2c      	ldr	r2, [pc, #176]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008e6c:	7011      	strb	r1, [r2, #0]
 8008e6e:	4619      	mov	r1, r3
 8008e70:	4a2b      	ldr	r2, [pc, #172]	; (8008f20 <Setup_Mqtt_Connect_Message+0x278>)
 8008e72:	797b      	ldrb	r3, [r7, #5]
 8008e74:	5453      	strb	r3, [r2, r1]
	for (i = 0; i < usernameLength; i ++){
 8008e76:	2300      	movs	r3, #0
 8008e78:	71fb      	strb	r3, [r7, #7]
 8008e7a:	e00e      	b.n	8008e9a <Setup_Mqtt_Connect_Message+0x1f2>
		mqttMessage[mqttMessageIndex++] = USERNAME[i];
 8008e7c:	79fa      	ldrb	r2, [r7, #7]
 8008e7e:	4b27      	ldr	r3, [pc, #156]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	1c59      	adds	r1, r3, #1
 8008e84:	b2c8      	uxtb	r0, r1
 8008e86:	4925      	ldr	r1, [pc, #148]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008e88:	7008      	strb	r0, [r1, #0]
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	4b21      	ldr	r3, [pc, #132]	; (8008f14 <Setup_Mqtt_Connect_Message+0x26c>)
 8008e8e:	5c9a      	ldrb	r2, [r3, r2]
 8008e90:	4b23      	ldr	r3, [pc, #140]	; (8008f20 <Setup_Mqtt_Connect_Message+0x278>)
 8008e92:	545a      	strb	r2, [r3, r1]
	for (i = 0; i < usernameLength; i ++){
 8008e94:	79fb      	ldrb	r3, [r7, #7]
 8008e96:	3301      	adds	r3, #1
 8008e98:	71fb      	strb	r3, [r7, #7]
 8008e9a:	79fa      	ldrb	r2, [r7, #7]
 8008e9c:	797b      	ldrb	r3, [r7, #5]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d3ec      	bcc.n	8008e7c <Setup_Mqtt_Connect_Message+0x1d4>
	}

	// Password
	mqttMessage[mqttMessageIndex++] = 0;                     // Client ID length MSB
 8008ea2:	4b1e      	ldr	r3, [pc, #120]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	1c5a      	adds	r2, r3, #1
 8008ea8:	b2d1      	uxtb	r1, r2
 8008eaa:	4a1c      	ldr	r2, [pc, #112]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008eac:	7011      	strb	r1, [r2, #0]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	4b1b      	ldr	r3, [pc, #108]	; (8008f20 <Setup_Mqtt_Connect_Message+0x278>)
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	5499      	strb	r1, [r3, r2]
	mqttMessage[mqttMessageIndex++] = passwordLength;        // Client ID length LSB
 8008eb6:	4b19      	ldr	r3, [pc, #100]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	1c5a      	adds	r2, r3, #1
 8008ebc:	b2d1      	uxtb	r1, r2
 8008ebe:	4a17      	ldr	r2, [pc, #92]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008ec0:	7011      	strb	r1, [r2, #0]
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	4a16      	ldr	r2, [pc, #88]	; (8008f20 <Setup_Mqtt_Connect_Message+0x278>)
 8008ec6:	793b      	ldrb	r3, [r7, #4]
 8008ec8:	5453      	strb	r3, [r2, r1]
	for (i = 0; i < passwordLength; i ++){
 8008eca:	2300      	movs	r3, #0
 8008ecc:	71fb      	strb	r3, [r7, #7]
 8008ece:	e00e      	b.n	8008eee <Setup_Mqtt_Connect_Message+0x246>
		mqttMessage[mqttMessageIndex++] = PASSWORD[i];
 8008ed0:	79fa      	ldrb	r2, [r7, #7]
 8008ed2:	4b12      	ldr	r3, [pc, #72]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	1c59      	adds	r1, r3, #1
 8008ed8:	b2c8      	uxtb	r0, r1
 8008eda:	4910      	ldr	r1, [pc, #64]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008edc:	7008      	strb	r0, [r1, #0]
 8008ede:	4619      	mov	r1, r3
 8008ee0:	4b0d      	ldr	r3, [pc, #52]	; (8008f18 <Setup_Mqtt_Connect_Message+0x270>)
 8008ee2:	5c9a      	ldrb	r2, [r3, r2]
 8008ee4:	4b0e      	ldr	r3, [pc, #56]	; (8008f20 <Setup_Mqtt_Connect_Message+0x278>)
 8008ee6:	545a      	strb	r2, [r3, r1]
	for (i = 0; i < passwordLength; i ++){
 8008ee8:	79fb      	ldrb	r3, [r7, #7]
 8008eea:	3301      	adds	r3, #1
 8008eec:	71fb      	strb	r3, [r7, #7]
 8008eee:	79fa      	ldrb	r2, [r7, #7]
 8008ef0:	793b      	ldrb	r3, [r7, #4]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d3ec      	bcc.n	8008ed0 <Setup_Mqtt_Connect_Message+0x228>
	}
	mqttMessageLength = mqttMessageIndex;
 8008ef6:	4b09      	ldr	r3, [pc, #36]	; (8008f1c <Setup_Mqtt_Connect_Message+0x274>)
 8008ef8:	781a      	ldrb	r2, [r3, #0]
 8008efa:	4b0a      	ldr	r3, [pc, #40]	; (8008f24 <Setup_Mqtt_Connect_Message+0x27c>)
 8008efc:	701a      	strb	r2, [r3, #0]
	SM_Send_Data(mqttMessageLength);
 8008efe:	4b09      	ldr	r3, [pc, #36]	; (8008f24 <Setup_Mqtt_Connect_Message+0x27c>)
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7ff faa4 	bl	8008450 <SM_Send_Data>
		}
	}
	mqttMessageLength = mqttMessageIndex;
	SM_Send_Data(mqttMessageLength);
#endif
}
 8008f08:	bf00      	nop
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	0800ad34 	.word	0x0800ad34
 8008f14:	0800ad70 	.word	0x0800ad70
 8008f18:	0800ad7c 	.word	0x0800ad7c
 8008f1c:	2000021a 	.word	0x2000021a
 8008f20:	20002be4 	.word	0x20002be4
 8008f24:	20002b4c 	.word	0x20002b4c

08008f28 <Setup_Mqtt_Subscribe_Message>:
//	}
//	mqttMessageLength = mqttMessageIndex;
//	SM_Send_Data(mqttMessageLength);
//}
//////////////////////////////////////////////////////////////////////////
void Setup_Mqtt_Subscribe_Message(const uint8_t * topic){
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8008f30:	2300      	movs	r3, #0
 8008f32:	73fb      	strb	r3, [r7, #15]
	uint8_t lenTopic = GetStringLength((uint8_t*)topic);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 f97b 	bl	8009230 <GetStringLength>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	73bb      	strb	r3, [r7, #14]

	Clear_Mqtt_Message_Buffer();
 8008f3e:	f7ff fa69 	bl	8008414 <Clear_Mqtt_Message_Buffer>
	mqttMessageIndex = 0;
 8008f42:	4b37      	ldr	r3, [pc, #220]	; (8009020 <Setup_Mqtt_Subscribe_Message+0xf8>)
 8008f44:	2200      	movs	r2, #0
 8008f46:	701a      	strb	r2, [r3, #0]
	// Write fixed header
	mqttMessage[mqttMessageIndex++] = MQTT_SUBSCRIBE;
 8008f48:	4b35      	ldr	r3, [pc, #212]	; (8009020 <Setup_Mqtt_Subscribe_Message+0xf8>)
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	1c5a      	adds	r2, r3, #1
 8008f4e:	b2d1      	uxtb	r1, r2
 8008f50:	4a33      	ldr	r2, [pc, #204]	; (8009020 <Setup_Mqtt_Subscribe_Message+0xf8>)
 8008f52:	7011      	strb	r1, [r2, #0]
 8008f54:	461a      	mov	r2, r3
 8008f56:	4b33      	ldr	r3, [pc, #204]	; (8009024 <Setup_Mqtt_Subscribe_Message+0xfc>)
 8008f58:	2182      	movs	r1, #130	; 0x82
 8008f5a:	5499      	strb	r1, [r3, r2]
	mqttMessage[mqttMessageIndex++] = 5 + lenTopic;
 8008f5c:	4b30      	ldr	r3, [pc, #192]	; (8009020 <Setup_Mqtt_Subscribe_Message+0xf8>)
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	1c5a      	adds	r2, r3, #1
 8008f62:	b2d1      	uxtb	r1, r2
 8008f64:	4a2e      	ldr	r2, [pc, #184]	; (8009020 <Setup_Mqtt_Subscribe_Message+0xf8>)
 8008f66:	7011      	strb	r1, [r2, #0]
 8008f68:	461a      	mov	r2, r3
 8008f6a:	7bbb      	ldrb	r3, [r7, #14]
 8008f6c:	3305      	adds	r3, #5
 8008f6e:	b2d9      	uxtb	r1, r3
 8008f70:	4b2c      	ldr	r3, [pc, #176]	; (8009024 <Setup_Mqtt_Subscribe_Message+0xfc>)
 8008f72:	5499      	strb	r1, [r3, r2]

	//Variable Header
	mqttMessage[mqttMessageIndex++] = 0; // MSB
 8008f74:	4b2a      	ldr	r3, [pc, #168]	; (8009020 <Setup_Mqtt_Subscribe_Message+0xf8>)
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	1c5a      	adds	r2, r3, #1
 8008f7a:	b2d1      	uxtb	r1, r2
 8008f7c:	4a28      	ldr	r2, [pc, #160]	; (8009020 <Setup_Mqtt_Subscribe_Message+0xf8>)
 8008f7e:	7011      	strb	r1, [r2, #0]
 8008f80:	461a      	mov	r2, r3
 8008f82:	4b28      	ldr	r3, [pc, #160]	; (8009024 <Setup_Mqtt_Subscribe_Message+0xfc>)
 8008f84:	2100      	movs	r1, #0
 8008f86:	5499      	strb	r1, [r3, r2]
	mqttMessage[mqttMessageIndex++] = 1; // LSB message ID
 8008f88:	4b25      	ldr	r3, [pc, #148]	; (8009020 <Setup_Mqtt_Subscribe_Message+0xf8>)
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	1c5a      	adds	r2, r3, #1
 8008f8e:	b2d1      	uxtb	r1, r2
 8008f90:	4a23      	ldr	r2, [pc, #140]	; (8009020 <Setup_Mqtt_Subscribe_Message+0xf8>)
 8008f92:	7011      	strb	r1, [r2, #0]
 8008f94:	461a      	mov	r2, r3
 8008f96:	4b23      	ldr	r3, [pc, #140]	; (8009024 <Setup_Mqtt_Subscribe_Message+0xfc>)
 8008f98:	2101      	movs	r1, #1
 8008f9a:	5499      	strb	r1, [r3, r2]
	// TODO: make message id dynamic

	// Write topic
	mqttMessage[mqttMessageIndex++] = 0;         // lenTopic MSB
 8008f9c:	4b20      	ldr	r3, [pc, #128]	; (8009020 <Setup_Mqtt_Subscribe_Message+0xf8>)
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	1c5a      	adds	r2, r3, #1
 8008fa2:	b2d1      	uxtb	r1, r2
 8008fa4:	4a1e      	ldr	r2, [pc, #120]	; (8009020 <Setup_Mqtt_Subscribe_Message+0xf8>)
 8008fa6:	7011      	strb	r1, [r2, #0]
 8008fa8:	461a      	mov	r2, r3
 8008faa:	4b1e      	ldr	r3, [pc, #120]	; (8009024 <Setup_Mqtt_Subscribe_Message+0xfc>)
 8008fac:	2100      	movs	r1, #0
 8008fae:	5499      	strb	r1, [r3, r2]
	mqttMessage[mqttMessageIndex++] = lenTopic;  // lenTopic LSB
 8008fb0:	4b1b      	ldr	r3, [pc, #108]	; (8009020 <Setup_Mqtt_Subscribe_Message+0xf8>)
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	1c5a      	adds	r2, r3, #1
 8008fb6:	b2d1      	uxtb	r1, r2
 8008fb8:	4a19      	ldr	r2, [pc, #100]	; (8009020 <Setup_Mqtt_Subscribe_Message+0xf8>)
 8008fba:	7011      	strb	r1, [r2, #0]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	4a19      	ldr	r2, [pc, #100]	; (8009024 <Setup_Mqtt_Subscribe_Message+0xfc>)
 8008fc0:	7bbb      	ldrb	r3, [r7, #14]
 8008fc2:	5453      	strb	r3, [r2, r1]

	for (i = 0; i < lenTopic; i++){
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	73fb      	strb	r3, [r7, #15]
 8008fc8:	e00f      	b.n	8008fea <Setup_Mqtt_Subscribe_Message+0xc2>
		mqttMessage[mqttMessageIndex++] = topic[i];
 8008fca:	7bfb      	ldrb	r3, [r7, #15]
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	441a      	add	r2, r3
 8008fd0:	4b13      	ldr	r3, [pc, #76]	; (8009020 <Setup_Mqtt_Subscribe_Message+0xf8>)
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	1c59      	adds	r1, r3, #1
 8008fd6:	b2c8      	uxtb	r0, r1
 8008fd8:	4911      	ldr	r1, [pc, #68]	; (8009020 <Setup_Mqtt_Subscribe_Message+0xf8>)
 8008fda:	7008      	strb	r0, [r1, #0]
 8008fdc:	4619      	mov	r1, r3
 8008fde:	7812      	ldrb	r2, [r2, #0]
 8008fe0:	4b10      	ldr	r3, [pc, #64]	; (8009024 <Setup_Mqtt_Subscribe_Message+0xfc>)
 8008fe2:	545a      	strb	r2, [r3, r1]
	for (i = 0; i < lenTopic; i++){
 8008fe4:	7bfb      	ldrb	r3, [r7, #15]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	73fb      	strb	r3, [r7, #15]
 8008fea:	7bfa      	ldrb	r2, [r7, #15]
 8008fec:	7bbb      	ldrb	r3, [r7, #14]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d3eb      	bcc.n	8008fca <Setup_Mqtt_Subscribe_Message+0xa2>
	}

	// Write QoS
	mqttMessage[mqttMessageIndex++] = 0;
 8008ff2:	4b0b      	ldr	r3, [pc, #44]	; (8009020 <Setup_Mqtt_Subscribe_Message+0xf8>)
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	1c5a      	adds	r2, r3, #1
 8008ff8:	b2d1      	uxtb	r1, r2
 8008ffa:	4a09      	ldr	r2, [pc, #36]	; (8009020 <Setup_Mqtt_Subscribe_Message+0xf8>)
 8008ffc:	7011      	strb	r1, [r2, #0]
 8008ffe:	461a      	mov	r2, r3
 8009000:	4b08      	ldr	r3, [pc, #32]	; (8009024 <Setup_Mqtt_Subscribe_Message+0xfc>)
 8009002:	2100      	movs	r1, #0
 8009004:	5499      	strb	r1, [r3, r2]
	mqttMessageLength = mqttMessageIndex;
 8009006:	4b06      	ldr	r3, [pc, #24]	; (8009020 <Setup_Mqtt_Subscribe_Message+0xf8>)
 8009008:	781a      	ldrb	r2, [r3, #0]
 800900a:	4b07      	ldr	r3, [pc, #28]	; (8009028 <Setup_Mqtt_Subscribe_Message+0x100>)
 800900c:	701a      	strb	r2, [r3, #0]
	SM_Send_Data(mqttMessageLength);
 800900e:	4b06      	ldr	r3, [pc, #24]	; (8009028 <Setup_Mqtt_Subscribe_Message+0x100>)
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	4618      	mov	r0, r3
 8009014:	f7ff fa1c 	bl	8008450 <SM_Send_Data>
}
 8009018:	bf00      	nop
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	2000021a 	.word	0x2000021a
 8009024:	20002be4 	.word	0x20002be4
 8009028:	20002b4c 	.word	0x20002b4c

0800902c <Setup_Mqtt_Publish_Message>:

///////////////////////////////////////////////////////////////////////////
void Setup_Mqtt_Publish_Message(const uint8_t * topic, uint8_t * message, uint8_t lenOfMessage){
 800902c:	b580      	push	{r7, lr}
 800902e:	b086      	sub	sp, #24
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	4613      	mov	r3, r2
 8009038:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t lenOfTopic = GetStringLength((uint8_t*)topic);
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f000 f8f8 	bl	8009230 <GetStringLength>
 8009040:	4603      	mov	r3, r0
 8009042:	75bb      	strb	r3, [r7, #22]

//	mqttMessageLength = 4 + lenTopic + lenMsg;
	Clear_Mqtt_Message_Buffer();
 8009044:	f7ff f9e6 	bl	8008414 <Clear_Mqtt_Message_Buffer>
	// Write fixed header
	mqttMessage[mqttMessageIndex++] = MQTT_MSG_PUBLISH;
 8009048:	4b33      	ldr	r3, [pc, #204]	; (8009118 <Setup_Mqtt_Publish_Message+0xec>)
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	1c5a      	adds	r2, r3, #1
 800904e:	b2d1      	uxtb	r1, r2
 8009050:	4a31      	ldr	r2, [pc, #196]	; (8009118 <Setup_Mqtt_Publish_Message+0xec>)
 8009052:	7011      	strb	r1, [r2, #0]
 8009054:	461a      	mov	r2, r3
 8009056:	4b31      	ldr	r3, [pc, #196]	; (800911c <Setup_Mqtt_Publish_Message+0xf0>)
 8009058:	2130      	movs	r1, #48	; 0x30
 800905a:	5499      	strb	r1, [r3, r2]
	mqttMessage[mqttMessageIndex++] = 2 + lenOfTopic + lenOfMessage;
 800905c:	7dba      	ldrb	r2, [r7, #22]
 800905e:	79fb      	ldrb	r3, [r7, #7]
 8009060:	4413      	add	r3, r2
 8009062:	b2da      	uxtb	r2, r3
 8009064:	4b2c      	ldr	r3, [pc, #176]	; (8009118 <Setup_Mqtt_Publish_Message+0xec>)
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	1c59      	adds	r1, r3, #1
 800906a:	b2c8      	uxtb	r0, r1
 800906c:	492a      	ldr	r1, [pc, #168]	; (8009118 <Setup_Mqtt_Publish_Message+0xec>)
 800906e:	7008      	strb	r0, [r1, #0]
 8009070:	4619      	mov	r1, r3
 8009072:	1c93      	adds	r3, r2, #2
 8009074:	b2da      	uxtb	r2, r3
 8009076:	4b29      	ldr	r3, [pc, #164]	; (800911c <Setup_Mqtt_Publish_Message+0xf0>)
 8009078:	545a      	strb	r2, [r3, r1]

	// Write topic
	mqttMessage[mqttMessageIndex++] = 0;         // lenTopic MSB
 800907a:	4b27      	ldr	r3, [pc, #156]	; (8009118 <Setup_Mqtt_Publish_Message+0xec>)
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	1c5a      	adds	r2, r3, #1
 8009080:	b2d1      	uxtb	r1, r2
 8009082:	4a25      	ldr	r2, [pc, #148]	; (8009118 <Setup_Mqtt_Publish_Message+0xec>)
 8009084:	7011      	strb	r1, [r2, #0]
 8009086:	461a      	mov	r2, r3
 8009088:	4b24      	ldr	r3, [pc, #144]	; (800911c <Setup_Mqtt_Publish_Message+0xf0>)
 800908a:	2100      	movs	r1, #0
 800908c:	5499      	strb	r1, [r3, r2]
	mqttMessage[mqttMessageIndex++] = lenOfTopic;  // lenTopic LSB
 800908e:	4b22      	ldr	r3, [pc, #136]	; (8009118 <Setup_Mqtt_Publish_Message+0xec>)
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	1c5a      	adds	r2, r3, #1
 8009094:	b2d1      	uxtb	r1, r2
 8009096:	4a20      	ldr	r2, [pc, #128]	; (8009118 <Setup_Mqtt_Publish_Message+0xec>)
 8009098:	7011      	strb	r1, [r2, #0]
 800909a:	4619      	mov	r1, r3
 800909c:	4a1f      	ldr	r2, [pc, #124]	; (800911c <Setup_Mqtt_Publish_Message+0xf0>)
 800909e:	7dbb      	ldrb	r3, [r7, #22]
 80090a0:	5453      	strb	r3, [r2, r1]
	for (i = 0; i < lenOfTopic; i++){
 80090a2:	2300      	movs	r3, #0
 80090a4:	75fb      	strb	r3, [r7, #23]
 80090a6:	e00f      	b.n	80090c8 <Setup_Mqtt_Publish_Message+0x9c>
		mqttMessage[mqttMessageIndex++] = topic[i];
 80090a8:	7dfb      	ldrb	r3, [r7, #23]
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	441a      	add	r2, r3
 80090ae:	4b1a      	ldr	r3, [pc, #104]	; (8009118 <Setup_Mqtt_Publish_Message+0xec>)
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	1c59      	adds	r1, r3, #1
 80090b4:	b2c8      	uxtb	r0, r1
 80090b6:	4918      	ldr	r1, [pc, #96]	; (8009118 <Setup_Mqtt_Publish_Message+0xec>)
 80090b8:	7008      	strb	r0, [r1, #0]
 80090ba:	4619      	mov	r1, r3
 80090bc:	7812      	ldrb	r2, [r2, #0]
 80090be:	4b17      	ldr	r3, [pc, #92]	; (800911c <Setup_Mqtt_Publish_Message+0xf0>)
 80090c0:	545a      	strb	r2, [r3, r1]
	for (i = 0; i < lenOfTopic; i++){
 80090c2:	7dfb      	ldrb	r3, [r7, #23]
 80090c4:	3301      	adds	r3, #1
 80090c6:	75fb      	strb	r3, [r7, #23]
 80090c8:	7dfa      	ldrb	r2, [r7, #23]
 80090ca:	7dbb      	ldrb	r3, [r7, #22]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d3eb      	bcc.n	80090a8 <Setup_Mqtt_Publish_Message+0x7c>
	}

	// Write msg
	for (i = 0; i < lenOfMessage; i++){
 80090d0:	2300      	movs	r3, #0
 80090d2:	75fb      	strb	r3, [r7, #23]
 80090d4:	e00f      	b.n	80090f6 <Setup_Mqtt_Publish_Message+0xca>
		mqttMessage[mqttMessageIndex++] = message[i];
 80090d6:	7dfb      	ldrb	r3, [r7, #23]
 80090d8:	68ba      	ldr	r2, [r7, #8]
 80090da:	441a      	add	r2, r3
 80090dc:	4b0e      	ldr	r3, [pc, #56]	; (8009118 <Setup_Mqtt_Publish_Message+0xec>)
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	1c59      	adds	r1, r3, #1
 80090e2:	b2c8      	uxtb	r0, r1
 80090e4:	490c      	ldr	r1, [pc, #48]	; (8009118 <Setup_Mqtt_Publish_Message+0xec>)
 80090e6:	7008      	strb	r0, [r1, #0]
 80090e8:	4619      	mov	r1, r3
 80090ea:	7812      	ldrb	r2, [r2, #0]
 80090ec:	4b0b      	ldr	r3, [pc, #44]	; (800911c <Setup_Mqtt_Publish_Message+0xf0>)
 80090ee:	545a      	strb	r2, [r3, r1]
	for (i = 0; i < lenOfMessage; i++){
 80090f0:	7dfb      	ldrb	r3, [r7, #23]
 80090f2:	3301      	adds	r3, #1
 80090f4:	75fb      	strb	r3, [r7, #23]
 80090f6:	7dfa      	ldrb	r2, [r7, #23]
 80090f8:	79fb      	ldrb	r3, [r7, #7]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d3eb      	bcc.n	80090d6 <Setup_Mqtt_Publish_Message+0xaa>
	}
	mqttMessageLength = mqttMessageIndex;
 80090fe:	4b06      	ldr	r3, [pc, #24]	; (8009118 <Setup_Mqtt_Publish_Message+0xec>)
 8009100:	781a      	ldrb	r2, [r3, #0]
 8009102:	4b07      	ldr	r3, [pc, #28]	; (8009120 <Setup_Mqtt_Publish_Message+0xf4>)
 8009104:	701a      	strb	r2, [r3, #0]
	SM_Send_Data(mqttMessageLength);
 8009106:	4b06      	ldr	r3, [pc, #24]	; (8009120 <Setup_Mqtt_Publish_Message+0xf4>)
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	4618      	mov	r0, r3
 800910c:	f7ff f9a0 	bl	8008450 <SM_Send_Data>

}
 8009110:	bf00      	nop
 8009112:	3718      	adds	r7, #24
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	2000021a 	.word	0x2000021a
 800911c:	20002be4 	.word	0x20002be4
 8009120:	20002b4c 	.word	0x20002b4c

08009124 <Setup_Mqtt_Ping_Request_Message>:


///////////////////////////////////////////////////////////////////////////
void Setup_Mqtt_Ping_Request_Message(void){
 8009124:	b580      	push	{r7, lr}
 8009126:	af00      	add	r7, sp, #0
	// Write fixed header
	Clear_Mqtt_Message_Buffer();
 8009128:	f7ff f974 	bl	8008414 <Clear_Mqtt_Message_Buffer>
	mqttMessage[mqttMessageIndex++] = MQTT_PINGREQ;
 800912c:	4b0f      	ldr	r3, [pc, #60]	; (800916c <Setup_Mqtt_Ping_Request_Message+0x48>)
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	1c5a      	adds	r2, r3, #1
 8009132:	b2d1      	uxtb	r1, r2
 8009134:	4a0d      	ldr	r2, [pc, #52]	; (800916c <Setup_Mqtt_Ping_Request_Message+0x48>)
 8009136:	7011      	strb	r1, [r2, #0]
 8009138:	461a      	mov	r2, r3
 800913a:	4b0d      	ldr	r3, [pc, #52]	; (8009170 <Setup_Mqtt_Ping_Request_Message+0x4c>)
 800913c:	21c0      	movs	r1, #192	; 0xc0
 800913e:	5499      	strb	r1, [r3, r2]
	mqttMessage[mqttMessageIndex++] = 0;
 8009140:	4b0a      	ldr	r3, [pc, #40]	; (800916c <Setup_Mqtt_Ping_Request_Message+0x48>)
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	1c5a      	adds	r2, r3, #1
 8009146:	b2d1      	uxtb	r1, r2
 8009148:	4a08      	ldr	r2, [pc, #32]	; (800916c <Setup_Mqtt_Ping_Request_Message+0x48>)
 800914a:	7011      	strb	r1, [r2, #0]
 800914c:	461a      	mov	r2, r3
 800914e:	4b08      	ldr	r3, [pc, #32]	; (8009170 <Setup_Mqtt_Ping_Request_Message+0x4c>)
 8009150:	2100      	movs	r1, #0
 8009152:	5499      	strb	r1, [r3, r2]
	mqttMessageLength = mqttMessageIndex;
 8009154:	4b05      	ldr	r3, [pc, #20]	; (800916c <Setup_Mqtt_Ping_Request_Message+0x48>)
 8009156:	781a      	ldrb	r2, [r3, #0]
 8009158:	4b06      	ldr	r3, [pc, #24]	; (8009174 <Setup_Mqtt_Ping_Request_Message+0x50>)
 800915a:	701a      	strb	r2, [r3, #0]
	SM_Send_Data(mqttMessageLength);
 800915c:	4b05      	ldr	r3, [pc, #20]	; (8009174 <Setup_Mqtt_Ping_Request_Message+0x50>)
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	4618      	mov	r0, r3
 8009162:	f7ff f975 	bl	8008450 <SM_Send_Data>
}
 8009166:	bf00      	nop
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	2000021a 	.word	0x2000021a
 8009170:	20002be4 	.word	0x20002be4
 8009174:	20002b4c 	.word	0x20002b4c

08009178 <SPI1_Init>:

/* Buffer used for reception */
uint8_t aSPIRxBuffer[BUFFERSIZE];


void SPI1_Init(void){
 8009178:	b480      	push	{r7}
 800917a:	af00      	add	r7, sp, #0

}
 800917c:	bf00      	nop
 800917e:	46bd      	mov	sp, r7
 8009180:	bc80      	pop	{r7}
 8009182:	4770      	bx	lr

08009184 <SPI2_Init>:


void SPI2_Init(void){
 8009184:	b580      	push	{r7, lr}
 8009186:	af00      	add	r7, sp, #0
	/*##-1- Configure the SPI peripheral #######################################*/
		  /* Set the SPI parameters */
		  Spi2Handle.Instance               = SPI2;
 8009188:	4b1b      	ldr	r3, [pc, #108]	; (80091f8 <SPI2_Init+0x74>)
 800918a:	4a1c      	ldr	r2, [pc, #112]	; (80091fc <SPI2_Init+0x78>)
 800918c:	601a      	str	r2, [r3, #0]
		  Spi2Handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800918e:	4b1a      	ldr	r3, [pc, #104]	; (80091f8 <SPI2_Init+0x74>)
 8009190:	2228      	movs	r2, #40	; 0x28
 8009192:	61da      	str	r2, [r3, #28]
		  Spi2Handle.Init.Direction         = SPI_DIRECTION_2LINES;
 8009194:	4b18      	ldr	r3, [pc, #96]	; (80091f8 <SPI2_Init+0x74>)
 8009196:	2200      	movs	r2, #0
 8009198:	609a      	str	r2, [r3, #8]
		  Spi2Handle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 800919a:	4b17      	ldr	r3, [pc, #92]	; (80091f8 <SPI2_Init+0x74>)
 800919c:	2200      	movs	r2, #0
 800919e:	615a      	str	r2, [r3, #20]
		  Spi2Handle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80091a0:	4b15      	ldr	r3, [pc, #84]	; (80091f8 <SPI2_Init+0x74>)
 80091a2:	2200      	movs	r2, #0
 80091a4:	611a      	str	r2, [r3, #16]
		  Spi2Handle.Init.DataSize          = SPI_DATASIZE_8BIT;
 80091a6:	4b14      	ldr	r3, [pc, #80]	; (80091f8 <SPI2_Init+0x74>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	60da      	str	r2, [r3, #12]
		  Spi2Handle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80091ac:	4b12      	ldr	r3, [pc, #72]	; (80091f8 <SPI2_Init+0x74>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	621a      	str	r2, [r3, #32]
		  Spi2Handle.Init.TIMode            = SPI_TIMODE_DISABLE;
 80091b2:	4b11      	ldr	r3, [pc, #68]	; (80091f8 <SPI2_Init+0x74>)
 80091b4:	2200      	movs	r2, #0
 80091b6:	625a      	str	r2, [r3, #36]	; 0x24
		  Spi2Handle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80091b8:	4b0f      	ldr	r3, [pc, #60]	; (80091f8 <SPI2_Init+0x74>)
 80091ba:	2200      	movs	r2, #0
 80091bc:	629a      	str	r2, [r3, #40]	; 0x28
		  Spi2Handle.Init.CRCPolynomial     = 7;
 80091be:	4b0e      	ldr	r3, [pc, #56]	; (80091f8 <SPI2_Init+0x74>)
 80091c0:	2207      	movs	r2, #7
 80091c2:	62da      	str	r2, [r3, #44]	; 0x2c
		  Spi2Handle.Init.NSS               = SPI_NSS_SOFT;
 80091c4:	4b0c      	ldr	r3, [pc, #48]	; (80091f8 <SPI2_Init+0x74>)
 80091c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091ca:	619a      	str	r2, [r3, #24]

		#ifdef MASTER_BOARD
		  Spi2Handle.Init.Mode = SPI_MODE_MASTER;
 80091cc:	4b0a      	ldr	r3, [pc, #40]	; (80091f8 <SPI2_Init+0x74>)
 80091ce:	f44f 7282 	mov.w	r2, #260	; 0x104
 80091d2:	605a      	str	r2, [r3, #4]
		#else
		  Spi2Handle.Init.Mode = SPI_MODE_SLAVE;
		#endif /* MASTER_BOARD */

		  if(HAL_SPI_Init(&Spi2Handle) != HAL_OK)
 80091d4:	4808      	ldr	r0, [pc, #32]	; (80091f8 <SPI2_Init+0x74>)
 80091d6:	f7fa fb11 	bl	80037fc <HAL_SPI_Init>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d001      	beq.n	80091e4 <SPI2_Init+0x60>
		  {
		    /* Initialization Error */
		    Error_Handler();
 80091e0:	f000 fae2 	bl	80097a8 <Error_Handler>
		  }

		#ifdef MASTER_BOARD
		  /* SPI block is enabled prior calling SPI transmit/receive functions, in order to get CLK signal properly pulled down.
		     Otherwise, SPI CLK signal is not clean on this board and leads to errors during transfer */
		  __HAL_SPI_ENABLE(&Spi2Handle);
 80091e4:	4b04      	ldr	r3, [pc, #16]	; (80091f8 <SPI2_Init+0x74>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	4b03      	ldr	r3, [pc, #12]	; (80091f8 <SPI2_Init+0x74>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091f2:	601a      	str	r2, [r3, #0]

		#endif /* MASTER_BOARD */
}
 80091f4:	bf00      	nop
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	20002c64 	.word	0x20002c64
 80091fc:	40003800 	.word	0x40003800

08009200 <ResetChipSelect>:

void ResetChipSelect(void){
 8009200:	b580      	push	{r7, lr}
 8009202:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_PORT,SPI2_NSS_PIN, GPIO_PIN_RESET);
 8009204:	2200      	movs	r2, #0
 8009206:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800920a:	4802      	ldr	r0, [pc, #8]	; (8009214 <ResetChipSelect+0x14>)
 800920c:	f7f8 fe98 	bl	8001f40 <HAL_GPIO_WritePin>
}
 8009210:	bf00      	nop
 8009212:	bd80      	pop	{r7, pc}
 8009214:	40010c00 	.word	0x40010c00

08009218 <SetChipSelect>:

void SetChipSelect(void){
 8009218:	b580      	push	{r7, lr}
 800921a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_PORT,SPI2_NSS_PIN, GPIO_PIN_SET);
 800921c:	2201      	movs	r2, #1
 800921e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009222:	4802      	ldr	r0, [pc, #8]	; (800922c <SetChipSelect+0x14>)
 8009224:	f7f8 fe8c 	bl	8001f40 <HAL_GPIO_WritePin>
}
 8009228:	bf00      	nop
 800922a:	bd80      	pop	{r7, pc}
 800922c:	40010c00 	.word	0x40010c00

08009230 <GetStringLength>:
 */
#include "main.h"
#include "app_string.h"


uint8_t GetStringLength(uint8_t* buffer){
 8009230:	b480      	push	{r7}
 8009232:	b085      	sub	sp, #20
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
	uint8_t len = 0;
 8009238:	2300      	movs	r3, #0
 800923a:	73fb      	strb	r3, [r7, #15]
	if(*buffer == 0){
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d10b      	bne.n	800925c <GetStringLength+0x2c>
		return 0;
 8009244:	2300      	movs	r3, #0
 8009246:	e010      	b.n	800926a <GetStringLength+0x3a>
	}
	while(*buffer != 0){
		len ++;
 8009248:	7bfb      	ldrb	r3, [r7, #15]
 800924a:	3301      	adds	r3, #1
 800924c:	73fb      	strb	r3, [r7, #15]
		if(*buffer == '\n') break;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	2b0a      	cmp	r3, #10
 8009254:	d007      	beq.n	8009266 <GetStringLength+0x36>
		buffer ++;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	3301      	adds	r3, #1
 800925a:	607b      	str	r3, [r7, #4]
	while(*buffer != 0){
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1f1      	bne.n	8009248 <GetStringLength+0x18>
 8009264:	e000      	b.n	8009268 <GetStringLength+0x38>
		if(*buffer == '\n') break;
 8009266:	bf00      	nop

	}
	return len;
 8009268:	7bfb      	ldrb	r3, [r7, #15]
}
 800926a:	4618      	mov	r0, r3
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	bc80      	pop	{r7}
 8009272:	4770      	bx	lr

08009274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b094      	sub	sp, #80	; 0x50
 8009278:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800927a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800927e:	2228      	movs	r2, #40	; 0x28
 8009280:	2100      	movs	r1, #0
 8009282:	4618      	mov	r0, r3
 8009284:	f000 fe7c 	bl	8009f80 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009288:	f107 0314 	add.w	r3, r7, #20
 800928c:	2200      	movs	r2, #0
 800928e:	601a      	str	r2, [r3, #0]
 8009290:	605a      	str	r2, [r3, #4]
 8009292:	609a      	str	r2, [r3, #8]
 8009294:	60da      	str	r2, [r3, #12]
 8009296:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009298:	1d3b      	adds	r3, r7, #4
 800929a:	2200      	movs	r2, #0
 800929c:	601a      	str	r2, [r3, #0]
 800929e:	605a      	str	r2, [r3, #4]
 80092a0:	609a      	str	r2, [r3, #8]
 80092a2:	60da      	str	r2, [r3, #12]
	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80092a4:	2302      	movs	r3, #2
 80092a6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState        = RCC_HSE_OFF;
 80092a8:	2300      	movs	r3, #0
 80092aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.LSEState        = RCC_LSE_OFF;
 80092ac:	2300      	movs	r3, #0
 80092ae:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80092b0:	2301      	movs	r3, #1
 80092b2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80092b4:	2310      	movs	r3, #16
 80092b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSEPredivValue    = RCC_HSE_PREDIV_DIV1;
 80092b8:	2300      	movs	r3, #0
 80092ba:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80092bc:	2302      	movs	r3, #2
 80092be:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80092c0:	2300      	movs	r3, #0
 80092c2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80092c4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80092c8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 80092ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7f9 fdc2 	bl	8002e58 <HAL_RCC_OscConfig>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d001      	beq.n	80092de <SystemClock_Config+0x6a>
		Error_Handler();
 80092da:	f000 fa65 	bl	80097a8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80092de:	230f      	movs	r3, #15
 80092e0:	617b      	str	r3, [r7, #20]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80092e2:	2302      	movs	r3, #2
 80092e4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80092e6:	2300      	movs	r3, #0
 80092e8:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80092ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092ee:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80092f0:	2300      	movs	r3, #0
 80092f2:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK){
 80092f4:	f107 0314 	add.w	r3, r7, #20
 80092f8:	2102      	movs	r1, #2
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7fa f82c 	bl	8003358 <HAL_RCC_ClockConfig>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <SystemClock_Config+0x96>
		Error_Handler();
 8009306:	f000 fa4f 	bl	80097a8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800930a:	2302      	movs	r3, #2
 800930c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800930e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009312:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK){
 8009314:	1d3b      	adds	r3, r7, #4
 8009316:	4618      	mov	r0, r3
 8009318:	f7fa f9ba 	bl	8003690 <HAL_RCCEx_PeriphCLKConfig>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <SystemClock_Config+0xb2>
		Error_Handler();
 8009322:	f000 fa41 	bl	80097a8 <Error_Handler>
	}
}
 8009326:	bf00      	nop
 8009328:	3750      	adds	r7, #80	; 0x50
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
	...

08009330 <Timer_Init>:

/* Prescaler declaration */
uint32_t uwPrescalerValue = 0;


void Timer_Init(void){
 8009330:	b580      	push	{r7, lr}
 8009332:	af00      	add	r7, sp, #0
	      2) by calling HAL API function HAL_RCC_GetSysClockFreq()
	      3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
	  ----------------------------------------------------------------------- */

	  /* Compute the prescaler value to have TIMx counter clock equal to 10000 Hz */
	  uwPrescalerValue = (uint32_t)(SystemCoreClock / 10000) - 1;
 8009334:	4b18      	ldr	r3, [pc, #96]	; (8009398 <Timer_Init+0x68>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a18      	ldr	r2, [pc, #96]	; (800939c <Timer_Init+0x6c>)
 800933a:	fba2 2303 	umull	r2, r3, r2, r3
 800933e:	0b5b      	lsrs	r3, r3, #13
 8009340:	3b01      	subs	r3, #1
 8009342:	4a17      	ldr	r2, [pc, #92]	; (80093a0 <Timer_Init+0x70>)
 8009344:	6013      	str	r3, [r2, #0]

	  /* Set TIMx instance */
	  TimHandle.Instance = TIMx;
 8009346:	4b17      	ldr	r3, [pc, #92]	; (80093a4 <Timer_Init+0x74>)
 8009348:	4a17      	ldr	r2, [pc, #92]	; (80093a8 <Timer_Init+0x78>)
 800934a:	601a      	str	r2, [r3, #0]
	       + Period = 10000 - 1
	       + Prescaler = (SystemCoreClock/10000) - 1
	       + ClockDivision = 0
	       + Counter direction = Up
	  */
	  TimHandle.Init.Period            = 100 - 1;
 800934c:	4b15      	ldr	r3, [pc, #84]	; (80093a4 <Timer_Init+0x74>)
 800934e:	2263      	movs	r2, #99	; 0x63
 8009350:	60da      	str	r2, [r3, #12]
	  TimHandle.Init.Prescaler         = uwPrescalerValue;
 8009352:	4b13      	ldr	r3, [pc, #76]	; (80093a0 <Timer_Init+0x70>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a13      	ldr	r2, [pc, #76]	; (80093a4 <Timer_Init+0x74>)
 8009358:	6053      	str	r3, [r2, #4]
	  TimHandle.Init.ClockDivision     = 0;
 800935a:	4b12      	ldr	r3, [pc, #72]	; (80093a4 <Timer_Init+0x74>)
 800935c:	2200      	movs	r2, #0
 800935e:	611a      	str	r2, [r3, #16]
	  TimHandle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8009360:	4b10      	ldr	r3, [pc, #64]	; (80093a4 <Timer_Init+0x74>)
 8009362:	2200      	movs	r2, #0
 8009364:	609a      	str	r2, [r3, #8]
	  TimHandle.Init.RepetitionCounter = 0;
 8009366:	4b0f      	ldr	r3, [pc, #60]	; (80093a4 <Timer_Init+0x74>)
 8009368:	2200      	movs	r2, #0
 800936a:	615a      	str	r2, [r3, #20]
	  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800936c:	4b0d      	ldr	r3, [pc, #52]	; (80093a4 <Timer_Init+0x74>)
 800936e:	2200      	movs	r2, #0
 8009370:	619a      	str	r2, [r3, #24]

	  if (HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8009372:	480c      	ldr	r0, [pc, #48]	; (80093a4 <Timer_Init+0x74>)
 8009374:	f7fa ff5c 	bl	8004230 <HAL_TIM_Base_Init>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d001      	beq.n	8009382 <Timer_Init+0x52>
	  {
	    /* Initialization Error */
	    Error_Handler();
 800937e:	f000 fa13 	bl	80097a8 <Error_Handler>
	  }

	  /*##-2- Start the TIM Base generation in interrupt mode ####################*/
	  /* Start Channel1 */
	  if (HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 8009382:	4808      	ldr	r0, [pc, #32]	; (80093a4 <Timer_Init+0x74>)
 8009384:	f7fa ff7f 	bl	8004286 <HAL_TIM_Base_Start_IT>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d001      	beq.n	8009392 <Timer_Init+0x62>
	  {
	    /* Starting Error */
	    Error_Handler();
 800938e:	f000 fa0b 	bl	80097a8 <Error_Handler>
	  }
}
 8009392:	bf00      	nop
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	2000015c 	.word	0x2000015c
 800939c:	d1b71759 	.word	0xd1b71759
 80093a0:	20000220 	.word	0x20000220
 80093a4:	20002cc8 	.word	0x20002cc8
 80093a8:	40000400 	.word	0x40000400

080093ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80093b4:	f7fe faea 	bl	800798c <SCH_Update>
}
 80093b8:	bf00      	nop
 80093ba:	3708      	adds	r7, #8
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <UART1_Init>:
__IO ITStatus UartReceiveReady = RESET;


HAL_StatusTypeDef Sim3g_Receive_Setup(void);

void UART1_Init(void){
 80093c0:	b580      	push	{r7, lr}
 80093c2:	af00      	add	r7, sp, #0
	Uart1Handle.Instance          = USART1;
 80093c4:	4b14      	ldr	r3, [pc, #80]	; (8009418 <UART1_Init+0x58>)
 80093c6:	4a15      	ldr	r2, [pc, #84]	; (800941c <UART1_Init+0x5c>)
 80093c8:	601a      	str	r2, [r3, #0]

	Uart1Handle.Init.BaudRate     = 115200;
 80093ca:	4b13      	ldr	r3, [pc, #76]	; (8009418 <UART1_Init+0x58>)
 80093cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80093d0:	605a      	str	r2, [r3, #4]
	Uart1Handle.Init.WordLength   = UART_WORDLENGTH_8B;
 80093d2:	4b11      	ldr	r3, [pc, #68]	; (8009418 <UART1_Init+0x58>)
 80093d4:	2200      	movs	r2, #0
 80093d6:	609a      	str	r2, [r3, #8]
	Uart1Handle.Init.StopBits     = UART_STOPBITS_1;
 80093d8:	4b0f      	ldr	r3, [pc, #60]	; (8009418 <UART1_Init+0x58>)
 80093da:	2200      	movs	r2, #0
 80093dc:	60da      	str	r2, [r3, #12]
	Uart1Handle.Init.Parity       = UART_PARITY_NONE;
 80093de:	4b0e      	ldr	r3, [pc, #56]	; (8009418 <UART1_Init+0x58>)
 80093e0:	2200      	movs	r2, #0
 80093e2:	611a      	str	r2, [r3, #16]
	Uart1Handle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80093e4:	4b0c      	ldr	r3, [pc, #48]	; (8009418 <UART1_Init+0x58>)
 80093e6:	2200      	movs	r2, #0
 80093e8:	619a      	str	r2, [r3, #24]
	Uart1Handle.Init.Mode         = UART_MODE_TX_RX;
 80093ea:	4b0b      	ldr	r3, [pc, #44]	; (8009418 <UART1_Init+0x58>)
 80093ec:	220c      	movs	r2, #12
 80093ee:	615a      	str	r2, [r3, #20]

	if(HAL_UART_DeInit(&Uart1Handle) != HAL_OK){
 80093f0:	4809      	ldr	r0, [pc, #36]	; (8009418 <UART1_Init+0x58>)
 80093f2:	f7fb f958 	bl	80046a6 <HAL_UART_DeInit>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d001      	beq.n	8009400 <UART1_Init+0x40>
		Error_Handler();
 80093fc:	f000 f9d4 	bl	80097a8 <Error_Handler>
	}
	if(HAL_UART_Init(&Uart1Handle) != HAL_OK){
 8009400:	4805      	ldr	r0, [pc, #20]	; (8009418 <UART1_Init+0x58>)
 8009402:	f7fb f903 	bl	800460c <HAL_UART_Init>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d001      	beq.n	8009410 <UART1_Init+0x50>
		Error_Handler();
 800940c:	f000 f9cc 	bl	80097a8 <Error_Handler>
	}
	Sim3g_Receive_Setup();
 8009410:	f000 f830 	bl	8009474 <Sim3g_Receive_Setup>
}
 8009414:	bf00      	nop
 8009416:	bd80      	pop	{r7, pc}
 8009418:	20002e84 	.word	0x20002e84
 800941c:	40013800 	.word	0x40013800

08009420 <UART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void UART3_Init(void)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	af00      	add	r7, sp, #0
	Uart3Handle.Instance = USART3;
 8009424:	4b11      	ldr	r3, [pc, #68]	; (800946c <UART3_Init+0x4c>)
 8009426:	4a12      	ldr	r2, [pc, #72]	; (8009470 <UART3_Init+0x50>)
 8009428:	601a      	str	r2, [r3, #0]
	Uart3Handle.Init.BaudRate = 115200;
 800942a:	4b10      	ldr	r3, [pc, #64]	; (800946c <UART3_Init+0x4c>)
 800942c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009430:	605a      	str	r2, [r3, #4]
	Uart3Handle.Init.WordLength = UART_WORDLENGTH_8B;
 8009432:	4b0e      	ldr	r3, [pc, #56]	; (800946c <UART3_Init+0x4c>)
 8009434:	2200      	movs	r2, #0
 8009436:	609a      	str	r2, [r3, #8]
	Uart3Handle.Init.StopBits = UART_STOPBITS_1;
 8009438:	4b0c      	ldr	r3, [pc, #48]	; (800946c <UART3_Init+0x4c>)
 800943a:	2200      	movs	r2, #0
 800943c:	60da      	str	r2, [r3, #12]
	Uart3Handle.Init.Parity = UART_PARITY_NONE;
 800943e:	4b0b      	ldr	r3, [pc, #44]	; (800946c <UART3_Init+0x4c>)
 8009440:	2200      	movs	r2, #0
 8009442:	611a      	str	r2, [r3, #16]
	Uart3Handle.Init.Mode = UART_MODE_TX_RX;
 8009444:	4b09      	ldr	r3, [pc, #36]	; (800946c <UART3_Init+0x4c>)
 8009446:	220c      	movs	r2, #12
 8009448:	615a      	str	r2, [r3, #20]
	Uart3Handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800944a:	4b08      	ldr	r3, [pc, #32]	; (800946c <UART3_Init+0x4c>)
 800944c:	2200      	movs	r2, #0
 800944e:	619a      	str	r2, [r3, #24]
	Uart3Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 8009450:	4b06      	ldr	r3, [pc, #24]	; (800946c <UART3_Init+0x4c>)
 8009452:	2200      	movs	r2, #0
 8009454:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&Uart3Handle) != HAL_OK) {
 8009456:	4805      	ldr	r0, [pc, #20]	; (800946c <UART3_Init+0x4c>)
 8009458:	f7fb f8d8 	bl	800460c <HAL_UART_Init>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d001      	beq.n	8009466 <UART3_Init+0x46>
    Error_Handler();
 8009462:	f000 f9a1 	bl	80097a8 <Error_Handler>
  }
//  /* Output a message on Hyperterminal using printf function */
//   printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
//   printf("** Test finished successfully. ** \n\r");

}
 8009466:	bf00      	nop
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	20002e04 	.word	0x20002e04
 8009470:	40004800 	.word	0x40004800

08009474 <Sim3g_Receive_Setup>:

HAL_StatusTypeDef Sim3g_Receive_Setup(void){
 8009474:	b580      	push	{r7, lr}
 8009476:	af00      	add	r7, sp, #0
	if(HAL_UART_Receive_IT(&Uart1Handle, (uint8_t *)aUART_RxBuffer, RXBUFFERSIZE) != HAL_OK){
 8009478:	22fa      	movs	r2, #250	; 0xfa
 800947a:	4906      	ldr	r1, [pc, #24]	; (8009494 <Sim3g_Receive_Setup+0x20>)
 800947c:	4806      	ldr	r0, [pc, #24]	; (8009498 <Sim3g_Receive_Setup+0x24>)
 800947e:	f7fb fa1b 	bl	80048b8 <HAL_UART_Receive_IT>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d001      	beq.n	800948c <Sim3g_Receive_Setup+0x18>
		return HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	e000      	b.n	800948e <Sim3g_Receive_Setup+0x1a>
	}
	return HAL_OK;
 800948c:	2300      	movs	r3, #0

}
 800948e:	4618      	mov	r0, r3
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	20002d08 	.word	0x20002d08
 8009498:	20002e84 	.word	0x20002e84

0800949c <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartTransmitReady = SET;
 80094a4:	4b03      	ldr	r3, [pc, #12]	; (80094b4 <HAL_UART_TxCpltCallback+0x18>)
 80094a6:	2201      	movs	r2, #1
 80094a8:	701a      	strb	r2, [r3, #0]
}
 80094aa:	bf00      	nop
 80094ac:	370c      	adds	r7, #12
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bc80      	pop	{r7}
 80094b2:	4770      	bx	lr
 80094b4:	20000158 	.word	0x20000158

080094b8 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle){
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
    Error_Handler();
 80094c0:	f000 f972 	bl	80097a8 <Error_Handler>
}
 80094c4:	bf00      	nop
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <UART3_SendToHost>:



void UART3_SendToHost(uint8_t * buffer){
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
	uint8_t buffer_len = GetStringLength((uint8_t *) buffer);
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f7ff feab 	bl	8009230 <GetStringLength>
 80094da:	4603      	mov	r3, r0
 80094dc:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&Uart3Handle, (uint8_t *)buffer, buffer_len, 0xFFFFFFFF);
 80094de:	7bfb      	ldrb	r3, [r7, #15]
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	f04f 33ff 	mov.w	r3, #4294967295
 80094e6:	6879      	ldr	r1, [r7, #4]
 80094e8:	4803      	ldr	r0, [pc, #12]	; (80094f8 <UART3_SendToHost+0x2c>)
 80094ea:	f7fb f908 	bl	80046fe <HAL_UART_Transmit>
}
 80094ee:	bf00      	nop
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	20002e04 	.word	0x20002e04

080094fc <UART1_Transmit>:
		UartTransmitReady = RESET;
	}
	return;
}

void UART1_Transmit(uint8_t * buffer){
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
	uint8_t buffer_len = GetStringLength((uint8_t*)buffer);
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7ff fe93 	bl	8009230 <GetStringLength>
 800950a:	4603      	mov	r3, r0
 800950c:	73fb      	strb	r3, [r7, #15]
	if(buffer_len == 0) {
 800950e:	7bfb      	ldrb	r3, [r7, #15]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d010      	beq.n	8009536 <UART1_Transmit+0x3a>
		return;
	} else {
		if(HAL_UART_Transmit_IT(&Uart1Handle, (uint8_t*)buffer, buffer_len)!= HAL_OK){
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	b29b      	uxth	r3, r3
 8009518:	461a      	mov	r2, r3
 800951a:	6879      	ldr	r1, [r7, #4]
 800951c:	4808      	ldr	r0, [pc, #32]	; (8009540 <UART1_Transmit+0x44>)
 800951e:	f7fb f987 	bl	8004830 <HAL_UART_Transmit_IT>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <UART1_Transmit+0x30>
			Error_Handler();
 8009528:	f000 f93e 	bl	80097a8 <Error_Handler>
		}
		UartTransmitReady = RESET;
 800952c:	4b05      	ldr	r3, [pc, #20]	; (8009544 <UART1_Transmit+0x48>)
 800952e:	2200      	movs	r2, #0
 8009530:	701a      	strb	r2, [r3, #0]
	}
	return;
 8009532:	bf00      	nop
 8009534:	e000      	b.n	8009538 <UART1_Transmit+0x3c>
		return;
 8009536:	bf00      	nop
}
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	20002e84 	.word	0x20002e84
 8009544:	20000158 	.word	0x20000158

08009548 <Sim3g_Transmit>:

void Sim3g_Transmit(uint8_t * buffer, uint8_t buffer_len){
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	460b      	mov	r3, r1
 8009552:	70fb      	strb	r3, [r7, #3]
	if(buffer_len == 0) {
 8009554:	78fb      	ldrb	r3, [r7, #3]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d010      	beq.n	800957c <Sim3g_Transmit+0x34>
		return;
	} else {
		if(HAL_UART_Transmit_IT(&Uart1Handle, (uint8_t*)buffer, buffer_len)!= HAL_OK){
 800955a:	78fb      	ldrb	r3, [r7, #3]
 800955c:	b29b      	uxth	r3, r3
 800955e:	461a      	mov	r2, r3
 8009560:	6879      	ldr	r1, [r7, #4]
 8009562:	4808      	ldr	r0, [pc, #32]	; (8009584 <Sim3g_Transmit+0x3c>)
 8009564:	f7fb f964 	bl	8004830 <HAL_UART_Transmit_IT>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <Sim3g_Transmit+0x2a>
			Error_Handler();
 800956e:	f000 f91b 	bl	80097a8 <Error_Handler>
		}
		UartTransmitReady = RESET;
 8009572:	4b05      	ldr	r3, [pc, #20]	; (8009588 <Sim3g_Transmit+0x40>)
 8009574:	2200      	movs	r2, #0
 8009576:	701a      	strb	r2, [r3, #0]
	}
	return;
 8009578:	bf00      	nop
 800957a:	e000      	b.n	800957e <Sim3g_Transmit+0x36>
		return;
 800957c:	bf00      	nop
}
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	20002e84 	.word	0x20002e84
 8009588:	20000158 	.word	0x20000158

0800958c <Custom_UART_Receive_IT>:



HAL_StatusTypeDef Custom_UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800959a:	b2db      	uxtb	r3, r3
 800959c:	2b22      	cmp	r3, #34	; 0x22
 800959e:	d121      	bne.n	80095e4 <Custom_UART_Receive_IT+0x58>
  {
	  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	63da      	str	r2, [r3, #60]	; 0x3c
	  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2222      	movs	r2, #34	; 0x22
 80095aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	  aUART_RxBuffer[receiveBufferIndexHead] = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	6859      	ldr	r1, [r3, #4]
 80095b4:	4b0e      	ldr	r3, [pc, #56]	; (80095f0 <Custom_UART_Receive_IT+0x64>)
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	461a      	mov	r2, r3
 80095ba:	b2c9      	uxtb	r1, r1
 80095bc:	4b0d      	ldr	r3, [pc, #52]	; (80095f4 <Custom_UART_Receive_IT+0x68>)
 80095be:	5499      	strb	r1, [r3, r2]
	  receiveBufferIndexHead = (receiveBufferIndexHead + 1) % RXBUFFERSIZE;
 80095c0:	4b0b      	ldr	r3, [pc, #44]	; (80095f0 <Custom_UART_Receive_IT+0x64>)
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	3301      	adds	r3, #1
 80095c6:	4a0c      	ldr	r2, [pc, #48]	; (80095f8 <Custom_UART_Receive_IT+0x6c>)
 80095c8:	fb82 1203 	smull	r1, r2, r2, r3
 80095cc:	1111      	asrs	r1, r2, #4
 80095ce:	17da      	asrs	r2, r3, #31
 80095d0:	1a8a      	subs	r2, r1, r2
 80095d2:	21fa      	movs	r1, #250	; 0xfa
 80095d4:	fb01 f202 	mul.w	r2, r1, r2
 80095d8:	1a9a      	subs	r2, r3, r2
 80095da:	b2d2      	uxtb	r2, r2
 80095dc:	4b04      	ldr	r3, [pc, #16]	; (80095f0 <Custom_UART_Receive_IT+0x64>)
 80095de:	701a      	strb	r2, [r3, #0]
	  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	e000      	b.n	80095e6 <Custom_UART_Receive_IT+0x5a>
  } else {
    return HAL_BUSY;
 80095e4:	2302      	movs	r3, #2
  }
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	370c      	adds	r7, #12
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bc80      	pop	{r7}
 80095ee:	4770      	bx	lr
 80095f0:	20000224 	.word	0x20000224
 80095f4:	20002d08 	.word	0x20002d08
 80095f8:	10624dd3 	.word	0x10624dd3

080095fc <Uart1_Received_Buffer_Available>:

uint8_t Uart1_Received_Buffer_Available(void){
 80095fc:	b480      	push	{r7}
 80095fe:	af00      	add	r7, sp, #0
	if(receiveBufferIndexTail != receiveBufferIndexHead){
 8009600:	4b06      	ldr	r3, [pc, #24]	; (800961c <Uart1_Received_Buffer_Available+0x20>)
 8009602:	781a      	ldrb	r2, [r3, #0]
 8009604:	4b06      	ldr	r3, [pc, #24]	; (8009620 <Uart1_Received_Buffer_Available+0x24>)
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	429a      	cmp	r2, r3
 800960a:	d001      	beq.n	8009610 <Uart1_Received_Buffer_Available+0x14>
		return 1;
 800960c:	2301      	movs	r3, #1
 800960e:	e000      	b.n	8009612 <Uart1_Received_Buffer_Available+0x16>
	} else {
		return 0;
 8009610:	2300      	movs	r3, #0
	}
}
 8009612:	4618      	mov	r0, r3
 8009614:	46bd      	mov	sp, r7
 8009616:	bc80      	pop	{r7}
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	20000225 	.word	0x20000225
 8009620:	20000224 	.word	0x20000224

08009624 <Uart1_Read_Received_Buffer>:
uint8_t Uart1_Read_Received_Buffer(void){
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
	if(receiveBufferIndexTail == receiveBufferIndexHead) return 0xff;
 800962a:	4b12      	ldr	r3, [pc, #72]	; (8009674 <Uart1_Read_Received_Buffer+0x50>)
 800962c:	781a      	ldrb	r2, [r3, #0]
 800962e:	4b12      	ldr	r3, [pc, #72]	; (8009678 <Uart1_Read_Received_Buffer+0x54>)
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	429a      	cmp	r2, r3
 8009634:	d101      	bne.n	800963a <Uart1_Read_Received_Buffer+0x16>
 8009636:	23ff      	movs	r3, #255	; 0xff
 8009638:	e016      	b.n	8009668 <Uart1_Read_Received_Buffer+0x44>
	uint8_t ch = aUART_RxBuffer[receiveBufferIndexTail];
 800963a:	4b0e      	ldr	r3, [pc, #56]	; (8009674 <Uart1_Read_Received_Buffer+0x50>)
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	461a      	mov	r2, r3
 8009640:	4b0e      	ldr	r3, [pc, #56]	; (800967c <Uart1_Read_Received_Buffer+0x58>)
 8009642:	5c9b      	ldrb	r3, [r3, r2]
 8009644:	71fb      	strb	r3, [r7, #7]
	receiveBufferIndexTail = (receiveBufferIndexTail + 1) % RXBUFFERSIZE;
 8009646:	4b0b      	ldr	r3, [pc, #44]	; (8009674 <Uart1_Read_Received_Buffer+0x50>)
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	3301      	adds	r3, #1
 800964c:	4a0c      	ldr	r2, [pc, #48]	; (8009680 <Uart1_Read_Received_Buffer+0x5c>)
 800964e:	fb82 1203 	smull	r1, r2, r2, r3
 8009652:	1111      	asrs	r1, r2, #4
 8009654:	17da      	asrs	r2, r3, #31
 8009656:	1a8a      	subs	r2, r1, r2
 8009658:	21fa      	movs	r1, #250	; 0xfa
 800965a:	fb01 f202 	mul.w	r2, r1, r2
 800965e:	1a9a      	subs	r2, r3, r2
 8009660:	b2d2      	uxtb	r2, r2
 8009662:	4b04      	ldr	r3, [pc, #16]	; (8009674 <Uart1_Read_Received_Buffer+0x50>)
 8009664:	701a      	strb	r2, [r3, #0]
	return ch;
 8009666:	79fb      	ldrb	r3, [r7, #7]
}
 8009668:	4618      	mov	r0, r3
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	bc80      	pop	{r7}
 8009670:	4770      	bx	lr
 8009672:	bf00      	nop
 8009674:	20000225 	.word	0x20000225
 8009678:	20000224 	.word	0x20000224
 800967c:	20002d08 	.word	0x20002d08
 8009680:	10624dd3 	.word	0x10624dd3

08009684 <ATcommandSending>:


void ATcommandSending(uint8_t * buffer){
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
	if(isSim3gTransmissionReady() == SET){
 800968c:	f000 f81e 	bl	80096cc <isSim3gTransmissionReady>
 8009690:	4603      	mov	r3, r0
 8009692:	2b01      	cmp	r3, #1
 8009694:	d102      	bne.n	800969c <ATcommandSending+0x18>
		UART1_Transmit(buffer);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f7ff ff30 	bl	80094fc <UART1_Transmit>
	}
}
 800969c:	bf00      	nop
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <MQTTCommandSending>:

void MQTTCommandSending(uint8_t * buffer, uint8_t buffer_len){
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	460b      	mov	r3, r1
 80096ae:	70fb      	strb	r3, [r7, #3]
	if(isSim3gTransmissionReady() == SET){
 80096b0:	f000 f80c 	bl	80096cc <isSim3gTransmissionReady>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d104      	bne.n	80096c4 <MQTTCommandSending+0x20>
		Sim3g_Transmit(buffer, buffer_len);
 80096ba:	78fb      	ldrb	r3, [r7, #3]
 80096bc:	4619      	mov	r1, r3
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7ff ff42 	bl	8009548 <Sim3g_Transmit>
	}
}
 80096c4:	bf00      	nop
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <isSim3gTransmissionReady>:
		return SET;
	} else {
		return RESET;
	}
}
ITStatus isSim3gTransmissionReady(void){
 80096cc:	b480      	push	{r7}
 80096ce:	af00      	add	r7, sp, #0

	if(UartTransmitReady == SET){
 80096d0:	4b07      	ldr	r3, [pc, #28]	; (80096f0 <isSim3gTransmissionReady+0x24>)
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d104      	bne.n	80096e4 <isSim3gTransmissionReady+0x18>
		UartTransmitReady = RESET;
 80096da:	4b05      	ldr	r3, [pc, #20]	; (80096f0 <isSim3gTransmissionReady+0x24>)
 80096dc:	2200      	movs	r2, #0
 80096de:	701a      	strb	r2, [r3, #0]

		return SET;
 80096e0:	2301      	movs	r3, #1
 80096e2:	e000      	b.n	80096e6 <isSim3gTransmissionReady+0x1a>
	} else {
		return RESET;
 80096e4:	2300      	movs	r3, #0
	}

}
 80096e6:	4618      	mov	r0, r3
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bc80      	pop	{r7}
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	20000158 	.word	0x20000158

080096f4 <main>:
MAIN_FSM_STATE mainState = POWER_CONSUMPTION_CALCULATION;

void Main_FSM(void);

int main(void)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	af00      	add	r7, sp, #0
	System_Initialization();
 80096f8:	f7fc fff2 	bl	80066e0 <System_Initialization>
	Set_Sim3G_State(POWER_ON_SIM3G);
 80096fc:	2000      	movs	r0, #0
 80096fe:	f7fe fa61 	bl	8007bc4 <Set_Sim3G_State>
	UART3_SendToHost((uint8_t*)"Start program \r\n");
 8009702:	4811      	ldr	r0, [pc, #68]	; (8009748 <main+0x54>)
 8009704:	f7ff fee2 	bl	80094cc <UART3_SendToHost>

	Turn_On_Buzzer();
 8009708:	f7fc ffa2 	bl	8006650 <Turn_On_Buzzer>
	HAL_Delay(100);
 800970c:	2064      	movs	r0, #100	; 0x64
 800970e:	f7f7 fa0b 	bl	8000b28 <HAL_Delay>
	Turn_Off_Buzzer();
 8009712:	f7fc ffa9 	bl	8006668 <Turn_Off_Buzzer>
	HAL_Delay(100);
 8009716:	2064      	movs	r0, #100	; 0x64
 8009718:	f7f7 fa06 	bl	8000b28 <HAL_Delay>
	Turn_On_Buzzer();
 800971c:	f7fc ff98 	bl	8006650 <Turn_On_Buzzer>
	HAL_Delay(100);
 8009720:	2064      	movs	r0, #100	; 0x64
 8009722:	f7f7 fa01 	bl	8000b28 <HAL_Delay>
	Turn_Off_Buzzer();
 8009726:	f7fc ff9f 	bl	8006668 <Turn_Off_Buzzer>
	//	SCH_Add_Task(test3, 3, 100);
	SCH_Add_Task(PCF_read, 7, 100);
 800972a:	2264      	movs	r2, #100	; 0x64
 800972c:	2107      	movs	r1, #7
 800972e:	4807      	ldr	r0, [pc, #28]	; (800974c <main+0x58>)
 8009730:	f7fe f97e 	bl	8007a30 <SCH_Add_Task>
//	SCH_Add_Task(Led_Display, 5, 5);
	SCH_Add_Task(LED_Display_FSM, 0, 20);
 8009734:	2214      	movs	r2, #20
 8009736:	2100      	movs	r1, #0
 8009738:	4805      	ldr	r0, [pc, #20]	; (8009750 <main+0x5c>)
 800973a:	f7fe f979 	bl	8007a30 <SCH_Add_Task>
//	Set_Relay(0);
//	Set_Relay(3);
//	Set_Relay(8);
	while (1){
		SCH_Dispatch_Tasks();
 800973e:	f7fe f9b5 	bl	8007aac <SCH_Dispatch_Tasks>
		Main_FSM();
 8009742:	f000 f807 	bl	8009754 <Main_FSM>
		SCH_Dispatch_Tasks();
 8009746:	e7fa      	b.n	800973e <main+0x4a>
 8009748:	0800ac94 	.word	0x0800ac94
 800974c:	08006e61 	.word	0x08006e61
 8009750:	08006be9 	.word	0x08006be9

08009754 <Main_FSM>:
	return 0;
}



void Main_FSM(void){
 8009754:	b580      	push	{r7, lr}
 8009756:	af00      	add	r7, sp, #0

	PowerConsumption_FSM();
 8009758:	f7fb fe34 	bl	80053c4 <PowerConsumption_FSM>
	FSM_Process_Data_Received_From_Sim3g();
 800975c:	f7fe fcaa 	bl	80080b4 <FSM_Process_Data_Received_From_Sim3g>

	switch(mainState){
 8009760:	4b10      	ldr	r3, [pc, #64]	; (80097a4 <Main_FSM+0x50>)
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d002      	beq.n	800976e <Main_FSM+0x1a>
 8009768:	2b01      	cmp	r3, #1
 800976a:	d009      	beq.n	8009780 <Main_FSM+0x2c>
		if(Is_Done_Getting_ADC() == RESET){
			mainState = POWER_CONSUMPTION_CALCULATION;
		}
		break;
	default:
		break;
 800976c:	e018      	b.n	80097a0 <Main_FSM+0x4c>
		if(Is_Done_Getting_ADC() == SET){
 800976e:	f7fb fe19 	bl	80053a4 <Is_Done_Getting_ADC>
 8009772:	4603      	mov	r3, r0
 8009774:	2b01      	cmp	r3, #1
 8009776:	d110      	bne.n	800979a <Main_FSM+0x46>
			mainState = POST_DATA_TO_SERVER;
 8009778:	4b0a      	ldr	r3, [pc, #40]	; (80097a4 <Main_FSM+0x50>)
 800977a:	2201      	movs	r2, #1
 800977c:	701a      	strb	r2, [r3, #0]
		break;
 800977e:	e00c      	b.n	800979a <Main_FSM+0x46>
		Server_Communication();
 8009780:	f7fc fd38 	bl	80061f4 <Server_Communication>
		Power_Loop();
 8009784:	f7fd fec0 	bl	8007508 <Power_Loop>
		if(Is_Done_Getting_ADC() == RESET){
 8009788:	f7fb fe0c 	bl	80053a4 <Is_Done_Getting_ADC>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d105      	bne.n	800979e <Main_FSM+0x4a>
			mainState = POWER_CONSUMPTION_CALCULATION;
 8009792:	4b04      	ldr	r3, [pc, #16]	; (80097a4 <Main_FSM+0x50>)
 8009794:	2200      	movs	r2, #0
 8009796:	701a      	strb	r2, [r3, #0]
		break;
 8009798:	e001      	b.n	800979e <Main_FSM+0x4a>
		break;
 800979a:	bf00      	nop
 800979c:	e000      	b.n	80097a0 <Main_FSM+0x4c>
		break;
 800979e:	bf00      	nop
	}
}
 80097a0:	bf00      	nop
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	20000226 	.word	0x20000226

080097a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	af00      	add	r7, sp, #0
	while(1){
//		HAL_GPIO_TogglePin(LED1_GPIO_PORT, LED1_PIN);
		HAL_Delay(100);
 80097ac:	2064      	movs	r0, #100	; 0x64
 80097ae:	f7f7 f9bb 	bl	8000b28 <HAL_Delay>
 80097b2:	e7fb      	b.n	80097ac <Error_Handler+0x4>

080097b4 <HAL_MspInit>:
extern DMA_HandleTypeDef Hdma_adc1Handle;
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
  __HAL_RCC_AFIO_CLK_ENABLE();
 80097ba:	4b15      	ldr	r3, [pc, #84]	; (8009810 <HAL_MspInit+0x5c>)
 80097bc:	699b      	ldr	r3, [r3, #24]
 80097be:	4a14      	ldr	r2, [pc, #80]	; (8009810 <HAL_MspInit+0x5c>)
 80097c0:	f043 0301 	orr.w	r3, r3, #1
 80097c4:	6193      	str	r3, [r2, #24]
 80097c6:	4b12      	ldr	r3, [pc, #72]	; (8009810 <HAL_MspInit+0x5c>)
 80097c8:	699b      	ldr	r3, [r3, #24]
 80097ca:	f003 0301 	and.w	r3, r3, #1
 80097ce:	60bb      	str	r3, [r7, #8]
 80097d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80097d2:	4b0f      	ldr	r3, [pc, #60]	; (8009810 <HAL_MspInit+0x5c>)
 80097d4:	69db      	ldr	r3, [r3, #28]
 80097d6:	4a0e      	ldr	r2, [pc, #56]	; (8009810 <HAL_MspInit+0x5c>)
 80097d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097dc:	61d3      	str	r3, [r2, #28]
 80097de:	4b0c      	ldr	r3, [pc, #48]	; (8009810 <HAL_MspInit+0x5c>)
 80097e0:	69db      	ldr	r3, [r3, #28]
 80097e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097e6:	607b      	str	r3, [r7, #4]
 80097e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80097ea:	4b0a      	ldr	r3, [pc, #40]	; (8009814 <HAL_MspInit+0x60>)
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	60fb      	str	r3, [r7, #12]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80097f6:	60fb      	str	r3, [r7, #12]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80097fe:	60fb      	str	r3, [r7, #12]
 8009800:	4a04      	ldr	r2, [pc, #16]	; (8009814 <HAL_MspInit+0x60>)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6053      	str	r3, [r2, #4]

}
 8009806:	bf00      	nop
 8009808:	3714      	adds	r7, #20
 800980a:	46bd      	mov	sp, r7
 800980c:	bc80      	pop	{r7}
 800980e:	4770      	bx	lr
 8009810:	40021000 	.word	0x40021000
 8009814:	40010000 	.word	0x40010000

08009818 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b090      	sub	sp, #64	; 0x40
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef  GPIO_InitStruct;
	if(huart->Instance == USART1){
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a67      	ldr	r2, [pc, #412]	; (80099c4 <HAL_UART_MspInit+0x1ac>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d146      	bne.n	80098b8 <HAL_UART_MspInit+0xa0>
		/*##-1- Enable peripherals and GPIO Clocks #################################*/
		/* Enable GPIO TX/RX clock */
		USART1_TX_GPIO_CLK_ENABLE();
 800982a:	4b67      	ldr	r3, [pc, #412]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 800982c:	699b      	ldr	r3, [r3, #24]
 800982e:	4a66      	ldr	r2, [pc, #408]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 8009830:	f043 0304 	orr.w	r3, r3, #4
 8009834:	6193      	str	r3, [r2, #24]
 8009836:	4b64      	ldr	r3, [pc, #400]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 8009838:	699b      	ldr	r3, [r3, #24]
 800983a:	f003 0304 	and.w	r3, r3, #4
 800983e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		USART1_RX_GPIO_CLK_ENABLE();
 8009842:	4b61      	ldr	r3, [pc, #388]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 8009844:	699b      	ldr	r3, [r3, #24]
 8009846:	4a60      	ldr	r2, [pc, #384]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 8009848:	f043 0304 	orr.w	r3, r3, #4
 800984c:	6193      	str	r3, [r2, #24]
 800984e:	4b5e      	ldr	r3, [pc, #376]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 8009850:	699b      	ldr	r3, [r3, #24]
 8009852:	f003 0304 	and.w	r3, r3, #4
 8009856:	62bb      	str	r3, [r7, #40]	; 0x28
 8009858:	6abb      	ldr	r3, [r7, #40]	; 0x28


		/* Enable USARTx clock */
		USART1_CLK_ENABLE();
 800985a:	4b5b      	ldr	r3, [pc, #364]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 800985c:	699b      	ldr	r3, [r3, #24]
 800985e:	4a5a      	ldr	r2, [pc, #360]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 8009860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009864:	6193      	str	r3, [r2, #24]
 8009866:	4b58      	ldr	r3, [pc, #352]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 8009868:	699b      	ldr	r3, [r3, #24]
 800986a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800986e:	627b      	str	r3, [r7, #36]	; 0x24
 8009870:	6a7b      	ldr	r3, [r7, #36]	; 0x24

		/*##-2- Configure peripheral GPIO ##########################################*/
		/* UART TX GPIO pin configuration  */
		GPIO_InitStruct.Pin       = USART1_TX_PIN;
 8009872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009876:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8009878:	2302      	movs	r3, #2
 800987a:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800987c:	2301      	movs	r3, #1
 800987e:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8009880:	2303      	movs	r3, #3
 8009882:	63fb      	str	r3, [r7, #60]	; 0x3c

		HAL_GPIO_Init(USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8009884:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009888:	4619      	mov	r1, r3
 800988a:	4850      	ldr	r0, [pc, #320]	; (80099cc <HAL_UART_MspInit+0x1b4>)
 800988c:	f7f8 f942 	bl	8001b14 <HAL_GPIO_Init>

		/* UART RX GPIO pin configuration  */
		GPIO_InitStruct.Pin = USART1_RX_PIN;
 8009890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009894:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 8009896:	2300      	movs	r3, #0
 8009898:	637b      	str	r3, [r7, #52]	; 0x34

		HAL_GPIO_Init(USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 800989a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800989e:	4619      	mov	r1, r3
 80098a0:	484a      	ldr	r0, [pc, #296]	; (80099cc <HAL_UART_MspInit+0x1b4>)
 80098a2:	f7f8 f937 	bl	8001b14 <HAL_GPIO_Init>

		/*##-3- Configure the NVIC for UART ########################################*/
		/* NVIC for USART */
		HAL_NVIC_SetPriority(USART1_IRQn, 0, 1);
 80098a6:	2201      	movs	r2, #1
 80098a8:	2100      	movs	r1, #0
 80098aa:	2025      	movs	r0, #37	; 0x25
 80098ac:	f7f7 fe4f 	bl	800154e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 80098b0:	2025      	movs	r0, #37	; 0x25
 80098b2:	f7f7 fe68 	bl	8001586 <HAL_NVIC_EnableIRQ>
		/* UART RX GPIO pin configuration  */
		GPIO_InitStruct.Pin = USART3_RX_PIN;

		HAL_GPIO_Init(USART3_RX_GPIO_PORT, &GPIO_InitStruct);
	}
}
 80098b6:	e080      	b.n	80099ba <HAL_UART_MspInit+0x1a2>
	} else if(huart->Instance == USART2){
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a44      	ldr	r2, [pc, #272]	; (80099d0 <HAL_UART_MspInit+0x1b8>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d13a      	bne.n	8009938 <HAL_UART_MspInit+0x120>
		USART2_TX_GPIO_CLK_ENABLE();
 80098c2:	4b41      	ldr	r3, [pc, #260]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 80098c4:	699b      	ldr	r3, [r3, #24]
 80098c6:	4a40      	ldr	r2, [pc, #256]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 80098c8:	f043 0304 	orr.w	r3, r3, #4
 80098cc:	6193      	str	r3, [r2, #24]
 80098ce:	4b3e      	ldr	r3, [pc, #248]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 80098d0:	699b      	ldr	r3, [r3, #24]
 80098d2:	f003 0304 	and.w	r3, r3, #4
 80098d6:	623b      	str	r3, [r7, #32]
 80098d8:	6a3b      	ldr	r3, [r7, #32]
		USART2_RX_GPIO_CLK_ENABLE();
 80098da:	4b3b      	ldr	r3, [pc, #236]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 80098dc:	699b      	ldr	r3, [r3, #24]
 80098de:	4a3a      	ldr	r2, [pc, #232]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 80098e0:	f043 0304 	orr.w	r3, r3, #4
 80098e4:	6193      	str	r3, [r2, #24]
 80098e6:	4b38      	ldr	r3, [pc, #224]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 80098e8:	699b      	ldr	r3, [r3, #24]
 80098ea:	f003 0304 	and.w	r3, r3, #4
 80098ee:	61fb      	str	r3, [r7, #28]
 80098f0:	69fb      	ldr	r3, [r7, #28]
		USART2_CLK_ENABLE();
 80098f2:	4b35      	ldr	r3, [pc, #212]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 80098f4:	69db      	ldr	r3, [r3, #28]
 80098f6:	4a34      	ldr	r2, [pc, #208]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 80098f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098fc:	61d3      	str	r3, [r2, #28]
 80098fe:	4b32      	ldr	r3, [pc, #200]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 8009900:	69db      	ldr	r3, [r3, #28]
 8009902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009906:	61bb      	str	r3, [r7, #24]
 8009908:	69bb      	ldr	r3, [r7, #24]
		GPIO_InitStruct.Pin       = USART2_TX_PIN;
 800990a:	2304      	movs	r3, #4
 800990c:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800990e:	2302      	movs	r3, #2
 8009910:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8009912:	2301      	movs	r3, #1
 8009914:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8009916:	2303      	movs	r3, #3
 8009918:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800991a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800991e:	4619      	mov	r1, r3
 8009920:	482a      	ldr	r0, [pc, #168]	; (80099cc <HAL_UART_MspInit+0x1b4>)
 8009922:	f7f8 f8f7 	bl	8001b14 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;
 8009926:	2308      	movs	r3, #8
 8009928:	633b      	str	r3, [r7, #48]	; 0x30
		HAL_GPIO_Init(USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800992a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800992e:	4619      	mov	r1, r3
 8009930:	4826      	ldr	r0, [pc, #152]	; (80099cc <HAL_UART_MspInit+0x1b4>)
 8009932:	f7f8 f8ef 	bl	8001b14 <HAL_GPIO_Init>
}
 8009936:	e040      	b.n	80099ba <HAL_UART_MspInit+0x1a2>
	} else if(huart->Instance == USART3){
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a25      	ldr	r2, [pc, #148]	; (80099d4 <HAL_UART_MspInit+0x1bc>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d13b      	bne.n	80099ba <HAL_UART_MspInit+0x1a2>
		USART3_TX_GPIO_CLK_ENABLE();
 8009942:	4b21      	ldr	r3, [pc, #132]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 8009944:	699b      	ldr	r3, [r3, #24]
 8009946:	4a20      	ldr	r2, [pc, #128]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 8009948:	f043 0308 	orr.w	r3, r3, #8
 800994c:	6193      	str	r3, [r2, #24]
 800994e:	4b1e      	ldr	r3, [pc, #120]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 8009950:	699b      	ldr	r3, [r3, #24]
 8009952:	f003 0308 	and.w	r3, r3, #8
 8009956:	617b      	str	r3, [r7, #20]
 8009958:	697b      	ldr	r3, [r7, #20]
		USART3_RX_GPIO_CLK_ENABLE();
 800995a:	4b1b      	ldr	r3, [pc, #108]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 800995c:	699b      	ldr	r3, [r3, #24]
 800995e:	4a1a      	ldr	r2, [pc, #104]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 8009960:	f043 0308 	orr.w	r3, r3, #8
 8009964:	6193      	str	r3, [r2, #24]
 8009966:	4b18      	ldr	r3, [pc, #96]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	f003 0308 	and.w	r3, r3, #8
 800996e:	613b      	str	r3, [r7, #16]
 8009970:	693b      	ldr	r3, [r7, #16]
		USART3_CLK_ENABLE();
 8009972:	4b15      	ldr	r3, [pc, #84]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 8009974:	69db      	ldr	r3, [r3, #28]
 8009976:	4a14      	ldr	r2, [pc, #80]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 8009978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800997c:	61d3      	str	r3, [r2, #28]
 800997e:	4b12      	ldr	r3, [pc, #72]	; (80099c8 <HAL_UART_MspInit+0x1b0>)
 8009980:	69db      	ldr	r3, [r3, #28]
 8009982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009986:	60fb      	str	r3, [r7, #12]
 8009988:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin       = USART3_TX_PIN;
 800998a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800998e:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8009990:	2302      	movs	r3, #2
 8009992:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8009994:	2301      	movs	r3, #1
 8009996:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8009998:	2303      	movs	r3, #3
 800999a:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(USART3_TX_GPIO_PORT, &GPIO_InitStruct);
 800999c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80099a0:	4619      	mov	r1, r3
 80099a2:	480d      	ldr	r0, [pc, #52]	; (80099d8 <HAL_UART_MspInit+0x1c0>)
 80099a4:	f7f8 f8b6 	bl	8001b14 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;
 80099a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80099ac:	633b      	str	r3, [r7, #48]	; 0x30
		HAL_GPIO_Init(USART3_RX_GPIO_PORT, &GPIO_InitStruct);
 80099ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80099b2:	4619      	mov	r1, r3
 80099b4:	4808      	ldr	r0, [pc, #32]	; (80099d8 <HAL_UART_MspInit+0x1c0>)
 80099b6:	f7f8 f8ad 	bl	8001b14 <HAL_GPIO_Init>
}
 80099ba:	bf00      	nop
 80099bc:	3740      	adds	r7, #64	; 0x40
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	40013800 	.word	0x40013800
 80099c8:	40021000 	.word	0x40021000
 80099cc:	40010800 	.word	0x40010800
 80099d0:	40004400 	.word	0x40004400
 80099d4:	40004800 	.word	0x40004800
 80099d8:	40010c00 	.word	0x40010c00

080099dc <HAL_UART_MspDeInit>:
  *          - Revert GPIO and NVIC configuration to their default state
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a2a      	ldr	r2, [pc, #168]	; (8009a94 <HAL_UART_MspDeInit+0xb8>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d119      	bne.n	8009a22 <HAL_UART_MspDeInit+0x46>
		/*##-1- Reset peripherals ##################################################*/
		USART1_FORCE_RESET();
 80099ee:	4b2a      	ldr	r3, [pc, #168]	; (8009a98 <HAL_UART_MspDeInit+0xbc>)
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	4a29      	ldr	r2, [pc, #164]	; (8009a98 <HAL_UART_MspDeInit+0xbc>)
 80099f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80099f8:	60d3      	str	r3, [r2, #12]
		USART1_RELEASE_RESET();
 80099fa:	4b27      	ldr	r3, [pc, #156]	; (8009a98 <HAL_UART_MspDeInit+0xbc>)
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	4a26      	ldr	r2, [pc, #152]	; (8009a98 <HAL_UART_MspDeInit+0xbc>)
 8009a00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a04:	60d3      	str	r3, [r2, #12]

		/*##-2- Disable peripherals and GPIO Clocks #################################*/
		/* Configure UART Tx as alternate function  */
		HAL_GPIO_DeInit(USART1_TX_GPIO_PORT, USART1_TX_PIN);
 8009a06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a0a:	4824      	ldr	r0, [pc, #144]	; (8009a9c <HAL_UART_MspDeInit+0xc0>)
 8009a0c:	f7f8 f9dc 	bl	8001dc8 <HAL_GPIO_DeInit>
		/* Configure UART Rx as alternate function  */
		HAL_GPIO_DeInit(USART1_RX_GPIO_PORT, USART1_RX_PIN);
 8009a10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009a14:	4821      	ldr	r0, [pc, #132]	; (8009a9c <HAL_UART_MspDeInit+0xc0>)
 8009a16:	f7f8 f9d7 	bl	8001dc8 <HAL_GPIO_DeInit>

		/*##-3- Disable the NVIC for UART ##########################################*/
		HAL_NVIC_DisableIRQ(USART1_IRQn);
 8009a1a:	2025      	movs	r0, #37	; 0x25
 8009a1c:	f7f7 fdc1 	bl	80015a2 <HAL_NVIC_DisableIRQ>
		  /* Configure UART Tx as alternate function  */
		  HAL_GPIO_DeInit(USART3_TX_GPIO_PORT, USART3_TX_PIN);
		  /* Configure UART Rx as alternate function  */
		  HAL_GPIO_DeInit(USART3_RX_GPIO_PORT, USART3_RX_PIN);
	}
}
 8009a20:	e034      	b.n	8009a8c <HAL_UART_MspDeInit+0xb0>
	} else if(huart->Instance == USART2){
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a1e      	ldr	r2, [pc, #120]	; (8009aa0 <HAL_UART_MspDeInit+0xc4>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d114      	bne.n	8009a56 <HAL_UART_MspDeInit+0x7a>
		  USART2_FORCE_RESET();
 8009a2c:	4b1a      	ldr	r3, [pc, #104]	; (8009a98 <HAL_UART_MspDeInit+0xbc>)
 8009a2e:	691b      	ldr	r3, [r3, #16]
 8009a30:	4a19      	ldr	r2, [pc, #100]	; (8009a98 <HAL_UART_MspDeInit+0xbc>)
 8009a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a36:	6113      	str	r3, [r2, #16]
		  USART2_RELEASE_RESET();
 8009a38:	4b17      	ldr	r3, [pc, #92]	; (8009a98 <HAL_UART_MspDeInit+0xbc>)
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	4a16      	ldr	r2, [pc, #88]	; (8009a98 <HAL_UART_MspDeInit+0xbc>)
 8009a3e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009a42:	6113      	str	r3, [r2, #16]
		  HAL_GPIO_DeInit(USART2_TX_GPIO_PORT, USART2_TX_PIN);
 8009a44:	2104      	movs	r1, #4
 8009a46:	4815      	ldr	r0, [pc, #84]	; (8009a9c <HAL_UART_MspDeInit+0xc0>)
 8009a48:	f7f8 f9be 	bl	8001dc8 <HAL_GPIO_DeInit>
		  HAL_GPIO_DeInit(USART2_RX_GPIO_PORT, USART2_RX_PIN);
 8009a4c:	2108      	movs	r1, #8
 8009a4e:	4813      	ldr	r0, [pc, #76]	; (8009a9c <HAL_UART_MspDeInit+0xc0>)
 8009a50:	f7f8 f9ba 	bl	8001dc8 <HAL_GPIO_DeInit>
}
 8009a54:	e01a      	b.n	8009a8c <HAL_UART_MspDeInit+0xb0>
	}  else if(huart->Instance == USART3){
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a12      	ldr	r2, [pc, #72]	; (8009aa4 <HAL_UART_MspDeInit+0xc8>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d115      	bne.n	8009a8c <HAL_UART_MspDeInit+0xb0>
		  USART3_FORCE_RESET();
 8009a60:	4b0d      	ldr	r3, [pc, #52]	; (8009a98 <HAL_UART_MspDeInit+0xbc>)
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	4a0c      	ldr	r2, [pc, #48]	; (8009a98 <HAL_UART_MspDeInit+0xbc>)
 8009a66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a6a:	6113      	str	r3, [r2, #16]
		  USART3_RELEASE_RESET();
 8009a6c:	4b0a      	ldr	r3, [pc, #40]	; (8009a98 <HAL_UART_MspDeInit+0xbc>)
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	4a09      	ldr	r2, [pc, #36]	; (8009a98 <HAL_UART_MspDeInit+0xbc>)
 8009a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a76:	6113      	str	r3, [r2, #16]
		  HAL_GPIO_DeInit(USART3_TX_GPIO_PORT, USART3_TX_PIN);
 8009a78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009a7c:	480a      	ldr	r0, [pc, #40]	; (8009aa8 <HAL_UART_MspDeInit+0xcc>)
 8009a7e:	f7f8 f9a3 	bl	8001dc8 <HAL_GPIO_DeInit>
		  HAL_GPIO_DeInit(USART3_RX_GPIO_PORT, USART3_RX_PIN);
 8009a82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009a86:	4808      	ldr	r0, [pc, #32]	; (8009aa8 <HAL_UART_MspDeInit+0xcc>)
 8009a88:	f7f8 f99e 	bl	8001dc8 <HAL_GPIO_DeInit>
}
 8009a8c:	bf00      	nop
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	40013800 	.word	0x40013800
 8009a98:	40021000 	.word	0x40021000
 8009a9c:	40010800 	.word	0x40010800
 8009aa0:	40004400 	.word	0x40004400
 8009aa4:	40004800 	.word	0x40004800
 8009aa8:	40010c00 	.word	0x40010c00

08009aac <HAL_TIM_Base_MspInit>:
  *           - Peripheral's clock enable
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  /*##-1- Enable peripheral clock #################################*/
  /* TIMx Peripheral clock enable */
  TIMx_CLK_ENABLE();
 8009ab4:	4b0b      	ldr	r3, [pc, #44]	; (8009ae4 <HAL_TIM_Base_MspInit+0x38>)
 8009ab6:	69db      	ldr	r3, [r3, #28]
 8009ab8:	4a0a      	ldr	r2, [pc, #40]	; (8009ae4 <HAL_TIM_Base_MspInit+0x38>)
 8009aba:	f043 0302 	orr.w	r3, r3, #2
 8009abe:	61d3      	str	r3, [r2, #28]
 8009ac0:	4b08      	ldr	r3, [pc, #32]	; (8009ae4 <HAL_TIM_Base_MspInit+0x38>)
 8009ac2:	69db      	ldr	r3, [r3, #28]
 8009ac4:	f003 0302 	and.w	r3, r3, #2
 8009ac8:	60fb      	str	r3, [r7, #12]
 8009aca:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure the NVIC for TIMx ########################################*/
  /* Set the TIMx priority */
  HAL_NVIC_SetPriority(TIMx_IRQn, 3, 0);
 8009acc:	2200      	movs	r2, #0
 8009ace:	2103      	movs	r1, #3
 8009ad0:	201d      	movs	r0, #29
 8009ad2:	f7f7 fd3c 	bl	800154e <HAL_NVIC_SetPriority>

  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 8009ad6:	201d      	movs	r0, #29
 8009ad8:	f7f7 fd55 	bl	8001586 <HAL_NVIC_EnableIRQ>
}
 8009adc:	bf00      	nop
 8009ade:	3710      	adds	r7, #16
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	40021000 	.word	0x40021000

08009ae8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b08a      	sub	sp, #40	; 0x28
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009af0:	f107 0318 	add.w	r3, r7, #24
 8009af4:	2200      	movs	r2, #0
 8009af6:	601a      	str	r2, [r3, #0]
 8009af8:	605a      	str	r2, [r3, #4]
 8009afa:	609a      	str	r2, [r3, #8]
 8009afc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a3e      	ldr	r2, [pc, #248]	; (8009bfc <HAL_ADC_MspInit+0x114>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d175      	bne.n	8009bf4 <HAL_ADC_MspInit+0x10c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009b08:	4b3d      	ldr	r3, [pc, #244]	; (8009c00 <HAL_ADC_MspInit+0x118>)
 8009b0a:	699b      	ldr	r3, [r3, #24]
 8009b0c:	4a3c      	ldr	r2, [pc, #240]	; (8009c00 <HAL_ADC_MspInit+0x118>)
 8009b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009b12:	6193      	str	r3, [r2, #24]
 8009b14:	4b3a      	ldr	r3, [pc, #232]	; (8009c00 <HAL_ADC_MspInit+0x118>)
 8009b16:	699b      	ldr	r3, [r3, #24]
 8009b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b1c:	617b      	str	r3, [r7, #20]
 8009b1e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009b20:	4b37      	ldr	r3, [pc, #220]	; (8009c00 <HAL_ADC_MspInit+0x118>)
 8009b22:	699b      	ldr	r3, [r3, #24]
 8009b24:	4a36      	ldr	r2, [pc, #216]	; (8009c00 <HAL_ADC_MspInit+0x118>)
 8009b26:	f043 0310 	orr.w	r3, r3, #16
 8009b2a:	6193      	str	r3, [r2, #24]
 8009b2c:	4b34      	ldr	r3, [pc, #208]	; (8009c00 <HAL_ADC_MspInit+0x118>)
 8009b2e:	699b      	ldr	r3, [r3, #24]
 8009b30:	f003 0310 	and.w	r3, r3, #16
 8009b34:	613b      	str	r3, [r7, #16]
 8009b36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b38:	4b31      	ldr	r3, [pc, #196]	; (8009c00 <HAL_ADC_MspInit+0x118>)
 8009b3a:	699b      	ldr	r3, [r3, #24]
 8009b3c:	4a30      	ldr	r2, [pc, #192]	; (8009c00 <HAL_ADC_MspInit+0x118>)
 8009b3e:	f043 0304 	orr.w	r3, r3, #4
 8009b42:	6193      	str	r3, [r2, #24]
 8009b44:	4b2e      	ldr	r3, [pc, #184]	; (8009c00 <HAL_ADC_MspInit+0x118>)
 8009b46:	699b      	ldr	r3, [r3, #24]
 8009b48:	f003 0304 	and.w	r3, r3, #4
 8009b4c:	60fb      	str	r3, [r7, #12]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009b50:	4b2b      	ldr	r3, [pc, #172]	; (8009c00 <HAL_ADC_MspInit+0x118>)
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	4a2a      	ldr	r2, [pc, #168]	; (8009c00 <HAL_ADC_MspInit+0x118>)
 8009b56:	f043 0308 	orr.w	r3, r3, #8
 8009b5a:	6193      	str	r3, [r2, #24]
 8009b5c:	4b28      	ldr	r3, [pc, #160]	; (8009c00 <HAL_ADC_MspInit+0x118>)
 8009b5e:	699b      	ldr	r3, [r3, #24]
 8009b60:	f003 0308 	and.w	r3, r3, #8
 8009b64:	60bb      	str	r3, [r7, #8]
 8009b66:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8009b68:	2307      	movs	r3, #7
 8009b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009b6c:	2303      	movs	r3, #3
 8009b6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009b70:	f107 0318 	add.w	r3, r7, #24
 8009b74:	4619      	mov	r1, r3
 8009b76:	4823      	ldr	r0, [pc, #140]	; (8009c04 <HAL_ADC_MspInit+0x11c>)
 8009b78:	f7f7 ffcc 	bl	8001b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8009b7c:	23ff      	movs	r3, #255	; 0xff
 8009b7e:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4 |GPIO_PIN_5 |GPIO_PIN_6 |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009b80:	2303      	movs	r3, #3
 8009b82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b84:	f107 0318 	add.w	r3, r7, #24
 8009b88:	4619      	mov	r1, r3
 8009b8a:	481f      	ldr	r0, [pc, #124]	; (8009c08 <HAL_ADC_MspInit+0x120>)
 8009b8c:	f7f7 ffc2 	bl	8001b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009b90:	2303      	movs	r3, #3
 8009b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009b94:	2303      	movs	r3, #3
 8009b96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009b98:	f107 0318 	add.w	r3, r7, #24
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	481b      	ldr	r0, [pc, #108]	; (8009c0c <HAL_ADC_MspInit+0x124>)
 8009ba0:	f7f7 ffb8 	bl	8001b14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    Hdma_adc1Handle.Instance = DMA1_Channel1;
 8009ba4:	4b1a      	ldr	r3, [pc, #104]	; (8009c10 <HAL_ADC_MspInit+0x128>)
 8009ba6:	4a1b      	ldr	r2, [pc, #108]	; (8009c14 <HAL_ADC_MspInit+0x12c>)
 8009ba8:	601a      	str	r2, [r3, #0]
    Hdma_adc1Handle.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009baa:	4b19      	ldr	r3, [pc, #100]	; (8009c10 <HAL_ADC_MspInit+0x128>)
 8009bac:	2200      	movs	r2, #0
 8009bae:	605a      	str	r2, [r3, #4]
    Hdma_adc1Handle.Init.PeriphInc = DMA_PINC_DISABLE;
 8009bb0:	4b17      	ldr	r3, [pc, #92]	; (8009c10 <HAL_ADC_MspInit+0x128>)
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	609a      	str	r2, [r3, #8]
    Hdma_adc1Handle.Init.MemInc = DMA_MINC_ENABLE;
 8009bb6:	4b16      	ldr	r3, [pc, #88]	; (8009c10 <HAL_ADC_MspInit+0x128>)
 8009bb8:	2280      	movs	r2, #128	; 0x80
 8009bba:	60da      	str	r2, [r3, #12]
    Hdma_adc1Handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009bbc:	4b14      	ldr	r3, [pc, #80]	; (8009c10 <HAL_ADC_MspInit+0x128>)
 8009bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bc2:	611a      	str	r2, [r3, #16]
    Hdma_adc1Handle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009bc4:	4b12      	ldr	r3, [pc, #72]	; (8009c10 <HAL_ADC_MspInit+0x128>)
 8009bc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009bca:	615a      	str	r2, [r3, #20]
    Hdma_adc1Handle.Init.Mode = DMA_CIRCULAR;
 8009bcc:	4b10      	ldr	r3, [pc, #64]	; (8009c10 <HAL_ADC_MspInit+0x128>)
 8009bce:	2220      	movs	r2, #32
 8009bd0:	619a      	str	r2, [r3, #24]
    Hdma_adc1Handle.Init.Priority = DMA_PRIORITY_LOW;
 8009bd2:	4b0f      	ldr	r3, [pc, #60]	; (8009c10 <HAL_ADC_MspInit+0x128>)
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&Hdma_adc1Handle) != HAL_OK)
 8009bd8:	480d      	ldr	r0, [pc, #52]	; (8009c10 <HAL_ADC_MspInit+0x128>)
 8009bda:	f7f7 fcfd 	bl	80015d8 <HAL_DMA_Init>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d001      	beq.n	8009be8 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8009be4:	f7ff fde0 	bl	80097a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,Hdma_adc1Handle);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	4a09      	ldr	r2, [pc, #36]	; (8009c10 <HAL_ADC_MspInit+0x128>)
 8009bec:	621a      	str	r2, [r3, #32]
 8009bee:	4a08      	ldr	r2, [pc, #32]	; (8009c10 <HAL_ADC_MspInit+0x128>)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6253      	str	r3, [r2, #36]	; 0x24
  }

}
 8009bf4:	bf00      	nop
 8009bf6:	3728      	adds	r7, #40	; 0x28
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	40012400 	.word	0x40012400
 8009c00:	40021000 	.word	0x40021000
 8009c04:	40011000 	.word	0x40011000
 8009c08:	40010800 	.word	0x40010800
 8009c0c:	40010c00 	.word	0x40010c00
 8009c10:	200026c0 	.word	0x200026c0
 8009c14:	40020008 	.word	0x40020008

08009c18 <HAL_SPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b08a      	sub	sp, #40	; 0x28
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
GPIO_InitTypeDef  GPIO_InitStruct;

  if(hspi->Instance == SPI2)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a30      	ldr	r2, [pc, #192]	; (8009ce8 <HAL_SPI_MspInit+0xd0>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d159      	bne.n	8009cde <HAL_SPI_MspInit+0xc6>
  {
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    SPI2_SCK_GPIO_CLK_ENABLE();
 8009c2a:	4b30      	ldr	r3, [pc, #192]	; (8009cec <HAL_SPI_MspInit+0xd4>)
 8009c2c:	699b      	ldr	r3, [r3, #24]
 8009c2e:	4a2f      	ldr	r2, [pc, #188]	; (8009cec <HAL_SPI_MspInit+0xd4>)
 8009c30:	f043 0308 	orr.w	r3, r3, #8
 8009c34:	6193      	str	r3, [r2, #24]
 8009c36:	4b2d      	ldr	r3, [pc, #180]	; (8009cec <HAL_SPI_MspInit+0xd4>)
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	f003 0308 	and.w	r3, r3, #8
 8009c3e:	617b      	str	r3, [r7, #20]
 8009c40:	697b      	ldr	r3, [r7, #20]
    SPI2_MISO_GPIO_CLK_ENABLE();
 8009c42:	4b2a      	ldr	r3, [pc, #168]	; (8009cec <HAL_SPI_MspInit+0xd4>)
 8009c44:	699b      	ldr	r3, [r3, #24]
 8009c46:	4a29      	ldr	r2, [pc, #164]	; (8009cec <HAL_SPI_MspInit+0xd4>)
 8009c48:	f043 0308 	orr.w	r3, r3, #8
 8009c4c:	6193      	str	r3, [r2, #24]
 8009c4e:	4b27      	ldr	r3, [pc, #156]	; (8009cec <HAL_SPI_MspInit+0xd4>)
 8009c50:	699b      	ldr	r3, [r3, #24]
 8009c52:	f003 0308 	and.w	r3, r3, #8
 8009c56:	613b      	str	r3, [r7, #16]
 8009c58:	693b      	ldr	r3, [r7, #16]
    SPI2_MOSI_GPIO_CLK_ENABLE();
 8009c5a:	4b24      	ldr	r3, [pc, #144]	; (8009cec <HAL_SPI_MspInit+0xd4>)
 8009c5c:	699b      	ldr	r3, [r3, #24]
 8009c5e:	4a23      	ldr	r2, [pc, #140]	; (8009cec <HAL_SPI_MspInit+0xd4>)
 8009c60:	f043 0308 	orr.w	r3, r3, #8
 8009c64:	6193      	str	r3, [r2, #24]
 8009c66:	4b21      	ldr	r3, [pc, #132]	; (8009cec <HAL_SPI_MspInit+0xd4>)
 8009c68:	699b      	ldr	r3, [r3, #24]
 8009c6a:	f003 0308 	and.w	r3, r3, #8
 8009c6e:	60fb      	str	r3, [r7, #12]
 8009c70:	68fb      	ldr	r3, [r7, #12]
    /* Enable SPI clock */
    SPI2_CLK_ENABLE();
 8009c72:	4b1e      	ldr	r3, [pc, #120]	; (8009cec <HAL_SPI_MspInit+0xd4>)
 8009c74:	69db      	ldr	r3, [r3, #28]
 8009c76:	4a1d      	ldr	r2, [pc, #116]	; (8009cec <HAL_SPI_MspInit+0xd4>)
 8009c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009c7c:	61d3      	str	r3, [r2, #28]
 8009c7e:	4b1b      	ldr	r3, [pc, #108]	; (8009cec <HAL_SPI_MspInit+0xd4>)
 8009c80:	69db      	ldr	r3, [r3, #28]
 8009c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c86:	60bb      	str	r3, [r7, #8]
 8009c88:	68bb      	ldr	r3, [r7, #8]

    /*##-2- Configure peripheral GPIO ##########################################*/
    /* SPI SCK GPIO pin configuration  */
    GPIO_InitStruct.Pin       = SPI2_SCK_PIN;
 8009c8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8009c90:	2302      	movs	r3, #2
 8009c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 8009c94:	2302      	movs	r3, #2
 8009c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 8009c98:	2302      	movs	r3, #2
 8009c9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8009c9c:	f107 0318 	add.w	r3, r7, #24
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	4813      	ldr	r0, [pc, #76]	; (8009cf0 <HAL_SPI_MspInit+0xd8>)
 8009ca4:	f7f7 ff36 	bl	8001b14 <HAL_GPIO_Init>

    /* SPI MISO GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPI2_MISO_PIN;
 8009ca8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009cac:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 8009cae:	f107 0318 	add.w	r3, r7, #24
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	480e      	ldr	r0, [pc, #56]	; (8009cf0 <HAL_SPI_MspInit+0xd8>)
 8009cb6:	f7f7 ff2d 	bl	8001b14 <HAL_GPIO_Init>

    /* SPI MOSI GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPI2_MOSI_PIN;
 8009cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cbe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8009cc0:	f107 0318 	add.w	r3, r7, #24
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	480a      	ldr	r0, [pc, #40]	; (8009cf0 <HAL_SPI_MspInit+0xd8>)
 8009cc8:	f7f7 ff24 	bl	8001b14 <HAL_GPIO_Init>


    /* SPI NSS GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPI2_NSS_PIN;
 8009ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cd0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI2_NSS_GPIO_PORT, &GPIO_InitStruct);
 8009cd2:	f107 0318 	add.w	r3, r7, #24
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	4805      	ldr	r0, [pc, #20]	; (8009cf0 <HAL_SPI_MspInit+0xd8>)
 8009cda:	f7f7 ff1b 	bl	8001b14 <HAL_GPIO_Init>
  }
}
 8009cde:	bf00      	nop
 8009ce0:	3728      	adds	r7, #40	; 0x28
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	40003800 	.word	0x40003800
 8009cec:	40021000 	.word	0x40021000
 8009cf0:	40010c00 	.word	0x40010c00

08009cf4 <HAL_I2C_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b08a      	sub	sp, #40	; 0x28
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  I2C1_SCL_GPIO_CLK_ENABLE();
 8009cfc:	4b1e      	ldr	r3, [pc, #120]	; (8009d78 <HAL_I2C_MspInit+0x84>)
 8009cfe:	699b      	ldr	r3, [r3, #24]
 8009d00:	4a1d      	ldr	r2, [pc, #116]	; (8009d78 <HAL_I2C_MspInit+0x84>)
 8009d02:	f043 0308 	orr.w	r3, r3, #8
 8009d06:	6193      	str	r3, [r2, #24]
 8009d08:	4b1b      	ldr	r3, [pc, #108]	; (8009d78 <HAL_I2C_MspInit+0x84>)
 8009d0a:	699b      	ldr	r3, [r3, #24]
 8009d0c:	f003 0308 	and.w	r3, r3, #8
 8009d10:	617b      	str	r3, [r7, #20]
 8009d12:	697b      	ldr	r3, [r7, #20]
  I2C1_SDA_GPIO_CLK_ENABLE();
 8009d14:	4b18      	ldr	r3, [pc, #96]	; (8009d78 <HAL_I2C_MspInit+0x84>)
 8009d16:	699b      	ldr	r3, [r3, #24]
 8009d18:	4a17      	ldr	r2, [pc, #92]	; (8009d78 <HAL_I2C_MspInit+0x84>)
 8009d1a:	f043 0308 	orr.w	r3, r3, #8
 8009d1e:	6193      	str	r3, [r2, #24]
 8009d20:	4b15      	ldr	r3, [pc, #84]	; (8009d78 <HAL_I2C_MspInit+0x84>)
 8009d22:	699b      	ldr	r3, [r3, #24]
 8009d24:	f003 0308 	and.w	r3, r3, #8
 8009d28:	613b      	str	r3, [r7, #16]
 8009d2a:	693b      	ldr	r3, [r7, #16]
  /* Enable I2Cx clock */
  I2C1_CLK_ENABLE();
 8009d2c:	4b12      	ldr	r3, [pc, #72]	; (8009d78 <HAL_I2C_MspInit+0x84>)
 8009d2e:	69db      	ldr	r3, [r3, #28]
 8009d30:	4a11      	ldr	r2, [pc, #68]	; (8009d78 <HAL_I2C_MspInit+0x84>)
 8009d32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009d36:	61d3      	str	r3, [r2, #28]
 8009d38:	4b0f      	ldr	r3, [pc, #60]	; (8009d78 <HAL_I2C_MspInit+0x84>)
 8009d3a:	69db      	ldr	r3, [r3, #28]
 8009d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d40:	60fb      	str	r3, [r7, #12]
 8009d42:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2C1_SCL_PIN;
 8009d44:	2340      	movs	r3, #64	; 0x40
 8009d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8009d48:	2312      	movs	r3, #18
 8009d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8009d50:	2303      	movs	r3, #3
 8009d52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8009d54:	f107 0318 	add.w	r3, r7, #24
 8009d58:	4619      	mov	r1, r3
 8009d5a:	4808      	ldr	r0, [pc, #32]	; (8009d7c <HAL_I2C_MspInit+0x88>)
 8009d5c:	f7f7 feda 	bl	8001b14 <HAL_GPIO_Init>

  /* I2C RX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2C1_SDA_PIN;
 8009d60:	2380      	movs	r3, #128	; 0x80
 8009d62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8009d64:	f107 0318 	add.w	r3, r7, #24
 8009d68:	4619      	mov	r1, r3
 8009d6a:	4804      	ldr	r0, [pc, #16]	; (8009d7c <HAL_I2C_MspInit+0x88>)
 8009d6c:	f7f7 fed2 	bl	8001b14 <HAL_GPIO_Init>
}
 8009d70:	bf00      	nop
 8009d72:	3728      	adds	r7, #40	; 0x28
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}
 8009d78:	40021000 	.word	0x40021000
 8009d7c:	40010c00 	.word	0x40010c00

08009d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009d80:	b480      	push	{r7}
 8009d82:	af00      	add	r7, sp, #0

}
 8009d84:	bf00      	nop
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bc80      	pop	{r7}
 8009d8a:	4770      	bx	lr

08009d8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009d90:	e7fe      	b.n	8009d90 <HardFault_Handler+0x4>

08009d92 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009d92:	b480      	push	{r7}
 8009d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009d96:	e7fe      	b.n	8009d96 <MemManage_Handler+0x4>

08009d98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009d9c:	e7fe      	b.n	8009d9c <BusFault_Handler+0x4>

08009d9e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009d9e:	b480      	push	{r7}
 8009da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009da2:	e7fe      	b.n	8009da2 <UsageFault_Handler+0x4>

08009da4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009da4:	b480      	push	{r7}
 8009da6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009da8:	bf00      	nop
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bc80      	pop	{r7}
 8009dae:	4770      	bx	lr

08009db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009db0:	b480      	push	{r7}
 8009db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009db4:	bf00      	nop
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bc80      	pop	{r7}
 8009dba:	4770      	bx	lr

08009dbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009dc0:	bf00      	nop
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bc80      	pop	{r7}
 8009dc6:	4770      	bx	lr

08009dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8009dcc:	f7f6 fe90 	bl	8000af0 <HAL_IncTick>
}
 8009dd0:	bf00      	nop
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(ZERO_POINT_DETECTION_PIN);
 8009dd8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009ddc:	f7f8 f8c8 	bl	8001f70 <HAL_GPIO_EXTI_IRQHandler>
//  test2();
}
 8009de0:	bf00      	nop
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&TimHandle);
 8009de8:	4802      	ldr	r0, [pc, #8]	; (8009df4 <TIM3_IRQHandler+0x10>)
 8009dea:	f7fa fa6f 	bl	80042cc <HAL_TIM_IRQHandler>
}
 8009dee:	bf00      	nop
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	20002cc8 	.word	0x20002cc8

08009df8 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&Uart1Handle);
 8009dfc:	4802      	ldr	r0, [pc, #8]	; (8009e08 <USART1_IRQHandler+0x10>)
 8009dfe:	f7fa fd9f 	bl	8004940 <HAL_UART_IRQHandler>
 }
 8009e02:	bf00      	nop
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	20002e84 	.word	0x20002e84

08009e0c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&Hdma_adc1Handle);
 8009e10:	4802      	ldr	r0, [pc, #8]	; (8009e1c <DMA1_Channel1_IRQHandler+0x10>)
 8009e12:	f7f7 fd4b 	bl	80018ac <HAL_DMA_IRQHandler>
}
 8009e16:	bf00      	nop
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	200026c0 	.word	0x200026c0

08009e20 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009e28:	4b11      	ldr	r3, [pc, #68]	; (8009e70 <_sbrk+0x50>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d102      	bne.n	8009e36 <_sbrk+0x16>
		heap_end = &end;
 8009e30:	4b0f      	ldr	r3, [pc, #60]	; (8009e70 <_sbrk+0x50>)
 8009e32:	4a10      	ldr	r2, [pc, #64]	; (8009e74 <_sbrk+0x54>)
 8009e34:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8009e36:	4b0e      	ldr	r3, [pc, #56]	; (8009e70 <_sbrk+0x50>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009e3c:	4b0c      	ldr	r3, [pc, #48]	; (8009e70 <_sbrk+0x50>)
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4413      	add	r3, r2
 8009e44:	466a      	mov	r2, sp
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d907      	bls.n	8009e5a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8009e4a:	f000 f86f 	bl	8009f2c <__errno>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	230c      	movs	r3, #12
 8009e52:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8009e54:	f04f 33ff 	mov.w	r3, #4294967295
 8009e58:	e006      	b.n	8009e68 <_sbrk+0x48>
	}

	heap_end += incr;
 8009e5a:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <_sbrk+0x50>)
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4413      	add	r3, r2
 8009e62:	4a03      	ldr	r2, [pc, #12]	; (8009e70 <_sbrk+0x50>)
 8009e64:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8009e66:	68fb      	ldr	r3, [r7, #12]
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	20000228 	.word	0x20000228
 8009e74:	20002ec8 	.word	0x20002ec8

08009e78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8009e7c:	4b15      	ldr	r3, [pc, #84]	; (8009ed4 <SystemInit+0x5c>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a14      	ldr	r2, [pc, #80]	; (8009ed4 <SystemInit+0x5c>)
 8009e82:	f043 0301 	orr.w	r3, r3, #1
 8009e86:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8009e88:	4b12      	ldr	r3, [pc, #72]	; (8009ed4 <SystemInit+0x5c>)
 8009e8a:	685a      	ldr	r2, [r3, #4]
 8009e8c:	4911      	ldr	r1, [pc, #68]	; (8009ed4 <SystemInit+0x5c>)
 8009e8e:	4b12      	ldr	r3, [pc, #72]	; (8009ed8 <SystemInit+0x60>)
 8009e90:	4013      	ands	r3, r2
 8009e92:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8009e94:	4b0f      	ldr	r3, [pc, #60]	; (8009ed4 <SystemInit+0x5c>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a0e      	ldr	r2, [pc, #56]	; (8009ed4 <SystemInit+0x5c>)
 8009e9a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8009e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ea2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009ea4:	4b0b      	ldr	r3, [pc, #44]	; (8009ed4 <SystemInit+0x5c>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a0a      	ldr	r2, [pc, #40]	; (8009ed4 <SystemInit+0x5c>)
 8009eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009eae:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8009eb0:	4b08      	ldr	r3, [pc, #32]	; (8009ed4 <SystemInit+0x5c>)
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	4a07      	ldr	r2, [pc, #28]	; (8009ed4 <SystemInit+0x5c>)
 8009eb6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8009eba:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8009ebc:	4b05      	ldr	r3, [pc, #20]	; (8009ed4 <SystemInit+0x5c>)
 8009ebe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8009ec2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8009ec4:	4b05      	ldr	r3, [pc, #20]	; (8009edc <SystemInit+0x64>)
 8009ec6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009eca:	609a      	str	r2, [r3, #8]
#endif 
}
 8009ecc:	bf00      	nop
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bc80      	pop	{r7}
 8009ed2:	4770      	bx	lr
 8009ed4:	40021000 	.word	0x40021000
 8009ed8:	f8ff0000 	.word	0xf8ff0000
 8009edc:	e000ed00 	.word	0xe000ed00

08009ee0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8009ee0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8009ee2:	e003      	b.n	8009eec <LoopCopyDataInit>

08009ee4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8009ee4:	4b0b      	ldr	r3, [pc, #44]	; (8009f14 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8009ee6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8009ee8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8009eea:	3104      	adds	r1, #4

08009eec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8009eec:	480a      	ldr	r0, [pc, #40]	; (8009f18 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8009eee:	4b0b      	ldr	r3, [pc, #44]	; (8009f1c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8009ef0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8009ef2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8009ef4:	d3f6      	bcc.n	8009ee4 <CopyDataInit>
  ldr r2, =_sbss
 8009ef6:	4a0a      	ldr	r2, [pc, #40]	; (8009f20 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8009ef8:	e002      	b.n	8009f00 <LoopFillZerobss>

08009efa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8009efa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8009efc:	f842 3b04 	str.w	r3, [r2], #4

08009f00 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8009f00:	4b08      	ldr	r3, [pc, #32]	; (8009f24 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8009f02:	429a      	cmp	r2, r3
  bcc FillZerobss
 8009f04:	d3f9      	bcc.n	8009efa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009f06:	f7ff ffb7 	bl	8009e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009f0a:	f000 f815 	bl	8009f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009f0e:	f7ff fbf1 	bl	80096f4 <main>
  bx lr
 8009f12:	4770      	bx	lr
  ldr r3, =_sidata
 8009f14:	0800ae14 	.word	0x0800ae14
  ldr r0, =_sdata
 8009f18:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8009f1c:	200001c8 	.word	0x200001c8
  ldr r2, =_sbss
 8009f20:	200001c8 	.word	0x200001c8
  ldr r3, = _ebss
 8009f24:	20002ec8 	.word	0x20002ec8

08009f28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009f28:	e7fe      	b.n	8009f28 <ADC1_2_IRQHandler>
	...

08009f2c <__errno>:
 8009f2c:	4b01      	ldr	r3, [pc, #4]	; (8009f34 <__errno+0x8>)
 8009f2e:	6818      	ldr	r0, [r3, #0]
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop
 8009f34:	20000160 	.word	0x20000160

08009f38 <__libc_init_array>:
 8009f38:	b570      	push	{r4, r5, r6, lr}
 8009f3a:	2500      	movs	r5, #0
 8009f3c:	4e0c      	ldr	r6, [pc, #48]	; (8009f70 <__libc_init_array+0x38>)
 8009f3e:	4c0d      	ldr	r4, [pc, #52]	; (8009f74 <__libc_init_array+0x3c>)
 8009f40:	1ba4      	subs	r4, r4, r6
 8009f42:	10a4      	asrs	r4, r4, #2
 8009f44:	42a5      	cmp	r5, r4
 8009f46:	d109      	bne.n	8009f5c <__libc_init_array+0x24>
 8009f48:	f000 fd36 	bl	800a9b8 <_init>
 8009f4c:	2500      	movs	r5, #0
 8009f4e:	4e0a      	ldr	r6, [pc, #40]	; (8009f78 <__libc_init_array+0x40>)
 8009f50:	4c0a      	ldr	r4, [pc, #40]	; (8009f7c <__libc_init_array+0x44>)
 8009f52:	1ba4      	subs	r4, r4, r6
 8009f54:	10a4      	asrs	r4, r4, #2
 8009f56:	42a5      	cmp	r5, r4
 8009f58:	d105      	bne.n	8009f66 <__libc_init_array+0x2e>
 8009f5a:	bd70      	pop	{r4, r5, r6, pc}
 8009f5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f60:	4798      	blx	r3
 8009f62:	3501      	adds	r5, #1
 8009f64:	e7ee      	b.n	8009f44 <__libc_init_array+0xc>
 8009f66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f6a:	4798      	blx	r3
 8009f6c:	3501      	adds	r5, #1
 8009f6e:	e7f2      	b.n	8009f56 <__libc_init_array+0x1e>
 8009f70:	0800ae0c 	.word	0x0800ae0c
 8009f74:	0800ae0c 	.word	0x0800ae0c
 8009f78:	0800ae0c 	.word	0x0800ae0c
 8009f7c:	0800ae10 	.word	0x0800ae10

08009f80 <memset>:
 8009f80:	4603      	mov	r3, r0
 8009f82:	4402      	add	r2, r0
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d100      	bne.n	8009f8a <memset+0xa>
 8009f88:	4770      	bx	lr
 8009f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8009f8e:	e7f9      	b.n	8009f84 <memset+0x4>

08009f90 <siprintf>:
 8009f90:	b40e      	push	{r1, r2, r3}
 8009f92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f96:	b500      	push	{lr}
 8009f98:	b09c      	sub	sp, #112	; 0x70
 8009f9a:	ab1d      	add	r3, sp, #116	; 0x74
 8009f9c:	9002      	str	r0, [sp, #8]
 8009f9e:	9006      	str	r0, [sp, #24]
 8009fa0:	9107      	str	r1, [sp, #28]
 8009fa2:	9104      	str	r1, [sp, #16]
 8009fa4:	4808      	ldr	r0, [pc, #32]	; (8009fc8 <siprintf+0x38>)
 8009fa6:	4909      	ldr	r1, [pc, #36]	; (8009fcc <siprintf+0x3c>)
 8009fa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fac:	9105      	str	r1, [sp, #20]
 8009fae:	6800      	ldr	r0, [r0, #0]
 8009fb0:	a902      	add	r1, sp, #8
 8009fb2:	9301      	str	r3, [sp, #4]
 8009fb4:	f000 f866 	bl	800a084 <_svfiprintf_r>
 8009fb8:	2200      	movs	r2, #0
 8009fba:	9b02      	ldr	r3, [sp, #8]
 8009fbc:	701a      	strb	r2, [r3, #0]
 8009fbe:	b01c      	add	sp, #112	; 0x70
 8009fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fc4:	b003      	add	sp, #12
 8009fc6:	4770      	bx	lr
 8009fc8:	20000160 	.word	0x20000160
 8009fcc:	ffff0208 	.word	0xffff0208

08009fd0 <__ssputs_r>:
 8009fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd4:	688e      	ldr	r6, [r1, #8]
 8009fd6:	4682      	mov	sl, r0
 8009fd8:	429e      	cmp	r6, r3
 8009fda:	460c      	mov	r4, r1
 8009fdc:	4690      	mov	r8, r2
 8009fde:	4699      	mov	r9, r3
 8009fe0:	d837      	bhi.n	800a052 <__ssputs_r+0x82>
 8009fe2:	898a      	ldrh	r2, [r1, #12]
 8009fe4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fe8:	d031      	beq.n	800a04e <__ssputs_r+0x7e>
 8009fea:	2302      	movs	r3, #2
 8009fec:	6825      	ldr	r5, [r4, #0]
 8009fee:	6909      	ldr	r1, [r1, #16]
 8009ff0:	1a6f      	subs	r7, r5, r1
 8009ff2:	6965      	ldr	r5, [r4, #20]
 8009ff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ff8:	fb95 f5f3 	sdiv	r5, r5, r3
 8009ffc:	f109 0301 	add.w	r3, r9, #1
 800a000:	443b      	add	r3, r7
 800a002:	429d      	cmp	r5, r3
 800a004:	bf38      	it	cc
 800a006:	461d      	movcc	r5, r3
 800a008:	0553      	lsls	r3, r2, #21
 800a00a:	d530      	bpl.n	800a06e <__ssputs_r+0x9e>
 800a00c:	4629      	mov	r1, r5
 800a00e:	f000 fb37 	bl	800a680 <_malloc_r>
 800a012:	4606      	mov	r6, r0
 800a014:	b950      	cbnz	r0, 800a02c <__ssputs_r+0x5c>
 800a016:	230c      	movs	r3, #12
 800a018:	f04f 30ff 	mov.w	r0, #4294967295
 800a01c:	f8ca 3000 	str.w	r3, [sl]
 800a020:	89a3      	ldrh	r3, [r4, #12]
 800a022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a026:	81a3      	strh	r3, [r4, #12]
 800a028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a02c:	463a      	mov	r2, r7
 800a02e:	6921      	ldr	r1, [r4, #16]
 800a030:	f000 fab6 	bl	800a5a0 <memcpy>
 800a034:	89a3      	ldrh	r3, [r4, #12]
 800a036:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a03a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a03e:	81a3      	strh	r3, [r4, #12]
 800a040:	6126      	str	r6, [r4, #16]
 800a042:	443e      	add	r6, r7
 800a044:	6026      	str	r6, [r4, #0]
 800a046:	464e      	mov	r6, r9
 800a048:	6165      	str	r5, [r4, #20]
 800a04a:	1bed      	subs	r5, r5, r7
 800a04c:	60a5      	str	r5, [r4, #8]
 800a04e:	454e      	cmp	r6, r9
 800a050:	d900      	bls.n	800a054 <__ssputs_r+0x84>
 800a052:	464e      	mov	r6, r9
 800a054:	4632      	mov	r2, r6
 800a056:	4641      	mov	r1, r8
 800a058:	6820      	ldr	r0, [r4, #0]
 800a05a:	f000 faac 	bl	800a5b6 <memmove>
 800a05e:	68a3      	ldr	r3, [r4, #8]
 800a060:	2000      	movs	r0, #0
 800a062:	1b9b      	subs	r3, r3, r6
 800a064:	60a3      	str	r3, [r4, #8]
 800a066:	6823      	ldr	r3, [r4, #0]
 800a068:	441e      	add	r6, r3
 800a06a:	6026      	str	r6, [r4, #0]
 800a06c:	e7dc      	b.n	800a028 <__ssputs_r+0x58>
 800a06e:	462a      	mov	r2, r5
 800a070:	f000 fb60 	bl	800a734 <_realloc_r>
 800a074:	4606      	mov	r6, r0
 800a076:	2800      	cmp	r0, #0
 800a078:	d1e2      	bne.n	800a040 <__ssputs_r+0x70>
 800a07a:	6921      	ldr	r1, [r4, #16]
 800a07c:	4650      	mov	r0, sl
 800a07e:	f000 fab3 	bl	800a5e8 <_free_r>
 800a082:	e7c8      	b.n	800a016 <__ssputs_r+0x46>

0800a084 <_svfiprintf_r>:
 800a084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a088:	461d      	mov	r5, r3
 800a08a:	898b      	ldrh	r3, [r1, #12]
 800a08c:	b09d      	sub	sp, #116	; 0x74
 800a08e:	061f      	lsls	r7, r3, #24
 800a090:	4680      	mov	r8, r0
 800a092:	460c      	mov	r4, r1
 800a094:	4616      	mov	r6, r2
 800a096:	d50f      	bpl.n	800a0b8 <_svfiprintf_r+0x34>
 800a098:	690b      	ldr	r3, [r1, #16]
 800a09a:	b96b      	cbnz	r3, 800a0b8 <_svfiprintf_r+0x34>
 800a09c:	2140      	movs	r1, #64	; 0x40
 800a09e:	f000 faef 	bl	800a680 <_malloc_r>
 800a0a2:	6020      	str	r0, [r4, #0]
 800a0a4:	6120      	str	r0, [r4, #16]
 800a0a6:	b928      	cbnz	r0, 800a0b4 <_svfiprintf_r+0x30>
 800a0a8:	230c      	movs	r3, #12
 800a0aa:	f8c8 3000 	str.w	r3, [r8]
 800a0ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b2:	e0c8      	b.n	800a246 <_svfiprintf_r+0x1c2>
 800a0b4:	2340      	movs	r3, #64	; 0x40
 800a0b6:	6163      	str	r3, [r4, #20]
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a0bc:	2320      	movs	r3, #32
 800a0be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0c2:	2330      	movs	r3, #48	; 0x30
 800a0c4:	f04f 0b01 	mov.w	fp, #1
 800a0c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0cc:	9503      	str	r5, [sp, #12]
 800a0ce:	4637      	mov	r7, r6
 800a0d0:	463d      	mov	r5, r7
 800a0d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a0d6:	b10b      	cbz	r3, 800a0dc <_svfiprintf_r+0x58>
 800a0d8:	2b25      	cmp	r3, #37	; 0x25
 800a0da:	d13e      	bne.n	800a15a <_svfiprintf_r+0xd6>
 800a0dc:	ebb7 0a06 	subs.w	sl, r7, r6
 800a0e0:	d00b      	beq.n	800a0fa <_svfiprintf_r+0x76>
 800a0e2:	4653      	mov	r3, sl
 800a0e4:	4632      	mov	r2, r6
 800a0e6:	4621      	mov	r1, r4
 800a0e8:	4640      	mov	r0, r8
 800a0ea:	f7ff ff71 	bl	8009fd0 <__ssputs_r>
 800a0ee:	3001      	adds	r0, #1
 800a0f0:	f000 80a4 	beq.w	800a23c <_svfiprintf_r+0x1b8>
 800a0f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0f6:	4453      	add	r3, sl
 800a0f8:	9309      	str	r3, [sp, #36]	; 0x24
 800a0fa:	783b      	ldrb	r3, [r7, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f000 809d 	beq.w	800a23c <_svfiprintf_r+0x1b8>
 800a102:	2300      	movs	r3, #0
 800a104:	f04f 32ff 	mov.w	r2, #4294967295
 800a108:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a10c:	9304      	str	r3, [sp, #16]
 800a10e:	9307      	str	r3, [sp, #28]
 800a110:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a114:	931a      	str	r3, [sp, #104]	; 0x68
 800a116:	462f      	mov	r7, r5
 800a118:	2205      	movs	r2, #5
 800a11a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a11e:	4850      	ldr	r0, [pc, #320]	; (800a260 <_svfiprintf_r+0x1dc>)
 800a120:	f000 fa30 	bl	800a584 <memchr>
 800a124:	9b04      	ldr	r3, [sp, #16]
 800a126:	b9d0      	cbnz	r0, 800a15e <_svfiprintf_r+0xda>
 800a128:	06d9      	lsls	r1, r3, #27
 800a12a:	bf44      	itt	mi
 800a12c:	2220      	movmi	r2, #32
 800a12e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a132:	071a      	lsls	r2, r3, #28
 800a134:	bf44      	itt	mi
 800a136:	222b      	movmi	r2, #43	; 0x2b
 800a138:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a13c:	782a      	ldrb	r2, [r5, #0]
 800a13e:	2a2a      	cmp	r2, #42	; 0x2a
 800a140:	d015      	beq.n	800a16e <_svfiprintf_r+0xea>
 800a142:	462f      	mov	r7, r5
 800a144:	2000      	movs	r0, #0
 800a146:	250a      	movs	r5, #10
 800a148:	9a07      	ldr	r2, [sp, #28]
 800a14a:	4639      	mov	r1, r7
 800a14c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a150:	3b30      	subs	r3, #48	; 0x30
 800a152:	2b09      	cmp	r3, #9
 800a154:	d94d      	bls.n	800a1f2 <_svfiprintf_r+0x16e>
 800a156:	b1b8      	cbz	r0, 800a188 <_svfiprintf_r+0x104>
 800a158:	e00f      	b.n	800a17a <_svfiprintf_r+0xf6>
 800a15a:	462f      	mov	r7, r5
 800a15c:	e7b8      	b.n	800a0d0 <_svfiprintf_r+0x4c>
 800a15e:	4a40      	ldr	r2, [pc, #256]	; (800a260 <_svfiprintf_r+0x1dc>)
 800a160:	463d      	mov	r5, r7
 800a162:	1a80      	subs	r0, r0, r2
 800a164:	fa0b f000 	lsl.w	r0, fp, r0
 800a168:	4318      	orrs	r0, r3
 800a16a:	9004      	str	r0, [sp, #16]
 800a16c:	e7d3      	b.n	800a116 <_svfiprintf_r+0x92>
 800a16e:	9a03      	ldr	r2, [sp, #12]
 800a170:	1d11      	adds	r1, r2, #4
 800a172:	6812      	ldr	r2, [r2, #0]
 800a174:	9103      	str	r1, [sp, #12]
 800a176:	2a00      	cmp	r2, #0
 800a178:	db01      	blt.n	800a17e <_svfiprintf_r+0xfa>
 800a17a:	9207      	str	r2, [sp, #28]
 800a17c:	e004      	b.n	800a188 <_svfiprintf_r+0x104>
 800a17e:	4252      	negs	r2, r2
 800a180:	f043 0302 	orr.w	r3, r3, #2
 800a184:	9207      	str	r2, [sp, #28]
 800a186:	9304      	str	r3, [sp, #16]
 800a188:	783b      	ldrb	r3, [r7, #0]
 800a18a:	2b2e      	cmp	r3, #46	; 0x2e
 800a18c:	d10c      	bne.n	800a1a8 <_svfiprintf_r+0x124>
 800a18e:	787b      	ldrb	r3, [r7, #1]
 800a190:	2b2a      	cmp	r3, #42	; 0x2a
 800a192:	d133      	bne.n	800a1fc <_svfiprintf_r+0x178>
 800a194:	9b03      	ldr	r3, [sp, #12]
 800a196:	3702      	adds	r7, #2
 800a198:	1d1a      	adds	r2, r3, #4
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	9203      	str	r2, [sp, #12]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	bfb8      	it	lt
 800a1a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1a6:	9305      	str	r3, [sp, #20]
 800a1a8:	4d2e      	ldr	r5, [pc, #184]	; (800a264 <_svfiprintf_r+0x1e0>)
 800a1aa:	2203      	movs	r2, #3
 800a1ac:	7839      	ldrb	r1, [r7, #0]
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	f000 f9e8 	bl	800a584 <memchr>
 800a1b4:	b138      	cbz	r0, 800a1c6 <_svfiprintf_r+0x142>
 800a1b6:	2340      	movs	r3, #64	; 0x40
 800a1b8:	1b40      	subs	r0, r0, r5
 800a1ba:	fa03 f000 	lsl.w	r0, r3, r0
 800a1be:	9b04      	ldr	r3, [sp, #16]
 800a1c0:	3701      	adds	r7, #1
 800a1c2:	4303      	orrs	r3, r0
 800a1c4:	9304      	str	r3, [sp, #16]
 800a1c6:	7839      	ldrb	r1, [r7, #0]
 800a1c8:	2206      	movs	r2, #6
 800a1ca:	4827      	ldr	r0, [pc, #156]	; (800a268 <_svfiprintf_r+0x1e4>)
 800a1cc:	1c7e      	adds	r6, r7, #1
 800a1ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1d2:	f000 f9d7 	bl	800a584 <memchr>
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	d038      	beq.n	800a24c <_svfiprintf_r+0x1c8>
 800a1da:	4b24      	ldr	r3, [pc, #144]	; (800a26c <_svfiprintf_r+0x1e8>)
 800a1dc:	bb13      	cbnz	r3, 800a224 <_svfiprintf_r+0x1a0>
 800a1de:	9b03      	ldr	r3, [sp, #12]
 800a1e0:	3307      	adds	r3, #7
 800a1e2:	f023 0307 	bic.w	r3, r3, #7
 800a1e6:	3308      	adds	r3, #8
 800a1e8:	9303      	str	r3, [sp, #12]
 800a1ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ec:	444b      	add	r3, r9
 800a1ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a1f0:	e76d      	b.n	800a0ce <_svfiprintf_r+0x4a>
 800a1f2:	fb05 3202 	mla	r2, r5, r2, r3
 800a1f6:	2001      	movs	r0, #1
 800a1f8:	460f      	mov	r7, r1
 800a1fa:	e7a6      	b.n	800a14a <_svfiprintf_r+0xc6>
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	250a      	movs	r5, #10
 800a200:	4619      	mov	r1, r3
 800a202:	3701      	adds	r7, #1
 800a204:	9305      	str	r3, [sp, #20]
 800a206:	4638      	mov	r0, r7
 800a208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a20c:	3a30      	subs	r2, #48	; 0x30
 800a20e:	2a09      	cmp	r2, #9
 800a210:	d903      	bls.n	800a21a <_svfiprintf_r+0x196>
 800a212:	2b00      	cmp	r3, #0
 800a214:	d0c8      	beq.n	800a1a8 <_svfiprintf_r+0x124>
 800a216:	9105      	str	r1, [sp, #20]
 800a218:	e7c6      	b.n	800a1a8 <_svfiprintf_r+0x124>
 800a21a:	fb05 2101 	mla	r1, r5, r1, r2
 800a21e:	2301      	movs	r3, #1
 800a220:	4607      	mov	r7, r0
 800a222:	e7f0      	b.n	800a206 <_svfiprintf_r+0x182>
 800a224:	ab03      	add	r3, sp, #12
 800a226:	9300      	str	r3, [sp, #0]
 800a228:	4622      	mov	r2, r4
 800a22a:	4b11      	ldr	r3, [pc, #68]	; (800a270 <_svfiprintf_r+0x1ec>)
 800a22c:	a904      	add	r1, sp, #16
 800a22e:	4640      	mov	r0, r8
 800a230:	f3af 8000 	nop.w
 800a234:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a238:	4681      	mov	r9, r0
 800a23a:	d1d6      	bne.n	800a1ea <_svfiprintf_r+0x166>
 800a23c:	89a3      	ldrh	r3, [r4, #12]
 800a23e:	065b      	lsls	r3, r3, #25
 800a240:	f53f af35 	bmi.w	800a0ae <_svfiprintf_r+0x2a>
 800a244:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a246:	b01d      	add	sp, #116	; 0x74
 800a248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a24c:	ab03      	add	r3, sp, #12
 800a24e:	9300      	str	r3, [sp, #0]
 800a250:	4622      	mov	r2, r4
 800a252:	4b07      	ldr	r3, [pc, #28]	; (800a270 <_svfiprintf_r+0x1ec>)
 800a254:	a904      	add	r1, sp, #16
 800a256:	4640      	mov	r0, r8
 800a258:	f000 f882 	bl	800a360 <_printf_i>
 800a25c:	e7ea      	b.n	800a234 <_svfiprintf_r+0x1b0>
 800a25e:	bf00      	nop
 800a260:	0800add4 	.word	0x0800add4
 800a264:	0800adda 	.word	0x0800adda
 800a268:	0800adde 	.word	0x0800adde
 800a26c:	00000000 	.word	0x00000000
 800a270:	08009fd1 	.word	0x08009fd1

0800a274 <_printf_common>:
 800a274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a278:	4691      	mov	r9, r2
 800a27a:	461f      	mov	r7, r3
 800a27c:	688a      	ldr	r2, [r1, #8]
 800a27e:	690b      	ldr	r3, [r1, #16]
 800a280:	4606      	mov	r6, r0
 800a282:	4293      	cmp	r3, r2
 800a284:	bfb8      	it	lt
 800a286:	4613      	movlt	r3, r2
 800a288:	f8c9 3000 	str.w	r3, [r9]
 800a28c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a290:	460c      	mov	r4, r1
 800a292:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a296:	b112      	cbz	r2, 800a29e <_printf_common+0x2a>
 800a298:	3301      	adds	r3, #1
 800a29a:	f8c9 3000 	str.w	r3, [r9]
 800a29e:	6823      	ldr	r3, [r4, #0]
 800a2a0:	0699      	lsls	r1, r3, #26
 800a2a2:	bf42      	ittt	mi
 800a2a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a2a8:	3302      	addmi	r3, #2
 800a2aa:	f8c9 3000 	strmi.w	r3, [r9]
 800a2ae:	6825      	ldr	r5, [r4, #0]
 800a2b0:	f015 0506 	ands.w	r5, r5, #6
 800a2b4:	d107      	bne.n	800a2c6 <_printf_common+0x52>
 800a2b6:	f104 0a19 	add.w	sl, r4, #25
 800a2ba:	68e3      	ldr	r3, [r4, #12]
 800a2bc:	f8d9 2000 	ldr.w	r2, [r9]
 800a2c0:	1a9b      	subs	r3, r3, r2
 800a2c2:	42ab      	cmp	r3, r5
 800a2c4:	dc29      	bgt.n	800a31a <_printf_common+0xa6>
 800a2c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a2ca:	6822      	ldr	r2, [r4, #0]
 800a2cc:	3300      	adds	r3, #0
 800a2ce:	bf18      	it	ne
 800a2d0:	2301      	movne	r3, #1
 800a2d2:	0692      	lsls	r2, r2, #26
 800a2d4:	d42e      	bmi.n	800a334 <_printf_common+0xc0>
 800a2d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2da:	4639      	mov	r1, r7
 800a2dc:	4630      	mov	r0, r6
 800a2de:	47c0      	blx	r8
 800a2e0:	3001      	adds	r0, #1
 800a2e2:	d021      	beq.n	800a328 <_printf_common+0xb4>
 800a2e4:	6823      	ldr	r3, [r4, #0]
 800a2e6:	68e5      	ldr	r5, [r4, #12]
 800a2e8:	f003 0306 	and.w	r3, r3, #6
 800a2ec:	2b04      	cmp	r3, #4
 800a2ee:	bf18      	it	ne
 800a2f0:	2500      	movne	r5, #0
 800a2f2:	f8d9 2000 	ldr.w	r2, [r9]
 800a2f6:	f04f 0900 	mov.w	r9, #0
 800a2fa:	bf08      	it	eq
 800a2fc:	1aad      	subeq	r5, r5, r2
 800a2fe:	68a3      	ldr	r3, [r4, #8]
 800a300:	6922      	ldr	r2, [r4, #16]
 800a302:	bf08      	it	eq
 800a304:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a308:	4293      	cmp	r3, r2
 800a30a:	bfc4      	itt	gt
 800a30c:	1a9b      	subgt	r3, r3, r2
 800a30e:	18ed      	addgt	r5, r5, r3
 800a310:	341a      	adds	r4, #26
 800a312:	454d      	cmp	r5, r9
 800a314:	d11a      	bne.n	800a34c <_printf_common+0xd8>
 800a316:	2000      	movs	r0, #0
 800a318:	e008      	b.n	800a32c <_printf_common+0xb8>
 800a31a:	2301      	movs	r3, #1
 800a31c:	4652      	mov	r2, sl
 800a31e:	4639      	mov	r1, r7
 800a320:	4630      	mov	r0, r6
 800a322:	47c0      	blx	r8
 800a324:	3001      	adds	r0, #1
 800a326:	d103      	bne.n	800a330 <_printf_common+0xbc>
 800a328:	f04f 30ff 	mov.w	r0, #4294967295
 800a32c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a330:	3501      	adds	r5, #1
 800a332:	e7c2      	b.n	800a2ba <_printf_common+0x46>
 800a334:	2030      	movs	r0, #48	; 0x30
 800a336:	18e1      	adds	r1, r4, r3
 800a338:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a33c:	1c5a      	adds	r2, r3, #1
 800a33e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a342:	4422      	add	r2, r4
 800a344:	3302      	adds	r3, #2
 800a346:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a34a:	e7c4      	b.n	800a2d6 <_printf_common+0x62>
 800a34c:	2301      	movs	r3, #1
 800a34e:	4622      	mov	r2, r4
 800a350:	4639      	mov	r1, r7
 800a352:	4630      	mov	r0, r6
 800a354:	47c0      	blx	r8
 800a356:	3001      	adds	r0, #1
 800a358:	d0e6      	beq.n	800a328 <_printf_common+0xb4>
 800a35a:	f109 0901 	add.w	r9, r9, #1
 800a35e:	e7d8      	b.n	800a312 <_printf_common+0x9e>

0800a360 <_printf_i>:
 800a360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a364:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a368:	460c      	mov	r4, r1
 800a36a:	7e09      	ldrb	r1, [r1, #24]
 800a36c:	b085      	sub	sp, #20
 800a36e:	296e      	cmp	r1, #110	; 0x6e
 800a370:	4617      	mov	r7, r2
 800a372:	4606      	mov	r6, r0
 800a374:	4698      	mov	r8, r3
 800a376:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a378:	f000 80b3 	beq.w	800a4e2 <_printf_i+0x182>
 800a37c:	d822      	bhi.n	800a3c4 <_printf_i+0x64>
 800a37e:	2963      	cmp	r1, #99	; 0x63
 800a380:	d036      	beq.n	800a3f0 <_printf_i+0x90>
 800a382:	d80a      	bhi.n	800a39a <_printf_i+0x3a>
 800a384:	2900      	cmp	r1, #0
 800a386:	f000 80b9 	beq.w	800a4fc <_printf_i+0x19c>
 800a38a:	2958      	cmp	r1, #88	; 0x58
 800a38c:	f000 8083 	beq.w	800a496 <_printf_i+0x136>
 800a390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a394:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a398:	e032      	b.n	800a400 <_printf_i+0xa0>
 800a39a:	2964      	cmp	r1, #100	; 0x64
 800a39c:	d001      	beq.n	800a3a2 <_printf_i+0x42>
 800a39e:	2969      	cmp	r1, #105	; 0x69
 800a3a0:	d1f6      	bne.n	800a390 <_printf_i+0x30>
 800a3a2:	6820      	ldr	r0, [r4, #0]
 800a3a4:	6813      	ldr	r3, [r2, #0]
 800a3a6:	0605      	lsls	r5, r0, #24
 800a3a8:	f103 0104 	add.w	r1, r3, #4
 800a3ac:	d52a      	bpl.n	800a404 <_printf_i+0xa4>
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	6011      	str	r1, [r2, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	da03      	bge.n	800a3be <_printf_i+0x5e>
 800a3b6:	222d      	movs	r2, #45	; 0x2d
 800a3b8:	425b      	negs	r3, r3
 800a3ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a3be:	486f      	ldr	r0, [pc, #444]	; (800a57c <_printf_i+0x21c>)
 800a3c0:	220a      	movs	r2, #10
 800a3c2:	e039      	b.n	800a438 <_printf_i+0xd8>
 800a3c4:	2973      	cmp	r1, #115	; 0x73
 800a3c6:	f000 809d 	beq.w	800a504 <_printf_i+0x1a4>
 800a3ca:	d808      	bhi.n	800a3de <_printf_i+0x7e>
 800a3cc:	296f      	cmp	r1, #111	; 0x6f
 800a3ce:	d020      	beq.n	800a412 <_printf_i+0xb2>
 800a3d0:	2970      	cmp	r1, #112	; 0x70
 800a3d2:	d1dd      	bne.n	800a390 <_printf_i+0x30>
 800a3d4:	6823      	ldr	r3, [r4, #0]
 800a3d6:	f043 0320 	orr.w	r3, r3, #32
 800a3da:	6023      	str	r3, [r4, #0]
 800a3dc:	e003      	b.n	800a3e6 <_printf_i+0x86>
 800a3de:	2975      	cmp	r1, #117	; 0x75
 800a3e0:	d017      	beq.n	800a412 <_printf_i+0xb2>
 800a3e2:	2978      	cmp	r1, #120	; 0x78
 800a3e4:	d1d4      	bne.n	800a390 <_printf_i+0x30>
 800a3e6:	2378      	movs	r3, #120	; 0x78
 800a3e8:	4865      	ldr	r0, [pc, #404]	; (800a580 <_printf_i+0x220>)
 800a3ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3ee:	e055      	b.n	800a49c <_printf_i+0x13c>
 800a3f0:	6813      	ldr	r3, [r2, #0]
 800a3f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3f6:	1d19      	adds	r1, r3, #4
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	6011      	str	r1, [r2, #0]
 800a3fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a400:	2301      	movs	r3, #1
 800a402:	e08c      	b.n	800a51e <_printf_i+0x1be>
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a40a:	6011      	str	r1, [r2, #0]
 800a40c:	bf18      	it	ne
 800a40e:	b21b      	sxthne	r3, r3
 800a410:	e7cf      	b.n	800a3b2 <_printf_i+0x52>
 800a412:	6813      	ldr	r3, [r2, #0]
 800a414:	6825      	ldr	r5, [r4, #0]
 800a416:	1d18      	adds	r0, r3, #4
 800a418:	6010      	str	r0, [r2, #0]
 800a41a:	0628      	lsls	r0, r5, #24
 800a41c:	d501      	bpl.n	800a422 <_printf_i+0xc2>
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	e002      	b.n	800a428 <_printf_i+0xc8>
 800a422:	0668      	lsls	r0, r5, #25
 800a424:	d5fb      	bpl.n	800a41e <_printf_i+0xbe>
 800a426:	881b      	ldrh	r3, [r3, #0]
 800a428:	296f      	cmp	r1, #111	; 0x6f
 800a42a:	bf14      	ite	ne
 800a42c:	220a      	movne	r2, #10
 800a42e:	2208      	moveq	r2, #8
 800a430:	4852      	ldr	r0, [pc, #328]	; (800a57c <_printf_i+0x21c>)
 800a432:	2100      	movs	r1, #0
 800a434:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a438:	6865      	ldr	r5, [r4, #4]
 800a43a:	2d00      	cmp	r5, #0
 800a43c:	60a5      	str	r5, [r4, #8]
 800a43e:	f2c0 8095 	blt.w	800a56c <_printf_i+0x20c>
 800a442:	6821      	ldr	r1, [r4, #0]
 800a444:	f021 0104 	bic.w	r1, r1, #4
 800a448:	6021      	str	r1, [r4, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d13d      	bne.n	800a4ca <_printf_i+0x16a>
 800a44e:	2d00      	cmp	r5, #0
 800a450:	f040 808e 	bne.w	800a570 <_printf_i+0x210>
 800a454:	4665      	mov	r5, ip
 800a456:	2a08      	cmp	r2, #8
 800a458:	d10b      	bne.n	800a472 <_printf_i+0x112>
 800a45a:	6823      	ldr	r3, [r4, #0]
 800a45c:	07db      	lsls	r3, r3, #31
 800a45e:	d508      	bpl.n	800a472 <_printf_i+0x112>
 800a460:	6923      	ldr	r3, [r4, #16]
 800a462:	6862      	ldr	r2, [r4, #4]
 800a464:	429a      	cmp	r2, r3
 800a466:	bfde      	ittt	le
 800a468:	2330      	movle	r3, #48	; 0x30
 800a46a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a46e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a472:	ebac 0305 	sub.w	r3, ip, r5
 800a476:	6123      	str	r3, [r4, #16]
 800a478:	f8cd 8000 	str.w	r8, [sp]
 800a47c:	463b      	mov	r3, r7
 800a47e:	aa03      	add	r2, sp, #12
 800a480:	4621      	mov	r1, r4
 800a482:	4630      	mov	r0, r6
 800a484:	f7ff fef6 	bl	800a274 <_printf_common>
 800a488:	3001      	adds	r0, #1
 800a48a:	d14d      	bne.n	800a528 <_printf_i+0x1c8>
 800a48c:	f04f 30ff 	mov.w	r0, #4294967295
 800a490:	b005      	add	sp, #20
 800a492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a496:	4839      	ldr	r0, [pc, #228]	; (800a57c <_printf_i+0x21c>)
 800a498:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a49c:	6813      	ldr	r3, [r2, #0]
 800a49e:	6821      	ldr	r1, [r4, #0]
 800a4a0:	1d1d      	adds	r5, r3, #4
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	6015      	str	r5, [r2, #0]
 800a4a6:	060a      	lsls	r2, r1, #24
 800a4a8:	d50b      	bpl.n	800a4c2 <_printf_i+0x162>
 800a4aa:	07ca      	lsls	r2, r1, #31
 800a4ac:	bf44      	itt	mi
 800a4ae:	f041 0120 	orrmi.w	r1, r1, #32
 800a4b2:	6021      	strmi	r1, [r4, #0]
 800a4b4:	b91b      	cbnz	r3, 800a4be <_printf_i+0x15e>
 800a4b6:	6822      	ldr	r2, [r4, #0]
 800a4b8:	f022 0220 	bic.w	r2, r2, #32
 800a4bc:	6022      	str	r2, [r4, #0]
 800a4be:	2210      	movs	r2, #16
 800a4c0:	e7b7      	b.n	800a432 <_printf_i+0xd2>
 800a4c2:	064d      	lsls	r5, r1, #25
 800a4c4:	bf48      	it	mi
 800a4c6:	b29b      	uxthmi	r3, r3
 800a4c8:	e7ef      	b.n	800a4aa <_printf_i+0x14a>
 800a4ca:	4665      	mov	r5, ip
 800a4cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4d0:	fb02 3311 	mls	r3, r2, r1, r3
 800a4d4:	5cc3      	ldrb	r3, [r0, r3]
 800a4d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a4da:	460b      	mov	r3, r1
 800a4dc:	2900      	cmp	r1, #0
 800a4de:	d1f5      	bne.n	800a4cc <_printf_i+0x16c>
 800a4e0:	e7b9      	b.n	800a456 <_printf_i+0xf6>
 800a4e2:	6813      	ldr	r3, [r2, #0]
 800a4e4:	6825      	ldr	r5, [r4, #0]
 800a4e6:	1d18      	adds	r0, r3, #4
 800a4e8:	6961      	ldr	r1, [r4, #20]
 800a4ea:	6010      	str	r0, [r2, #0]
 800a4ec:	0628      	lsls	r0, r5, #24
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	d501      	bpl.n	800a4f6 <_printf_i+0x196>
 800a4f2:	6019      	str	r1, [r3, #0]
 800a4f4:	e002      	b.n	800a4fc <_printf_i+0x19c>
 800a4f6:	066a      	lsls	r2, r5, #25
 800a4f8:	d5fb      	bpl.n	800a4f2 <_printf_i+0x192>
 800a4fa:	8019      	strh	r1, [r3, #0]
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	4665      	mov	r5, ip
 800a500:	6123      	str	r3, [r4, #16]
 800a502:	e7b9      	b.n	800a478 <_printf_i+0x118>
 800a504:	6813      	ldr	r3, [r2, #0]
 800a506:	1d19      	adds	r1, r3, #4
 800a508:	6011      	str	r1, [r2, #0]
 800a50a:	681d      	ldr	r5, [r3, #0]
 800a50c:	6862      	ldr	r2, [r4, #4]
 800a50e:	2100      	movs	r1, #0
 800a510:	4628      	mov	r0, r5
 800a512:	f000 f837 	bl	800a584 <memchr>
 800a516:	b108      	cbz	r0, 800a51c <_printf_i+0x1bc>
 800a518:	1b40      	subs	r0, r0, r5
 800a51a:	6060      	str	r0, [r4, #4]
 800a51c:	6863      	ldr	r3, [r4, #4]
 800a51e:	6123      	str	r3, [r4, #16]
 800a520:	2300      	movs	r3, #0
 800a522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a526:	e7a7      	b.n	800a478 <_printf_i+0x118>
 800a528:	6923      	ldr	r3, [r4, #16]
 800a52a:	462a      	mov	r2, r5
 800a52c:	4639      	mov	r1, r7
 800a52e:	4630      	mov	r0, r6
 800a530:	47c0      	blx	r8
 800a532:	3001      	adds	r0, #1
 800a534:	d0aa      	beq.n	800a48c <_printf_i+0x12c>
 800a536:	6823      	ldr	r3, [r4, #0]
 800a538:	079b      	lsls	r3, r3, #30
 800a53a:	d413      	bmi.n	800a564 <_printf_i+0x204>
 800a53c:	68e0      	ldr	r0, [r4, #12]
 800a53e:	9b03      	ldr	r3, [sp, #12]
 800a540:	4298      	cmp	r0, r3
 800a542:	bfb8      	it	lt
 800a544:	4618      	movlt	r0, r3
 800a546:	e7a3      	b.n	800a490 <_printf_i+0x130>
 800a548:	2301      	movs	r3, #1
 800a54a:	464a      	mov	r2, r9
 800a54c:	4639      	mov	r1, r7
 800a54e:	4630      	mov	r0, r6
 800a550:	47c0      	blx	r8
 800a552:	3001      	adds	r0, #1
 800a554:	d09a      	beq.n	800a48c <_printf_i+0x12c>
 800a556:	3501      	adds	r5, #1
 800a558:	68e3      	ldr	r3, [r4, #12]
 800a55a:	9a03      	ldr	r2, [sp, #12]
 800a55c:	1a9b      	subs	r3, r3, r2
 800a55e:	42ab      	cmp	r3, r5
 800a560:	dcf2      	bgt.n	800a548 <_printf_i+0x1e8>
 800a562:	e7eb      	b.n	800a53c <_printf_i+0x1dc>
 800a564:	2500      	movs	r5, #0
 800a566:	f104 0919 	add.w	r9, r4, #25
 800a56a:	e7f5      	b.n	800a558 <_printf_i+0x1f8>
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d1ac      	bne.n	800a4ca <_printf_i+0x16a>
 800a570:	7803      	ldrb	r3, [r0, #0]
 800a572:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a576:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a57a:	e76c      	b.n	800a456 <_printf_i+0xf6>
 800a57c:	0800ade5 	.word	0x0800ade5
 800a580:	0800adf6 	.word	0x0800adf6

0800a584 <memchr>:
 800a584:	b510      	push	{r4, lr}
 800a586:	b2c9      	uxtb	r1, r1
 800a588:	4402      	add	r2, r0
 800a58a:	4290      	cmp	r0, r2
 800a58c:	4603      	mov	r3, r0
 800a58e:	d101      	bne.n	800a594 <memchr+0x10>
 800a590:	2300      	movs	r3, #0
 800a592:	e003      	b.n	800a59c <memchr+0x18>
 800a594:	781c      	ldrb	r4, [r3, #0]
 800a596:	3001      	adds	r0, #1
 800a598:	428c      	cmp	r4, r1
 800a59a:	d1f6      	bne.n	800a58a <memchr+0x6>
 800a59c:	4618      	mov	r0, r3
 800a59e:	bd10      	pop	{r4, pc}

0800a5a0 <memcpy>:
 800a5a0:	b510      	push	{r4, lr}
 800a5a2:	1e43      	subs	r3, r0, #1
 800a5a4:	440a      	add	r2, r1
 800a5a6:	4291      	cmp	r1, r2
 800a5a8:	d100      	bne.n	800a5ac <memcpy+0xc>
 800a5aa:	bd10      	pop	{r4, pc}
 800a5ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5b4:	e7f7      	b.n	800a5a6 <memcpy+0x6>

0800a5b6 <memmove>:
 800a5b6:	4288      	cmp	r0, r1
 800a5b8:	b510      	push	{r4, lr}
 800a5ba:	eb01 0302 	add.w	r3, r1, r2
 800a5be:	d807      	bhi.n	800a5d0 <memmove+0x1a>
 800a5c0:	1e42      	subs	r2, r0, #1
 800a5c2:	4299      	cmp	r1, r3
 800a5c4:	d00a      	beq.n	800a5dc <memmove+0x26>
 800a5c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5ca:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a5ce:	e7f8      	b.n	800a5c2 <memmove+0xc>
 800a5d0:	4283      	cmp	r3, r0
 800a5d2:	d9f5      	bls.n	800a5c0 <memmove+0xa>
 800a5d4:	1881      	adds	r1, r0, r2
 800a5d6:	1ad2      	subs	r2, r2, r3
 800a5d8:	42d3      	cmn	r3, r2
 800a5da:	d100      	bne.n	800a5de <memmove+0x28>
 800a5dc:	bd10      	pop	{r4, pc}
 800a5de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5e2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a5e6:	e7f7      	b.n	800a5d8 <memmove+0x22>

0800a5e8 <_free_r>:
 800a5e8:	b538      	push	{r3, r4, r5, lr}
 800a5ea:	4605      	mov	r5, r0
 800a5ec:	2900      	cmp	r1, #0
 800a5ee:	d043      	beq.n	800a678 <_free_r+0x90>
 800a5f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5f4:	1f0c      	subs	r4, r1, #4
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	bfb8      	it	lt
 800a5fa:	18e4      	addlt	r4, r4, r3
 800a5fc:	f000 f8d0 	bl	800a7a0 <__malloc_lock>
 800a600:	4a1e      	ldr	r2, [pc, #120]	; (800a67c <_free_r+0x94>)
 800a602:	6813      	ldr	r3, [r2, #0]
 800a604:	4610      	mov	r0, r2
 800a606:	b933      	cbnz	r3, 800a616 <_free_r+0x2e>
 800a608:	6063      	str	r3, [r4, #4]
 800a60a:	6014      	str	r4, [r2, #0]
 800a60c:	4628      	mov	r0, r5
 800a60e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a612:	f000 b8c6 	b.w	800a7a2 <__malloc_unlock>
 800a616:	42a3      	cmp	r3, r4
 800a618:	d90b      	bls.n	800a632 <_free_r+0x4a>
 800a61a:	6821      	ldr	r1, [r4, #0]
 800a61c:	1862      	adds	r2, r4, r1
 800a61e:	4293      	cmp	r3, r2
 800a620:	bf01      	itttt	eq
 800a622:	681a      	ldreq	r2, [r3, #0]
 800a624:	685b      	ldreq	r3, [r3, #4]
 800a626:	1852      	addeq	r2, r2, r1
 800a628:	6022      	streq	r2, [r4, #0]
 800a62a:	6063      	str	r3, [r4, #4]
 800a62c:	6004      	str	r4, [r0, #0]
 800a62e:	e7ed      	b.n	800a60c <_free_r+0x24>
 800a630:	4613      	mov	r3, r2
 800a632:	685a      	ldr	r2, [r3, #4]
 800a634:	b10a      	cbz	r2, 800a63a <_free_r+0x52>
 800a636:	42a2      	cmp	r2, r4
 800a638:	d9fa      	bls.n	800a630 <_free_r+0x48>
 800a63a:	6819      	ldr	r1, [r3, #0]
 800a63c:	1858      	adds	r0, r3, r1
 800a63e:	42a0      	cmp	r0, r4
 800a640:	d10b      	bne.n	800a65a <_free_r+0x72>
 800a642:	6820      	ldr	r0, [r4, #0]
 800a644:	4401      	add	r1, r0
 800a646:	1858      	adds	r0, r3, r1
 800a648:	4282      	cmp	r2, r0
 800a64a:	6019      	str	r1, [r3, #0]
 800a64c:	d1de      	bne.n	800a60c <_free_r+0x24>
 800a64e:	6810      	ldr	r0, [r2, #0]
 800a650:	6852      	ldr	r2, [r2, #4]
 800a652:	4401      	add	r1, r0
 800a654:	6019      	str	r1, [r3, #0]
 800a656:	605a      	str	r2, [r3, #4]
 800a658:	e7d8      	b.n	800a60c <_free_r+0x24>
 800a65a:	d902      	bls.n	800a662 <_free_r+0x7a>
 800a65c:	230c      	movs	r3, #12
 800a65e:	602b      	str	r3, [r5, #0]
 800a660:	e7d4      	b.n	800a60c <_free_r+0x24>
 800a662:	6820      	ldr	r0, [r4, #0]
 800a664:	1821      	adds	r1, r4, r0
 800a666:	428a      	cmp	r2, r1
 800a668:	bf01      	itttt	eq
 800a66a:	6811      	ldreq	r1, [r2, #0]
 800a66c:	6852      	ldreq	r2, [r2, #4]
 800a66e:	1809      	addeq	r1, r1, r0
 800a670:	6021      	streq	r1, [r4, #0]
 800a672:	6062      	str	r2, [r4, #4]
 800a674:	605c      	str	r4, [r3, #4]
 800a676:	e7c9      	b.n	800a60c <_free_r+0x24>
 800a678:	bd38      	pop	{r3, r4, r5, pc}
 800a67a:	bf00      	nop
 800a67c:	2000022c 	.word	0x2000022c

0800a680 <_malloc_r>:
 800a680:	b570      	push	{r4, r5, r6, lr}
 800a682:	1ccd      	adds	r5, r1, #3
 800a684:	f025 0503 	bic.w	r5, r5, #3
 800a688:	3508      	adds	r5, #8
 800a68a:	2d0c      	cmp	r5, #12
 800a68c:	bf38      	it	cc
 800a68e:	250c      	movcc	r5, #12
 800a690:	2d00      	cmp	r5, #0
 800a692:	4606      	mov	r6, r0
 800a694:	db01      	blt.n	800a69a <_malloc_r+0x1a>
 800a696:	42a9      	cmp	r1, r5
 800a698:	d903      	bls.n	800a6a2 <_malloc_r+0x22>
 800a69a:	230c      	movs	r3, #12
 800a69c:	6033      	str	r3, [r6, #0]
 800a69e:	2000      	movs	r0, #0
 800a6a0:	bd70      	pop	{r4, r5, r6, pc}
 800a6a2:	f000 f87d 	bl	800a7a0 <__malloc_lock>
 800a6a6:	4a21      	ldr	r2, [pc, #132]	; (800a72c <_malloc_r+0xac>)
 800a6a8:	6814      	ldr	r4, [r2, #0]
 800a6aa:	4621      	mov	r1, r4
 800a6ac:	b991      	cbnz	r1, 800a6d4 <_malloc_r+0x54>
 800a6ae:	4c20      	ldr	r4, [pc, #128]	; (800a730 <_malloc_r+0xb0>)
 800a6b0:	6823      	ldr	r3, [r4, #0]
 800a6b2:	b91b      	cbnz	r3, 800a6bc <_malloc_r+0x3c>
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	f000 f863 	bl	800a780 <_sbrk_r>
 800a6ba:	6020      	str	r0, [r4, #0]
 800a6bc:	4629      	mov	r1, r5
 800a6be:	4630      	mov	r0, r6
 800a6c0:	f000 f85e 	bl	800a780 <_sbrk_r>
 800a6c4:	1c43      	adds	r3, r0, #1
 800a6c6:	d124      	bne.n	800a712 <_malloc_r+0x92>
 800a6c8:	230c      	movs	r3, #12
 800a6ca:	4630      	mov	r0, r6
 800a6cc:	6033      	str	r3, [r6, #0]
 800a6ce:	f000 f868 	bl	800a7a2 <__malloc_unlock>
 800a6d2:	e7e4      	b.n	800a69e <_malloc_r+0x1e>
 800a6d4:	680b      	ldr	r3, [r1, #0]
 800a6d6:	1b5b      	subs	r3, r3, r5
 800a6d8:	d418      	bmi.n	800a70c <_malloc_r+0x8c>
 800a6da:	2b0b      	cmp	r3, #11
 800a6dc:	d90f      	bls.n	800a6fe <_malloc_r+0x7e>
 800a6de:	600b      	str	r3, [r1, #0]
 800a6e0:	18cc      	adds	r4, r1, r3
 800a6e2:	50cd      	str	r5, [r1, r3]
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	f000 f85c 	bl	800a7a2 <__malloc_unlock>
 800a6ea:	f104 000b 	add.w	r0, r4, #11
 800a6ee:	1d23      	adds	r3, r4, #4
 800a6f0:	f020 0007 	bic.w	r0, r0, #7
 800a6f4:	1ac3      	subs	r3, r0, r3
 800a6f6:	d0d3      	beq.n	800a6a0 <_malloc_r+0x20>
 800a6f8:	425a      	negs	r2, r3
 800a6fa:	50e2      	str	r2, [r4, r3]
 800a6fc:	e7d0      	b.n	800a6a0 <_malloc_r+0x20>
 800a6fe:	684b      	ldr	r3, [r1, #4]
 800a700:	428c      	cmp	r4, r1
 800a702:	bf16      	itet	ne
 800a704:	6063      	strne	r3, [r4, #4]
 800a706:	6013      	streq	r3, [r2, #0]
 800a708:	460c      	movne	r4, r1
 800a70a:	e7eb      	b.n	800a6e4 <_malloc_r+0x64>
 800a70c:	460c      	mov	r4, r1
 800a70e:	6849      	ldr	r1, [r1, #4]
 800a710:	e7cc      	b.n	800a6ac <_malloc_r+0x2c>
 800a712:	1cc4      	adds	r4, r0, #3
 800a714:	f024 0403 	bic.w	r4, r4, #3
 800a718:	42a0      	cmp	r0, r4
 800a71a:	d005      	beq.n	800a728 <_malloc_r+0xa8>
 800a71c:	1a21      	subs	r1, r4, r0
 800a71e:	4630      	mov	r0, r6
 800a720:	f000 f82e 	bl	800a780 <_sbrk_r>
 800a724:	3001      	adds	r0, #1
 800a726:	d0cf      	beq.n	800a6c8 <_malloc_r+0x48>
 800a728:	6025      	str	r5, [r4, #0]
 800a72a:	e7db      	b.n	800a6e4 <_malloc_r+0x64>
 800a72c:	2000022c 	.word	0x2000022c
 800a730:	20000230 	.word	0x20000230

0800a734 <_realloc_r>:
 800a734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a736:	4607      	mov	r7, r0
 800a738:	4614      	mov	r4, r2
 800a73a:	460e      	mov	r6, r1
 800a73c:	b921      	cbnz	r1, 800a748 <_realloc_r+0x14>
 800a73e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a742:	4611      	mov	r1, r2
 800a744:	f7ff bf9c 	b.w	800a680 <_malloc_r>
 800a748:	b922      	cbnz	r2, 800a754 <_realloc_r+0x20>
 800a74a:	f7ff ff4d 	bl	800a5e8 <_free_r>
 800a74e:	4625      	mov	r5, r4
 800a750:	4628      	mov	r0, r5
 800a752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a754:	f000 f826 	bl	800a7a4 <_malloc_usable_size_r>
 800a758:	42a0      	cmp	r0, r4
 800a75a:	d20f      	bcs.n	800a77c <_realloc_r+0x48>
 800a75c:	4621      	mov	r1, r4
 800a75e:	4638      	mov	r0, r7
 800a760:	f7ff ff8e 	bl	800a680 <_malloc_r>
 800a764:	4605      	mov	r5, r0
 800a766:	2800      	cmp	r0, #0
 800a768:	d0f2      	beq.n	800a750 <_realloc_r+0x1c>
 800a76a:	4631      	mov	r1, r6
 800a76c:	4622      	mov	r2, r4
 800a76e:	f7ff ff17 	bl	800a5a0 <memcpy>
 800a772:	4631      	mov	r1, r6
 800a774:	4638      	mov	r0, r7
 800a776:	f7ff ff37 	bl	800a5e8 <_free_r>
 800a77a:	e7e9      	b.n	800a750 <_realloc_r+0x1c>
 800a77c:	4635      	mov	r5, r6
 800a77e:	e7e7      	b.n	800a750 <_realloc_r+0x1c>

0800a780 <_sbrk_r>:
 800a780:	b538      	push	{r3, r4, r5, lr}
 800a782:	2300      	movs	r3, #0
 800a784:	4c05      	ldr	r4, [pc, #20]	; (800a79c <_sbrk_r+0x1c>)
 800a786:	4605      	mov	r5, r0
 800a788:	4608      	mov	r0, r1
 800a78a:	6023      	str	r3, [r4, #0]
 800a78c:	f7ff fb48 	bl	8009e20 <_sbrk>
 800a790:	1c43      	adds	r3, r0, #1
 800a792:	d102      	bne.n	800a79a <_sbrk_r+0x1a>
 800a794:	6823      	ldr	r3, [r4, #0]
 800a796:	b103      	cbz	r3, 800a79a <_sbrk_r+0x1a>
 800a798:	602b      	str	r3, [r5, #0]
 800a79a:	bd38      	pop	{r3, r4, r5, pc}
 800a79c:	20002ec4 	.word	0x20002ec4

0800a7a0 <__malloc_lock>:
 800a7a0:	4770      	bx	lr

0800a7a2 <__malloc_unlock>:
 800a7a2:	4770      	bx	lr

0800a7a4 <_malloc_usable_size_r>:
 800a7a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7a8:	1f18      	subs	r0, r3, #4
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	bfbc      	itt	lt
 800a7ae:	580b      	ldrlt	r3, [r1, r0]
 800a7b0:	18c0      	addlt	r0, r0, r3
 800a7b2:	4770      	bx	lr

0800a7b4 <sqrt>:
 800a7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b8:	b08b      	sub	sp, #44	; 0x2c
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	460d      	mov	r5, r1
 800a7be:	f000 f84d 	bl	800a85c <__ieee754_sqrt>
 800a7c2:	4b24      	ldr	r3, [pc, #144]	; (800a854 <sqrt+0xa0>)
 800a7c4:	4680      	mov	r8, r0
 800a7c6:	f993 a000 	ldrsb.w	sl, [r3]
 800a7ca:	4689      	mov	r9, r1
 800a7cc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a7d0:	d02b      	beq.n	800a82a <sqrt+0x76>
 800a7d2:	4622      	mov	r2, r4
 800a7d4:	462b      	mov	r3, r5
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	4629      	mov	r1, r5
 800a7da:	f7f6 f90d 	bl	80009f8 <__aeabi_dcmpun>
 800a7de:	4683      	mov	fp, r0
 800a7e0:	bb18      	cbnz	r0, 800a82a <sqrt+0x76>
 800a7e2:	2600      	movs	r6, #0
 800a7e4:	2700      	movs	r7, #0
 800a7e6:	4632      	mov	r2, r6
 800a7e8:	463b      	mov	r3, r7
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	4629      	mov	r1, r5
 800a7ee:	f7f6 f8db 	bl	80009a8 <__aeabi_dcmplt>
 800a7f2:	b1d0      	cbz	r0, 800a82a <sqrt+0x76>
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	9300      	str	r3, [sp, #0]
 800a7f8:	4b17      	ldr	r3, [pc, #92]	; (800a858 <sqrt+0xa4>)
 800a7fa:	f8cd b020 	str.w	fp, [sp, #32]
 800a7fe:	9301      	str	r3, [sp, #4]
 800a800:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a804:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a808:	f1ba 0f00 	cmp.w	sl, #0
 800a80c:	d112      	bne.n	800a834 <sqrt+0x80>
 800a80e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a812:	4668      	mov	r0, sp
 800a814:	f000 f8ce 	bl	800a9b4 <matherr>
 800a818:	b1b8      	cbz	r0, 800a84a <sqrt+0x96>
 800a81a:	9b08      	ldr	r3, [sp, #32]
 800a81c:	b11b      	cbz	r3, 800a826 <sqrt+0x72>
 800a81e:	f7ff fb85 	bl	8009f2c <__errno>
 800a822:	9b08      	ldr	r3, [sp, #32]
 800a824:	6003      	str	r3, [r0, #0]
 800a826:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800a82a:	4640      	mov	r0, r8
 800a82c:	4649      	mov	r1, r9
 800a82e:	b00b      	add	sp, #44	; 0x2c
 800a830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a834:	4632      	mov	r2, r6
 800a836:	463b      	mov	r3, r7
 800a838:	4630      	mov	r0, r6
 800a83a:	4639      	mov	r1, r7
 800a83c:	f7f5 ff6c 	bl	8000718 <__aeabi_ddiv>
 800a840:	f1ba 0f02 	cmp.w	sl, #2
 800a844:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a848:	d1e3      	bne.n	800a812 <sqrt+0x5e>
 800a84a:	f7ff fb6f 	bl	8009f2c <__errno>
 800a84e:	2321      	movs	r3, #33	; 0x21
 800a850:	6003      	str	r3, [r0, #0]
 800a852:	e7e2      	b.n	800a81a <sqrt+0x66>
 800a854:	200001c4 	.word	0x200001c4
 800a858:	0800ae07 	.word	0x0800ae07

0800a85c <__ieee754_sqrt>:
 800a85c:	4b54      	ldr	r3, [pc, #336]	; (800a9b0 <__ieee754_sqrt+0x154>)
 800a85e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a862:	438b      	bics	r3, r1
 800a864:	4606      	mov	r6, r0
 800a866:	460d      	mov	r5, r1
 800a868:	460a      	mov	r2, r1
 800a86a:	460c      	mov	r4, r1
 800a86c:	d10f      	bne.n	800a88e <__ieee754_sqrt+0x32>
 800a86e:	4602      	mov	r2, r0
 800a870:	460b      	mov	r3, r1
 800a872:	f7f5 fe27 	bl	80004c4 <__aeabi_dmul>
 800a876:	4602      	mov	r2, r0
 800a878:	460b      	mov	r3, r1
 800a87a:	4630      	mov	r0, r6
 800a87c:	4629      	mov	r1, r5
 800a87e:	f7f5 fc6b 	bl	8000158 <__adddf3>
 800a882:	4606      	mov	r6, r0
 800a884:	460d      	mov	r5, r1
 800a886:	4630      	mov	r0, r6
 800a888:	4629      	mov	r1, r5
 800a88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a88e:	2900      	cmp	r1, #0
 800a890:	4607      	mov	r7, r0
 800a892:	4603      	mov	r3, r0
 800a894:	dc0e      	bgt.n	800a8b4 <__ieee754_sqrt+0x58>
 800a896:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a89a:	ea5c 0707 	orrs.w	r7, ip, r7
 800a89e:	d0f2      	beq.n	800a886 <__ieee754_sqrt+0x2a>
 800a8a0:	b141      	cbz	r1, 800a8b4 <__ieee754_sqrt+0x58>
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	f7f5 fc55 	bl	8000154 <__aeabi_dsub>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	f7f5 ff33 	bl	8000718 <__aeabi_ddiv>
 800a8b2:	e7e6      	b.n	800a882 <__ieee754_sqrt+0x26>
 800a8b4:	1512      	asrs	r2, r2, #20
 800a8b6:	d074      	beq.n	800a9a2 <__ieee754_sqrt+0x146>
 800a8b8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a8bc:	07d5      	lsls	r5, r2, #31
 800a8be:	f04f 0500 	mov.w	r5, #0
 800a8c2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a8c6:	bf48      	it	mi
 800a8c8:	0fd9      	lsrmi	r1, r3, #31
 800a8ca:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800a8ce:	bf44      	itt	mi
 800a8d0:	005b      	lslmi	r3, r3, #1
 800a8d2:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800a8d6:	1051      	asrs	r1, r2, #1
 800a8d8:	0fda      	lsrs	r2, r3, #31
 800a8da:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800a8de:	4628      	mov	r0, r5
 800a8e0:	2216      	movs	r2, #22
 800a8e2:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a8e6:	005b      	lsls	r3, r3, #1
 800a8e8:	1987      	adds	r7, r0, r6
 800a8ea:	42a7      	cmp	r7, r4
 800a8ec:	bfde      	ittt	le
 800a8ee:	19b8      	addle	r0, r7, r6
 800a8f0:	1be4      	suble	r4, r4, r7
 800a8f2:	19ad      	addle	r5, r5, r6
 800a8f4:	0fdf      	lsrs	r7, r3, #31
 800a8f6:	3a01      	subs	r2, #1
 800a8f8:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800a8fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a900:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a904:	d1f0      	bne.n	800a8e8 <__ieee754_sqrt+0x8c>
 800a906:	f04f 0c20 	mov.w	ip, #32
 800a90a:	4696      	mov	lr, r2
 800a90c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a910:	4284      	cmp	r4, r0
 800a912:	eb06 070e 	add.w	r7, r6, lr
 800a916:	dc02      	bgt.n	800a91e <__ieee754_sqrt+0xc2>
 800a918:	d112      	bne.n	800a940 <__ieee754_sqrt+0xe4>
 800a91a:	429f      	cmp	r7, r3
 800a91c:	d810      	bhi.n	800a940 <__ieee754_sqrt+0xe4>
 800a91e:	2f00      	cmp	r7, #0
 800a920:	eb07 0e06 	add.w	lr, r7, r6
 800a924:	da42      	bge.n	800a9ac <__ieee754_sqrt+0x150>
 800a926:	f1be 0f00 	cmp.w	lr, #0
 800a92a:	db3f      	blt.n	800a9ac <__ieee754_sqrt+0x150>
 800a92c:	f100 0801 	add.w	r8, r0, #1
 800a930:	1a24      	subs	r4, r4, r0
 800a932:	4640      	mov	r0, r8
 800a934:	429f      	cmp	r7, r3
 800a936:	bf88      	it	hi
 800a938:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800a93c:	1bdb      	subs	r3, r3, r7
 800a93e:	4432      	add	r2, r6
 800a940:	0064      	lsls	r4, r4, #1
 800a942:	f1bc 0c01 	subs.w	ip, ip, #1
 800a946:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800a94a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a94e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a952:	d1dd      	bne.n	800a910 <__ieee754_sqrt+0xb4>
 800a954:	4323      	orrs	r3, r4
 800a956:	d006      	beq.n	800a966 <__ieee754_sqrt+0x10a>
 800a958:	1c54      	adds	r4, r2, #1
 800a95a:	bf0b      	itete	eq
 800a95c:	4662      	moveq	r2, ip
 800a95e:	3201      	addne	r2, #1
 800a960:	3501      	addeq	r5, #1
 800a962:	f022 0201 	bicne.w	r2, r2, #1
 800a966:	106b      	asrs	r3, r5, #1
 800a968:	0852      	lsrs	r2, r2, #1
 800a96a:	07e8      	lsls	r0, r5, #31
 800a96c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a970:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a974:	bf48      	it	mi
 800a976:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a97a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800a97e:	4616      	mov	r6, r2
 800a980:	e781      	b.n	800a886 <__ieee754_sqrt+0x2a>
 800a982:	0adc      	lsrs	r4, r3, #11
 800a984:	3915      	subs	r1, #21
 800a986:	055b      	lsls	r3, r3, #21
 800a988:	2c00      	cmp	r4, #0
 800a98a:	d0fa      	beq.n	800a982 <__ieee754_sqrt+0x126>
 800a98c:	02e6      	lsls	r6, r4, #11
 800a98e:	d50a      	bpl.n	800a9a6 <__ieee754_sqrt+0x14a>
 800a990:	f1c2 0020 	rsb	r0, r2, #32
 800a994:	fa23 f000 	lsr.w	r0, r3, r0
 800a998:	1e55      	subs	r5, r2, #1
 800a99a:	4093      	lsls	r3, r2
 800a99c:	4304      	orrs	r4, r0
 800a99e:	1b4a      	subs	r2, r1, r5
 800a9a0:	e78a      	b.n	800a8b8 <__ieee754_sqrt+0x5c>
 800a9a2:	4611      	mov	r1, r2
 800a9a4:	e7f0      	b.n	800a988 <__ieee754_sqrt+0x12c>
 800a9a6:	0064      	lsls	r4, r4, #1
 800a9a8:	3201      	adds	r2, #1
 800a9aa:	e7ef      	b.n	800a98c <__ieee754_sqrt+0x130>
 800a9ac:	4680      	mov	r8, r0
 800a9ae:	e7bf      	b.n	800a930 <__ieee754_sqrt+0xd4>
 800a9b0:	7ff00000 	.word	0x7ff00000

0800a9b4 <matherr>:
 800a9b4:	2000      	movs	r0, #0
 800a9b6:	4770      	bx	lr

0800a9b8 <_init>:
 800a9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ba:	bf00      	nop
 800a9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9be:	bc08      	pop	{r3}
 800a9c0:	469e      	mov	lr, r3
 800a9c2:	4770      	bx	lr

0800a9c4 <_fini>:
 800a9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9c6:	bf00      	nop
 800a9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ca:	bc08      	pop	{r3}
 800a9cc:	469e      	mov	lr, r3
 800a9ce:	4770      	bx	lr
